Sleep 1m start
GPR[SSLI]-1659778394115
GPR[ESLI]-1659778454121
Running Nopol Closure 49b with approach: smt
Timezone: America/Los_Angeles
Seed 260
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/49/seed_260/
The file script/workingdir/Nopol/Closure_49 does not exist!
script/workingdir/Nopol/Closure_49
script/workingdir/Nopol/Closure_49
classpath:  script/workingdir/Nopol/Closure_49/build/classes:script/workingdir/Nopol/Closure_49/lib/args4j.jar:script/workingdir/Nopol/Closure_49/lib/guava.jar:script/workingdir/Nopol/Closure_49/lib/json.jar:script/workingdir/Nopol/Closure_49/lib/jsr305.jar:script/workingdir/Nopol/Closure_49/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_49/build/lib/rhino.jar:script/workingdir/Nopol/Closure_49/lib/ant.jar:script/workingdir/Nopol/Closure_49/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_49/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_49/lib/jarjar.jar:script/workingdir/Nopol/Closure_49/lib/junit.jar:script/workingdir/Nopol/Closure_49/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659778476831
GPR[ESLB]-1659778536838
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_49//build/classes:script/workingdir/Nopol/Closure_49//build/test:script/workingdir/Nopol/Closure_49/build/classes:script/workingdir/Nopol/Closure_49/lib/args4j.jar:script/workingdir/Nopol/Closure_49/lib/guava.jar:script/workingdir/Nopol/Closure_49/lib/json.jar:script/workingdir/Nopol/Closure_49/lib/jsr305.jar:script/workingdir/Nopol/Closure_49/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_49/build/lib/rhino.jar:script/workingdir/Nopol/Closure_49/lib/ant.jar:script/workingdir/Nopol/Closure_49/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_49/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_49/lib/jarjar.jar:script/workingdir/Nopol/Closure_49/lib/junit.jar:script/workingdir/Nopol/Closure_49/build/test
Node: host-53
Date init: Sat 06 Aug 2022 02:35:36 AM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_49/src]
[0] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_49/build/classes/, file:script/workingdir/Nopol/Closure_49/build/test/, file:script/workingdir/Nopol/Closure_49/build/classes/, file:script/workingdir/Nopol/Closure_49/lib/args4j.jar, file:script/workingdir/Nopol/Closure_49/lib/guava.jar, file:script/workingdir/Nopol/Closure_49/lib/json.jar, file:script/workingdir/Nopol/Closure_49/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_49/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_49/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_49/lib/ant.jar, file:script/workingdir/Nopol/Closure_49/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_49/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_49/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_49/lib/junit.jar, file:script/workingdir/Nopol/Closure_49/build/test/]
[0] INFO NoPol - Statement type: PRE_THEN_COND
[0] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPropertyOrderTest, com.google.javascript.jscomp.CheckPropertyOrderTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OperaCompoundAssignFixTest, com.google.javascript.jscomp.OperaCompoundAssignFixTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnfoldCompoundAssignmentsTest, com.google.javascript.jscomp.UnfoldCompoundAssignmentsTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableShadowDeclarationCheckTest, com.google.javascript.jscomp.VariableShadowDeclarationCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.ParserTest, com.google.javascript.rhino.ParserTest, com.google.javascript.rhino.TokenStreamTest, com.google.javascript.rhino.TokenStreamTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_49/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPropertyOrderTest, com.google.javascript.jscomp.CheckPropertyOrderTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OperaCompoundAssignFixTest, com.google.javascript.jscomp.OperaCompoundAssignFixTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnfoldCompoundAssignmentsTest, com.google.javascript.jscomp.UnfoldCompoundAssignmentsTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableShadowDeclarationCheckTest, com.google.javascript.jscomp.VariableShadowDeclarationCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.ParserTest, com.google.javascript.rhino.ParserTest, com.google.javascript.rhino.TokenStreamTest, com.google.javascript.rhino.TokenStreamTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/49/seed_260/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[6] INFO NoPol - Free memory: 1 GB
[7] INFO NoPol - Maximum memory: 7 GB
[7] INFO NoPol - Total memory available to JVM: 1 GB
[8] INFO NoPol - Java version: 1.8.0_45
[9] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[9] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659778542392
GPR[ESUP]-1659778542392
GPR[SFL]-1659778542392
GPR[EFL]-1659778579126
GPR[SFP]-1659778579126
GPR[SSUN]-1659778580954
2433571
GPR[SPVATF]-1659778581518
GPR[EPVATF]-1659778588235
GPR[SPS]-1659778588235
[52516] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1609.
GPR[EPS]-1659778590292
GPR[ESUN]-1659778590292
GPR[SSUN]-1659778590292
2433571
GPR[SPVATF]-1659778590549
GPR[EPVATF]-1659778595982
GPR[SPS]-1659778595982
GPR[EPS]-1659778598279
GPR[SPVATR]-1659778598279
[60503] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1567: PRECONDITION node2.type < 28
[60936] INFO TestPatch - Running test suite to check the patch "node2.type < 28" is working
GPR[EPVATR]-1659778599172
[61396] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659778599172
[61450] INFO NoPol - --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1566,7 +1566,9 @@
       if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        if (node2.type < 28) {
+          return "Node tree inequality:" +
+          "\nTree1:\n" + toStringTree() +
+          "\n\nTree2:\n" + node2.toStringTree() +
+          "\n\nSubtree1: " + diff.nodeA.toStringTree() +
+          "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/49/seed_260/patch_56834_1ts_1659778599226.diff
GPR[ESUN]-1659778599227
GPR[SSUN]-1659778599227
2433571
GPR[SPVATF]-1659778599488
GPR[EPVATF]-1659778603393
GPR[SPS]-1659778603393
GPR[EPS]-1659778615702
GPR[SPVATR]-1659778615702
[77926] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1596: PRECONDITION node2.sourcePosition <= com.google.javascript.rhino.Node.BREAK_PROP
[78336] INFO TestPatch - Running test suite to check the patch "node2.sourcePosition <= com.google.javascript.rhino.Node.BREAK_PROP" is working
GPR[EPVATR]-1659778616580
[78804] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659778616581
[78818] INFO NoPol - --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1595,3 +1595,5 @@
     if (!isEquivalentTo(node2, false, false)) {
-      return new NodeMismatch(this, node2);
+      if (node2.sourcePosition <= com.google.javascript.rhino.Node.BREAK_PROP) {
+        return new NodeMismatch(this, node2);
+      }
     }

Saving patch at /experiment_home///results/Nopol/Closure/49/seed_260/patch_74202_2ts_1659778616594.diff
GPR[ESUN]-1659778616595
GPR[SSUN]-1659778616595
2433571
GPR[ESUN]-1659778616831
GPR[SSUN]-1659778616831
2433571
GPR[ESUN]-1659778617058
GPR[SSUN]-1659778617058
-675467674
GPR[ESUN]-1659778617227
GPR[SSUN]-1659778617227
80988634
GPR[ESUN]-1659778617395
GPR[SSUN]-1659778617395
2433571
GPR[SPVATF]-1659778617619
GPR[EPVATF]-1659778622985
GPR[SPS]-1659778622985
[86462] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1179.
GPR[EPS]-1659778624239
GPR[ESUN]-1659778624239
GPR[SSUN]-1659778624239
2433571
GPR[SPVATF]-1659778624478
GPR[EPVATF]-1659778628503
GPR[SPS]-1659778628503
[92820] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1172.
GPR[EPS]-1659778630596
GPR[ESUN]-1659778630596
GPR[SSUN]-1659778630596
2433571
GPR[ESUN]-1659778630842
GPR[SSUN]-1659778630842
2433571
GPR[ESUN]-1659778631072
GPR[SSUN]-1659778631072
2433571
GPR[SPVATF]-1659778631299
GPR[EPVATF]-1659778635211
GPR[SPS]-1659778635211
[98649] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1176.
GPR[EPS]-1659778636425
GPR[ESUN]-1659778636425
GPR[SSUN]-1659778636425
2433571
GPR[SPVATF]-1659778636664
GPR[EPVATF]-1659778640613
GPR[SPS]-1659778640613
[104181] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1175.
GPR[EPS]-1659778641957
GPR[ESUN]-1659778641957
GPR[SSUN]-1659778641957
2433571
GPR[SPVATF]-1659778642233
GPR[EPVATF]-1659778646149
GPR[SPS]-1659778646149
[111730] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1174.
GPR[EPS]-1659778649506
GPR[ESUN]-1659778649506
GPR[SSUN]-1659778649506
2433571
GPR[SPVATF]-1659778649753
GPR[EPVATF]-1659778653838
GPR[SPS]-1659778653838
[117554] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1171.
GPR[EPS]-1659778655330
GPR[ESUN]-1659778655331
GPR[SSUN]-1659778655331
2433571
GPR[ESUN]-1659778655576
GPR[SSUN]-1659778655576
2433571
GPR[SPVATF]-1659778655803
GPR[EPVATF]-1659778660796
GPR[SPS]-1659778660796
[124339] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1165.
GPR[EPS]-1659778662115
GPR[ESUN]-1659778662115
GPR[SSUN]-1659778662115
2433571
GPR[ESUN]-1659778662354
GPR[SSUN]-1659778662354
2433571
GPR[SPVATF]-1659778662581
GPR[EPVATF]-1659778666614
GPR[SPS]-1659778666615
[129972] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1157.
GPR[EPS]-1659778667748
GPR[ESUN]-1659778667748
GPR[SSUN]-1659778667748
2433571
GPR[ESUN]-1659778667988
GPR[SSUN]-1659778667988
2433571
GPR[ESUN]-1659778668221
GPR[SSUN]-1659778668221
80988634
GPR[ESUN]-1659778668392
GPR[SSUN]-1659778668392
2433571
GPR[ESUN]-1659778668616
GPR[SSUN]-1659778668616
881600600
GPR[ESUN]-1659778668799
GPR[SSUN]-1659778668799
2433571
GPR[SPVATF]-1659778669035
GPR[EPVATF]-1659778673143
GPR[SPS]-1659778673143
[136763] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1133.
GPR[EPS]-1659778674539
GPR[ESUN]-1659778674539
GPR[SSUN]-1659778674539
2433571
GPR[SPVATF]-1659778674776
GPR[EPVATF]-1659778678834
GPR[SPS]-1659778678834
[143244] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1132.
GPR[EPS]-1659778681020
GPR[ESUN]-1659778681020
GPR[SSUN]-1659778681020
2433571
GPR[SPVATF]-1659778681418
GPR[EPVATF]-1659778686915
GPR[SPS]-1659778686915
[150395] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int LOCAL_BLOCK_PROP = -3;

    public static final int OBJECT_IDS_PROP = -2;

    public static final int CATCH_SCOPE_PROP = -1;

    public static final int LABEL_ID_PROP = 0;

    public static final int TARGET_PROP = 1;

    public static final int BREAK_PROP = 2;

    public static final int CONTINUE_PROP = 3;

    public static final int ENUM_PROP = 4;

    public static final int FUNCTION_PROP = 5;

    public static final int TEMP_PROP = 6;

    public static final int LOCAL_PROP = 7;

    public static final int CODEOFFSET_PROP = 8;

    public static final int FIXUPS_PROP = 9;

    public static final int VARS_PROP = 10;

    public static final int USES_PROP = 11;

    public static final int REGEXP_PROP = 12;

    public static final int CASES_PROP = 13;

    public static final int DEFAULT_PROP = 14;

    public static final int CASEARRAY_PROP = 15;

    public static final int SOURCENAME_PROP = 16;

    public static final int TYPE_PROP = 17;

    public static final int SPECIAL_PROP_PROP = 18;

    public static final int LABEL_PROP = 19;

    public static final int FINALLY_PROP = 20;

    public static final int LOCALCOUNT_PROP = 21;

    public static final int TARGETBLOCK_PROP = 22;

    public static final int VARIABLE_PROP = 23;

    public static final int LASTUSE_PROP = 24;

    public static final int ISNUMBER_PROP = 25;

    public static final int DIRECTCALL_PROP = 26;

    public static final int SPECIALCALL_PROP = 27;

    public static final int DEBUGSOURCE_PROP = 28;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int SKIP_INDEXES_PROP = 31;

    public static final int INCRDECR_PROP = 32;

    public static final int MEMBER_TYPE_PROP = 33;

    public static final int NAME_PROP = 34;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int LAST_PROP = 53;

    public static final int BOTH = 0;

    public static final int LEFT = 1;

    public static final int RIGHT = 2;

    public static final int NON_SPECIALCALL = 0;

    public static final int SPECIALCALL_EVAL = 1;

    public static final int SPECIALCALL_WITH = 2;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    public static final int PROPERTY_FLAG = 0x1;

    public static final int ATTRIBUTE_FLAG = 0x2;

    public static final int DESCENDANTS_FLAG = 0x4;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP :
                return "local_block";
            case com.google.javascript.rhino.Node.OBJECT_IDS_PROP :
                return "object_ids_prop";
            case com.google.javascript.rhino.Node.CATCH_SCOPE_PROP :
                return "catch_scope_prop";
            case com.google.javascript.rhino.Node.LABEL_ID_PROP :
                return "label_id_prop";
            case com.google.javascript.rhino.Node.TARGET_PROP :
                return "target";
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.BREAK_PROP :
                return "break";
            case com.google.javascript.rhino.Node.CONTINUE_PROP :
                return "continue";
            case com.google.javascript.rhino.Node.ENUM_PROP :
                return "enum";
            case com.google.javascript.rhino.Node.FUNCTION_PROP :
                return "function";
            case com.google.javascript.rhino.Node.TEMP_PROP :
                return "temp";
            case com.google.javascript.rhino.Node.LOCAL_PROP :
                return "local";
            case com.google.javascript.rhino.Node.CODEOFFSET_PROP :
                return "codeoffset";
            case com.google.javascript.rhino.Node.FIXUPS_PROP :
                return "fixups";
            case com.google.javascript.rhino.Node.VARS_PROP :
                return "vars";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.USES_PROP :
                return "uses";
            case com.google.javascript.rhino.Node.REGEXP_PROP :
                return "regexp";
            case com.google.javascript.rhino.Node.CASES_PROP :
                return "cases";
            case com.google.javascript.rhino.Node.DEFAULT_PROP :
                return "default";
            case com.google.javascript.rhino.Node.CASEARRAY_PROP :
                return "casearray";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.TYPE_PROP :
                return "type";
            case com.google.javascript.rhino.Node.SPECIAL_PROP_PROP :
                return "special_prop";
            case com.google.javascript.rhino.Node.LABEL_PROP :
                return "label";
            case com.google.javascript.rhino.Node.FINALLY_PROP :
                return "finally";
            case com.google.javascript.rhino.Node.LOCALCOUNT_PROP :
                return "localcount";
            case com.google.javascript.rhino.Node.TARGETBLOCK_PROP :
                return "targetblock";
            case com.google.javascript.rhino.Node.VARIABLE_PROP :
                return "variable";
            case com.google.javascript.rhino.Node.LASTUSE_PROP :
                return "lastuse";
            case com.google.javascript.rhino.Node.ISNUMBER_PROP :
                return "isnumber";
            case com.google.javascript.rhino.Node.DIRECTCALL_PROP :
                return "directcall";
            case com.google.javascript.rhino.Node.SPECIALCALL_PROP :
                return "specialcall";
            case com.google.javascript.rhino.Node.DEBUGSOURCE_PROP :
                return "debugsource";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.SKIP_INDEXES_PROP :
                return "skip_indexes";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.MEMBER_TYPE_PROP :
                return "member_type";
            case com.google.javascript.rhino.Node.NAME_PROP :
                return "name";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            default :
                com.google.javascript.rhino.Kit.codeBug();
        }
        return null;
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && (getDouble() == ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble());
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private abstract static class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        if (last != null) {
            last.next = children;
        }
        last = children.getLastSibling();
        if (first == null) {
            first = children;
        }
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node != null, "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.parent = this;
        newChild.next = node.next;
        node.next = newChild;
        if (last == node) {
            last = newChild;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            com.google.javascript.rhino.Kit.codeBug();
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        if (com.google.javascript.rhino.Token.shouldPrintTrees()) {
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            toString(sb, printSource, printAnnotations, printType);
            return sb.toString();
        }
        return java.lang.String.valueOf(type);
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        if (com.google.javascript.rhino.Token.printTrees) {
            sb.append(com.google.javascript.rhino.Token.name(type));
            if (this instanceof com.google.javascript.rhino.Node.StringNode) {
                sb.append(' ');
                sb.append(getString());
            } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
                sb.append(' ');
                if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                    sb.append("<invalid>");
                } else {
                    sb.append(first.getString());
                }
            } else if (this instanceof com.google.javascript.rhino.ScriptOrFnNode) {
                com.google.javascript.rhino.ScriptOrFnNode sof = ((com.google.javascript.rhino.ScriptOrFnNode) (this));
                if (this instanceof com.google.javascript.rhino.FunctionNode) {
                    com.google.javascript.rhino.FunctionNode fn = ((com.google.javascript.rhino.FunctionNode) (this));
                    sb.append(' ');
                    sb.append(fn.getFunctionName());
                }
                if (printSource) {
                    sb.append(" [source name: ");
                    sb.append(sof.getSourceName());
                    sb.append("] [encoded source length: ");
                    sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());
                    sb.append("] [base line: ");
                    sb.append(sof.getBaseLineno());
                    sb.append("] [end line: ");
                    sb.append(sof.getEndLineno());
                    sb.append(']');
                }
            } else if (type == com.google.javascript.rhino.Token.NUMBER) {
                sb.append(' ');
                sb.append(getDouble());
            }
            if (printSource) {
                int lineno = getLineno();
                if (lineno != (-1)) {
                    sb.append(' ');
                    sb.append(lineno);
                }
            }
            if (printAnnotations) {
                int[] keys = getSortedPropTypes();
                for (int i = 0; i < keys.length; i++) {
                    int type = keys[i];
                    com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                    sb.append(" [");
                    sb.append(com.google.javascript.rhino.Node.propToString(type));
                    sb.append(": ");
                    java.lang.String value;
                    switch (type) {
                        case com.google.javascript.rhino.Node.TARGETBLOCK_PROP :
                            value = "target block property";
                            break;
                        case com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP :
                            value = "last local block";
                            break;
                        case com.google.javascript.rhino.Node.ISNUMBER_PROP :
                            switch (x.getIntValue()) {
                                case com.google.javascript.rhino.Node.BOTH :
                                    value = "both";
                                    break;
                                case com.google.javascript.rhino.Node.RIGHT :
                                    value = "right";
                                    break;
                                case com.google.javascript.rhino.Node.LEFT :
                                    value = "left";
                                    break;
                                default :
                                    throw com.google.javascript.rhino.Kit.codeBug();
                            }
                            break;
                        case com.google.javascript.rhino.Node.SPECIALCALL_PROP :
                            switch (x.getIntValue()) {
                                case com.google.javascript.rhino.Node.SPECIALCALL_EVAL :
                                    value = "eval";
                                    break;
                                case com.google.javascript.rhino.Node.SPECIALCALL_WITH :
                                    value = "with";
                                    break;
                                default :
                                    throw com.google.javascript.rhino.Kit.codeBug();
                            }
                            break;
                        default :
                            boolean spoonDefaultValue = false;
                            try {
                                spoonDefaultValue = true;
                            } catch (java.lang.Exception __NopolProcessorException) {
                            }
                            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                            if (fr.inria.lille.commons.trace.RuntimeValues.instance(13).isEnabled()) {
                                fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectionStarts();
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.FIXUPS_PROP",com.google.javascript.rhino.Node.FIXUPS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.ISNUMBER_PROP",com.google.javascript.rhino.Node.ISNUMBER_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.CODEOFFSET_PROP",com.google.javascript.rhino.Node.CODEOFFSET_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.LOCAL_PROP",com.google.javascript.rhino.Node.LOCAL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_PROP",com.google.javascript.rhino.Node.SPECIALCALL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.TARGET_PROP",com.google.javascript.rhino.Node.TARGET_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.OBJECT_IDS_PROP",com.google.javascript.rhino.Node.OBJECT_IDS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.LOCALCOUNT_PROP",com.google.javascript.rhino.Node.LOCALCOUNT_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.FUNCTION_PROP",com.google.javascript.rhino.Node.FUNCTION_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.LABEL_PROP",com.google.javascript.rhino.Node.LABEL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.BOTH",com.google.javascript.rhino.Node.BOTH);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.MEMBER_TYPE_PROP",com.google.javascript.rhino.Node.MEMBER_TYPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_WITH",com.google.javascript.rhino.Node.SPECIALCALL_WITH);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.TYPE_PROP",com.google.javascript.rhino.Node.TYPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.PROPERTY_FLAG",com.google.javascript.rhino.Node.PROPERTY_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.DEFAULT_PROP",com.google.javascript.rhino.Node.DEFAULT_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.SPECIAL_PROP_PROP",com.google.javascript.rhino.Node.SPECIAL_PROP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.CONTINUE_PROP",com.google.javascript.rhino.Node.CONTINUE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.DIRECTCALL_PROP",com.google.javascript.rhino.Node.DIRECTCALL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.LABEL_ID_PROP",com.google.javascript.rhino.Node.LABEL_ID_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.ENUM_PROP",com.google.javascript.rhino.Node.ENUM_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.TARGETBLOCK_PROP",com.google.javascript.rhino.Node.TARGETBLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.TEMP_PROP",com.google.javascript.rhino.Node.TEMP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.USES_PROP",com.google.javascript.rhino.Node.USES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.VARS_PROP",com.google.javascript.rhino.Node.VARS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.REGEXP_PROP",com.google.javascript.rhino.Node.REGEXP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.LASTUSE_PROP",com.google.javascript.rhino.Node.LASTUSE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.NAME_PROP",com.google.javascript.rhino.Node.NAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.LEFT",com.google.javascript.rhino.Node.LEFT);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.ATTRIBUTE_FLAG",com.google.javascript.rhino.Node.ATTRIBUTE_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.FINALLY_PROP",com.google.javascript.rhino.Node.FINALLY_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.NON_SPECIALCALL",com.google.javascript.rhino.Node.NON_SPECIALCALL);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.CASEARRAY_PROP",com.google.javascript.rhino.Node.CASEARRAY_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.DESCENDANTS_FLAG",com.google.javascript.rhino.Node.DESCENDANTS_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.CATCH_SCOPE_PROP",com.google.javascript.rhino.Node.CATCH_SCOPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP",com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.CASES_PROP",com.google.javascript.rhino.Node.CASES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.VARIABLE_PROP",com.google.javascript.rhino.Node.VARIABLE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.SKIP_INDEXES_PROP",com.google.javascript.rhino.Node.SKIP_INDEXES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.RIGHT",com.google.javascript.rhino.Node.RIGHT);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_EVAL",com.google.javascript.rhino.Node.SPECIALCALL_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.DEBUGSOURCE_PROP",com.google.javascript.rhino.Node.DEBUGSOURCE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.BREAK_PROP",com.google.javascript.rhino.Node.BREAK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                if (com.google.javascript.rhino.Node.this.last!=null) {
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                                }
                                if (com.google.javascript.rhino.Node.this.parent!=null) {
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                                }
                                if (com.google.javascript.rhino.Node.this.next!=null) {
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                                }
                                if (com.google.javascript.rhino.Node.this.first!=null) {
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                                }
                                fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectOutput(runtimeAngelicValue);
                                fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectionEnds();
                            }
                            if (runtimeAngelicValue)
                                value = x.toString();

                            break;
                    }
                    sb.append(value);
                    sb.append(']');
                }
            }
            if (printType) {
                if (jsType != null) {
                    java.lang.String jsTypeString = jsType.toString();
                    if (jsTypeString != null) {
                        sb.append(" : ");
                        sb.append(jsTypeString);
                    }
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        if (com.google.javascript.rhino.Token.printTrees) {
            for (int i = 0; i != level; ++i) {
                sb.append("    ");
            }
            sb.append(n.toString());
            sb.append('\n');
            for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
                com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
            }
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        int lineOffset = (file == null) ? java.lang.Integer.MIN_VALUE : file.getLineOffset(getLineno());
        return lineOffset + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    @java.lang.SuppressWarnings("rawtypes")
    private static java.lang.Class getNodeClass(com.google.javascript.rhino.Node n) {
        java.lang.Class c = n.getClass();
        if ((c == com.google.javascript.rhino.FunctionNode.class) || (c == com.google.javascript.rhino.ScriptOrFnNode.class)) {
            return com.google.javascript.rhino.Node.class;
        }
        return c;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public static java.lang.String tokenToName(int token) {
        switch (token) {
            case com.google.javascript.rhino.Token.ERROR :
                return "error";
            case com.google.javascript.rhino.Token.EOF :
                return "eof";
            case com.google.javascript.rhino.Token.EOL :
                return "eol";
            case com.google.javascript.rhino.Token.ENTERWITH :
                return "enterwith";
            case com.google.javascript.rhino.Token.LEAVEWITH :
                return "leavewith";
            case com.google.javascript.rhino.Token.RETURN :
                return "return";
            case com.google.javascript.rhino.Token.GOTO :
                return "goto";
            case com.google.javascript.rhino.Token.IFEQ :
                return "ifeq";
            case com.google.javascript.rhino.Token.IFNE :
                return "ifne";
            case com.google.javascript.rhino.Token.SETNAME :
                return "setname";
            case com.google.javascript.rhino.Token.BITOR :
                return "bitor";
            case com.google.javascript.rhino.Token.BITXOR :
                return "bitxor";
            case com.google.javascript.rhino.Token.BITAND :
                return "bitand";
            case com.google.javascript.rhino.Token.EQ :
                return "eq";
            case com.google.javascript.rhino.Token.NE :
                return "ne";
            case com.google.javascript.rhino.Token.LT :
                return "lt";
            case com.google.javascript.rhino.Token.LE :
                return "le";
            case com.google.javascript.rhino.Token.GT :
                return "gt";
            case com.google.javascript.rhino.Token.GE :
                return "ge";
            case com.google.javascript.rhino.Token.LSH :
                return "lsh";
            case com.google.javascript.rhino.Token.RSH :
                return "rsh";
            case com.google.javascript.rhino.Token.URSH :
                return "ursh";
            case com.google.javascript.rhino.Token.ADD :
                return "add";
            case com.google.javascript.rhino.Token.SUB :
                return "sub";
            case com.google.javascript.rhino.Token.MUL :
                return "mul";
            case com.google.javascript.rhino.Token.DIV :
                return "div";
            case com.google.javascript.rhino.Token.MOD :
                return "mod";
            case com.google.javascript.rhino.Token.BITNOT :
                return "bitnot";
            case com.google.javascript.rhino.Token.NEG :
                return "neg";
            case com.google.javascript.rhino.Token.NEW :
                return "new";
            case com.google.javascript.rhino.Token.DELPROP :
                return "delprop";
            case com.google.javascript.rhino.Token.TYPEOF :
                return "typeof";
            case com.google.javascript.rhino.Token.GETPROP :
                return "getprop";
            case com.google.javascript.rhino.Token.SETPROP :
                return "setprop";
            case com.google.javascript.rhino.Token.GETELEM :
                return "getelem";
            case com.google.javascript.rhino.Token.SETELEM :
                return "setelem";
            case com.google.javascript.rhino.Token.CALL :
                return "call";
            case com.google.javascript.rhino.Token.NAME :
                return "name";
            case com.google.javascript.rhino.Token.NUMBER :
                return "number";
            case com.google.javascript.rhino.Token.STRING :
                return "string";
            case com.google.javascript.rhino.Token.NULL :
                return "null";
            case com.google.javascript.rhino.Token.THIS :
                return "this";
            case com.google.javascript.rhino.Token.FALSE :
                return "false";
            case com.google.javascript.rhino.Token.TRUE :
                return "true";
            case com.google.javascript.rhino.Token.SHEQ :
                return "sheq";
            case com.google.javascript.rhino.Token.SHNE :
                return "shne";
            case com.google.javascript.rhino.Token.REGEXP :
                return "regexp";
            case com.google.javascript.rhino.Token.POS :
                return "pos";
            case com.google.javascript.rhino.Token.BINDNAME :
                return "bindname";
            case com.google.javascript.rhino.Token.THROW :
                return "throw";
            case com.google.javascript.rhino.Token.IN :
                return "in";
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return "instanceof";
            case com.google.javascript.rhino.Token.GETVAR :
                return "getvar";
            case com.google.javascript.rhino.Token.SETVAR :
                return "setvar";
            case com.google.javascript.rhino.Token.TRY :
                return "try";
            case com.google.javascript.rhino.Token.TYPEOFNAME :
                return "typeofname";
            case com.google.javascript.rhino.Token.THISFN :
                return "thisfn";
            case com.google.javascript.rhino.Token.SEMI :
                return "semi";
            case com.google.javascript.rhino.Token.LB :
                return "lb";
            case com.google.javascript.rhino.Token.RB :
                return "rb";
            case com.google.javascript.rhino.Token.LC :
                return "lc";
            case com.google.javascript.rhino.Token.RC :
                return "rc";
            case com.google.javascript.rhino.Token.LP :
                return "lp";
            case com.google.javascript.rhino.Token.RP :
                return "rp";
            case com.google.javascript.rhino.Token.COMMA :
                return "comma";
            case com.google.javascript.rhino.Token.ASSIGN :
                return "assign";
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return "assign_bitor";
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return "assign_bitxor";
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return "assign_bitand";
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return "assign_lsh";
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return "assign_rsh";
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return "assign_ursh";
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return "assign_add";
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return "assign_sub";
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return "assign_mul";
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return "assign_div";
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return "assign_mod";
            case com.google.javascript.rhino.Token.HOOK :
                return "hook";
            case com.google.javascript.rhino.Token.COLON :
                return "colon";
            case com.google.javascript.rhino.Token.OR :
                return "or";
            case com.google.javascript.rhino.Token.AND :
                return "and";
            case com.google.javascript.rhino.Token.INC :
                return "inc";
            case com.google.javascript.rhino.Token.DEC :
                return "dec";
            case com.google.javascript.rhino.Token.DOT :
                return "dot";
            case com.google.javascript.rhino.Token.FUNCTION :
                return "function";
            case com.google.javascript.rhino.Token.EXPORT :
                return "export";
            case com.google.javascript.rhino.Token.IMPORT :
                return "import";
            case com.google.javascript.rhino.Token.IF :
                return "if";
            case com.google.javascript.rhino.Token.ELSE :
                return "else";
            case com.google.javascript.rhino.Token.SWITCH :
                return "switch";
            case com.google.javascript.rhino.Token.CASE :
                return "case";
            case com.google.javascript.rhino.Token.DEFAULT :
                return "default";
            case com.google.javascript.rhino.Token.WHILE :
                return "while";
            case com.google.javascript.rhino.Token.DO :
                return "do";
            case com.google.javascript.rhino.Token.FOR :
                return "for";
            case com.google.javascript.rhino.Token.BREAK :
                return "break";
            case com.google.javascript.rhino.Token.CONTINUE :
                return "continue";
            case com.google.javascript.rhino.Token.VAR :
                return "var";
            case com.google.javascript.rhino.Token.WITH :
                return "with";
            case com.google.javascript.rhino.Token.CATCH :
                return "catch";
            case com.google.javascript.rhino.Token.FINALLY :
                return "finally";
            case com.google.javascript.rhino.Token.RESERVED :
                return "reserved";
            case com.google.javascript.rhino.Token.NOT :
                return "not";
            case com.google.javascript.rhino.Token.VOID :
                return "void";
            case com.google.javascript.rhino.Token.BLOCK :
                return "block";
            case com.google.javascript.rhino.Token.ARRAYLIT :
                return "arraylit";
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return "objectlit";
            case com.google.javascript.rhino.Token.LABEL :
                return "label";
            case com.google.javascript.rhino.Token.TARGET :
                return "target";
            case com.google.javascript.rhino.Token.LOOP :
                return "loop";
            case com.google.javascript.rhino.Token.EXPR_VOID :
                return "expr_void";
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                return "expr_result";
            case com.google.javascript.rhino.Token.JSR :
                return "jsr";
            case com.google.javascript.rhino.Token.SCRIPT :
                return "script";
            case com.google.javascript.rhino.Token.EMPTY :
                return "empty";
            case com.google.javascript.rhino.Token.GET_REF :
                return "get_ref";
            case com.google.javascript.rhino.Token.REF_SPECIAL :
                return "ref_special";
        }
        return ("<unknown=" + token) + ">";
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (com.google.javascript.rhino.Node.getNodeClass(this) != com.google.javascript.rhino.Node.getNodeClass(node))) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if (type == com.google.javascript.rhino.Token.ARRAYLIT) {
            try {
                int[] indices1 = ((int[]) (getProp(com.google.javascript.rhino.Node.SKIP_INDEXES_PROP)));
                int[] indices2 = ((int[]) (node.getProp(com.google.javascript.rhino.Node.SKIP_INDEXES_PROP)));
                if (indices1 == null) {
                    if (indices2 != null) {
                        return false;
                    }
                } else if (indices2 == null) {
                    return false;
                } else if (indices1.length != indices2.length) {
                    return false;
                } else {
                    for (int i = 0; i < indices1.length; i++) {
                        if (indices1[i] != indices2[i]) {
                            return false;
                        }
                    }
                }
            } catch (java.lang.Exception e) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.STRING) {
            int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            if (quoted1 != quoted2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean hasSideEffects() {
        switch (type) {
            case com.google.javascript.rhino.Token.EXPR_VOID :
            case com.google.javascript.rhino.Token.COMMA :
                if (last != null) {
                    return last.hasSideEffects();
                } else {
                    return true;
                }
            case com.google.javascript.rhino.Token.HOOK :
                if (((first == null) || (first.next == null)) || (first.next.next == null)) {
                    com.google.javascript.rhino.Kit.codeBug();
                }
                return first.next.hasSideEffects() && first.next.next.hasSideEffects();
            case com.google.javascript.rhino.Token.ERROR :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ENTERWITH :
            case com.google.javascript.rhino.Token.LEAVEWITH :
            case com.google.javascript.rhino.Token.RETURN :
            case com.google.javascript.rhino.Token.GOTO :
            case com.google.javascript.rhino.Token.IFEQ :
            case com.google.javascript.rhino.Token.IFNE :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.SETNAME :
            case com.google.javascript.rhino.Token.SETPROP :
            case com.google.javascript.rhino.Token.SETELEM :
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.THROW :
            case com.google.javascript.rhino.Token.RETHROW :
            case com.google.javascript.rhino.Token.SETVAR :
            case com.google.javascript.rhino.Token.CATCH_SCOPE :
            case com.google.javascript.rhino.Token.RETURN_RESULT :
            case com.google.javascript.rhino.Token.SET_REF :
            case com.google.javascript.rhino.Token.DEL_REF :
            case com.google.javascript.rhino.Token.REF_CALL :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SEMI :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.EXPORT :
            case com.google.javascript.rhino.Token.IMPORT :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.ELSE :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.CONST :
            case com.google.javascript.rhino.Token.WITH :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.FINALLY :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.TARGET :
            case com.google.javascript.rhino.Token.LOOP :
            case com.google.javascript.rhino.Token.JSR :
            case com.google.javascript.rhino.Token.SETPROP_OP :
            case com.google.javascript.rhino.Token.SETELEM_OP :
            case com.google.javascript.rhino.Token.LOCAL_BLOCK :
            case com.google.javascript.rhino.Token.SET_REF_OP :
                return true;
            default :
                return false;
        }
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        com.google.javascript.rhino.Kit.codeBug();
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }
}
[150396] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659778688172
GPR[SSUN]-1659778688172
2433571
GPR[SPVATF]-1659778688711
GPR[EPVATF]-1659778693133
GPR[SPS]-1659778693133
[156088] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int LOCAL_BLOCK_PROP = -3;

    public static final int OBJECT_IDS_PROP = -2;

    public static final int CATCH_SCOPE_PROP = -1;

    public static final int LABEL_ID_PROP = 0;

    public static final int TARGET_PROP = 1;

    public static final int BREAK_PROP = 2;

    public static final int CONTINUE_PROP = 3;

    public static final int ENUM_PROP = 4;

    public static final int FUNCTION_PROP = 5;

    public static final int TEMP_PROP = 6;

    public static final int LOCAL_PROP = 7;

    public static final int CODEOFFSET_PROP = 8;

    public static final int FIXUPS_PROP = 9;

    public static final int VARS_PROP = 10;

    public static final int USES_PROP = 11;

    public static final int REGEXP_PROP = 12;

    public static final int CASES_PROP = 13;

    public static final int DEFAULT_PROP = 14;

    public static final int CASEARRAY_PROP = 15;

    public static final int SOURCENAME_PROP = 16;

    public static final int TYPE_PROP = 17;

    public static final int SPECIAL_PROP_PROP = 18;

    public static final int LABEL_PROP = 19;

    public static final int FINALLY_PROP = 20;

    public static final int LOCALCOUNT_PROP = 21;

    public static final int TARGETBLOCK_PROP = 22;

    public static final int VARIABLE_PROP = 23;

    public static final int LASTUSE_PROP = 24;

    public static final int ISNUMBER_PROP = 25;

    public static final int DIRECTCALL_PROP = 26;

    public static final int SPECIALCALL_PROP = 27;

    public static final int DEBUGSOURCE_PROP = 28;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int SKIP_INDEXES_PROP = 31;

    public static final int INCRDECR_PROP = 32;

    public static final int MEMBER_TYPE_PROP = 33;

    public static final int NAME_PROP = 34;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int LAST_PROP = 53;

    public static final int BOTH = 0;

    public static final int LEFT = 1;

    public static final int RIGHT = 2;

    public static final int NON_SPECIALCALL = 0;

    public static final int SPECIALCALL_EVAL = 1;

    public static final int SPECIALCALL_WITH = 2;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    public static final int PROPERTY_FLAG = 0x1;

    public static final int ATTRIBUTE_FLAG = 0x2;

    public static final int DESCENDANTS_FLAG = 0x4;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP :
                return "local_block";
            case com.google.javascript.rhino.Node.OBJECT_IDS_PROP :
                return "object_ids_prop";
            case com.google.javascript.rhino.Node.CATCH_SCOPE_PROP :
                return "catch_scope_prop";
            case com.google.javascript.rhino.Node.LABEL_ID_PROP :
                return "label_id_prop";
            case com.google.javascript.rhino.Node.TARGET_PROP :
                return "target";
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.BREAK_PROP :
                return "break";
            case com.google.javascript.rhino.Node.CONTINUE_PROP :
                return "continue";
            case com.google.javascript.rhino.Node.ENUM_PROP :
                return "enum";
            case com.google.javascript.rhino.Node.FUNCTION_PROP :
                return "function";
            case com.google.javascript.rhino.Node.TEMP_PROP :
                return "temp";
            case com.google.javascript.rhino.Node.LOCAL_PROP :
                return "local";
            case com.google.javascript.rhino.Node.CODEOFFSET_PROP :
                return "codeoffset";
            case com.google.javascript.rhino.Node.FIXUPS_PROP :
                return "fixups";
            case com.google.javascript.rhino.Node.VARS_PROP :
                return "vars";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.USES_PROP :
                return "uses";
            case com.google.javascript.rhino.Node.REGEXP_PROP :
                return "regexp";
            case com.google.javascript.rhino.Node.CASES_PROP :
                return "cases";
            case com.google.javascript.rhino.Node.DEFAULT_PROP :
                return "default";
            case com.google.javascript.rhino.Node.CASEARRAY_PROP :
                return "casearray";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.TYPE_PROP :
                return "type";
            case com.google.javascript.rhino.Node.SPECIAL_PROP_PROP :
                return "special_prop";
            case com.google.javascript.rhino.Node.LABEL_PROP :
                return "label";
            case com.google.javascript.rhino.Node.FINALLY_PROP :
                return "finally";
            case com.google.javascript.rhino.Node.LOCALCOUNT_PROP :
                return "localcount";
            case com.google.javascript.rhino.Node.TARGETBLOCK_PROP :
                return "targetblock";
            case com.google.javascript.rhino.Node.VARIABLE_PROP :
                return "variable";
            case com.google.javascript.rhino.Node.LASTUSE_PROP :
                return "lastuse";
            case com.google.javascript.rhino.Node.ISNUMBER_PROP :
                return "isnumber";
            case com.google.javascript.rhino.Node.DIRECTCALL_PROP :
                return "directcall";
            case com.google.javascript.rhino.Node.SPECIALCALL_PROP :
                return "specialcall";
            case com.google.javascript.rhino.Node.DEBUGSOURCE_PROP :
                return "debugsource";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.SKIP_INDEXES_PROP :
                return "skip_indexes";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.MEMBER_TYPE_PROP :
                return "member_type";
            case com.google.javascript.rhino.Node.NAME_PROP :
                return "name";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            default :
                com.google.javascript.rhino.Kit.codeBug();
        }
        return null;
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && (getDouble() == ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble());
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private abstract static class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        if (last != null) {
            last.next = children;
        }
        last = children.getLastSibling();
        if (first == null) {
            first = children;
        }
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node != null, "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.parent = this;
        newChild.next = node.next;
        node.next = newChild;
        if (last == node) {
            last = newChild;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            com.google.javascript.rhino.Kit.codeBug();
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        if (com.google.javascript.rhino.Token.shouldPrintTrees()) {
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            toString(sb, printSource, printAnnotations, printType);
            return sb.toString();
        }
        return java.lang.String.valueOf(type);
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        if (com.google.javascript.rhino.Token.printTrees) {
            sb.append(com.google.javascript.rhino.Token.name(type));
            if (this instanceof com.google.javascript.rhino.Node.StringNode) {
                sb.append(' ');
                sb.append(getString());
            } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
                sb.append(' ');
                if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                    sb.append("<invalid>");
                } else {
                    sb.append(first.getString());
                }
            } else if (this instanceof com.google.javascript.rhino.ScriptOrFnNode) {
                com.google.javascript.rhino.ScriptOrFnNode sof = ((com.google.javascript.rhino.ScriptOrFnNode) (this));
                if (this instanceof com.google.javascript.rhino.FunctionNode) {
                    com.google.javascript.rhino.FunctionNode fn = ((com.google.javascript.rhino.FunctionNode) (this));
                    sb.append(' ');
                    sb.append(fn.getFunctionName());
                }
                if (printSource) {
                    sb.append(" [source name: ");
                    sb.append(sof.getSourceName());
                    sb.append("] [encoded source length: ");
                    sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());
                    sb.append("] [base line: ");
                    sb.append(sof.getBaseLineno());
                    sb.append("] [end line: ");
                    sb.append(sof.getEndLineno());
                    sb.append(']');
                }
            } else if (type == com.google.javascript.rhino.Token.NUMBER) {
                sb.append(' ');
                sb.append(getDouble());
            }
            if (printSource) {
                int lineno = getLineno();
                if (lineno != (-1)) {
                    sb.append(' ');
                    sb.append(lineno);
                }
            }
            if (printAnnotations) {
                int[] keys = getSortedPropTypes();
                for (int i = 0; i < keys.length; i++) {
                    int type = keys[i];
                    com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                    sb.append(" [");
                    sb.append(com.google.javascript.rhino.Node.propToString(type));
                    sb.append(": ");
                    java.lang.String value;
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(14).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.FIXUPS_PROP",com.google.javascript.rhino.Node.FIXUPS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.ISNUMBER_PROP",com.google.javascript.rhino.Node.ISNUMBER_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.CODEOFFSET_PROP",com.google.javascript.rhino.Node.CODEOFFSET_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.LOCAL_PROP",com.google.javascript.rhino.Node.LOCAL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_PROP",com.google.javascript.rhino.Node.SPECIALCALL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.TARGET_PROP",com.google.javascript.rhino.Node.TARGET_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.OBJECT_IDS_PROP",com.google.javascript.rhino.Node.OBJECT_IDS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.LOCALCOUNT_PROP",com.google.javascript.rhino.Node.LOCALCOUNT_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.FUNCTION_PROP",com.google.javascript.rhino.Node.FUNCTION_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.LABEL_PROP",com.google.javascript.rhino.Node.LABEL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.BOTH",com.google.javascript.rhino.Node.BOTH);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.MEMBER_TYPE_PROP",com.google.javascript.rhino.Node.MEMBER_TYPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_WITH",com.google.javascript.rhino.Node.SPECIALCALL_WITH);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.TYPE_PROP",com.google.javascript.rhino.Node.TYPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.PROPERTY_FLAG",com.google.javascript.rhino.Node.PROPERTY_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.DEFAULT_PROP",com.google.javascript.rhino.Node.DEFAULT_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.SPECIAL_PROP_PROP",com.google.javascript.rhino.Node.SPECIAL_PROP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.CONTINUE_PROP",com.google.javascript.rhino.Node.CONTINUE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.DIRECTCALL_PROP",com.google.javascript.rhino.Node.DIRECTCALL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.LABEL_ID_PROP",com.google.javascript.rhino.Node.LABEL_ID_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.ENUM_PROP",com.google.javascript.rhino.Node.ENUM_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.TARGETBLOCK_PROP",com.google.javascript.rhino.Node.TARGETBLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.TEMP_PROP",com.google.javascript.rhino.Node.TEMP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.USES_PROP",com.google.javascript.rhino.Node.USES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.VARS_PROP",com.google.javascript.rhino.Node.VARS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.REGEXP_PROP",com.google.javascript.rhino.Node.REGEXP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.LASTUSE_PROP",com.google.javascript.rhino.Node.LASTUSE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.NAME_PROP",com.google.javascript.rhino.Node.NAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.LEFT",com.google.javascript.rhino.Node.LEFT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.ATTRIBUTE_FLAG",com.google.javascript.rhino.Node.ATTRIBUTE_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.FINALLY_PROP",com.google.javascript.rhino.Node.FINALLY_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.NON_SPECIALCALL",com.google.javascript.rhino.Node.NON_SPECIALCALL);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.CASEARRAY_PROP",com.google.javascript.rhino.Node.CASEARRAY_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.DESCENDANTS_FLAG",com.google.javascript.rhino.Node.DESCENDANTS_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.CATCH_SCOPE_PROP",com.google.javascript.rhino.Node.CATCH_SCOPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP",com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.CASES_PROP",com.google.javascript.rhino.Node.CASES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.VARIABLE_PROP",com.google.javascript.rhino.Node.VARIABLE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.SKIP_INDEXES_PROP",com.google.javascript.rhino.Node.SKIP_INDEXES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.RIGHT",com.google.javascript.rhino.Node.RIGHT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_EVAL",com.google.javascript.rhino.Node.SPECIALCALL_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.DEBUGSOURCE_PROP",com.google.javascript.rhino.Node.DEBUGSOURCE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.BREAK_PROP",com.google.javascript.rhino.Node.BREAK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        if (com.google.javascript.rhino.Node.this.last!=null) {
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                        }
                        if (com.google.javascript.rhino.Node.this.parent!=null) {
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                        }
                        if (com.google.javascript.rhino.Node.this.next!=null) {
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                        }
                        if (com.google.javascript.rhino.Node.this.first!=null) {
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                        }
                        fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        switch (type) {
                            case com.google.javascript.rhino.Node.TARGETBLOCK_PROP :
                                value = "target block property";
                                break;
                            case com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP :
                                value = "last local block";
                                break;
                            case com.google.javascript.rhino.Node.ISNUMBER_PROP :
                                switch (x.getIntValue()) {
                                    case com.google.javascript.rhino.Node.BOTH :
                                        value = "both";
                                        break;
                                    case com.google.javascript.rhino.Node.RIGHT :
                                        value = "right";
                                        break;
                                    case com.google.javascript.rhino.Node.LEFT :
                                        value = "left";
                                        break;
                                    default :
                                        throw com.google.javascript.rhino.Kit.codeBug();
                                }
                                break;
                            case com.google.javascript.rhino.Node.SPECIALCALL_PROP :
                                switch (x.getIntValue()) {
                                    case com.google.javascript.rhino.Node.SPECIALCALL_EVAL :
                                        value = "eval";
                                        break;
                                    case com.google.javascript.rhino.Node.SPECIALCALL_WITH :
                                        value = "with";
                                        break;
                                    default :
                                        throw com.google.javascript.rhino.Kit.codeBug();
                                }
                                break;
                            default :
                                value = x.toString();
                                break;
                        }

                    sb.append(value);
                    sb.append(']');
                }
            }
            if (printType) {
                if (jsType != null) {
                    java.lang.String jsTypeString = jsType.toString();
                    if (jsTypeString != null) {
                        sb.append(" : ");
                        sb.append(jsTypeString);
                    }
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        if (com.google.javascript.rhino.Token.printTrees) {
            for (int i = 0; i != level; ++i) {
                sb.append("    ");
            }
            sb.append(n.toString());
            sb.append('\n');
            for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
                com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
            }
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        int lineOffset = (file == null) ? java.lang.Integer.MIN_VALUE : file.getLineOffset(getLineno());
        return lineOffset + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    @java.lang.SuppressWarnings("rawtypes")
    private static java.lang.Class getNodeClass(com.google.javascript.rhino.Node n) {
        java.lang.Class c = n.getClass();
        if ((c == com.google.javascript.rhino.FunctionNode.class) || (c == com.google.javascript.rhino.ScriptOrFnNode.class)) {
            return com.google.javascript.rhino.Node.class;
        }
        return c;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public static java.lang.String tokenToName(int token) {
        switch (token) {
            case com.google.javascript.rhino.Token.ERROR :
                return "error";
            case com.google.javascript.rhino.Token.EOF :
                return "eof";
            case com.google.javascript.rhino.Token.EOL :
                return "eol";
            case com.google.javascript.rhino.Token.ENTERWITH :
                return "enterwith";
            case com.google.javascript.rhino.Token.LEAVEWITH :
                return "leavewith";
            case com.google.javascript.rhino.Token.RETURN :
                return "return";
            case com.google.javascript.rhino.Token.GOTO :
                return "goto";
            case com.google.javascript.rhino.Token.IFEQ :
                return "ifeq";
            case com.google.javascript.rhino.Token.IFNE :
                return "ifne";
            case com.google.javascript.rhino.Token.SETNAME :
                return "setname";
            case com.google.javascript.rhino.Token.BITOR :
                return "bitor";
            case com.google.javascript.rhino.Token.BITXOR :
                return "bitxor";
            case com.google.javascript.rhino.Token.BITAND :
                return "bitand";
            case com.google.javascript.rhino.Token.EQ :
                return "eq";
            case com.google.javascript.rhino.Token.NE :
                return "ne";
            case com.google.javascript.rhino.Token.LT :
                return "lt";
            case com.google.javascript.rhino.Token.LE :
                return "le";
            case com.google.javascript.rhino.Token.GT :
                return "gt";
            case com.google.javascript.rhino.Token.GE :
                return "ge";
            case com.google.javascript.rhino.Token.LSH :
                return "lsh";
            case com.google.javascript.rhino.Token.RSH :
                return "rsh";
            case com.google.javascript.rhino.Token.URSH :
                return "ursh";
            case com.google.javascript.rhino.Token.ADD :
                return "add";
            case com.google.javascript.rhino.Token.SUB :
                return "sub";
            case com.google.javascript.rhino.Token.MUL :
                return "mul";
            case com.google.javascript.rhino.Token.DIV :
                return "div";
            case com.google.javascript.rhino.Token.MOD :
                return "mod";
            case com.google.javascript.rhino.Token.BITNOT :
                return "bitnot";
            case com.google.javascript.rhino.Token.NEG :
                return "neg";
            case com.google.javascript.rhino.Token.NEW :
                return "new";
            case com.google.javascript.rhino.Token.DELPROP :
                return "delprop";
            case com.google.javascript.rhino.Token.TYPEOF :
                return "typeof";
            case com.google.javascript.rhino.Token.GETPROP :
                return "getprop";
            case com.google.javascript.rhino.Token.SETPROP :
                return "setprop";
            case com.google.javascript.rhino.Token.GETELEM :
                return "getelem";
            case com.google.javascript.rhino.Token.SETELEM :
                return "setelem";
            case com.google.javascript.rhino.Token.CALL :
                return "call";
            case com.google.javascript.rhino.Token.NAME :
                return "name";
            case com.google.javascript.rhino.Token.NUMBER :
                return "number";
            case com.google.javascript.rhino.Token.STRING :
                return "string";
            case com.google.javascript.rhino.Token.NULL :
                return "null";
            case com.google.javascript.rhino.Token.THIS :
                return "this";
            case com.google.javascript.rhino.Token.FALSE :
                return "false";
            case com.google.javascript.rhino.Token.TRUE :
                return "true";
            case com.google.javascript.rhino.Token.SHEQ :
                return "sheq";
            case com.google.javascript.rhino.Token.SHNE :
                return "shne";
            case com.google.javascript.rhino.Token.REGEXP :
                return "regexp";
            case com.google.javascript.rhino.Token.POS :
                return "pos";
            case com.google.javascript.rhino.Token.BINDNAME :
                return "bindname";
            case com.google.javascript.rhino.Token.THROW :
                return "throw";
            case com.google.javascript.rhino.Token.IN :
                return "in";
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return "instanceof";
            case com.google.javascript.rhino.Token.GETVAR :
                return "getvar";
            case com.google.javascript.rhino.Token.SETVAR :
                return "setvar";
            case com.google.javascript.rhino.Token.TRY :
                return "try";
            case com.google.javascript.rhino.Token.TYPEOFNAME :
                return "typeofname";
            case com.google.javascript.rhino.Token.THISFN :
                return "thisfn";
            case com.google.javascript.rhino.Token.SEMI :
                return "semi";
            case com.google.javascript.rhino.Token.LB :
                return "lb";
            case com.google.javascript.rhino.Token.RB :
                return "rb";
            case com.google.javascript.rhino.Token.LC :
                return "lc";
            case com.google.javascript.rhino.Token.RC :
                return "rc";
            case com.google.javascript.rhino.Token.LP :
                return "lp";
            case com.google.javascript.rhino.Token.RP :
                return "rp";
            case com.google.javascript.rhino.Token.COMMA :
                return "comma";
            case com.google.javascript.rhino.Token.ASSIGN :
                return "assign";
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return "assign_bitor";
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return "assign_bitxor";
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return "assign_bitand";
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return "assign_lsh";
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return "assign_rsh";
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return "assign_ursh";
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return "assign_add";
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return "assign_sub";
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return "assign_mul";
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return "assign_div";
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return "assign_mod";
            case com.google.javascript.rhino.Token.HOOK :
                return "hook";
            case com.google.javascript.rhino.Token.COLON :
                return "colon";
            case com.google.javascript.rhino.Token.OR :
                return "or";
            case com.google.javascript.rhino.Token.AND :
                return "and";
            case com.google.javascript.rhino.Token.INC :
                return "inc";
            case com.google.javascript.rhino.Token.DEC :
                return "dec";
            case com.google.javascript.rhino.Token.DOT :
                return "dot";
            case com.google.javascript.rhino.Token.FUNCTION :
                return "function";
            case com.google.javascript.rhino.Token.EXPORT :
                return "export";
            case com.google.javascript.rhino.Token.IMPORT :
                return "import";
            case com.google.javascript.rhino.Token.IF :
                return "if";
            case com.google.javascript.rhino.Token.ELSE :
                return "else";
            case com.google.javascript.rhino.Token.SWITCH :
                return "switch";
            case com.google.javascript.rhino.Token.CASE :
                return "case";
            case com.google.javascript.rhino.Token.DEFAULT :
                return "default";
            case com.google.javascript.rhino.Token.WHILE :
                return "while";
            case com.google.javascript.rhino.Token.DO :
                return "do";
            case com.google.javascript.rhino.Token.FOR :
                return "for";
            case com.google.javascript.rhino.Token.BREAK :
                return "break";
            case com.google.javascript.rhino.Token.CONTINUE :
                return "continue";
            case com.google.javascript.rhino.Token.VAR :
                return "var";
            case com.google.javascript.rhino.Token.WITH :
                return "with";
            case com.google.javascript.rhino.Token.CATCH :
                return "catch";
            case com.google.javascript.rhino.Token.FINALLY :
                return "finally";
            case com.google.javascript.rhino.Token.RESERVED :
                return "reserved";
            case com.google.javascript.rhino.Token.NOT :
                return "not";
            case com.google.javascript.rhino.Token.VOID :
                return "void";
            case com.google.javascript.rhino.Token.BLOCK :
                return "block";
            case com.google.javascript.rhino.Token.ARRAYLIT :
                return "arraylit";
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return "objectlit";
            case com.google.javascript.rhino.Token.LABEL :
                return "label";
            case com.google.javascript.rhino.Token.TARGET :
                return "target";
            case com.google.javascript.rhino.Token.LOOP :
                return "loop";
            case com.google.javascript.rhino.Token.EXPR_VOID :
                return "expr_void";
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                return "expr_result";
            case com.google.javascript.rhino.Token.JSR :
                return "jsr";
            case com.google.javascript.rhino.Token.SCRIPT :
                return "script";
            case com.google.javascript.rhino.Token.EMPTY :
                return "empty";
            case com.google.javascript.rhino.Token.GET_REF :
                return "get_ref";
            case com.google.javascript.rhino.Token.REF_SPECIAL :
                return "ref_special";
        }
        return ("<unknown=" + token) + ">";
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (com.google.javascript.rhino.Node.getNodeClass(this) != com.google.javascript.rhino.Node.getNodeClass(node))) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if (type == com.google.javascript.rhino.Token.ARRAYLIT) {
            try {
                int[] indices1 = ((int[]) (getProp(com.google.javascript.rhino.Node.SKIP_INDEXES_PROP)));
                int[] indices2 = ((int[]) (node.getProp(com.google.javascript.rhino.Node.SKIP_INDEXES_PROP)));
                if (indices1 == null) {
                    if (indices2 != null) {
                        return false;
                    }
                } else if (indices2 == null) {
                    return false;
                } else if (indices1.length != indices2.length) {
                    return false;
                } else {
                    for (int i = 0; i < indices1.length; i++) {
                        if (indices1[i] != indices2[i]) {
                            return false;
                        }
                    }
                }
            } catch (java.lang.Exception e) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.STRING) {
            int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            if (quoted1 != quoted2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean hasSideEffects() {
        switch (type) {
            case com.google.javascript.rhino.Token.EXPR_VOID :
            case com.google.javascript.rhino.Token.COMMA :
                if (last != null) {
                    return last.hasSideEffects();
                } else {
                    return true;
                }
            case com.google.javascript.rhino.Token.HOOK :
                if (((first == null) || (first.next == null)) || (first.next.next == null)) {
                    com.google.javascript.rhino.Kit.codeBug();
                }
                return first.next.hasSideEffects() && first.next.next.hasSideEffects();
            case com.google.javascript.rhino.Token.ERROR :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ENTERWITH :
            case com.google.javascript.rhino.Token.LEAVEWITH :
            case com.google.javascript.rhino.Token.RETURN :
            case com.google.javascript.rhino.Token.GOTO :
            case com.google.javascript.rhino.Token.IFEQ :
            case com.google.javascript.rhino.Token.IFNE :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.SETNAME :
            case com.google.javascript.rhino.Token.SETPROP :
            case com.google.javascript.rhino.Token.SETELEM :
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.THROW :
            case com.google.javascript.rhino.Token.RETHROW :
            case com.google.javascript.rhino.Token.SETVAR :
            case com.google.javascript.rhino.Token.CATCH_SCOPE :
            case com.google.javascript.rhino.Token.RETURN_RESULT :
            case com.google.javascript.rhino.Token.SET_REF :
            case com.google.javascript.rhino.Token.DEL_REF :
            case com.google.javascript.rhino.Token.REF_CALL :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SEMI :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.EXPORT :
            case com.google.javascript.rhino.Token.IMPORT :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.ELSE :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.CONST :
            case com.google.javascript.rhino.Token.WITH :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.FINALLY :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.TARGET :
            case com.google.javascript.rhino.Token.LOOP :
            case com.google.javascript.rhino.Token.JSR :
            case com.google.javascript.rhino.Token.SETPROP_OP :
            case com.google.javascript.rhino.Token.SETELEM_OP :
            case com.google.javascript.rhino.Token.LOCAL_BLOCK :
            case com.google.javascript.rhino.Token.SET_REF_OP :
                return true;
            default :
                return false;
        }
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        com.google.javascript.rhino.Kit.codeBug();
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }
}
[156088] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659778693864
GPR[SSUN]-1659778693864
2433571
GPR[SPVATF]-1659778694122
GPR[EPVATF]-1659778699132
GPR[SPS]-1659778699132
[162913] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1091.
GPR[EPS]-1659778700690
GPR[ESUN]-1659778700690
GPR[SSUN]-1659778700690
2433571
GPR[SPVATF]-1659778701076
GPR[EPVATF]-1659778705311
GPR[SPS]-1659778705311
[169868] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1090.
GPR[EPS]-1659778707644
GPR[ESUN]-1659778707644
GPR[SSUN]-1659778707645
2433571
GPR[SPVATF]-1659778708118
GPR[EPVATF]-1659778712342
GPR[SPS]-1659778712342
[177370] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1089.
GPR[EPS]-1659778715146
GPR[ESUN]-1659778715146
GPR[SSUN]-1659778715146
2433571
GPR[ESUN]-1659778715506
GPR[SSUN]-1659778715506
2433571
GPR[ESUN]-1659778715732
GPR[SSUN]-1659778715732
2433571
GPR[SPVATF]-1659778715980
GPR[EPVATF]-1659778720007
GPR[SPS]-1659778720007
[184343] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1080.
GPR[EPS]-1659778722119
GPR[ESUN]-1659778722119
GPR[SSUN]-1659778722119
2433571
GPR[SPVATF]-1659778722584
GPR[EPVATF]-1659778726953
GPR[SPS]-1659778726953
[191695] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1079.
GPR[EPS]-1659778729471
GPR[ESUN]-1659778729471
GPR[SSUN]-1659778729471
2433571
GPR[SPVATF]-1659778729709
GPR[EPVATF]-1659778734578
GPR[SPS]-1659778734578
[198247] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:970.
GPR[EPS]-1659778736023
GPR[ESUN]-1659778736023
GPR[SSUN]-1659778736023
2433571
GPR[SPVATF]-1659778736257
GPR[EPVATF]-1659778740347
GPR[SPS]-1659778740347
[203868] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:969.
GPR[EPS]-1659778741644
GPR[ESUN]-1659778741645
GPR[SSUN]-1659778741645
2433571
GPR[SPVATF]-1659778741874
GPR[EPVATF]-1659778745953
GPR[SPS]-1659778745953
[209479] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:964.
GPR[EPS]-1659778747255
GPR[ESUN]-1659778747256
GPR[SSUN]-1659778747256
2433571
GPR[ESUN]-1659778747507
GPR[SSUN]-1659778747507
2433571
GPR[SPVATF]-1659778747752
GPR[EPVATF]-1659778752667
GPR[SPS]-1659778752667
[216360] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:184.
GPR[EPS]-1659778754136
GPR[ESUN]-1659778754136
GPR[SSUN]-1659778754136
2433571
GPR[ESUN]-1659778754392
GPR[SSUN]-1659778754392
2433571
GPR[SPVATF]-1659778754647
GPR[EPVATF]-1659778758921
GPR[SPS]-1659778758921
[222663] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1138.
GPR[EPS]-1659778760440
GPR[SPVATF]-1659778760440
GPR[EPVATF]-1659778765506
GPR[SPS]-1659778765506
[229220] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1138.
GPR[EPS]-1659778766996
GPR[ESUN]-1659778766996
GPR[SSUN]-1659778766996
2433571
GPR[SPVATF]-1659778767251
GPR[EPVATF]-1659778771235
GPR[SPS]-1659778771235
[234915] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1086.
GPR[EPS]-1659778772691
GPR[ESUN]-1659778772691
GPR[SSUN]-1659778772691
2433571
GPR[ESUN]-1659778772942
GPR[SSUN]-1659778772942
2433571
GPR[SPVATF]-1659778773166
GPR[EPVATF]-1659778777116
GPR[SPS]-1659778777116
[241157] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1078.
GPR[EPS]-1659778778933
GPR[SPVATF]-1659778778934
GPR[EPVATF]-1659778783008
GPR[SPS]-1659778783008
[246739] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1078.
GPR[EPS]-1659778784515
GPR[ESUN]-1659778784515
GPR[SSUN]-1659778784515
2433571
GPR[ESUN]-1659778784775
GPR[SSUN]-1659778784775
2433571
GPR[ESUN]-1659778785031
GPR[SSUN]-1659778785031
2433571
GPR[ESUN]-1659778785275
GPR[SSUN]-1659778785275
2433571
GPR[SPVATF]-1659778785540
GPR[EPVATF]-1659778790551
GPR[SPS]-1659778790551
[254306] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:973.
GPR[EPS]-1659778792083
GPR[ESUN]-1659778792083
GPR[SSUN]-1659778792083
2433571
GPR[SPVATF]-1659778792333
GPR[EPVATF]-1659778796489
GPR[SPS]-1659778796489
[260149] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:968.
GPR[EPS]-1659778797925
GPR[ESUN]-1659778797926
GPR[SSUN]-1659778797926
2433571
GPR[ESUN]-1659778798183
GPR[SSUN]-1659778798183
2433571
GPR[SPVATF]-1659778798431
GPR[EPVATF]-1659778803411
GPR[SPS]-1659778803411
[267160] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:963.
GPR[EPS]-1659778804936
GPR[ESUN]-1659778804936
GPR[SSUN]-1659778804936
2433571
GPR[ESUN]-1659778805189
GPR[SSUN]-1659778805189
2433571
GPR[SPVATF]-1659778805424
GPR[EPVATF]-1659778809319
GPR[SPS]-1659778809319
[272776] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1043.
GPR[EPS]-1659778810552
GPR[ESUN]-1659778810552
GPR[SSUN]-1659778810552
2433571
GPR[SPVATF]-1659778810806
GPR[EPVATF]-1659778814899
GPR[SPS]-1659778814899
[278339] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1042.
GPR[EPS]-1659778816115
GPR[ESUN]-1659778816115
GPR[SSUN]-1659778816115
80988634
GPR[ESUN]-1659778816297
GPR[SSUN]-1659778816297
-436823543
GPR[SPVATF]-1659778816520
GPR[EPVATF]-1659778819386
GPR[SPS]-1659778819386
[282629] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:282.
GPR[EPS]-1659778820405
GPR[ESUN]-1659778820405
GPR[SSUN]-1659778820405
-436823543
GPR[SPVATF]-1659778820631
GPR[EPVATF]-1659778823481
GPR[SPS]-1659778823481
[286703] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:280.
GPR[EPS]-1659778824479
GPR[ESUN]-1659778824480
GPR[SSUN]-1659778824480
-436823543
GPR[ESUN]-1659778824708
GPR[SSUN]-1659778824708
-436823543
GPR[ESUN]-1659778824930
GPR[SSUN]-1659778824930
2433571
GPR[SPVATF]-1659778825157
GPR[EPVATF]-1659778829244
GPR[SPS]-1659778829244
[293033] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1054.
GPR[EPS]-1659778830809
GPR[SPVATF]-1659778830809
GPR[EPVATF]-1659778835827
GPR[SPS]-1659778835827
[299582] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1054.
GPR[EPS]-1659778837358
GPR[ESUN]-1659778837358
GPR[SSUN]-1659778837358
2433571
GPR[SPVATF]-1659778837745
GPR[EPVATF]-1659778841801
GPR[SPS]-1659778841801
[305415] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1044.
GPR[EPS]-1659778843191
GPR[SPVATF]-1659778843191
GPR[EPVATF]-1659778848283
GPR[SPS]-1659778848283
[311911] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1044.
GPR[EPS]-1659778849687
GPR[ESUN]-1659778849687
GPR[SSUN]-1659778849687
2433571
GPR[ESUN]-1659778849928
GPR[SSUN]-1659778849928
2433571
GPR[SPVATF]-1659778850151
GPR[EPVATF]-1659778854295
GPR[SPS]-1659778854295
[318006] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1137.
GPR[EPS]-1659778855782
GPR[SPVATF]-1659778855783
GPR[EPVATF]-1659778860746
GPR[SPS]-1659778860746
[324472] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1137.
GPR[EPS]-1659778862248
GPR[ESUN]-1659778862248
GPR[SSUN]-1659778862248
2433571
GPR[SPVATF]-1659778862500
GPR[EPVATF]-1659778866576
GPR[SPS]-1659778866576
[330155] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1084.
GPR[EPS]-1659778867931
GPR[SPVATF]-1659778867938
GPR[EPVATF]-1659778871975
GPR[SPS]-1659778871975
[335679] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1084.
GPR[EPS]-1659778873455
GPR[ESUN]-1659778873455
GPR[SSUN]-1659778873455
2433571
GPR[SPVATF]-1659778873690
GPR[EPVATF]-1659778878853
GPR[SPS]-1659778878853
[342535] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1076.
GPR[EPS]-1659778880311
GPR[SPVATF]-1659778880311
GPR[EPVATF]-1659778884353
GPR[SPS]-1659778884353
[348019] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1076.
GPR[EPS]-1659778885795
GPR[ESUN]-1659778885795
GPR[SSUN]-1659778885795
2433571
GPR[SPVATF]-1659778886034
GPR[EPVATF]-1659778891002
GPR[SPS]-1659778891002
[354705] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1041.
GPR[EPS]-1659778892481
GPR[SPVATF]-1659778892481
GPR[EPVATF]-1659778896647
GPR[SPS]-1659778896647
[559967] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659779097744
GPR[SSUN]-1659779097744
2433571
GPR[SPVATF]-1659779098357
GPR[EPVATF]-1659779102524
GPR[SPS]-1659779102524
[566198] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1040.
GPR[EPS]-1659779103974
GPR[ESUN]-1659779103975
GPR[SSUN]-1659779103975
2433571
GPR[SPVATF]-1659779104222
GPR[EPVATF]-1659779108230
GPR[SPS]-1659779108230
[572678] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1029.
GPR[EPS]-1659779110454
GPR[ESUN]-1659779110454
GPR[SSUN]-1659779110455
2433571
GPR[SPVATF]-1659779110711
GPR[EPVATF]-1659779114868
GPR[SPS]-1659779114868
[578601] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1028.
GPR[EPS]-1659779116377
GPR[ESUN]-1659779116377
GPR[SSUN]-1659779116377
2433571
GPR[ESUN]-1659779116683
GPR[SSUN]-1659779116683
2433571
GPR[SPVATF]-1659779116925
GPR[EPVATF]-1659779120901
GPR[SPS]-1659779120901
[584693] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1026.
GPR[EPS]-1659779122469
GPR[SPVATF]-1659779122469
GPR[EPVATF]-1659779127414
GPR[SPS]-1659779127414
[591157] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1026.
GPR[EPS]-1659779128933
GPR[ESUN]-1659779128934
GPR[SSUN]-1659779128934
80988634
GPR[ESUN]-1659779129128
GPR[SSUN]-1659779129128
-436823543
GPR[SPVATF]-1659779129359
GPR[EPVATF]-1659779132251
GPR[SPS]-1659779132251
[594827] ERROR ConstraintModelBuilder - Unable to compile the change: 
class FunctionToBlockMutator {
    private com.google.javascript.jscomp.AbstractCompiler compiler;

    private com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier;

    FunctionToBlockMutator(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier) {
        this.compiler = compiler;
        this.safeNameIdSupplier = safeNameIdSupplier;
    }

    com.google.javascript.rhino.Node mutate(java.lang.String fnName, com.google.javascript.rhino.Node fnNode, com.google.javascript.rhino.Node callNode, java.lang.String resultName, boolean needsDefaultResult, boolean isCallInLoop) {
        com.google.javascript.rhino.Node newFnNode = fnNode.cloneTree();
        makeLocalNamesUnique(newFnNode, isCallInLoop);
        rewriteFunctionDeclarations(newFnNode.getLastChild());
        java.util.Set<java.lang.String> namesToAlias = com.google.javascript.jscomp.FunctionArgumentInjector.findModifiedParameters(newFnNode);
        java.util.LinkedHashMap<java.lang.String, com.google.javascript.rhino.Node> args = com.google.javascript.jscomp.FunctionArgumentInjector.getFunctionCallParameterMap(newFnNode, callNode, this.safeNameIdSupplier);
        boolean hasArgs = !args.isEmpty();
        if (hasArgs) {
            com.google.javascript.jscomp.FunctionArgumentInjector.maybeAddTempsForCallArguments(newFnNode, args, namesToAlias, compiler.getCodingConvention());
        }
        com.google.javascript.rhino.Node newBlock = com.google.javascript.jscomp.NodeUtil.getFunctionBody(newFnNode);
        newBlock.detachFromParent();
        if (hasArgs) {
            com.google.javascript.rhino.Node inlineResult = aliasAndInlineArguments(newBlock, args, namesToAlias);
            com.google.common.base.Preconditions.checkState(newBlock == inlineResult);
        }
        if (isCallInLoop) {
            fixUnitializedVarDeclarations(newBlock);
        }
        java.lang.String labelName = getLabelNameForFunction(fnName);
        com.google.javascript.rhino.Node injectableBlock = com.google.javascript.jscomp.FunctionToBlockMutator.replaceReturns(newBlock, resultName, labelName, needsDefaultResult);
        com.google.common.base.Preconditions.checkState(injectableBlock != null);
        return injectableBlock;
    }

    private void rewriteFunctionDeclarations(com.google.javascript.rhino.Node n) {
        if (n.getType() == com.google.javascript.rhino.Token.FUNCTION) {
            if (com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n)) {
                com.google.javascript.rhino.Node fnNameNode = n.getFirstChild();
                com.google.javascript.rhino.Node var = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.VAR).copyInformationFrom(n);
                com.google.javascript.rhino.Node name = com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, fnNameNode.getString()).copyInformationFrom(fnNameNode);
                fnNameNode.setString("");
                n.getParent().replaceChild(n, var);
                var.addChildToFront(name);
                name.addChildToFront(n);
            }
            return;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(), next; c != null; c = next) {
            next = c.getNext();
            rewriteFunctionDeclarations(c);
        }
    }

    private void fixUnitializedVarDeclarations(com.google.javascript.rhino.Node n) {
        if (com.google.javascript.jscomp.NodeUtil.isLoopStructure(n)) {
            return;
        }
        if (com.google.javascript.jscomp.NodeUtil.isVar(n)) {
            com.google.javascript.rhino.Node name = n.getFirstChild();
            if (!name.hasChildren()) {
                com.google.javascript.rhino.Node srcLocation = name;
                name.addChildToBack(com.google.javascript.jscomp.NodeUtil.newUndefinedNode(srcLocation));
            }
            return;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            fixUnitializedVarDeclarations(c);
        }
    }

    private void makeLocalNamesUnique(com.google.javascript.rhino.Node fnNode, boolean isCallInLoop) {
        com.google.common.base.Supplier<java.lang.String> idSupplier = compiler.getUniqueNameIdSupplier();
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, fnNode, new com.google.javascript.jscomp.MakeDeclaredNamesUnique(new com.google.javascript.jscomp.MakeDeclaredNamesUnique.InlineRenamer(idSupplier, "inline_", isCallInLoop)));
        new com.google.javascript.jscomp.RenameLabels(compiler, new com.google.javascript.jscomp.FunctionToBlockMutator.LabelNameSupplier(idSupplier), false).process(null, fnNode);
    }

    static class LabelNameSupplier implements com.google.common.base.Supplier<java.lang.String> {
        final com.google.common.base.Supplier<java.lang.String> idSupplier;

        LabelNameSupplier(com.google.common.base.Supplier<java.lang.String> idSupplier) {
            this.idSupplier = idSupplier;
        }

        @java.lang.Override
        public java.lang.String get() {
            return "JSCompiler_inline_label_" + idSupplier.get();
        }
    }

    private java.lang.String getLabelNameForFunction(java.lang.String fnName) {
        java.lang.String name = ((fnName == null) || fnName.isEmpty()) ? "anon" : fnName;
        return (("JSCompiler_inline_label_" + name) + "_") + safeNameIdSupplier.get();
    }

    private java.lang.String getUniqueThisName() {
        return "JSCompiler_inline_this_" + safeNameIdSupplier.get();
    }

    private com.google.javascript.rhino.Node aliasAndInlineArguments(com.google.javascript.rhino.Node fnTemplateRoot, java.util.LinkedHashMap<java.lang.String, com.google.javascript.rhino.Node> argMap, java.util.Set<java.lang.String> namesToAlias) {
        if ((namesToAlias == null) || namesToAlias.isEmpty()) {
            com.google.javascript.rhino.Node result = com.google.javascript.jscomp.FunctionArgumentInjector.inject(compiler, fnTemplateRoot, null, argMap);
            com.google.common.base.Preconditions.checkState(result == fnTemplateRoot);
            return result;
        } else {
            java.util.Map<java.lang.String, com.google.javascript.rhino.Node> newArgMap = com.google.common.collect.Maps.newHashMap(argMap);
            java.util.List<com.google.javascript.rhino.Node> newVars = com.google.common.collect.Lists.newLinkedList();
            for (java.util.Map.Entry<java.lang.String, com.google.javascript.rhino.Node> entry : argMap.entrySet()) {
                java.lang.String name = entry.getKey();
                if (namesToAlias.contains(name)) {
                    if (name.equals(com.google.javascript.jscomp.FunctionArgumentInjector.THIS_MARKER)) {
                        boolean referencesThis = com.google.javascript.jscomp.NodeUtil.referencesThis(fnTemplateRoot);
                        com.google.javascript.rhino.Node value = entry.getValue();
                        if ((value.getType() != com.google.javascript.rhino.Token.THIS) && (referencesThis || com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(value, compiler))) {
                            java.lang.String newName = getUniqueThisName();
                            com.google.javascript.rhino.Node newValue = entry.getValue().cloneTree();
                            com.google.javascript.rhino.Node newNode = com.google.javascript.jscomp.NodeUtil.newVarNode(newName, newValue).copyInformationFromForTree(newValue);
                            newVars.add(0, newNode);
                            newArgMap.put(com.google.javascript.jscomp.FunctionArgumentInjector.THIS_MARKER, com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, newName).copyInformationFromForTree(newValue));
                        }
                    } else {
                        com.google.javascript.rhino.Node newValue = entry.getValue().cloneTree();
                        com.google.javascript.rhino.Node newNode = com.google.javascript.jscomp.NodeUtil.newVarNode(name, newValue).copyInformationFromForTree(newValue);
                        newVars.add(0, newNode);
                        newArgMap.remove(name);
                    }
                }
            }
            com.google.javascript.rhino.Node result = com.google.javascript.jscomp.FunctionArgumentInjector.inject(compiler, fnTemplateRoot, null, newArgMap);
            com.google.common.base.Preconditions.checkState(result == fnTemplateRoot);
            for (com.google.javascript.rhino.Node n : newVars) {
                fnTemplateRoot.addChildToFront(n);
            }
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(53).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(53).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(53).collectInput("newVars",newVars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(53).collectInput("result",result);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(53).collectInput("com.google.javascript.jscomp.FunctionToBlockMutator.this.compiler",com.google.javascript.jscomp.FunctionToBlockMutator.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(53).collectInput("newArgMap",newArgMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(53).collectInput("namesToAlias",namesToAlias);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(53).collectInput("argMap",argMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(53).collectInput("com.google.javascript.jscomp.FunctionToBlockMutator.this.safeNameIdSupplier",com.google.javascript.jscomp.FunctionToBlockMutator.this.safeNameIdSupplier);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(53).collectInput("fnTemplateRoot",fnTemplateRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(53).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(53).collectionEnds();
            }
            if (runtimeAngelicValue)
                return result;

        }
    }

    private static com.google.javascript.rhino.Node replaceReturns(com.google.javascript.rhino.Node block, java.lang.String resultName, java.lang.String labelName, boolean resultMustBeSet) {
        com.google.common.base.Preconditions.checkNotNull(block);
        com.google.common.base.Preconditions.checkNotNull(labelName);
        com.google.javascript.rhino.Node root = block;
        boolean hasReturnAtExit = false;
        int returnCount = com.google.javascript.jscomp.NodeUtil.getNodeTypeReferenceCount(block, com.google.javascript.rhino.Token.RETURN, new com.google.javascript.jscomp.NodeUtil.MatchShallowStatement());
        if (returnCount > 0) {
            hasReturnAtExit = com.google.javascript.jscomp.FunctionToBlockMutator.hasReturnAtExit(block);
            if (hasReturnAtExit) {
                com.google.javascript.jscomp.FunctionToBlockMutator.convertLastReturnToStatement(block, resultName);
                returnCount--;
            }
            if (returnCount > 0) {
                com.google.javascript.jscomp.FunctionToBlockMutator.replaceReturnWithBreak(block, null, resultName, labelName);
                com.google.javascript.rhino.Node label = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.LABEL).copyInformationFrom(block);
                com.google.javascript.rhino.Node name = com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.LABEL_NAME, labelName).copyInformationFrom(block);
                label.addChildToFront(name);
                label.addChildToBack(block);
                com.google.javascript.rhino.Node newRoot = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.BLOCK).copyInformationFrom(block);
                newRoot.addChildrenToBack(label);
                root = newRoot;
            }
        }
        if ((resultMustBeSet && (!hasReturnAtExit)) && (resultName != null)) {
            com.google.javascript.jscomp.FunctionToBlockMutator.addDummyAssignment(block, resultName);
        }
        return root;
    }

    private static void addDummyAssignment(com.google.javascript.rhino.Node node, java.lang.String resultName) {
        com.google.common.base.Preconditions.checkArgument(node.getType() == com.google.javascript.rhino.Token.BLOCK);
        com.google.javascript.rhino.Node srcLocation = node;
        com.google.javascript.rhino.Node retVal = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(srcLocation);
        com.google.javascript.rhino.Node resultNode = com.google.javascript.jscomp.FunctionToBlockMutator.createAssignStatementNode(resultName, retVal);
        resultNode.copyInformationFromForTree(node);
        node.addChildrenToBack(resultNode);
    }

    private static void convertLastReturnToStatement(com.google.javascript.rhino.Node block, java.lang.String resultName) {
        com.google.javascript.rhino.Node ret = block.getLastChild();
        com.google.common.base.Preconditions.checkArgument(ret.getType() == com.google.javascript.rhino.Token.RETURN);
        com.google.javascript.rhino.Node resultNode = com.google.javascript.jscomp.FunctionToBlockMutator.getReplacementReturnStatement(ret, resultName);
        if (resultNode == null) {
            block.removeChild(ret);
        } else {
            resultNode.copyInformationFromForTree(ret);
            block.replaceChild(ret, resultNode);
        }
    }

    private static com.google.javascript.rhino.Node createAssignStatementNode(java.lang.String name, com.google.javascript.rhino.Node expression) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, name);
        com.google.javascript.rhino.Node assign = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.ASSIGN, nameNode, expression);
        return com.google.javascript.jscomp.NodeUtil.newExpr(assign);
    }

    private static com.google.javascript.rhino.Node getReplacementReturnStatement(com.google.javascript.rhino.Node node, java.lang.String resultName) {
        com.google.javascript.rhino.Node resultNode = null;
        com.google.javascript.rhino.Node retVal = null;
        if (node.hasChildren()) {
            retVal = node.getFirstChild().cloneTree();
        }
        if (resultName == null) {
            if (retVal != null) {
                resultNode = com.google.javascript.jscomp.NodeUtil.newExpr(retVal);
            }
        } else {
            if (retVal == null) {
                com.google.javascript.rhino.Node srcLocation = node;
                retVal = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(srcLocation);
            }
            resultNode = com.google.javascript.jscomp.FunctionToBlockMutator.createAssignStatementNode(resultName, retVal);
        }
        return resultNode;
    }

    private static boolean hasReturnAtExit(com.google.javascript.rhino.Node block) {
        return block.getLastChild().getType() == com.google.javascript.rhino.Token.RETURN;
    }

    private static com.google.javascript.rhino.Node replaceReturnWithBreak(com.google.javascript.rhino.Node current, com.google.javascript.rhino.Node parent, java.lang.String resultName, java.lang.String labelName) {
        if ((current.getType() == com.google.javascript.rhino.Token.FUNCTION) || (current.getType() == com.google.javascript.rhino.Token.EXPR_RESULT)) {
            return current;
        }
        if (current.getType() == com.google.javascript.rhino.Token.RETURN) {
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent));
            com.google.javascript.rhino.Node resultNode = com.google.javascript.jscomp.FunctionToBlockMutator.getReplacementReturnStatement(current, resultName);
            com.google.javascript.rhino.Node name = com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.LABEL_NAME, labelName);
            com.google.javascript.rhino.Node breakNode = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.BREAK, name);
            breakNode.copyInformationFromForTree(current);
            parent.replaceChild(current, breakNode);
            if (resultNode != null) {
                resultNode.copyInformationFromForTree(current);
                parent.addChildBefore(resultNode, breakNode);
            }
            current = breakNode;
        } else {
            for (com.google.javascript.rhino.Node c = current.getFirstChild(); c != null; c = c.getNext()) {
                c = com.google.javascript.jscomp.FunctionToBlockMutator.replaceReturnWithBreak(c, current, resultName, labelName);
            }
        }
        return current;
    }
}
[594827] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659779132603
GPR[SSUN]-1659779132603
-436823543
GPR[ESUN]-1659779132832
GPR[SSUN]-1659779132832
-436823543
GPR[SPVATF]-1659779133058
GPR[EPVATF]-1659779136004
GPR[SPS]-1659779136004
[599197] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:295.
GPR[EPS]-1659779136973
GPR[ESUN]-1659779136974
GPR[SSUN]-1659779136974
-436823543
GPR[SPVATF]-1659779137198
GPR[EPVATF]-1659779140012
GPR[SPS]-1659779140012
[603228] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:294.
GPR[EPS]-1659779141004
GPR[ESUN]-1659779141004
GPR[SSUN]-1659779141004
-436823543
GPR[SPVATF]-1659779141229
GPR[EPVATF]-1659779144159
GPR[SPS]-1659779144159
[607390] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:290.
GPR[EPS]-1659779145167
GPR[ESUN]-1659779145167
GPR[SSUN]-1659779145167
-436823543
GPR[ESUN]-1659779145402
GPR[SSUN]-1659779145402
-436823543
GPR[ESUN]-1659779145612
GPR[SSUN]-1659779145612
-436823543
GPR[SPVATF]-1659779145823
GPR[EPVATF]-1659779148695
GPR[SPS]-1659779148695
[611936] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:256.
GPR[EPS]-1659779149712
GPR[SPVATF]-1659779149712
GPR[EPVATF]-1659779152755
GPR[SPS]-1659779152755
[615987] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:256.
GPR[EPS]-1659779153763
GPR[ESUN]-1659779153763
GPR[SSUN]-1659779153763
-436823543
GPR[SPVATF]-1659779154009
GPR[EPVATF]-1659779157024
GPR[SPS]-1659779157024
[620290] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:255.
GPR[EPS]-1659779158066
GPR[SPVATF]-1659779158067
GPR[EPVATF]-1659779161166
GPR[SPS]-1659779161166
[624525] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:255.
GPR[EPS]-1659779162301
GPR[ESUN]-1659779162302
GPR[SSUN]-1659779162302
-436823543
GPR[ESUN]-1659779162520
GPR[SSUN]-1659779162520
-436823543
GPR[SPVATF]-1659779162735
GPR[EPVATF]-1659779165819
GPR[SPS]-1659779165819
[629090] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:253.
GPR[EPS]-1659779166866
GPR[ESUN]-1659779166866
GPR[SSUN]-1659779166866
-436823543
GPR[ESUN]-1659779167088
GPR[SSUN]-1659779167088
-436823543
GPR[ESUN]-1659779167301
GPR[SSUN]-1659779167301
80988634
GPR[ESUN]-1659779167473
GPR[SSUN]-1659779167473
-1684326478
GPR[ESUN]-1659779167695
GPR[SSUN]-1659779167695
-1684326478
GPR[ESUN]-1659779167918
GPR[SSUN]-1659779167918
-1684326478
GPR[SPVATF]-1659779168141
GPR[EPVATF]-1659779172581
GPR[SPS]-1659779172581
[635898] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique$InlineRenamer:540.
GPR[EPS]-1659779173674
GPR[SPVATF]-1659779173674
GPR[EPVATF]-1659779178411
GPR[SPS]-1659779178411
[641707] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique$InlineRenamer:540.
GPR[EPS]-1659779179483
GPR[ESUN]-1659779179483
GPR[SSUN]-1659779179483
-1684326478
GPR[SPVATF]-1659779179722
GPR[EPVATF]-1659779184772
GPR[SPS]-1659779184772
[648225] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique$InlineRenamer:536.
GPR[EPS]-1659779186002
GPR[SPVATF]-1659779186002
GPR[EPVATF]-1659779196148
GPR[SPS]-1659779196148
[660431] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique$InlineRenamer:536.
GPR[EPS]-1659779198207
GPR[ESUN]-1659779198207
GPR[SSUN]-1659779198207
-1684326478
GPR[ESUN]-1659779198445
GPR[SSUN]-1659779198445
-1684326478
GPR[SPVATF]-1659779198667
GPR[EPVATF]-1659779203049
GPR[SPS]-1659779203049
[666417] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique$InlineRenamer:531.
GPR[EPS]-1659779204193
GPR[ESUN]-1659779204193
GPR[SSUN]-1659779204193
-1684326478
GPR[SPVATF]-1659779204430
GPR[EPVATF]-1659779209450
GPR[SPS]-1659779209450
[672896] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique$InlineRenamer:530.
GPR[EPS]-1659779210672
GPR[SPVATF]-1659779210672
GPR[EPVATF]-1659779214684
GPR[SPS]-1659779214684
[677944] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique$InlineRenamer:530.
GPR[EPS]-1659779215720
GPR[ESUN]-1659779215720
GPR[SSUN]-1659779215720
-1684326478
GPR[SPVATF]-1659779216006
GPR[EPVATF]-1659779220073
GPR[SPS]-1659779220073
[683468] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique$InlineRenamer:529.
GPR[EPS]-1659779221244
GPR[ESUN]-1659779221244
GPR[SSUN]-1659779221244
80988634
GPR[ESUN]-1659779221559
GPR[SSUN]-1659779221559
507083050
GPR[SPVATF]-1659779221776
GPR[EPVATF]-1659779226546
GPR[SPS]-1659779226546
[689971] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:480.
GPR[EPS]-1659779227747
GPR[ESUN]-1659779227747
GPR[SSUN]-1659779227747
2433571
GPR[SPVATF]-1659779227990
GPR[EPVATF]-1659779231169
GPR[SPS]-1659779231169
[694603] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1074.
GPR[EPS]-1659779232379
GPR[ESUN]-1659779232379
GPR[SSUN]-1659779232379
2433571
GPR[SPVATF]-1659779232677
GPR[EPVATF]-1659779235814
GPR[SPS]-1659779235814
[699920] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1073.
GPR[EPS]-1659779237696
GPR[ESUN]-1659779237696
GPR[SSUN]-1659779237696
-436823543
GPR[SPVATF]-1659779237930
GPR[EPVATF]-1659779242079
GPR[SPS]-1659779242079
[705385] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:142.
GPR[EPS]-1659779243161
GPR[ESUN]-1659779243161
GPR[SSUN]-1659779243161
-436823543
GPR[SPVATF]-1659779243430
GPR[EPVATF]-1659779247438
GPR[SPS]-1659779247438
[710097] ERROR ConstraintModelBuilder - Unable to compile the change: 
class FunctionToBlockMutator {
    private com.google.javascript.jscomp.AbstractCompiler compiler;

    private com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier;

    FunctionToBlockMutator(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier) {
        this.compiler = compiler;
        this.safeNameIdSupplier = safeNameIdSupplier;
    }

    com.google.javascript.rhino.Node mutate(java.lang.String fnName, com.google.javascript.rhino.Node fnNode, com.google.javascript.rhino.Node callNode, java.lang.String resultName, boolean needsDefaultResult, boolean isCallInLoop) {
        com.google.javascript.rhino.Node newFnNode = fnNode.cloneTree();
        makeLocalNamesUnique(newFnNode, isCallInLoop);
        rewriteFunctionDeclarations(newFnNode.getLastChild());
        java.util.Set<java.lang.String> namesToAlias = com.google.javascript.jscomp.FunctionArgumentInjector.findModifiedParameters(newFnNode);
        java.util.LinkedHashMap<java.lang.String, com.google.javascript.rhino.Node> args = com.google.javascript.jscomp.FunctionArgumentInjector.getFunctionCallParameterMap(newFnNode, callNode, this.safeNameIdSupplier);
        boolean hasArgs = !args.isEmpty();
        if (hasArgs) {
            com.google.javascript.jscomp.FunctionArgumentInjector.maybeAddTempsForCallArguments(newFnNode, args, namesToAlias, compiler.getCodingConvention());
        }
        com.google.javascript.rhino.Node newBlock = com.google.javascript.jscomp.NodeUtil.getFunctionBody(newFnNode);
        newBlock.detachFromParent();
        if (hasArgs) {
            com.google.javascript.rhino.Node inlineResult = aliasAndInlineArguments(newBlock, args, namesToAlias);
            com.google.common.base.Preconditions.checkState(newBlock == inlineResult);
        }
        if (isCallInLoop) {
            fixUnitializedVarDeclarations(newBlock);
        }
        java.lang.String labelName = getLabelNameForFunction(fnName);
        com.google.javascript.rhino.Node injectableBlock = com.google.javascript.jscomp.FunctionToBlockMutator.replaceReturns(newBlock, resultName, labelName, needsDefaultResult);
        com.google.common.base.Preconditions.checkState(injectableBlock != null);
        return injectableBlock;
    }

    private void rewriteFunctionDeclarations(com.google.javascript.rhino.Node n) {
        if (n.getType() == com.google.javascript.rhino.Token.FUNCTION) {
            if (com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n)) {
                com.google.javascript.rhino.Node fnNameNode = n.getFirstChild();
                com.google.javascript.rhino.Node var = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.VAR).copyInformationFrom(n);
                com.google.javascript.rhino.Node name = com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, fnNameNode.getString()).copyInformationFrom(fnNameNode);
                fnNameNode.setString("");
                n.getParent().replaceChild(n, var);
                var.addChildToFront(name);
                name.addChildToFront(n);
            }
            return;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(), next; c != null; c = next) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(74).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectInput("com.google.javascript.jscomp.FunctionToBlockMutator.this.compiler",com.google.javascript.jscomp.FunctionToBlockMutator.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectInput("com.google.javascript.jscomp.FunctionToBlockMutator.this.safeNameIdSupplier",com.google.javascript.jscomp.FunctionToBlockMutator.this.safeNameIdSupplier);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectionEnds();
            }
            if (runtimeAngelicValue)
                next = c.getNext();

            rewriteFunctionDeclarations(c);
        }
    }

    private void fixUnitializedVarDeclarations(com.google.javascript.rhino.Node n) {
        if (com.google.javascript.jscomp.NodeUtil.isLoopStructure(n)) {
            return;
        }
        if (com.google.javascript.jscomp.NodeUtil.isVar(n)) {
            com.google.javascript.rhino.Node name = n.getFirstChild();
            if (!name.hasChildren()) {
                com.google.javascript.rhino.Node srcLocation = name;
                name.addChildToBack(com.google.javascript.jscomp.NodeUtil.newUndefinedNode(srcLocation));
            }
            return;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            fixUnitializedVarDeclarations(c);
        }
    }

    private void makeLocalNamesUnique(com.google.javascript.rhino.Node fnNode, boolean isCallInLoop) {
        com.google.common.base.Supplier<java.lang.String> idSupplier = compiler.getUniqueNameIdSupplier();
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, fnNode, new com.google.javascript.jscomp.MakeDeclaredNamesUnique(new com.google.javascript.jscomp.MakeDeclaredNamesUnique.InlineRenamer(idSupplier, "inline_", isCallInLoop)));
        new com.google.javascript.jscomp.RenameLabels(compiler, new com.google.javascript.jscomp.FunctionToBlockMutator.LabelNameSupplier(idSupplier), false).process(null, fnNode);
    }

    static class LabelNameSupplier implements com.google.common.base.Supplier<java.lang.String> {
        final com.google.common.base.Supplier<java.lang.String> idSupplier;

        LabelNameSupplier(com.google.common.base.Supplier<java.lang.String> idSupplier) {
            this.idSupplier = idSupplier;
        }

        @java.lang.Override
        public java.lang.String get() {
            return "JSCompiler_inline_label_" + idSupplier.get();
        }
    }

    private java.lang.String getLabelNameForFunction(java.lang.String fnName) {
        java.lang.String name = ((fnName == null) || fnName.isEmpty()) ? "anon" : fnName;
        return (("JSCompiler_inline_label_" + name) + "_") + safeNameIdSupplier.get();
    }

    private java.lang.String getUniqueThisName() {
        return "JSCompiler_inline_this_" + safeNameIdSupplier.get();
    }

    private com.google.javascript.rhino.Node aliasAndInlineArguments(com.google.javascript.rhino.Node fnTemplateRoot, java.util.LinkedHashMap<java.lang.String, com.google.javascript.rhino.Node> argMap, java.util.Set<java.lang.String> namesToAlias) {
        if ((namesToAlias == null) || namesToAlias.isEmpty()) {
            com.google.javascript.rhino.Node result = com.google.javascript.jscomp.FunctionArgumentInjector.inject(compiler, fnTemplateRoot, null, argMap);
            com.google.common.base.Preconditions.checkState(result == fnTemplateRoot);
            return result;
        } else {
            java.util.Map<java.lang.String, com.google.javascript.rhino.Node> newArgMap = com.google.common.collect.Maps.newHashMap(argMap);
            java.util.List<com.google.javascript.rhino.Node> newVars = com.google.common.collect.Lists.newLinkedList();
            for (java.util.Map.Entry<java.lang.String, com.google.javascript.rhino.Node> entry : argMap.entrySet()) {
                java.lang.String name = entry.getKey();
                if (namesToAlias.contains(name)) {
                    if (name.equals(com.google.javascript.jscomp.FunctionArgumentInjector.THIS_MARKER)) {
                        boolean referencesThis = com.google.javascript.jscomp.NodeUtil.referencesThis(fnTemplateRoot);
                        com.google.javascript.rhino.Node value = entry.getValue();
                        if ((value.getType() != com.google.javascript.rhino.Token.THIS) && (referencesThis || com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(value, compiler))) {
                            java.lang.String newName = getUniqueThisName();
                            com.google.javascript.rhino.Node newValue = entry.getValue().cloneTree();
                            com.google.javascript.rhino.Node newNode = com.google.javascript.jscomp.NodeUtil.newVarNode(newName, newValue).copyInformationFromForTree(newValue);
                            newVars.add(0, newNode);
                            newArgMap.put(com.google.javascript.jscomp.FunctionArgumentInjector.THIS_MARKER, com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, newName).copyInformationFromForTree(newValue));
                        }
                    } else {
                        com.google.javascript.rhino.Node newValue = entry.getValue().cloneTree();
                        com.google.javascript.rhino.Node newNode = com.google.javascript.jscomp.NodeUtil.newVarNode(name, newValue).copyInformationFromForTree(newValue);
                        newVars.add(0, newNode);
                        newArgMap.remove(name);
                    }
                }
            }
            com.google.javascript.rhino.Node result = com.google.javascript.jscomp.FunctionArgumentInjector.inject(compiler, fnTemplateRoot, null, newArgMap);
            com.google.common.base.Preconditions.checkState(result == fnTemplateRoot);
            for (com.google.javascript.rhino.Node n : newVars) {
                fnTemplateRoot.addChildToFront(n);
            }
            return result;
        }
    }

    private static com.google.javascript.rhino.Node replaceReturns(com.google.javascript.rhino.Node block, java.lang.String resultName, java.lang.String labelName, boolean resultMustBeSet) {
        com.google.common.base.Preconditions.checkNotNull(block);
        com.google.common.base.Preconditions.checkNotNull(labelName);
        com.google.javascript.rhino.Node root = block;
        boolean hasReturnAtExit = false;
        int returnCount = com.google.javascript.jscomp.NodeUtil.getNodeTypeReferenceCount(block, com.google.javascript.rhino.Token.RETURN, new com.google.javascript.jscomp.NodeUtil.MatchShallowStatement());
        if (returnCount > 0) {
            hasReturnAtExit = com.google.javascript.jscomp.FunctionToBlockMutator.hasReturnAtExit(block);
            if (hasReturnAtExit) {
                com.google.javascript.jscomp.FunctionToBlockMutator.convertLastReturnToStatement(block, resultName);
                returnCount--;
            }
            if (returnCount > 0) {
                com.google.javascript.jscomp.FunctionToBlockMutator.replaceReturnWithBreak(block, null, resultName, labelName);
                com.google.javascript.rhino.Node label = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.LABEL).copyInformationFrom(block);
                com.google.javascript.rhino.Node name = com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.LABEL_NAME, labelName).copyInformationFrom(block);
                label.addChildToFront(name);
                label.addChildToBack(block);
                com.google.javascript.rhino.Node newRoot = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.BLOCK).copyInformationFrom(block);
                newRoot.addChildrenToBack(label);
                root = newRoot;
            }
        }
        if ((resultMustBeSet && (!hasReturnAtExit)) && (resultName != null)) {
            com.google.javascript.jscomp.FunctionToBlockMutator.addDummyAssignment(block, resultName);
        }
        return root;
    }

    private static void addDummyAssignment(com.google.javascript.rhino.Node node, java.lang.String resultName) {
        com.google.common.base.Preconditions.checkArgument(node.getType() == com.google.javascript.rhino.Token.BLOCK);
        com.google.javascript.rhino.Node srcLocation = node;
        com.google.javascript.rhino.Node retVal = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(srcLocation);
        com.google.javascript.rhino.Node resultNode = com.google.javascript.jscomp.FunctionToBlockMutator.createAssignStatementNode(resultName, retVal);
        resultNode.copyInformationFromForTree(node);
        node.addChildrenToBack(resultNode);
    }

    private static void convertLastReturnToStatement(com.google.javascript.rhino.Node block, java.lang.String resultName) {
        com.google.javascript.rhino.Node ret = block.getLastChild();
        com.google.common.base.Preconditions.checkArgument(ret.getType() == com.google.javascript.rhino.Token.RETURN);
        com.google.javascript.rhino.Node resultNode = com.google.javascript.jscomp.FunctionToBlockMutator.getReplacementReturnStatement(ret, resultName);
        if (resultNode == null) {
            block.removeChild(ret);
        } else {
            resultNode.copyInformationFromForTree(ret);
            block.replaceChild(ret, resultNode);
        }
    }

    private static com.google.javascript.rhino.Node createAssignStatementNode(java.lang.String name, com.google.javascript.rhino.Node expression) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, name);
        com.google.javascript.rhino.Node assign = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.ASSIGN, nameNode, expression);
        return com.google.javascript.jscomp.NodeUtil.newExpr(assign);
    }

    private static com.google.javascript.rhino.Node getReplacementReturnStatement(com.google.javascript.rhino.Node node, java.lang.String resultName) {
        com.google.javascript.rhino.Node resultNode = null;
        com.google.javascript.rhino.Node retVal = null;
        if (node.hasChildren()) {
            retVal = node.getFirstChild().cloneTree();
        }
        if (resultName == null) {
            if (retVal != null) {
                resultNode = com.google.javascript.jscomp.NodeUtil.newExpr(retVal);
            }
        } else {
            if (retVal == null) {
                com.google.javascript.rhino.Node srcLocation = node;
                retVal = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(srcLocation);
            }
            resultNode = com.google.javascript.jscomp.FunctionToBlockMutator.createAssignStatementNode(resultName, retVal);
        }
        return resultNode;
    }

    private static boolean hasReturnAtExit(com.google.javascript.rhino.Node block) {
        return block.getLastChild().getType() == com.google.javascript.rhino.Token.RETURN;
    }

    private static com.google.javascript.rhino.Node replaceReturnWithBreak(com.google.javascript.rhino.Node current, com.google.javascript.rhino.Node parent, java.lang.String resultName, java.lang.String labelName) {
        if ((current.getType() == com.google.javascript.rhino.Token.FUNCTION) || (current.getType() == com.google.javascript.rhino.Token.EXPR_RESULT)) {
            return current;
        }
        if (current.getType() == com.google.javascript.rhino.Token.RETURN) {
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent));
            com.google.javascript.rhino.Node resultNode = com.google.javascript.jscomp.FunctionToBlockMutator.getReplacementReturnStatement(current, resultName);
            com.google.javascript.rhino.Node name = com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.LABEL_NAME, labelName);
            com.google.javascript.rhino.Node breakNode = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.BREAK, name);
            breakNode.copyInformationFromForTree(current);
            parent.replaceChild(current, breakNode);
            if (resultNode != null) {
                resultNode.copyInformationFromForTree(current);
                parent.addChildBefore(resultNode, breakNode);
            }
            current = breakNode;
        } else {
            for (com.google.javascript.rhino.Node c = current.getFirstChild(); c != null; c = c.getNext()) {
                c = com.google.javascript.jscomp.FunctionToBlockMutator.replaceReturnWithBreak(c, current, resultName, labelName);
            }
        }
        return current;
    }
}
[710097] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659779247874
GPR[SSUN]-1659779247874
507083050
GPR[SPVATF]-1659779248092
GPR[EPVATF]-1659779251947
GPR[SPS]-1659779251947
[715975] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:76.
GPR[EPS]-1659779253751
GPR[SPVATF]-1659779253752
GPR[EPVATF]-1659779257732
GPR[SPS]-1659779257732
[721009] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:76.
GPR[EPS]-1659779258785
GPR[ESUN]-1659779258785
GPR[SSUN]-1659779258785
-436823543
GPR[ESUN]-1659779259010
GPR[SSUN]-1659779259010
-436823543
GPR[SPVATF]-1659779259224
GPR[EPVATF]-1659779263377
GPR[SPS]-1659779263377
[726702] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:367.
GPR[EPS]-1659779264478
GPR[SPVATF]-1659779264479
GPR[EPVATF]-1659779269475
GPR[SPS]-1659779269475
[732806] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:367.
GPR[EPS]-1659779270582
GPR[ESUN]-1659779270582
GPR[SSUN]-1659779270582
-436823543
GPR[SPVATF]-1659779270808
GPR[EPVATF]-1659779274953
GPR[SPS]-1659779274953
[738239] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:334.
GPR[EPS]-1659779276015
GPR[SPVATF]-1659779276015
GPR[EPVATF]-1659779281048
GPR[SPS]-1659779281048
[744438] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:334.
GPR[EPS]-1659779282214
GPR[ESUN]-1659779282214
GPR[SSUN]-1659779282215
-436823543
GPR[ESUN]-1659779282545
GPR[SSUN]-1659779282545
-436823543
GPR[ESUN]-1659779282757
GPR[SSUN]-1659779282757
-436823543
GPR[ESUN]-1659779282972
GPR[SSUN]-1659779282972
-436823543
GPR[SPVATF]-1659779283185
GPR[EPVATF]-1659779287384
GPR[SPS]-1659779287384
[750690] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:327.
GPR[EPS]-1659779288466
GPR[ESUN]-1659779288466
GPR[SSUN]-1659779288466
-436823543
GPR[SPVATF]-1659779288686
GPR[EPVATF]-1659779293565
GPR[SPS]-1659779293565
[756895] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:326.
GPR[EPS]-1659779294671
GPR[ESUN]-1659779294671
GPR[SSUN]-1659779294671
-436823543
GPR[SPVATF]-1659779294956
GPR[EPVATF]-1659779299225
GPR[SPS]-1659779299225
[762440] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:234.
GPR[EPS]-1659779300216
GPR[ESUN]-1659779300216
GPR[SSUN]-1659779300216
-436823543
GPR[ESUN]-1659779300444
GPR[SSUN]-1659779300444
-436823543
GPR[ESUN]-1659779300654
GPR[SSUN]-1659779300655
-436823543
GPR[ESUN]-1659779300866
GPR[SSUN]-1659779300866
-436823543
GPR[SPVATF]-1659779301079
GPR[EPVATF]-1659779305206
GPR[SPS]-1659779305206
[768525] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:188.
GPR[EPS]-1659779306301
GPR[ESUN]-1659779306301
GPR[SSUN]-1659779306301
-436823543
GPR[SPVATF]-1659779306528
GPR[EPVATF]-1659779311478
GPR[SPS]-1659779311478
[774875] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:181.
GPR[EPS]-1659779312651
GPR[ESUN]-1659779312651
GPR[SSUN]-1659779312651
-436823543
GPR[ESUN]-1659779312881
GPR[SSUN]-1659779312881
-436823543
GPR[ESUN]-1659779313090
GPR[SSUN]-1659779313090
-436823543
GPR[SPVATF]-1659779313298
GPR[EPVATF]-1659779317595
GPR[SPS]-1659779317595
[781021] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:140.
GPR[EPS]-1659779318797
GPR[ESUN]-1659779318797
GPR[SSUN]-1659779318797
-436823543
GPR[SPVATF]-1659779319023
GPR[EPVATF]-1659779323052
GPR[SPS]-1659779323052
[786364] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:121.
GPR[EPS]-1659779324140
GPR[SPVATF]-1659779324141
GPR[EPVATF]-1659779329075
GPR[SPS]-1659779329075
[792405] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:121.
GPR[EPS]-1659779330181
GPR[ESUN]-1659779330181
GPR[SSUN]-1659779330181
-436823543
GPR[ESUN]-1659779330403
GPR[SSUN]-1659779330404
-436823543
GPR[SPVATF]-1659779330614
GPR[EPVATF]-1659779334752
GPR[SPS]-1659779334753
[798120] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:111.
GPR[EPS]-1659779335896
GPR[ESUN]-1659779335896
GPR[SSUN]-1659779335896
-436823543
GPR[ESUN]-1659779336317
GPR[SSUN]-1659779336317
-436823543
GPR[ESUN]-1659779336818
GPR[SSUN]-1659779336818
-436823543
GPR[SPVATF]-1659779337306
GPR[EPVATF]-1659779341584
GPR[SPS]-1659779341584
[808795] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:104.
GPR[EPS]-1659779346571
GPR[SPVATF]-1659779346571
GPR[EPVATF]-1659779351290
GPR[SPS]-1659779351290
[814534] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:104.
GPR[EPS]-1659779352310
GPR[ESUN]-1659779352310
GPR[SSUN]-1659779352310
-436823543
GPR[SPVATF]-1659779352536
GPR[EPVATF]-1659779356688
GPR[SPS]-1659779356688
[820498] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:96.
GPR[EPS]-1659779358274
GPR[ESUN]-1659779358274
GPR[SSUN]-1659779358274
-436823543
GPR[ESUN]-1659779358810
GPR[SSUN]-1659779358810
-436823543
GPR[SPVATF]-1659779359376
GPR[EPVATF]-1659779363830
GPR[SPS]-1659779363830
[828181] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:93.
GPR[EPS]-1659779365957
GPR[SPVATF]-1659779365958
GPR[EPVATF]-1659779371361
GPR[SPS]-1659779371361
[834663] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:93.
GPR[EPS]-1659779372439
GPR[ESUN]-1659779372439
GPR[SSUN]-1659779372440
-436823543
GPR[SPVATF]-1659779372672
GPR[EPVATF]-1659779376791
GPR[SPS]-1659779376791
[840797] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:91.
GPR[EPS]-1659779378574
GPR[ESUN]-1659779378574
GPR[SSUN]-1659779378574
-436823543
GPR[ESUN]-1659779379028
GPR[SSUN]-1659779379028
-436823543
GPR[SPVATF]-1659779379556
GPR[EPVATF]-1659779384735
GPR[SPS]-1659779384735
[848025] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:85.
GPR[EPS]-1659779385801
GPR[ESUN]-1659779385801
GPR[SSUN]-1659779385801
-436823543
GPR[SPVATF]-1659779386070
GPR[EPVATF]-1659779390120
GPR[SPS]-1659779390120
[853553] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:84.
GPR[EPS]-1659779391329
GPR[SPVATF]-1659779391329
GPR[EPVATF]-1659779396482
GPR[SPS]-1659779396482
[859807] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:84.
GPR[EPS]-1659779397583
GPR[ESUN]-1659779397583
GPR[SSUN]-1659779397583
-436823543
GPR[ESUN]-1659779397818
GPR[SSUN]-1659779397818
-436823543
GPR[ESUN]-1659779398042
GPR[SSUN]-1659779398042
-436823543
GPR[ESUN]-1659779398257
GPR[SSUN]-1659779398257
-436823543
GPR[SPVATF]-1659779398483
GPR[EPVATF]-1659779402709
GPR[SPS]-1659779402709
[866320] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:74.
GPR[EPS]-1659779404096
GPR[ESUN]-1659779404096
GPR[SSUN]-1659779404096
-436823543
GPR[SPVATF]-1659779404398
GPR[EPVATF]-1659779409401
GPR[SPS]-1659779409402
[872748] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:69.
GPR[EPS]-1659779410524
GPR[ESUN]-1659779410524
GPR[SSUN]-1659779410524
-436823543
GPR[ESUN]-1659779410750
GPR[SSUN]-1659779410750
507083050
GPR[SPVATF]-1659779410981
GPR[EPVATF]-1659779413312
GPR[SPS]-1659779413312
[876564] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:483.
GPR[EPS]-1659779414340
GPR[ESUN]-1659779414340
GPR[SSUN]-1659779414340
1299274573
GPR[ESUN]-1659779414578
GPR[SSUN]-1659779414578
1299274573
GPR[SPVATF]-1659779414798
GPR[EPVATF]-1659779418954
GPR[SPS]-1659779418954
[882234] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:456.
GPR[EPS]-1659779420010
GPR[ESUN]-1659779420010
GPR[SSUN]-1659779420010
1299274573
GPR[ESUN]-1659779420253
GPR[SSUN]-1659779420253
1299274573
GPR[ESUN]-1659779420482
GPR[SSUN]-1659779420482
1299274573
GPR[ESUN]-1659779420693
GPR[SSUN]-1659779420693
1299274573
GPR[SPVATF]-1659779420915
GPR[EPVATF]-1659779424910
GPR[SPS]-1659779424910
[888366] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:415.
GPR[EPS]-1659779426142
GPR[ESUN]-1659779426142
GPR[SSUN]-1659779426143
1299274573
GPR[ESUN]-1659779426374
GPR[SSUN]-1659779426374
1299274573
GPR[ESUN]-1659779426586
GPR[SSUN]-1659779426586
1299274573
GPR[ESUN]-1659779426811
GPR[SSUN]-1659779426811
1299274573
GPR[SPVATF]-1659779427030
GPR[EPVATF]-1659779431078
GPR[SPS]-1659779431078
[895210] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:406.
GPR[EPS]-1659779432986
GPR[ESUN]-1659779432986
GPR[SSUN]-1659779432986
1299274573
GPR[ESUN]-1659779433282
GPR[SSUN]-1659779433282
1299274573
GPR[ESUN]-1659779433502
GPR[SSUN]-1659779433502
1299274573
GPR[ESUN]-1659779433721
GPR[SSUN]-1659779433721
1299274573
GPR[SPVATF]-1659779433945
GPR[EPVATF]-1659779438114
GPR[SPS]-1659779438114
[900762] ERROR ConstraintModelBuilder - Unable to compile the change: 
class FunctionInjector {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier;

    private final boolean allowDecomposition;

    private java.util.Set<java.lang.String> knownConstants = com.google.common.collect.Sets.newHashSet();

    private final boolean assumeStrictThis;

    private final boolean assumeMinimumCapture;

    public FunctionInjector(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier, boolean allowDecomposition, boolean assumeStrictThis, boolean assumeMinimumCapture) {
        com.google.common.base.Preconditions.checkNotNull(compiler);
        com.google.common.base.Preconditions.checkNotNull(safeNameIdSupplier);
        this.compiler = compiler;
        this.safeNameIdSupplier = safeNameIdSupplier;
        this.allowDecomposition = allowDecomposition;
        this.assumeStrictThis = assumeStrictThis;
        this.assumeMinimumCapture = assumeMinimumCapture;
    }

    enum InliningMode {

        DIRECT,
        BLOCK;}

    static class Reference {
        final com.google.javascript.rhino.Node callNode;

        final com.google.javascript.jscomp.JSModule module;

        final com.google.javascript.jscomp.FunctionInjector.InliningMode mode;

        Reference(com.google.javascript.rhino.Node callNode, com.google.javascript.jscomp.JSModule module, com.google.javascript.jscomp.FunctionInjector.InliningMode mode) {
            this.callNode = callNode;
            this.module = module;
            this.mode = mode;
        }
    }

    private static final int NAME_COST_ESTIMATE = com.google.javascript.jscomp.InlineCostEstimator.ESTIMATED_IDENTIFIER_COST;

    private static final int COMMA_COST = 1;

    private static final int PAREN_COST = 2;

    boolean doesFunctionMeetMinimumRequirements(final java.lang.String fnName, com.google.javascript.rhino.Node fnNode) {
        com.google.javascript.rhino.Node block = com.google.javascript.jscomp.NodeUtil.getFunctionBody(fnNode);
        final java.lang.String fnRecursionName = fnNode.getFirstChild().getString();
        com.google.common.base.Preconditions.checkState(fnRecursionName != null);
        boolean referencesArguments = com.google.javascript.jscomp.NodeUtil.isNameReferenced(block, "arguments", com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        com.google.common.base.Predicate<com.google.javascript.rhino.Node> p = new com.google.common.base.Predicate<com.google.javascript.rhino.Node>() {
            @java.lang.Override
            public boolean apply(com.google.javascript.rhino.Node n) {
                if (n.getType() == com.google.javascript.rhino.Token.NAME) {
                    return (n.getString().equals("eval") || ((!fnName.isEmpty()) && n.getString().equals(fnName))) || ((!fnRecursionName.isEmpty()) && n.getString().equals(fnRecursionName));
                }
                return false;
            }
        };
        return (!referencesArguments) && (!com.google.javascript.jscomp.NodeUtil.has(block, p, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue()));
    }

    com.google.javascript.jscomp.FunctionInjector.CanInlineResult canInlineReferenceToFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> needAliases, com.google.javascript.jscomp.FunctionInjector.InliningMode mode, boolean referencesThis, boolean containsFunctions) {
        if (!isSupportedCallType(callNode)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (containsFunctions) {
            if ((!assumeMinimumCapture) && (!t.inGlobalScope())) {
                return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
            } else if (com.google.javascript.jscomp.NodeUtil.isWithinLoop(callNode)) {
                return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
            }
        }
        if (referencesThis && (!com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode))) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT) {
            return canInlineReferenceDirectly(callNode, fnNode);
        } else {
            return canInlineReferenceAsStatementBlock(t, callNode, fnNode, needAliases);
        }
    }

    private boolean isSupportedCallType(com.google.javascript.rhino.Node callNode) {
        if (callNode.getFirstChild().getType() != com.google.javascript.rhino.Token.NAME) {
            if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode)) {
                if (!assumeStrictThis) {
                    com.google.javascript.rhino.Node thisValue = callNode.getFirstChild().getNext();
                    if ((thisValue == null) || (thisValue.getType() != com.google.javascript.rhino.Token.THIS)) {
                        return false;
                    }
                }
            } else if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectApply(callNode)) {
                return false;
            }
        }
        return true;
    }

    com.google.javascript.rhino.Node inline(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, java.lang.String fnName, com.google.javascript.rhino.Node fnNode, com.google.javascript.jscomp.FunctionInjector.InliningMode mode) {
        com.google.common.base.Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());
        if (mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT) {
            return inlineReturnValue(callNode, fnNode);
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(105).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.jscomp.FunctionInjector.this.safeNameIdSupplier",com.google.javascript.jscomp.FunctionInjector.this.safeNameIdSupplier);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.jscomp.FunctionInjector.this.compiler",com.google.javascript.jscomp.FunctionInjector.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE",com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("fnNode",fnNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.jscomp.FunctionInjector.COMMA_COST",com.google.javascript.jscomp.FunctionInjector.COMMA_COST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.jscomp.FunctionInjector.this.assumeStrictThis",com.google.javascript.jscomp.FunctionInjector.this.assumeStrictThis);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.jscomp.FunctionInjector.PAREN_COST",com.google.javascript.jscomp.FunctionInjector.PAREN_COST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("mode",mode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("fnName",fnName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("callNode",callNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.jscomp.FunctionInjector.this.knownConstants",com.google.javascript.jscomp.FunctionInjector.this.knownConstants);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.jscomp.FunctionInjector.this.assumeMinimumCapture",com.google.javascript.jscomp.FunctionInjector.this.assumeMinimumCapture);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.jscomp.FunctionInjector.this.allowDecomposition",com.google.javascript.jscomp.FunctionInjector.this.allowDecomposition);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectionEnds();
            }
            if (runtimeAngelicValue)
                return inlineFunction(callNode, fnNode, fnName);

        }
    }

    private com.google.javascript.rhino.Node inlineReturnValue(com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode) {
        com.google.javascript.rhino.Node block = fnNode.getLastChild();
        com.google.javascript.rhino.Node callParentNode = callNode.getParent();
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> argMap = com.google.javascript.jscomp.FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);
        com.google.javascript.rhino.Node newExpression;
        if (!block.hasChildren()) {
            com.google.javascript.rhino.Node srcLocation = block;
            newExpression = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(srcLocation);
        } else {
            com.google.javascript.rhino.Node returnNode = block.getFirstChild();
            com.google.common.base.Preconditions.checkArgument(returnNode.getType() == com.google.javascript.rhino.Token.RETURN);
            com.google.javascript.rhino.Node safeReturnNode = returnNode.cloneTree();
            com.google.javascript.rhino.Node inlineResult = com.google.javascript.jscomp.FunctionArgumentInjector.inject(null, safeReturnNode, null, argMap);
            com.google.common.base.Preconditions.checkArgument(safeReturnNode == inlineResult);
            newExpression = safeReturnNode.removeFirstChild();
        }
        callParentNode.replaceChild(callNode, newExpression);
        return newExpression;
    }

    private enum CallSiteType {

        UNSUPPORTED,
        SIMPLE_CALL,
        SIMPLE_ASSIGNMENT,
        VAR_DECL_SIMPLE_ASSIGNMENT,
        EXPRESSION,
        DECOMPOSABLE_EXPRESSION;}

    private com.google.javascript.jscomp.FunctionInjector.CallSiteType classifyCallSite(com.google.javascript.rhino.Node callNode) {
        com.google.javascript.rhino.Node parent = callNode.getParent();
        com.google.javascript.rhino.Node grandParent = parent.getParent();
        if (com.google.javascript.jscomp.NodeUtil.isExprCall(parent)) {
            return com.google.javascript.jscomp.FunctionInjector.CallSiteType.SIMPLE_CALL;
        } else if (((com.google.javascript.jscomp.NodeUtil.isExprAssign(grandParent) && (!com.google.javascript.jscomp.NodeUtil.isVarOrSimpleAssignLhs(callNode, parent))) && (parent.getFirstChild().getType() == com.google.javascript.rhino.Token.NAME)) && (!com.google.javascript.jscomp.NodeUtil.isConstantName(parent.getFirstChild()))) {
            return com.google.javascript.jscomp.FunctionInjector.CallSiteType.SIMPLE_ASSIGNMENT;
        } else if ((((parent.getType() == com.google.javascript.rhino.Token.NAME) && (!com.google.javascript.jscomp.NodeUtil.isConstantName(parent))) && (grandParent.getType() == com.google.javascript.rhino.Token.VAR)) && grandParent.hasOneChild()) {
            return com.google.javascript.jscomp.FunctionInjector.CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT;
        } else {
            com.google.javascript.rhino.Node expressionRoot = com.google.javascript.jscomp.ExpressionDecomposer.findExpressionRoot(callNode);
            if (expressionRoot != null) {
                com.google.javascript.jscomp.ExpressionDecomposer decomposer = new com.google.javascript.jscomp.ExpressionDecomposer(compiler, safeNameIdSupplier, knownConstants);
                com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType type = decomposer.canExposeExpression(callNode);
                if (type == com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.MOVABLE) {
                    return com.google.javascript.jscomp.FunctionInjector.CallSiteType.EXPRESSION;
                } else if (type == com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.DECOMPOSABLE) {
                    return com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION;
                } else {
                    com.google.common.base.Preconditions.checkState(type == com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.UNDECOMPOSABLE);
                }
            }
        }
        return com.google.javascript.jscomp.FunctionInjector.CallSiteType.UNSUPPORTED;
    }

    private com.google.javascript.rhino.Node inlineFunction(com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode, java.lang.String fnName) {
        com.google.javascript.rhino.Node parent = callNode.getParent();
        com.google.javascript.rhino.Node grandParent = parent.getParent();
        com.google.javascript.jscomp.FunctionInjector.CallSiteType callSiteType = classifyCallSite(callNode);
        com.google.common.base.Preconditions.checkArgument(callSiteType != com.google.javascript.jscomp.FunctionInjector.CallSiteType.UNSUPPORTED);
        boolean isCallInLoop = com.google.javascript.jscomp.NodeUtil.isWithinLoop(callNode);
        java.lang.String resultName = null;
        boolean needsDefaultReturnResult = true;
        switch (callSiteType) {
            case SIMPLE_ASSIGNMENT :
                resultName = parent.getFirstChild().getString();
                break;
            case VAR_DECL_SIMPLE_ASSIGNMENT :
                resultName = parent.getString();
                break;
            case SIMPLE_CALL :
                resultName = null;
                needsDefaultReturnResult = false;
                break;
            case EXPRESSION :
                resultName = getUniqueResultName();
                needsDefaultReturnResult = isCallInLoop;
                break;
            case DECOMPOSABLE_EXPRESSION :
                throw new java.lang.IllegalStateException("Decomposable expressions must decomposed before inlining.");
            default :
                throw new java.lang.IllegalStateException("Unexpected call site type.");
        }
        com.google.javascript.jscomp.FunctionToBlockMutator mutator = new com.google.javascript.jscomp.FunctionToBlockMutator(compiler, this.safeNameIdSupplier);
        com.google.javascript.rhino.Node newBlock = mutator.mutate(fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);
        com.google.javascript.rhino.Node greatGrandParent = grandParent.getParent();
        switch (callSiteType) {
            case VAR_DECL_SIMPLE_ASSIGNMENT :
                parent.removeChild(parent.getFirstChild());
                com.google.common.base.Preconditions.checkState(parent.getFirstChild() == null);
                greatGrandParent.addChildAfter(newBlock, grandParent);
                break;
            case SIMPLE_ASSIGNMENT :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isExpressionNode(grandParent));
                greatGrandParent.replaceChild(grandParent, newBlock);
                break;
            case SIMPLE_CALL :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isExpressionNode(parent));
                grandParent.replaceChild(parent, newBlock);
                break;
            case EXPRESSION :
                com.google.javascript.rhino.Node injectionPoint = com.google.javascript.jscomp.ExpressionDecomposer.findInjectionPoint(callNode);
                com.google.common.base.Preconditions.checkNotNull(injectionPoint);
                com.google.javascript.rhino.Node injectionPointParent = injectionPoint.getParent();
                com.google.common.base.Preconditions.checkNotNull(injectionPointParent);
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isStatementBlock(injectionPointParent));
                newBlock.addChildrenToFront(com.google.javascript.jscomp.NodeUtil.newVarNode(resultName, null).copyInformationFromForTree(callNode));
                injectionPointParent.addChildBefore(newBlock, injectionPoint);
                parent.replaceChild(callNode, com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, resultName));
                break;
            default :
                throw new java.lang.IllegalStateException("Unexpected call site type.");
        }
        return newBlock;
    }

    boolean isDirectCallNodeReplacementPossible(com.google.javascript.rhino.Node fnNode) {
        com.google.javascript.rhino.Node block = com.google.javascript.jscomp.NodeUtil.getFunctionBody(fnNode);
        if (!block.hasChildren()) {
            return true;
        } else if (block.hasOneChild()) {
            if ((block.getFirstChild().getType() == com.google.javascript.rhino.Token.RETURN) && (block.getFirstChild().getFirstChild() != null)) {
                return true;
            }
        }
        return false;
    }

    enum CanInlineResult {

        YES,
        AFTER_DECOMPOSITION,
        NO;}

    private com.google.javascript.jscomp.FunctionInjector.CanInlineResult canInlineReferenceAsStatementBlock(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> namesToAlias) {
        com.google.javascript.jscomp.FunctionInjector.CallSiteType callSiteType = classifyCallSite(callNode);
        if (callSiteType == com.google.javascript.jscomp.FunctionInjector.CallSiteType.UNSUPPORTED) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if ((!allowDecomposition) && (callSiteType == com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (callSiteType == com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.AFTER_DECOMPOSITION;
        } else {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.YES;
        }
    }

    private boolean callMeetsBlockInliningRequirements(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, final com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> namesToAlias) {
        final boolean assumeMinimumCapture = this.assumeMinimumCapture;
        boolean fnContainsVars = com.google.javascript.jscomp.NodeUtil.has(com.google.javascript.jscomp.NodeUtil.getFunctionBody(fnNode), new com.google.javascript.jscomp.NodeUtil.MatchDeclaration(), new com.google.javascript.jscomp.NodeUtil.MatchShallowStatement());
        boolean forbidTemps = false;
        if (!t.inGlobalScope()) {
            com.google.javascript.rhino.Node fnCaller = t.getScopeRoot();
            com.google.javascript.rhino.Node fnCallerBody = fnCaller.getLastChild();
            com.google.common.base.Predicate<com.google.javascript.rhino.Node> match = new com.google.common.base.Predicate<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean apply(com.google.javascript.rhino.Node n) {
                    if (n.getType() == com.google.javascript.rhino.Token.NAME) {
                        return n.getString().equals("eval");
                    }
                    if ((!assumeMinimumCapture) && (n.getType() == com.google.javascript.rhino.Token.FUNCTION)) {
                        return n != fnNode;
                    }
                    return false;
                }
            };
            forbidTemps = com.google.javascript.jscomp.NodeUtil.has(fnCallerBody, match, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        }
        if (fnContainsVars && forbidTemps) {
            return false;
        }
        if (forbidTemps) {
            java.util.Map<java.lang.String, com.google.javascript.rhino.Node> args = com.google.javascript.jscomp.FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);
            boolean hasArgs = !args.isEmpty();
            if (hasArgs) {
                java.util.Set<java.lang.String> allNamesToAlias = com.google.common.collect.Sets.newHashSet(namesToAlias);
                com.google.javascript.jscomp.FunctionArgumentInjector.maybeAddTempsForCallArguments(fnNode, args, allNamesToAlias, compiler.getCodingConvention());
                if (!allNamesToAlias.isEmpty()) {
                    return false;
                }
            }
        }
        return true;
    }

    private com.google.javascript.jscomp.FunctionInjector.CanInlineResult canInlineReferenceDirectly(com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode) {
        if (!isDirectCallNodeReplacementPossible(fnNode)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        com.google.javascript.rhino.Node block = fnNode.getLastChild();
        com.google.javascript.rhino.Node cArg = callNode.getFirstChild().getNext();
        if (callNode.getFirstChild().getType() != com.google.javascript.rhino.Token.NAME) {
            if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode)) {
                if ((cArg == null) || (cArg.getType() != com.google.javascript.rhino.Token.THIS)) {
                    return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
                }
                cArg = cArg.getNext();
            } else {
                com.google.common.base.Preconditions.checkState(!com.google.javascript.jscomp.NodeUtil.isFunctionObjectApply(callNode));
            }
        }
        com.google.javascript.rhino.Node fnParam = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(fnNode).getFirstChild();
        while ((cArg != null) || (fnParam != null)) {
            if (fnParam != null) {
                if (cArg != null) {
                    if (com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(cArg) && (com.google.javascript.jscomp.NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1)) {
                        return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
                    }
                }
                fnParam = fnParam.getNext();
            }
            if (cArg != null) {
                if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(cArg)) {
                    return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
                }
                cArg = cArg.getNext();
            }
        } 
        return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.YES;
    }

    private java.lang.String getUniqueResultName() {
        return ("JSCompiler_inline_result" + com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.UNIQUE_ID_SEPARATOR) + safeNameIdSupplier.get();
    }

    boolean inliningLowersCost(com.google.javascript.jscomp.JSModule fnModule, com.google.javascript.rhino.Node fnNode, java.util.Collection<? extends com.google.javascript.jscomp.FunctionInjector.Reference> refs, java.util.Set<java.lang.String> namesToAlias, boolean isRemovable, boolean referencesThis) {
        int referenceCount = refs.size();
        if (referenceCount == 0) {
            return true;
        }
        int referencesUsingBlockInlining = 0;
        boolean checkModules = isRemovable && (fnModule != null);
        com.google.javascript.jscomp.JSModuleGraph moduleGraph = compiler.getModuleGraph();
        for (com.google.javascript.jscomp.FunctionInjector.Reference ref : refs) {
            if (ref.mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.BLOCK) {
                referencesUsingBlockInlining++;
            }
            if (checkModules && (ref.module != null)) {
                if ((ref.module != fnModule) && (!moduleGraph.dependsOn(ref.module, fnModule))) {
                    isRemovable = false;
                    checkModules = false;
                }
            }
        }
        int referencesUsingDirectInlining = referenceCount - referencesUsingBlockInlining;
        if (((referenceCount == 1) && isRemovable) && (referencesUsingDirectInlining == 1)) {
            return true;
        }
        int callCost = com.google.javascript.jscomp.FunctionInjector.estimateCallCost(fnNode, referencesThis);
        int overallCallCost = callCost * referenceCount;
        int costDeltaDirect = com.google.javascript.jscomp.FunctionInjector.inlineCostDelta(fnNode, namesToAlias, com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT);
        int costDeltaBlock = com.google.javascript.jscomp.FunctionInjector.inlineCostDelta(fnNode, namesToAlias, com.google.javascript.jscomp.FunctionInjector.InliningMode.BLOCK);
        return doesLowerCost(fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable);
    }

    private boolean doesLowerCost(com.google.javascript.rhino.Node fnNode, int callCost, int directInlines, int costDeltaDirect, int blockInlines, int costDeltaBlock, boolean removable) {
        int fnInstanceCount = (directInlines + blockInlines) - (removable ? 1 : 0);
        if (fnInstanceCount == 0) {
            if ((blockInlines > 0) && (costDeltaBlock > 0)) {
                return false;
            }
            return true;
        }
        int costDelta = (directInlines * costDeltaDirect) + (blockInlines * costDeltaBlock);
        int threshold = (callCost - costDelta) / fnInstanceCount;
        return com.google.javascript.jscomp.InlineCostEstimator.getCost(fnNode, threshold + 1) <= threshold;
    }

    private static int estimateCallCost(com.google.javascript.rhino.Node fnNode, boolean referencesThis) {
        com.google.javascript.rhino.Node argsNode = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(fnNode);
        int numArgs = argsNode.getChildCount();
        int callCost = com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE + com.google.javascript.jscomp.FunctionInjector.PAREN_COST;
        if (numArgs > 0) {
            callCost += (numArgs * com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE) + ((numArgs - 1) * com.google.javascript.jscomp.FunctionInjector.COMMA_COST);
        }
        if (referencesThis) {
            callCost += 5 + 5;
        }
        return callCost;
    }

    private static int inlineCostDelta(com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> namesToAlias, com.google.javascript.jscomp.FunctionInjector.InliningMode mode) {
        int paramCount = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(fnNode).getChildCount();
        int commaCount = (paramCount > 1) ? paramCount - 1 : 0;
        int costDeltaFunctionOverhead = (15 + commaCount) + (paramCount * com.google.javascript.jscomp.InlineCostEstimator.ESTIMATED_IDENTIFIER_COST);
        com.google.javascript.rhino.Node block = fnNode.getLastChild();
        if (!block.hasChildren()) {
            return -costDeltaFunctionOverhead;
        }
        if (mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT) {
            return -(costDeltaFunctionOverhead + 7);
        } else {
            int aliasCount = namesToAlias.size();
            final int INLINE_BLOCK_OVERHEAD = 4;
            final int PER_RETURN_OVERHEAD = 2;
            final int PER_RETURN_RESULT_OVERHEAD = 3;
            final int PER_ALIAS_OVERHEAD = 3;
            int returnCount = com.google.javascript.jscomp.NodeUtil.getNodeTypeReferenceCount(block, com.google.javascript.rhino.Token.RETURN, new com.google.javascript.jscomp.NodeUtil.MatchShallowStatement());
            int resultCount = (returnCount > 0) ? returnCount - 1 : 0;
            int baseOverhead = (returnCount > 0) ? INLINE_BLOCK_OVERHEAD : 0;
            int overhead = ((baseOverhead + (returnCount * PER_RETURN_OVERHEAD)) + (resultCount * PER_RETURN_RESULT_OVERHEAD)) + (aliasCount * PER_ALIAS_OVERHEAD);
            return overhead - costDeltaFunctionOverhead;
        }
    }

    public void setKnownConstants(java.util.Set<java.lang.String> knownConstants) {
        com.google.common.base.Preconditions.checkState(this.knownConstants.isEmpty());
        this.knownConstants = knownConstants;
    }
}
[900762] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659779438538
GPR[SSUN]-1659779438539
507083050
GPR[SPVATF]-1659779438843
GPR[EPVATF]-1659779442991
GPR[SPS]-1659779442991
[906392] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:65.
GPR[EPS]-1659779444169
GPR[SPVATF]-1659779444169
GPR[EPVATF]-1659779448245
GPR[SPS]-1659779448245
[912324] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:65.
GPR[EPS]-1659779450101
GPR[ESUN]-1659779450101
GPR[SSUN]-1659779450101
507083050
GPR[ESUN]-1659779450343
GPR[SSUN]-1659779450343
1187751237
GPR[ESUN]-1659779450636
GPR[SSUN]-1659779450636
507083050
GPR[SPVATF]-1659779450868
GPR[EPVATF]-1659779454974
GPR[SPS]-1659779454974
[918231] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:488.
GPR[EPS]-1659779456008
GPR[ESUN]-1659779456008
GPR[SSUN]-1659779456008
-1684326478
GPR[ESUN]-1659779456271
GPR[SSUN]-1659779456271
80988634
GPR[ESUN]-1659779456455
GPR[SSUN]-1659779456455
-1684326478
GPR[ESUN]-1659779456831
GPR[SSUN]-1659779456831
507083050
GPR[SPVATF]-1659779457398
GPR[EPVATF]-1659779461622
GPR[SPS]-1659779461622
[924840] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:291.
GPR[EPS]-1659779462616
GPR[SPVATF]-1659779462617
GPR[EPVATF]-1659779466764
GPR[SPS]-1659779466764
[930224] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:291.
GPR[EPS]-1659779468000
GPR[ESUN]-1659779468000
GPR[SSUN]-1659779468000
507083050
GPR[SPVATF]-1659779468228
GPR[EPVATF]-1659779472316
GPR[SPS]-1659779472316
[935679] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:288.
GPR[EPS]-1659779473455
GPR[SPVATF]-1659779473456
GPR[EPVATF]-1659779478497
GPR[SPS]-1659779478497
[942023] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:288.
GPR[EPS]-1659779479799
GPR[ESUN]-1659779479799
GPR[SSUN]-1659779479800
1187751237
GPR[SPVATF]-1659779480169
GPR[EPVATF]-1659779484349
GPR[SPS]-1659779484349
[948064] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1136.
GPR[EPS]-1659779485840
GPR[SPVATF]-1659779485841
GPR[EPVATF]-1659779490962
GPR[SPS]-1659779490962
[954630] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1136.
GPR[EPS]-1659779492406
GPR[ESUN]-1659779492406
GPR[SSUN]-1659779492406
507083050
GPR[ESUN]-1659779492639
GPR[SSUN]-1659779492639
507083050
GPR[SPVATF]-1659779492858
GPR[EPVATF]-1659779497050
GPR[SPS]-1659779497050
[960294] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:487.
GPR[EPS]-1659779498070
GPR[ESUN]-1659779498070
GPR[SSUN]-1659779498070
507083050
GPR[SPVATF]-1659779498308
GPR[EPVATF]-1659779502416
GPR[SPS]-1659779502416
[965894] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:479.
GPR[EPS]-1659779503670
GPR[SPVATF]-1659779503670
GPR[EPVATF]-1659779508614
GPR[SPS]-1659779508614
[972054] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:479.
GPR[EPS]-1659779509830
GPR[ESUN]-1659779509830
GPR[SSUN]-1659779509830
507083050
GPR[SPVATF]-1659779510143
GPR[EPVATF]-1659779514207
GPR[SPS]-1659779514207
[977603] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:473.
GPR[EPS]-1659779515379
GPR[SPVATF]-1659779515379
GPR[EPVATF]-1659779520505
GPR[SPS]-1659779520506
[983855] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:473.
GPR[EPS]-1659779521632
GPR[ESUN]-1659779521632
GPR[SSUN]-1659779521632
507083050
GPR[ESUN]-1659779521868
GPR[SSUN]-1659779521868
507083050
GPR[SPVATF]-1659779522088
GPR[EPVATF]-1659779526190
GPR[SPS]-1659779526190
[989441] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:334.
GPR[EPS]-1659779527217
GPR[ESUN]-1659779527217
GPR[SSUN]-1659779527218
507083050
GPR[ESUN]-1659779527602
GPR[SSUN]-1659779527602
507083050
GPR[SPVATF]-1659779527820
GPR[EPVATF]-1659779531956
GPR[SPS]-1659779531956
[995174] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:330.
GPR[EPS]-1659779532950
GPR[ESUN]-1659779532950
GPR[SSUN]-1659779532950
507083050
GPR[ESUN]-1659779533181
GPR[SSUN]-1659779533181
507083050
GPR[ESUN]-1659779533400
GPR[SSUN]-1659779533400
507083050
GPR[ESUN]-1659779533614
GPR[SSUN]-1659779533614
507083050
GPR[SPVATF]-1659779533838
GPR[EPVATF]-1659779538019
GPR[SPS]-1659779538019
[1001333] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:310.
GPR[EPS]-1659779539109
GPR[SPVATF]-1659779539110
GPR[EPVATF]-1659779546916
GPR[SPS]-1659779546916
[1010309] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:310.
GPR[EPS]-1659779548085
GPR[ESUN]-1659779548085
GPR[SSUN]-1659779548085
507083050
GPR[SPVATF]-1659779548317
GPR[EPVATF]-1659779552670
GPR[SPS]-1659779552670
[1016076] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:284.
GPR[EPS]-1659779553852
GPR[SPVATF]-1659779553852
GPR[EPVATF]-1659779559004
GPR[SPS]-1659779559004
[1022452] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:284.
GPR[EPS]-1659779560228
GPR[ESUN]-1659779560228
GPR[SSUN]-1659779560228
507083050
GPR[SPVATF]-1659779560456
GPR[EPVATF]-1659779564552
GPR[SPS]-1659779564552
[1027878] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:273.
GPR[EPS]-1659779565654
GPR[SPVATF]-1659779565654
GPR[EPVATF]-1659779569751
GPR[SPS]-1659779569751
[1033151] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:273.
GPR[EPS]-1659779570927
GPR[ESUN]-1659779570927
GPR[SSUN]-1659779570927
507083050
GPR[ESUN]-1659779571154
GPR[SSUN]-1659779571154
507083050
GPR[ESUN]-1659779571372
GPR[SSUN]-1659779571372
507083050
GPR[ESUN]-1659779571587
GPR[SSUN]-1659779571587
507083050
GPR[SPVATF]-1659779571805
GPR[EPVATF]-1659779576810
GPR[SPS]-1659779576810
[1040214] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:266.
GPR[EPS]-1659779577990
GPR[SPVATF]-1659779577990
GPR[EPVATF]-1659779582191
GPR[SPS]-1659779582191
[1045539] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:266.
GPR[EPS]-1659779583315
GPR[ESUN]-1659779583315
GPR[SSUN]-1659779583315
507083050
GPR[ESUN]-1659779583543
GPR[SSUN]-1659779583544
507083050
GPR[SPVATF]-1659779583775
GPR[EPVATF]-1659779588733
GPR[SPS]-1659779588733
[1052170] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:264.
GPR[EPS]-1659779589946
GPR[ESUN]-1659779589946
GPR[SSUN]-1659779589946
507083050
GPR[ESUN]-1659779590169
GPR[SSUN]-1659779590169
507083050
GPR[ESUN]-1659779590380
GPR[SSUN]-1659779590380
507083050
GPR[ESUN]-1659779590588
GPR[SSUN]-1659779590588
507083050
GPR[SPVATF]-1659779590831
GPR[EPVATF]-1659779595052
GPR[SPS]-1659779595052
[1058279] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:253.
GPR[EPS]-1659779596055
GPR[ESUN]-1659779596055
GPR[SSUN]-1659779596055
507083050
GPR[SPVATF]-1659779596285
GPR[EPVATF]-1659779600322
GPR[SPS]-1659779600322
[1063731] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:248.
GPR[EPS]-1659779601507
GPR[SPVATF]-1659779601507
GPR[EPVATF]-1659779606358
GPR[SPS]-1659779606358
[1069791] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:248.
GPR[EPS]-1659779607567
GPR[ESUN]-1659779607567
GPR[SSUN]-1659779607567
1187751237
GPR[SPVATF]-1659779607906
GPR[EPVATF]-1659779612026
GPR[SPS]-1659779612026
[1075447] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2847.
GPR[EPS]-1659779613223
GPR[ESUN]-1659779613223
GPR[SSUN]-1659779613223
1187751237
GPR[ESUN]-1659779613501
GPR[SSUN]-1659779613501
1187751237
GPR[SPVATF]-1659779613763
GPR[EPVATF]-1659779618030
GPR[SPS]-1659779618030
[1081524] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2851.
GPR[EPS]-1659779619300
GPR[ESUN]-1659779619300
GPR[SSUN]-1659779619300
1187751237
GPR[SPVATF]-1659779619582
GPR[EPVATF]-1659779624804
GPR[SPS]-1659779624804
[1088290] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2846.
GPR[EPS]-1659779626066
GPR[ESUN]-1659779626066
GPR[SSUN]-1659779626066
1187751237
GPR[SPVATF]-1659779626347
GPR[EPVATF]-1659779630435
GPR[SPS]-1659779630435
[1093988] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2845.
GPR[EPS]-1659779631764
GPR[SPVATF]-1659779631764
GPR[EPVATF]-1659779636710
GPR[SPS]-1659779636710
[1100223] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2845.
GPR[EPS]-1659779637999
GPR[ESUN]-1659779637999
GPR[SSUN]-1659779637999
-436823543
GPR[SPVATF]-1659779638257
GPR[EPVATF]-1659779641495
GPR[SPS]-1659779641495
[1104794] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:445.
GPR[EPS]-1659779642570
GPR[ESUN]-1659779642570
GPR[SSUN]-1659779642570
2433571
GPR[SPVATF]-1659779642825
GPR[EPVATF]-1659779645073
GPR[SPS]-1659779645073
[1108467] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1052.
GPR[EPS]-1659779646243
GPR[ESUN]-1659779646243
GPR[SSUN]-1659779646243
80988634
GPR[ESUN]-1659779646433
GPR[SSUN]-1659779646433
1299274573
GPR[SPVATF]-1659779646646
GPR[EPVATF]-1659779649663
GPR[SPS]-1659779649663
[1112991] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:476.
GPR[EPS]-1659779650767
GPR[ESUN]-1659779650767
GPR[SSUN]-1659779650767
1299274573
GPR[SPVATF]-1659779650991
GPR[EPVATF]-1659779653943
GPR[SPS]-1659779653943
[1117160] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:475.
GPR[EPS]-1659779654936
GPR[ESUN]-1659779654936
GPR[SSUN]-1659779654936
1299274573
GPR[SPVATF]-1659779655156
GPR[EPVATF]-1659779658180
GPR[SPS]-1659779658180
[1121965] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:474.
GPR[EPS]-1659779659741
GPR[ESUN]-1659779659741
GPR[SSUN]-1659779659741
1299274573
GPR[SPVATF]-1659779660162
GPR[EPVATF]-1659779663479
GPR[SPS]-1659779663479
[1127241] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:427.
GPR[EPS]-1659779665017
GPR[ESUN]-1659779665017
GPR[SSUN]-1659779665017
1299274573
GPR[SPVATF]-1659779665411
GPR[EPVATF]-1659779668877
GPR[SPS]-1659779668877
[1132132] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:426.
GPR[EPS]-1659779669908
GPR[ESUN]-1659779669909
GPR[SSUN]-1659779669909
1299274573
GPR[SPVATF]-1659779670125
GPR[EPVATF]-1659779673274
GPR[SPS]-1659779673274
[1136556] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:425.
GPR[EPS]-1659779674332
GPR[ESUN]-1659779674332
GPR[SSUN]-1659779674332
2433571
GPR[SPVATF]-1659779674588
GPR[EPVATF]-1659779676918
GPR[SPS]-1659779676918
[1141352] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1049.
GPR[EPS]-1659779679128
GPR[SPVATF]-1659779679128
GPR[EPVATF]-1659779681953
GPR[SPS]-1659779681953
[1145838] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1049.
GPR[EPS]-1659779683614
GPR[ESUN]-1659779683614
GPR[SSUN]-1659779683614
2433571
GPR[SPVATF]-1659779684253
GPR[EPVATF]-1659779687256
GPR[SPS]-1659779687256
[1151235] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1045.
GPR[EPS]-1659779689011
GPR[ESUN]-1659779689011
GPR[SSUN]-1659779689011
1187751237
GPR[ESUN]-1659779689580
GPR[SSUN]-1659779689580
1299274573
GPR[SPVATF]-1659779690045
GPR[EPVATF]-1659779694705
GPR[SPS]-1659779694705
[1157950] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:745.
GPR[EPS]-1659779695726
GPR[ESUN]-1659779695727
GPR[SSUN]-1659779695727
80988634
GPR[ESUN]-1659779695910
GPR[SSUN]-1659779695910
1299274573
GPR[SPVATF]-1659779696122
GPR[EPVATF]-1659779700437
GPR[SPS]-1659779700437
[1164580] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:811.
GPR[EPS]-1659779702356
GPR[ESUN]-1659779702356
GPR[SSUN]-1659779702356
1299274573
GPR[SPVATF]-1659779702580
GPR[EPVATF]-1659779707288
GPR[SPS]-1659779707288
[1170790] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:808.
GPR[EPS]-1659779708566
GPR[SPVATF]-1659779708566
GPR[EPVATF]-1659779713447
GPR[SPS]-1659779713447
[1177873] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:808.
GPR[EPS]-1659779715649
GPR[ESUN]-1659779715649
GPR[SSUN]-1659779715649
1187751237
GPR[SPVATF]-1659779715971
GPR[EPVATF]-1659779721326
GPR[SPS]-1659779721326
[1184920] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2807.
GPR[EPS]-1659779722696
GPR[ESUN]-1659779722696
GPR[SSUN]-1659779722696
-436823543
GPR[ESUN]-1659779722935
GPR[SSUN]-1659779722935
-436823543
GPR[ESUN]-1659779723162
GPR[SSUN]-1659779723162
-436823543
GPR[SPVATF]-1659779723387
GPR[EPVATF]-1659779726478
GPR[SPS]-1659779726478
[1189805] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:448.
GPR[EPS]-1659779727581
GPR[SPVATF]-1659779727581
GPR[EPVATF]-1659779730691
GPR[SPS]-1659779730691
[1194029] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:448.
GPR[EPS]-1659779731805
GPR[ESUN]-1659779731805
GPR[SSUN]-1659779731805
-436823543
GPR[SPVATF]-1659779732050
GPR[EPVATF]-1659779735103
GPR[SPS]-1659779735103
[1199037] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:442.
GPR[EPS]-1659779736813
GPR[SPVATF]-1659779736814
GPR[EPVATF]-1659779739828
GPR[SPS]-1659779739828
[1203088] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:442.
GPR[EPS]-1659779740864
GPR[ESUN]-1659779740864
GPR[SSUN]-1659779740864
-436823543
GPR[ESUN]-1659779741102
GPR[SSUN]-1659779741102
-436823543
GPR[ESUN]-1659779741324
GPR[SSUN]-1659779741324
-436823543
GPR[SPVATF]-1659779741546
GPR[EPVATF]-1659779744547
GPR[SPS]-1659779744547
[1207802] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:343.
GPR[EPS]-1659779745578
GPR[SPVATF]-1659779745578
GPR[EPVATF]-1659779748687
GPR[SPS]-1659779748687
[1211951] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:343.
GPR[EPS]-1659779749727
GPR[ESUN]-1659779749727
GPR[SSUN]-1659779749727
-436823543
GPR[SPVATF]-1659779749968
GPR[EPVATF]-1659779753097
GPR[SPS]-1659779753097
[1216381] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:338.
GPR[EPS]-1659779754157
GPR[SPVATF]-1659779754157
GPR[EPVATF]-1659779757207
GPR[SPS]-1659779757207
[1220499] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:338.
GPR[EPS]-1659779758276
GPR[ESUN]-1659779758276
GPR[SSUN]-1659779758276
-436823543
GPR[SPVATF]-1659779758514
GPR[EPVATF]-1659779761680
GPR[SPS]-1659779761680
[1224983] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:335.
GPR[EPS]-1659779762759
GPR[ESUN]-1659779762759
GPR[SSUN]-1659779762759
1299274573
GPR[SPVATF]-1659779762996
GPR[EPVATF]-1659779767050
GPR[SPS]-1659779767050
[1229701] ERROR ConstraintModelBuilder - Unable to compile the change: 
class FunctionInjector {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier;

    private final boolean allowDecomposition;

    private java.util.Set<java.lang.String> knownConstants = com.google.common.collect.Sets.newHashSet();

    private final boolean assumeStrictThis;

    private final boolean assumeMinimumCapture;

    public FunctionInjector(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier, boolean allowDecomposition, boolean assumeStrictThis, boolean assumeMinimumCapture) {
        com.google.common.base.Preconditions.checkNotNull(compiler);
        com.google.common.base.Preconditions.checkNotNull(safeNameIdSupplier);
        this.compiler = compiler;
        this.safeNameIdSupplier = safeNameIdSupplier;
        this.allowDecomposition = allowDecomposition;
        this.assumeStrictThis = assumeStrictThis;
        this.assumeMinimumCapture = assumeMinimumCapture;
    }

    enum InliningMode {

        DIRECT,
        BLOCK;}

    static class Reference {
        final com.google.javascript.rhino.Node callNode;

        final com.google.javascript.jscomp.JSModule module;

        final com.google.javascript.jscomp.FunctionInjector.InliningMode mode;

        Reference(com.google.javascript.rhino.Node callNode, com.google.javascript.jscomp.JSModule module, com.google.javascript.jscomp.FunctionInjector.InliningMode mode) {
            this.callNode = callNode;
            this.module = module;
            this.mode = mode;
        }
    }

    private static final int NAME_COST_ESTIMATE = com.google.javascript.jscomp.InlineCostEstimator.ESTIMATED_IDENTIFIER_COST;

    private static final int COMMA_COST = 1;

    private static final int PAREN_COST = 2;

    boolean doesFunctionMeetMinimumRequirements(final java.lang.String fnName, com.google.javascript.rhino.Node fnNode) {
        com.google.javascript.rhino.Node block = com.google.javascript.jscomp.NodeUtil.getFunctionBody(fnNode);
        final java.lang.String fnRecursionName = fnNode.getFirstChild().getString();
        com.google.common.base.Preconditions.checkState(fnRecursionName != null);
        boolean referencesArguments = com.google.javascript.jscomp.NodeUtil.isNameReferenced(block, "arguments", com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        com.google.common.base.Predicate<com.google.javascript.rhino.Node> p = new com.google.common.base.Predicate<com.google.javascript.rhino.Node>() {
            @java.lang.Override
            public boolean apply(com.google.javascript.rhino.Node n) {
                if (n.getType() == com.google.javascript.rhino.Token.NAME) {
                    return (n.getString().equals("eval") || ((!fnName.isEmpty()) && n.getString().equals(fnName))) || ((!fnRecursionName.isEmpty()) && n.getString().equals(fnRecursionName));
                }
                return false;
            }
        };
        return (!referencesArguments) && (!com.google.javascript.jscomp.NodeUtil.has(block, p, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue()));
    }

    com.google.javascript.jscomp.FunctionInjector.CanInlineResult canInlineReferenceToFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> needAliases, com.google.javascript.jscomp.FunctionInjector.InliningMode mode, boolean referencesThis, boolean containsFunctions) {
        if (!isSupportedCallType(callNode)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (containsFunctions) {
            if ((!assumeMinimumCapture) && (!t.inGlobalScope())) {
                return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
            } else if (com.google.javascript.jscomp.NodeUtil.isWithinLoop(callNode)) {
                return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
            }
        }
        if (referencesThis && (!com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode))) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT) {
            return canInlineReferenceDirectly(callNode, fnNode);
        } else {
            return canInlineReferenceAsStatementBlock(t, callNode, fnNode, needAliases);
        }
    }

    private boolean isSupportedCallType(com.google.javascript.rhino.Node callNode) {
        if (callNode.getFirstChild().getType() != com.google.javascript.rhino.Token.NAME) {
            if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode)) {
                if (!assumeStrictThis) {
                    com.google.javascript.rhino.Node thisValue = callNode.getFirstChild().getNext();
                    if ((thisValue == null) || (thisValue.getType() != com.google.javascript.rhino.Token.THIS)) {
                        return false;
                    }
                }
            } else if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectApply(callNode)) {
                return false;
            }
        }
        return true;
    }

    com.google.javascript.rhino.Node inline(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, java.lang.String fnName, com.google.javascript.rhino.Node fnNode, com.google.javascript.jscomp.FunctionInjector.InliningMode mode) {
        com.google.common.base.Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());
        if (mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT) {
            return inlineReturnValue(callNode, fnNode);
        } else {
            return inlineFunction(callNode, fnNode, fnName);
        }
    }

    private com.google.javascript.rhino.Node inlineReturnValue(com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode) {
        com.google.javascript.rhino.Node block = fnNode.getLastChild();
        com.google.javascript.rhino.Node callParentNode = callNode.getParent();
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> argMap = com.google.javascript.jscomp.FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);
        com.google.javascript.rhino.Node newExpression;
        if (!block.hasChildren()) {
            com.google.javascript.rhino.Node srcLocation = block;
            newExpression = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(srcLocation);
        } else {
            com.google.javascript.rhino.Node returnNode = block.getFirstChild();
            com.google.common.base.Preconditions.checkArgument(returnNode.getType() == com.google.javascript.rhino.Token.RETURN);
            com.google.javascript.rhino.Node safeReturnNode = returnNode.cloneTree();
            com.google.javascript.rhino.Node inlineResult = com.google.javascript.jscomp.FunctionArgumentInjector.inject(null, safeReturnNode, null, argMap);
            com.google.common.base.Preconditions.checkArgument(safeReturnNode == inlineResult);
            newExpression = safeReturnNode.removeFirstChild();
        }
        callParentNode.replaceChild(callNode, newExpression);
        return newExpression;
    }

    private enum CallSiteType {

        UNSUPPORTED,
        SIMPLE_CALL,
        SIMPLE_ASSIGNMENT,
        VAR_DECL_SIMPLE_ASSIGNMENT,
        EXPRESSION,
        DECOMPOSABLE_EXPRESSION;}

    private com.google.javascript.jscomp.FunctionInjector.CallSiteType classifyCallSite(com.google.javascript.rhino.Node callNode) {
        com.google.javascript.rhino.Node parent = callNode.getParent();
        com.google.javascript.rhino.Node grandParent = parent.getParent();
        if (com.google.javascript.jscomp.NodeUtil.isExprCall(parent)) {
            return com.google.javascript.jscomp.FunctionInjector.CallSiteType.SIMPLE_CALL;
        } else if (((com.google.javascript.jscomp.NodeUtil.isExprAssign(grandParent) && (!com.google.javascript.jscomp.NodeUtil.isVarOrSimpleAssignLhs(callNode, parent))) && (parent.getFirstChild().getType() == com.google.javascript.rhino.Token.NAME)) && (!com.google.javascript.jscomp.NodeUtil.isConstantName(parent.getFirstChild()))) {
            return com.google.javascript.jscomp.FunctionInjector.CallSiteType.SIMPLE_ASSIGNMENT;
        } else if ((((parent.getType() == com.google.javascript.rhino.Token.NAME) && (!com.google.javascript.jscomp.NodeUtil.isConstantName(parent))) && (grandParent.getType() == com.google.javascript.rhino.Token.VAR)) && grandParent.hasOneChild()) {
            return com.google.javascript.jscomp.FunctionInjector.CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT;
        } else {
            com.google.javascript.rhino.Node expressionRoot = com.google.javascript.jscomp.ExpressionDecomposer.findExpressionRoot(callNode);
            if (expressionRoot != null) {
                com.google.javascript.jscomp.ExpressionDecomposer decomposer = new com.google.javascript.jscomp.ExpressionDecomposer(compiler, safeNameIdSupplier, knownConstants);
                com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType type = decomposer.canExposeExpression(callNode);
                if (type == com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.MOVABLE) {
                    return com.google.javascript.jscomp.FunctionInjector.CallSiteType.EXPRESSION;
                } else if (type == com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.DECOMPOSABLE) {
                    return com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION;
                } else {
                    com.google.common.base.Preconditions.checkState(type == com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.UNDECOMPOSABLE);
                }
            }
        }
        return com.google.javascript.jscomp.FunctionInjector.CallSiteType.UNSUPPORTED;
    }

    private com.google.javascript.rhino.Node inlineFunction(com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode, java.lang.String fnName) {
        com.google.javascript.rhino.Node parent = callNode.getParent();
        com.google.javascript.rhino.Node grandParent = parent.getParent();
        com.google.javascript.jscomp.FunctionInjector.CallSiteType callSiteType = classifyCallSite(callNode);
        com.google.common.base.Preconditions.checkArgument(callSiteType != com.google.javascript.jscomp.FunctionInjector.CallSiteType.UNSUPPORTED);
        boolean isCallInLoop = com.google.javascript.jscomp.NodeUtil.isWithinLoop(callNode);
        java.lang.String resultName = null;
        boolean needsDefaultReturnResult = true;
        switch (callSiteType) {
            case SIMPLE_ASSIGNMENT :
                resultName = parent.getFirstChild().getString();
                break;
            case VAR_DECL_SIMPLE_ASSIGNMENT :
                resultName = parent.getString();
                break;
            case SIMPLE_CALL :
                resultName = null;
                needsDefaultReturnResult = false;
                break;
            case EXPRESSION :
                resultName = getUniqueResultName();
                needsDefaultReturnResult = isCallInLoop;
                break;
            case DECOMPOSABLE_EXPRESSION :
                throw new java.lang.IllegalStateException("Decomposable expressions must decomposed before inlining.");
            default :
                throw new java.lang.IllegalStateException("Unexpected call site type.");
        }
        com.google.javascript.jscomp.FunctionToBlockMutator mutator = new com.google.javascript.jscomp.FunctionToBlockMutator(compiler, this.safeNameIdSupplier);
        com.google.javascript.rhino.Node newBlock = mutator.mutate(fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);
        com.google.javascript.rhino.Node greatGrandParent = grandParent.getParent();
        switch (callSiteType) {
            case VAR_DECL_SIMPLE_ASSIGNMENT :
                parent.removeChild(parent.getFirstChild());
                com.google.common.base.Preconditions.checkState(parent.getFirstChild() == null);
                greatGrandParent.addChildAfter(newBlock, grandParent);
                break;
            case SIMPLE_ASSIGNMENT :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isExpressionNode(grandParent));
                greatGrandParent.replaceChild(grandParent, newBlock);
                break;
            case SIMPLE_CALL :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isExpressionNode(parent));
                grandParent.replaceChild(parent, newBlock);
                break;
            case EXPRESSION :
                com.google.javascript.rhino.Node injectionPoint = com.google.javascript.jscomp.ExpressionDecomposer.findInjectionPoint(callNode);
                com.google.common.base.Preconditions.checkNotNull(injectionPoint);
                com.google.javascript.rhino.Node injectionPointParent = injectionPoint.getParent();
                com.google.common.base.Preconditions.checkNotNull(injectionPointParent);
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isStatementBlock(injectionPointParent));
                newBlock.addChildrenToFront(com.google.javascript.jscomp.NodeUtil.newVarNode(resultName, null).copyInformationFromForTree(callNode));
                injectionPointParent.addChildBefore(newBlock, injectionPoint);
                parent.replaceChild(callNode, com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, resultName));
                break;
            default :
                throw new java.lang.IllegalStateException("Unexpected call site type.");
        }
        return newBlock;
    }

    boolean isDirectCallNodeReplacementPossible(com.google.javascript.rhino.Node fnNode) {
        com.google.javascript.rhino.Node block = com.google.javascript.jscomp.NodeUtil.getFunctionBody(fnNode);
        if (!block.hasChildren()) {
            return true;
        } else if (block.hasOneChild()) {
            if ((block.getFirstChild().getType() == com.google.javascript.rhino.Token.RETURN) && (block.getFirstChild().getFirstChild() != null)) {
                return true;
            }
        }
        return false;
    }

    enum CanInlineResult {

        YES,
        AFTER_DECOMPOSITION,
        NO;}

    private com.google.javascript.jscomp.FunctionInjector.CanInlineResult canInlineReferenceAsStatementBlock(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> namesToAlias) {
        com.google.javascript.jscomp.FunctionInjector.CallSiteType callSiteType = classifyCallSite(callNode);
        if (callSiteType == com.google.javascript.jscomp.FunctionInjector.CallSiteType.UNSUPPORTED) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if ((!allowDecomposition) && (callSiteType == com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (callSiteType == com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.AFTER_DECOMPOSITION;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(164).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.FunctionInjector.this.safeNameIdSupplier",com.google.javascript.jscomp.FunctionInjector.this.safeNameIdSupplier);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.FunctionInjector.this.compiler",com.google.javascript.jscomp.FunctionInjector.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("namesToAlias",namesToAlias);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE",com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("fnNode",fnNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.FunctionInjector.COMMA_COST",com.google.javascript.jscomp.FunctionInjector.COMMA_COST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.FunctionInjector.this.assumeStrictThis",com.google.javascript.jscomp.FunctionInjector.this.assumeStrictThis);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.FunctionInjector.PAREN_COST",com.google.javascript.jscomp.FunctionInjector.PAREN_COST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("callSiteType",callSiteType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("callNode",callNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.FunctionInjector.this.knownConstants",com.google.javascript.jscomp.FunctionInjector.this.knownConstants);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.FunctionInjector.this.assumeMinimumCapture",com.google.javascript.jscomp.FunctionInjector.this.assumeMinimumCapture);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.FunctionInjector.this.allowDecomposition",com.google.javascript.jscomp.FunctionInjector.this.allowDecomposition);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectionEnds();
            }
            if (runtimeAngelicValue)
                return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.YES;

        }
    }

    private boolean callMeetsBlockInliningRequirements(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, final com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> namesToAlias) {
        final boolean assumeMinimumCapture = this.assumeMinimumCapture;
        boolean fnContainsVars = com.google.javascript.jscomp.NodeUtil.has(com.google.javascript.jscomp.NodeUtil.getFunctionBody(fnNode), new com.google.javascript.jscomp.NodeUtil.MatchDeclaration(), new com.google.javascript.jscomp.NodeUtil.MatchShallowStatement());
        boolean forbidTemps = false;
        if (!t.inGlobalScope()) {
            com.google.javascript.rhino.Node fnCaller = t.getScopeRoot();
            com.google.javascript.rhino.Node fnCallerBody = fnCaller.getLastChild();
            com.google.common.base.Predicate<com.google.javascript.rhino.Node> match = new com.google.common.base.Predicate<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean apply(com.google.javascript.rhino.Node n) {
                    if (n.getType() == com.google.javascript.rhino.Token.NAME) {
                        return n.getString().equals("eval");
                    }
                    if ((!assumeMinimumCapture) && (n.getType() == com.google.javascript.rhino.Token.FUNCTION)) {
                        return n != fnNode;
                    }
                    return false;
                }
            };
            forbidTemps = com.google.javascript.jscomp.NodeUtil.has(fnCallerBody, match, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        }
        if (fnContainsVars && forbidTemps) {
            return false;
        }
        if (forbidTemps) {
            java.util.Map<java.lang.String, com.google.javascript.rhino.Node> args = com.google.javascript.jscomp.FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);
            boolean hasArgs = !args.isEmpty();
            if (hasArgs) {
                java.util.Set<java.lang.String> allNamesToAlias = com.google.common.collect.Sets.newHashSet(namesToAlias);
                com.google.javascript.jscomp.FunctionArgumentInjector.maybeAddTempsForCallArguments(fnNode, args, allNamesToAlias, compiler.getCodingConvention());
                if (!allNamesToAlias.isEmpty()) {
                    return false;
                }
            }
        }
        return true;
    }

    private com.google.javascript.jscomp.FunctionInjector.CanInlineResult canInlineReferenceDirectly(com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode) {
        if (!isDirectCallNodeReplacementPossible(fnNode)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        com.google.javascript.rhino.Node block = fnNode.getLastChild();
        com.google.javascript.rhino.Node cArg = callNode.getFirstChild().getNext();
        if (callNode.getFirstChild().getType() != com.google.javascript.rhino.Token.NAME) {
            if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode)) {
                if ((cArg == null) || (cArg.getType() != com.google.javascript.rhino.Token.THIS)) {
                    return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
                }
                cArg = cArg.getNext();
            } else {
                com.google.common.base.Preconditions.checkState(!com.google.javascript.jscomp.NodeUtil.isFunctionObjectApply(callNode));
            }
        }
        com.google.javascript.rhino.Node fnParam = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(fnNode).getFirstChild();
        while ((cArg != null) || (fnParam != null)) {
            if (fnParam != null) {
                if (cArg != null) {
                    if (com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(cArg) && (com.google.javascript.jscomp.NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1)) {
                        return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
                    }
                }
                fnParam = fnParam.getNext();
            }
            if (cArg != null) {
                if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(cArg)) {
                    return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
                }
                cArg = cArg.getNext();
            }
        } 
        return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.YES;
    }

    private java.lang.String getUniqueResultName() {
        return ("JSCompiler_inline_result" + com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.UNIQUE_ID_SEPARATOR) + safeNameIdSupplier.get();
    }

    boolean inliningLowersCost(com.google.javascript.jscomp.JSModule fnModule, com.google.javascript.rhino.Node fnNode, java.util.Collection<? extends com.google.javascript.jscomp.FunctionInjector.Reference> refs, java.util.Set<java.lang.String> namesToAlias, boolean isRemovable, boolean referencesThis) {
        int referenceCount = refs.size();
        if (referenceCount == 0) {
            return true;
        }
        int referencesUsingBlockInlining = 0;
        boolean checkModules = isRemovable && (fnModule != null);
        com.google.javascript.jscomp.JSModuleGraph moduleGraph = compiler.getModuleGraph();
        for (com.google.javascript.jscomp.FunctionInjector.Reference ref : refs) {
            if (ref.mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.BLOCK) {
                referencesUsingBlockInlining++;
            }
            if (checkModules && (ref.module != null)) {
                if ((ref.module != fnModule) && (!moduleGraph.dependsOn(ref.module, fnModule))) {
                    isRemovable = false;
                    checkModules = false;
                }
            }
        }
        int referencesUsingDirectInlining = referenceCount - referencesUsingBlockInlining;
        if (((referenceCount == 1) && isRemovable) && (referencesUsingDirectInlining == 1)) {
            return true;
        }
        int callCost = com.google.javascript.jscomp.FunctionInjector.estimateCallCost(fnNode, referencesThis);
        int overallCallCost = callCost * referenceCount;
        int costDeltaDirect = com.google.javascript.jscomp.FunctionInjector.inlineCostDelta(fnNode, namesToAlias, com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT);
        int costDeltaBlock = com.google.javascript.jscomp.FunctionInjector.inlineCostDelta(fnNode, namesToAlias, com.google.javascript.jscomp.FunctionInjector.InliningMode.BLOCK);
        return doesLowerCost(fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable);
    }

    private boolean doesLowerCost(com.google.javascript.rhino.Node fnNode, int callCost, int directInlines, int costDeltaDirect, int blockInlines, int costDeltaBlock, boolean removable) {
        int fnInstanceCount = (directInlines + blockInlines) - (removable ? 1 : 0);
        if (fnInstanceCount == 0) {
            if ((blockInlines > 0) && (costDeltaBlock > 0)) {
                return false;
            }
            return true;
        }
        int costDelta = (directInlines * costDeltaDirect) + (blockInlines * costDeltaBlock);
        int threshold = (callCost - costDelta) / fnInstanceCount;
        return com.google.javascript.jscomp.InlineCostEstimator.getCost(fnNode, threshold + 1) <= threshold;
    }

    private static int estimateCallCost(com.google.javascript.rhino.Node fnNode, boolean referencesThis) {
        com.google.javascript.rhino.Node argsNode = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(fnNode);
        int numArgs = argsNode.getChildCount();
        int callCost = com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE + com.google.javascript.jscomp.FunctionInjector.PAREN_COST;
        if (numArgs > 0) {
            callCost += (numArgs * com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE) + ((numArgs - 1) * com.google.javascript.jscomp.FunctionInjector.COMMA_COST);
        }
        if (referencesThis) {
            callCost += 5 + 5;
        }
        return callCost;
    }

    private static int inlineCostDelta(com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> namesToAlias, com.google.javascript.jscomp.FunctionInjector.InliningMode mode) {
        int paramCount = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(fnNode).getChildCount();
        int commaCount = (paramCount > 1) ? paramCount - 1 : 0;
        int costDeltaFunctionOverhead = (15 + commaCount) + (paramCount * com.google.javascript.jscomp.InlineCostEstimator.ESTIMATED_IDENTIFIER_COST);
        com.google.javascript.rhino.Node block = fnNode.getLastChild();
        if (!block.hasChildren()) {
            return -costDeltaFunctionOverhead;
        }
        if (mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT) {
            return -(costDeltaFunctionOverhead + 7);
        } else {
            int aliasCount = namesToAlias.size();
            final int INLINE_BLOCK_OVERHEAD = 4;
            final int PER_RETURN_OVERHEAD = 2;
            final int PER_RETURN_RESULT_OVERHEAD = 3;
            final int PER_ALIAS_OVERHEAD = 3;
            int returnCount = com.google.javascript.jscomp.NodeUtil.getNodeTypeReferenceCount(block, com.google.javascript.rhino.Token.RETURN, new com.google.javascript.jscomp.NodeUtil.MatchShallowStatement());
            int resultCount = (returnCount > 0) ? returnCount - 1 : 0;
            int baseOverhead = (returnCount > 0) ? INLINE_BLOCK_OVERHEAD : 0;
            int overhead = ((baseOverhead + (returnCount * PER_RETURN_OVERHEAD)) + (resultCount * PER_RETURN_RESULT_OVERHEAD)) + (aliasCount * PER_ALIAS_OVERHEAD);
            return overhead - costDeltaFunctionOverhead;
        }
    }

    public void setKnownConstants(java.util.Set<java.lang.String> knownConstants) {
        com.google.common.base.Preconditions.checkState(this.knownConstants.isEmpty());
        this.knownConstants = knownConstants;
    }
}
[1229702] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659779767478
GPR[SSUN]-1659779767478
1045502179
GPR[ESUN]-1659779767734
GPR[SSUN]-1659779767734
1045502179
GPR[SPVATF]-1659779767987
GPR[EPVATF]-1659779770211
GPR[SPS]-1659779770211
[1233597] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:990.
GPR[EPS]-1659779771374
GPR[ESUN]-1659779771374
GPR[SSUN]-1659779771374
1045502179
GPR[ESUN]-1659779771637
GPR[SSUN]-1659779771637
507083050
GPR[SPVATF]-1659779771866
GPR[EPVATF]-1659779774076
GPR[SPS]-1659779774076
[1237619] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:267.
GPR[EPS]-1659779775395
GPR[ESUN]-1659779775395
GPR[SSUN]-1659779775395
1045502179
GPR[SPVATF]-1659779775649
GPR[EPVATF]-1659779777936
GPR[SPS]-1659779777936
[1241333] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:279.
GPR[EPS]-1659779779109
GPR[ESUN]-1659779779109
GPR[SSUN]-1659779779109
1045502179
GPR[SPVATF]-1659779779358
GPR[EPVATF]-1659779781705
GPR[SPS]-1659779781705
[1245122] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:278.
GPR[EPS]-1659779782898
GPR[ESUN]-1659779782898
GPR[SSUN]-1659779782898
1187751237
GPR[ESUN]-1659779783190
GPR[SSUN]-1659779783190
1187751237
GPR[SPVATF]-1659779783468
GPR[EPVATF]-1659779788104
GPR[SPS]-1659779788104
[1251663] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2806.
GPR[EPS]-1659779789439
GPR[ESUN]-1659779789439
GPR[SSUN]-1659779789440
1187751237
GPR[SPVATF]-1659779789722
GPR[EPVATF]-1659779794525
GPR[SPS]-1659779794525
[1258074] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2805.
GPR[EPS]-1659779795850
GPR[SPVATF]-1659779795850
GPR[EPVATF]-1659779800969
GPR[SPS]-1659779800969
[1264673] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2805.
GPR[EPS]-1659779802449
GPR[ESUN]-1659779802449
GPR[SSUN]-1659779802449
1187751237
GPR[SPVATF]-1659779802730
GPR[EPVATF]-1659779807850
GPR[SPS]-1659779807850
[1271509] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2801.
GPR[EPS]-1659779809285
GPR[SPVATF]-1659779809285
GPR[EPVATF]-1659779815313
GPR[SPS]-1659779815313
[1279615] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2801.
GPR[EPS]-1659779817391
GPR[ESUN]-1659779817391
GPR[SSUN]-1659779817391
1187751237
GPR[ESUN]-1659779817708
GPR[SSUN]-1659779817708
-74911490
GPR[ESUN]-1659779817929
GPR[SSUN]-1659779817929
-74911490
GPR[SPVATF]-1659779818133
GPR[EPVATF]-1659779822594
GPR[SPS]-1659779822594
[1285946] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RenameLabels:260.
GPR[EPS]-1659779823722
GPR[ESUN]-1659779823722
GPR[SSUN]-1659779823722
-74911490
GPR[ESUN]-1659779823939
GPR[SSUN]-1659779823939
-74911490
GPR[SPVATF]-1659779824144
GPR[EPVATF]-1659779829172
GPR[SPS]-1659779829172
[1292557] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RenameLabels$ProcessLabels:170.
GPR[EPS]-1659779830333
GPR[ESUN]-1659779830333
GPR[SSUN]-1659779830333
-74911490
GPR[ESUN]-1659779830549
GPR[SSUN]-1659779830549
-74911490
GPR[SPVATF]-1659779830752
GPR[EPVATF]-1659779834892
GPR[SPS]-1659779834892
[1298337] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RenameLabels$ProcessLabels:139.
GPR[EPS]-1659779836114
GPR[SPVATF]-1659779836114
GPR[EPVATF]-1659779841157
GPR[SPS]-1659779841157
[1304453] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RenameLabels$ProcessLabels:139.
GPR[EPS]-1659779842229
GPR[ESUN]-1659779842229
GPR[SSUN]-1659779842229
-74911490
GPR[ESUN]-1659779842438
GPR[SSUN]-1659779842438
-74911490
GPR[SPVATF]-1659779842640
GPR[EPVATF]-1659779846853
GPR[SPS]-1659779846853
[1310135] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RenameLabels$ProcessLabels:127.
GPR[EPS]-1659779847911
GPR[ESUN]-1659779847912
GPR[SSUN]-1659779847912
-74911490
GPR[ESUN]-1659779848124
GPR[SSUN]-1659779848124
-74911490
GPR[SPVATF]-1659779848324
GPR[EPVATF]-1659779853429
GPR[SPS]-1659779853429
[1316644] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RenameLabels$ProcessLabels:122.
GPR[EPS]-1659779854420
GPR[ESUN]-1659779854420
GPR[SSUN]-1659779854420
-534884160
GPR[ESUN]-1659779854735
GPR[SSUN]-1659779854735
-534884160
GPR[ESUN]-1659779855060
GPR[SSUN]-1659779855060
-534884160
GPR[ESUN]-1659779855364
GPR[SSUN]-1659779855364
-534884160
GPR[ESUN]-1659779855658
GPR[SSUN]-1659779855658
1045502179
GPR[SPVATF]-1659779855888
GPR[EPVATF]-1659779859686
GPR[SPS]-1659779859686
[1322967] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:302.
GPR[EPS]-1659779860743
GPR[SPVATF]-1659779860743
GPR[EPVATF]-1659779864576
GPR[SPS]-1659779864576
[1327991] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:302.
GPR[EPS]-1659779865767
GPR[ESUN]-1659779865767
GPR[SSUN]-1659779865767
1187751237
GPR[ESUN]-1659779866099
GPR[SSUN]-1659779866099
1187751237
GPR[SPVATF]-1659779866437
GPR[EPVATF]-1659779871395
GPR[SPS]-1659779871395
[1334900] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1658.
GPR[EPS]-1659779872676
GPR[SPVATF]-1659779872677
GPR[EPVATF]-1659779877017
GPR[SPS]-1659779877017
[1340466] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1658.
GPR[EPS]-1659779878242
GPR[ESUN]-1659779878242
GPR[SSUN]-1659779878242
1187751237
GPR[SPVATF]-1659779878521
GPR[EPVATF]-1659779883646
GPR[SPS]-1659779883646
[1347070] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1654.
GPR[EPS]-1659779884846
GPR[SPVATF]-1659779884846
GPR[EPVATF]-1659779888954
GPR[SPS]-1659779888954
[1352318] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1654.
GPR[EPS]-1659779890094
GPR[ESUN]-1659779890094
GPR[SSUN]-1659779890094
1187751237
GPR[SPVATF]-1659779890373
GPR[EPVATF]-1659779894544
GPR[SPS]-1659779894544
[1357976] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1653.
GPR[EPS]-1659779895752
GPR[ESUN]-1659779895752
GPR[SSUN]-1659779895752
1187751237
GPR[ESUN]-1659779896072
GPR[SSUN]-1659779896072
1187751237
GPR[ESUN]-1659779896334
GPR[SSUN]-1659779896334
507083050
GPR[SPVATF]-1659779896551
GPR[EPVATF]-1659779900695
GPR[SPS]-1659779900695
[1364000] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:103.
GPR[EPS]-1659779901776
GPR[ESUN]-1659779901776
GPR[SSUN]-1659779901776
-436823543
GPR[SPVATF]-1659779902014
GPR[EPVATF]-1659779904793
GPR[SPS]-1659779904793
[1368026] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:412.
GPR[EPS]-1659779905802
GPR[ESUN]-1659779905802
GPR[SSUN]-1659779905802
-436823543
GPR[SPVATF]-1659779906063
GPR[EPVATF]-1659779908843
GPR[SPS]-1659779908843
[1372067] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:411.
GPR[EPS]-1659779909843
GPR[ESUN]-1659779909843
GPR[SSUN]-1659779909843
1299274573
GPR[SPVATF]-1659779910074
GPR[EPVATF]-1659779914271
GPR[SPS]-1659779914271
[1376864] ERROR ConstraintModelBuilder - Unable to compile the change: 
class FunctionInjector {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier;

    private final boolean allowDecomposition;

    private java.util.Set<java.lang.String> knownConstants = com.google.common.collect.Sets.newHashSet();

    private final boolean assumeStrictThis;

    private final boolean assumeMinimumCapture;

    public FunctionInjector(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier, boolean allowDecomposition, boolean assumeStrictThis, boolean assumeMinimumCapture) {
        com.google.common.base.Preconditions.checkNotNull(compiler);
        com.google.common.base.Preconditions.checkNotNull(safeNameIdSupplier);
        this.compiler = compiler;
        this.safeNameIdSupplier = safeNameIdSupplier;
        this.allowDecomposition = allowDecomposition;
        this.assumeStrictThis = assumeStrictThis;
        this.assumeMinimumCapture = assumeMinimumCapture;
    }

    enum InliningMode {

        DIRECT,
        BLOCK;}

    static class Reference {
        final com.google.javascript.rhino.Node callNode;

        final com.google.javascript.jscomp.JSModule module;

        final com.google.javascript.jscomp.FunctionInjector.InliningMode mode;

        Reference(com.google.javascript.rhino.Node callNode, com.google.javascript.jscomp.JSModule module, com.google.javascript.jscomp.FunctionInjector.InliningMode mode) {
            this.callNode = callNode;
            this.module = module;
            this.mode = mode;
        }
    }

    private static final int NAME_COST_ESTIMATE = com.google.javascript.jscomp.InlineCostEstimator.ESTIMATED_IDENTIFIER_COST;

    private static final int COMMA_COST = 1;

    private static final int PAREN_COST = 2;

    boolean doesFunctionMeetMinimumRequirements(final java.lang.String fnName, com.google.javascript.rhino.Node fnNode) {
        com.google.javascript.rhino.Node block = com.google.javascript.jscomp.NodeUtil.getFunctionBody(fnNode);
        final java.lang.String fnRecursionName = fnNode.getFirstChild().getString();
        com.google.common.base.Preconditions.checkState(fnRecursionName != null);
        boolean referencesArguments = com.google.javascript.jscomp.NodeUtil.isNameReferenced(block, "arguments", com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        com.google.common.base.Predicate<com.google.javascript.rhino.Node> p = new com.google.common.base.Predicate<com.google.javascript.rhino.Node>() {
            @java.lang.Override
            public boolean apply(com.google.javascript.rhino.Node n) {
                if (n.getType() == com.google.javascript.rhino.Token.NAME) {
                    return (n.getString().equals("eval") || ((!fnName.isEmpty()) && n.getString().equals(fnName))) || ((!fnRecursionName.isEmpty()) && n.getString().equals(fnRecursionName));
                }
                return false;
            }
        };
        return (!referencesArguments) && (!com.google.javascript.jscomp.NodeUtil.has(block, p, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue()));
    }

    com.google.javascript.jscomp.FunctionInjector.CanInlineResult canInlineReferenceToFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> needAliases, com.google.javascript.jscomp.FunctionInjector.InliningMode mode, boolean referencesThis, boolean containsFunctions) {
        if (!isSupportedCallType(callNode)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (containsFunctions) {
            if ((!assumeMinimumCapture) && (!t.inGlobalScope())) {
                return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
            } else if (com.google.javascript.jscomp.NodeUtil.isWithinLoop(callNode)) {
                return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
            }
        }
        if (referencesThis && (!com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode))) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT) {
            return canInlineReferenceDirectly(callNode, fnNode);
        } else {
            return canInlineReferenceAsStatementBlock(t, callNode, fnNode, needAliases);
        }
    }

    private boolean isSupportedCallType(com.google.javascript.rhino.Node callNode) {
        if (callNode.getFirstChild().getType() != com.google.javascript.rhino.Token.NAME) {
            if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode)) {
                if (!assumeStrictThis) {
                    com.google.javascript.rhino.Node thisValue = callNode.getFirstChild().getNext();
                    if ((thisValue == null) || (thisValue.getType() != com.google.javascript.rhino.Token.THIS)) {
                        return false;
                    }
                }
            } else if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectApply(callNode)) {
                return false;
            }
        }
        return true;
    }

    com.google.javascript.rhino.Node inline(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, java.lang.String fnName, com.google.javascript.rhino.Node fnNode, com.google.javascript.jscomp.FunctionInjector.InliningMode mode) {
        com.google.common.base.Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());
        if (mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT) {
            return inlineReturnValue(callNode, fnNode);
        } else {
            return inlineFunction(callNode, fnNode, fnName);
        }
    }

    private com.google.javascript.rhino.Node inlineReturnValue(com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode) {
        com.google.javascript.rhino.Node block = fnNode.getLastChild();
        com.google.javascript.rhino.Node callParentNode = callNode.getParent();
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> argMap = com.google.javascript.jscomp.FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);
        com.google.javascript.rhino.Node newExpression;
        if (!block.hasChildren()) {
            com.google.javascript.rhino.Node srcLocation = block;
            newExpression = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(srcLocation);
        } else {
            com.google.javascript.rhino.Node returnNode = block.getFirstChild();
            com.google.common.base.Preconditions.checkArgument(returnNode.getType() == com.google.javascript.rhino.Token.RETURN);
            com.google.javascript.rhino.Node safeReturnNode = returnNode.cloneTree();
            com.google.javascript.rhino.Node inlineResult = com.google.javascript.jscomp.FunctionArgumentInjector.inject(null, safeReturnNode, null, argMap);
            com.google.common.base.Preconditions.checkArgument(safeReturnNode == inlineResult);
            newExpression = safeReturnNode.removeFirstChild();
        }
        callParentNode.replaceChild(callNode, newExpression);
        return newExpression;
    }

    private enum CallSiteType {

        UNSUPPORTED,
        SIMPLE_CALL,
        SIMPLE_ASSIGNMENT,
        VAR_DECL_SIMPLE_ASSIGNMENT,
        EXPRESSION,
        DECOMPOSABLE_EXPRESSION;}

    private com.google.javascript.jscomp.FunctionInjector.CallSiteType classifyCallSite(com.google.javascript.rhino.Node callNode) {
        com.google.javascript.rhino.Node parent = callNode.getParent();
        com.google.javascript.rhino.Node grandParent = parent.getParent();
        if (com.google.javascript.jscomp.NodeUtil.isExprCall(parent)) {
            return com.google.javascript.jscomp.FunctionInjector.CallSiteType.SIMPLE_CALL;
        } else if (((com.google.javascript.jscomp.NodeUtil.isExprAssign(grandParent) && (!com.google.javascript.jscomp.NodeUtil.isVarOrSimpleAssignLhs(callNode, parent))) && (parent.getFirstChild().getType() == com.google.javascript.rhino.Token.NAME)) && (!com.google.javascript.jscomp.NodeUtil.isConstantName(parent.getFirstChild()))) {
            return com.google.javascript.jscomp.FunctionInjector.CallSiteType.SIMPLE_ASSIGNMENT;
        } else if ((((parent.getType() == com.google.javascript.rhino.Token.NAME) && (!com.google.javascript.jscomp.NodeUtil.isConstantName(parent))) && (grandParent.getType() == com.google.javascript.rhino.Token.VAR)) && grandParent.hasOneChild()) {
            return com.google.javascript.jscomp.FunctionInjector.CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT;
        } else {
            com.google.javascript.rhino.Node expressionRoot = com.google.javascript.jscomp.ExpressionDecomposer.findExpressionRoot(callNode);
            if (expressionRoot != null) {
                com.google.javascript.jscomp.ExpressionDecomposer decomposer = new com.google.javascript.jscomp.ExpressionDecomposer(compiler, safeNameIdSupplier, knownConstants);
                com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType type = decomposer.canExposeExpression(callNode);
                if (type == com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.MOVABLE) {
                    return com.google.javascript.jscomp.FunctionInjector.CallSiteType.EXPRESSION;
                } else if (type == com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.DECOMPOSABLE) {
                    return com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION;
                } else {
                    com.google.common.base.Preconditions.checkState(type == com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.UNDECOMPOSABLE);
                }
            }
        }
        return com.google.javascript.jscomp.FunctionInjector.CallSiteType.UNSUPPORTED;
    }

    private com.google.javascript.rhino.Node inlineFunction(com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode, java.lang.String fnName) {
        com.google.javascript.rhino.Node parent = callNode.getParent();
        com.google.javascript.rhino.Node grandParent = parent.getParent();
        com.google.javascript.jscomp.FunctionInjector.CallSiteType callSiteType = classifyCallSite(callNode);
        com.google.common.base.Preconditions.checkArgument(callSiteType != com.google.javascript.jscomp.FunctionInjector.CallSiteType.UNSUPPORTED);
        boolean isCallInLoop = com.google.javascript.jscomp.NodeUtil.isWithinLoop(callNode);
        java.lang.String resultName = null;
        boolean needsDefaultReturnResult = true;
        switch (callSiteType) {
            case SIMPLE_ASSIGNMENT :
                resultName = parent.getFirstChild().getString();
                break;
            case VAR_DECL_SIMPLE_ASSIGNMENT :
                resultName = parent.getString();
                break;
            case SIMPLE_CALL :
                resultName = null;
                needsDefaultReturnResult = false;
                break;
            case EXPRESSION :
                resultName = getUniqueResultName();
                needsDefaultReturnResult = isCallInLoop;
                break;
            case DECOMPOSABLE_EXPRESSION :
                throw new java.lang.IllegalStateException("Decomposable expressions must decomposed before inlining.");
            default :
                throw new java.lang.IllegalStateException("Unexpected call site type.");
        }
        com.google.javascript.jscomp.FunctionToBlockMutator mutator = new com.google.javascript.jscomp.FunctionToBlockMutator(compiler, this.safeNameIdSupplier);
        com.google.javascript.rhino.Node newBlock = mutator.mutate(fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);
        com.google.javascript.rhino.Node greatGrandParent = grandParent.getParent();
        switch (callSiteType) {
            case VAR_DECL_SIMPLE_ASSIGNMENT :
                parent.removeChild(parent.getFirstChild());
                com.google.common.base.Preconditions.checkState(parent.getFirstChild() == null);
                greatGrandParent.addChildAfter(newBlock, grandParent);
                break;
            case SIMPLE_ASSIGNMENT :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isExpressionNode(grandParent));
                greatGrandParent.replaceChild(grandParent, newBlock);
                break;
            case SIMPLE_CALL :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isExpressionNode(parent));
                grandParent.replaceChild(parent, newBlock);
                break;
            case EXPRESSION :
                com.google.javascript.rhino.Node injectionPoint = com.google.javascript.jscomp.ExpressionDecomposer.findInjectionPoint(callNode);
                com.google.common.base.Preconditions.checkNotNull(injectionPoint);
                com.google.javascript.rhino.Node injectionPointParent = injectionPoint.getParent();
                com.google.common.base.Preconditions.checkNotNull(injectionPointParent);
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isStatementBlock(injectionPointParent));
                newBlock.addChildrenToFront(com.google.javascript.jscomp.NodeUtil.newVarNode(resultName, null).copyInformationFromForTree(callNode));
                injectionPointParent.addChildBefore(newBlock, injectionPoint);
                parent.replaceChild(callNode, com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, resultName));
                break;
            default :
                throw new java.lang.IllegalStateException("Unexpected call site type.");
        }
        return newBlock;
    }

    boolean isDirectCallNodeReplacementPossible(com.google.javascript.rhino.Node fnNode) {
        com.google.javascript.rhino.Node block = com.google.javascript.jscomp.NodeUtil.getFunctionBody(fnNode);
        if (!block.hasChildren()) {
            return true;
        } else if (block.hasOneChild()) {
            if ((block.getFirstChild().getType() == com.google.javascript.rhino.Token.RETURN) && (block.getFirstChild().getFirstChild() != null)) {
                return true;
            }
        }
        return false;
    }

    enum CanInlineResult {

        YES,
        AFTER_DECOMPOSITION,
        NO;}

    private com.google.javascript.jscomp.FunctionInjector.CanInlineResult canInlineReferenceAsStatementBlock(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> namesToAlias) {
        com.google.javascript.jscomp.FunctionInjector.CallSiteType callSiteType = classifyCallSite(callNode);
        if (callSiteType == com.google.javascript.jscomp.FunctionInjector.CallSiteType.UNSUPPORTED) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if ((!allowDecomposition) && (callSiteType == com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (callSiteType == com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.AFTER_DECOMPOSITION;
        } else {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.YES;
        }
    }

    private boolean callMeetsBlockInliningRequirements(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, final com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> namesToAlias) {
        final boolean assumeMinimumCapture = this.assumeMinimumCapture;
        boolean fnContainsVars = com.google.javascript.jscomp.NodeUtil.has(com.google.javascript.jscomp.NodeUtil.getFunctionBody(fnNode), new com.google.javascript.jscomp.NodeUtil.MatchDeclaration(), new com.google.javascript.jscomp.NodeUtil.MatchShallowStatement());
        boolean forbidTemps = false;
        if (!t.inGlobalScope()) {
            com.google.javascript.rhino.Node fnCaller = t.getScopeRoot();
            com.google.javascript.rhino.Node fnCallerBody = fnCaller.getLastChild();
            com.google.common.base.Predicate<com.google.javascript.rhino.Node> match = new com.google.common.base.Predicate<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean apply(com.google.javascript.rhino.Node n) {
                    if (n.getType() == com.google.javascript.rhino.Token.NAME) {
                        return n.getString().equals("eval");
                    }
                    if ((!assumeMinimumCapture) && (n.getType() == com.google.javascript.rhino.Token.FUNCTION)) {
                        return n != fnNode;
                    }
                    return false;
                }
            };
            forbidTemps = com.google.javascript.jscomp.NodeUtil.has(fnCallerBody, match, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        }
        if (fnContainsVars && forbidTemps) {
            return false;
        }
        if (forbidTemps) {
            java.util.Map<java.lang.String, com.google.javascript.rhino.Node> args = com.google.javascript.jscomp.FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);
            boolean hasArgs = !args.isEmpty();
            if (hasArgs) {
                java.util.Set<java.lang.String> allNamesToAlias = com.google.common.collect.Sets.newHashSet(namesToAlias);
                com.google.javascript.jscomp.FunctionArgumentInjector.maybeAddTempsForCallArguments(fnNode, args, allNamesToAlias, compiler.getCodingConvention());
                if (!allNamesToAlias.isEmpty()) {
                    return false;
                }
            }
        }
        return true;
    }

    private com.google.javascript.jscomp.FunctionInjector.CanInlineResult canInlineReferenceDirectly(com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode) {
        if (!isDirectCallNodeReplacementPossible(fnNode)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        com.google.javascript.rhino.Node block = fnNode.getLastChild();
        com.google.javascript.rhino.Node cArg = callNode.getFirstChild().getNext();
        if (callNode.getFirstChild().getType() != com.google.javascript.rhino.Token.NAME) {
            if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode)) {
                if ((cArg == null) || (cArg.getType() != com.google.javascript.rhino.Token.THIS)) {
                    return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
                }
                cArg = cArg.getNext();
            } else {
                com.google.common.base.Preconditions.checkState(!com.google.javascript.jscomp.NodeUtil.isFunctionObjectApply(callNode));
            }
        }
        com.google.javascript.rhino.Node fnParam = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(fnNode).getFirstChild();
        while ((cArg != null) || (fnParam != null)) {
            if (fnParam != null) {
                if (cArg != null) {
                    if (com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(cArg) && (com.google.javascript.jscomp.NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1)) {
                        return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
                    }
                }
                fnParam = fnParam.getNext();
            }
            if (cArg != null) {
                if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(cArg)) {
                    return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
                }
                cArg = cArg.getNext();
            }
        } 
        return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.YES;
    }

    private java.lang.String getUniqueResultName() {
        return ("JSCompiler_inline_result" + com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.UNIQUE_ID_SEPARATOR) + safeNameIdSupplier.get();
    }

    boolean inliningLowersCost(com.google.javascript.jscomp.JSModule fnModule, com.google.javascript.rhino.Node fnNode, java.util.Collection<? extends com.google.javascript.jscomp.FunctionInjector.Reference> refs, java.util.Set<java.lang.String> namesToAlias, boolean isRemovable, boolean referencesThis) {
        int referenceCount = refs.size();
        if (referenceCount == 0) {
            return true;
        }
        int referencesUsingBlockInlining = 0;
        boolean checkModules = isRemovable && (fnModule != null);
        com.google.javascript.jscomp.JSModuleGraph moduleGraph = compiler.getModuleGraph();
        for (com.google.javascript.jscomp.FunctionInjector.Reference ref : refs) {
            if (ref.mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.BLOCK) {
                referencesUsingBlockInlining++;
            }
            if (checkModules && (ref.module != null)) {
                if ((ref.module != fnModule) && (!moduleGraph.dependsOn(ref.module, fnModule))) {
                    isRemovable = false;
                    checkModules = false;
                }
            }
        }
        int referencesUsingDirectInlining = referenceCount - referencesUsingBlockInlining;
        if (((referenceCount == 1) && isRemovable) && (referencesUsingDirectInlining == 1)) {
            return true;
        }
        int callCost = com.google.javascript.jscomp.FunctionInjector.estimateCallCost(fnNode, referencesThis);
        int overallCallCost = callCost * referenceCount;
        int costDeltaDirect = com.google.javascript.jscomp.FunctionInjector.inlineCostDelta(fnNode, namesToAlias, com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT);
        int costDeltaBlock = com.google.javascript.jscomp.FunctionInjector.inlineCostDelta(fnNode, namesToAlias, com.google.javascript.jscomp.FunctionInjector.InliningMode.BLOCK);
        return doesLowerCost(fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable);
    }

    private boolean doesLowerCost(com.google.javascript.rhino.Node fnNode, int callCost, int directInlines, int costDeltaDirect, int blockInlines, int costDeltaBlock, boolean removable) {
        int fnInstanceCount = (directInlines + blockInlines) - (removable ? 1 : 0);
        if (fnInstanceCount == 0) {
            if ((blockInlines > 0) && (costDeltaBlock > 0)) {
                return false;
            }
            return true;
        }
        int costDelta = (directInlines * costDeltaDirect) + (blockInlines * costDeltaBlock);
        int threshold = (callCost - costDelta) / fnInstanceCount;
        return com.google.javascript.jscomp.InlineCostEstimator.getCost(fnNode, threshold + 1) <= threshold;
    }

    private static int estimateCallCost(com.google.javascript.rhino.Node fnNode, boolean referencesThis) {
        com.google.javascript.rhino.Node argsNode = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(fnNode);
        int numArgs = argsNode.getChildCount();
        int callCost = com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE + com.google.javascript.jscomp.FunctionInjector.PAREN_COST;
        if (numArgs > 0) {
            callCost += (numArgs * com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE) + ((numArgs - 1) * com.google.javascript.jscomp.FunctionInjector.COMMA_COST);
        }
        if (referencesThis) {
            callCost += 5 + 5;
        }
        return callCost;
    }

    private static int inlineCostDelta(com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> namesToAlias, com.google.javascript.jscomp.FunctionInjector.InliningMode mode) {
        int paramCount = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(fnNode).getChildCount();
        int commaCount = (paramCount > 1) ? paramCount - 1 : 0;
        int costDeltaFunctionOverhead = (15 + commaCount) + (paramCount * com.google.javascript.jscomp.InlineCostEstimator.ESTIMATED_IDENTIFIER_COST);
        com.google.javascript.rhino.Node block = fnNode.getLastChild();
        if (!block.hasChildren()) {
            return -costDeltaFunctionOverhead;
        }
        if (mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT) {
            return -(costDeltaFunctionOverhead + 7);
        } else {
            int aliasCount = namesToAlias.size();
            final int INLINE_BLOCK_OVERHEAD = 4;
            final int PER_RETURN_OVERHEAD = 2;
            final int PER_RETURN_RESULT_OVERHEAD = 3;
            final int PER_ALIAS_OVERHEAD = 3;
            int returnCount = com.google.javascript.jscomp.NodeUtil.getNodeTypeReferenceCount(block, com.google.javascript.rhino.Token.RETURN, new com.google.javascript.jscomp.NodeUtil.MatchShallowStatement());
            int resultCount = (returnCount > 0) ? returnCount - 1 : 0;
            int baseOverhead = (returnCount > 0) ? INLINE_BLOCK_OVERHEAD : 0;
            int overhead = ((baseOverhead + (returnCount * PER_RETURN_OVERHEAD)) + (resultCount * PER_RETURN_RESULT_OVERHEAD)) + (aliasCount * PER_ALIAS_OVERHEAD);
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(190).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("PER_RETURN_OVERHEAD",PER_RETURN_OVERHEAD);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("resultCount",resultCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("returnCount",returnCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("PER_ALIAS_OVERHEAD",PER_ALIAS_OVERHEAD);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("overhead",overhead);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("namesToAlias",namesToAlias);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE",com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("fnNode",fnNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("com.google.javascript.jscomp.FunctionInjector.COMMA_COST",com.google.javascript.jscomp.FunctionInjector.COMMA_COST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("com.google.javascript.jscomp.FunctionInjector.PAREN_COST",com.google.javascript.jscomp.FunctionInjector.PAREN_COST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("mode",mode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("INLINE_BLOCK_OVERHEAD",INLINE_BLOCK_OVERHEAD);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("aliasCount",aliasCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("paramCount",paramCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("baseOverhead",baseOverhead);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("block",block);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("PER_RETURN_RESULT_OVERHEAD",PER_RETURN_RESULT_OVERHEAD);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("costDeltaFunctionOverhead",costDeltaFunctionOverhead);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("commaCount",commaCount);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectionEnds();
            }
            if (runtimeAngelicValue)
                return overhead - costDeltaFunctionOverhead;

        }
    }

    public void setKnownConstants(java.util.Set<java.lang.String> knownConstants) {
        com.google.common.base.Preconditions.checkState(this.knownConstants.isEmpty());
        this.knownConstants = knownConstants;
    }
}
[1376864] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659779914641
GPR[SSUN]-1659779914641
1299274573
GPR[ESUN]-1659779914853
GPR[SSUN]-1659779914853
1299274573
GPR[ESUN]-1659779915063
GPR[SSUN]-1659779915063
1299274573
GPR[ESUN]-1659779915273
GPR[SSUN]-1659779915273
1299274573
GPR[ESUN]-1659779915495
GPR[SSUN]-1659779915495
1299274573
GPR[ESUN]-1659779915706
GPR[SSUN]-1659779915706
1299274573
GPR[ESUN]-1659779915936
GPR[SSUN]-1659779915936
1299274573
GPR[ESUN]-1659779916145
GPR[SSUN]-1659779916145
1299274573
GPR[ESUN]-1659779916353
GPR[SSUN]-1659779916353
1299274573
GPR[ESUN]-1659779916560
GPR[SSUN]-1659779916561
1299274573
GPR[SPVATF]-1659779916768
GPR[EPVATF]-1659779920782
GPR[SPS]-1659779920782
[1383361] ERROR ConstraintModelBuilder - Unable to compile the change: 
class FunctionInjector {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier;

    private final boolean allowDecomposition;

    private java.util.Set<java.lang.String> knownConstants = com.google.common.collect.Sets.newHashSet();

    private final boolean assumeStrictThis;

    private final boolean assumeMinimumCapture;

    public FunctionInjector(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier, boolean allowDecomposition, boolean assumeStrictThis, boolean assumeMinimumCapture) {
        com.google.common.base.Preconditions.checkNotNull(compiler);
        com.google.common.base.Preconditions.checkNotNull(safeNameIdSupplier);
        this.compiler = compiler;
        this.safeNameIdSupplier = safeNameIdSupplier;
        this.allowDecomposition = allowDecomposition;
        this.assumeStrictThis = assumeStrictThis;
        this.assumeMinimumCapture = assumeMinimumCapture;
    }

    enum InliningMode {

        DIRECT,
        BLOCK;}

    static class Reference {
        final com.google.javascript.rhino.Node callNode;

        final com.google.javascript.jscomp.JSModule module;

        final com.google.javascript.jscomp.FunctionInjector.InliningMode mode;

        Reference(com.google.javascript.rhino.Node callNode, com.google.javascript.jscomp.JSModule module, com.google.javascript.jscomp.FunctionInjector.InliningMode mode) {
            this.callNode = callNode;
            this.module = module;
            this.mode = mode;
        }
    }

    private static final int NAME_COST_ESTIMATE = com.google.javascript.jscomp.InlineCostEstimator.ESTIMATED_IDENTIFIER_COST;

    private static final int COMMA_COST = 1;

    private static final int PAREN_COST = 2;

    boolean doesFunctionMeetMinimumRequirements(final java.lang.String fnName, com.google.javascript.rhino.Node fnNode) {
        com.google.javascript.rhino.Node block = com.google.javascript.jscomp.NodeUtil.getFunctionBody(fnNode);
        final java.lang.String fnRecursionName = fnNode.getFirstChild().getString();
        com.google.common.base.Preconditions.checkState(fnRecursionName != null);
        boolean referencesArguments = com.google.javascript.jscomp.NodeUtil.isNameReferenced(block, "arguments", com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        com.google.common.base.Predicate<com.google.javascript.rhino.Node> p = new com.google.common.base.Predicate<com.google.javascript.rhino.Node>() {
            @java.lang.Override
            public boolean apply(com.google.javascript.rhino.Node n) {
                if (n.getType() == com.google.javascript.rhino.Token.NAME) {
                    return (n.getString().equals("eval") || ((!fnName.isEmpty()) && n.getString().equals(fnName))) || ((!fnRecursionName.isEmpty()) && n.getString().equals(fnRecursionName));
                }
                return false;
            }
        };
        return (!referencesArguments) && (!com.google.javascript.jscomp.NodeUtil.has(block, p, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue()));
    }

    com.google.javascript.jscomp.FunctionInjector.CanInlineResult canInlineReferenceToFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> needAliases, com.google.javascript.jscomp.FunctionInjector.InliningMode mode, boolean referencesThis, boolean containsFunctions) {
        if (!isSupportedCallType(callNode)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (containsFunctions) {
            if ((!assumeMinimumCapture) && (!t.inGlobalScope())) {
                return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
            } else if (com.google.javascript.jscomp.NodeUtil.isWithinLoop(callNode)) {
                return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
            }
        }
        if (referencesThis && (!com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode))) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT) {
            return canInlineReferenceDirectly(callNode, fnNode);
        } else {
            return canInlineReferenceAsStatementBlock(t, callNode, fnNode, needAliases);
        }
    }

    private boolean isSupportedCallType(com.google.javascript.rhino.Node callNode) {
        if (callNode.getFirstChild().getType() != com.google.javascript.rhino.Token.NAME) {
            if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode)) {
                if (!assumeStrictThis) {
                    com.google.javascript.rhino.Node thisValue = callNode.getFirstChild().getNext();
                    if ((thisValue == null) || (thisValue.getType() != com.google.javascript.rhino.Token.THIS)) {
                        return false;
                    }
                }
            } else if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectApply(callNode)) {
                return false;
            }
        }
        return true;
    }

    com.google.javascript.rhino.Node inline(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, java.lang.String fnName, com.google.javascript.rhino.Node fnNode, com.google.javascript.jscomp.FunctionInjector.InliningMode mode) {
        com.google.common.base.Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());
        if (mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT) {
            return inlineReturnValue(callNode, fnNode);
        } else {
            return inlineFunction(callNode, fnNode, fnName);
        }
    }

    private com.google.javascript.rhino.Node inlineReturnValue(com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode) {
        com.google.javascript.rhino.Node block = fnNode.getLastChild();
        com.google.javascript.rhino.Node callParentNode = callNode.getParent();
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> argMap = com.google.javascript.jscomp.FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);
        com.google.javascript.rhino.Node newExpression;
        if (!block.hasChildren()) {
            com.google.javascript.rhino.Node srcLocation = block;
            newExpression = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(srcLocation);
        } else {
            com.google.javascript.rhino.Node returnNode = block.getFirstChild();
            com.google.common.base.Preconditions.checkArgument(returnNode.getType() == com.google.javascript.rhino.Token.RETURN);
            com.google.javascript.rhino.Node safeReturnNode = returnNode.cloneTree();
            com.google.javascript.rhino.Node inlineResult = com.google.javascript.jscomp.FunctionArgumentInjector.inject(null, safeReturnNode, null, argMap);
            com.google.common.base.Preconditions.checkArgument(safeReturnNode == inlineResult);
            newExpression = safeReturnNode.removeFirstChild();
        }
        callParentNode.replaceChild(callNode, newExpression);
        return newExpression;
    }

    private enum CallSiteType {

        UNSUPPORTED,
        SIMPLE_CALL,
        SIMPLE_ASSIGNMENT,
        VAR_DECL_SIMPLE_ASSIGNMENT,
        EXPRESSION,
        DECOMPOSABLE_EXPRESSION;}

    private com.google.javascript.jscomp.FunctionInjector.CallSiteType classifyCallSite(com.google.javascript.rhino.Node callNode) {
        com.google.javascript.rhino.Node parent = callNode.getParent();
        com.google.javascript.rhino.Node grandParent = parent.getParent();
        if (com.google.javascript.jscomp.NodeUtil.isExprCall(parent)) {
            return com.google.javascript.jscomp.FunctionInjector.CallSiteType.SIMPLE_CALL;
        } else if (((com.google.javascript.jscomp.NodeUtil.isExprAssign(grandParent) && (!com.google.javascript.jscomp.NodeUtil.isVarOrSimpleAssignLhs(callNode, parent))) && (parent.getFirstChild().getType() == com.google.javascript.rhino.Token.NAME)) && (!com.google.javascript.jscomp.NodeUtil.isConstantName(parent.getFirstChild()))) {
            return com.google.javascript.jscomp.FunctionInjector.CallSiteType.SIMPLE_ASSIGNMENT;
        } else if ((((parent.getType() == com.google.javascript.rhino.Token.NAME) && (!com.google.javascript.jscomp.NodeUtil.isConstantName(parent))) && (grandParent.getType() == com.google.javascript.rhino.Token.VAR)) && grandParent.hasOneChild()) {
            return com.google.javascript.jscomp.FunctionInjector.CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT;
        } else {
            com.google.javascript.rhino.Node expressionRoot = com.google.javascript.jscomp.ExpressionDecomposer.findExpressionRoot(callNode);
            if (expressionRoot != null) {
                com.google.javascript.jscomp.ExpressionDecomposer decomposer = new com.google.javascript.jscomp.ExpressionDecomposer(compiler, safeNameIdSupplier, knownConstants);
                com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType type = decomposer.canExposeExpression(callNode);
                if (type == com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.MOVABLE) {
                    return com.google.javascript.jscomp.FunctionInjector.CallSiteType.EXPRESSION;
                } else if (type == com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.DECOMPOSABLE) {
                    return com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION;
                } else {
                    com.google.common.base.Preconditions.checkState(type == com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.UNDECOMPOSABLE);
                }
            }
        }
        return com.google.javascript.jscomp.FunctionInjector.CallSiteType.UNSUPPORTED;
    }

    private com.google.javascript.rhino.Node inlineFunction(com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode, java.lang.String fnName) {
        com.google.javascript.rhino.Node parent = callNode.getParent();
        com.google.javascript.rhino.Node grandParent = parent.getParent();
        com.google.javascript.jscomp.FunctionInjector.CallSiteType callSiteType = classifyCallSite(callNode);
        com.google.common.base.Preconditions.checkArgument(callSiteType != com.google.javascript.jscomp.FunctionInjector.CallSiteType.UNSUPPORTED);
        boolean isCallInLoop = com.google.javascript.jscomp.NodeUtil.isWithinLoop(callNode);
        java.lang.String resultName = null;
        boolean needsDefaultReturnResult = true;
        switch (callSiteType) {
            case SIMPLE_ASSIGNMENT :
                resultName = parent.getFirstChild().getString();
                break;
            case VAR_DECL_SIMPLE_ASSIGNMENT :
                resultName = parent.getString();
                break;
            case SIMPLE_CALL :
                resultName = null;
                needsDefaultReturnResult = false;
                break;
            case EXPRESSION :
                resultName = getUniqueResultName();
                needsDefaultReturnResult = isCallInLoop;
                break;
            case DECOMPOSABLE_EXPRESSION :
                throw new java.lang.IllegalStateException("Decomposable expressions must decomposed before inlining.");
            default :
                throw new java.lang.IllegalStateException("Unexpected call site type.");
        }
        com.google.javascript.jscomp.FunctionToBlockMutator mutator = new com.google.javascript.jscomp.FunctionToBlockMutator(compiler, this.safeNameIdSupplier);
        com.google.javascript.rhino.Node newBlock = mutator.mutate(fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);
        com.google.javascript.rhino.Node greatGrandParent = grandParent.getParent();
        switch (callSiteType) {
            case VAR_DECL_SIMPLE_ASSIGNMENT :
                parent.removeChild(parent.getFirstChild());
                com.google.common.base.Preconditions.checkState(parent.getFirstChild() == null);
                greatGrandParent.addChildAfter(newBlock, grandParent);
                break;
            case SIMPLE_ASSIGNMENT :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isExpressionNode(grandParent));
                greatGrandParent.replaceChild(grandParent, newBlock);
                break;
            case SIMPLE_CALL :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isExpressionNode(parent));
                grandParent.replaceChild(parent, newBlock);
                break;
            case EXPRESSION :
                com.google.javascript.rhino.Node injectionPoint = com.google.javascript.jscomp.ExpressionDecomposer.findInjectionPoint(callNode);
                com.google.common.base.Preconditions.checkNotNull(injectionPoint);
                com.google.javascript.rhino.Node injectionPointParent = injectionPoint.getParent();
                com.google.common.base.Preconditions.checkNotNull(injectionPointParent);
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isStatementBlock(injectionPointParent));
                newBlock.addChildrenToFront(com.google.javascript.jscomp.NodeUtil.newVarNode(resultName, null).copyInformationFromForTree(callNode));
                injectionPointParent.addChildBefore(newBlock, injectionPoint);
                parent.replaceChild(callNode, com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, resultName));
                break;
            default :
                throw new java.lang.IllegalStateException("Unexpected call site type.");
        }
        return newBlock;
    }

    boolean isDirectCallNodeReplacementPossible(com.google.javascript.rhino.Node fnNode) {
        com.google.javascript.rhino.Node block = com.google.javascript.jscomp.NodeUtil.getFunctionBody(fnNode);
        if (!block.hasChildren()) {
            return true;
        } else if (block.hasOneChild()) {
            if ((block.getFirstChild().getType() == com.google.javascript.rhino.Token.RETURN) && (block.getFirstChild().getFirstChild() != null)) {
                return true;
            }
        }
        return false;
    }

    enum CanInlineResult {

        YES,
        AFTER_DECOMPOSITION,
        NO;}

    private com.google.javascript.jscomp.FunctionInjector.CanInlineResult canInlineReferenceAsStatementBlock(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> namesToAlias) {
        com.google.javascript.jscomp.FunctionInjector.CallSiteType callSiteType = classifyCallSite(callNode);
        if (callSiteType == com.google.javascript.jscomp.FunctionInjector.CallSiteType.UNSUPPORTED) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if ((!allowDecomposition) && (callSiteType == com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (callSiteType == com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.AFTER_DECOMPOSITION;
        } else {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.YES;
        }
    }

    private boolean callMeetsBlockInliningRequirements(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, final com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> namesToAlias) {
        final boolean assumeMinimumCapture = this.assumeMinimumCapture;
        boolean fnContainsVars = com.google.javascript.jscomp.NodeUtil.has(com.google.javascript.jscomp.NodeUtil.getFunctionBody(fnNode), new com.google.javascript.jscomp.NodeUtil.MatchDeclaration(), new com.google.javascript.jscomp.NodeUtil.MatchShallowStatement());
        boolean forbidTemps = false;
        if (!t.inGlobalScope()) {
            com.google.javascript.rhino.Node fnCaller = t.getScopeRoot();
            com.google.javascript.rhino.Node fnCallerBody = fnCaller.getLastChild();
            com.google.common.base.Predicate<com.google.javascript.rhino.Node> match = new com.google.common.base.Predicate<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean apply(com.google.javascript.rhino.Node n) {
                    if (n.getType() == com.google.javascript.rhino.Token.NAME) {
                        return n.getString().equals("eval");
                    }
                    if ((!assumeMinimumCapture) && (n.getType() == com.google.javascript.rhino.Token.FUNCTION)) {
                        return n != fnNode;
                    }
                    return false;
                }
            };
            forbidTemps = com.google.javascript.jscomp.NodeUtil.has(fnCallerBody, match, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        }
        if (fnContainsVars && forbidTemps) {
            return false;
        }
        if (forbidTemps) {
            java.util.Map<java.lang.String, com.google.javascript.rhino.Node> args = com.google.javascript.jscomp.FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);
            boolean hasArgs = !args.isEmpty();
            if (hasArgs) {
                java.util.Set<java.lang.String> allNamesToAlias = com.google.common.collect.Sets.newHashSet(namesToAlias);
                com.google.javascript.jscomp.FunctionArgumentInjector.maybeAddTempsForCallArguments(fnNode, args, allNamesToAlias, compiler.getCodingConvention());
                if (!allNamesToAlias.isEmpty()) {
                    return false;
                }
            }
        }
        return true;
    }

    private com.google.javascript.jscomp.FunctionInjector.CanInlineResult canInlineReferenceDirectly(com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode) {
        if (!isDirectCallNodeReplacementPossible(fnNode)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        com.google.javascript.rhino.Node block = fnNode.getLastChild();
        com.google.javascript.rhino.Node cArg = callNode.getFirstChild().getNext();
        if (callNode.getFirstChild().getType() != com.google.javascript.rhino.Token.NAME) {
            if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode)) {
                if ((cArg == null) || (cArg.getType() != com.google.javascript.rhino.Token.THIS)) {
                    return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
                }
                cArg = cArg.getNext();
            } else {
                com.google.common.base.Preconditions.checkState(!com.google.javascript.jscomp.NodeUtil.isFunctionObjectApply(callNode));
            }
        }
        com.google.javascript.rhino.Node fnParam = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(fnNode).getFirstChild();
        while ((cArg != null) || (fnParam != null)) {
            if (fnParam != null) {
                if (cArg != null) {
                    if (com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(cArg) && (com.google.javascript.jscomp.NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1)) {
                        return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
                    }
                }
                fnParam = fnParam.getNext();
            }
            if (cArg != null) {
                if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(cArg)) {
                    return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
                }
                cArg = cArg.getNext();
            }
        } 
        return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.YES;
    }

    private java.lang.String getUniqueResultName() {
        return ("JSCompiler_inline_result" + com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.UNIQUE_ID_SEPARATOR) + safeNameIdSupplier.get();
    }

    boolean inliningLowersCost(com.google.javascript.jscomp.JSModule fnModule, com.google.javascript.rhino.Node fnNode, java.util.Collection<? extends com.google.javascript.jscomp.FunctionInjector.Reference> refs, java.util.Set<java.lang.String> namesToAlias, boolean isRemovable, boolean referencesThis) {
        int referenceCount = refs.size();
        if (referenceCount == 0) {
            return true;
        }
        int referencesUsingBlockInlining = 0;
        boolean checkModules = isRemovable && (fnModule != null);
        com.google.javascript.jscomp.JSModuleGraph moduleGraph = compiler.getModuleGraph();
        for (com.google.javascript.jscomp.FunctionInjector.Reference ref : refs) {
            if (ref.mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.BLOCK) {
                referencesUsingBlockInlining++;
            }
            if (checkModules && (ref.module != null)) {
                if ((ref.module != fnModule) && (!moduleGraph.dependsOn(ref.module, fnModule))) {
                    isRemovable = false;
                    checkModules = false;
                }
            }
        }
        int referencesUsingDirectInlining = referenceCount - referencesUsingBlockInlining;
        if (((referenceCount == 1) && isRemovable) && (referencesUsingDirectInlining == 1)) {
            return true;
        }
        int callCost = com.google.javascript.jscomp.FunctionInjector.estimateCallCost(fnNode, referencesThis);
        int overallCallCost = callCost * referenceCount;
        int costDeltaDirect = com.google.javascript.jscomp.FunctionInjector.inlineCostDelta(fnNode, namesToAlias, com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT);
        int costDeltaBlock = com.google.javascript.jscomp.FunctionInjector.inlineCostDelta(fnNode, namesToAlias, com.google.javascript.jscomp.FunctionInjector.InliningMode.BLOCK);
        return doesLowerCost(fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable);
    }

    private boolean doesLowerCost(com.google.javascript.rhino.Node fnNode, int callCost, int directInlines, int costDeltaDirect, int blockInlines, int costDeltaBlock, boolean removable) {
        int fnInstanceCount = (directInlines + blockInlines) - (removable ? 1 : 0);
        if (fnInstanceCount == 0) {
            if ((blockInlines > 0) && (costDeltaBlock > 0)) {
                return false;
            }
            return true;
        }
        int costDelta = (directInlines * costDeltaDirect) + (blockInlines * costDeltaBlock);
        int threshold = (callCost - costDelta) / fnInstanceCount;
        return com.google.javascript.jscomp.InlineCostEstimator.getCost(fnNode, threshold + 1) <= threshold;
    }

    private static int estimateCallCost(com.google.javascript.rhino.Node fnNode, boolean referencesThis) {
        com.google.javascript.rhino.Node argsNode = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(fnNode);
        int numArgs = argsNode.getChildCount();
        int callCost = com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE + com.google.javascript.jscomp.FunctionInjector.PAREN_COST;
        if (numArgs > 0) {
            callCost += (numArgs * com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE) + ((numArgs - 1) * com.google.javascript.jscomp.FunctionInjector.COMMA_COST);
        }
        if (referencesThis) {
            callCost += 5 + 5;
        }
        return callCost;
    }

    private static int inlineCostDelta(com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> namesToAlias, com.google.javascript.jscomp.FunctionInjector.InliningMode mode) {
        int paramCount = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(fnNode).getChildCount();
        int commaCount = (paramCount > 1) ? paramCount - 1 : 0;
        int costDeltaFunctionOverhead = (15 + commaCount) + (paramCount * com.google.javascript.jscomp.InlineCostEstimator.ESTIMATED_IDENTIFIER_COST);
        com.google.javascript.rhino.Node block = fnNode.getLastChild();
        if (!block.hasChildren()) {
            return -costDeltaFunctionOverhead;
        }
        if (mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(191).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.jscomp.FunctionInjector.PAREN_COST",com.google.javascript.jscomp.FunctionInjector.PAREN_COST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("mode",mode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("paramCount",paramCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("namesToAlias",namesToAlias);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("block",block);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE",com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("fnNode",fnNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.jscomp.FunctionInjector.COMMA_COST",com.google.javascript.jscomp.FunctionInjector.COMMA_COST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("costDeltaFunctionOverhead",costDeltaFunctionOverhead);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("commaCount",commaCount);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectionEnds();
            }
            if (runtimeAngelicValue)
                return -(costDeltaFunctionOverhead + 7);

        } else {
            int aliasCount = namesToAlias.size();
            final int INLINE_BLOCK_OVERHEAD = 4;
            final int PER_RETURN_OVERHEAD = 2;
            final int PER_RETURN_RESULT_OVERHEAD = 3;
            final int PER_ALIAS_OVERHEAD = 3;
            int returnCount = com.google.javascript.jscomp.NodeUtil.getNodeTypeReferenceCount(block, com.google.javascript.rhino.Token.RETURN, new com.google.javascript.jscomp.NodeUtil.MatchShallowStatement());
            int resultCount = (returnCount > 0) ? returnCount - 1 : 0;
            int baseOverhead = (returnCount > 0) ? INLINE_BLOCK_OVERHEAD : 0;
            int overhead = ((baseOverhead + (returnCount * PER_RETURN_OVERHEAD)) + (resultCount * PER_RETURN_RESULT_OVERHEAD)) + (aliasCount * PER_ALIAS_OVERHEAD);
            return overhead - costDeltaFunctionOverhead;
        }
    }

    public void setKnownConstants(java.util.Set<java.lang.String> knownConstants) {
        com.google.common.base.Preconditions.checkState(this.knownConstants.isEmpty());
        this.knownConstants = knownConstants;
    }
}
[1383361] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659779921137
GPR[SSUN]-1659779921137
1299274573
GPR[SPVATF]-1659779921359
GPR[EPVATF]-1659779926799
GPR[SPS]-1659779926799
[1390183] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:865.
GPR[EPS]-1659779927960
GPR[ESUN]-1659779927960
GPR[SSUN]-1659779927960
1299274573
GPR[ESUN]-1659779928183
GPR[SSUN]-1659779928183
1299274573
GPR[SPVATF]-1659779928415
GPR[EPVATF]-1659779932660
GPR[SPS]-1659779932660
[1395986] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:627.
GPR[EPS]-1659779933762
GPR[SPVATF]-1659779933762
GPR[EPVATF]-1659779938975
GPR[SPS]-1659779938975
[1402413] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:627.
GPR[EPS]-1659779940189
GPR[ESUN]-1659779940189
GPR[SSUN]-1659779940189
1299274573
GPR[SPVATF]-1659779940416
GPR[EPVATF]-1659779944581
GPR[SPS]-1659779944581
[1407900] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:567.
GPR[EPS]-1659779945676
GPR[ESUN]-1659779945676
GPR[SSUN]-1659779945676
507083050
GPR[ESUN]-1659779945904
GPR[SSUN]-1659779945904
507083050
GPR[SPVATF]-1659779946118
GPR[EPVATF]-1659779951139
GPR[SPS]-1659779951139
[1414483] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:100.
GPR[EPS]-1659779952259
GPR[ESUN]-1659779952259
GPR[SSUN]-1659779952259
507083050
GPR[SPVATF]-1659779952509
GPR[EPVATF]-1659779956818
GPR[SPS]-1659779956818
[1420191] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:63.
GPR[EPS]-1659779957968
GPR[SPVATF]-1659779957968
GPR[EPVATF]-1659779962306
GPR[SPS]-1659779962306
[1425629] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:63.
GPR[EPS]-1659779963405
GPR[ESUN]-1659779963405
GPR[SSUN]-1659779963405
507083050
GPR[ESUN]-1659779963628
GPR[SSUN]-1659779963628
1187751237
GPR[ESUN]-1659779963891
GPR[SSUN]-1659779963891
1299274573
GPR[SPVATF]-1659779964099
GPR[EPVATF]-1659779969014
GPR[SPS]-1659779969014
[1432485] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:621.
GPR[EPS]-1659779970261
GPR[SPVATF]-1659779970262
GPR[EPVATF]-1659779974497
GPR[SPS]-1659779974497
[1437716] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:621.
GPR[EPS]-1659779975492
GPR[ESUN]-1659779975492
GPR[SSUN]-1659779975492
1299274573
GPR[SPVATF]-1659779975722
GPR[EPVATF]-1659779979922
GPR[SPS]-1659779979922
[1443281] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:599.
GPR[EPS]-1659779981057
GPR[SPVATF]-1659779981058
GPR[EPVATF]-1659779985890
GPR[SPS]-1659779985890
[1449650] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:599.
GPR[EPS]-1659779987426
GPR[ESUN]-1659779987426
GPR[SSUN]-1659779987426
1299274573
GPR[ESUN]-1659779987879
GPR[SSUN]-1659779987879
1299274573
GPR[ESUN]-1659779988310
GPR[SSUN]-1659779988310
1299274573
GPR[ESUN]-1659779988696
GPR[SSUN]-1659779988696
1299274573
GPR[SPVATF]-1659779989107
GPR[EPVATF]-1659779993638
GPR[SPS]-1659779993638
[1457956] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:562.
GPR[EPS]-1659779995732
GPR[SPVATF]-1659779995732
GPR[EPVATF]-1659780001020
GPR[SPS]-1659780001020
[1465520] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:562.
GPR[EPS]-1659780003296
GPR[ESUN]-1659780003296
GPR[SSUN]-1659780003296
1187751237
GPR[ESUN]-1659780004063
GPR[SSUN]-1659780004063
-436823543
GPR[ESUN]-1659780004539
GPR[SSUN]-1659780004539
-436823543
GPR[SPVATF]-1659780004926
GPR[EPVATF]-1659780008059
GPR[SPS]-1659780008059
[1471863] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:408.
GPR[EPS]-1659780009639
GPR[SPVATF]-1659780009639
GPR[EPVATF]-1659780012415
GPR[SPS]-1659780012415
[1476304] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:408.
GPR[EPS]-1659780014080
GPR[ESUN]-1659780014080
GPR[SSUN]-1659780014080
-436823543
GPR[ESUN]-1659780014557
GPR[SSUN]-1659780014557
-436823543
GPR[SPVATF]-1659780014978
GPR[EPVATF]-1659780017961
GPR[SPS]-1659780017962
[1481727] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:405.
GPR[EPS]-1659780019503
GPR[ESUN]-1659780019503
GPR[SSUN]-1659780019503
-436823543
GPR[ESUN]-1659780019920
GPR[SSUN]-1659780019920
-436823543
GPR[SPVATF]-1659780020316
GPR[EPVATF]-1659780023286
GPR[SPS]-1659780023286
[1486580] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:340.
GPR[EPS]-1659780024356
GPR[ESUN]-1659780024356
GPR[SSUN]-1659780024356
-436823543
GPR[SPVATF]-1659780024577
GPR[EPVATF]-1659780027395
GPR[SPS]-1659780027395
[1491190] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:339.
GPR[EPS]-1659780028968
GPR[ESUN]-1659780028968
GPR[SSUN]-1659780028968
507083050
GPR[ESUN]-1659780029395
GPR[SSUN]-1659780029395
507083050
GPR[SPVATF]-1659780029785
GPR[EPVATF]-1659780033453
GPR[SPS]-1659780033453
[1496831] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:130.
GPR[EPS]-1659780034607
GPR[SPVATF]-1659780034608
GPR[EPVATF]-1659780038068
GPR[SPS]-1659780038068
[1501398] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:130.
GPR[EPS]-1659780039174
GPR[ESUN]-1659780039174
GPR[SSUN]-1659780039174
507083050
GPR[SPVATF]-1659780039413
GPR[EPVATF]-1659780042870
GPR[SPS]-1659780042870
[1506155] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:201.
GPR[EPS]-1659780043931
GPR[SPVATF]-1659780043932
GPR[EPVATF]-1659780047374
GPR[SPS]-1659780047374
[1510633] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:201.
GPR[EPS]-1659780048409
GPR[ESUN]-1659780048409
GPR[SSUN]-1659780048409
1187751237
GPR[ESUN]-1659780048693
GPR[SSUN]-1659780048693
507083050
GPR[SPVATF]-1659780048910
GPR[EPVATF]-1659780053357
GPR[SPS]-1659780053357
[1516616] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:200.
GPR[EPS]-1659780054392
GPR[SPVATF]-1659780054392
GPR[EPVATF]-1659780058954
GPR[SPS]-1659780058954
[1522309] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:200.
GPR[EPS]-1659780060085
GPR[ESUN]-1659780060085
GPR[SSUN]-1659780060085
1187751237
GPR[ESUN]-1659780060384
GPR[SSUN]-1659780060384
1187751237
GPR[ESUN]-1659780060668
GPR[SSUN]-1659780060668
1299274573
GPR[SPVATF]-1659780060884
GPR[EPVATF]-1659780065205
GPR[SPS]-1659780065205
[1528577] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:860.
GPR[EPS]-1659780066353
GPR[SPVATF]-1659780066353
GPR[EPVATF]-1659780075621
GPR[SPS]-1659780075621
[1539710] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:860.
GPR[EPS]-1659780077486
GPR[ESUN]-1659780077486
GPR[SSUN]-1659780077486
1299274573
GPR[ESUN]-1659780077715
GPR[SSUN]-1659780077716
1299274573
GPR[ESUN]-1659780077936
GPR[SSUN]-1659780077936
1299274573
GPR[ESUN]-1659780078169
GPR[SSUN]-1659780078169
1299274573
GPR[ESUN]-1659780078426
GPR[SSUN]-1659780078426
1299274573
GPR[ESUN]-1659780078868
GPR[SSUN]-1659780078868
1299274573
GPR[SPVATF]-1659780079088
GPR[EPVATF]-1659780083278
GPR[SPS]-1659780083278
[1546530] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:835.
GPR[EPS]-1659780084306
GPR[SPVATF]-1659780084306
GPR[EPVATF]-1659780088335
GPR[SPS]-1659780088335
[1551617] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:835.
GPR[EPS]-1659780089394
GPR[ESUN]-1659780089394
GPR[SSUN]-1659780089394
1299274573
GPR[SPVATF]-1659780089635
GPR[EPVATF]-1659780094653
GPR[SPS]-1659780094654
[1558019] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:831.
GPR[EPS]-1659780095795
GPR[SPVATF]-1659780095795
GPR[EPVATF]-1659780099768
GPR[SPS]-1659780099768
[1562979] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:831.
GPR[EPS]-1659780100755
GPR[ESUN]-1659780100755
GPR[SSUN]-1659780100755
1299274573
GPR[ESUN]-1659780100993
GPR[SSUN]-1659780100993
1299274573
GPR[ESUN]-1659780101214
GPR[SSUN]-1659780101214
1299274573
GPR[ESUN]-1659780101433
GPR[SSUN]-1659780101433
1299274573
GPR[SPVATF]-1659780101647
GPR[EPVATF]-1659780105714
GPR[SPS]-1659780105714
[1568880] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:804.
GPR[EPS]-1659780106657
GPR[SPVATF]-1659780106657
GPR[EPVATF]-1659780110617
GPR[SPS]-1659780110617
[1573862] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:804.
GPR[EPS]-1659780111638
GPR[ESUN]-1659780111638
GPR[SSUN]-1659780111638
1299274573
GPR[ESUN]-1659780111887
GPR[SSUN]-1659780111887
1299274573
GPR[ESUN]-1659780112111
GPR[SSUN]-1659780112111
1299274573
GPR[ESUN]-1659780112332
GPR[SSUN]-1659780112332
1299274573
GPR[ESUN]-1659780112589
GPR[SSUN]-1659780112589
1299274573
GPR[ESUN]-1659780112809
GPR[SSUN]-1659780112809
1299274573
GPR[ESUN]-1659780113032
GPR[SSUN]-1659780113032
1299274573
GPR[SPVATF]-1659780113259
GPR[EPVATF]-1659780118385
GPR[SPS]-1659780118385
[1581780] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:557.
GPR[EPS]-1659780119556
GPR[SPVATF]-1659780119556
GPR[EPVATF]-1659780123727
GPR[SPS]-1659780123727
[1587026] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:557.
GPR[EPS]-1659780124802
GPR[ESUN]-1659780124802
GPR[SSUN]-1659780124802
1299274573
GPR[SPVATF]-1659780125024
GPR[EPVATF]-1659780129984
GPR[SPS]-1659780129984
[1593397] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:553.
GPR[EPS]-1659780131174
GPR[SPVATF]-1659780131174
GPR[EPVATF]-1659780135632
GPR[SPS]-1659780135632
[1598974] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:553.
GPR[EPS]-1659780136750
GPR[ESUN]-1659780136750
GPR[SSUN]-1659780136750
1299274573
GPR[ESUN]-1659780136978
GPR[SSUN]-1659780136978
1299274573
GPR[SPVATF]-1659780137198
GPR[EPVATF]-1659780142101
GPR[SPS]-1659780142102
[1605685] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:356.
GPR[EPS]-1659780143461
GPR[SPVATF]-1659780143461
GPR[EPVATF]-1659780147661
GPR[SPS]-1659780147661
[1611024] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:356.
GPR[EPS]-1659780148800
GPR[ESUN]-1659780148800
GPR[SSUN]-1659780148800
1299274573
GPR[ESUN]-1659780149049
GPR[SSUN]-1659780149049
1299274573
GPR[ESUN]-1659780149258
GPR[SSUN]-1659780149258
1299274573
GPR[SPVATF]-1659780149466
GPR[EPVATF]-1659780154627
GPR[SPS]-1659780154627
[1617243] ERROR ConstraintModelBuilder - Unable to compile the change: 
class FunctionInjector {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier;

    private final boolean allowDecomposition;

    private java.util.Set<java.lang.String> knownConstants = com.google.common.collect.Sets.newHashSet();

    private final boolean assumeStrictThis;

    private final boolean assumeMinimumCapture;

    public FunctionInjector(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier, boolean allowDecomposition, boolean assumeStrictThis, boolean assumeMinimumCapture) {
        com.google.common.base.Preconditions.checkNotNull(compiler);
        com.google.common.base.Preconditions.checkNotNull(safeNameIdSupplier);
        this.compiler = compiler;
        this.safeNameIdSupplier = safeNameIdSupplier;
        this.allowDecomposition = allowDecomposition;
        this.assumeStrictThis = assumeStrictThis;
        this.assumeMinimumCapture = assumeMinimumCapture;
    }

    enum InliningMode {

        DIRECT,
        BLOCK;}

    static class Reference {
        final com.google.javascript.rhino.Node callNode;

        final com.google.javascript.jscomp.JSModule module;

        final com.google.javascript.jscomp.FunctionInjector.InliningMode mode;

        Reference(com.google.javascript.rhino.Node callNode, com.google.javascript.jscomp.JSModule module, com.google.javascript.jscomp.FunctionInjector.InliningMode mode) {
            this.callNode = callNode;
            this.module = module;
            this.mode = mode;
        }
    }

    private static final int NAME_COST_ESTIMATE = com.google.javascript.jscomp.InlineCostEstimator.ESTIMATED_IDENTIFIER_COST;

    private static final int COMMA_COST = 1;

    private static final int PAREN_COST = 2;

    boolean doesFunctionMeetMinimumRequirements(final java.lang.String fnName, com.google.javascript.rhino.Node fnNode) {
        com.google.javascript.rhino.Node block = com.google.javascript.jscomp.NodeUtil.getFunctionBody(fnNode);
        final java.lang.String fnRecursionName = fnNode.getFirstChild().getString();
        com.google.common.base.Preconditions.checkState(fnRecursionName != null);
        boolean referencesArguments = com.google.javascript.jscomp.NodeUtil.isNameReferenced(block, "arguments", com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        com.google.common.base.Predicate<com.google.javascript.rhino.Node> p = new com.google.common.base.Predicate<com.google.javascript.rhino.Node>() {
            @java.lang.Override
            public boolean apply(com.google.javascript.rhino.Node n) {
                if (n.getType() == com.google.javascript.rhino.Token.NAME) {
                    return (n.getString().equals("eval") || ((!fnName.isEmpty()) && n.getString().equals(fnName))) || ((!fnRecursionName.isEmpty()) && n.getString().equals(fnRecursionName));
                }
                return false;
            }
        };
        return (!referencesArguments) && (!com.google.javascript.jscomp.NodeUtil.has(block, p, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue()));
    }

    com.google.javascript.jscomp.FunctionInjector.CanInlineResult canInlineReferenceToFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> needAliases, com.google.javascript.jscomp.FunctionInjector.InliningMode mode, boolean referencesThis, boolean containsFunctions) {
        if (!isSupportedCallType(callNode)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (containsFunctions) {
            if ((!assumeMinimumCapture) && (!t.inGlobalScope())) {
                return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
            } else if (com.google.javascript.jscomp.NodeUtil.isWithinLoop(callNode)) {
                return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
            }
        }
        if (referencesThis && (!com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode))) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT) {
            return canInlineReferenceDirectly(callNode, fnNode);
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(230).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(230).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(230).collectInput("com.google.javascript.jscomp.FunctionInjector.this.safeNameIdSupplier",com.google.javascript.jscomp.FunctionInjector.this.safeNameIdSupplier);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(230).collectInput("needAliases",needAliases);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(230).collectInput("com.google.javascript.jscomp.FunctionInjector.this.compiler",com.google.javascript.jscomp.FunctionInjector.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(230).collectInput("com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE",com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(230).collectInput("fnNode",fnNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(230).collectInput("com.google.javascript.jscomp.FunctionInjector.COMMA_COST",com.google.javascript.jscomp.FunctionInjector.COMMA_COST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(230).collectInput("referencesThis",referencesThis);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(230).collectInput("com.google.javascript.jscomp.FunctionInjector.this.assumeStrictThis",com.google.javascript.jscomp.FunctionInjector.this.assumeStrictThis);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(230).collectInput("com.google.javascript.jscomp.FunctionInjector.PAREN_COST",com.google.javascript.jscomp.FunctionInjector.PAREN_COST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(230).collectInput("mode",mode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(230).collectInput("containsFunctions",containsFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(230).collectInput("callNode",callNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(230).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(230).collectInput("com.google.javascript.jscomp.FunctionInjector.this.knownConstants",com.google.javascript.jscomp.FunctionInjector.this.knownConstants);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(230).collectInput("com.google.javascript.jscomp.FunctionInjector.this.assumeMinimumCapture",com.google.javascript.jscomp.FunctionInjector.this.assumeMinimumCapture);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(230).collectInput("com.google.javascript.jscomp.FunctionInjector.this.allowDecomposition",com.google.javascript.jscomp.FunctionInjector.this.allowDecomposition);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(230).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(230).collectionEnds();
            }
            if (runtimeAngelicValue)
                return canInlineReferenceAsStatementBlock(t, callNode, fnNode, needAliases);

        }
    }

    private boolean isSupportedCallType(com.google.javascript.rhino.Node callNode) {
        if (callNode.getFirstChild().getType() != com.google.javascript.rhino.Token.NAME) {
            if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode)) {
                if (!assumeStrictThis) {
                    com.google.javascript.rhino.Node thisValue = callNode.getFirstChild().getNext();
                    if ((thisValue == null) || (thisValue.getType() != com.google.javascript.rhino.Token.THIS)) {
                        return false;
                    }
                }
            } else if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectApply(callNode)) {
                return false;
            }
        }
        return true;
    }

    com.google.javascript.rhino.Node inline(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, java.lang.String fnName, com.google.javascript.rhino.Node fnNode, com.google.javascript.jscomp.FunctionInjector.InliningMode mode) {
        com.google.common.base.Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());
        if (mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT) {
            return inlineReturnValue(callNode, fnNode);
        } else {
            return inlineFunction(callNode, fnNode, fnName);
        }
    }

    private com.google.javascript.rhino.Node inlineReturnValue(com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode) {
        com.google.javascript.rhino.Node block = fnNode.getLastChild();
        com.google.javascript.rhino.Node callParentNode = callNode.getParent();
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> argMap = com.google.javascript.jscomp.FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);
        com.google.javascript.rhino.Node newExpression;
        if (!block.hasChildren()) {
            com.google.javascript.rhino.Node srcLocation = block;
            newExpression = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(srcLocation);
        } else {
            com.google.javascript.rhino.Node returnNode = block.getFirstChild();
            com.google.common.base.Preconditions.checkArgument(returnNode.getType() == com.google.javascript.rhino.Token.RETURN);
            com.google.javascript.rhino.Node safeReturnNode = returnNode.cloneTree();
            com.google.javascript.rhino.Node inlineResult = com.google.javascript.jscomp.FunctionArgumentInjector.inject(null, safeReturnNode, null, argMap);
            com.google.common.base.Preconditions.checkArgument(safeReturnNode == inlineResult);
            newExpression = safeReturnNode.removeFirstChild();
        }
        callParentNode.replaceChild(callNode, newExpression);
        return newExpression;
    }

    private enum CallSiteType {

        UNSUPPORTED,
        SIMPLE_CALL,
        SIMPLE_ASSIGNMENT,
        VAR_DECL_SIMPLE_ASSIGNMENT,
        EXPRESSION,
        DECOMPOSABLE_EXPRESSION;}

    private com.google.javascript.jscomp.FunctionInjector.CallSiteType classifyCallSite(com.google.javascript.rhino.Node callNode) {
        com.google.javascript.rhino.Node parent = callNode.getParent();
        com.google.javascript.rhino.Node grandParent = parent.getParent();
        if (com.google.javascript.jscomp.NodeUtil.isExprCall(parent)) {
            return com.google.javascript.jscomp.FunctionInjector.CallSiteType.SIMPLE_CALL;
        } else if (((com.google.javascript.jscomp.NodeUtil.isExprAssign(grandParent) && (!com.google.javascript.jscomp.NodeUtil.isVarOrSimpleAssignLhs(callNode, parent))) && (parent.getFirstChild().getType() == com.google.javascript.rhino.Token.NAME)) && (!com.google.javascript.jscomp.NodeUtil.isConstantName(parent.getFirstChild()))) {
            return com.google.javascript.jscomp.FunctionInjector.CallSiteType.SIMPLE_ASSIGNMENT;
        } else if ((((parent.getType() == com.google.javascript.rhino.Token.NAME) && (!com.google.javascript.jscomp.NodeUtil.isConstantName(parent))) && (grandParent.getType() == com.google.javascript.rhino.Token.VAR)) && grandParent.hasOneChild()) {
            return com.google.javascript.jscomp.FunctionInjector.CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT;
        } else {
            com.google.javascript.rhino.Node expressionRoot = com.google.javascript.jscomp.ExpressionDecomposer.findExpressionRoot(callNode);
            if (expressionRoot != null) {
                com.google.javascript.jscomp.ExpressionDecomposer decomposer = new com.google.javascript.jscomp.ExpressionDecomposer(compiler, safeNameIdSupplier, knownConstants);
                com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType type = decomposer.canExposeExpression(callNode);
                if (type == com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.MOVABLE) {
                    return com.google.javascript.jscomp.FunctionInjector.CallSiteType.EXPRESSION;
                } else if (type == com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.DECOMPOSABLE) {
                    return com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION;
                } else {
                    com.google.common.base.Preconditions.checkState(type == com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.UNDECOMPOSABLE);
                }
            }
        }
        return com.google.javascript.jscomp.FunctionInjector.CallSiteType.UNSUPPORTED;
    }

    private com.google.javascript.rhino.Node inlineFunction(com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode, java.lang.String fnName) {
        com.google.javascript.rhino.Node parent = callNode.getParent();
        com.google.javascript.rhino.Node grandParent = parent.getParent();
        com.google.javascript.jscomp.FunctionInjector.CallSiteType callSiteType = classifyCallSite(callNode);
        com.google.common.base.Preconditions.checkArgument(callSiteType != com.google.javascript.jscomp.FunctionInjector.CallSiteType.UNSUPPORTED);
        boolean isCallInLoop = com.google.javascript.jscomp.NodeUtil.isWithinLoop(callNode);
        java.lang.String resultName = null;
        boolean needsDefaultReturnResult = true;
        switch (callSiteType) {
            case SIMPLE_ASSIGNMENT :
                resultName = parent.getFirstChild().getString();
                break;
            case VAR_DECL_SIMPLE_ASSIGNMENT :
                resultName = parent.getString();
                break;
            case SIMPLE_CALL :
                resultName = null;
                needsDefaultReturnResult = false;
                break;
            case EXPRESSION :
                resultName = getUniqueResultName();
                needsDefaultReturnResult = isCallInLoop;
                break;
            case DECOMPOSABLE_EXPRESSION :
                throw new java.lang.IllegalStateException("Decomposable expressions must decomposed before inlining.");
            default :
                throw new java.lang.IllegalStateException("Unexpected call site type.");
        }
        com.google.javascript.jscomp.FunctionToBlockMutator mutator = new com.google.javascript.jscomp.FunctionToBlockMutator(compiler, this.safeNameIdSupplier);
        com.google.javascript.rhino.Node newBlock = mutator.mutate(fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);
        com.google.javascript.rhino.Node greatGrandParent = grandParent.getParent();
        switch (callSiteType) {
            case VAR_DECL_SIMPLE_ASSIGNMENT :
                parent.removeChild(parent.getFirstChild());
                com.google.common.base.Preconditions.checkState(parent.getFirstChild() == null);
                greatGrandParent.addChildAfter(newBlock, grandParent);
                break;
            case SIMPLE_ASSIGNMENT :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isExpressionNode(grandParent));
                greatGrandParent.replaceChild(grandParent, newBlock);
                break;
            case SIMPLE_CALL :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isExpressionNode(parent));
                grandParent.replaceChild(parent, newBlock);
                break;
            case EXPRESSION :
                com.google.javascript.rhino.Node injectionPoint = com.google.javascript.jscomp.ExpressionDecomposer.findInjectionPoint(callNode);
                com.google.common.base.Preconditions.checkNotNull(injectionPoint);
                com.google.javascript.rhino.Node injectionPointParent = injectionPoint.getParent();
                com.google.common.base.Preconditions.checkNotNull(injectionPointParent);
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isStatementBlock(injectionPointParent));
                newBlock.addChildrenToFront(com.google.javascript.jscomp.NodeUtil.newVarNode(resultName, null).copyInformationFromForTree(callNode));
                injectionPointParent.addChildBefore(newBlock, injectionPoint);
                parent.replaceChild(callNode, com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, resultName));
                break;
            default :
                throw new java.lang.IllegalStateException("Unexpected call site type.");
        }
        return newBlock;
    }

    boolean isDirectCallNodeReplacementPossible(com.google.javascript.rhino.Node fnNode) {
        com.google.javascript.rhino.Node block = com.google.javascript.jscomp.NodeUtil.getFunctionBody(fnNode);
        if (!block.hasChildren()) {
            return true;
        } else if (block.hasOneChild()) {
            if ((block.getFirstChild().getType() == com.google.javascript.rhino.Token.RETURN) && (block.getFirstChild().getFirstChild() != null)) {
                return true;
            }
        }
        return false;
    }

    enum CanInlineResult {

        YES,
        AFTER_DECOMPOSITION,
        NO;}

    private com.google.javascript.jscomp.FunctionInjector.CanInlineResult canInlineReferenceAsStatementBlock(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> namesToAlias) {
        com.google.javascript.jscomp.FunctionInjector.CallSiteType callSiteType = classifyCallSite(callNode);
        if (callSiteType == com.google.javascript.jscomp.FunctionInjector.CallSiteType.UNSUPPORTED) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if ((!allowDecomposition) && (callSiteType == com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (callSiteType == com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.AFTER_DECOMPOSITION;
        } else {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.YES;
        }
    }

    private boolean callMeetsBlockInliningRequirements(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, final com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> namesToAlias) {
        final boolean assumeMinimumCapture = this.assumeMinimumCapture;
        boolean fnContainsVars = com.google.javascript.jscomp.NodeUtil.has(com.google.javascript.jscomp.NodeUtil.getFunctionBody(fnNode), new com.google.javascript.jscomp.NodeUtil.MatchDeclaration(), new com.google.javascript.jscomp.NodeUtil.MatchShallowStatement());
        boolean forbidTemps = false;
        if (!t.inGlobalScope()) {
            com.google.javascript.rhino.Node fnCaller = t.getScopeRoot();
            com.google.javascript.rhino.Node fnCallerBody = fnCaller.getLastChild();
            com.google.common.base.Predicate<com.google.javascript.rhino.Node> match = new com.google.common.base.Predicate<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean apply(com.google.javascript.rhino.Node n) {
                    if (n.getType() == com.google.javascript.rhino.Token.NAME) {
                        return n.getString().equals("eval");
                    }
                    if ((!assumeMinimumCapture) && (n.getType() == com.google.javascript.rhino.Token.FUNCTION)) {
                        return n != fnNode;
                    }
                    return false;
                }
            };
            forbidTemps = com.google.javascript.jscomp.NodeUtil.has(fnCallerBody, match, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        }
        if (fnContainsVars && forbidTemps) {
            return false;
        }
        if (forbidTemps) {
            java.util.Map<java.lang.String, com.google.javascript.rhino.Node> args = com.google.javascript.jscomp.FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);
            boolean hasArgs = !args.isEmpty();
            if (hasArgs) {
                java.util.Set<java.lang.String> allNamesToAlias = com.google.common.collect.Sets.newHashSet(namesToAlias);
                com.google.javascript.jscomp.FunctionArgumentInjector.maybeAddTempsForCallArguments(fnNode, args, allNamesToAlias, compiler.getCodingConvention());
                if (!allNamesToAlias.isEmpty()) {
                    return false;
                }
            }
        }
        return true;
    }

    private com.google.javascript.jscomp.FunctionInjector.CanInlineResult canInlineReferenceDirectly(com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode) {
        if (!isDirectCallNodeReplacementPossible(fnNode)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        com.google.javascript.rhino.Node block = fnNode.getLastChild();
        com.google.javascript.rhino.Node cArg = callNode.getFirstChild().getNext();
        if (callNode.getFirstChild().getType() != com.google.javascript.rhino.Token.NAME) {
            if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode)) {
                if ((cArg == null) || (cArg.getType() != com.google.javascript.rhino.Token.THIS)) {
                    return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
                }
                cArg = cArg.getNext();
            } else {
                com.google.common.base.Preconditions.checkState(!com.google.javascript.jscomp.NodeUtil.isFunctionObjectApply(callNode));
            }
        }
        com.google.javascript.rhino.Node fnParam = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(fnNode).getFirstChild();
        while ((cArg != null) || (fnParam != null)) {
            if (fnParam != null) {
                if (cArg != null) {
                    if (com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(cArg) && (com.google.javascript.jscomp.NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1)) {
                        return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
                    }
                }
                fnParam = fnParam.getNext();
            }
            if (cArg != null) {
                if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(cArg)) {
                    return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
                }
                cArg = cArg.getNext();
            }
        } 
        return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.YES;
    }

    private java.lang.String getUniqueResultName() {
        return ("JSCompiler_inline_result" + com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.UNIQUE_ID_SEPARATOR) + safeNameIdSupplier.get();
    }

    boolean inliningLowersCost(com.google.javascript.jscomp.JSModule fnModule, com.google.javascript.rhino.Node fnNode, java.util.Collection<? extends com.google.javascript.jscomp.FunctionInjector.Reference> refs, java.util.Set<java.lang.String> namesToAlias, boolean isRemovable, boolean referencesThis) {
        int referenceCount = refs.size();
        if (referenceCount == 0) {
            return true;
        }
        int referencesUsingBlockInlining = 0;
        boolean checkModules = isRemovable && (fnModule != null);
        com.google.javascript.jscomp.JSModuleGraph moduleGraph = compiler.getModuleGraph();
        for (com.google.javascript.jscomp.FunctionInjector.Reference ref : refs) {
            if (ref.mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.BLOCK) {
                referencesUsingBlockInlining++;
            }
            if (checkModules && (ref.module != null)) {
                if ((ref.module != fnModule) && (!moduleGraph.dependsOn(ref.module, fnModule))) {
                    isRemovable = false;
                    checkModules = false;
                }
            }
        }
        int referencesUsingDirectInlining = referenceCount - referencesUsingBlockInlining;
        if (((referenceCount == 1) && isRemovable) && (referencesUsingDirectInlining == 1)) {
            return true;
        }
        int callCost = com.google.javascript.jscomp.FunctionInjector.estimateCallCost(fnNode, referencesThis);
        int overallCallCost = callCost * referenceCount;
        int costDeltaDirect = com.google.javascript.jscomp.FunctionInjector.inlineCostDelta(fnNode, namesToAlias, com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT);
        int costDeltaBlock = com.google.javascript.jscomp.FunctionInjector.inlineCostDelta(fnNode, namesToAlias, com.google.javascript.jscomp.FunctionInjector.InliningMode.BLOCK);
        return doesLowerCost(fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable);
    }

    private boolean doesLowerCost(com.google.javascript.rhino.Node fnNode, int callCost, int directInlines, int costDeltaDirect, int blockInlines, int costDeltaBlock, boolean removable) {
        int fnInstanceCount = (directInlines + blockInlines) - (removable ? 1 : 0);
        if (fnInstanceCount == 0) {
            if ((blockInlines > 0) && (costDeltaBlock > 0)) {
                return false;
            }
            return true;
        }
        int costDelta = (directInlines * costDeltaDirect) + (blockInlines * costDeltaBlock);
        int threshold = (callCost - costDelta) / fnInstanceCount;
        return com.google.javascript.jscomp.InlineCostEstimator.getCost(fnNode, threshold + 1) <= threshold;
    }

    private static int estimateCallCost(com.google.javascript.rhino.Node fnNode, boolean referencesThis) {
        com.google.javascript.rhino.Node argsNode = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(fnNode);
        int numArgs = argsNode.getChildCount();
        int callCost = com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE + com.google.javascript.jscomp.FunctionInjector.PAREN_COST;
        if (numArgs > 0) {
            callCost += (numArgs * com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE) + ((numArgs - 1) * com.google.javascript.jscomp.FunctionInjector.COMMA_COST);
        }
        if (referencesThis) {
            callCost += 5 + 5;
        }
        return callCost;
    }

    private static int inlineCostDelta(com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> namesToAlias, com.google.javascript.jscomp.FunctionInjector.InliningMode mode) {
        int paramCount = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(fnNode).getChildCount();
        int commaCount = (paramCount > 1) ? paramCount - 1 : 0;
        int costDeltaFunctionOverhead = (15 + commaCount) + (paramCount * com.google.javascript.jscomp.InlineCostEstimator.ESTIMATED_IDENTIFIER_COST);
        com.google.javascript.rhino.Node block = fnNode.getLastChild();
        if (!block.hasChildren()) {
            return -costDeltaFunctionOverhead;
        }
        if (mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT) {
            return -(costDeltaFunctionOverhead + 7);
        } else {
            int aliasCount = namesToAlias.size();
            final int INLINE_BLOCK_OVERHEAD = 4;
            final int PER_RETURN_OVERHEAD = 2;
            final int PER_RETURN_RESULT_OVERHEAD = 3;
            final int PER_ALIAS_OVERHEAD = 3;
            int returnCount = com.google.javascript.jscomp.NodeUtil.getNodeTypeReferenceCount(block, com.google.javascript.rhino.Token.RETURN, new com.google.javascript.jscomp.NodeUtil.MatchShallowStatement());
            int resultCount = (returnCount > 0) ? returnCount - 1 : 0;
            int baseOverhead = (returnCount > 0) ? INLINE_BLOCK_OVERHEAD : 0;
            int overhead = ((baseOverhead + (returnCount * PER_RETURN_OVERHEAD)) + (resultCount * PER_RETURN_RESULT_OVERHEAD)) + (aliasCount * PER_ALIAS_OVERHEAD);
            return overhead - costDeltaFunctionOverhead;
        }
    }

    public void setKnownConstants(java.util.Set<java.lang.String> knownConstants) {
        com.google.common.base.Preconditions.checkState(this.knownConstants.isEmpty());
        this.knownConstants = knownConstants;
    }
}
[1617243] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659780155019
GPR[SSUN]-1659780155019
1299274573
GPR[SPVATF]-1659780155234
GPR[EPVATF]-1659780158447
GPR[SPS]-1659780158447
[1621622] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:832.
GPR[EPS]-1659780159399
GPR[ESUN]-1659780159399
GPR[SSUN]-1659780159399
1187751237
GPR[ESUN]-1659780159759
GPR[SSUN]-1659780159759
1187751237
GPR[SPVATF]-1659780160029
GPR[EPVATF]-1659780164225
GPR[SPS]-1659780164225
[1627613] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1135.
GPR[EPS]-1659780165389
GPR[ESUN]-1659780165389
GPR[SSUN]-1659780165389
2433571
GPR[ESUN]-1659780165628
GPR[SSUN]-1659780165628
507083050
GPR[SPVATF]-1659780165845
GPR[EPVATF]-1659780170018
GPR[SPS]-1659780170018
[1633367] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:126.
GPR[EPS]-1659780171143
GPR[ESUN]-1659780171143
GPR[SSUN]-1659780171143
507083050
GPR[SPVATF]-1659780171370
GPR[EPVATF]-1659780176669
GPR[SPS]-1659780176669
[1640038] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:125.
GPR[EPS]-1659780177814
GPR[ESUN]-1659780177836
GPR[SSUN]-1659780177837
1045502179
GPR[SPVATF]-1659780178095
GPR[EPVATF]-1659780182097
GPR[SPS]-1659780182098
[1645567] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:187.
GPR[EPS]-1659780183343
GPR[SPVATF]-1659780183343
GPR[EPVATF]-1659780188275
GPR[SPS]-1659780188275
[1651642] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:187.
GPR[EPS]-1659780189418
GPR[ESUN]-1659780189418
GPR[SSUN]-1659780189418
1045502179
GPR[ESUN]-1659780189663
GPR[SSUN]-1659780189663
1045502179
GPR[SPVATF]-1659780189899
GPR[EPVATF]-1659780193981
GPR[SPS]-1659780193981
[1657287] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:185.
GPR[EPS]-1659780195063
GPR[ESUN]-1659780195063
GPR[SSUN]-1659780195063
1187751237
GPR[SPVATF]-1659780195351
GPR[EPVATF]-1659780198942
GPR[SPS]-1659780198942
[1662336] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2802.
GPR[EPS]-1659780200112
GPR[ESUN]-1659780200112
GPR[SSUN]-1659780200112
507083050
GPR[SPVATF]-1659780200356
GPR[EPVATF]-1659780203466
GPR[SPS]-1659780203466
[1666990] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:132.
GPR[EPS]-1659780204766
GPR[ESUN]-1659780204766
GPR[SSUN]-1659780204766
507083050
GPR[SPVATF]-1659780204992
GPR[EPVATF]-1659780208207
GPR[SPS]-1659780208207
[1672387] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:131.
GPR[EPS]-1659780210163
GPR[ESUN]-1659780210163
GPR[SSUN]-1659780210163
1045502179
GPR[SPVATF]-1659780210424
GPR[EPVATF]-1659780214511
GPR[SPS]-1659780214511
[1677922] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:789.
GPR[EPS]-1659780215698
GPR[SPVATF]-1659780215698
GPR[EPVATF]-1659780219664
GPR[SPS]-1659780219664
[1683119] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:789.
GPR[EPS]-1659780220895
GPR[ESUN]-1659780220895
GPR[SSUN]-1659780220895
1299274573
GPR[SPVATF]-1659780221135
GPR[EPVATF]-1659780224205
GPR[SPS]-1659780224205
[1688312] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:358.
GPR[EPS]-1659780226088
GPR[ESUN]-1659780226088
GPR[SSUN]-1659780226088
1187751237
GPR[SPVATF]-1659780226409
GPR[EPVATF]-1659780230591
GPR[SPS]-1659780230592
[1694012] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2647.
GPR[EPS]-1659780231788
GPR[ESUN]-1659780231788
GPR[SSUN]-1659780231788
507083050
GPR[ESUN]-1659780232063
GPR[SSUN]-1659780232063
507083050
GPR[SPVATF]-1659780232282
GPR[EPVATF]-1659780236555
GPR[SPS]-1659780236555
[1699806] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:142.
GPR[EPS]-1659780237582
GPR[ESUN]-1659780237582
GPR[SSUN]-1659780237582
507083050
GPR[ESUN]-1659780237813
GPR[SSUN]-1659780237813
507083050
GPR[SPVATF]-1659780238026
GPR[EPVATF]-1659780242233
GPR[SPS]-1659780242233
[1705517] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:129.
GPR[EPS]-1659780243293
GPR[ESUN]-1659780243293
GPR[SSUN]-1659780243293
507083050
GPR[SPVATF]-1659780243571
GPR[EPVATF]-1659780247692
GPR[SPS]-1659780247692
[1711885] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:120.
GPR[EPS]-1659780249661
GPR[SPVATF]-1659780249661
GPR[EPVATF]-1659780253919
GPR[SPS]-1659780253919
[1717237] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:120.
GPR[EPS]-1659780255013
GPR[ESUN]-1659780255013
GPR[SSUN]-1659780255013
507083050
GPR[ESUN]-1659780255245
GPR[SSUN]-1659780255245
507083050
GPR[ESUN]-1659780255491
GPR[SSUN]-1659780255491
1187751237
GPR[SPVATF]-1659780255777
GPR[EPVATF]-1659780259980
GPR[SPS]-1659780259980
[1723534] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1111.
GPR[EPS]-1659780261310
GPR[ESUN]-1659780261310
GPR[SSUN]-1659780261310
-436823543
GPR[SPVATF]-1659780261533
GPR[EPVATF]-1659780263306
GPR[SPS]-1659780263307
[1726718] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:450.
GPR[EPS]-1659780264494
GPR[ESUN]-1659780264494
GPR[SSUN]-1659780264494
1187751237
GPR[ESUN]-1659780264793
GPR[SSUN]-1659780264793
1187751237
GPR[SPVATF]-1659780265066
GPR[EPVATF]-1659780270242
GPR[SPS]-1659780270242
[1733799] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2646.
GPR[EPS]-1659780271575
GPR[SPVATF]-1659780271575
GPR[EPVATF]-1659780275872
GPR[SPS]-1659780275872
[1739397] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2646.
GPR[EPS]-1659780277173
GPR[ESUN]-1659780277173
GPR[SSUN]-1659780277173
1187751237
GPR[ESUN]-1659780277472
GPR[SSUN]-1659780277472
1187751237
GPR[ESUN]-1659780277750
GPR[SSUN]-1659780277751
1299274573
GPR[SPVATF]-1659780277983
GPR[EPVATF]-1659780282950
GPR[SPS]-1659780282950
[1746457] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:241.
GPR[EPS]-1659780284233
GPR[ESUN]-1659780284233
GPR[SSUN]-1659780284233
1299274573
GPR[SPVATF]-1659780284506
GPR[EPVATF]-1659780288686
GPR[SPS]-1659780288686
[1751945] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:239.
GPR[EPS]-1659780289721
GPR[ESUN]-1659780289721
GPR[SSUN]-1659780289721
507083050
GPR[ESUN]-1659780289949
GPR[SSUN]-1659780289949
507083050
GPR[ESUN]-1659780290162
GPR[SSUN]-1659780290162
80988634
GPR[ESUN]-1659780290333
GPR[SSUN]-1659780290333
-436823543
GPR[SPVATF]-1659780290543
GPR[EPVATF]-1659780292298
GPR[SPS]-1659780292298
[1755621] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:449.
GPR[EPS]-1659780293397
GPR[SPVATF]-1659780293397
GPR[EPVATF]-1659780295194
GPR[SPS]-1659780295194
[1758450] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:449.
GPR[EPS]-1659780296226
GPR[ESUN]-1659780296226
GPR[SSUN]-1659780296226
1187751237
GPR[SPVATF]-1659780296551
GPR[EPVATF]-1659780300685
GPR[SPS]-1659780300685
[1764097] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2781.
GPR[EPS]-1659780301873
GPR[ESUN]-1659780301873
GPR[SSUN]-1659780301873
1187751237
GPR[SPVATF]-1659780302148
GPR[EPVATF]-1659780305346
GPR[SPS]-1659780305346
[1768821] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2660.
GPR[EPS]-1659780306597
GPR[ESUN]-1659780306598
GPR[SSUN]-1659780306598
1187751237
GPR[SPVATF]-1659780306873
GPR[EPVATF]-1659780310907
GPR[SPS]-1659780310907
[1774373] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2659.
GPR[EPS]-1659780312149
GPR[ESUN]-1659780312149
GPR[SSUN]-1659780312149
1187751237
GPR[SPVATF]-1659780312435
GPR[EPVATF]-1659780315636
GPR[SPS]-1659780315636
[1779579] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2658.
GPR[EPS]-1659780317355
GPR[ESUN]-1659780317355
GPR[SSUN]-1659780317355
507083050
GPR[ESUN]-1659780317760
GPR[SSUN]-1659780317760
507083050
GPR[SPVATF]-1659780318143
GPR[EPVATF]-1659780321736
GPR[SPS]-1659780321736
[1785487] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:498.
GPR[EPS]-1659780323263
GPR[ESUN]-1659780323263
GPR[SSUN]-1659780323263
1187751237
GPR[SPVATF]-1659780323874
GPR[EPVATF]-1659780328454
GPR[SPS]-1659780328454
[1791991] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:868.
GPR[EPS]-1659780329767
GPR[ESUN]-1659780329767
GPR[SSUN]-1659780329767
1045502179
GPR[SPVATF]-1659780330076
GPR[EPVATF]-1659780333906
GPR[SPS]-1659780333906
[1797153] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:560.
GPR[EPS]-1659780334929
GPR[ESUN]-1659780334929
GPR[SSUN]-1659780334929
-1117079791
GPR[ESUN]-1659780335197
GPR[SSUN]-1659780335197
-1117079791
GPR[SPVATF]-1659780335386
GPR[EPVATF]-1659780339384
GPR[SPS]-1659780339384
[1802938] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:99.
GPR[EPS]-1659780340714
GPR[ESUN]-1659780340714
GPR[SSUN]-1659780340714
1045502179
GPR[SPVATF]-1659780341334
GPR[EPVATF]-1659780346630
GPR[SPS]-1659780346630
[1811146] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:795.
GPR[EPS]-1659780348922
GPR[ESUN]-1659780348922
GPR[SSUN]-1659780348923
1045502179
GPR[ESUN]-1659780349592
GPR[SSUN]-1659780349592
1045502179
GPR[ESUN]-1659780350272
GPR[SSUN]-1659780350272
1045502179
GPR[SPVATF]-1659780351096
GPR[EPVATF]-1659780355667
GPR[SPS]-1659780355667
[1819711] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:559.
GPR[EPS]-1659780357487
GPR[SPVATF]-1659780357488
GPR[EPVATF]-1659780362478
GPR[SPS]-1659780362478
[1826735] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:559.
GPR[EPS]-1659780364511
GPR[ESUN]-1659780364511
GPR[SSUN]-1659780364511
1045502179
GPR[ESUN]-1659780365133
GPR[SSUN]-1659780365133
1045502179
GPR[ESUN]-1659780365502
GPR[SSUN]-1659780365502
1187751237
GPR[ESUN]-1659780365960
GPR[SSUN]-1659780365960
1187751237
GPR[ESUN]-1659780366387
GPR[SSUN]-1659780366387
1045502179
GPR[ESUN]-1659780366786
GPR[SSUN]-1659780366786
1045502179
GPR[SPVATF]-1659780367183
GPR[EPVATF]-1659780371332
GPR[SPS]-1659780371332
[1834647] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:846.
GPR[EPS]-1659780372423
GPR[SPVATF]-1659780372423
GPR[EPVATF]-1659780376478
GPR[SPS]-1659780376478
[1839782] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:846.
GPR[EPS]-1659780377558
GPR[ESUN]-1659780377558
GPR[SSUN]-1659780377558
1045502179
GPR[SPVATF]-1659780377825
GPR[EPVATF]-1659780381768
GPR[SPS]-1659780381768
[1845162] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:449.
GPR[EPS]-1659780382938
GPR[SPVATF]-1659780382938
GPR[EPVATF]-1659780387789
GPR[SPS]-1659780387789
[1851392] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:449.
GPR[EPS]-1659780389168
GPR[ESUN]-1659780389168
GPR[SSUN]-1659780389168
1045502179
GPR[SPVATF]-1659780389720
GPR[EPVATF]-1659780391538
GPR[SPS]-1659780391538
[1854884] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:295.
GPR[EPS]-1659780392660
GPR[ESUN]-1659780392660
GPR[SSUN]-1659780392660
507083050
GPR[SPVATF]-1659780392912
GPR[EPVATF]-1659780395018
GPR[SPS]-1659780395018
[1858233] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:202.
GPR[EPS]-1659780396009
GPR[ESUN]-1659780396009
GPR[SSUN]-1659780396009
1187751237
GPR[ESUN]-1659780396314
GPR[SSUN]-1659780396314
1299274573
GPR[SPVATF]-1659780396539
GPR[EPVATF]-1659780400545
GPR[SPS]-1659780400545
[1863776] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:750.
GPR[EPS]-1659780401552
GPR[SPVATF]-1659780401552
GPR[EPVATF]-1659780405557
GPR[SPS]-1659780405558
[1869712] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:750.
GPR[EPS]-1659780407488
GPR[ESUN]-1659780407488
GPR[SSUN]-1659780407488
1045502179
GPR[ESUN]-1659780407775
GPR[SSUN]-1659780407775
1045502179
GPR[SPVATF]-1659780408027
GPR[EPVATF]-1659780412260
GPR[SPS]-1659780412260
[1875750] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:845.
GPR[EPS]-1659780413526
GPR[ESUN]-1659780413526
GPR[SSUN]-1659780413526
1045502179
GPR[SPVATF]-1659780413789
GPR[EPVATF]-1659780417827
GPR[SPS]-1659780417827
[1881236] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:835.
GPR[EPS]-1659780419012
GPR[ESUN]-1659780419013
GPR[SSUN]-1659780419013
1045502179
GPR[SPVATF]-1659780419280
GPR[EPVATF]-1659780424297
GPR[SPS]-1659780424297
[1887736] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:834.
GPR[EPS]-1659780425512
GPR[ESUN]-1659780425512
GPR[SSUN]-1659780425512
1045502179
GPR[SPVATF]-1659780425812
GPR[EPVATF]-1659780429874
GPR[SPS]-1659780429874
[1893315] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:829.
GPR[EPS]-1659780431091
GPR[SPVATF]-1659780431092
GPR[EPVATF]-1659780436069
GPR[SPS]-1659780436069
[1899427] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:829.
GPR[EPS]-1659780437203
GPR[ESUN]-1659780437203
GPR[SSUN]-1659780437203
1045502179
GPR[SPVATF]-1659780437454
GPR[EPVATF]-1659780441445
GPR[SPS]-1659780441445
[1904738] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:827.
GPR[EPS]-1659780442514
GPR[ESUN]-1659780442514
GPR[SSUN]-1659780442514
1045502179
GPR[SPVATF]-1659780442776
GPR[EPVATF]-1659780446792
GPR[SPS]-1659780446792
[1910836] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:826.
GPR[EPS]-1659780448612
GPR[ESUN]-1659780448613
GPR[SSUN]-1659780448613
1045502179
GPR[SPVATF]-1659780448873
GPR[EPVATF]-1659780452991
GPR[SPS]-1659780452991
[1916475] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:825.
GPR[EPS]-1659780454251
GPR[ESUN]-1659780454251
GPR[SSUN]-1659780454251
1045502179
GPR[ESUN]-1659780454502
GPR[SSUN]-1659780454502
507083050
GPR[ESUN]-1659780454761
GPR[SSUN]-1659780454761
507083050
GPR[SPVATF]-1659780454974
GPR[EPVATF]-1659780459109
GPR[SPS]-1659780459109
[1922476] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:215.
GPR[EPS]-1659780460252
GPR[ESUN]-1659780460252
GPR[SSUN]-1659780460252
1187751237
GPR[SPVATF]-1659780460529
GPR[EPVATF]-1659780465523
GPR[SPS]-1659780465523
[1929063] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2022.
GPR[EPS]-1659780466839
GPR[SPVATF]-1659780466839
GPR[EPVATF]-1659780471034
GPR[SPS]-1659780471034
[1934429] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2022.
GPR[EPS]-1659780472205
GPR[ESUN]-1659780472205
GPR[SSUN]-1659780472205
1187751237
GPR[ESUN]-1659780472483
GPR[SSUN]-1659780472483
1045502179
GPR[ESUN]-1659780472714
GPR[SSUN]-1659780472714
1045502179
GPR[ESUN]-1659780472945
GPR[SSUN]-1659780472945
1045502179
GPR[ESUN]-1659780473174
GPR[SSUN]-1659780473174
1045502179
GPR[SPVATF]-1659780473403
GPR[EPVATF]-1659780477454
GPR[SPS]-1659780477454
[1941645] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:810.
GPR[EPS]-1659780479421
GPR[SPVATF]-1659780479421
GPR[EPVATF]-1659780483403
GPR[SPS]-1659780483403
[1946796] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:810.
GPR[EPS]-1659780484572
GPR[ESUN]-1659780484572
GPR[SSUN]-1659780484572
1045502179
GPR[ESUN]-1659780484815
GPR[SSUN]-1659780484815
1045502179
GPR[SPVATF]-1659780485047
GPR[EPVATF]-1659780489049
GPR[SPS]-1659780489049
[1952426] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:794.
GPR[EPS]-1659780490202
GPR[ESUN]-1659780490202
GPR[SSUN]-1659780490202
1045502179
GPR[SPVATF]-1659780490444
GPR[EPVATF]-1659780495096
GPR[SPS]-1659780495096
[1958578] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:788.
GPR[EPS]-1659780496354
GPR[SPVATF]-1659780496354
GPR[EPVATF]-1659780500369
GPR[SPS]-1659780500369
[1963678] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:788.
GPR[EPS]-1659780501454
GPR[ESUN]-1659780501454
GPR[SSUN]-1659780501454
1045502179
GPR[SPVATF]-1659780501692
GPR[EPVATF]-1659780506619
GPR[SPS]-1659780506619
[1969956] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:786.
GPR[EPS]-1659780507732
GPR[ESUN]-1659780507732
GPR[SSUN]-1659780507732
1045502179
GPR[ESUN]-1659780507978
GPR[SSUN]-1659780507978
1045502179
GPR[SPVATF]-1659780508208
GPR[EPVATF]-1659780512256
GPR[SPS]-1659780512256
[1975526] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:777.
GPR[EPS]-1659780513302
GPR[ESUN]-1659780513302
GPR[SSUN]-1659780513302
1045502179
GPR[ESUN]-1659780513669
GPR[SSUN]-1659780513669
1045502179
GPR[ESUN]-1659780513896
GPR[SSUN]-1659780513896
1045502179
GPR[SPVATF]-1659780514133
GPR[EPVATF]-1659780518074
GPR[SPS]-1659780518074
[1982101] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:752.
GPR[EPS]-1659780519877
GPR[SPVATF]-1659780519877
GPR[EPVATF]-1659780523848
GPR[SPS]-1659780523848
[1987251] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:752.
GPR[EPS]-1659780525027
GPR[ESUN]-1659780525027
GPR[SSUN]-1659780525027
1045502179
GPR[ESUN]-1659780525270
GPR[SSUN]-1659780525270
1045502179
GPR[ESUN]-1659780525498
GPR[SSUN]-1659780525498
1045502179
GPR[ESUN]-1659780525725
GPR[SSUN]-1659780525725
1045502179
GPR[ESUN]-1659780525954
GPR[SSUN]-1659780525954
1045502179
GPR[SPVATF]-1659780526182
GPR[EPVATF]-1659780530041
GPR[SPS]-1659780530041
[1993502] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$Inline:644.
GPR[EPS]-1659780531278
GPR[ESUN]-1659780531278
GPR[SSUN]-1659780531278
1045502179
GPR[SPVATF]-1659780531523
GPR[EPVATF]-1659780536359
GPR[SPS]-1659780536359
[1999844] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$Inline:643.
GPR[EPS]-1659780537620
GPR[ESUN]-1659780537620
GPR[SSUN]-1659780537620
1045502179
GPR[ESUN]-1659780537867
GPR[SSUN]-1659780537867
1045502179
GPR[ESUN]-1659780538099
GPR[SSUN]-1659780538099
1045502179
GPR[ESUN]-1659780538328
GPR[SSUN]-1659780538329
1045502179
GPR[ESUN]-1659780538560
GPR[SSUN]-1659780538560
1045502179
GPR[ESUN]-1659780538787
GPR[SSUN]-1659780538787
1045502179
GPR[SPVATF]-1659780539014
GPR[EPVATF]-1659780543219
GPR[SPS]-1659780543219
[2006501] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$Inline:628.
GPR[EPS]-1659780544277
GPR[ESUN]-1659780544278
GPR[SSUN]-1659780544278
1045502179
GPR[SPVATF]-1659780544528
GPR[EPVATF]-1659780548490
GPR[SPS]-1659780548490
[2011765] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$Inline:625.
GPR[EPS]-1659780549541
GPR[ESUN]-1659780549541
GPR[SSUN]-1659780549541
1045502179
GPR[SPVATF]-1659780549797
GPR[EPVATF]-1659780553756
GPR[SPS]-1659780553756
[2017090] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$Inline:615.
GPR[EPS]-1659780554866
GPR[SPVATF]-1659780554866
GPR[EPVATF]-1659780559704
GPR[SPS]-1659780559704
[2023137] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$Inline:615.
GPR[EPS]-1659780560913
GPR[ESUN]-1659780560913
GPR[SSUN]-1659780560913
1045502179
GPR[SPVATF]-1659780561161
GPR[EPVATF]-1659780565155
GPR[SPS]-1659780565155
[2028645] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$Inline:614.
GPR[EPS]-1659780566421
GPR[SPVATF]-1659780566422
GPR[EPVATF]-1659780571343
GPR[SPS]-1659780571343
[2034782] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$Inline:614.
GPR[EPS]-1659780572558
GPR[ESUN]-1659780572558
GPR[SSUN]-1659780572558
1045502179
GPR[ESUN]-1659780572807
GPR[SSUN]-1659780572807
1045502179
GPR[SPVATF]-1659780573043
GPR[EPVATF]-1659780577054
GPR[SPS]-1659780577054
[2040421] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$Inline:608.
GPR[EPS]-1659780578197
GPR[SPVATF]-1659780578197
GPR[EPVATF]-1659780582195
GPR[SPS]-1659780582195
[2045430] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$Inline:608.
GPR[EPS]-1659780583206
GPR[ESUN]-1659780583206
GPR[SSUN]-1659780583206
1045502179
GPR[SPVATF]-1659780583451
GPR[EPVATF]-1659780587499
GPR[SPS]-1659780587499
[2050863] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$Inline:607.
GPR[EPS]-1659780588639
GPR[ESUN]-1659780588639
GPR[SSUN]-1659780588639
-436823543
GPR[SPVATF]-1659780588866
GPR[EPVATF]-1659780590589
GPR[SPS]-1659780590590
[2053829] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:137.
GPR[EPS]-1659780591605
GPR[ESUN]-1659780591605
GPR[SSUN]-1659780591605
-436823543
GPR[SPVATF]-1659780591829
GPR[EPVATF]-1659780593537
GPR[SPS]-1659780593537
[2056783] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:122.
GPR[EPS]-1659780594559
GPR[SPVATF]-1659780594559
GPR[EPVATF]-1659780596284
GPR[SPS]-1659780596284
[2059526] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:122.
GPR[EPS]-1659780597302
GPR[ESUN]-1659780597302
GPR[SSUN]-1659780597302
507083050
GPR[SPVATF]-1659780597533
GPR[EPVATF]-1659780599240
GPR[SPS]-1659780599240
[2062506] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:478.
GPR[EPS]-1659780600282
GPR[ESUN]-1659780600282
GPR[SSUN]-1659780600282
507083050
GPR[SPVATF]-1659780600509
GPR[EPVATF]-1659780602256
GPR[SPS]-1659780602256
[2065571] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:474.
GPR[EPS]-1659780603347
GPR[SPVATF]-1659780603348
GPR[EPVATF]-1659780605129
GPR[SPS]-1659780605129
[2068388] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:474.
GPR[EPS]-1659780606164
GPR[ESUN]-1659780606164
GPR[SSUN]-1659780606164
1187751237
GPR[SPVATF]-1659780606445
GPR[EPVATF]-1659780610734
GPR[SPS]-1659780610734
[2074193] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2020.
GPR[EPS]-1659780611970
GPR[SPVATF]-1659780611970
GPR[EPVATF]-1659780617519
GPR[SPS]-1659780617519
[2081477] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2020.
GPR[EPS]-1659780619253
GPR[ESUN]-1659780619253
GPR[SSUN]-1659780619253
1045502179
GPR[ESUN]-1659780619498
GPR[SSUN]-1659780619498
1045502179
GPR[ESUN]-1659780619729
GPR[SSUN]-1659780619729
1045502179
GPR[SPVATF]-1659780619963
GPR[EPVATF]-1659780624213
GPR[SPS]-1659780624213
[2087564] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:823.
GPR[EPS]-1659780625340
GPR[SPVATF]-1659780625341
GPR[EPVATF]-1659780629452
GPR[SPS]-1659780629452
[2092746] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:823.
GPR[EPS]-1659780630522
GPR[ESUN]-1659780630522
GPR[SSUN]-1659780630522
1045502179
GPR[SPVATF]-1659780630777
GPR[EPVATF]-1659780634834
GPR[SPS]-1659780634834
[2098902] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:822.
GPR[EPS]-1659780636678
GPR[ESUN]-1659780636678
GPR[SSUN]-1659780636678
1045502179
GPR[ESUN]-1659780636943
GPR[SSUN]-1659780636943
1045502179
GPR[ESUN]-1659780637174
GPR[SSUN]-1659780637174
1045502179
GPR[SPVATF]-1659780637530
GPR[EPVATF]-1659780641779
GPR[SPS]-1659780641779
[2105835] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:809.
GPR[EPS]-1659780643611
GPR[ESUN]-1659780643611
GPR[SSUN]-1659780643611
1045502179
GPR[SPVATF]-1659780644064
GPR[EPVATF]-1659780648233
GPR[SPS]-1659780648233
[2112190] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:808.
GPR[EPS]-1659780649966
GPR[SPVATF]-1659780649966
GPR[EPVATF]-1659780654894
GPR[SPS]-1659780654894
[2118324] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:808.
GPR[EPS]-1659780656100
GPR[ESUN]-1659780656100
GPR[SSUN]-1659780656100
1045502179
GPR[SPVATF]-1659780656347
GPR[EPVATF]-1659780660342
GPR[SPS]-1659780660342
[2123817] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:807.
GPR[EPS]-1659780661593
GPR[ESUN]-1659780661593
GPR[SSUN]-1659780661593
1045502179
GPR[ESUN]-1659780661854
GPR[SSUN]-1659780661854
1045502179
GPR[SPVATF]-1659780662109
GPR[EPVATF]-1659780667087
GPR[SPS]-1659780667087
[2131926] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:746.
GPR[EPS]-1659780669702
GPR[SPVATF]-1659780669702
GPR[EPVATF]-1659780674297
GPR[SPS]-1659780674297
[2138085] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:746.
GPR[EPS]-1659780675861
GPR[ESUN]-1659780675861
GPR[SSUN]-1659780675861
1045502179
GPR[ESUN]-1659780676328
GPR[SSUN]-1659780676328
1045502179
GPR[ESUN]-1659780676766
GPR[SSUN]-1659780676766
1045502179
GPR[SPVATF]-1659780677153
GPR[EPVATF]-1659780681388
GPR[SPS]-1659780681388
[2146272] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:737.
GPR[EPS]-1659780684048
GPR[ESUN]-1659780684048
GPR[SSUN]-1659780684048
1045502179
GPR[SPVATF]-1659780684300
GPR[EPVATF]-1659780688309
GPR[SPS]-1659780688309
[2152249] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:736.
GPR[EPS]-1659780690025
GPR[ESUN]-1659780690025
GPR[SSUN]-1659780690025
1045502179
GPR[ESUN]-1659780690461
GPR[SSUN]-1659780690461
1045502179
GPR[SPVATF]-1659780690856
GPR[EPVATF]-1659780695056
GPR[SPS]-1659780695056
[2158484] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:148.
GPR[EPS]-1659780696260
GPR[ESUN]-1659780696260
GPR[SSUN]-1659780696260
1045502179
GPR[SPVATF]-1659780696510
GPR[EPVATF]-1659780701300
GPR[SPS]-1659780701300
[2164937] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:144.
GPR[EPS]-1659780702713
GPR[ESUN]-1659780702713
GPR[SSUN]-1659780702713
1045502179
GPR[SPVATF]-1659780703021
GPR[EPVATF]-1659780707025
GPR[SPS]-1659780707025
[2170463] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:143.
GPR[EPS]-1659780708239
GPR[ESUN]-1659780708239
GPR[SSUN]-1659780708239
1045502179
GPR[SPVATF]-1659780708496
GPR[EPVATF]-1659780713184
GPR[SPS]-1659780713184
[2176678] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:142.
GPR[EPS]-1659780714454
GPR[ESUN]-1659780714454
GPR[SSUN]-1659780714454
1045502179
GPR[ESUN]-1659780714715
GPR[SSUN]-1659780714715
1045502179
GPR[ESUN]-1659780714952
GPR[SSUN]-1659780714952
1045502179
GPR[SPVATF]-1659780715204
GPR[EPVATF]-1659780719200
GPR[SPS]-1659780719200
[2182533] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:971.
GPR[EPS]-1659780720309
GPR[ESUN]-1659780720309
GPR[SSUN]-1659780720309
1045502179
GPR[SPVATF]-1659780720559
GPR[EPVATF]-1659780724617
GPR[SPS]-1659780724617
[2188784] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:969.
GPR[EPS]-1659780726560
GPR[ESUN]-1659780726560
GPR[SSUN]-1659780726560
1045502179
GPR[SPVATF]-1659780726829
GPR[EPVATF]-1659780730785
GPR[SPS]-1659780730785
[2194205] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:968.
GPR[EPS]-1659780731981
GPR[SPVATF]-1659780731982
GPR[EPVATF]-1659780735937
GPR[SPS]-1659780735937
[2199356] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:968.
GPR[EPS]-1659780737132
GPR[ESUN]-1659780737133
GPR[SSUN]-1659780737133
1045502179
GPR[ESUN]-1659780737385
GPR[SSUN]-1659780737385
1045502179
GPR[ESUN]-1659780737630
GPR[SSUN]-1659780737630
1045502179
GPR[SPVATF]-1659780737877
GPR[EPVATF]-1659780742754
GPR[SPS]-1659780742754
[2206174] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:690.
GPR[EPS]-1659780743950
GPR[SPVATF]-1659780743950
GPR[EPVATF]-1659780747940
GPR[SPS]-1659780747940
[2211476] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:690.
GPR[EPS]-1659780749252
GPR[ESUN]-1659780749252
GPR[SSUN]-1659780749252
1045502179
GPR[SPVATF]-1659780749554
GPR[EPVATF]-1659780754427
GPR[SPS]-1659780754427
[2217913] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:676.
GPR[EPS]-1659780755690
GPR[SPVATF]-1659780755690
GPR[EPVATF]-1659780759803
GPR[SPS]-1659780759803
[2223165] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:676.
GPR[EPS]-1659780760941
GPR[ESUN]-1659780760941
GPR[SSUN]-1659780760941
1045502179
GPR[SPVATF]-1659780761278
GPR[EPVATF]-1659780765315
GPR[SPS]-1659780765315
[2229023] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:672.
GPR[EPS]-1659780766799
GPR[SPVATF]-1659780766799
GPR[EPVATF]-1659780771773
GPR[SPS]-1659780771773
[2235171] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:672.
GPR[EPS]-1659780772947
GPR[ESUN]-1659780772947
GPR[SSUN]-1659780772947
1045502179
GPR[ESUN]-1659780773194
GPR[SSUN]-1659780773194
1299274573
GPR[SPVATF]-1659780773402
GPR[EPVATF]-1659780777547
GPR[SPS]-1659780777548
[2240811] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:769.
GPR[EPS]-1659780778587
GPR[SPVATF]-1659780778587
GPR[EPVATF]-1659780783505
GPR[SPS]-1659780783505
[2246751] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:769.
GPR[EPS]-1659780784527
GPR[ESUN]-1659780784527
GPR[SSUN]-1659780784527
1299274573
GPR[ESUN]-1659780784749
GPR[SSUN]-1659780784749
1299274573
GPR[ESUN]-1659780784957
GPR[SSUN]-1659780784957
1299274573
GPR[SPVATF]-1659780785162
GPR[EPVATF]-1659780789241
GPR[SPS]-1659780789241
[2252474] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:749.
GPR[EPS]-1659780790250
GPR[SPVATF]-1659780790250
GPR[EPVATF]-1659780794915
GPR[SPS]-1659780794915
[2258197] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:749.
GPR[EPS]-1659780795973
GPR[ESUN]-1659780795973
GPR[SSUN]-1659780795973
1299274573
GPR[SPVATF]-1659780796197
GPR[EPVATF]-1659780800390
GPR[SPS]-1659780800390
[2263725] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:744.
GPR[EPS]-1659780801501
GPR[SPVATF]-1659780801501
GPR[EPVATF]-1659780806236
GPR[SPS]-1659780806236
[2269562] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:744.
GPR[EPS]-1659780807338
GPR[ESUN]-1659780807338
GPR[SSUN]-1659780807338
1299274573
GPR[SPVATF]-1659780807564
GPR[EPVATF]-1659780811575
GPR[SPS]-1659780811575
[2274870] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:743.
GPR[EPS]-1659780812646
GPR[ESUN]-1659780812646
GPR[SSUN]-1659780812646
1299274573
GPR[ESUN]-1659780812866
GPR[SSUN]-1659780812866
1299274573
GPR[ESUN]-1659780813075
GPR[SSUN]-1659780813075
1299274573
GPR[ESUN]-1659780813280
GPR[SSUN]-1659780813280
1299274573
GPR[SPVATF]-1659780813576
GPR[EPVATF]-1659780818302
GPR[SPS]-1659780818302
[2281553] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:734.
GPR[EPS]-1659780819329
GPR[SPVATF]-1659780819329
GPR[EPVATF]-1659780823501
GPR[SPS]-1659780823501
[2286812] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:734.
GPR[EPS]-1659780824588
GPR[ESUN]-1659780824588
GPR[SSUN]-1659780824588
1299274573
GPR[ESUN]-1659780824809
GPR[SSUN]-1659780824809
1045502179
GPR[SPVATF]-1659780825043
GPR[EPVATF]-1659780829798
GPR[SPS]-1659780829798
[2293391] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:540.
GPR[EPS]-1659780831167
GPR[ESUN]-1659780831167
GPR[SSUN]-1659780831167
1045502179
GPR[SPVATF]-1659780831414
GPR[EPVATF]-1659780835564
GPR[SPS]-1659780835564
[2299717] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:539.
GPR[EPS]-1659780837493
GPR[ESUN]-1659780837497
GPR[SSUN]-1659780837497
1045502179
GPR[ESUN]-1659780837754
GPR[SSUN]-1659780837754
602654447
GPR[SPVATF]-1659780837945
GPR[EPVATF]-1659780841453
GPR[SPS]-1659780841453
[2304647] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DefinitionsRemover:61.
GPR[EPS]-1659780842423
GPR[ESUN]-1659780842423
GPR[SSUN]-1659780842423
602654447
GPR[ESUN]-1659780842626
GPR[SSUN]-1659780842626
507083050
GPR[ESUN]-1659780842843
GPR[SSUN]-1659780842843
507083050
GPR[SPVATF]-1659780843064
GPR[EPVATF]-1659780847238
GPR[SPS]-1659780847238
[2310598] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:497.
GPR[EPS]-1659780848374
GPR[ESUN]-1659780848374
GPR[SSUN]-1659780848374
507083050
GPR[ESUN]-1659780848615
GPR[SSUN]-1659780848615
507083050
GPR[ESUN]-1659780848840
GPR[SSUN]-1659780848840
507083050
GPR[SPVATF]-1659780849062
GPR[EPVATF]-1659780853161
GPR[SPS]-1659780853161
[2317304] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:214.
GPR[EPS]-1659780855080
GPR[ESUN]-1659780855080
GPR[SSUN]-1659780855080
507083050
GPR[SPVATF]-1659780855310
GPR[EPVATF]-1659780859554
GPR[SPS]-1659780859554
[2322927] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:205.
GPR[EPS]-1659780860703
GPR[SPVATF]-1659780860703
GPR[EPVATF]-1659780865071
GPR[SPS]-1659780865071
[2329169] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:205.
GPR[EPS]-1659780866945
GPR[ESUN]-1659780866945
GPR[SSUN]-1659780866945
507083050
GPR[SPVATF]-1659780867180
GPR[EPVATF]-1659780871423
GPR[SPS]-1659780871423
[2334772] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:199.
GPR[EPS]-1659780872548
GPR[SPVATF]-1659780872548
GPR[EPVATF]-1659780876771
GPR[SPS]-1659780876771
[2340071] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:199.
GPR[EPS]-1659780877847
GPR[ESUN]-1659780877847
GPR[SSUN]-1659780877847
507083050
GPR[SPVATF]-1659780878069
GPR[EPVATF]-1659780882947
GPR[SPS]-1659780882947
[2346332] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:198.
GPR[EPS]-1659780884108
GPR[ESUN]-1659780884108
GPR[SSUN]-1659780884108
507083050
GPR[ESUN]-1659780884358
GPR[SSUN]-1659780884358
507083050
GPR[ESUN]-1659780884572
GPR[SSUN]-1659780884572
507083050
GPR[ESUN]-1659780884783
GPR[SSUN]-1659780884783
1187751237
GPR[ESUN]-1659780885050
GPR[SSUN]-1659780885050
1187751237
GPR[ESUN]-1659780885325
GPR[SSUN]-1659780885325
1187751237
GPR[SPVATF]-1659780885591
GPR[EPVATF]-1659780888841
GPR[SPS]-1659780888841
[2352198] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2657.
GPR[EPS]-1659780889974
GPR[SPVATF]-1659780889974
GPR[EPVATF]-1659780893245
GPR[SPS]-1659780893245
[2356745] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2657.
GPR[EPS]-1659780894522
GPR[ESUN]-1659780894522
GPR[SSUN]-1659780894522
1187751237
GPR[ESUN]-1659780894800
GPR[SSUN]-1659780894800
1045502179
GPR[ESUN]-1659780895030
GPR[SSUN]-1659780895030
1045502179
GPR[SPVATF]-1659780895270
GPR[EPVATF]-1659780899365
GPR[SPS]-1659780899365
[2362644] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:961.
GPR[EPS]-1659780900420
GPR[SPVATF]-1659780900420
GPR[EPVATF]-1659780904471
GPR[SPS]-1659780904471
[2367731] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:961.
GPR[EPS]-1659780905508
GPR[ESUN]-1659780905508
GPR[SSUN]-1659780905508
1187751237
GPR[ESUN]-1659780905791
GPR[SSUN]-1659780905791
1187751237
GPR[SPVATF]-1659780906058
GPR[EPVATF]-1659780910330
GPR[SPS]-1659780910330
[2373797] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1919.
GPR[EPS]-1659780911573
GPR[ESUN]-1659780911573
GPR[SSUN]-1659780911573
-534884160
GPR[ESUN]-1659780911883
GPR[SSUN]-1659780911883
-534884160
GPR[SPVATF]-1659780912174
GPR[EPVATF]-1659780917372
GPR[SPS]-1659780917372
[2381203] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:931.
GPR[EPS]-1659780918979
GPR[ESUN]-1659780918979
GPR[SSUN]-1659780918979
-1684326478
GPR[SPVATF]-1659780919215
GPR[EPVATF]-1659780921269
GPR[SPS]-1659780921269
[2384468] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique$InlineRenamer:541.
GPR[EPS]-1659780922244
GPR[ESUN]-1659780922244
GPR[SSUN]-1659780922244
1045502179
GPR[SPVATF]-1659780922502
GPR[EPVATF]-1659780926607
GPR[SPS]-1659780926607
[2389885] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:983.
GPR[EPS]-1659780927661
GPR[SPVATF]-1659780927662
GPR[EPVATF]-1659780931933
GPR[SPS]-1659780931933
[2395293] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:983.
GPR[EPS]-1659780933069
GPR[ESUN]-1659780933069
GPR[SSUN]-1659780933069
1045502179
GPR[ESUN]-1659780933323
GPR[SSUN]-1659780933323
1045502179
GPR[ESUN]-1659780933555
GPR[SSUN]-1659780933555
1045502179
GPR[SPVATF]-1659780933806
GPR[EPVATF]-1659780938634
GPR[SPS]-1659780938634
[2402319] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:535.
GPR[EPS]-1659780940095
GPR[SPVATF]-1659780940096
GPR[EPVATF]-1659780944161
GPR[SPS]-1659780944161
[2407590] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:535.
GPR[EPS]-1659780945366
GPR[ESUN]-1659780945366
GPR[SSUN]-1659780945366
1045502179
GPR[ESUN]-1659780945611
GPR[SSUN]-1659780945611
1045502179
GPR[SPVATF]-1659780945839
GPR[EPVATF]-1659780950598
GPR[SPS]-1659780950598
[2414023] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:521.
GPR[EPS]-1659780951799
GPR[SPVATF]-1659780951800
GPR[EPVATF]-1659780956157
GPR[SPS]-1659780956157
[2419676] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:521.
GPR[EPS]-1659780957452
GPR[ESUN]-1659780957452
GPR[SSUN]-1659780957452
1045502179
GPR[ESUN]-1659780957693
GPR[SSUN]-1659780957693
1045502179
GPR[SPVATF]-1659780957926
GPR[EPVATF]-1659780962697
GPR[SPS]-1659780962697
[2426162] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:510.
GPR[EPS]-1659780963938
GPR[SPVATF]-1659780963938
GPR[EPVATF]-1659780967953
GPR[SPS]-1659780967953
[2431464] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:510.
GPR[EPS]-1659780969240
GPR[ESUN]-1659780969240
GPR[SSUN]-1659780969240
1045502179
GPR[SPVATF]-1659780969527
GPR[EPVATF]-1659780974422
GPR[SPS]-1659780974422
[2438436] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:501.
GPR[EPS]-1659780976212
GPR[SPVATF]-1659780976212
GPR[EPVATF]-1659780980568
GPR[SPS]-1659780980568
[2444729] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:501.
GPR[EPS]-1659780982505
GPR[ESUN]-1659780982505
GPR[SSUN]-1659780982505
1045502179
GPR[SPVATF]-1659780982793
GPR[EPVATF]-1659780987559
GPR[SPS]-1659780987559
[2451149] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:499.
GPR[EPS]-1659780988925
GPR[ESUN]-1659780988925
GPR[SSUN]-1659780988925
1045502179
GPR[ESUN]-1659780989430
GPR[SSUN]-1659780989430
1045502179
GPR[ESUN]-1659780989831
GPR[SSUN]-1659780989831
1299274573
GPR[SPVATF]-1659780990368
GPR[EPVATF]-1659780995217
GPR[SPS]-1659780995217
[2460256] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:203.
GPR[EPS]-1659780998032
GPR[ESUN]-1659780998032
GPR[SSUN]-1659780998032
1299274573
GPR[SPVATF]-1659780998514
GPR[EPVATF]-1659781002868
GPR[SPS]-1659781002868
[2466116] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:197.
GPR[EPS]-1659781003892
GPR[SPVATF]-1659781003892
GPR[EPVATF]-1659781008012
GPR[SPS]-1659781008012
[2471973] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:197.
GPR[EPS]-1659781009749
GPR[ESUN]-1659781009750
GPR[SSUN]-1659781009750
1299274573
GPR[ESUN]-1659781010270
GPR[SSUN]-1659781010270
1299274573
GPR[SPVATF]-1659781010614
GPR[EPVATF]-1659781015034
GPR[SPS]-1659781015034
[2479840] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:184.
GPR[EPS]-1659781017616
GPR[SPVATF]-1659781017616
GPR[EPVATF]-1659781021905
GPR[SPS]-1659781021906
[2485980] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:184.
GPR[EPS]-1659781023757
GPR[ESUN]-1659781023757
GPR[SSUN]-1659781023757
1045502179
GPR[ESUN]-1659781024164
GPR[SSUN]-1659781024164
507083050
GPR[SPVATF]-1659781024446
GPR[EPVATF]-1659781026305
GPR[SPS]-1659781026305
[2489615] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:311.
GPR[EPS]-1659781027391
GPR[ESUN]-1659781027391
GPR[SSUN]-1659781027391
GPR[ESUN]-1659781027391
GPR[SSUN]-1659781027391
GPR[ESUN]-1659781027391
GPR[SSUN]-1659781027391
1299274573
GPR[SPVATF]-1659781027637
GPR[EPVATF]-1659781031887
GPR[SPS]-1659781031887
[2495185] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:217.
GPR[EPS]-1659781032961
GPR[SPVATF]-1659781032961
GPR[EPVATF]-1659781037217
GPR[SPS]-1659781037217
[2501338] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:217.
GPR[EPS]-1659781039114
GPR[ESUN]-1659781039114
GPR[SSUN]-1659781039114
1299274573
GPR[SPVATF]-1659781039352
GPR[EPVATF]-1659781043605
GPR[SPS]-1659781043605
[2507079] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:176.
GPR[EPS]-1659781044855
GPR[SPVATF]-1659781044855
GPR[EPVATF]-1659781049070
GPR[SPS]-1659781049070
[2512509] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:176.
GPR[EPS]-1659781050285
GPR[ESUN]-1659781050285
GPR[SSUN]-1659781050285
1045502179
GPR[ESUN]-1659781050555
GPR[SSUN]-1659781050555
1045502179
GPR[ESUN]-1659781050806
GPR[SSUN]-1659781050806
1045502179
GPR[ESUN]-1659781051051
GPR[SSUN]-1659781051051
1045502179
GPR[ESUN]-1659781051300
GPR[SSUN]-1659781051300
1045502179
GPR[SPVATF]-1659781051546
GPR[EPVATF]-1659781056389
GPR[SPS]-1659781056389
[2519980] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:669.
GPR[EPS]-1659781057756
GPR[SPVATF]-1659781057757
GPR[EPVATF]-1659781061906
GPR[SPS]-1659781061906
[2525346] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:669.
GPR[EPS]-1659781063122
GPR[ESUN]-1659781063122
GPR[SSUN]-1659781063122
1045502179
GPR[ESUN]-1659781063394
GPR[SSUN]-1659781063394
1045502179
GPR[SPVATF]-1659781063651
GPR[EPVATF]-1659781068569
GPR[SPS]-1659781068569
[2532088] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:667.
GPR[EPS]-1659781069864
GPR[ESUN]-1659781069864
GPR[SSUN]-1659781069864
1045502179
GPR[SPVATF]-1659781070137
GPR[EPVATF]-1659781074403
GPR[SPS]-1659781074403
[2538593] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:139.
GPR[EPS]-1659781076369
GPR[SPVATF]-1659781076369
GPR[EPVATF]-1659781080502
GPR[SPS]-1659781080502
[2543987] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:139.
GPR[EPS]-1659781081763
GPR[ESUN]-1659781081763
GPR[SSUN]-1659781081763
1045502179
GPR[SPVATF]-1659781082032
GPR[EPVATF]-1659781086069
GPR[SPS]-1659781086069
[2549897] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:138.
GPR[EPS]-1659781087674
GPR[ESUN]-1659781087674
GPR[SSUN]-1659781087674
1045502179
GPR[SPVATF]-1659781087943
GPR[EPVATF]-1659781092725
GPR[SPS]-1659781092725
[2556197] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:136.
GPR[EPS]-1659781093973
GPR[ESUN]-1659781093973
GPR[SSUN]-1659781093973
1045502179
GPR[ESUN]-1659781094233
GPR[SSUN]-1659781094233
80988634
GPR[ESUN]-1659781094419
GPR[SSUN]-1659781094419
1045502179
GPR[SPVATF]-1659781094663
GPR[EPVATF]-1659781098665
GPR[SPS]-1659781098665
[2561948] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$CallVisitor:415.
GPR[EPS]-1659781099724
GPR[ESUN]-1659781099724
GPR[SSUN]-1659781099724
1045502179
GPR[SPVATF]-1659781099972
GPR[EPVATF]-1659781103965
GPR[SPS]-1659781103966
[2567317] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:492.
GPR[EPS]-1659781105094
GPR[SPVATF]-1659781105094
GPR[EPVATF]-1659781109061
GPR[SPS]-1659781109061
[2573244] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:492.
GPR[EPS]-1659781111020
GPR[ESUN]-1659781111020
GPR[SSUN]-1659781111020
1045502179
GPR[ESUN]-1659781111279
GPR[SSUN]-1659781111279
1045502179
GPR[SPVATF]-1659781111515
GPR[EPVATF]-1659781115565
GPR[SPS]-1659781115565
[2578994] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:487.
GPR[EPS]-1659781116771
GPR[ESUN]-1659781116771
GPR[SSUN]-1659781116771
1045502179
GPR[ESUN]-1659781117022
GPR[SSUN]-1659781117022
1045502179
GPR[SPVATF]-1659781117251
GPR[EPVATF]-1659781121255
GPR[SPS]-1659781121255
[2584624] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:994.
GPR[EPS]-1659781122400
GPR[ESUN]-1659781122400
GPR[SSUN]-1659781122400
1045502179
GPR[ESUN]-1659781122648
GPR[SSUN]-1659781122648
1045502179
GPR[SPVATF]-1659781122874
GPR[EPVATF]-1659781127580
GPR[SPS]-1659781127580
[2590967] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:287.
GPR[EPS]-1659781128743
GPR[SPVATF]-1659781128744
GPR[EPVATF]-1659781132826
GPR[SPS]-1659781132826
[2596188] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:287.
GPR[EPS]-1659781133964
GPR[ESUN]-1659781133964
GPR[SSUN]-1659781133964
1045502179
GPR[SPVATF]-1659781134288
GPR[EPVATF]-1659781139105
GPR[SPS]-1659781139105
[2602607] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:283.
GPR[EPS]-1659781140383
GPR[SPVATF]-1659781140384
GPR[EPVATF]-1659781144230
GPR[SPS]-1659781144230
[2607520] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:283.
GPR[EPS]-1659781145296
GPR[ESUN]-1659781145296
GPR[SSUN]-1659781145296
1045502179
GPR[ESUN]-1659781145541
GPR[SSUN]-1659781145541
1045502179
GPR[SPVATF]-1659781145773
GPR[EPVATF]-1659781149776
GPR[SPS]-1659781149776
[2613215] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:277.
GPR[EPS]-1659781150991
GPR[SPVATF]-1659781151002
GPR[EPVATF]-1659781155060
GPR[SPS]-1659781155060
[2619239] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:277.
GPR[EPS]-1659781157015
GPR[ESUN]-1659781157015
GPR[SSUN]-1659781157015
1045502179
GPR[ESUN]-1659781157266
GPR[SSUN]-1659781157266
1045502179
GPR[ESUN]-1659781157506
GPR[SSUN]-1659781157506
1045502179
GPR[SPVATF]-1659781157736
GPR[EPVATF]-1659781161745
GPR[SPS]-1659781161745
[2625187] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:272.
GPR[EPS]-1659781162963
GPR[ESUN]-1659781162963
GPR[SSUN]-1659781162963
1852376448
GPR[SPVATF]-1659781163186
GPR[EPVATF]-1659781167169
GPR[SPS]-1659781167169
[2630515] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:192.
GPR[EPS]-1659781168291
GPR[ESUN]-1659781168291
GPR[SSUN]-1659781168291
1852376448
GPR[ESUN]-1659781168513
GPR[SSUN]-1659781168513
1852376448
GPR[SPVATF]-1659781168725
GPR[EPVATF]-1659781173495
GPR[SPS]-1659781173495
[2636810] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls:79.
GPR[EPS]-1659781174586
GPR[SPVATF]-1659781174586
GPR[EPVATF]-1659781178554
GPR[SPS]-1659781178554
[2641827] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls:79.
GPR[EPS]-1659781179603
GPR[ESUN]-1659781179603
GPR[SSUN]-1659781179603
1852376448
GPR[ESUN]-1659781179825
GPR[SSUN]-1659781179825
1045502179
GPR[SPVATF]-1659781180062
GPR[EPVATF]-1659781185038
GPR[SPS]-1659781185038
[2648404] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:436.
GPR[EPS]-1659781186181
GPR[SPVATF]-1659781186181
GPR[EPVATF]-1659781190267
GPR[SPS]-1659781190267
[2653571] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:436.
GPR[EPS]-1659781191347
GPR[ESUN]-1659781191347
GPR[SSUN]-1659781191347
1299274573
GPR[ESUN]-1659781191570
GPR[SSUN]-1659781191570
1299274573
GPR[SPVATF]-1659781191778
GPR[EPVATF]-1659781195780
GPR[SPS]-1659781195780
[2659937] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:911.
GPR[EPS]-1659781197713
GPR[ESUN]-1659781197713
GPR[SSUN]-1659781197713
1299274573
GPR[SPVATF]-1659781197934
GPR[EPVATF]-1659781201954
GPR[SPS]-1659781201954
[2666068] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:910.
GPR[EPS]-1659781203844
GPR[ESUN]-1659781203844
GPR[SSUN]-1659781203845
1045502179
GPR[ESUN]-1659781204096
GPR[SSUN]-1659781204096
1045502179
GPR[ESUN]-1659781204328
GPR[SSUN]-1659781204328
1299274573
GPR[ESUN]-1659781204536
GPR[SSUN]-1659781204536
1299274573
GPR[ESUN]-1659781204749
GPR[SSUN]-1659781204749
1299274573
GPR[ESUN]-1659781204955
GPR[SSUN]-1659781204955
1299274573
GPR[SPVATF]-1659781205161
GPR[EPVATF]-1659781209279
GPR[SPS]-1659781209280
[2672600] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:132.
GPR[EPS]-1659781210376
GPR[ESUN]-1659781210382
GPR[SSUN]-1659781210382
1299274573
GPR[ESUN]-1659781210731
GPR[SSUN]-1659781210731
1299274573
GPR[ESUN]-1659781210936
GPR[SSUN]-1659781210936
1045502179
GPR[SPVATF]-1659781211164
GPR[EPVATF]-1659781215203
GPR[SPS]-1659781215203
[2678593] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:354.
GPR[EPS]-1659781216369
GPR[SPVATF]-1659781216401
GPR[EPVATF]-1659781221265
GPR[SPS]-1659781221265
[2684633] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:354.
GPR[EPS]-1659781222409
GPR[ESUN]-1659781222409
GPR[SSUN]-1659781222409
1045502179
GPR[ESUN]-1659781222744
GPR[SSUN]-1659781222744
1045502179
GPR[SPVATF]-1659781222974
GPR[EPVATF]-1659781226358
GPR[SPS]-1659781226358
[2689747] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$NamedFunction:1039.
GPR[EPS]-1659781227523
GPR[ESUN]-1659781227523
GPR[SSUN]-1659781227523
1045502179
GPR[SPVATF]-1659781227767
GPR[EPVATF]-1659781232591
GPR[SPS]-1659781232591
[2695939] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:349.
GPR[EPS]-1659781233715
GPR[SPVATF]-1659781233715
GPR[EPVATF]-1659781237761
GPR[SPS]-1659781237761
[2701193] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:349.
GPR[EPS]-1659781238969
GPR[ESUN]-1659781238969
GPR[SSUN]-1659781238970
1045502179
GPR[SPVATF]-1659781239212
GPR[EPVATF]-1659781244064
GPR[SPS]-1659781244064
[2707490] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$CallVisitor:414.
GPR[EPS]-1659781245266
GPR[SPVATF]-1659781245266
GPR[EPVATF]-1659781249325
GPR[SPS]-1659781249325
[2713406] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$CallVisitor:414.
GPR[EPS]-1659781251182
GPR[ESUN]-1659781251182
GPR[SSUN]-1659781251183
1045502179
GPR[ESUN]-1659781251429
GPR[SSUN]-1659781251429
1187751237
GPR[ESUN]-1659781251698
GPR[SSUN]-1659781251698
1187751237
GPR[ESUN]-1659781251962
GPR[SSUN]-1659781251962
1045502179
GPR[SPVATF]-1659781252191
GPR[EPVATF]-1659781256211
GPR[SPS]-1659781256211
[2719589] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$CallVisitor:411.
GPR[EPS]-1659781257365
GPR[SPVATF]-1659781257365
GPR[EPVATF]-1659781261413
GPR[SPS]-1659781261413
[2724861] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$CallVisitor:411.
GPR[EPS]-1659781262637
GPR[ESUN]-1659781262637
GPR[SSUN]-1659781262637
1045502179
GPR[SPVATF]-1659781262889
GPR[EPVATF]-1659781267741
GPR[SPS]-1659781267741
[2731203] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$CallVisitor:397.
GPR[EPS]-1659781268979
GPR[SPVATF]-1659781268979
GPR[EPVATF]-1659781273102
GPR[SPS]-1659781273102
[2736618] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$CallVisitor:397.
GPR[EPS]-1659781274394
GPR[ESUN]-1659781274394
GPR[SSUN]-1659781274394
1045502179
GPR[ESUN]-1659781274635
GPR[SSUN]-1659781274635
1045502179
GPR[ESUN]-1659781274867
GPR[SSUN]-1659781274867
1852376448
GPR[SPVATF]-1659781275079
GPR[EPVATF]-1659781279031
GPR[SPS]-1659781279031
[2742227] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:190.
GPR[EPS]-1659781280003
GPR[SPVATF]-1659781280003
GPR[EPVATF]-1659781285052
GPR[SPS]-1659781285052
[2748314] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:190.
GPR[EPS]-1659781286090
GPR[ESUN]-1659781286090
GPR[SSUN]-1659781286090
1852376448
GPR[SPVATF]-1659781286308
GPR[EPVATF]-1659781290356
GPR[SPS]-1659781290356
[2753665] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:189.
GPR[EPS]-1659781291441
GPR[ESUN]-1659781291441
GPR[SSUN]-1659781291441
1852376448
GPR[ESUN]-1659781291664
GPR[SSUN]-1659781291664
1852376448
GPR[SPVATF]-1659781291873
GPR[EPVATF]-1659781296824
GPR[SPS]-1659781296824
[2761356] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:187.
GPR[EPS]-1659781299132
GPR[ESUN]-1659781299132
GPR[SSUN]-1659781299132
1045502179
GPR[ESUN]-1659781299592
GPR[SSUN]-1659781299592
1045502179
GPR[ESUN]-1659781299991
GPR[SSUN]-1659781299991
1045502179
GPR[SPVATF]-1659781300508
GPR[EPVATF]-1659781305148
GPR[SPS]-1659781305148
[2768991] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:915.
GPR[EPS]-1659781306767
GPR[ESUN]-1659781306767
GPR[SSUN]-1659781306767
1045502179
GPR[SPVATF]-1659781307333
GPR[EPVATF]-1659781311683
GPR[SPS]-1659781311683
[2775034] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:914.
GPR[EPS]-1659781312810
GPR[ESUN]-1659781312810
GPR[SSUN]-1659781312810
1045502179
GPR[ESUN]-1659781313056
GPR[SSUN]-1659781313056
1045502179
GPR[ESUN]-1659781313287
GPR[SSUN]-1659781313287
1045502179
GPR[ESUN]-1659781313515
GPR[SSUN]-1659781313515
1045502179
GPR[SPVATF]-1659781313745
GPR[EPVATF]-1659781317740
GPR[SPS]-1659781317740
[2782713] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:656.
GPR[EPS]-1659781320489
GPR[SPVATF]-1659781320489
GPR[EPVATF]-1659781324765
GPR[SPS]-1659781324766
[2788746] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:656.
GPR[EPS]-1659781326522
GPR[ESUN]-1659781326522
GPR[SSUN]-1659781326522
1045502179
GPR[ESUN]-1659781326947
GPR[SSUN]-1659781326947
1045502179
GPR[SPVATF]-1659781327328
GPR[EPVATF]-1659781331434
GPR[SPS]-1659781331434
[2794989] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:654.
GPR[EPS]-1659781332765
GPR[ESUN]-1659781332766
GPR[SSUN]-1659781332766
1045502179
GPR[SPVATF]-1659781333005
GPR[EPVATF]-1659781337924
GPR[SPS]-1659781337924
[2803804] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:433.
GPR[EPS]-1659781341580
GPR[ESUN]-1659781341580
GPR[SSUN]-1659781341580
1045502179
GPR[SPVATF]-1659781342336
GPR[EPVATF]-1659781346795
GPR[SPS]-1659781346795
[2810263] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:430.
GPR[EPS]-1659781348039
GPR[SPVATF]-1659781348039
GPR[EPVATF]-1659781352863
GPR[SPS]-1659781352863
[2816320] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:430.
GPR[EPS]-1659781354096
GPR[ESUN]-1659781354096
GPR[SSUN]-1659781354096
1045502179
GPR[SPVATF]-1659781354345
GPR[EPVATF]-1659781358338
GPR[SPS]-1659781358338
[2821748] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:429.
GPR[EPS]-1659781359524
GPR[ESUN]-1659781359524
GPR[SSUN]-1659781359524
1045502179
GPR[ESUN]-1659781359777
GPR[SSUN]-1659781359777
1045502179
GPR[SPVATF]-1659781360013
GPR[EPVATF]-1659781364675
GPR[SPS]-1659781364675
[2828083] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:338.
GPR[EPS]-1659781365859
GPR[SPVATF]-1659781365860
GPR[EPVATF]-1659781370181
GPR[SPS]-1659781370181
[2833604] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:338.
GPR[EPS]-1659781371380
GPR[ESUN]-1659781371380
GPR[SSUN]-1659781371380
1045502179
GPR[ESUN]-1659781371641
GPR[SSUN]-1659781371641
1045502179
GPR[ESUN]-1659781372555
GPR[SSUN]-1659781372555
1045502179
GPR[SPVATF]-1659781372808
GPR[EPVATF]-1659781376867
GPR[SPS]-1659781376867
[2840301] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:301.
GPR[EPS]-1659781378077
GPR[SPVATF]-1659781378077
GPR[EPVATF]-1659781382102
GPR[SPS]-1659781382102
[2845518] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:301.
GPR[EPS]-1659781383294
GPR[ESUN]-1659781383294
GPR[SSUN]-1659781383294
1045502179
GPR[SPVATF]-1659781383550
GPR[EPVATF]-1659781388329
GPR[SPS]-1659781388329
[2851822] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:271.
GPR[EPS]-1659781389598
GPR[SPVATF]-1659781389598
GPR[EPVATF]-1659781393659
GPR[SPS]-1659781393659
[2857837] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:271.
GPR[EPS]-1659781395613
GPR[ESUN]-1659781395614
GPR[SSUN]-1659781395614
1045502179
GPR[SPVATF]-1659781395882
GPR[EPVATF]-1659781399930
GPR[SPS]-1659781399930
[2863707] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:265.
GPR[EPS]-1659781401483
GPR[SPVATF]-1659781401483
GPR[EPVATF]-1659781405407
GPR[SPS]-1659781405407
[2868815] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:265.
GPR[EPS]-1659781406591
GPR[ESUN]-1659781407326
GPR[SSUN]-1659781407326
1045502179
GPR[SPVATF]-1659781407579
GPR[EPVATF]-1659781411457
GPR[SPS]-1659781411457
[2874970] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:257.
GPR[EPS]-1659781412746
GPR[SPVATF]-1659781412746
GPR[EPVATF]-1659781416662
GPR[SPS]-1659781416662
[2880098] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:257.
GPR[EPS]-1659781417874
GPR[ESUN]-1659781417874
GPR[SSUN]-1659781417874
1045502179
GPR[SPVATF]-1659781419143
GPR[EPVATF]-1659781423067
GPR[SPS]-1659781423067
[2886561] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:256.
GPR[EPS]-1659781424337
GPR[ESUN]-1659781424337
GPR[SSUN]-1659781424337
1045502179
GPR[SPVATF]-1659781424593
GPR[EPVATF]-1659781428482
GPR[SPS]-1659781428482
[2892620] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:254.
GPR[EPS]-1659781430396
GPR[SPVATF]-1659781430397
GPR[EPVATF]-1659781434304
GPR[SPS]-1659781434304
[2897696] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:254.
GPR[EPS]-1659781435472
GPR[ESUN]-1659781435472
GPR[SSUN]-1659781435472
1045502179
GPR[SPVATF]-1659781435803
GPR[EPVATF]-1659781439745
GPR[SPS]-1659781439745
[2903205] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:250.
GPR[EPS]-1659781440981
GPR[SPVATF]-1659781440981
GPR[EPVATF]-1659781445708
GPR[SPS]-1659781445708
[2909121] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:250.
GPR[EPS]-1659781446897
GPR[ESUN]-1659781446897
GPR[SSUN]-1659781446897
1045502179
GPR[ESUN]-1659781447150
GPR[SSUN]-1659781447150
1045502179
GPR[ESUN]-1659781447449
GPR[SSUN]-1659781447449
1045502179
GPR[SPVATF]-1659781447676
GPR[EPVATF]-1659781451638
GPR[SPS]-1659781451639
[2915790] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:123.
GPR[EPS]-1659781453566
GPR[SPVATF]-1659781453567
GPR[EPVATF]-1659781457492
GPR[SPS]-1659781457492
[2920888] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:123.
GPR[EPS]-1659781458664
GPR[ESUN]-1659781458664
GPR[SSUN]-1659781458664
1045502179
GPR[SPVATF]-1659781459010
GPR[EPVATF]-1659781462961
GPR[SPS]-1659781462961
[2926471] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:122.
GPR[EPS]-1659781464247
GPR[ESUN]-1659781464247
GPR[SSUN]-1659781464247
1045502179
GPR[SPVATF]-1659781464491
GPR[EPVATF]-1659781469182
GPR[SPS]-1659781469182
[2932584] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:120.
GPR[EPS]-1659781470360
GPR[ESUN]-1659781470360
GPR[SSUN]-1659781470360
1045502179
GPR[ESUN]-1659781470609
GPR[SSUN]-1659781470609
1045502179
GPR[SPVATF]-1659781470909
GPR[EPVATF]-1659781474930
GPR[SPS]-1659781474930
[2938317] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:101.
GPR[EPS]-1659781476093
GPR[ESUN]-1659781476093
GPR[SSUN]-1659781476093
1045502179
GPR[SPVATF]-1659781477089
GPR[EPVATF]-1659781481069
GPR[SPS]-1659781481069
[2944411] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:100.
GPR[EPS]-1659781482188
GPR[ESUN]-1659781482188
GPR[SSUN]-1659781482188
1045502179
GPR[SPVATF]-1659781482429
GPR[EPVATF]-1659781486451
GPR[SPS]-1659781486451
[2949767] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:99.
GPR[EPS]-1659781487543
GPR[SPVATF]-1659781487544
GPR[EPVATF]-1659781492291
GPR[SPS]-1659781492291
[2955674] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:99.
GPR[EPS]-1659781493450
GPR[ESUN]-1659781493450
GPR[SSUN]-1659781493450
1045502179
GPR[ESUN]-1659781493698
GPR[SSUN]-1659781493698
1045502179
GPR[ESUN]-1659781493930
GPR[SSUN]-1659781493930
1045502179
GPR[SPVATF]-1659781494225
GPR[EPVATF]-1659781498112
GPR[SPS]-1659781498112
[2961491] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$CallVisitor:390.
GPR[EPS]-1659781499267
GPR[ESUN]-1659781499267
GPR[SSUN]-1659781499267
1045502179
GPR[SPVATF]-1659781500299
GPR[EPVATF]-1659781504272
GPR[SPS]-1659781504272
[2967694] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:553.
GPR[EPS]-1659781505470
GPR[ESUN]-1659781505470
GPR[SSUN]-1659781505470
1045502179
GPR[SPVATF]-1659781505716
GPR[EPVATF]-1659781509739
GPR[SPS]-1659781509739
[2973164] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:552.
GPR[EPS]-1659781510940
GPR[SPVATF]-1659781510940
GPR[EPVATF]-1659781515768
GPR[SPS]-1659781515768
[2979231] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:552.
GPR[EPS]-1659781517007
GPR[ESUN]-1659781517007
GPR[SSUN]-1659781517007
1045502179
GPR[SPVATF]-1659781517285
GPR[EPVATF]-1659781521316
GPR[SPS]-1659781521316
[2984694] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:550.
GPR[EPS]-1659781522470
GPR[ESUN]-1659781522470
GPR[SSUN]-1659781522470
1045502179
GPR[ESUN]-1659781522717
GPR[SSUN]-1659781522717
1045502179
GPR[SPVATF]-1659781522948
GPR[EPVATF]-1659781527618
GPR[SPS]-1659781527618
[2991172] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:480.
GPR[EPS]-1659781528948
GPR[ESUN]-1659781528948
GPR[SSUN]-1659781528948
1045502179
GPR[SPVATF]-1659781529199
GPR[EPVATF]-1659781533315
GPR[SPS]-1659781533315
[2996751] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:479.
GPR[EPS]-1659781534527
GPR[SPVATF]-1659781534527
GPR[EPVATF]-1659781539287
GPR[SPS]-1659781539287
[3002678] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:479.
GPR[EPS]-1659781540454
GPR[ESUN]-1659781540454
GPR[SSUN]-1659781540454
1045502179
GPR[SPVATF]-1659781540697
GPR[EPVATF]-1659781544678
GPR[SPS]-1659781544678
[3008097] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:478.
GPR[EPS]-1659781545873
GPR[ESUN]-1659781545873
GPR[SSUN]-1659781545873
1852376448
GPR[ESUN]-1659781546092
GPR[SSUN]-1659781546092
1045502179
GPR[ESUN]-1659781546324
GPR[SSUN]-1659781546324
1045502179
GPR[SPVATF]-1659781546553
GPR[EPVATF]-1659781550182
GPR[SPS]-1659781550182
[3013519] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:923.
GPR[EPS]-1659781551296
GPR[ESUN]-1659781551296
GPR[SSUN]-1659781551296
1045502179
GPR[SPVATF]-1659781551566
GPR[EPVATF]-1659781554608
GPR[SPS]-1659781554608
[3017875] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:790.
GPR[EPS]-1659781555651
GPR[ESUN]-1659781555651
GPR[SSUN]-1659781555651
1045502179
GPR[SPVATF]-1659781555896
GPR[EPVATF]-1659781558752
GPR[SPS]-1659781558752
[3022155] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:768.
GPR[EPS]-1659781559931
GPR[ESUN]-1659781559931
GPR[SSUN]-1659781559931
1045502179
GPR[ESUN]-1659781560175
GPR[SSUN]-1659781560175
1045502179
GPR[SPVATF]-1659781560406
GPR[EPVATF]-1659781563175
GPR[SPS]-1659781563175
[3026477] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:756.
GPR[EPS]-1659781564253
GPR[SPVATF]-1659781564253
GPR[EPVATF]-1659781567171
GPR[SPS]-1659781567171
[3030443] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:756.
GPR[EPS]-1659781568219
GPR[ESUN]-1659781568219
GPR[SSUN]-1659781568220
1045502179
GPR[ESUN]-1659781568483
GPR[SSUN]-1659781568483
1045502179
GPR[SPVATF]-1659781568714
GPR[EPVATF]-1659781571545
GPR[SPS]-1659781571545
[3034848] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:754.
GPR[EPS]-1659781572624
GPR[ESUN]-1659781572625
GPR[SSUN]-1659781572625
1852376448
GPR[ESUN]-1659781572864
GPR[SSUN]-1659781572864
1045502179
GPR[ESUN]-1659781573094
GPR[SSUN]-1659781573094
1045502179
GPR[SPVATF]-1659781573323
GPR[EPVATF]-1659781575291
GPR[SPS]-1659781575291
[3038601] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:882.
GPR[EPS]-1659781576377
GPR[ESUN]-1659781576377
GPR[SSUN]-1659781576377
1045502179
GPR[SPVATF]-1659781576619
GPR[EPVATF]-1659781578556
GPR[SPS]-1659781578556
[3041866] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:294.
GPR[EPS]-1659781579642
GPR[SPVATF]-1659781579642
GPR[EPVATF]-1659781581685
GPR[SPS]-1659781581685
[3045004] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:294.
GPR[EPS]-1659781582780
GPR[ESUN]-1659781582780
GPR[SSUN]-1659781582780
1045502179
GPR[SPVATF]-1659781583029
GPR[EPVATF]-1659781585066
GPR[SPS]-1659781585066
[3048421] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:288.
GPR[EPS]-1659781586197
GPR[ESUN]-1659781586197
GPR[SSUN]-1659781586197
1045502179
GPR[SPVATF]-1659781586436
GPR[EPVATF]-1659781590433
GPR[SPS]-1659781590433
[3053941] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:438.
GPR[EPS]-1659781591717
GPR[ESUN]-1659781591717
GPR[SSUN]-1659781591717
1045502179
GPR[SPVATF]-1659781591952
GPR[EPVATF]-1659781596087
GPR[SPS]-1659781596087
[3059451] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$CallVisitor:398.
GPR[EPS]-1659781597227
GPR[ESUN]-1659781597227
GPR[SSUN]-1659781597227
80988634
GPR[ESUN]-1659781597409
GPR[SSUN]-1659781597409
1187751237
GPR[SPVATF]-1659781597686
GPR[EPVATF]-1659781602324
GPR[SPS]-1659781602324
[3065855] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:920.
GPR[EPS]-1659781603631
GPR[SPVATF]-1659781603632
GPR[EPVATF]-1659781608518
GPR[SPS]-1659781608518
[3073053] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:920.
GPR[EPS]-1659781610830
GPR[ESUN]-1659781610830
GPR[SSUN]-1659781610830
1045502179
GPR[SPVATF]-1659781611091
GPR[EPVATF]-1659781615919
GPR[SPS]-1659781615919
[3079329] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:228.
GPR[EPS]-1659781617105
GPR[SPVATF]-1659781617105
GPR[EPVATF]-1659781621199
GPR[SPS]-1659781621199
[3084535] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:228.
GPR[EPS]-1659781622311
GPR[ESUN]-1659781622311
GPR[SSUN]-1659781622311
1045502179
GPR[SPVATF]-1659781622554
GPR[EPVATF]-1659781627299
GPR[SPS]-1659781627299
[3090731] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:218.
GPR[EPS]-1659781628507
GPR[SPVATF]-1659781628507
GPR[EPVATF]-1659781632563
GPR[SPS]-1659781632563
[3095874] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:218.
GPR[EPS]-1659781633650
GPR[ESUN]-1659781633650
GPR[SSUN]-1659781633650
1045502179
GPR[ESUN]-1659781633886
GPR[SSUN]-1659781633886
1299274573
GPR[SPVATF]-1659781634094
GPR[EPVATF]-1659781638875
GPR[SPS]-1659781638875
[3102280] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:522.
GPR[EPS]-1659781640056
GPR[SPVATF]-1659781640056
GPR[EPVATF]-1659781644742
GPR[SPS]-1659781644742
[3109439] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:522.
GPR[EPS]-1659781647215
GPR[ESUN]-1659781647215
GPR[SSUN]-1659781647215
507083050
GPR[SPVATF]-1659781647563
GPR[EPVATF]-1659781649137
GPR[SPS]-1659781649137
[3113095] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:283.
GPR[EPS]-1659781650871
GPR[ESUN]-1659781650871
GPR[SSUN]-1659781650871
602654447
GPR[ESUN]-1659781651226
GPR[SSUN]-1659781651226
1045502179
GPR[ESUN]-1659781651457
GPR[SSUN]-1659781651457
1045502179
GPR[SPVATF]-1659781651696
GPR[EPVATF]-1659781655751
GPR[SPS]-1659781655751
[3119250] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:181.
GPR[EPS]-1659781657026
GPR[ESUN]-1659781657026
GPR[SSUN]-1659781657026
1045502179
GPR[SPVATF]-1659781657276
GPR[EPVATF]-1659781661180
GPR[SPS]-1659781661180
[3125791] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:220.
GPR[EPS]-1659781663567
GPR[SPVATF]-1659781663568
GPR[EPVATF]-1659781668930
GPR[SPS]-1659781668930
[3132910] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:220.
GPR[EPS]-1659781670686
GPR[ESUN]-1659781670686
GPR[SSUN]-1659781670686
1045502179
GPR[SPVATF]-1659781671133
GPR[EPVATF]-1659781673060
GPR[SPS]-1659781673060
[3137504] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:760.
GPR[EPS]-1659781675280
GPR[SPVATF]-1659781675280
GPR[EPVATF]-1659781677346
GPR[SPS]-1659781677346
[3141038] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:760.
GPR[EPS]-1659781678814
GPR[ESUN]-1659781678814
GPR[SSUN]-1659781678814
1045502179
GPR[SPVATF]-1659781679265
GPR[EPVATF]-1659781681146
GPR[SPS]-1659781681146
[3144472] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:757.
GPR[EPS]-1659781682248
GPR[ESUN]-1659781682248
GPR[SSUN]-1659781682248
-1684326478
GPR[SPVATF]-1659781682901
GPR[EPVATF]-1659781687948
GPR[SPS]-1659781687948
[3151365] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique:196.
GPR[EPS]-1659781689141
GPR[ESUN]-1659781689141
GPR[SSUN]-1659781689141
-1684326478
GPR[ESUN]-1659781689467
GPR[SSUN]-1659781689467
-1684326478
GPR[SPVATF]-1659781689791
GPR[EPVATF]-1659781694468
GPR[SPS]-1659781694468
[3158912] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique:167.
GPR[EPS]-1659781696688
GPR[ESUN]-1659781696688
GPR[SSUN]-1659781696688
-1684326478
GPR[SPVATF]-1659781696933
GPR[EPVATF]-1659781701658
GPR[SPS]-1659781701658
[3165046] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique:166.
GPR[EPS]-1659781702822
GPR[ESUN]-1659781702822
GPR[SSUN]-1659781702822
-1684326478
GPR[SPVATF]-1659781703059
GPR[EPVATF]-1659781707348
GPR[SPS]-1659781707348
[3171410] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique:162.
GPR[EPS]-1659781709186
GPR[SPVATF]-1659781709186
GPR[EPVATF]-1659781713516
GPR[SPS]-1659781713517
[3177200] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique:162.
GPR[EPS]-1659781714976
GPR[ESUN]-1659781714976
GPR[SSUN]-1659781714976
-1684326478
GPR[ESUN]-1659781715219
GPR[SSUN]-1659781715219
1045502179
GPR[SPVATF]-1659781715464
GPR[EPVATF]-1659781719531
GPR[SPS]-1659781719531
[3183634] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:178.
GPR[EPS]-1659781721410
GPR[ESUN]-1659781721410
GPR[SSUN]-1659781721410
1045502179
GPR[ESUN]-1659781721677
GPR[SSUN]-1659781721677
1045502179
GPR[SPVATF]-1659781721931
GPR[EPVATF]-1659781726038
GPR[SPS]-1659781726038
[3189522] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:213.
GPR[EPS]-1659781727298
GPR[ESUN]-1659781727298
GPR[SSUN]-1659781727298
1045502179
GPR[SPVATF]-1659781727548
GPR[EPVATF]-1659781731595
GPR[SPS]-1659781731595
[3195731] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:176.
GPR[EPS]-1659781733507
GPR[SPVATF]-1659781733507
GPR[EPVATF]-1659781737685
GPR[SPS]-1659781737685
[3201145] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:176.
GPR[EPS]-1659781738921
GPR[ESUN]-1659781738921
GPR[SSUN]-1659781738921
1045502179
GPR[SPVATF]-1659781739170
GPR[EPVATF]-1659781743234
GPR[SPS]-1659781743234
[3207781] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:171.
GPR[EPS]-1659781745557
GPR[ESUN]-1659781745557
GPR[SSUN]-1659781745557
1045502179
GPR[SPVATF]-1659781745810
GPR[EPVATF]-1659781749887
GPR[SPS]-1659781749887
[3213384] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:169.
GPR[EPS]-1659781751160
GPR[ESUN]-1659781751160
GPR[SSUN]-1659781751161
1299274573
GPR[SPVATF]-1659781751433
GPR[EPVATF]-1659781755470
GPR[SPS]-1659781755470
[3219421] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:519.
GPR[EPS]-1659781757197
GPR[SPVATF]-1659781757197
GPR[EPVATF]-1659781761241
GPR[SPS]-1659781761241
[3224529] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:519.
GPR[EPS]-1659781762305
GPR[ESUN]-1659781762305
GPR[SSUN]-1659781762305
1299274573
GPR[ESUN]-1659781762531
GPR[SSUN]-1659781762531
1187751237
GPR[ESUN]-1659781762810
GPR[SSUN]-1659781762811
1187751237
GPR[SPVATF]-1659781763109
GPR[EPVATF]-1659781767399
GPR[SPS]-1659781767399
[3231753] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2886.
GPR[EPS]-1659781769529
GPR[ESUN]-1659781769529
GPR[SSUN]-1659781769529
2433571
GPR[SPVATF]-1659781769795
GPR[EPVATF]-1659781773969
GPR[SPS]-1659781773969
[3237833] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:2126.
GPR[EPS]-1659781775609
GPR[ESUN]-1659781775609
GPR[SSUN]-1659781775609
1187751237
GPR[ESUN]-1659781775904
GPR[SSUN]-1659781775904
1187751237
GPR[ESUN]-1659781776174
GPR[SSUN]-1659781776174
1187751237
GPR[SPVATF]-1659781776444
GPR[EPVATF]-1659781780733
GPR[SPS]-1659781780733
[3244956] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:867.
GPR[EPS]-1659781782732
GPR[SPVATF]-1659781782733
GPR[EPVATF]-1659781787028
GPR[SPS]-1659781787028
[3250495] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:867.
GPR[EPS]-1659781788271
GPR[ESUN]-1659781788271
GPR[SSUN]-1659781788271
1852376448
GPR[SPVATF]-1659781788522
GPR[EPVATF]-1659781792795
GPR[SPS]-1659781792795
[3256215] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:157.
GPR[EPS]-1659781793991
GPR[SPVATF]-1659781793992
GPR[EPVATF]-1659781799310
GPR[SPS]-1659781799310
[3262615] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:157.
GPR[EPS]-1659781800391
GPR[ESUN]-1659781800391
GPR[SSUN]-1659781800391
1852376448
GPR[SPVATF]-1659781800630
GPR[EPVATF]-1659781804952
GPR[SPS]-1659781804952
[3268264] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:140.
GPR[EPS]-1659781806040
GPR[SPVATF]-1659781806040
GPR[EPVATF]-1659781810381
GPR[SPS]-1659781810381
[3274553] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:140.
GPR[EPS]-1659781812329
GPR[ESUN]-1659781812329
GPR[SSUN]-1659781812329
1852376448
GPR[ESUN]-1659781812590
GPR[SSUN]-1659781812590
1852376448
GPR[SPVATF]-1659781812812
GPR[EPVATF]-1659781817087
GPR[SPS]-1659781817087
[3280480] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:136.
GPR[EPS]-1659781818256
GPR[ESUN]-1659781818256
GPR[SSUN]-1659781818256
1852376448
GPR[ESUN]-1659781818497
GPR[SSUN]-1659781818497
1852376448
GPR[ESUN]-1659781818717
GPR[SSUN]-1659781818717
1299274573
GPR[SPVATF]-1659781818947
GPR[EPVATF]-1659781822735
GPR[SPS]-1659781822735
[3286029] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:524.
GPR[EPS]-1659781823805
GPR[SPVATF]-1659781823805
GPR[EPVATF]-1659781828506
GPR[SPS]-1659781828506
[3291923] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:524.
GPR[EPS]-1659781829699
GPR[ESUN]-1659781829699
GPR[SSUN]-1659781829699
2433571
GPR[ESUN]-1659781829961
GPR[SSUN]-1659781829961
2433571
GPR[ESUN]-1659781830232
GPR[SSUN]-1659781830232
2433571
GPR[SPVATF]-1659781830465
GPR[EPVATF]-1659781834841
GPR[SPS]-1659781834841
[3298404] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:2124.
GPR[EPS]-1659781836180
GPR[ESUN]-1659781836180
GPR[SSUN]-1659781836180
2433571
GPR[SPVATF]-1659781836422
GPR[EPVATF]-1659781840840
GPR[SPS]-1659781840840
[3305023] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:2123.
GPR[EPS]-1659781842799
GPR[ESUN]-1659781842799
GPR[SSUN]-1659781842799
1852376448
GPR[SPVATF]-1659781843029
GPR[EPVATF]-1659781847450
GPR[SPS]-1659781847450
[3310810] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:183.
GPR[EPS]-1659781848586
GPR[SPVATF]-1659781848586
GPR[EPVATF]-1659781852871
GPR[SPS]-1659781852871
[3316853] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:183.
GPR[EPS]-1659781854629
GPR[ESUN]-1659781854629
GPR[SSUN]-1659781854629
1852376448
GPR[ESUN]-1659781854862
GPR[SSUN]-1659781854862
1187751237
GPR[ESUN]-1659781855147
GPR[SSUN]-1659781855147
1187751237
GPR[ESUN]-1659781855417
GPR[SSUN]-1659781855417
-534884160
GPR[ESUN]-1659781855720
GPR[SSUN]-1659781855720
-534884160
GPR[ESUN]-1659781856009
GPR[SSUN]-1659781856009
1045502179
GPR[ESUN]-1659781856251
GPR[SSUN]-1659781856251
1045502179
GPR[ESUN]-1659781856478
GPR[SSUN]-1659781856478
1045502179
GPR[SPVATF]-1659781856705
GPR[EPVATF]-1659781860312
GPR[SPS]-1659781860312
[3323714] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:200.
GPR[EPS]-1659781861490
GPR[ESUN]-1659781861490
GPR[SSUN]-1659781861490
1045502179
GPR[ESUN]-1659781861744
GPR[SSUN]-1659781861744
1045502179
GPR[SPVATF]-1659781861979
GPR[EPVATF]-1659781865465
GPR[SPS]-1659781865465
[3328899] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:198.
GPR[EPS]-1659781866675
GPR[SPVATF]-1659781866676
GPR[EPVATF]-1659781871200
GPR[SPS]-1659781871200
[3334552] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:198.
GPR[EPS]-1659781872328
GPR[ESUN]-1659781872328
GPR[SSUN]-1659781872328
1045502179
GPR[SPVATF]-1659781872574
GPR[EPVATF]-1659781876001
GPR[SPS]-1659781876001
[3339314] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:196.
GPR[EPS]-1659781877090
GPR[ESUN]-1659781877090
GPR[SSUN]-1659781877090
1045502179
GPR[ESUN]-1659781877363
GPR[SSUN]-1659781877363
1045502179
GPR[ESUN]-1659781877592
GPR[SSUN]-1659781877592
-436823543
GPR[SPVATF]-1659781877800
GPR[EPVATF]-1659781880486
GPR[SPS]-1659781880486
[3343069] ERROR ConstraintModelBuilder - Unable to compile the change: 
class FunctionToBlockMutator {
    private com.google.javascript.jscomp.AbstractCompiler compiler;

    private com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier;

    FunctionToBlockMutator(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier) {
        this.compiler = compiler;
        this.safeNameIdSupplier = safeNameIdSupplier;
    }

    com.google.javascript.rhino.Node mutate(java.lang.String fnName, com.google.javascript.rhino.Node fnNode, com.google.javascript.rhino.Node callNode, java.lang.String resultName, boolean needsDefaultResult, boolean isCallInLoop) {
        com.google.javascript.rhino.Node newFnNode = fnNode.cloneTree();
        makeLocalNamesUnique(newFnNode, isCallInLoop);
        rewriteFunctionDeclarations(newFnNode.getLastChild());
        java.util.Set<java.lang.String> namesToAlias = com.google.javascript.jscomp.FunctionArgumentInjector.findModifiedParameters(newFnNode);
        java.util.LinkedHashMap<java.lang.String, com.google.javascript.rhino.Node> args = com.google.javascript.jscomp.FunctionArgumentInjector.getFunctionCallParameterMap(newFnNode, callNode, this.safeNameIdSupplier);
        boolean hasArgs = !args.isEmpty();
        if (hasArgs) {
            com.google.javascript.jscomp.FunctionArgumentInjector.maybeAddTempsForCallArguments(newFnNode, args, namesToAlias, compiler.getCodingConvention());
        }
        com.google.javascript.rhino.Node newBlock = com.google.javascript.jscomp.NodeUtil.getFunctionBody(newFnNode);
        newBlock.detachFromParent();
        if (hasArgs) {
            com.google.javascript.rhino.Node inlineResult = aliasAndInlineArguments(newBlock, args, namesToAlias);
            com.google.common.base.Preconditions.checkState(newBlock == inlineResult);
        }
        if (isCallInLoop) {
            fixUnitializedVarDeclarations(newBlock);
        }
        java.lang.String labelName = getLabelNameForFunction(fnName);
        com.google.javascript.rhino.Node injectableBlock = com.google.javascript.jscomp.FunctionToBlockMutator.replaceReturns(newBlock, resultName, labelName, needsDefaultResult);
        com.google.common.base.Preconditions.checkState(injectableBlock != null);
        return injectableBlock;
    }

    private void rewriteFunctionDeclarations(com.google.javascript.rhino.Node n) {
        if (n.getType() == com.google.javascript.rhino.Token.FUNCTION) {
            if (com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n)) {
                com.google.javascript.rhino.Node fnNameNode = n.getFirstChild();
                com.google.javascript.rhino.Node var = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.VAR).copyInformationFrom(n);
                com.google.javascript.rhino.Node name = com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, fnNameNode.getString()).copyInformationFrom(fnNameNode);
                fnNameNode.setString("");
                n.getParent().replaceChild(n, var);
                var.addChildToFront(name);
                name.addChildToFront(n);
            }
            return;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(), next; c != null; c = next) {
            next = c.getNext();
            rewriteFunctionDeclarations(c);
        }
    }

    private void fixUnitializedVarDeclarations(com.google.javascript.rhino.Node n) {
        if (com.google.javascript.jscomp.NodeUtil.isLoopStructure(n)) {
            return;
        }
        if (com.google.javascript.jscomp.NodeUtil.isVar(n)) {
            com.google.javascript.rhino.Node name = n.getFirstChild();
            if (!name.hasChildren()) {
                com.google.javascript.rhino.Node srcLocation = name;
                name.addChildToBack(com.google.javascript.jscomp.NodeUtil.newUndefinedNode(srcLocation));
            }
            return;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            fixUnitializedVarDeclarations(c);
        }
    }

    private void makeLocalNamesUnique(com.google.javascript.rhino.Node fnNode, boolean isCallInLoop) {
        com.google.common.base.Supplier<java.lang.String> idSupplier = compiler.getUniqueNameIdSupplier();
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, fnNode, new com.google.javascript.jscomp.MakeDeclaredNamesUnique(new com.google.javascript.jscomp.MakeDeclaredNamesUnique.InlineRenamer(idSupplier, "inline_", isCallInLoop)));
        new com.google.javascript.jscomp.RenameLabels(compiler, new com.google.javascript.jscomp.FunctionToBlockMutator.LabelNameSupplier(idSupplier), false).process(null, fnNode);
    }

    static class LabelNameSupplier implements com.google.common.base.Supplier<java.lang.String> {
        final com.google.common.base.Supplier<java.lang.String> idSupplier;

        LabelNameSupplier(com.google.common.base.Supplier<java.lang.String> idSupplier) {
            this.idSupplier = idSupplier;
        }

        @java.lang.Override
        public java.lang.String get() {
            return "JSCompiler_inline_label_" + idSupplier.get();
        }
    }

    private java.lang.String getLabelNameForFunction(java.lang.String fnName) {
        java.lang.String name = ((fnName == null) || fnName.isEmpty()) ? "anon" : fnName;
        return (("JSCompiler_inline_label_" + name) + "_") + safeNameIdSupplier.get();
    }

    private java.lang.String getUniqueThisName() {
        return "JSCompiler_inline_this_" + safeNameIdSupplier.get();
    }

    private com.google.javascript.rhino.Node aliasAndInlineArguments(com.google.javascript.rhino.Node fnTemplateRoot, java.util.LinkedHashMap<java.lang.String, com.google.javascript.rhino.Node> argMap, java.util.Set<java.lang.String> namesToAlias) {
        if ((namesToAlias == null) || namesToAlias.isEmpty()) {
            com.google.javascript.rhino.Node result = com.google.javascript.jscomp.FunctionArgumentInjector.inject(compiler, fnTemplateRoot, null, argMap);
            com.google.common.base.Preconditions.checkState(result == fnTemplateRoot);
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(529).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(529).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(529).collectInput("result",result);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(529).collectInput("com.google.javascript.jscomp.FunctionToBlockMutator.this.compiler",com.google.javascript.jscomp.FunctionToBlockMutator.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(529).collectInput("namesToAlias",namesToAlias);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(529).collectInput("argMap",argMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(529).collectInput("com.google.javascript.jscomp.FunctionToBlockMutator.this.safeNameIdSupplier",com.google.javascript.jscomp.FunctionToBlockMutator.this.safeNameIdSupplier);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(529).collectInput("fnTemplateRoot",fnTemplateRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(529).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(529).collectionEnds();
            }
            if (runtimeAngelicValue)
                return result;

        } else {
            java.util.Map<java.lang.String, com.google.javascript.rhino.Node> newArgMap = com.google.common.collect.Maps.newHashMap(argMap);
            java.util.List<com.google.javascript.rhino.Node> newVars = com.google.common.collect.Lists.newLinkedList();
            for (java.util.Map.Entry<java.lang.String, com.google.javascript.rhino.Node> entry : argMap.entrySet()) {
                java.lang.String name = entry.getKey();
                if (namesToAlias.contains(name)) {
                    if (name.equals(com.google.javascript.jscomp.FunctionArgumentInjector.THIS_MARKER)) {
                        boolean referencesThis = com.google.javascript.jscomp.NodeUtil.referencesThis(fnTemplateRoot);
                        com.google.javascript.rhino.Node value = entry.getValue();
                        if ((value.getType() != com.google.javascript.rhino.Token.THIS) && (referencesThis || com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(value, compiler))) {
                            java.lang.String newName = getUniqueThisName();
                            com.google.javascript.rhino.Node newValue = entry.getValue().cloneTree();
                            com.google.javascript.rhino.Node newNode = com.google.javascript.jscomp.NodeUtil.newVarNode(newName, newValue).copyInformationFromForTree(newValue);
                            newVars.add(0, newNode);
                            newArgMap.put(com.google.javascript.jscomp.FunctionArgumentInjector.THIS_MARKER, com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, newName).copyInformationFromForTree(newValue));
                        }
                    } else {
                        com.google.javascript.rhino.Node newValue = entry.getValue().cloneTree();
                        com.google.javascript.rhino.Node newNode = com.google.javascript.jscomp.NodeUtil.newVarNode(name, newValue).copyInformationFromForTree(newValue);
                        newVars.add(0, newNode);
                        newArgMap.remove(name);
                    }
                }
            }
            com.google.javascript.rhino.Node result = com.google.javascript.jscomp.FunctionArgumentInjector.inject(compiler, fnTemplateRoot, null, newArgMap);
            com.google.common.base.Preconditions.checkState(result == fnTemplateRoot);
            for (com.google.javascript.rhino.Node n : newVars) {
                fnTemplateRoot.addChildToFront(n);
            }
            return result;
        }
    }

    private static com.google.javascript.rhino.Node replaceReturns(com.google.javascript.rhino.Node block, java.lang.String resultName, java.lang.String labelName, boolean resultMustBeSet) {
        com.google.common.base.Preconditions.checkNotNull(block);
        com.google.common.base.Preconditions.checkNotNull(labelName);
        com.google.javascript.rhino.Node root = block;
        boolean hasReturnAtExit = false;
        int returnCount = com.google.javascript.jscomp.NodeUtil.getNodeTypeReferenceCount(block, com.google.javascript.rhino.Token.RETURN, new com.google.javascript.jscomp.NodeUtil.MatchShallowStatement());
        if (returnCount > 0) {
            hasReturnAtExit = com.google.javascript.jscomp.FunctionToBlockMutator.hasReturnAtExit(block);
            if (hasReturnAtExit) {
                com.google.javascript.jscomp.FunctionToBlockMutator.convertLastReturnToStatement(block, resultName);
                returnCount--;
            }
            if (returnCount > 0) {
                com.google.javascript.jscomp.FunctionToBlockMutator.replaceReturnWithBreak(block, null, resultName, labelName);
                com.google.javascript.rhino.Node label = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.LABEL).copyInformationFrom(block);
                com.google.javascript.rhino.Node name = com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.LABEL_NAME, labelName).copyInformationFrom(block);
                label.addChildToFront(name);
                label.addChildToBack(block);
                com.google.javascript.rhino.Node newRoot = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.BLOCK).copyInformationFrom(block);
                newRoot.addChildrenToBack(label);
                root = newRoot;
            }
        }
        if ((resultMustBeSet && (!hasReturnAtExit)) && (resultName != null)) {
            com.google.javascript.jscomp.FunctionToBlockMutator.addDummyAssignment(block, resultName);
        }
        return root;
    }

    private static void addDummyAssignment(com.google.javascript.rhino.Node node, java.lang.String resultName) {
        com.google.common.base.Preconditions.checkArgument(node.getType() == com.google.javascript.rhino.Token.BLOCK);
        com.google.javascript.rhino.Node srcLocation = node;
        com.google.javascript.rhino.Node retVal = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(srcLocation);
        com.google.javascript.rhino.Node resultNode = com.google.javascript.jscomp.FunctionToBlockMutator.createAssignStatementNode(resultName, retVal);
        resultNode.copyInformationFromForTree(node);
        node.addChildrenToBack(resultNode);
    }

    private static void convertLastReturnToStatement(com.google.javascript.rhino.Node block, java.lang.String resultName) {
        com.google.javascript.rhino.Node ret = block.getLastChild();
        com.google.common.base.Preconditions.checkArgument(ret.getType() == com.google.javascript.rhino.Token.RETURN);
        com.google.javascript.rhino.Node resultNode = com.google.javascript.jscomp.FunctionToBlockMutator.getReplacementReturnStatement(ret, resultName);
        if (resultNode == null) {
            block.removeChild(ret);
        } else {
            resultNode.copyInformationFromForTree(ret);
            block.replaceChild(ret, resultNode);
        }
    }

    private static com.google.javascript.rhino.Node createAssignStatementNode(java.lang.String name, com.google.javascript.rhino.Node expression) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, name);
        com.google.javascript.rhino.Node assign = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.ASSIGN, nameNode, expression);
        return com.google.javascript.jscomp.NodeUtil.newExpr(assign);
    }

    private static com.google.javascript.rhino.Node getReplacementReturnStatement(com.google.javascript.rhino.Node node, java.lang.String resultName) {
        com.google.javascript.rhino.Node resultNode = null;
        com.google.javascript.rhino.Node retVal = null;
        if (node.hasChildren()) {
            retVal = node.getFirstChild().cloneTree();
        }
        if (resultName == null) {
            if (retVal != null) {
                resultNode = com.google.javascript.jscomp.NodeUtil.newExpr(retVal);
            }
        } else {
            if (retVal == null) {
                com.google.javascript.rhino.Node srcLocation = node;
                retVal = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(srcLocation);
            }
            resultNode = com.google.javascript.jscomp.FunctionToBlockMutator.createAssignStatementNode(resultName, retVal);
        }
        return resultNode;
    }

    private static boolean hasReturnAtExit(com.google.javascript.rhino.Node block) {
        return block.getLastChild().getType() == com.google.javascript.rhino.Token.RETURN;
    }

    private static com.google.javascript.rhino.Node replaceReturnWithBreak(com.google.javascript.rhino.Node current, com.google.javascript.rhino.Node parent, java.lang.String resultName, java.lang.String labelName) {
        if ((current.getType() == com.google.javascript.rhino.Token.FUNCTION) || (current.getType() == com.google.javascript.rhino.Token.EXPR_RESULT)) {
            return current;
        }
        if (current.getType() == com.google.javascript.rhino.Token.RETURN) {
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent));
            com.google.javascript.rhino.Node resultNode = com.google.javascript.jscomp.FunctionToBlockMutator.getReplacementReturnStatement(current, resultName);
            com.google.javascript.rhino.Node name = com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.LABEL_NAME, labelName);
            com.google.javascript.rhino.Node breakNode = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.BREAK, name);
            breakNode.copyInformationFromForTree(current);
            parent.replaceChild(current, breakNode);
            if (resultNode != null) {
                resultNode.copyInformationFromForTree(current);
                parent.addChildBefore(resultNode, breakNode);
            }
            current = breakNode;
        } else {
            for (com.google.javascript.rhino.Node c = current.getFirstChild(); c != null; c = c.getNext()) {
                c = com.google.javascript.jscomp.FunctionToBlockMutator.replaceReturnWithBreak(c, current, resultName, labelName);
            }
        }
        return current;
    }
}
[3343069] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659781880845
GPR[SSUN]-1659781880845
-436823543
GPR[SPVATF]-1659781881065
GPR[EPVATF]-1659781883822
GPR[SPS]-1659781883822
[3347100] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionToBlockMutator:238.
GPR[EPS]-1659781884876
GPR[ESUN]-1659781884876
GPR[SSUN]-1659781884877
-436823543
GPR[ESUN]-1659781885097
GPR[SSUN]-1659781885097
1045502179
GPR[SPVATF]-1659781885345
GPR[EPVATF]-1659781889595
GPR[SPS]-1659781889595
[3352937] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:117.
GPR[EPS]-1659781890713
GPR[SPVATF]-1659781890714
GPR[EPVATF]-1659781894814
GPR[SPS]-1659781894814
[3358228] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:117.
GPR[EPS]-1659781896004
GPR[ESUN]-1659781896004
GPR[SSUN]-1659781896004
1045502179
GPR[SPVATF]-1659781896268
GPR[EPVATF]-1659781900422
GPR[SPS]-1659781900422
[3363827] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:116.
GPR[EPS]-1659781901603
GPR[ESUN]-1659781901603
GPR[SSUN]-1659781901603
1045502179
GPR[SPVATF]-1659781901890
GPR[EPVATF]-1659781907132
GPR[SPS]-1659781907132
[3370956] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:114.
GPR[EPS]-1659781908732
GPR[ESUN]-1659781908732
GPR[SSUN]-1659781908732
1045502179
GPR[ESUN]-1659781908980
GPR[SSUN]-1659781908980
1045502179
GPR[SPVATF]-1659781909210
GPR[EPVATF]-1659781913417
GPR[SPS]-1659781913417
[3376886] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:167.
GPR[EPS]-1659781914662
GPR[SPVATF]-1659781914662
GPR[EPVATF]-1659781919602
GPR[SPS]-1659781919602
[3383139] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:167.
GPR[EPS]-1659781920915
GPR[ESUN]-1659781920915
GPR[SSUN]-1659781920915
1045502179
GPR[ESUN]-1659781921159
GPR[SSUN]-1659781921159
2433571
GPR[ESUN]-1659781921390
GPR[SSUN]-1659781921390
507083050
GPR[SPVATF]-1659781921603
GPR[EPVATF]-1659781923365
GPR[SPS]-1659781923365
[3386690] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:97.
GPR[EPS]-1659781924466
GPR[ESUN]-1659781924466
GPR[SSUN]-1659781924467
1299274573
GPR[ESUN]-1659781924688
GPR[SSUN]-1659781924688
1045502179
GPR[SPVATF]-1659781924920
GPR[EPVATF]-1659781926342
GPR[SPS]-1659781926342
[3389639] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:762.
GPR[EPS]-1659781927415
GPR[ESUN]-1659781927415
GPR[SSUN]-1659781927415
1187751237
GPR[SPVATF]-1659781927693
GPR[EPVATF]-1659781931965
GPR[SPS]-1659781931965
[3395467] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:806.
GPR[EPS]-1659781933243
GPR[ESUN]-1659781933243
GPR[SSUN]-1659781933243
2433571
GPR[SPVATF]-1659781933481
GPR[EPVATF]-1659781937765
GPR[SPS]-1659781937765
[3401126] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:654.
GPR[EPS]-1659781938902
GPR[SPVATF]-1659781938903
GPR[EPVATF]-1659781943255
GPR[SPS]-1659781943255
[3407354] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:654.
GPR[EPS]-1659781945130
GPR[ESUN]-1659781945130
GPR[SSUN]-1659781945130
2433571
GPR[SPVATF]-1659781945387
GPR[EPVATF]-1659781949800
GPR[SPS]-1659781949800
[3624243] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659782162019
GPR[SSUN]-1659782162019
1187751237
GPR[ESUN]-1659782261002
GPR[SSUN]-1659782261002
507083050
GPR[SPVATF]-1659782279311
[4024541] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659782564645
GPR[SSUN]-1659782564645
\n\nNode: host-53\n
\n\nDate: Sat 06 Aug 2022 03:43:11 AM PDT\n
End running Nopol Closure/49 results at /experiment_home///results/Nopol/Closure/49/seed_260/
Removing checked out dir script/workingdir/Nopol/Closure_49
GPR[SSLE]-1659782591820
GPR[ESLE]-1659782651826
