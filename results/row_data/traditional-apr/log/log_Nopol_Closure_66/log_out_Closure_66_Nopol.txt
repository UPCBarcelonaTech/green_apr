Sleep 1m start
GPR[SSLI]-1659899464017
GPR[ESLI]-1659899524021
Running Nopol Closure 66b with approach: smt
Timezone: America/Los_Angeles
Seed 261
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/66/seed_261/
The file script/workingdir/Nopol/Closure_66 does not exist!
script/workingdir/Nopol/Closure_66
script/workingdir/Nopol/Closure_66
classpath:  script/workingdir/Nopol/Closure_66/build/classes:script/workingdir/Nopol/Closure_66/lib/args4j.jar:script/workingdir/Nopol/Closure_66/lib/guava.jar:script/workingdir/Nopol/Closure_66/lib/json.jar:script/workingdir/Nopol/Closure_66/lib/jsr305.jar:script/workingdir/Nopol/Closure_66/lib/libtrunk_rhino_parser_jarjared.jar:script/workingdir/Nopol/Closure_66/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_66/lib/ant.jar:script/workingdir/Nopol/Closure_66/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_66/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_66/lib/junit.jar:script/workingdir/Nopol/Closure_66/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659899539569
GPR[ESLB]-1659899599576
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_66//build/classes:script/workingdir/Nopol/Closure_66//build/test:script/workingdir/Nopol/Closure_66/build/classes:script/workingdir/Nopol/Closure_66/lib/args4j.jar:script/workingdir/Nopol/Closure_66/lib/guava.jar:script/workingdir/Nopol/Closure_66/lib/json.jar:script/workingdir/Nopol/Closure_66/lib/jsr305.jar:script/workingdir/Nopol/Closure_66/lib/libtrunk_rhino_parser_jarjared.jar:script/workingdir/Nopol/Closure_66/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_66/lib/ant.jar:script/workingdir/Nopol/Closure_66/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_66/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_66/lib/junit.jar:script/workingdir/Nopol/Closure_66/build/test
Node: host-55
Date init: Sun 07 Aug 2022 12:13:19 PM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_66/src]
[0] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_66/build/classes/, file:script/workingdir/Nopol/Closure_66/build/test/, file:script/workingdir/Nopol/Closure_66/build/classes/, file:script/workingdir/Nopol/Closure_66/lib/args4j.jar, file:script/workingdir/Nopol/Closure_66/lib/guava.jar, file:script/workingdir/Nopol/Closure_66/lib/json.jar, file:script/workingdir/Nopol/Closure_66/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_66/lib/libtrunk_rhino_parser_jarjared.jar, file:script/workingdir/Nopol/Closure_66/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_66/lib/ant.jar, file:script/workingdir/Nopol/Closure_66/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_66/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_66/lib/junit.jar, file:script/workingdir/Nopol/Closure_66/build/test/]
[0] INFO NoPol - Statement type: PRE_THEN_COND
[0] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPropertyOrderTest, com.google.javascript.jscomp.CheckPropertyOrderTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OperaCompoundAssignFixTest, com.google.javascript.jscomp.OperaCompoundAssignFixTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SuspiciousPropertiesCheckTest, com.google.javascript.jscomp.SuspiciousPropertiesCheckTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnfoldCompoundAssignmentsTest, com.google.javascript.jscomp.UnfoldCompoundAssignmentsTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableShadowDeclarationCheckTest, com.google.javascript.jscomp.VariableShadowDeclarationCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.ParserTest, com.google.javascript.rhino.ParserTest, com.google.javascript.rhino.TokenStreamTest, com.google.javascript.rhino.TokenStreamTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_66/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPropertyOrderTest, com.google.javascript.jscomp.CheckPropertyOrderTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OperaCompoundAssignFixTest, com.google.javascript.jscomp.OperaCompoundAssignFixTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SuspiciousPropertiesCheckTest, com.google.javascript.jscomp.SuspiciousPropertiesCheckTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnfoldCompoundAssignmentsTest, com.google.javascript.jscomp.UnfoldCompoundAssignmentsTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableShadowDeclarationCheckTest, com.google.javascript.jscomp.VariableShadowDeclarationCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.ParserTest, com.google.javascript.rhino.ParserTest, com.google.javascript.rhino.TokenStreamTest, com.google.javascript.rhino.TokenStreamTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/66/seed_261/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[6] INFO NoPol - Free memory: 1 GB
[7] INFO NoPol - Maximum memory: 7 GB
[7] INFO NoPol - Total memory available to JVM: 1 GB
[8] INFO NoPol - Java version: 1.8.0_45
[9] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[9] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659899604890
GPR[ESUP]-1659899604890
GPR[SFL]-1659899604890
GPR[EFL]-1659899640978
GPR[SFP]-1659899640978
GPR[SSUN]-1659899642667
-283827935
GPR[SPVATF]-1659899643126
GPR[EPVATF]-1659899643164
[42830] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899643164
GPR[SSUN]-1659899643165
-1966087783
GPR[ESUN]-1659899643355
GPR[SSUN]-1659899643355
-1966087783
GPR[SPVATF]-1659899643545
GPR[EPVATF]-1659899643576
[43242] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899643577
GPR[SSUN]-1659899643577
-1966087783
GPR[SPVATF]-1659899643850
GPR[EPVATF]-1659899643872
[43539] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899643873
GPR[SSUN]-1659899643873
-1966087783
GPR[SPVATF]-1659899644060
GPR[EPVATF]-1659899644081
[43747] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899644081
GPR[SSUN]-1659899644081
-1659631726
GPR[ESUN]-1659899644258
GPR[SSUN]-1659899644258
130004992
GPR[ESUN]-1659899644432
GPR[SSUN]-1659899644432
130004992
GPR[SPVATF]-1659899644604
GPR[EPVATF]-1659899644629
[44295] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899644629
GPR[SSUN]-1659899644629
130004992
GPR[ESUN]-1659899644802
GPR[SSUN]-1659899644802
890942016
GPR[ESUN]-1659899644989
GPR[SSUN]-1659899644989
890942016
GPR[SPVATF]-1659899645172
GPR[EPVATF]-1659899645194
[44860] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899645194
GPR[SSUN]-1659899645194
890942016
GPR[SPVATF]-1659899645377
GPR[EPVATF]-1659899645398
[45065] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659899645399
GPR[EPVATF]-1659899645418
[45084] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899645418
GPR[SSUN]-1659899645418
890942016
GPR[ESUN]-1659899645601
GPR[SSUN]-1659899645601
890942016
GPR[ESUN]-1659899645784
GPR[SSUN]-1659899645784
-1966087783
GPR[ESUN]-1659899645968
GPR[SSUN]-1659899645968
-1966087783
GPR[SPVATF]-1659899646153
GPR[EPVATF]-1659899646173
[45840] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659899646174
GPR[EPVATF]-1659899646193
[45859] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899646193
GPR[SSUN]-1659899646194
-1966087783
GPR[ESUN]-1659899646375
GPR[SSUN]-1659899646375
-1966087783
GPR[SPVATF]-1659899646665
GPR[EPVATF]-1659899646685
[46351] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659899646685
GPR[EPVATF]-1659899646706
[46372] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899646706
GPR[SSUN]-1659899646706
-1966087783
GPR[ESUN]-1659899646883
GPR[SSUN]-1659899646883
-1966087783
GPR[ESUN]-1659899647057
GPR[SSUN]-1659899647057
-1966087783
GPR[ESUN]-1659899647233
GPR[SSUN]-1659899647233
-1966087783
GPR[SPVATF]-1659899647414
GPR[EPVATF]-1659899647436
[47102] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659899647437
GPR[EPVATF]-1659899647459
[47125] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899647459
GPR[SSUN]-1659899647459
-1966087783
GPR[SPVATF]-1659899647640
GPR[EPVATF]-1659899647662
[47329] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659899647663
GPR[EPVATF]-1659899647685
[47351] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899647685
GPR[SSUN]-1659899647685
-1966087783
GPR[SPVATF]-1659899647867
GPR[EPVATF]-1659899647889
[47555] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659899647889
GPR[EPVATF]-1659899647911
[47577] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899647911
GPR[SSUN]-1659899647911
-1966087783
GPR[ESUN]-1659899648093
GPR[SSUN]-1659899648093
-1966087783
GPR[ESUN]-1659899648288
GPR[SSUN]-1659899648288
-1966087783
GPR[SPVATF]-1659899648466
GPR[EPVATF]-1659899648488
[48154] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659899648489
GPR[EPVATF]-1659899648510
[48176] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899648510
GPR[SSUN]-1659899648510
-1966087783
GPR[SPVATF]-1659899648690
GPR[EPVATF]-1659899648712
[48378] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659899648713
GPR[EPVATF]-1659899648735
[48401] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899648735
GPR[SSUN]-1659899648735
-1966087783
GPR[ESUN]-1659899648918
GPR[SSUN]-1659899648918
-1966087783
GPR[SPVATF]-1659899649095
GPR[EPVATF]-1659899649117
[48783] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899649117
GPR[SSUN]-1659899649117
-1966087783
GPR[SPVATF]-1659899649302
GPR[EPVATF]-1659899649323
[48989] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899649323
GPR[SSUN]-1659899649323
-1966087783
GPR[ESUN]-1659899649930
GPR[SSUN]-1659899649930
-1966087783
GPR[SPVATF]-1659899650105
GPR[EPVATF]-1659899650126
[49792] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899650126
GPR[SSUN]-1659899650126
-1966087783
GPR[ESUN]-1659899650299
GPR[SSUN]-1659899650299
-1966087783
GPR[ESUN]-1659899650471
GPR[SSUN]-1659899650471
-1966087783
GPR[SPVATF]-1659899650644
GPR[EPVATF]-1659899650666
[50332] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899650666
GPR[SSUN]-1659899650666
-1966087783
GPR[SPVATF]-1659899650846
GPR[EPVATF]-1659899650867
[50533] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899650867
GPR[SSUN]-1659899650867
234947553
GPR[ESUN]-1659899651046
GPR[SSUN]-1659899651046
234947553
GPR[SPVATF]-1659899651220
GPR[EPVATF]-1659899651235
[50901] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659899651235
GPR[EPVATF]-1659899651250
[50916] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899651250
GPR[SSUN]-1659899651250
234947553
GPR[ESUN]-1659899651426
GPR[SSUN]-1659899651426
234947553
GPR[SPVATF]-1659899651600
GPR[EPVATF]-1659899651615
[51281] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659899651616
GPR[EPVATF]-1659899651630
[51296] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899651630
GPR[SSUN]-1659899651630
234947553
GPR[SPVATF]-1659899651805
GPR[EPVATF]-1659899651821
[51487] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899651821
GPR[SSUN]-1659899651821
234947553
GPR[ESUN]-1659899651999
GPR[SSUN]-1659899652000
234947553
GPR[ESUN]-1659899652176
GPR[SSUN]-1659899652176
234947553
GPR[SPVATF]-1659899652355
GPR[EPVATF]-1659899652370
[52036] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899652371
GPR[SSUN]-1659899652371
234947553
GPR[SPVATF]-1659899652608
GPR[EPVATF]-1659899652625
[52291] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899652625
GPR[SSUN]-1659899652625
234947553
GPR[SPVATF]-1659899652803
GPR[EPVATF]-1659899652818
[52485] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899652819
GPR[SSUN]-1659899652819
234947553
GPR[ESUN]-1659899652994
GPR[SSUN]-1659899652994
234947553
GPR[ESUN]-1659899653174
GPR[SSUN]-1659899653174
234947553
GPR[SPVATF]-1659899653354
GPR[EPVATF]-1659899653369
[53035] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899653369
GPR[SSUN]-1659899653369
234947553
GPR[SPVATF]-1659899653547
GPR[EPVATF]-1659899653562
[53228] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899653562
GPR[SSUN]-1659899653562
234947553
GPR[ESUN]-1659899653739
GPR[SSUN]-1659899653739
234947553
GPR[SPVATF]-1659899653917
GPR[EPVATF]-1659899653932
[53599] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899653933
GPR[SSUN]-1659899653933
234947553
GPR[SPVATF]-1659899654107
GPR[EPVATF]-1659899654122
[53788] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899654122
GPR[SSUN]-1659899654122
234947553
GPR[ESUN]-1659899654299
GPR[SSUN]-1659899654299
890942016
GPR[SPVATF]-1659899654476
GPR[EPVATF]-1659899654495
[54161] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659899654496
GPR[EPVATF]-1659899654516
[54182] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899654516
GPR[SSUN]-1659899654516
890942016
GPR[SPVATF]-1659899654693
GPR[EPVATF]-1659899654711
[54377] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899654711
GPR[SSUN]-1659899654711
890942016
GPR[ESUN]-1659899654886
GPR[SSUN]-1659899654886
890942016
GPR[SPVATF]-1659899655071
GPR[EPVATF]-1659899655088
[54754] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899655088
GPR[SSUN]-1659899655088
890942016
GPR[SPVATF]-1659899655267
GPR[EPVATF]-1659899657099
[56765] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659899657099
GPR[EPVATF]-1659899657116
[56782] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899657116
GPR[SSUN]-1659899657116
890942016
GPR[SPVATF]-1659899657297
GPR[EPVATF]-1659899657314
[56980] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899657315
GPR[SSUN]-1659899657315
890942016
GPR[SPVATF]-1659899657493
GPR[EPVATF]-1659899657510
[57176] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659899657510
GPR[EPVATF]-1659899657527
[57193] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899657527
GPR[SSUN]-1659899657527
890942016
GPR[ESUN]-1659899657703
GPR[SSUN]-1659899657703
890942016
GPR[SPVATF]-1659899657878
GPR[EPVATF]-1659899657897
[57563] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899657897
GPR[SSUN]-1659899657897
890942016
GPR[SPVATF]-1659899658077
GPR[EPVATF]-1659899658093
[57759] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899658093
GPR[SSUN]-1659899658093
890942016
GPR[SPVATF]-1659899658270
GPR[EPVATF]-1659899658287
[57953] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899658287
GPR[SSUN]-1659899658287
890942016
GPR[ESUN]-1659899658469
GPR[SSUN]-1659899658469
-1797850673
GPR[SPVATF]-1659899658709
GPR[EPVATF]-1659899660350
GPR[SPS]-1659899660350
[60841] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TypeCheck implements com.google.javascript.jscomp.NodeTraversal.Callback , com.google.javascript.jscomp.CompilerPass {
    static final com.google.javascript.jscomp.DiagnosticType UNEXPECTED_TOKEN = com.google.javascript.jscomp.DiagnosticType.error("JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN", "Internal Error: Don't know how to handle {0}");

    static final com.google.javascript.jscomp.DiagnosticType BAD_DELETE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_DELETE_OPERAND", "delete operator needs a reference operand");

    protected static final java.lang.String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT = "overriding prototype with non-object";

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST", "condition always evaluates to {2}\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST_NO_RESULT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST_NO_RESULT", "condition always evaluates to the same value\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_ENUM_ELEMENT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INEXISTENT_ENUM_ELEMENT", "element {0} does not exist on this enum");

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_PROPERTY = com.google.javascript.jscomp.DiagnosticType.disabled("JSC_INEXISTENT_PROPERTY", "Property {0} never defined on {1}");

    protected static final com.google.javascript.jscomp.DiagnosticType NOT_A_CONSTRUCTOR = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_A_CONSTRUCTOR", "cannot instantiate non-constructor");

    static final com.google.javascript.jscomp.DiagnosticType BIT_OPERATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_TYPE_FOR_BIT_OPERATION", "operator {0} cannot be applied to {1}");

    static final com.google.javascript.jscomp.DiagnosticType NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_FUNCTION_TYPE", "{0} expressions are not callable");

    static final com.google.javascript.jscomp.DiagnosticType CONSTRUCTOR_NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONSTRUCTOR_NOT_CALLABLE", "Constructor {0} should be called with the \"new\" keyword");

    static final com.google.javascript.jscomp.DiagnosticType FUNCTION_MASKS_VARIABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_FUNCTION_MASKS_VARIABLE", "function {0} masks variable (IE bug)");

    static final com.google.javascript.jscomp.DiagnosticType MULTIPLE_VAR_DEF = com.google.javascript.jscomp.DiagnosticType.warning("JSC_MULTIPLE_VAR_DEF", "declaration of multiple variables with shared type information");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_DUP = com.google.javascript.jscomp.DiagnosticType.error("JSC_ENUM_DUP", "enum element {0} already defined");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_NOT_CONSTANT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ENUM_NOT_CONSTANT", "enum key {0} must be a syntactic constant");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INVALID_INTERFACE_MEMBER_DECLARATION", "interface members can only be empty property declarations," + " empty functions{0}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_FUNCTION_NOT_EMPTY", "interface member functions must have an empty body");

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_EXTENDED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_EXTENDED_TYPE", "{0} cannot extend this type; " + ("a constructor can only extend objects " + "and an interface can only extend interfaces"));

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_IMPLEMENTED_TYPE", "{0} cannot implement this type; " + "an interface can only extend, but not implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType BAD_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_IMPLEMENTS_NON_INTERFACE", "can only implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY", "property {0} already defined on superclass {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_INTERFACE_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_INTERFACE_PROPERTY", "property {0} already defined on interface {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", "mismatch of the {0} property type and the type " + (("of the property it overrides from superclass {1}\n" + "original: {2}\n") + "override: {3}"));

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_OVERRIDE", "property {0} not defined on any superclass of {1}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_METHOD_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_METHOD_OVERRIDE", "property {0} is already defined by the {1} extended interface");

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_EXPR_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_EXPR_TYPE", "could not determine the type of this expression");

    static final com.google.javascript.jscomp.DiagnosticType UNRESOLVED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNRESOLVED_TYPE", "could not resolve the name {0} to a type");

    static final com.google.javascript.jscomp.DiagnosticType WRONG_ARGUMENT_COUNT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_WRONG_ARGUMENT_COUNT", "Function {0}: called with {1} argument(s). " + "Function requires at least {2} argument(s){3}.");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_IMPLICIT_CAST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ILLEGAL_IMPLICIT_CAST", "Illegal annotation on {0}. @implicitCast may only be used in " + "externs.");

    static final com.google.javascript.jscomp.DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", "Interface {0} has a property {1} with incompatible types in " + "its super interfaces {2} and {3}");

    static final com.google.javascript.jscomp.DiagnosticType EXPECTED_THIS_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_EXPECTED_THIS_TYPE", "\"{0}\" must be called with a \"this\" type");

    static final com.google.javascript.jscomp.DiagnosticGroup ALL_DIAGNOSTICS = new com.google.javascript.jscomp.DiagnosticGroup(com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF, com.google.javascript.jscomp.TypeCheck.ENUM_DUP, com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE, com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR, com.google.javascript.jscomp.TypedScopeCreator.UNKNOWN_LENDS, com.google.javascript.jscomp.TypedScopeCreator.LENDS_ON_NON_OBJECT, com.google.javascript.jscomp.TypedScopeCreator.CTOR_INITIALIZER, com.google.javascript.jscomp.TypedScopeCreator.IFACE_INITIALIZER, com.google.javascript.jscomp.FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.TypeValidator validator;

    private final com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private com.google.javascript.jscomp.Scope topScope;

    private com.google.javascript.jscomp.ScopeCreator scopeCreator;

    private final com.google.javascript.jscomp.CheckLevel reportMissingOverride;

    private final com.google.javascript.jscomp.CheckLevel reportUnknownTypes;

    private boolean reportMissingProperties = true;

    private com.google.javascript.jscomp.InferJSDocInfo inferJSDocInfo = null;

    private int typedCount = 0;

    private int nullCount = 0;

    private int unknownCount = 0;

    private boolean inExterns;

    private int noTypeCheckSection = 0;

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.Scope topScope, com.google.javascript.jscomp.ScopeCreator scopeCreator, com.google.javascript.jscomp.CheckLevel reportMissingOverride, com.google.javascript.jscomp.CheckLevel reportUnknownTypes) {
        this.compiler = compiler;
        this.validator = compiler.getTypeValidator();
        this.reverseInterpreter = reverseInterpreter;
        this.typeRegistry = typeRegistry;
        this.topScope = topScope;
        this.scopeCreator = scopeCreator;
        this.reportMissingOverride = reportMissingOverride;
        this.reportUnknownTypes = reportUnknownTypes;
        this.inferJSDocInfo = new com.google.javascript.jscomp.InferJSDocInfo(compiler);
    }

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.CheckLevel reportMissingOverride, com.google.javascript.jscomp.CheckLevel reportUnknownTypes) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, reportMissingOverride, reportUnknownTypes);
    }

    TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, com.google.javascript.jscomp.CheckLevel.WARNING, com.google.javascript.jscomp.CheckLevel.OFF);
    }

    com.google.javascript.jscomp.TypeCheck reportMissingProperties(boolean report) {
        reportMissingProperties = report;
        return this;
    }

    public void process(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkNotNull(scopeCreator);
        com.google.common.base.Preconditions.checkNotNull(topScope);
        com.google.javascript.rhino.Node externsAndJs = jsRoot.getParent();
        com.google.common.base.Preconditions.checkState(externsAndJs != null);
        com.google.common.base.Preconditions.checkState((externsRoot == null) || externsAndJs.hasChild(externsRoot));
        if (externsRoot != null) {
            check(externsRoot, true);
        }
        check(jsRoot, false);
    }

    public com.google.javascript.jscomp.Scope processForTesting(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkState(scopeCreator == null);
        com.google.common.base.Preconditions.checkState(topScope == null);
        com.google.common.base.Preconditions.checkState(jsRoot.getParent() != null);
        com.google.javascript.rhino.Node externsAndJsRoot = jsRoot.getParent();
        scopeCreator = new com.google.javascript.jscomp.MemoizedScopeCreator(new com.google.javascript.jscomp.TypedScopeCreator(compiler));
        topScope = scopeCreator.createScope(externsAndJsRoot, null);
        com.google.javascript.jscomp.TypeInferencePass inference = new com.google.javascript.jscomp.TypeInferencePass(compiler, reverseInterpreter, topScope, scopeCreator);
        inference.process(externsRoot, jsRoot);
        process(externsRoot, jsRoot);
        return topScope;
    }

    public void check(com.google.javascript.rhino.Node node, boolean externs) {
        com.google.common.base.Preconditions.checkNotNull(node);
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, this, scopeCreator);
        inExterns = externs;
        t.traverseWithScope(node, topScope);
        if (externs) {
            inferJSDocInfo.process(node, null);
        } else {
            inferJSDocInfo.process(null, node);
        }
    }

    private void checkNoTypeCheckSection(com.google.javascript.rhino.Node n, boolean enterSection) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.ASSIGN :
                com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
                if ((info != null) && info.isNoTypeCheck()) {
                    if (enterSection) {
                        noTypeCheckSection++;
                    } else {
                        noTypeCheckSection--;
                    }
                }
                validator.setShouldReport(noTypeCheckSection == 0);
                break;
        }
    }

    private void report(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType diagnosticType, java.lang.String... arguments) {
        if (noTypeCheckSection == 0) {
            t.report(n, diagnosticType, arguments);
        }
    }

    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        checkNoTypeCheckSection(n, true);
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                final com.google.javascript.jscomp.TypeCheck outerThis = this;
                final com.google.javascript.jscomp.Scope outerScope = t.getScope();
                final com.google.javascript.rhino.jstype.FunctionType functionType = ((com.google.javascript.rhino.jstype.FunctionType) (n.getJSType()));
                final java.lang.String functionPrivateName = n.getFirstChild().getString();
                if ((((functionPrivateName != null) && (functionPrivateName.length() > 0)) && outerScope.isDeclared(functionPrivateName, false)) && (!(outerScope.getVar(functionPrivateName).getType() instanceof com.google.javascript.rhino.jstype.FunctionType))) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, functionPrivateName);
                }
                break;
        }
        return true;
    }

    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.jstype.JSType childType;
        com.google.javascript.rhino.jstype.JSType leftType;
        com.google.javascript.rhino.jstype.JSType rightType;
        com.google.javascript.rhino.Node left;
        com.google.javascript.rhino.Node right;
        boolean typeable = true;
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                typeable = visitName(t, n, parent);
                break;
            case com.google.javascript.rhino.Token.LP :
                if (parent.getType() != com.google.javascript.rhino.Token.FUNCTION) {
                    ensureTyped(t, n, getJSType(n.getFirstChild()));
                } else {
                    typeable = false;
                }
                break;
            case com.google.javascript.rhino.Token.COMMA :
                ensureTyped(t, n, getJSType(n.getLastChild()));
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.THIS :
                ensureTyped(t, n, t.getScope().getTypeOfThis());
                break;
            case com.google.javascript.rhino.Token.REF_SPECIAL :
                ensureTyped(t, n);
                break;
            case com.google.javascript.rhino.Token.GET_REF :
                ensureTyped(t, n, getJSType(n.getFirstChild()));
                break;
            case com.google.javascript.rhino.Token.NULL :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING :
                if (!com.google.javascript.jscomp.NodeUtil.isObjectLitKey(n, n.getParent())) {
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                }
                break;
            case com.google.javascript.rhino.Token.GET :
            case com.google.javascript.rhino.Token.SET :
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE);
                break;
            case com.google.javascript.rhino.Token.REGEXP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                visitGetProp(t, n, parent);
                typeable = !((parent.getType() == com.google.javascript.rhino.Token.ASSIGN) && (parent.getFirstChild() == n));
                break;
            case com.google.javascript.rhino.Token.GETELEM :
                visitGetElem(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.VAR :
                visitVar(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.NEW :
                visitNew(t, n);
                typeable = true;
                break;
            case com.google.javascript.rhino.Token.CALL :
                visitCall(t, n);
                typeable = !com.google.javascript.jscomp.NodeUtil.isExpressionNode(parent);
                break;
            case com.google.javascript.rhino.Token.RETURN :
                visitReturn(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "increment/decrement");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.NOT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.VOID :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.BITNOT :
                childType = getJSType(n.getFirstChild());
                if (!childType.matchesInt32Context()) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), childType.toString());
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "sign operator");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
                {
                    leftType = getJSType(n.getFirstChild());
                    rightType = getJSType(n.getLastChild());
                    com.google.javascript.rhino.jstype.JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                    if (result != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                        if (n.getType() == com.google.javascript.rhino.Token.NE) {
                            result = result.not();
                        }
                        report(t, n, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                    }
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                    break;
                }
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                {
                    leftType = getJSType(n.getFirstChild());
                    rightType = getJSType(n.getLastChild());
                    com.google.javascript.rhino.jstype.JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                    if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                    }
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                    break;
                }
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                if (rightType.isNumber()) {
                    validator.expectNumber(t, n, leftType, "left side of numeric comparison");
                } else if (leftType.isNumber()) {
                    validator.expectNumber(t, n, rightType, "right side of numeric comparison");
                } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                } else {
                    java.lang.String message = "left side of comparison";
                    validator.expectString(t, n, leftType, message);
                    validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                    message = "right side of comparison";
                    validator.expectString(t, n, rightType, message);
                    validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.IN :
                left = n.getFirstChild();
                right = n.getLastChild();
                leftType = getJSType(left);
                rightType = getJSType(right);
                validator.expectObject(t, n, rightType, "'in' requires an object");
                validator.expectString(t, left, leftType, "left side of 'in'");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                left = n.getFirstChild();
                right = n.getLastChild();
                leftType = getJSType(left);
                rightType = getJSType(right).restrictByNotNullOrUndefined();
                validator.expectAnyObject(t, left, leftType, "deterministic instanceof yields false");
                validator.expectActualObject(t, right, rightType, "instanceof requires an object");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.ASSIGN :
                visitAssign(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.MUL :
                visitBinaryOperator(n.getType(), t, n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                if (!com.google.javascript.jscomp.TypeCheck.isReference(n.getFirstChild())) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.BAD_DELETE);
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.jstype.JSType switchType = getJSType(parent.getFirstChild());
                com.google.javascript.rhino.jstype.JSType caseType = getJSType(n.getFirstChild());
                validator.expectSwitchMatchesCase(t, n, switchType, caseType);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.WITH :
                {
                    com.google.javascript.rhino.Node child = n.getFirstChild();
                    childType = getJSType(child);
                    validator.expectObject(t, child, childType, "with requires an object");
                    typeable = false;
                    break;
                }
            case com.google.javascript.rhino.Token.FUNCTION :
                visitFunction(t, n);
                break;
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.LABEL_NAME :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.DEFAULT :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.DEBUGGER :
            case com.google.javascript.rhino.Token.THROW :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.OR :
                if (n.getJSType() != null) {
                    ensureTyped(t, n);
                } else if ((n.getType() == com.google.javascript.rhino.Token.OBJECTLIT) && (parent.getJSType() instanceof com.google.javascript.rhino.jstype.EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
                if (n.getType() == com.google.javascript.rhino.Token.OBJECTLIT) {
                    for (com.google.javascript.rhino.Node key : n.children()) {
                        visitObjLitKey(t, key, n);
                    }
                }
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(n.getType()));
                ensureTyped(t, n);
                break;
        }
        typeable = typeable && (!inExterns);
        if (typeable) {
            doPercentTypedAccounting(t, n);
        }
        checkNoTypeCheckSection(n, false);
    }

    private void doPercentTypedAccounting(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            nullCount++;
        } else if (type.isUnknownType()) {
            if (reportUnknownTypes.isOn()) {
                compiler.report(t.makeError(n, reportUnknownTypes, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE));
            }
            unknownCount++;
        } else {
            typedCount++;
        }
    }

    private void visitAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign) {
        com.google.javascript.rhino.JSDocInfo info = assign.getJSDocInfo();
        com.google.javascript.rhino.Node lvalue = assign.getFirstChild();
        com.google.javascript.rhino.Node rvalue = assign.getLastChild();
        if (lvalue.getType() == com.google.javascript.rhino.Token.GETPROP) {
            com.google.javascript.rhino.Node object = lvalue.getFirstChild();
            com.google.javascript.rhino.jstype.JSType objectJsType = getJSType(object);
            java.lang.String property = lvalue.getLastChild().getString();
            if (object.getType() == com.google.javascript.rhino.Token.GETPROP) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object.getFirstChild());
                if (jsType.isInterface() && object.getLastChild().getString().equals("prototype")) {
                    visitInterfaceGetprop(t, assign, object, property, lvalue, rvalue);
                }
            }
            if ((info != null) && info.hasType()) {
                visitAnnotatedAssignGetprop(t, assign, info.getType().evaluate(t.getScope(), typeRegistry), object, property, rvalue);
                return;
            }
            if ((info != null) && info.hasEnumParameterType()) {
                checkEnumInitializer(t, rvalue, info.getEnumParameterType().evaluate(t.getScope(), typeRegistry));
                return;
            }
            if (property.equals("prototype")) {
                if (objectJsType instanceof com.google.javascript.rhino.jstype.FunctionType) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = ((com.google.javascript.rhino.jstype.FunctionType) (objectJsType));
                    if (functionType.isConstructor()) {
                        com.google.javascript.rhino.jstype.JSType rvalueType = rvalue.getJSType();
                        validator.expectObject(t, rvalue, rvalueType, com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
                    }
                } else {
                }
                return;
            }
            if (object.getType() == com.google.javascript.rhino.Token.GETPROP) {
                com.google.javascript.rhino.Node object2 = object.getFirstChild();
                java.lang.String property2 = com.google.javascript.jscomp.NodeUtil.getStringValue(object.getLastChild());
                if ("prototype".equals(property2)) {
                    com.google.javascript.rhino.jstype.JSType jsType = object2.getJSType();
                    if (jsType instanceof com.google.javascript.rhino.jstype.FunctionType) {
                        com.google.javascript.rhino.jstype.FunctionType functionType = ((com.google.javascript.rhino.jstype.FunctionType) (jsType));
                        if (functionType.isConstructor() || functionType.isInterface()) {
                            checkDeclaredPropertyInheritance(t, assign, functionType, property, info, getJSType(rvalue));
                        }
                    } else {
                    }
                    return;
                }
            }
            com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objectJsType.restrictByNotNullOrUndefined());
            if (type != null) {
                if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!propertyIsImplicitCast(type, property))) {
                    validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), type.getPropertyType(property), object, property);
                }
                return;
            }
        } else if (lvalue.getType() == com.google.javascript.rhino.Token.NAME) {
            com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(assign.getLastChild());
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(lvalue.getString());
            if (var != null) {
                if (var.isTypeInferred()) {
                    return;
                }
            }
        }
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(lvalue);
        com.google.javascript.rhino.Node rightChild = assign.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(rightChild);
        if (validator.expectCanAssignTo(t, assign, rightType, leftType, "assignment")) {
            ensureTyped(t, assign, rightType);
        } else {
            ensureTyped(t, assign);
        }
    }

    private void visitObjLitKey(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node key, com.google.javascript.rhino.Node objlit) {
        com.google.javascript.rhino.Node rvalue = key.getFirstChild();
        com.google.javascript.rhino.jstype.JSType rightType = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyTypeFromValueType(key, getJSType(rvalue));
        if (rightType == null) {
            rightType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        com.google.javascript.rhino.Node owner = objlit;
        com.google.javascript.rhino.jstype.JSType keyType = getJSType(key);
        boolean valid = validator.expectCanAssignToPropertyOf(t, key, rightType, keyType, owner, com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key));
        if (valid) {
            ensureTyped(t, key, rightType);
        } else {
            ensureTyped(t, key);
        }
        com.google.javascript.rhino.jstype.JSType objlitType = getJSType(objlit);
        com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objlitType.restrictByNotNullOrUndefined());
        if (type != null) {
            java.lang.String property = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key);
            if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!propertyIsImplicitCast(type, property))) {
                validator.expectCanAssignToPropertyOf(t, key, keyType, type.getPropertyType(property), owner, property);
            }
            return;
        }
    }

    private boolean propertyIsImplicitCast(com.google.javascript.rhino.jstype.ObjectType type, java.lang.String prop) {
        for (; type != null; type = type.getImplicitPrototype()) {
            com.google.javascript.rhino.JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);
            if ((docInfo != null) && docInfo.isImplicitCast()) {
                return true;
            }
        }
        return false;
    }

    private void checkDeclaredPropertyInheritance(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.FunctionType ctorType, java.lang.String propertyName, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (com.google.javascript.jscomp.TypeCheck.hasUnknownOrEmptySupertype(ctorType)) {
            return;
        }
        com.google.javascript.rhino.jstype.FunctionType superClass = ctorType.getSuperClassConstructor();
        boolean superClassHasProperty = (superClass != null) && superClass.getPrototype().hasProperty(propertyName);
        boolean superInterfacesHasProperty = false;
        if (ctorType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                superInterfacesHasProperty = superInterfacesHasProperty || interfaceType.hasProperty(propertyName);
            }
        }
        boolean declaredOverride = (info != null) && info.isOverride();
        boolean foundInterfaceProperty = false;
        if (ctorType.isConstructor()) {
            for (com.google.javascript.rhino.jstype.JSType implementedInterface : ctorType.getAllImplementedInterfaces()) {
                if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {
                    continue;
                }
                com.google.javascript.rhino.jstype.FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();
                com.google.common.base.Preconditions.checkNotNull(interfaceType);
                boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);
                foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;
                if ((reportMissingOverride.isOn() && (!declaredOverride)) && interfaceHasProperty) {
                    compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));
                }
            }
        }
        if (((!declaredOverride) && (!superClassHasProperty)) && (!superInterfacesHasProperty)) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType topInstanceType = (superClassHasProperty) ? superClass.getTopMostDefiningType(propertyName) : null;
        if (((reportMissingOverride.isOn() && ctorType.isConstructor()) && (!declaredOverride)) && superClassHasProperty) {
            compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));
        }
        if (!declaredOverride) {
            return;
        }
        if (superClassHasProperty) {
            com.google.javascript.rhino.jstype.JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);
            if (!propertyType.canAssignTo(superClassPropType)) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));
            }
        } else if (superInterfacesHasProperty) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                if (interfaceType.hasProperty(propertyName)) {
                    com.google.javascript.rhino.jstype.JSType superPropertyType = interfaceType.getPropertyType(propertyName);
                    if (!propertyType.canAssignTo(superPropertyType)) {
                        topInstanceType = interfaceType.getConstructor().getTopMostDefiningType(propertyName);
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superPropertyType.toString(), propertyType.toString()));
                    }
                }
            }
        } else if (!foundInterfaceProperty) {
            compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));
        }
    }

    private static boolean hasUnknownOrEmptySupertype(com.google.javascript.rhino.jstype.FunctionType ctor) {
        com.google.common.base.Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());
        com.google.common.base.Preconditions.checkArgument(!ctor.isUnknownType());
        while (true) {
            com.google.javascript.rhino.jstype.ObjectType maybeSuperInstanceType = ctor.getPrototype().getImplicitPrototype();
            if (maybeSuperInstanceType == null) {
                return false;
            }
            if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {
                return true;
            }
            ctor = maybeSuperInstanceType.getConstructor();
            if (ctor == null) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());
        } 
    }

    private void visitInterfaceGetprop(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.Node lvalue, com.google.javascript.rhino.Node rvalue) {
        com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(rvalue);
        java.lang.String abstractMethodName = compiler.getCodingConvention().getAbstractMethodName();
        if ((!rvalueType.isOrdinaryFunction()) && (!(rvalue.isQualifiedName() && rvalue.getQualifiedName().equals(abstractMethodName)))) {
            java.lang.String abstractMethodMessage = (abstractMethodName != null) ? ", or " + abstractMethodName : "";
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, abstractMethodMessage));
        }
        if ((assign.getLastChild().getType() == com.google.javascript.rhino.Token.FUNCTION) && (!com.google.javascript.jscomp.NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))) {
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, abstractMethodName));
        }
    }

    private void visitAnnotatedAssignGetprop(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.Node rvalue) {
        validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), type, object, property);
    }

    boolean visitName(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        int parentNodeType = parent.getType();
        if ((((parentNodeType == com.google.javascript.rhino.Token.FUNCTION) || (parentNodeType == com.google.javascript.rhino.Token.CATCH)) || (parentNodeType == com.google.javascript.rhino.Token.LP)) || (parentNodeType == com.google.javascript.rhino.Token.VAR)) {
            return false;
        }
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            type = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(n.getString());
            if (var != null) {
                com.google.javascript.rhino.jstype.JSType varType = var.getType();
                if (varType != null) {
                    type = varType;
                }
            }
        }
        ensureTyped(t, n, type);
        return true;
    }

    private void visitGetProp(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if ((n.getJSType() != null) && (parent.getType() == com.google.javascript.rhino.Token.ASSIGN)) {
            return;
        }
        com.google.javascript.rhino.Node property = n.getLastChild();
        com.google.javascript.rhino.Node objNode = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(objNode);
        if (!validator.expectNotNullOrUndefined(t, n, childType, childType + " has no properties", getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE))) {
            ensureTyped(t, n);
            return;
        }
        checkPropertyAccess(childType, property.getString(), t, n);
        ensureTyped(t, n);
    }

    private void checkPropertyAccess(com.google.javascript.rhino.jstype.JSType childType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.ObjectType objectType = childType.dereference();
        if (objectType != null) {
            com.google.javascript.rhino.jstype.JSType propType = getJSType(n);
            if (((!objectType.hasProperty(propName)) || objectType.equals(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) && propType.equals(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
                if (objectType instanceof com.google.javascript.rhino.jstype.EnumType) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, propName);
                } else if (((!objectType.isEmptyType()) && reportMissingProperties) && (!isPropertyTest(n))) {
                    if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, propName, validator.getReadableJSTypeName(n.getFirstChild(), true));
                    }
                }
            }
        } else {
        }
    }

    private boolean isPropertyTest(com.google.javascript.rhino.Node getProp) {
        com.google.javascript.rhino.Node parent = getProp.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.CALL :
                return (parent.getFirstChild() != getProp) && compiler.getCodingConvention().isPropertyTestFunction(parent);
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
                return com.google.javascript.jscomp.NodeUtil.getConditionExpression(parent) == getProp;
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.TYPEOF :
                return true;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
                return parent.getFirstChild() == getProp;
            case com.google.javascript.rhino.Token.NOT :
                return (parent.getParent().getType() == com.google.javascript.rhino.Token.OR) && (parent.getParent().getFirstChild() == parent);
        }
        return false;
    }

    private void visitGetElem(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node right = n.getLastChild();
        validator.expectIndexMatch(t, n, getJSType(left), getJSType(right));
        ensureTyped(t, n);
    }

    private void visitVar(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo varInfo = (n.hasOneChild()) ? n.getJSDocInfo() : null;
        for (com.google.javascript.rhino.Node name : n.children()) {
            com.google.javascript.rhino.Node value = name.getFirstChild();
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(name.getString());
            if (value != null) {
                com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
                com.google.javascript.rhino.jstype.JSType nameType = var.getType();
                nameType = (nameType == null) ? getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE) : nameType;
                com.google.javascript.rhino.JSDocInfo info = name.getJSDocInfo();
                if (info == null) {
                    info = varInfo;
                }
                if ((info != null) && info.hasEnumParameterType()) {
                    checkEnumInitializer(t, value, info.getEnumParameterType().evaluate(t.getScope(), typeRegistry));
                } else if (var.isTypeInferred()) {
                    ensureTyped(t, name, valueType);
                } else {
                    validator.expectCanAssignTo(t, value, valueType, nameType, "initializing variable");
                }
            }
        }
    }

    private void visitNew(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node constructor = n.getFirstChild();
        com.google.javascript.rhino.jstype.FunctionType type = getFunctionType(constructor);
        if ((type != null) && type.isConstructor()) {
            visitParameterList(t, n, type);
            ensureTyped(t, n, type.getInstanceType());
        } else {
            if (constructor.getType() != com.google.javascript.rhino.Token.GETPROP) {
                com.google.javascript.rhino.Node line;
                if ((constructor.getLineno() < 0) || (constructor.getCharno() < 0)) {
                    line = n;
                } else {
                    line = constructor;
                }
                report(t, line, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);
            }
            ensureTyped(t, n);
        }
    }

    private void checkInterfaceConflictProperties(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String functionName, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties, com.google.javascript.rhino.jstype.ObjectType interfaceType) {
        java.util.Set<java.lang.String> currentPropertyNames = interfaceType.getPropertyNames();
        for (java.lang.String name : currentPropertyNames) {
            com.google.javascript.rhino.jstype.ObjectType oType = properties.get(name);
            if (oType != null) {
                if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));
                }
            }
            currentProperties.put(name, interfaceType);
        }
        for (com.google.javascript.rhino.jstype.ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
            checkInterfaceConflictProperties(t, n, functionName, properties, currentProperties, iType);
        }
    }

    private void visitFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.FunctionType functionType = ((com.google.javascript.rhino.jstype.FunctionType) (n.getJSType()));
        java.lang.String functionPrivateName = n.getFirstChild().getString();
        if (functionType.isConstructor()) {
            com.google.javascript.rhino.jstype.FunctionType baseConstructor = functionType.getPrototype().getImplicitPrototype().getConstructor();
            if (((baseConstructor != null) && (baseConstructor != getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE))) && (baseConstructor.isInterface() && functionType.isConstructor())) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, functionPrivateName));
            } else {
                for (com.google.javascript.rhino.jstype.JSType baseInterface : functionType.getImplementedInterfaces()) {
                    boolean badImplementedType = false;
                    com.google.javascript.rhino.jstype.ObjectType baseInterfaceObj = com.google.javascript.rhino.jstype.ObjectType.cast(baseInterface);
                    if (baseInterfaceObj != null) {
                        com.google.javascript.rhino.jstype.FunctionType interfaceConstructor = baseInterfaceObj.getConstructor();
                        if ((interfaceConstructor != null) && (!interfaceConstructor.isInterface())) {
                            badImplementedType = true;
                        }
                    } else {
                        badImplementedType = true;
                    }
                    if (badImplementedType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, functionPrivateName);
                    }
                }
                validator.expectAllInterfaceProperties(t, n, functionType);
            }
        } else if (functionType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType extInterface : functionType.getExtendedInterfaces()) {
                if ((extInterface.getConstructor() != null) && (!extInterface.getConstructor().isInterface())) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, functionPrivateName));
                }
            }
            if (functionType.hasImplementedInterfaces()) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));
            }
            if (functionType.getExtendedInterfacesCount() > 1) {
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                for (com.google.javascript.rhino.jstype.ObjectType interfaceType : functionType.getExtendedInterfaces()) {
                    currentProperties.clear();
                    checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);
                    properties.putAll(currentProperties);
                }
            }
        }
    }

    private void visitCall(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node child = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(child).restrictByNotNullOrUndefined();
        if (!childType.canBeCalled()) {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, childType.toString());
            ensureTyped(t, n);
            return;
        }
        if (childType instanceof com.google.javascript.rhino.jstype.FunctionType) {
            com.google.javascript.rhino.jstype.FunctionType functionType = ((com.google.javascript.rhino.jstype.FunctionType) (childType));
            boolean isExtern = false;
            com.google.javascript.rhino.JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
            if (functionJSDocInfo != null) {
                java.lang.String sourceName = functionJSDocInfo.getSourceName();
                com.google.javascript.jscomp.CompilerInput functionSource = compiler.getInput(sourceName);
                isExtern = functionSource.isExtern();
            }
            if ((functionType.isConstructor() && (!functionType.isNativeObjectType())) && ((functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType()) || (!isExtern))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, childType.toString());
            }
            if (((functionType.isOrdinaryFunction() && (!functionType.getTypeOfThis().isUnknownType())) && (!functionType.getTypeOfThis().isNativeObjectType())) && (!((child.getType() == com.google.javascript.rhino.Token.GETELEM) || (child.getType() == com.google.javascript.rhino.Token.GETPROP)))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, functionType.toString());
            }
            visitParameterList(t, n, functionType);
            ensureTyped(t, n, functionType.getReturnType());
        } else {
            ensureTyped(t, n);
        }
    }

    private void visitParameterList(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node call, com.google.javascript.rhino.jstype.FunctionType functionType) {
        java.util.Iterator<com.google.javascript.rhino.Node> arguments = call.children().iterator();
        arguments.next();
        java.util.Iterator<com.google.javascript.rhino.Node> parameters = functionType.getParameters().iterator();
        int ordinal = 0;
        com.google.javascript.rhino.Node parameter = null;
        com.google.javascript.rhino.Node argument = null;
        while (arguments.hasNext() && (parameters.hasNext() || ((parameter != null) && parameter.isVarArgs()))) {
            if (parameters.hasNext()) {
                parameter = parameters.next();
            }
            argument = arguments.next();
            ordinal++;
            validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);
        } 
        int numArgs = call.getChildCount() - 1;
        int minArgs = functionType.getMinArguments();
        int maxArgs = functionType.getMaxArguments();
        if ((minArgs > numArgs) || (maxArgs < numArgs)) {
            report(t, call, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), java.lang.String.valueOf(numArgs), java.lang.String.valueOf(minArgs), maxArgs != java.lang.Integer.MAX_VALUE ? (" and no more than " + maxArgs) + " argument(s)" : "");
        }
    }

    private void visitReturn(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node function = t.getEnclosingFunction();
        if (function == null) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType jsType = getJSType(function);
        if (jsType instanceof com.google.javascript.rhino.jstype.FunctionType) {
            com.google.javascript.rhino.jstype.FunctionType functionType = ((com.google.javascript.rhino.jstype.FunctionType) (jsType));
            com.google.javascript.rhino.jstype.JSType returnType = functionType.getReturnType();
            if (returnType == null) {
                returnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
            }
            com.google.javascript.rhino.Node valueNode = n.getFirstChild();
            com.google.javascript.rhino.jstype.JSType actualReturnType;
            if (valueNode == null) {
                actualReturnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                valueNode = n;
            } else {
                actualReturnType = getJSType(valueNode);
            }
            validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType, "inconsistent return type");
        }
    }

    private void visitBinaryOperator(int op, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(left);
        com.google.javascript.rhino.Node right = n.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(right);
        switch (op) {
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.URSH :
                if (!leftType.matchesInt32Context()) {
                    report(t, left, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), leftType.toString());
                }
                if (!rightType.matchesUint32Context()) {
                    report(t, right, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), rightType.toString());
                }
                break;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.SUB :
                validator.expectNumber(t, left, leftType, "left operand");
                validator.expectNumber(t, right, rightType, "right operand");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITOR :
                validator.expectBitwiseable(t, left, leftType, "bad left operand to bitwise operator");
                validator.expectBitwiseable(t, right, rightType, "bad right operand to bitwise operator");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ADD :
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Node.tokenToName(op));
        }
        ensureTyped(t, n);
    }

    private void checkEnumInitializer(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node value, com.google.javascript.rhino.jstype.JSType primitiveType) {
        if (value.getType() == com.google.javascript.rhino.Token.OBJECTLIT) {
            for (com.google.javascript.rhino.Node key = value.getFirstChild(); key != null; key = key.getNext()) {
                com.google.javascript.rhino.Node propValue = key.getFirstChild();
                validator.expectCanAssignTo(t, propValue, getJSType(propValue), primitiveType, "element type must match enum's type");
            }
        } else if (value.getJSType() instanceof com.google.javascript.rhino.jstype.EnumType) {
            com.google.javascript.rhino.jstype.EnumType valueEnumType = ((com.google.javascript.rhino.jstype.EnumType) (value.getJSType()));
            com.google.javascript.rhino.jstype.JSType valueEnumPrimitiveType = valueEnumType.getElementsType().getPrimitiveType();
            validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, primitiveType, "incompatible enum element types");
        } else {
        }
    }

    private static boolean isReference(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.NAME :
                return true;
            default :
                return false;
        }
    }

    private com.google.javascript.rhino.jstype.JSType getJSType(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType jsType = n.getJSType();
        if (jsType == null) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        } else {
            return jsType;
        }
    }

    private com.google.javascript.rhino.jstype.FunctionType getFunctionType(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType type = getJSType(n).restrictByNotNullOrUndefined();
        if (type.isUnknownType()) {
            return typeRegistry.getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative.U2U_CONSTRUCTOR_TYPE);
        } else if (type instanceof com.google.javascript.rhino.jstype.FunctionType) {
            return ((com.google.javascript.rhino.jstype.FunctionType) (type));
        } else {
            return null;
        }
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        ensureTyped(t, n, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSTypeNative type) {
        ensureTyped(t, n, getNativeType(type));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type) {
        com.google.common.base.Preconditions.checkState(((n.getType() != com.google.javascript.rhino.Token.FUNCTION) || (type instanceof com.google.javascript.rhino.jstype.FunctionType)) || type.isUnknownType());
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info != null) {
            if (info.hasType()) {
                com.google.javascript.rhino.jstype.JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);
                validator.expectCanCast(t, n, infoType, type);
                type = infoType;
            }
            if (info.isImplicitCast() && (!inExterns)) {
                java.lang.String propName = (n.getType() == com.google.javascript.rhino.Token.GETPROP) ? n.getLastChild().getString() : "(missing)";
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, propName));
            }
        }
        if (n.getJSType() == null) {
            n.setJSType(type);
        }
    }

    double getTypedPercent() {
        int total = (nullCount + unknownCount) + typedCount;
        if (total == 0) {
            return 0.0;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(0).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE",com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE",com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT",com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.this.compiler",com.google.javascript.jscomp.TypeCheck.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT",com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST",com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride",com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_DUP",com.google.javascript.jscomp.TypeCheck.ENUM_DUP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE",com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_DELETE",com.google.javascript.jscomp.TypeCheck.BAD_DELETE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.this.typeRegistry",com.google.javascript.jscomp.TypeCheck.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT",com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.this.scopeCreator",com.google.javascript.jscomp.TypeCheck.this.scopeCreator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.this.typedCount",com.google.javascript.jscomp.TypeCheck.this.typedCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("total",total);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY",com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE",com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.this.nullCount",com.google.javascript.jscomp.TypeCheck.this.nullCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION",com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.this.validator",com.google.javascript.jscomp.TypeCheck.this.validator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.this.inExterns",com.google.javascript.jscomp.TypeCheck.this.inExterns);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection",com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties",com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS",com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT",com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo",com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE",com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.this.topScope",com.google.javascript.jscomp.TypeCheck.this.topScope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY",com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR",com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF",com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter",com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN",com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes",com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.BIT_OPERATION",com.google.javascript.jscomp.TypeCheck.BIT_OPERATION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.TypeCheck.this.unknownCount",com.google.javascript.jscomp.TypeCheck.this.unknownCount);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectionEnds();
            }
            if (runtimeAngelicValue)
                return (100.0 * typedCount) / total;

        }
    }

    private com.google.javascript.rhino.jstype.JSType getNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return typeRegistry.getNativeType(typeId);
    }
}
[60843] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659899661177
GPR[SSUN]-1659899661177
-1797850673
GPR[SPVATF]-1659899661416
GPR[EPVATF]-1659899662995
GPR[SPS]-1659899662995
[63353] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1914.
GPR[EPS]-1659899663687
GPR[ESUN]-1659899663687
GPR[SSUN]-1659899663687
-1797850673
GPR[ESUN]-1659899663921
GPR[SSUN]-1659899663921
-1797850673
GPR[SPVATF]-1659899664149
GPR[EPVATF]-1659899665696
GPR[SPS]-1659899665696
[65986] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:943.
GPR[EPS]-1659899666320
GPR[ESUN]-1659899666320
GPR[SSUN]-1659899666320
-132053243
GPR[ESUN]-1659899666505
GPR[SSUN]-1659899666505
-132053243
GPR[SPVATF]-1659899666683
GPR[EPVATF]-1659899666700
[66366] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659899666700
GPR[EPVATF]-1659899666715
[66382] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899666716
GPR[SSUN]-1659899666716
-132053243
GPR[ESUN]-1659899667002
GPR[SSUN]-1659899667002
-132053243
GPR[SPVATF]-1659899667185
GPR[EPVATF]-1659899667211
[66877] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899667211
GPR[SSUN]-1659899667211
-132053243
GPR[SPVATF]-1659899667404
GPR[EPVATF]-1659899667421
[67087] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899667421
GPR[SSUN]-1659899667421
-132053243
GPR[SPVATF]-1659899667612
GPR[EPVATF]-1659899667629
[67295] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899667629
GPR[SSUN]-1659899667629
-132053243
GPR[SPVATF]-1659899667813
GPR[EPVATF]-1659899667831
[67497] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899667831
GPR[SSUN]-1659899667831
-132053243
GPR[ESUN]-1659899668009
GPR[SSUN]-1659899668009
-1797850673
GPR[ESUN]-1659899668239
GPR[SSUN]-1659899668239
-1797850673
GPR[SPVATF]-1659899668469
GPR[EPVATF]-1659899670113
GPR[SPS]-1659899670113
[70997] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:941.
GPR[EPS]-1659899671331
GPR[SPVATF]-1659899671332
GPR[EPVATF]-1659899672906
GPR[SPS]-1659899672906
[73167] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:941.
GPR[EPS]-1659899673501
GPR[ESUN]-1659899673501
GPR[SSUN]-1659899673501
-1797850673
GPR[ESUN]-1659899673730
GPR[SSUN]-1659899673730
-1797850673
GPR[ESUN]-1659899673967
GPR[SSUN]-1659899673967
-1797850673
GPR[ESUN]-1659899674195
GPR[SSUN]-1659899674195
-1966087783
GPR[ESUN]-1659899674372
GPR[SSUN]-1659899674372
-1966087783
GPR[SPVATF]-1659899674549
GPR[EPVATF]-1659899674567
[74233] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659899674567
GPR[EPVATF]-1659899674587
[74253] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899674587
GPR[SSUN]-1659899674587
-1966087783
GPR[SPVATF]-1659899674761
GPR[EPVATF]-1659899674779
[74445] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899674779
GPR[SSUN]-1659899674779
-1966087783
GPR[ESUN]-1659899674953
GPR[SSUN]-1659899674954
-1797850673
GPR[SPVATF]-1659899675180
GPR[EPVATF]-1659899676770
GPR[SPS]-1659899676770
[77023] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:930.
GPR[EPS]-1659899677357
GPR[SPVATF]-1659899677358
GPR[EPVATF]-1659899678922
GPR[SPS]-1659899678922
[79192] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:930.
GPR[EPS]-1659899679526
GPR[ESUN]-1659899679526
GPR[SSUN]-1659899679526
-1797850673
GPR[ESUN]-1659899679758
GPR[SSUN]-1659899679758
-1797850673
GPR[ESUN]-1659899679987
GPR[SSUN]-1659899679987
-1966087783
GPR[SPVATF]-1659899680163
GPR[EPVATF]-1659899680182
[79848] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659899680182
GPR[EPVATF]-1659899680200
[79866] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899680200
GPR[SSUN]-1659899680200
-1797850673
GPR[SPVATF]-1659899680430
GPR[EPVATF]-1659899682007
GPR[SPS]-1659899682007
GPR[EPS]-1659899686047
GPR[SPVATR]-1659899686047
[85713] INFO TestPatch - Applying patch: com.google.javascript.jscomp.TypeCheck:822: PRECONDITION com.google.javascript.jscomp.TypeCheck.this.inExterns
[86065] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.TypeCheck.this.inExterns" is working
GPR[EPVATR]-1659899688259
[87925] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659899688259
[87947] INFO NoPol - --- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -821,3 +821,5 @@
     if (type == null) {
-      nullCount++;
+      if (com.google.javascript.jscomp.TypeCheck.this.inExterns) {
+        nullCount++;
+      }
     } else if (type.isUnknownType()) {

Saving patch at /experiment_home///results/Nopol/Closure/66/seed_261/patch_83391_1ts_1659899688281.diff
GPR[ESUN]-1659899688282
GPR[SSUN]-1659899688282
-1797850673
GPR[SPVATF]-1659899688518
GPR[EPVATF]-1659899690115
GPR[SPS]-1659899690115
[90349] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1003.
GPR[EPS]-1659899690683
GPR[ESUN]-1659899690683
GPR[SSUN]-1659899690683
-1797850673
GPR[SPVATF]-1659899690950
GPR[EPVATF]-1659899693207
GPR[SPS]-1659899693208
[93447] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:996.
GPR[EPS]-1659899693781
GPR[SPVATF]-1659899693781
GPR[EPVATF]-1659899695394
GPR[SPS]-1659899695394
[95628] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:996.
GPR[EPS]-1659899695962
GPR[ESUN]-1659899695962
GPR[SSUN]-1659899695962
-1797850673
GPR[ESUN]-1659899696188
GPR[SSUN]-1659899696188
-1797850673
GPR[SPVATF]-1659899696413
GPR[EPVATF]-1659899697992
GPR[SPS]-1659899697992
[98242] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:980.
GPR[EPS]-1659899698576
GPR[ESUN]-1659899698576
GPR[SSUN]-1659899698576
-1797850673
GPR[SPVATF]-1659899698808
GPR[EPVATF]-1659899700386
GPR[SPS]-1659899700386
[100606] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:994.
GPR[EPS]-1659899700940
GPR[SPVATF]-1659899700940
GPR[EPVATF]-1659899702550
GPR[SPS]-1659899702550
[102767] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:994.
GPR[EPS]-1659899703101
GPR[ESUN]-1659899703101
GPR[SSUN]-1659899703101
-1797850673
GPR[ESUN]-1659899703334
GPR[SSUN]-1659899703334
-1797850673
GPR[ESUN]-1659899703567
GPR[SSUN]-1659899703567
-1797850673
GPR[SPVATF]-1659899703795
GPR[EPVATF]-1659899705454
GPR[SPS]-1659899705454
[105692] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:979.
GPR[EPS]-1659899706026
GPR[SPVATF]-1659899706026
GPR[EPVATF]-1659899707594
GPR[SPS]-1659899707594
[107842] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:979.
GPR[EPS]-1659899708176
GPR[ESUN]-1659899708176
GPR[SSUN]-1659899708176
-1797850673
GPR[ESUN]-1659899708406
GPR[SSUN]-1659899708406
-1797850673
GPR[ESUN]-1659899708684
GPR[SSUN]-1659899708684
-1797850673
GPR[ESUN]-1659899708916
GPR[SSUN]-1659899708916
-1797850673
GPR[SPVATF]-1659899709143
GPR[EPVATF]-1659899710712
GPR[SPS]-1659899710712
[110944] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:967.
GPR[EPS]-1659899711278
GPR[SPVATF]-1659899711278
GPR[EPVATF]-1659899712947
GPR[SPS]-1659899712947
[113171] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:967.
GPR[EPS]-1659899713505
GPR[ESUN]-1659899713505
GPR[SSUN]-1659899713505
-1797850673
GPR[ESUN]-1659899713743
GPR[SSUN]-1659899713743
-1797850673
GPR[ESUN]-1659899714049
GPR[SSUN]-1659899714049
-1797850673
GPR[ESUN]-1659899714282
GPR[SSUN]-1659899714282
-1797850673
GPR[SPVATF]-1659899714510
GPR[EPVATF]-1659899716242
GPR[SPS]-1659899716242
[116642] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:794.
GPR[EPS]-1659899716976
GPR[ESUN]-1659899716976
GPR[SSUN]-1659899716977
1187751237
GPR[SPVATF]-1659899717237
GPR[EPVATF]-1659899718824
GPR[SPS]-1659899718824
[119283] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2098.
GPR[EPS]-1659899719617
GPR[ESUN]-1659899719617
GPR[SSUN]-1659899719617
1187751237
GPR[ESUN]-1659899719869
GPR[SSUN]-1659899719869
1187751237
GPR[SPVATF]-1659899720123
GPR[EPVATF]-1659899722526
GPR[SPS]-1659899722526
[122931] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2097.
GPR[EPS]-1659899723265
GPR[SPVATF]-1659899723265
GPR[EPVATF]-1659899724938
GPR[SPS]-1659899724938
[125283] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2097.
GPR[EPS]-1659899725617
GPR[ESUN]-1659899725617
GPR[SSUN]-1659899725617
1187751237
GPR[ESUN]-1659899725866
GPR[SSUN]-1659899725866
1187751237
GPR[SPVATF]-1659899726111
GPR[EPVATF]-1659899727707
GPR[SPS]-1659899727707
[128084] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2083.
GPR[EPS]-1659899728418
GPR[ESUN]-1659899728418
GPR[SSUN]-1659899728418
466431456
GPR[SPVATF]-1659899728658
GPR[EPVATF]-1659899730242
GPR[SPS]-1659899730242
[130538] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:685.
GPR[EPS]-1659899730872
GPR[ESUN]-1659899730872
GPR[SSUN]-1659899730872
-2006084612
GPR[ESUN]-1659899731055
GPR[SSUN]-1659899731055
GPR[ESUN]-1659899731055
GPR[SSUN]-1659899731055
-179796259
GPR[SPVATF]-1659899731295
GPR[EPVATF]-1659899732375
GPR[SPS]-1659899732375
[132738] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:350.
GPR[EPS]-1659899733072
GPR[ESUN]-1659899733072
GPR[SSUN]-1659899733072
-179796259
GPR[ESUN]-1659899733297
GPR[SSUN]-1659899733297
-179796259
GPR[ESUN]-1659899733536
GPR[SSUN]-1659899733536
-1797850673
GPR[SPVATF]-1659899733760
GPR[EPVATF]-1659899735330
GPR[SPS]-1659899735330
[135400] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TypeCheck implements com.google.javascript.jscomp.NodeTraversal.Callback , com.google.javascript.jscomp.CompilerPass {
    static final com.google.javascript.jscomp.DiagnosticType UNEXPECTED_TOKEN = com.google.javascript.jscomp.DiagnosticType.error("JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN", "Internal Error: Don't know how to handle {0}");

    static final com.google.javascript.jscomp.DiagnosticType BAD_DELETE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_DELETE_OPERAND", "delete operator needs a reference operand");

    protected static final java.lang.String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT = "overriding prototype with non-object";

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST", "condition always evaluates to {2}\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST_NO_RESULT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST_NO_RESULT", "condition always evaluates to the same value\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_ENUM_ELEMENT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INEXISTENT_ENUM_ELEMENT", "element {0} does not exist on this enum");

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_PROPERTY = com.google.javascript.jscomp.DiagnosticType.disabled("JSC_INEXISTENT_PROPERTY", "Property {0} never defined on {1}");

    protected static final com.google.javascript.jscomp.DiagnosticType NOT_A_CONSTRUCTOR = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_A_CONSTRUCTOR", "cannot instantiate non-constructor");

    static final com.google.javascript.jscomp.DiagnosticType BIT_OPERATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_TYPE_FOR_BIT_OPERATION", "operator {0} cannot be applied to {1}");

    static final com.google.javascript.jscomp.DiagnosticType NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_FUNCTION_TYPE", "{0} expressions are not callable");

    static final com.google.javascript.jscomp.DiagnosticType CONSTRUCTOR_NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONSTRUCTOR_NOT_CALLABLE", "Constructor {0} should be called with the \"new\" keyword");

    static final com.google.javascript.jscomp.DiagnosticType FUNCTION_MASKS_VARIABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_FUNCTION_MASKS_VARIABLE", "function {0} masks variable (IE bug)");

    static final com.google.javascript.jscomp.DiagnosticType MULTIPLE_VAR_DEF = com.google.javascript.jscomp.DiagnosticType.warning("JSC_MULTIPLE_VAR_DEF", "declaration of multiple variables with shared type information");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_DUP = com.google.javascript.jscomp.DiagnosticType.error("JSC_ENUM_DUP", "enum element {0} already defined");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_NOT_CONSTANT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ENUM_NOT_CONSTANT", "enum key {0} must be a syntactic constant");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INVALID_INTERFACE_MEMBER_DECLARATION", "interface members can only be empty property declarations," + " empty functions{0}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_FUNCTION_NOT_EMPTY", "interface member functions must have an empty body");

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_EXTENDED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_EXTENDED_TYPE", "{0} cannot extend this type; " + ("a constructor can only extend objects " + "and an interface can only extend interfaces"));

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_IMPLEMENTED_TYPE", "{0} cannot implement this type; " + "an interface can only extend, but not implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType BAD_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_IMPLEMENTS_NON_INTERFACE", "can only implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY", "property {0} already defined on superclass {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_INTERFACE_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_INTERFACE_PROPERTY", "property {0} already defined on interface {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", "mismatch of the {0} property type and the type " + (("of the property it overrides from superclass {1}\n" + "original: {2}\n") + "override: {3}"));

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_OVERRIDE", "property {0} not defined on any superclass of {1}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_METHOD_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_METHOD_OVERRIDE", "property {0} is already defined by the {1} extended interface");

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_EXPR_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_EXPR_TYPE", "could not determine the type of this expression");

    static final com.google.javascript.jscomp.DiagnosticType UNRESOLVED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNRESOLVED_TYPE", "could not resolve the name {0} to a type");

    static final com.google.javascript.jscomp.DiagnosticType WRONG_ARGUMENT_COUNT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_WRONG_ARGUMENT_COUNT", "Function {0}: called with {1} argument(s). " + "Function requires at least {2} argument(s){3}.");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_IMPLICIT_CAST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ILLEGAL_IMPLICIT_CAST", "Illegal annotation on {0}. @implicitCast may only be used in " + "externs.");

    static final com.google.javascript.jscomp.DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", "Interface {0} has a property {1} with incompatible types in " + "its super interfaces {2} and {3}");

    static final com.google.javascript.jscomp.DiagnosticType EXPECTED_THIS_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_EXPECTED_THIS_TYPE", "\"{0}\" must be called with a \"this\" type");

    static final com.google.javascript.jscomp.DiagnosticGroup ALL_DIAGNOSTICS = new com.google.javascript.jscomp.DiagnosticGroup(com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF, com.google.javascript.jscomp.TypeCheck.ENUM_DUP, com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE, com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR, com.google.javascript.jscomp.TypedScopeCreator.UNKNOWN_LENDS, com.google.javascript.jscomp.TypedScopeCreator.LENDS_ON_NON_OBJECT, com.google.javascript.jscomp.TypedScopeCreator.CTOR_INITIALIZER, com.google.javascript.jscomp.TypedScopeCreator.IFACE_INITIALIZER, com.google.javascript.jscomp.FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.TypeValidator validator;

    private final com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private com.google.javascript.jscomp.Scope topScope;

    private com.google.javascript.jscomp.ScopeCreator scopeCreator;

    private final com.google.javascript.jscomp.CheckLevel reportMissingOverride;

    private final com.google.javascript.jscomp.CheckLevel reportUnknownTypes;

    private boolean reportMissingProperties = true;

    private com.google.javascript.jscomp.InferJSDocInfo inferJSDocInfo = null;

    private int typedCount = 0;

    private int nullCount = 0;

    private int unknownCount = 0;

    private boolean inExterns;

    private int noTypeCheckSection = 0;

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.Scope topScope, com.google.javascript.jscomp.ScopeCreator scopeCreator, com.google.javascript.jscomp.CheckLevel reportMissingOverride, com.google.javascript.jscomp.CheckLevel reportUnknownTypes) {
        this.compiler = compiler;
        this.validator = compiler.getTypeValidator();
        this.reverseInterpreter = reverseInterpreter;
        this.typeRegistry = typeRegistry;
        this.topScope = topScope;
        this.scopeCreator = scopeCreator;
        this.reportMissingOverride = reportMissingOverride;
        this.reportUnknownTypes = reportUnknownTypes;
        this.inferJSDocInfo = new com.google.javascript.jscomp.InferJSDocInfo(compiler);
    }

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.CheckLevel reportMissingOverride, com.google.javascript.jscomp.CheckLevel reportUnknownTypes) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, reportMissingOverride, reportUnknownTypes);
    }

    TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, com.google.javascript.jscomp.CheckLevel.WARNING, com.google.javascript.jscomp.CheckLevel.OFF);
    }

    com.google.javascript.jscomp.TypeCheck reportMissingProperties(boolean report) {
        reportMissingProperties = report;
        return this;
    }

    public void process(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkNotNull(scopeCreator);
        com.google.common.base.Preconditions.checkNotNull(topScope);
        com.google.javascript.rhino.Node externsAndJs = jsRoot.getParent();
        com.google.common.base.Preconditions.checkState(externsAndJs != null);
        com.google.common.base.Preconditions.checkState((externsRoot == null) || externsAndJs.hasChild(externsRoot));
        if (externsRoot != null) {
            check(externsRoot, true);
        }
        check(jsRoot, false);
    }

    public com.google.javascript.jscomp.Scope processForTesting(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkState(scopeCreator == null);
        com.google.common.base.Preconditions.checkState(topScope == null);
        com.google.common.base.Preconditions.checkState(jsRoot.getParent() != null);
        com.google.javascript.rhino.Node externsAndJsRoot = jsRoot.getParent();
        scopeCreator = new com.google.javascript.jscomp.MemoizedScopeCreator(new com.google.javascript.jscomp.TypedScopeCreator(compiler));
        topScope = scopeCreator.createScope(externsAndJsRoot, null);
        com.google.javascript.jscomp.TypeInferencePass inference = new com.google.javascript.jscomp.TypeInferencePass(compiler, reverseInterpreter, topScope, scopeCreator);
        inference.process(externsRoot, jsRoot);
        process(externsRoot, jsRoot);
        return topScope;
    }

    public void check(com.google.javascript.rhino.Node node, boolean externs) {
        com.google.common.base.Preconditions.checkNotNull(node);
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, this, scopeCreator);
        inExterns = externs;
        t.traverseWithScope(node, topScope);
        if (externs) {
            inferJSDocInfo.process(node, null);
        } else {
            inferJSDocInfo.process(null, node);
        }
    }

    private void checkNoTypeCheckSection(com.google.javascript.rhino.Node n, boolean enterSection) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.ASSIGN :
                com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
                if ((info != null) && info.isNoTypeCheck()) {
                    if (enterSection) {
                        noTypeCheckSection++;
                    } else {
                        noTypeCheckSection--;
                    }
                }
                validator.setShouldReport(noTypeCheckSection == 0);
                break;
        }
    }

    private void report(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType diagnosticType, java.lang.String... arguments) {
        if (noTypeCheckSection == 0) {
            t.report(n, diagnosticType, arguments);
        }
    }

    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        checkNoTypeCheckSection(n, true);
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                final com.google.javascript.jscomp.TypeCheck outerThis = this;
                final com.google.javascript.jscomp.Scope outerScope = t.getScope();
                final com.google.javascript.rhino.jstype.FunctionType functionType = ((com.google.javascript.rhino.jstype.FunctionType) (n.getJSType()));
                final java.lang.String functionPrivateName = n.getFirstChild().getString();
                if ((((functionPrivateName != null) && (functionPrivateName.length() > 0)) && outerScope.isDeclared(functionPrivateName, false)) && (!(outerScope.getVar(functionPrivateName).getType() instanceof com.google.javascript.rhino.jstype.FunctionType))) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, functionPrivateName);
                }
                break;
        }
        return true;
    }

    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.jstype.JSType childType;
        com.google.javascript.rhino.jstype.JSType leftType;
        com.google.javascript.rhino.jstype.JSType rightType;
        com.google.javascript.rhino.Node left;
        com.google.javascript.rhino.Node right;
        boolean typeable = true;
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                typeable = visitName(t, n, parent);
                break;
            case com.google.javascript.rhino.Token.LP :
                if (parent.getType() != com.google.javascript.rhino.Token.FUNCTION) {
                    ensureTyped(t, n, getJSType(n.getFirstChild()));
                } else {
                    typeable = false;
                }
                break;
            case com.google.javascript.rhino.Token.COMMA :
                ensureTyped(t, n, getJSType(n.getLastChild()));
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.THIS :
                ensureTyped(t, n, t.getScope().getTypeOfThis());
                break;
            case com.google.javascript.rhino.Token.REF_SPECIAL :
                ensureTyped(t, n);
                break;
            case com.google.javascript.rhino.Token.GET_REF :
                ensureTyped(t, n, getJSType(n.getFirstChild()));
                break;
            case com.google.javascript.rhino.Token.NULL :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING :
                if (!com.google.javascript.jscomp.NodeUtil.isObjectLitKey(n, n.getParent())) {
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                }
                break;
            case com.google.javascript.rhino.Token.GET :
            case com.google.javascript.rhino.Token.SET :
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE);
                break;
            case com.google.javascript.rhino.Token.REGEXP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                visitGetProp(t, n, parent);
                typeable = !((parent.getType() == com.google.javascript.rhino.Token.ASSIGN) && (parent.getFirstChild() == n));
                break;
            case com.google.javascript.rhino.Token.GETELEM :
                visitGetElem(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.VAR :
                visitVar(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.NEW :
                visitNew(t, n);
                typeable = true;
                break;
            case com.google.javascript.rhino.Token.CALL :
                visitCall(t, n);
                typeable = !com.google.javascript.jscomp.NodeUtil.isExpressionNode(parent);
                break;
            case com.google.javascript.rhino.Token.RETURN :
                visitReturn(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "increment/decrement");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.NOT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.VOID :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.BITNOT :
                childType = getJSType(n.getFirstChild());
                if (!childType.matchesInt32Context()) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), childType.toString());
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "sign operator");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
                {
                    leftType = getJSType(n.getFirstChild());
                    rightType = getJSType(n.getLastChild());
                    com.google.javascript.rhino.jstype.JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                    if (result != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                        if (n.getType() == com.google.javascript.rhino.Token.NE) {
                            result = result.not();
                        }
                        report(t, n, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                    }
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                    break;
                }
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                {
                    leftType = getJSType(n.getFirstChild());
                    rightType = getJSType(n.getLastChild());
                    com.google.javascript.rhino.jstype.JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                    if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                    }
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                    break;
                }
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                if (rightType.isNumber()) {
                    validator.expectNumber(t, n, leftType, "left side of numeric comparison");
                } else if (leftType.isNumber()) {
                    validator.expectNumber(t, n, rightType, "right side of numeric comparison");
                } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                } else {
                    java.lang.String message = "left side of comparison";
                    validator.expectString(t, n, leftType, message);
                    validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                    message = "right side of comparison";
                    validator.expectString(t, n, rightType, message);
                    validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.IN :
                left = n.getFirstChild();
                right = n.getLastChild();
                leftType = getJSType(left);
                rightType = getJSType(right);
                validator.expectObject(t, n, rightType, "'in' requires an object");
                validator.expectString(t, left, leftType, "left side of 'in'");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                left = n.getFirstChild();
                right = n.getLastChild();
                leftType = getJSType(left);
                rightType = getJSType(right).restrictByNotNullOrUndefined();
                validator.expectAnyObject(t, left, leftType, "deterministic instanceof yields false");
                validator.expectActualObject(t, right, rightType, "instanceof requires an object");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.ASSIGN :
                visitAssign(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.MUL :
                visitBinaryOperator(n.getType(), t, n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                if (!com.google.javascript.jscomp.TypeCheck.isReference(n.getFirstChild())) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.BAD_DELETE);
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.jstype.JSType switchType = getJSType(parent.getFirstChild());
                com.google.javascript.rhino.jstype.JSType caseType = getJSType(n.getFirstChild());
                validator.expectSwitchMatchesCase(t, n, switchType, caseType);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.WITH :
                {
                    com.google.javascript.rhino.Node child = n.getFirstChild();
                    childType = getJSType(child);
                    validator.expectObject(t, child, childType, "with requires an object");
                    typeable = false;
                    break;
                }
            case com.google.javascript.rhino.Token.FUNCTION :
                visitFunction(t, n);
                break;
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.LABEL_NAME :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.DEFAULT :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.DEBUGGER :
            case com.google.javascript.rhino.Token.THROW :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.OR :
                if (n.getJSType() != null) {
                    ensureTyped(t, n);
                } else if ((n.getType() == com.google.javascript.rhino.Token.OBJECTLIT) && (parent.getJSType() instanceof com.google.javascript.rhino.jstype.EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
                if (n.getType() == com.google.javascript.rhino.Token.OBJECTLIT) {
                    for (com.google.javascript.rhino.Node key : n.children()) {
                        visitObjLitKey(t, key, n);
                    }
                }
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(n.getType()));
                ensureTyped(t, n);
                break;
        }
        typeable = typeable && (!inExterns);
        if (typeable) {
            doPercentTypedAccounting(t, n);
        }
        checkNoTypeCheckSection(n, false);
    }

    private void doPercentTypedAccounting(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            nullCount++;
        } else if (type.isUnknownType()) {
            if (reportUnknownTypes.isOn()) {
                compiler.report(t.makeError(n, reportUnknownTypes, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE));
            }
            unknownCount++;
        } else {
            typedCount++;
        }
    }

    private void visitAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign) {
        com.google.javascript.rhino.JSDocInfo info = assign.getJSDocInfo();
        com.google.javascript.rhino.Node lvalue = assign.getFirstChild();
        com.google.javascript.rhino.Node rvalue = assign.getLastChild();
        if (lvalue.getType() == com.google.javascript.rhino.Token.GETPROP) {
            com.google.javascript.rhino.Node object = lvalue.getFirstChild();
            com.google.javascript.rhino.jstype.JSType objectJsType = getJSType(object);
            java.lang.String property = lvalue.getLastChild().getString();
            if (object.getType() == com.google.javascript.rhino.Token.GETPROP) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object.getFirstChild());
                if (jsType.isInterface() && object.getLastChild().getString().equals("prototype")) {
                    visitInterfaceGetprop(t, assign, object, property, lvalue, rvalue);
                }
            }
            if ((info != null) && info.hasType()) {
                visitAnnotatedAssignGetprop(t, assign, info.getType().evaluate(t.getScope(), typeRegistry), object, property, rvalue);
                return;
            }
            if ((info != null) && info.hasEnumParameterType()) {
                checkEnumInitializer(t, rvalue, info.getEnumParameterType().evaluate(t.getScope(), typeRegistry));
                return;
            }
            if (property.equals("prototype")) {
                if (objectJsType instanceof com.google.javascript.rhino.jstype.FunctionType) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = ((com.google.javascript.rhino.jstype.FunctionType) (objectJsType));
                    if (functionType.isConstructor()) {
                        com.google.javascript.rhino.jstype.JSType rvalueType = rvalue.getJSType();
                        validator.expectObject(t, rvalue, rvalueType, com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
                    }
                } else {
                }
                return;
            }
            if (object.getType() == com.google.javascript.rhino.Token.GETPROP) {
                com.google.javascript.rhino.Node object2 = object.getFirstChild();
                java.lang.String property2 = com.google.javascript.jscomp.NodeUtil.getStringValue(object.getLastChild());
                if ("prototype".equals(property2)) {
                    com.google.javascript.rhino.jstype.JSType jsType = object2.getJSType();
                    if (jsType instanceof com.google.javascript.rhino.jstype.FunctionType) {
                        com.google.javascript.rhino.jstype.FunctionType functionType = ((com.google.javascript.rhino.jstype.FunctionType) (jsType));
                        if (functionType.isConstructor() || functionType.isInterface()) {
                            checkDeclaredPropertyInheritance(t, assign, functionType, property, info, getJSType(rvalue));
                        }
                    } else {
                    }
                    return;
                }
            }
            com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objectJsType.restrictByNotNullOrUndefined());
            if (type != null) {
                if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!propertyIsImplicitCast(type, property))) {
                    validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), type.getPropertyType(property), object, property);
                }
                return;
            }
        } else if (lvalue.getType() == com.google.javascript.rhino.Token.NAME) {
            com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(assign.getLastChild());
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(lvalue.getString());
            if (var != null) {
                if (var.isTypeInferred()) {
                    return;
                }
            }
        }
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(lvalue);
        com.google.javascript.rhino.Node rightChild = assign.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(rightChild);
        if (validator.expectCanAssignTo(t, assign, rightType, leftType, "assignment")) {
            ensureTyped(t, assign, rightType);
        } else {
            ensureTyped(t, assign);
        }
    }

    private void visitObjLitKey(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node key, com.google.javascript.rhino.Node objlit) {
        com.google.javascript.rhino.Node rvalue = key.getFirstChild();
        com.google.javascript.rhino.jstype.JSType rightType = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyTypeFromValueType(key, getJSType(rvalue));
        if (rightType == null) {
            rightType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        com.google.javascript.rhino.Node owner = objlit;
        com.google.javascript.rhino.jstype.JSType keyType = getJSType(key);
        boolean valid = validator.expectCanAssignToPropertyOf(t, key, rightType, keyType, owner, com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key));
        if (valid) {
            ensureTyped(t, key, rightType);
        } else {
            ensureTyped(t, key);
        }
        com.google.javascript.rhino.jstype.JSType objlitType = getJSType(objlit);
        com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objlitType.restrictByNotNullOrUndefined());
        if (type != null) {
            java.lang.String property = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key);
            if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!propertyIsImplicitCast(type, property))) {
                validator.expectCanAssignToPropertyOf(t, key, keyType, type.getPropertyType(property), owner, property);
            }
            return;
        }
    }

    private boolean propertyIsImplicitCast(com.google.javascript.rhino.jstype.ObjectType type, java.lang.String prop) {
        for (; type != null; type = type.getImplicitPrototype()) {
            com.google.javascript.rhino.JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);
            if ((docInfo != null) && docInfo.isImplicitCast()) {
                return true;
            }
        }
        return false;
    }

    private void checkDeclaredPropertyInheritance(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.FunctionType ctorType, java.lang.String propertyName, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (com.google.javascript.jscomp.TypeCheck.hasUnknownOrEmptySupertype(ctorType)) {
            return;
        }
        com.google.javascript.rhino.jstype.FunctionType superClass = ctorType.getSuperClassConstructor();
        boolean superClassHasProperty = (superClass != null) && superClass.getPrototype().hasProperty(propertyName);
        boolean superInterfacesHasProperty = false;
        if (ctorType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                superInterfacesHasProperty = superInterfacesHasProperty || interfaceType.hasProperty(propertyName);
            }
        }
        boolean declaredOverride = (info != null) && info.isOverride();
        boolean foundInterfaceProperty = false;
        if (ctorType.isConstructor()) {
            for (com.google.javascript.rhino.jstype.JSType implementedInterface : ctorType.getAllImplementedInterfaces()) {
                if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {
                    continue;
                }
                com.google.javascript.rhino.jstype.FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();
                com.google.common.base.Preconditions.checkNotNull(interfaceType);
                boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);
                foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;
                if ((reportMissingOverride.isOn() && (!declaredOverride)) && interfaceHasProperty) {
                    compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));
                }
            }
        }
        if (((!declaredOverride) && (!superClassHasProperty)) && (!superInterfacesHasProperty)) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType topInstanceType = (superClassHasProperty) ? superClass.getTopMostDefiningType(propertyName) : null;
        if (((reportMissingOverride.isOn() && ctorType.isConstructor()) && (!declaredOverride)) && superClassHasProperty) {
            compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));
        }
        if (!declaredOverride) {
            return;
        }
        if (superClassHasProperty) {
            com.google.javascript.rhino.jstype.JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);
            if (!propertyType.canAssignTo(superClassPropType)) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));
            }
        } else if (superInterfacesHasProperty) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                if (interfaceType.hasProperty(propertyName)) {
                    com.google.javascript.rhino.jstype.JSType superPropertyType = interfaceType.getPropertyType(propertyName);
                    if (!propertyType.canAssignTo(superPropertyType)) {
                        topInstanceType = interfaceType.getConstructor().getTopMostDefiningType(propertyName);
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superPropertyType.toString(), propertyType.toString()));
                    }
                }
            }
        } else if (!foundInterfaceProperty) {
            compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));
        }
    }

    private static boolean hasUnknownOrEmptySupertype(com.google.javascript.rhino.jstype.FunctionType ctor) {
        com.google.common.base.Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());
        com.google.common.base.Preconditions.checkArgument(!ctor.isUnknownType());
        while (true) {
            com.google.javascript.rhino.jstype.ObjectType maybeSuperInstanceType = ctor.getPrototype().getImplicitPrototype();
            if (maybeSuperInstanceType == null) {
                return false;
            }
            if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {
                return true;
            }
            ctor = maybeSuperInstanceType.getConstructor();
            if (ctor == null) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());
        } 
    }

    private void visitInterfaceGetprop(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.Node lvalue, com.google.javascript.rhino.Node rvalue) {
        com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(rvalue);
        java.lang.String abstractMethodName = compiler.getCodingConvention().getAbstractMethodName();
        if ((!rvalueType.isOrdinaryFunction()) && (!(rvalue.isQualifiedName() && rvalue.getQualifiedName().equals(abstractMethodName)))) {
            java.lang.String abstractMethodMessage = (abstractMethodName != null) ? ", or " + abstractMethodName : "";
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, abstractMethodMessage));
        }
        if ((assign.getLastChild().getType() == com.google.javascript.rhino.Token.FUNCTION) && (!com.google.javascript.jscomp.NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))) {
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, abstractMethodName));
        }
    }

    private void visitAnnotatedAssignGetprop(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.Node rvalue) {
        validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), type, object, property);
    }

    boolean visitName(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        int parentNodeType = parent.getType();
        if ((((parentNodeType == com.google.javascript.rhino.Token.FUNCTION) || (parentNodeType == com.google.javascript.rhino.Token.CATCH)) || (parentNodeType == com.google.javascript.rhino.Token.LP)) || (parentNodeType == com.google.javascript.rhino.Token.VAR)) {
            return false;
        }
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            type = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(n.getString());
            if (var != null) {
                com.google.javascript.rhino.jstype.JSType varType = var.getType();
                if (varType != null) {
                    type = varType;
                }
            }
        }
        ensureTyped(t, n, type);
        return true;
    }

    private void visitGetProp(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if ((n.getJSType() != null) && (parent.getType() == com.google.javascript.rhino.Token.ASSIGN)) {
            return;
        }
        com.google.javascript.rhino.Node property = n.getLastChild();
        com.google.javascript.rhino.Node objNode = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(objNode);
        if (!validator.expectNotNullOrUndefined(t, n, childType, childType + " has no properties", getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE))) {
            ensureTyped(t, n);
            return;
        }
        checkPropertyAccess(childType, property.getString(), t, n);
        ensureTyped(t, n);
    }

    private void checkPropertyAccess(com.google.javascript.rhino.jstype.JSType childType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.ObjectType objectType = childType.dereference();
        if (objectType != null) {
            com.google.javascript.rhino.jstype.JSType propType = getJSType(n);
            if (((!objectType.hasProperty(propName)) || objectType.equals(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) && propType.equals(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
                if (objectType instanceof com.google.javascript.rhino.jstype.EnumType) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, propName);
                } else if (((!objectType.isEmptyType()) && reportMissingProperties) && (!isPropertyTest(n))) {
                    if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, propName, validator.getReadableJSTypeName(n.getFirstChild(), true));
                    }
                }
            }
        } else {
        }
    }

    private boolean isPropertyTest(com.google.javascript.rhino.Node getProp) {
        com.google.javascript.rhino.Node parent = getProp.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.CALL :
                return (parent.getFirstChild() != getProp) && compiler.getCodingConvention().isPropertyTestFunction(parent);
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
                return com.google.javascript.jscomp.NodeUtil.getConditionExpression(parent) == getProp;
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.TYPEOF :
                return true;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
                return parent.getFirstChild() == getProp;
            case com.google.javascript.rhino.Token.NOT :
                return (parent.getParent().getType() == com.google.javascript.rhino.Token.OR) && (parent.getParent().getFirstChild() == parent);
        }
        return false;
    }

    private void visitGetElem(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node right = n.getLastChild();
        validator.expectIndexMatch(t, n, getJSType(left), getJSType(right));
        ensureTyped(t, n);
    }

    private void visitVar(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo varInfo = (n.hasOneChild()) ? n.getJSDocInfo() : null;
        for (com.google.javascript.rhino.Node name : n.children()) {
            com.google.javascript.rhino.Node value = name.getFirstChild();
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(name.getString());
            if (value != null) {
                com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
                com.google.javascript.rhino.jstype.JSType nameType = var.getType();
                nameType = (nameType == null) ? getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE) : nameType;
                com.google.javascript.rhino.JSDocInfo info = name.getJSDocInfo();
                if (info == null) {
                    info = varInfo;
                }
                if ((info != null) && info.hasEnumParameterType()) {
                    checkEnumInitializer(t, value, info.getEnumParameterType().evaluate(t.getScope(), typeRegistry));
                } else if (var.isTypeInferred()) {
                    ensureTyped(t, name, valueType);
                } else {
                    validator.expectCanAssignTo(t, value, valueType, nameType, "initializing variable");
                }
            }
        }
    }

    private void visitNew(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node constructor = n.getFirstChild();
        com.google.javascript.rhino.jstype.FunctionType type = getFunctionType(constructor);
        if ((type != null) && type.isConstructor()) {
            visitParameterList(t, n, type);
            ensureTyped(t, n, type.getInstanceType());
        } else {
            if (constructor.getType() != com.google.javascript.rhino.Token.GETPROP) {
                com.google.javascript.rhino.Node line;
                if ((constructor.getLineno() < 0) || (constructor.getCharno() < 0)) {
                    line = n;
                } else {
                    line = constructor;
                }
                report(t, line, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);
            }
            ensureTyped(t, n);
        }
    }

    private void checkInterfaceConflictProperties(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String functionName, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties, com.google.javascript.rhino.jstype.ObjectType interfaceType) {
        java.util.Set<java.lang.String> currentPropertyNames = interfaceType.getPropertyNames();
        for (java.lang.String name : currentPropertyNames) {
            com.google.javascript.rhino.jstype.ObjectType oType = properties.get(name);
            if (oType != null) {
                if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));
                }
            }
            currentProperties.put(name, interfaceType);
        }
        for (com.google.javascript.rhino.jstype.ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
            checkInterfaceConflictProperties(t, n, functionName, properties, currentProperties, iType);
        }
    }

    private void visitFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.FunctionType functionType = ((com.google.javascript.rhino.jstype.FunctionType) (n.getJSType()));
        java.lang.String functionPrivateName = n.getFirstChild().getString();
        if (functionType.isConstructor()) {
            com.google.javascript.rhino.jstype.FunctionType baseConstructor = functionType.getPrototype().getImplicitPrototype().getConstructor();
            if (((baseConstructor != null) && (baseConstructor != getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE))) && (baseConstructor.isInterface() && functionType.isConstructor())) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, functionPrivateName));
            } else {
                for (com.google.javascript.rhino.jstype.JSType baseInterface : functionType.getImplementedInterfaces()) {
                    boolean badImplementedType = false;
                    com.google.javascript.rhino.jstype.ObjectType baseInterfaceObj = com.google.javascript.rhino.jstype.ObjectType.cast(baseInterface);
                    if (baseInterfaceObj != null) {
                        com.google.javascript.rhino.jstype.FunctionType interfaceConstructor = baseInterfaceObj.getConstructor();
                        if ((interfaceConstructor != null) && (!interfaceConstructor.isInterface())) {
                            badImplementedType = true;
                        }
                    } else {
                        badImplementedType = true;
                    }
                    if (badImplementedType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, functionPrivateName);
                    }
                }
                validator.expectAllInterfaceProperties(t, n, functionType);
            }
        } else if (functionType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType extInterface : functionType.getExtendedInterfaces()) {
                if ((extInterface.getConstructor() != null) && (!extInterface.getConstructor().isInterface())) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, functionPrivateName));
                }
            }
            if (functionType.hasImplementedInterfaces()) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));
            }
            if (functionType.getExtendedInterfacesCount() > 1) {
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                for (com.google.javascript.rhino.jstype.ObjectType interfaceType : functionType.getExtendedInterfaces()) {
                    currentProperties.clear();
                    checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);
                    properties.putAll(currentProperties);
                }
            }
        }
    }

    private void visitCall(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node child = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(child).restrictByNotNullOrUndefined();
        if (!childType.canBeCalled()) {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, childType.toString());
            ensureTyped(t, n);
            return;
        }
        if (childType instanceof com.google.javascript.rhino.jstype.FunctionType) {
            com.google.javascript.rhino.jstype.FunctionType functionType = ((com.google.javascript.rhino.jstype.FunctionType) (childType));
            boolean isExtern = false;
            com.google.javascript.rhino.JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
            if (functionJSDocInfo != null) {
                java.lang.String sourceName = functionJSDocInfo.getSourceName();
                com.google.javascript.jscomp.CompilerInput functionSource = compiler.getInput(sourceName);
                isExtern = functionSource.isExtern();
            }
            if ((functionType.isConstructor() && (!functionType.isNativeObjectType())) && ((functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType()) || (!isExtern))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, childType.toString());
            }
            if (((functionType.isOrdinaryFunction() && (!functionType.getTypeOfThis().isUnknownType())) && (!functionType.getTypeOfThis().isNativeObjectType())) && (!((child.getType() == com.google.javascript.rhino.Token.GETELEM) || (child.getType() == com.google.javascript.rhino.Token.GETPROP)))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, functionType.toString());
            }
            visitParameterList(t, n, functionType);
            ensureTyped(t, n, functionType.getReturnType());
        } else {
            ensureTyped(t, n);
        }
    }

    private void visitParameterList(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node call, com.google.javascript.rhino.jstype.FunctionType functionType) {
        java.util.Iterator<com.google.javascript.rhino.Node> arguments = call.children().iterator();
        arguments.next();
        java.util.Iterator<com.google.javascript.rhino.Node> parameters = functionType.getParameters().iterator();
        int ordinal = 0;
        com.google.javascript.rhino.Node parameter = null;
        com.google.javascript.rhino.Node argument = null;
        while (arguments.hasNext() && (parameters.hasNext() || ((parameter != null) && parameter.isVarArgs()))) {
            if (parameters.hasNext()) {
                parameter = parameters.next();
            }
            argument = arguments.next();
            ordinal++;
            validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);
        } 
        int numArgs = call.getChildCount() - 1;
        int minArgs = functionType.getMinArguments();
        int maxArgs = functionType.getMaxArguments();
        if ((minArgs > numArgs) || (maxArgs < numArgs)) {
            report(t, call, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), java.lang.String.valueOf(numArgs), java.lang.String.valueOf(minArgs), maxArgs != java.lang.Integer.MAX_VALUE ? (" and no more than " + maxArgs) + " argument(s)" : "");
        }
    }

    private void visitReturn(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node function = t.getEnclosingFunction();
        if (function == null) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType jsType = getJSType(function);
        if (jsType instanceof com.google.javascript.rhino.jstype.FunctionType) {
            com.google.javascript.rhino.jstype.FunctionType functionType = ((com.google.javascript.rhino.jstype.FunctionType) (jsType));
            com.google.javascript.rhino.jstype.JSType returnType = functionType.getReturnType();
            if (returnType == null) {
                returnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
            }
            com.google.javascript.rhino.Node valueNode = n.getFirstChild();
            com.google.javascript.rhino.jstype.JSType actualReturnType;
            if (valueNode == null) {
                actualReturnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                valueNode = n;
            } else {
                actualReturnType = getJSType(valueNode);
            }
            validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType, "inconsistent return type");
        }
    }

    private void visitBinaryOperator(int op, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(left);
        com.google.javascript.rhino.Node right = n.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(right);
        switch (op) {
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.URSH :
                if (!leftType.matchesInt32Context()) {
                    report(t, left, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), leftType.toString());
                }
                if (!rightType.matchesUint32Context()) {
                    report(t, right, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), rightType.toString());
                }
                break;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.SUB :
                validator.expectNumber(t, left, leftType, "left operand");
                validator.expectNumber(t, right, rightType, "right operand");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITOR :
                validator.expectBitwiseable(t, left, leftType, "bad left operand to bitwise operator");
                validator.expectBitwiseable(t, right, rightType, "bad right operand to bitwise operator");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ADD :
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Node.tokenToName(op));
        }
        ensureTyped(t, n);
    }

    private void checkEnumInitializer(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node value, com.google.javascript.rhino.jstype.JSType primitiveType) {
        if (value.getType() == com.google.javascript.rhino.Token.OBJECTLIT) {
            for (com.google.javascript.rhino.Node key = value.getFirstChild(); key != null; key = key.getNext()) {
                com.google.javascript.rhino.Node propValue = key.getFirstChild();
                validator.expectCanAssignTo(t, propValue, getJSType(propValue), primitiveType, "element type must match enum's type");
            }
        } else if (value.getJSType() instanceof com.google.javascript.rhino.jstype.EnumType) {
            com.google.javascript.rhino.jstype.EnumType valueEnumType = ((com.google.javascript.rhino.jstype.EnumType) (value.getJSType()));
            com.google.javascript.rhino.jstype.JSType valueEnumPrimitiveType = valueEnumType.getElementsType().getPrimitiveType();
            validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, primitiveType, "incompatible enum element types");
        } else {
        }
    }

    private static boolean isReference(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.NAME :
                return true;
            default :
                return false;
        }
    }

    private com.google.javascript.rhino.jstype.JSType getJSType(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType jsType = n.getJSType();
        if (jsType == null) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(25).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST",com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT",com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride",com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT",com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_DELETE",com.google.javascript.jscomp.TypeCheck.BAD_DELETE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.this.typeRegistry",com.google.javascript.jscomp.TypeCheck.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.this.typedCount",com.google.javascript.jscomp.TypeCheck.this.typedCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY",com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE",com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.this.nullCount",com.google.javascript.jscomp.TypeCheck.this.nullCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.this.inExterns",com.google.javascript.jscomp.TypeCheck.this.inExterns);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS",com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT",com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE",com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY",com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR",com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF",com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter",com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.BIT_OPERATION",com.google.javascript.jscomp.TypeCheck.BIT_OPERATION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE",com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE",com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT",com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.this.compiler",com.google.javascript.jscomp.TypeCheck.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE",com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_DUP",com.google.javascript.jscomp.TypeCheck.ENUM_DUP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.this.scopeCreator",com.google.javascript.jscomp.TypeCheck.this.scopeCreator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION",com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.this.validator",com.google.javascript.jscomp.TypeCheck.this.validator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection",com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties",com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo",com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.this.topScope",com.google.javascript.jscomp.TypeCheck.this.topScope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN",com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes",com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("jsType",jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.jscomp.TypeCheck.this.unknownCount",com.google.javascript.jscomp.TypeCheck.this.unknownCount);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectionEnds();
            }
            if (runtimeAngelicValue)
                return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);

        } else {
            return jsType;
        }
    }

    private com.google.javascript.rhino.jstype.FunctionType getFunctionType(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType type = getJSType(n).restrictByNotNullOrUndefined();
        if (type.isUnknownType()) {
            return typeRegistry.getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative.U2U_CONSTRUCTOR_TYPE);
        } else if (type instanceof com.google.javascript.rhino.jstype.FunctionType) {
            return ((com.google.javascript.rhino.jstype.FunctionType) (type));
        } else {
            return null;
        }
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        ensureTyped(t, n, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSTypeNative type) {
        ensureTyped(t, n, getNativeType(type));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type) {
        com.google.common.base.Preconditions.checkState(((n.getType() != com.google.javascript.rhino.Token.FUNCTION) || (type instanceof com.google.javascript.rhino.jstype.FunctionType)) || type.isUnknownType());
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info != null) {
            if (info.hasType()) {
                com.google.javascript.rhino.jstype.JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);
                validator.expectCanCast(t, n, infoType, type);
                type = infoType;
            }
            if (info.isImplicitCast() && (!inExterns)) {
                java.lang.String propName = (n.getType() == com.google.javascript.rhino.Token.GETPROP) ? n.getLastChild().getString() : "(missing)";
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, propName));
            }
        }
        if (n.getJSType() == null) {
            n.setJSType(type);
        }
    }

    double getTypedPercent() {
        int total = (nullCount + unknownCount) + typedCount;
        if (total == 0) {
            return 0.0;
        } else {
            return (100.0 * typedCount) / total;
        }
    }

    private com.google.javascript.rhino.jstype.JSType getNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return typeRegistry.getNativeType(typeId);
    }
}
[135400] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659899735734
GPR[SSUN]-1659899735734
-2006084612
GPR[ESUN]-1659899735964
GPR[SSUN]-1659899735964
646738083
GPR[SPVATF]-1659899736201
GPR[EPVATF]-1659899737239
GPR[SPS]-1659899737239
[137538] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:978.
GPR[EPS]-1659899737872
GPR[ESUN]-1659899737873
GPR[SSUN]-1659899737873
-2006084612
GPR[ESUN]-1659899738054
GPR[SSUN]-1659899738054
-2006084612
GPR[SPVATF]-1659899738234
GPR[EPVATF]-1659899739313
GPR[SPS]-1659899739313
[139428] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.EnumType:101.
GPR[EPS]-1659899739762
GPR[ESUN]-1659899739762
GPR[SSUN]-1659899739762
646738083
GPR[ESUN]-1659899740000
GPR[SSUN]-1659899740000
646738083
GPR[SPVATF]-1659899740293
GPR[EPVATF]-1659899741400
GPR[SPS]-1659899741400
[303027] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.OutOfMemoryError: GC overhead limit exceeded
GPR[ESUN]-1659899903361
GPR[SSUN]-1659899903361
\n\nNode: host-55\n
\n\nDate: Sun 07 Aug 2022 12:18:56 PM PDT\n
End running Nopol Closure/66 results at /experiment_home///results/Nopol/Closure/66/seed_261/
Removing checked out dir script/workingdir/Nopol/Closure_66
GPR[SSLE]-1659899936764
GPR[ESLE]-1659899996768
