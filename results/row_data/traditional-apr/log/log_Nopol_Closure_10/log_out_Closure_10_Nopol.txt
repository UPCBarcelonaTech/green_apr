Sleep 1m start
GPR[SSLI]-1659900706624
GPR[ESLI]-1659900766630
Running Nopol Closure 10b with approach: smt
Timezone: America/Los_Angeles
Seed 261
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/10/seed_261/
The file script/workingdir/Nopol/Closure_10 does not exist!
script/workingdir/Nopol/Closure_10
script/workingdir/Nopol/Closure_10
classpath:  script/workingdir/Nopol/Closure_10/build/classes:script/workingdir/Nopol/Closure_10/lib/args4j.jar:script/workingdir/Nopol/Closure_10/lib/guava.jar:script/workingdir/Nopol/Closure_10/lib/json.jar:script/workingdir/Nopol/Closure_10/lib/jsr305.jar:script/workingdir/Nopol/Closure_10/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_10/build/lib/rhino.jar:script/workingdir/Nopol/Closure_10/lib/ant.jar:script/workingdir/Nopol/Closure_10/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_10/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_10/lib/jarjar.jar:script/workingdir/Nopol/Closure_10/lib/junit.jar:script/workingdir/Nopol/Closure_10/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659900786060
GPR[ESLB]-1659900846064
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_10//build/classes:script/workingdir/Nopol/Closure_10//build/test:script/workingdir/Nopol/Closure_10/build/classes:script/workingdir/Nopol/Closure_10/lib/args4j.jar:script/workingdir/Nopol/Closure_10/lib/guava.jar:script/workingdir/Nopol/Closure_10/lib/json.jar:script/workingdir/Nopol/Closure_10/lib/jsr305.jar:script/workingdir/Nopol/Closure_10/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_10/build/lib/rhino.jar:script/workingdir/Nopol/Closure_10/lib/ant.jar:script/workingdir/Nopol/Closure_10/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_10/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_10/lib/jarjar.jar:script/workingdir/Nopol/Closure_10/lib/junit.jar:script/workingdir/Nopol/Closure_10/build/test
Node: host-45
Date init: Sun 07 Aug 2022 12:34:06 PM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_10/src]
[1] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_10/build/classes/, file:script/workingdir/Nopol/Closure_10/build/test/, file:script/workingdir/Nopol/Closure_10/build/classes/, file:script/workingdir/Nopol/Closure_10/lib/args4j.jar, file:script/workingdir/Nopol/Closure_10/lib/guava.jar, file:script/workingdir/Nopol/Closure_10/lib/json.jar, file:script/workingdir/Nopol/Closure_10/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_10/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_10/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_10/lib/ant.jar, file:script/workingdir/Nopol/Closure_10/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_10/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_10/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_10/lib/junit.jar, file:script/workingdir/Nopol/Closure_10/build/test/]
[1] INFO NoPol - Statement type: PRE_THEN_COND
[1] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[3] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_10/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/10/seed_261/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[7] INFO NoPol - Free memory: 1 GB
[7] INFO NoPol - Maximum memory: 7 GB
[7] INFO NoPol - Total memory available to JVM: 1 GB
[9] INFO NoPol - Java version: 1.8.0_45
[10] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[10] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659900851519
GPR[ESUP]-1659900851519
GPR[SFL]-1659900851519
GPR[EFL]-1659900892054
GPR[SFP]-1659900892054
GPR[SSUN]-1659900893895
-283827935
GPR[SPVATF]-1659900894435
GPR[EPVATF]-1659900894477
[47599] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900894477
GPR[SSUN]-1659900894477
944853999
GPR[ESUN]-1659900897125
GPR[SSUN]-1659900897126
80988634
GPR[ESUN]-1659900897313
GPR[SSUN]-1659900897313
-1966087783
GPR[ESUN]-1659900897519
GPR[SSUN]-1659900897519
-1966087783
GPR[SPVATF]-1659900897720
GPR[EPVATF]-1659900897801
[50923] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900897801
GPR[SSUN]-1659900897801
-1659631726
GPR[ESUN]-1659900897994
GPR[SSUN]-1659900897994
130004992
GPR[ESUN]-1659900898183
GPR[SSUN]-1659900898183
130004992
GPR[SPVATF]-1659900898374
GPR[EPVATF]-1659900898450
[51572] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900898450
GPR[SSUN]-1659900898450
130004992
GPR[ESUN]-1659900898637
GPR[SSUN]-1659900898637
-1966087783
GPR[SPVATF]-1659900898838
GPR[EPVATF]-1659900898907
[52029] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900898907
GPR[SSUN]-1659900898907
-1966087783
GPR[SPVATF]-1659900899114
GPR[EPVATF]-1659900899184
[52306] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900899184
GPR[SSUN]-1659900899184
890942016
GPR[ESUN]-1659900899389
GPR[SSUN]-1659900899389
890942016
GPR[SPVATF]-1659900899586
GPR[EPVATF]-1659900899654
[52776] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900899654
GPR[SSUN]-1659900899654
890942016
GPR[SPVATF]-1659900899854
GPR[EPVATF]-1659900899923
[53045] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900899924
GPR[EPVATF]-1659900899989
[53111] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900899989
GPR[SSUN]-1659900899989
890942016
GPR[ESUN]-1659900900198
GPR[SSUN]-1659900900198
890942016
GPR[ESUN]-1659900900403
GPR[SSUN]-1659900900403
-1966087783
GPR[ESUN]-1659900900600
GPR[SSUN]-1659900900600
-1966087783
GPR[SPVATF]-1659900900801
GPR[EPVATF]-1659900900868
[53990] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900900868
GPR[EPVATF]-1659900900937
[54059] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900900937
GPR[SSUN]-1659900900937
-1966087783
GPR[ESUN]-1659900901137
GPR[SSUN]-1659900901137
-1966087783
GPR[SPVATF]-1659900901346
GPR[EPVATF]-1659900901412
[54534] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900901412
GPR[EPVATF]-1659900901479
[54601] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900901479
GPR[SSUN]-1659900901479
-1966087783
GPR[ESUN]-1659900901680
GPR[SSUN]-1659900901680
-1966087783
GPR[ESUN]-1659900901883
GPR[SSUN]-1659900901883
-1966087783
GPR[ESUN]-1659900902083
GPR[SSUN]-1659900902084
1187751237
GPR[ESUN]-1659900902391
GPR[SSUN]-1659900902391
1613130706
GPR[ESUN]-1659900902608
GPR[SSUN]-1659900902608
1613130706
GPR[ESUN]-1659900902819
GPR[SSUN]-1659900902819
1613130706
GPR[SPVATF]-1659900903039
GPR[EPVATF]-1659900903278
[56400] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900903279
GPR[SSUN]-1659900903279
944853999
GPR[SPVATF]-1659900903539
GPR[EPVATF]-1659900904481
GPR[SPS]-1659900904481
[59248] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:820.
GPR[EPS]-1659900906126
GPR[ESUN]-1659900906126
GPR[SSUN]-1659900906126
944853999
GPR[SPVATF]-1659900906396
GPR[EPVATF]-1659900907298
GPR[SPS]-1659900907298
[61042] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:819.
GPR[EPS]-1659900907920
GPR[ESUN]-1659900907920
GPR[SSUN]-1659900907920
944853999
GPR[SPVATF]-1659900908180
GPR[EPVATF]-1659900909094
GPR[SPS]-1659900909094
[62819] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:818.
GPR[EPS]-1659900909697
GPR[ESUN]-1659900909697
GPR[SSUN]-1659900909697
944853999
GPR[SPVATF]-1659900909954
GPR[EPVATF]-1659900910846
GPR[SPS]-1659900910846
[64604] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:815.
GPR[EPS]-1659900911482
GPR[ESUN]-1659900911482
GPR[SSUN]-1659900911482
944853999
GPR[SPVATF]-1659900911737
GPR[EPVATF]-1659900912631
GPR[SPS]-1659900912631
[66352] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:813.
GPR[EPS]-1659900913231
GPR[ESUN]-1659900913231
GPR[SSUN]-1659900913231
944853999
GPR[SPVATF]-1659900913488
GPR[EPVATF]-1659900915039
GPR[SPS]-1659900915039
[68751] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:811.
GPR[EPS]-1659900915629
GPR[SPVATF]-1659900915629
GPR[EPVATF]-1659900916535
GPR[SPS]-1659900916535
[70213] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:811.
GPR[EPS]-1659900917091
GPR[ESUN]-1659900917092
GPR[SSUN]-1659900917092
944853999
GPR[SPVATF]-1659900917344
GPR[EPVATF]-1659900918254
GPR[SPS]-1659900918254
[72063] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:809.
GPR[EPS]-1659900918941
GPR[ESUN]-1659900918941
GPR[SSUN]-1659900918941
944853999
GPR[SPVATF]-1659900919202
GPR[EPVATF]-1659900920119
GPR[SPS]-1659900920120
[73798] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:808.
GPR[EPS]-1659900920677
GPR[ESUN]-1659900920677
GPR[SSUN]-1659900920677
944853999
GPR[SPVATF]-1659900920960
GPR[EPVATF]-1659900921870
GPR[SPS]-1659900921870
[75569] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:807.
GPR[EPS]-1659900922447
GPR[SPVATF]-1659900922447
GPR[EPVATF]-1659900923371
GPR[SPS]-1659900923371
[77065] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:807.
GPR[EPS]-1659900923943
GPR[ESUN]-1659900923943
GPR[SSUN]-1659900923943
944853999
GPR[ESUN]-1659900924192
GPR[SSUN]-1659900924192
944853999
GPR[ESUN]-1659900924444
GPR[SSUN]-1659900924444
944853999
GPR[ESUN]-1659900924697
GPR[SSUN]-1659900924697
944853999
GPR[ESUN]-1659900924950
GPR[SSUN]-1659900924950
944853999
GPR[SPVATF]-1659900925203
GPR[EPVATF]-1659900926115
GPR[SPS]-1659900926115
[79799] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:800.
GPR[EPS]-1659900926677
GPR[ESUN]-1659900926677
GPR[SSUN]-1659900926677
944853999
GPR[SPVATF]-1659900926932
GPR[EPVATF]-1659900927871
GPR[SPS]-1659900927871
[81461] ERROR ConstraintModelBuilder - Unable to compile the change: 
class PeepholeFoldConstants extends com.google.javascript.jscomp.AbstractPeepholeOptimization {
    static final com.google.javascript.jscomp.DiagnosticType INVALID_GETELEM_INDEX_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_INVALID_GETELEM_INDEX_ERROR", "Array index not integer: {0}");

    static final com.google.javascript.jscomp.DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_INDEX_OUT_OF_BOUNDS_ERROR", "Array index out of bounds: {0}");

    static final com.google.javascript.jscomp.DiagnosticType NEGATING_A_NON_NUMBER_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NEGATING_A_NON_NUMBER_ERROR", "Can't negate non-numeric value: {0}");

    static final com.google.javascript.jscomp.DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE = com.google.javascript.jscomp.DiagnosticType.error("JSC_BITWISE_OPERAND_OUT_OF_RANGE", "Operand out of range, bitwise operation will lose information: {0}");

    static final com.google.javascript.jscomp.DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = com.google.javascript.jscomp.DiagnosticType.error("JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS", "Shift amount out of bounds: {0}");

    static final com.google.javascript.jscomp.DiagnosticType FRACTIONAL_BITWISE_OPERAND = com.google.javascript.jscomp.DiagnosticType.error("JSC_FRACTIONAL_BITWISE_OPERAND", "Fractional bitwise operand: {0}");

    private static final double MAX_FOLD_NUMBER = java.lang.Math.pow(2, 53);

    private final boolean late;

    PeepholeFoldConstants(boolean late) {
        this.late = late;
    }

    @java.lang.Override
    com.google.javascript.rhino.Node optimizeSubtree(com.google.javascript.rhino.Node subtree) {
        switch (subtree.getType()) {
            case com.google.javascript.rhino.Token.NEW :
                return tryFoldCtorCall(subtree);
            case com.google.javascript.rhino.Token.TYPEOF :
                return tryFoldTypeof(subtree);
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.BITNOT :
                tryReduceOperandsForOp(subtree);
                return tryFoldUnaryOperator(subtree);
            case com.google.javascript.rhino.Token.VOID :
                return tryReduceVoid(subtree);
            default :
                tryReduceOperandsForOp(subtree);
                return tryFoldBinaryOperator(subtree);
        }
    }

    private com.google.javascript.rhino.Node tryFoldBinaryOperator(com.google.javascript.rhino.Node subtree) {
        com.google.javascript.rhino.Node left = subtree.getFirstChild();
        if (left == null) {
            return subtree;
        }
        com.google.javascript.rhino.Node right = left.getNext();
        if (right == null) {
            return subtree;
        }
        switch (subtree.getType()) {
            case com.google.javascript.rhino.Token.GETPROP :
                return tryFoldGetProp(subtree, left, right);
            case com.google.javascript.rhino.Token.GETELEM :
                return tryFoldGetElem(subtree, left, right);
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return tryFoldInstanceof(subtree, left, right);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return tryFoldAndOr(subtree, left, right);
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
                return tryFoldShift(subtree, left, right);
            case com.google.javascript.rhino.Token.ASSIGN :
                return tryFoldAssign(subtree, left, right);
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return tryUnfoldAssignOp(subtree, left, right);
            case com.google.javascript.rhino.Token.ADD :
                return tryFoldAdd(subtree, left, right);
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
                return tryFoldArithmeticOp(subtree, left, right);
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
                com.google.javascript.rhino.Node result = tryFoldArithmeticOp(subtree, left, right);
                if (result != subtree) {
                    return result;
                }
                return tryFoldLeftChildOp(subtree, left, right);
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return tryFoldComparison(subtree, left, right);
            default :
                return subtree;
        }
    }

    private com.google.javascript.rhino.Node tryReduceVoid(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node child = n.getFirstChild();
        if ((!child.isNumber()) || (child.getDouble() != 0.0)) {
            if (!mayHaveSideEffects(n)) {
                n.replaceChild(child, com.google.javascript.rhino.IR.number(0));
                reportCodeChange();
            }
        }
        return n;
    }

    private void tryReduceOperandsForOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                com.google.javascript.rhino.Node left = n.getFirstChild();
                com.google.javascript.rhino.Node right = n.getLastChild();
                if ((!com.google.javascript.jscomp.NodeUtil.mayBeString(left)) && (!com.google.javascript.jscomp.NodeUtil.mayBeString(right))) {
                    tryConvertOperandsToNumber(n);
                }
                break;
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                tryConvertToNumber(n.getLastChild());
                break;
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                tryConvertOperandsToNumber(n);
                break;
        }
    }

    private void tryConvertOperandsToNumber(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node next;
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = next) {
            next = c.getNext();
            tryConvertToNumber(c);
        }
    }

    private void tryConvertToNumber(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.NUMBER :
                return;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.COMMA :
                tryConvertToNumber(n.getLastChild());
                return;
            case com.google.javascript.rhino.Token.HOOK :
                tryConvertToNumber(n.getChildAtIndex(1));
                tryConvertToNumber(n.getLastChild());
                return;
            case com.google.javascript.rhino.Token.NAME :
                if (!com.google.javascript.jscomp.NodeUtil.isUndefined(n)) {
                    return;
                }
                break;
        }
        java.lang.Double result = com.google.javascript.jscomp.NodeUtil.getNumberValue(n);
        if (result == null) {
            return;
        }
        double value = result;
        com.google.javascript.rhino.Node replacement = com.google.javascript.jscomp.NodeUtil.numberNode(value, n);
        if (replacement.isEquivalentTo(n)) {
            return;
        }
        n.getParent().replaceChild(n, replacement);
        reportCodeChange();
    }

    private com.google.javascript.rhino.Node tryFoldTypeof(com.google.javascript.rhino.Node originalTypeofNode) {
        com.google.common.base.Preconditions.checkArgument(originalTypeofNode.isTypeOf());
        com.google.javascript.rhino.Node argumentNode = originalTypeofNode.getFirstChild();
        if ((argumentNode == null) || (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(argumentNode, true))) {
            return originalTypeofNode;
        }
        java.lang.String typeNameString = null;
        switch (argumentNode.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                typeNameString = "function";
                break;
            case com.google.javascript.rhino.Token.STRING :
                typeNameString = "string";
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                typeNameString = "number";
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                typeNameString = "boolean";
                break;
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.ARRAYLIT :
                typeNameString = "object";
                break;
            case com.google.javascript.rhino.Token.VOID :
                typeNameString = "undefined";
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ("undefined".equals(argumentNode.getString())) {
                    typeNameString = "undefined";
                }
                break;
        }
        if (typeNameString != null) {
            com.google.javascript.rhino.Node newNode = com.google.javascript.rhino.IR.string(typeNameString);
            originalTypeofNode.getParent().replaceChild(originalTypeofNode, newNode);
            reportCodeChange();
            return newNode;
        }
        return originalTypeofNode;
    }

    private com.google.javascript.rhino.Node tryFoldUnaryOperator(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.hasOneChild());
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node parent = n.getParent();
        if (left == null) {
            return n;
        }
        com.google.javascript.rhino.jstype.TernaryValue leftVal = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(left);
        if (leftVal == com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
            return n;
        }
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.NOT :
                if (late && left.isNumber()) {
                    double numValue = left.getDouble();
                    if ((numValue == 0) || (numValue == 1)) {
                        return n;
                    }
                }
                com.google.javascript.rhino.Node replacementNode = com.google.javascript.jscomp.NodeUtil.booleanNode(!leftVal.toBoolean(true));
                parent.replaceChild(n, replacementNode);
                reportCodeChange();
                return replacementNode;
            case com.google.javascript.rhino.Token.POS :
                if (com.google.javascript.jscomp.NodeUtil.isNumericResult(left)) {
                    parent.replaceChild(n, left.detachFromParent());
                    reportCodeChange();
                    return left;
                }
                return n;
            case com.google.javascript.rhino.Token.NEG :
                try {
                    if (left.isName()) {
                        if (left.getString().equals("Infinity")) {
                            return n;
                        } else if (left.getString().equals("NaN")) {
                            n.removeChild(left);
                            parent.replaceChild(n, left);
                            reportCodeChange();
                            return left;
                        }
                    }
                    double negNum = -left.getDouble();
                    com.google.javascript.rhino.Node negNumNode = com.google.javascript.rhino.IR.number(negNum);
                    parent.replaceChild(n, negNumNode);
                    reportCodeChange();
                    return negNumNode;
                } catch (java.lang.UnsupportedOperationException ex) {
                    error(com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR, left);
                    return n;
                }
            case com.google.javascript.rhino.Token.BITNOT :
                try {
                    double val = left.getDouble();
                    if ((val >= java.lang.Integer.MIN_VALUE) && (val <= java.lang.Integer.MAX_VALUE)) {
                        int intVal = ((int) (val));
                        if (intVal == val) {
                            com.google.javascript.rhino.Node notIntValNode = com.google.javascript.rhino.IR.number(~intVal);
                            parent.replaceChild(n, notIntValNode);
                            reportCodeChange();
                            return notIntValNode;
                        } else {
                            error(com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND, left);
                            return n;
                        }
                    } else {
                        error(com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE, left);
                        return n;
                    }
                } catch (java.lang.UnsupportedOperationException ex) {
                    error(com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR, left);
                    return n;
                }
            default :
                return n;
        }
    }

    private com.google.javascript.rhino.Node tryFoldInstanceof(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isInstanceOf());
        if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, true) && (!mayHaveSideEffects(right))) {
            com.google.javascript.rhino.Node replacementNode = null;
            if (com.google.javascript.jscomp.NodeUtil.isImmutableValue(left)) {
                replacementNode = com.google.javascript.rhino.IR.falseNode();
            } else if (right.isName() && "Object".equals(right.getString())) {
                replacementNode = com.google.javascript.rhino.IR.trueNode();
            }
            if (replacementNode != null) {
                n.getParent().replaceChild(n, replacementNode);
                reportCodeChange();
                return replacementNode;
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldAssign(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isAssign());
        if (!late) {
            return n;
        }
        if ((!right.hasChildren()) || (right.getFirstChild().getNext() != right.getLastChild())) {
            return n;
        }
        if (mayHaveSideEffects(left)) {
            return n;
        }
        com.google.javascript.rhino.Node newRight;
        if (areNodesEqualForInlining(left, right.getFirstChild())) {
            newRight = right.getLastChild();
        } else if (com.google.javascript.jscomp.NodeUtil.isCommutative(right.getType()) && areNodesEqualForInlining(left, right.getLastChild())) {
            newRight = right.getFirstChild();
        } else {
            return n;
        }
        int newType = -1;
        switch (right.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                newType = com.google.javascript.rhino.Token.ASSIGN_ADD;
                break;
            case com.google.javascript.rhino.Token.BITAND :
                newType = com.google.javascript.rhino.Token.ASSIGN_BITAND;
                break;
            case com.google.javascript.rhino.Token.BITOR :
                newType = com.google.javascript.rhino.Token.ASSIGN_BITOR;
                break;
            case com.google.javascript.rhino.Token.BITXOR :
                newType = com.google.javascript.rhino.Token.ASSIGN_BITXOR;
                break;
            case com.google.javascript.rhino.Token.DIV :
                newType = com.google.javascript.rhino.Token.ASSIGN_DIV;
                break;
            case com.google.javascript.rhino.Token.LSH :
                newType = com.google.javascript.rhino.Token.ASSIGN_LSH;
                break;
            case com.google.javascript.rhino.Token.MOD :
                newType = com.google.javascript.rhino.Token.ASSIGN_MOD;
                break;
            case com.google.javascript.rhino.Token.MUL :
                newType = com.google.javascript.rhino.Token.ASSIGN_MUL;
                break;
            case com.google.javascript.rhino.Token.RSH :
                newType = com.google.javascript.rhino.Token.ASSIGN_RSH;
                break;
            case com.google.javascript.rhino.Token.SUB :
                newType = com.google.javascript.rhino.Token.ASSIGN_SUB;
                break;
            case com.google.javascript.rhino.Token.URSH :
                newType = com.google.javascript.rhino.Token.ASSIGN_URSH;
                break;
            default :
                return n;
        }
        com.google.javascript.rhino.Node newNode = new com.google.javascript.rhino.Node(newType, left.detachFromParent(), newRight.detachFromParent());
        n.getParent().replaceChild(n, newNode);
        reportCodeChange();
        return newNode;
    }

    private com.google.javascript.rhino.Node tryUnfoldAssignOp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (late) {
            return n;
        }
        if ((!n.hasChildren()) || (n.getFirstChild().getNext() != n.getLastChild())) {
            return n;
        }
        if (mayHaveSideEffects(left)) {
            return n;
        }
        int op = com.google.javascript.jscomp.NodeUtil.getOpFromAssignmentOp(n);
        com.google.javascript.rhino.Node replacement = com.google.javascript.rhino.IR.assign(left.detachFromParent(), new com.google.javascript.rhino.Node(op, left.cloneTree(), right.detachFromParent()).srcref(n));
        n.getParent().replaceChild(n, replacement);
        reportCodeChange();
        return replacement;
    }

    private com.google.javascript.rhino.Node tryFoldAndOr(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.javascript.rhino.Node parent = n.getParent();
        com.google.javascript.rhino.Node result = null;
        int type = n.getType();
        com.google.javascript.rhino.jstype.TernaryValue leftVal = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(left);
        if (leftVal != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
            boolean lval = leftVal.toBoolean(true);
            if ((lval && (type == com.google.javascript.rhino.Token.OR)) || ((!lval) && (type == com.google.javascript.rhino.Token.AND))) {
                result = left;
            } else if (!mayHaveSideEffects(left)) {
                result = right;
            }
        }
        if (result != null) {
            n.removeChild(result);
            parent.replaceChild(n, result);
            reportCodeChange();
            return result;
        } else {
            return n;
        }
    }

    private com.google.javascript.rhino.Node tryFoldChildAddString(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(right, false) && left.isAdd()) {
            com.google.javascript.rhino.Node ll = left.getFirstChild();
            com.google.javascript.rhino.Node lr = ll.getNext();
            if (lr.isString()) {
                java.lang.String leftString = com.google.javascript.jscomp.NodeUtil.getStringValue(lr);
                java.lang.String rightString = com.google.javascript.jscomp.NodeUtil.getStringValue(right);
                if ((leftString != null) && (rightString != null)) {
                    left.removeChild(ll);
                    java.lang.String result = leftString + rightString;
                    n.replaceChild(left, ll);
                    n.replaceChild(right, com.google.javascript.rhino.IR.string(result));
                    reportCodeChange();
                    return n;
                }
            }
        }
        if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, false) && right.isAdd()) {
            com.google.javascript.rhino.Node rl = right.getFirstChild();
            com.google.javascript.rhino.Node rr = right.getLastChild();
            if (rl.isString()) {
                java.lang.String leftString = com.google.javascript.jscomp.NodeUtil.getStringValue(left);
                java.lang.String rightString = com.google.javascript.jscomp.NodeUtil.getStringValue(rl);
                if ((leftString != null) && (rightString != null)) {
                    right.removeChild(rr);
                    java.lang.String result = leftString + rightString;
                    n.replaceChild(right, rr);
                    n.replaceChild(left, com.google.javascript.rhino.IR.string(result));
                    reportCodeChange();
                    return n;
                }
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldAddConstantString(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (left.isString() || right.isString()) {
            java.lang.String leftString = com.google.javascript.jscomp.NodeUtil.getStringValue(left);
            java.lang.String rightString = com.google.javascript.jscomp.NodeUtil.getStringValue(right);
            if ((leftString != null) && (rightString != null)) {
                com.google.javascript.rhino.Node newStringNode = com.google.javascript.rhino.IR.string(leftString + rightString);
                n.getParent().replaceChild(n, newStringNode);
                reportCodeChange();
                return newStringNode;
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldArithmeticOp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.javascript.rhino.Node result = performArithmeticOp(n.getType(), left, right);
        if (result != null) {
            result.copyInformationFromForTree(n);
            n.getParent().replaceChild(n, result);
            reportCodeChange();
            return result;
        }
        return n;
    }

    private com.google.javascript.rhino.Node performArithmeticOp(int opType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if ((opType == com.google.javascript.rhino.Token.ADD) && (com.google.javascript.jscomp.NodeUtil.mayBeString(left, false) || com.google.javascript.jscomp.NodeUtil.mayBeString(right, false))) {
            return null;
        }
        double result;
        java.lang.Double lValObj = com.google.javascript.jscomp.NodeUtil.getNumberValue(left);
        if (lValObj == null) {
            return null;
        }
        java.lang.Double rValObj = com.google.javascript.jscomp.NodeUtil.getNumberValue(right);
        if (rValObj == null) {
            return null;
        }
        double lval = lValObj;
        double rval = rValObj;
        switch (opType) {
            case com.google.javascript.rhino.Token.BITAND :
                result = com.google.javascript.rhino.head.ScriptRuntime.toInt32(lval) & com.google.javascript.rhino.head.ScriptRuntime.toInt32(rval);
                break;
            case com.google.javascript.rhino.Token.BITOR :
                result = com.google.javascript.rhino.head.ScriptRuntime.toInt32(lval) | com.google.javascript.rhino.head.ScriptRuntime.toInt32(rval);
                break;
            case com.google.javascript.rhino.Token.BITXOR :
                result = com.google.javascript.rhino.head.ScriptRuntime.toInt32(lval) ^ com.google.javascript.rhino.head.ScriptRuntime.toInt32(rval);
                break;
            case com.google.javascript.rhino.Token.ADD :
                result = lval + rval;
                break;
            case com.google.javascript.rhino.Token.SUB :
                result = lval - rval;
                break;
            case com.google.javascript.rhino.Token.MUL :
                result = lval * rval;
                break;
            case com.google.javascript.rhino.Token.MOD :
                if (rval == 0) {
                    return null;
                }
                result = lval % rval;
                break;
            case com.google.javascript.rhino.Token.DIV :
                if (rval == 0) {
                    return null;
                }
                result = lval / rval;
                break;
            default :
                throw new java.lang.Error("Unexpected arithmetic operator");
        }
        if (((((java.lang.String.valueOf(result).length() <= ((java.lang.String.valueOf(lval).length() + java.lang.String.valueOf(rval).length()) + 1)) && (java.lang.Math.abs(result) <= com.google.javascript.jscomp.PeepholeFoldConstants.MAX_FOLD_NUMBER)) || java.lang.Double.isNaN(result)) || (result == java.lang.Double.POSITIVE_INFINITY)) || (result == java.lang.Double.NEGATIVE_INFINITY)) {
            return com.google.javascript.jscomp.NodeUtil.numberNode(result, null);
        }
        return null;
    }

    private com.google.javascript.rhino.Node tryFoldLeftChildOp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        int opType = n.getType();
        com.google.common.base.Preconditions.checkState((com.google.javascript.jscomp.NodeUtil.isAssociative(opType) && com.google.javascript.jscomp.NodeUtil.isCommutative(opType)) || n.isAdd());
        com.google.common.base.Preconditions.checkState((!n.isAdd()) || (!com.google.javascript.jscomp.NodeUtil.mayBeString(n)));
        java.lang.Double rightValObj = com.google.javascript.jscomp.NodeUtil.getNumberValue(right);
        if ((rightValObj != null) && (left.getType() == opType)) {
            com.google.common.base.Preconditions.checkState(left.getChildCount() == 2);
            com.google.javascript.rhino.Node ll = left.getFirstChild();
            com.google.javascript.rhino.Node lr = ll.getNext();
            com.google.javascript.rhino.Node valueToCombine = ll;
            com.google.javascript.rhino.Node replacement = performArithmeticOp(opType, valueToCombine, right);
            if (replacement == null) {
                valueToCombine = lr;
                replacement = performArithmeticOp(opType, valueToCombine, right);
            }
            if (replacement != null) {
                left.removeChild(valueToCombine);
                n.replaceChild(left, left.removeFirstChild());
                replacement.copyInformationFromForTree(right);
                n.replaceChild(right, replacement);
                reportCodeChange();
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldAdd(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(node.isAdd());
        if (com.google.javascript.jscomp.NodeUtil.mayBeString(node, true)) {
            if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, false) && com.google.javascript.jscomp.NodeUtil.isLiteralValue(right, false)) {
                return tryFoldAddConstantString(node, left, right);
            } else {
                return tryFoldChildAddString(node, left, right);
            }
        } else {
            com.google.javascript.rhino.Node result = tryFoldArithmeticOp(node, left, right);
            if (result != node) {
                return result;
            }
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(12).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("result",result);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("node",node);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR",com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR",com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("left",left);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS",com.google.javascript.jscomp.PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND",com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR",com.google.javascript.jscomp.PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("right",right);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE",com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.this.late",com.google.javascript.jscomp.PeepholeFoldConstants.this.late);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.MAX_FOLD_NUMBER",com.google.javascript.jscomp.PeepholeFoldConstants.MAX_FOLD_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectionEnds();
            }
            if (runtimeAngelicValue)
                return tryFoldLeftChildOp(node, left, right);

        }
    }

    private com.google.javascript.rhino.Node tryFoldShift(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (left.isNumber() && right.isNumber()) {
            double result;
            double lval = left.getDouble();
            double rval = right.getDouble();
            if (!((lval >= java.lang.Integer.MIN_VALUE) && (lval <= java.lang.Integer.MAX_VALUE))) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE, left);
                return n;
            }
            if (!((rval >= 0) && (rval < 32))) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
                return n;
            }
            int lvalInt = ((int) (lval));
            if (lvalInt != lval) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND, left);
                return n;
            }
            int rvalInt = ((int) (rval));
            if (rvalInt != rval) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND, right);
                return n;
            }
            switch (n.getType()) {
                case com.google.javascript.rhino.Token.LSH :
                    result = lvalInt << rvalInt;
                    break;
                case com.google.javascript.rhino.Token.RSH :
                    result = lvalInt >> rvalInt;
                    break;
                case com.google.javascript.rhino.Token.URSH :
                    long lvalLong = lvalInt & 0xffffffffL;
                    result = lvalLong >>> rvalInt;
                    break;
                default :
                    throw new java.lang.AssertionError("Unknown shift operator: " + com.google.javascript.rhino.Token.name(n.getType()));
            }
            com.google.javascript.rhino.Node newNumber = com.google.javascript.rhino.IR.number(result);
            n.getParent().replaceChild(n, newNumber);
            reportCodeChange();
            return newNumber;
        }
        return n;
    }

    @java.lang.SuppressWarnings("fallthrough")
    private com.google.javascript.rhino.Node tryFoldComparison(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        boolean leftLiteral = com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, true);
        boolean rightLiteral = com.google.javascript.jscomp.NodeUtil.isLiteralValue(right, true);
        if ((!leftLiteral) || (!rightLiteral)) {
            if ((n.getType() != com.google.javascript.rhino.Token.GT) && (n.getType() != com.google.javascript.rhino.Token.LT)) {
                return n;
            }
        }
        int op = n.getType();
        boolean result;
        boolean undefinedRight = com.google.javascript.jscomp.NodeUtil.isUndefined(right) && rightLiteral;
        boolean nullRight = right.isNull();
        int lhType = getNormalizedNodeType(left);
        int rhType = getNormalizedNodeType(right);
        switch (lhType) {
            case com.google.javascript.rhino.Token.VOID :
                if (!leftLiteral) {
                    return n;
                } else if (!rightLiteral) {
                    return n;
                } else {
                    result = compareToUndefined(right, op);
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
                if (rightLiteral && isEqualityOp(op)) {
                    result = compareToNull(right, op);
                    break;
                }
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                if (undefinedRight) {
                    result = compareToUndefined(left, op);
                    break;
                }
                if (((rhType != com.google.javascript.rhino.Token.TRUE) && (rhType != com.google.javascript.rhino.Token.FALSE)) && (rhType != com.google.javascript.rhino.Token.NULL)) {
                    return n;
                }
                switch (op) {
                    case com.google.javascript.rhino.Token.SHEQ :
                    case com.google.javascript.rhino.Token.EQ :
                        result = lhType == rhType;
                        break;
                    case com.google.javascript.rhino.Token.SHNE :
                    case com.google.javascript.rhino.Token.NE :
                        result = lhType != rhType;
                        break;
                    case com.google.javascript.rhino.Token.GE :
                    case com.google.javascript.rhino.Token.LE :
                    case com.google.javascript.rhino.Token.GT :
                    case com.google.javascript.rhino.Token.LT :
                        java.lang.Boolean compareResult = compareAsNumbers(op, left, right);
                        if (compareResult != null) {
                            result = compareResult;
                        } else {
                            return n;
                        }
                        break;
                    default :
                        return n;
                }
                break;
            case com.google.javascript.rhino.Token.THIS :
                if (!right.isThis()) {
                    return n;
                }
                switch (op) {
                    case com.google.javascript.rhino.Token.SHEQ :
                    case com.google.javascript.rhino.Token.EQ :
                        result = true;
                        break;
                    case com.google.javascript.rhino.Token.SHNE :
                    case com.google.javascript.rhino.Token.NE :
                        result = false;
                        break;
                    default :
                        return n;
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                if (undefinedRight) {
                    result = compareToUndefined(left, op);
                    break;
                }
                if (nullRight && isEqualityOp(op)) {
                    result = compareToNull(left, op);
                    break;
                }
                if (com.google.javascript.rhino.Token.STRING != right.getType()) {
                    return n;
                }
                com.google.javascript.rhino.jstype.TernaryValue ternary = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                switch (op) {
                    case com.google.javascript.rhino.Token.SHEQ :
                    case com.google.javascript.rhino.Token.EQ :
                        ternary = areStringsEqual(left.getString(), right.getString());
                        break;
                    case com.google.javascript.rhino.Token.SHNE :
                    case com.google.javascript.rhino.Token.NE :
                        ternary = areStringsEqual(left.getString(), right.getString()).not();
                        break;
                }
                if (ternary == com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return n;
                }
                result = ternary.toBoolean(true);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                if (undefinedRight) {
                    result = compareToUndefined(left, op);
                    break;
                }
                if (nullRight && isEqualityOp(op)) {
                    result = compareToNull(left, op);
                    break;
                }
                if (com.google.javascript.rhino.Token.NUMBER != right.getType()) {
                    return n;
                }
                java.lang.Boolean compareResult = compareAsNumbers(op, left, right);
                if (compareResult != null) {
                    result = compareResult;
                } else {
                    return null;
                }
                break;
            case com.google.javascript.rhino.Token.NAME :
                if (leftLiteral && undefinedRight) {
                    result = compareToUndefined(left, op);
                    break;
                }
                if (rightLiteral) {
                    boolean undefinedLeft = left.getString().equals("undefined");
                    if (undefinedLeft) {
                        result = compareToUndefined(right, op);
                        break;
                    }
                    if ((leftLiteral && nullRight) && isEqualityOp(op)) {
                        result = compareToNull(left, op);
                        break;
                    }
                }
                if (com.google.javascript.rhino.Token.NAME != right.getType()) {
                    return n;
                }
                java.lang.String ln = left.getString();
                java.lang.String rn = right.getString();
                if (!ln.equals(rn)) {
                    return n;
                }
                switch (op) {
                    case com.google.javascript.rhino.Token.LT :
                    case com.google.javascript.rhino.Token.GT :
                        result = false;
                        break;
                    default :
                        return n;
                }
                break;
            case com.google.javascript.rhino.Token.NEG :
                if (leftLiteral) {
                    if (undefinedRight) {
                        result = compareToUndefined(left, op);
                        break;
                    }
                    if (nullRight && isEqualityOp(op)) {
                        result = compareToNull(left, op);
                        break;
                    }
                }
                return n;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.FUNCTION :
                if (leftLiteral) {
                    if (undefinedRight) {
                        result = compareToUndefined(left, op);
                        break;
                    }
                    if (nullRight && isEqualityOp(op)) {
                        result = compareToNull(left, op);
                        break;
                    }
                }
                return n;
            default :
                return n;
        }
        com.google.javascript.rhino.Node newNode = com.google.javascript.jscomp.NodeUtil.booleanNode(result);
        n.getParent().replaceChild(n, newNode);
        reportCodeChange();
        return newNode;
    }

    private com.google.javascript.rhino.jstype.TernaryValue areStringsEqual(java.lang.String a, java.lang.String b) {
        if ((a.indexOf('\u000b') != (-1)) || (b.indexOf('\u000b') != (-1))) {
            return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        } else {
            return a.equals(b) ? com.google.javascript.rhino.jstype.TernaryValue.TRUE : com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        }
    }

    private int getNormalizedNodeType(com.google.javascript.rhino.Node n) {
        int type = n.getType();
        if (type == com.google.javascript.rhino.Token.NOT) {
            com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n);
            switch (value) {
                case TRUE :
                    return com.google.javascript.rhino.Token.TRUE;
                case FALSE :
                    return com.google.javascript.rhino.Token.FALSE;
            }
        }
        return type;
    }

    private java.lang.Boolean compareAsNumbers(int op, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        java.lang.Double leftValue = com.google.javascript.jscomp.NodeUtil.getNumberValue(left);
        if (leftValue == null) {
            return null;
        }
        java.lang.Double rightValue = com.google.javascript.jscomp.NodeUtil.getNumberValue(right);
        if (rightValue == null) {
            return null;
        }
        double lv = leftValue;
        double rv = rightValue;
        java.lang.Boolean result;
        switch (op) {
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.EQ :
                com.google.common.base.Preconditions.checkState(left.isNumber() && right.isNumber());
                result = lv == rv;
                break;
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.NE :
                com.google.common.base.Preconditions.checkState(left.isNumber() && right.isNumber());
                result = lv != rv;
                break;
            case com.google.javascript.rhino.Token.LE :
                result = lv <= rv;
                break;
            case com.google.javascript.rhino.Token.LT :
                result = lv < rv;
                break;
            case com.google.javascript.rhino.Token.GE :
                result = lv >= rv;
                break;
            case com.google.javascript.rhino.Token.GT :
                result = lv > rv;
                break;
            default :
                return null;
        }
        return result;
    }

    private boolean compareToUndefined(com.google.javascript.rhino.Node value, int op) {
        com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isLiteralValue(value, true));
        boolean valueUndefined = com.google.javascript.jscomp.NodeUtil.isUndefined(value);
        boolean valueNull = com.google.javascript.rhino.Token.NULL == value.getType();
        boolean equivalent = valueUndefined || valueNull;
        switch (op) {
            case com.google.javascript.rhino.Token.EQ :
                return equivalent;
            case com.google.javascript.rhino.Token.NE :
                return !equivalent;
            case com.google.javascript.rhino.Token.SHEQ :
                return valueUndefined;
            case com.google.javascript.rhino.Token.SHNE :
                return !valueUndefined;
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
                return false;
            default :
                throw new java.lang.IllegalStateException("unexpected.");
        }
    }

    private boolean isEqualityOp(int op) {
        switch (op) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return true;
        }
        return false;
    }

    private boolean compareToNull(com.google.javascript.rhino.Node value, int op) {
        boolean valueUndefined = com.google.javascript.jscomp.NodeUtil.isUndefined(value);
        boolean valueNull = com.google.javascript.rhino.Token.NULL == value.getType();
        boolean equivalent = valueUndefined || valueNull;
        switch (op) {
            case com.google.javascript.rhino.Token.EQ :
                return equivalent;
            case com.google.javascript.rhino.Token.NE :
                return !equivalent;
            case com.google.javascript.rhino.Token.SHEQ :
                return valueNull;
            case com.google.javascript.rhino.Token.SHNE :
                return !valueNull;
            default :
                throw new java.lang.IllegalStateException("unexpected.");
        }
    }

    private com.google.javascript.rhino.Node tryFoldCtorCall(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isNew());
        if (inForcedStringContext(n)) {
            return tryFoldInForcedStringContext(n);
        }
        return n;
    }

    private boolean inForcedStringContext(com.google.javascript.rhino.Node n) {
        if (n.getParent().isGetElem() && (n.getParent().getLastChild() == n)) {
            return true;
        }
        if (n.getParent().isAdd()) {
            return true;
        }
        return false;
    }

    private com.google.javascript.rhino.Node tryFoldInForcedStringContext(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isNew());
        com.google.javascript.rhino.Node objectType = n.getFirstChild();
        if (!objectType.isName()) {
            return n;
        }
        if (objectType.getString().equals("String")) {
            com.google.javascript.rhino.Node value = objectType.getNext();
            java.lang.String stringValue = null;
            if (value == null) {
                stringValue = "";
            } else {
                if (!com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                    return n;
                }
                stringValue = com.google.javascript.jscomp.NodeUtil.getStringValue(value);
            }
            if (stringValue == null) {
                return n;
            }
            com.google.javascript.rhino.Node parent = n.getParent();
            com.google.javascript.rhino.Node newString = com.google.javascript.rhino.IR.string(stringValue);
            parent.replaceChild(n, newString);
            newString.copyInformationFrom(parent);
            reportCodeChange();
            return newString;
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldGetElem(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isGetElem());
        if (left.isObjectLit()) {
            return tryFoldObjectPropAccess(n, left, right);
        }
        if (left.isArrayLit()) {
            return tryFoldArrayAccess(n, left, right);
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldGetProp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isGetProp());
        if (left.isObjectLit()) {
            return tryFoldObjectPropAccess(n, left, right);
        }
        if (right.isString() && right.getString().equals("length")) {
            int knownLength = -1;
            switch (left.getType()) {
                case com.google.javascript.rhino.Token.ARRAYLIT :
                    if (mayHaveSideEffects(left)) {
                        return n;
                    }
                    knownLength = left.getChildCount();
                    break;
                case com.google.javascript.rhino.Token.STRING :
                    knownLength = left.getString().length();
                    break;
                default :
                    return n;
            }
            com.google.common.base.Preconditions.checkState(knownLength != (-1));
            com.google.javascript.rhino.Node lengthNode = com.google.javascript.rhino.IR.number(knownLength);
            n.getParent().replaceChild(n, lengthNode);
            reportCodeChange();
            return lengthNode;
        }
        return n;
    }

    private boolean isAssignmentTarget(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        if (((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) || parent.isInc()) || parent.isDec()) {
            return true;
        }
        return false;
    }

    private com.google.javascript.rhino.Node tryFoldArrayAccess(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.javascript.rhino.Node parent = n.getParent();
        if (isAssignmentTarget(n)) {
            return n;
        }
        if (!right.isNumber()) {
            return n;
        }
        double index = right.getDouble();
        int intIndex = ((int) (index));
        if (intIndex != index) {
            error(com.google.javascript.jscomp.PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR, right);
            return n;
        }
        if (intIndex < 0) {
            error(com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR, right);
            return n;
        }
        com.google.javascript.rhino.Node current = left.getFirstChild();
        com.google.javascript.rhino.Node elem = null;
        for (int i = 0; current != null; i++) {
            if (i != intIndex) {
                if (mayHaveSideEffects(current)) {
                    return n;
                }
            } else {
                elem = current;
            }
            current = current.getNext();
        }
        if (elem == null) {
            error(com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR, right);
            return n;
        }
        if (elem.isEmpty()) {
            elem = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(elem);
        } else {
            left.removeChild(elem);
        }
        n.getParent().replaceChild(n, elem);
        reportCodeChange();
        return elem;
    }

    private com.google.javascript.rhino.Node tryFoldObjectPropAccess(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(com.google.javascript.jscomp.NodeUtil.isGet(n));
        if ((!left.isObjectLit()) || (!right.isString())) {
            return n;
        }
        if (isAssignmentTarget(n)) {
            return n;
        }
        com.google.javascript.rhino.Node key = null;
        com.google.javascript.rhino.Node value = null;
        for (com.google.javascript.rhino.Node c = left.getFirstChild(); c != null; c = c.getNext()) {
            if (c.getString().equals(right.getString())) {
                switch (c.getType()) {
                    case com.google.javascript.rhino.Token.SETTER_DEF :
                        continue;
                    case com.google.javascript.rhino.Token.GETTER_DEF :
                    case com.google.javascript.rhino.Token.STRING_KEY :
                        if ((value != null) && mayHaveSideEffects(value)) {
                            return n;
                        }
                        key = c;
                        value = key.getFirstChild();
                        break;
                    default :
                        throw new java.lang.IllegalStateException();
                }
            } else if (mayHaveSideEffects(c.getFirstChild())) {
                return n;
            }
        }
        if (value == null) {
            return n;
        }
        if (value.isFunction() && com.google.javascript.jscomp.NodeUtil.referencesThis(value)) {
            return n;
        }
        com.google.javascript.rhino.Node replacement = value.detachFromParent();
        if (key.isGetterDef()) {
            replacement = com.google.javascript.rhino.IR.call(replacement);
            replacement.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, true);
        }
        n.getParent().replaceChild(n, replacement);
        reportCodeChange();
        return n;
    }
}
[81462] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659900928340
GPR[SSUN]-1659900928340
944853999
GPR[ESUN]-1659900928591
GPR[SSUN]-1659900928591
944853999
GPR[SPVATF]-1659900928842
GPR[EPVATF]-1659900929761
GPR[SPS]-1659900929762
[84171] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:252.
GPR[EPS]-1659900931049
GPR[ESUN]-1659900931049
GPR[SSUN]-1659900931049
944853999
GPR[SPVATF]-1659900931307
GPR[EPVATF]-1659900932221
GPR[SPS]-1659900932221
[85900] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:251.
GPR[EPS]-1659900932778
GPR[ESUN]-1659900932778
GPR[SSUN]-1659900932778
234947553
GPR[ESUN]-1659900932976
GPR[SSUN]-1659900932976
234947553
GPR[SPVATF]-1659900933169
GPR[EPVATF]-1659900933233
[86355] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900933234
GPR[EPVATF]-1659900933298
[86420] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900933298
GPR[SSUN]-1659900933298
234947553
GPR[ESUN]-1659900933492
GPR[SSUN]-1659900933492
234947553
GPR[SPVATF]-1659900933691
GPR[EPVATF]-1659900933759
[86881] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900933759
GPR[EPVATF]-1659900933826
[86948] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900933826
GPR[SSUN]-1659900933826
234947553
GPR[SPVATF]-1659900934019
GPR[EPVATF]-1659900934081
[87203] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900934081
GPR[SSUN]-1659900934081
234947553
GPR[ESUN]-1659900934277
GPR[SSUN]-1659900934277
234947553
GPR[ESUN]-1659900934469
GPR[SSUN]-1659900934469
234947553
GPR[SPVATF]-1659900934662
GPR[EPVATF]-1659900934722
[87845] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900934723
GPR[SSUN]-1659900934723
234947553
GPR[SPVATF]-1659900934918
GPR[EPVATF]-1659900934980
[88102] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900934980
GPR[SSUN]-1659900934980
234947553
GPR[SPVATF]-1659900935174
GPR[EPVATF]-1659900935237
[88359] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900935237
GPR[SSUN]-1659900935237
234947553
GPR[ESUN]-1659900935431
GPR[SSUN]-1659900935431
234947553
GPR[ESUN]-1659900935621
GPR[SSUN]-1659900935621
234947553
GPR[SPVATF]-1659900935821
GPR[EPVATF]-1659900935883
[89005] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900935884
GPR[SSUN]-1659900935884
234947553
GPR[SPVATF]-1659900936075
GPR[EPVATF]-1659900936139
[89261] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900936139
GPR[SSUN]-1659900936139
234947553
GPR[ESUN]-1659900936332
GPR[SSUN]-1659900936332
234947553
GPR[SPVATF]-1659900936522
GPR[EPVATF]-1659900936585
[89707] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900936585
GPR[SSUN]-1659900936585
234947553
GPR[SPVATF]-1659900936781
GPR[EPVATF]-1659900936843
[89965] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900936843
GPR[SSUN]-1659900936843
234947553
GPR[ESUN]-1659900937033
GPR[SSUN]-1659900937033
890942016
GPR[SPVATF]-1659900937234
GPR[EPVATF]-1659900937302
[90424] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900937302
GPR[EPVATF]-1659900937368
[90490] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900937368
GPR[SSUN]-1659900937368
890942016
GPR[SPVATF]-1659900937568
GPR[EPVATF]-1659900937635
[90757] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900937635
GPR[SSUN]-1659900937635
890942016
GPR[ESUN]-1659900937832
GPR[SSUN]-1659900937832
890942016
GPR[SPVATF]-1659900938026
GPR[EPVATF]-1659900938092
[91214] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900938092
GPR[SSUN]-1659900938092
890942016
GPR[SPVATF]-1659900938291
GPR[EPVATF]-1659900938356
[91478] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900938357
GPR[EPVATF]-1659900938423
[91545] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900938423
GPR[SSUN]-1659900938423
890942016
GPR[SPVATF]-1659900938616
GPR[EPVATF]-1659900938683
[91805] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900938683
GPR[SSUN]-1659900938683
890942016
GPR[SPVATF]-1659900938879
GPR[EPVATF]-1659900938944
[92066] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900938945
GPR[EPVATF]-1659900939006
[92128] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900939006
GPR[SSUN]-1659900939006
890942016
GPR[ESUN]-1659900939202
GPR[SSUN]-1659900939202
890942016
GPR[SPVATF]-1659900939390
GPR[EPVATF]-1659900939457
[92579] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900939457
GPR[SSUN]-1659900939457
890942016
GPR[SPVATF]-1659900939660
GPR[EPVATF]-1659900939728
[92850] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900939728
GPR[SSUN]-1659900939728
890942016
GPR[SPVATF]-1659900939923
GPR[EPVATF]-1659900939990
[93112] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900939991
GPR[SSUN]-1659900939991
890942016
GPR[ESUN]-1659900940187
GPR[SSUN]-1659900940187
1613130706
GPR[SPVATF]-1659900940396
GPR[EPVATF]-1659900940623
[93745] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900940623
GPR[EPVATF]-1659900940848
[93970] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900940848
GPR[SSUN]-1659900940848
1613130706
GPR[SPVATF]-1659900941063
GPR[EPVATF]-1659900941292
[94414] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900941292
GPR[SSUN]-1659900941292
1613130706
GPR[SPVATF]-1659900941507
GPR[EPVATF]-1659900941735
[94857] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900941735
GPR[EPVATF]-1659900941959
[95081] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900941959
GPR[SSUN]-1659900941959
2433571
GPR[ESUN]-1659900942224
GPR[SSUN]-1659900942224
1187751237
GPR[ESUN]-1659900942506
GPR[SSUN]-1659900942506
1187751237
GPR[ESUN]-1659900942784
GPR[SSUN]-1659900942784
1187751237
GPR[ESUN]-1659900943073
GPR[SSUN]-1659900943073
1187751237
GPR[ESUN]-1659900943355
GPR[SSUN]-1659900943355
1187751237
GPR[ESUN]-1659900943634
GPR[SSUN]-1659900943634
1187751237
GPR[ESUN]-1659900943911
GPR[SSUN]-1659900943911
1187751237
GPR[ESUN]-1659900944188
GPR[SSUN]-1659900944188
1187751237
GPR[ESUN]-1659900944466
GPR[SSUN]-1659900944466
1187751237
GPR[SPVATF]-1659900944743
GPR[EPVATF]-1659900945648
GPR[SPS]-1659900945648
[99560] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:364.
GPR[EPS]-1659900946438
GPR[SPVATF]-1659900946438
GPR[EPVATF]-1659900947360
GPR[SPS]-1659900947360
[101216] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:364.
GPR[EPS]-1659900948094
GPR[ESUN]-1659900948094
GPR[SSUN]-1659900948094
1187751237
GPR[SPVATF]-1659900948372
GPR[EPVATF]-1659900949286
GPR[SPS]-1659900949286
[103133] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:354.
GPR[EPS]-1659900950011
GPR[SPVATF]-1659900950011
GPR[EPVATF]-1659900951000
GPR[SPS]-1659900951000
[104863] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:354.
GPR[EPS]-1659900951741
GPR[ESUN]-1659900951741
GPR[SSUN]-1659900951741
1187751237
GPR[SPVATF]-1659900952022
GPR[EPVATF]-1659900952963
GPR[SPS]-1659900952963
[106783] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:343.
GPR[EPS]-1659900953661
GPR[SPVATF]-1659900953662
GPR[EPVATF]-1659900954593
GPR[SPS]-1659900954593
[108416] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:343.
GPR[EPS]-1659900955294
GPR[ESUN]-1659900955294
GPR[SSUN]-1659900955294
1187751237
GPR[SPVATF]-1659900955571
GPR[EPVATF]-1659900956543
GPR[SPS]-1659900956543
[110366] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:339.
GPR[EPS]-1659900957244
GPR[SPVATF]-1659900957245
GPR[EPVATF]-1659900958191
GPR[SPS]-1659900958191
[112016] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:339.
GPR[EPS]-1659900958894
GPR[ESUN]-1659900958894
GPR[SSUN]-1659900958894
1187751237
GPR[ESUN]-1659900959171
GPR[SSUN]-1659900959171
1187751237
GPR[ESUN]-1659900959453
GPR[SSUN]-1659900959453
2433571
GPR[SPVATF]-1659900959690
GPR[EPVATF]-1659900960670
GPR[SPS]-1659900960670
[114518] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1462.
GPR[EPS]-1659900961396
GPR[ESUN]-1659900961396
GPR[SSUN]-1659900961396
2433571
GPR[SPVATF]-1659900961652
GPR[EPVATF]-1659900962634
GPR[SPS]-1659900962634
GPR[EPS]-1659900964755
GPR[SPVATR]-1659900964755
[117877] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1433: PRECONDITION node2.type <= 47
[118275] INFO TestPatch - Running test suite to check the patch "node2.type <= 47" is working
GPR[EPVATR]-1659900965470
[118592] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659900965470
[118627] INFO NoPol - --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1432,7 +1432,9 @@
       if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        if (node2.type <= 47) {
+          return "Node tree inequality:" +
+          "\nTree1:\n" + toStringTree() +
+          "\n\nTree2:\n" + node2.toStringTree() +
+          "\n\nSubtree1: " + diff.nodeA.toStringTree() +
+          "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/10/seed_261/patch_113986_1ts_1659900965505.diff
GPR[ESUN]-1659900965506
GPR[SSUN]-1659900965506
80988634
GPR[ESUN]-1659900965701
GPR[SSUN]-1659900965701
1187751237
GPR[SPVATF]-1659900965980
GPR[EPVATF]-1659900966906
GPR[SPS]-1659900966906
[120856] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:332.
GPR[EPS]-1659900967734
GPR[SPVATF]-1659900967735
GPR[EPVATF]-1659900968655
GPR[SPS]-1659900968655
[122471] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:332.
GPR[EPS]-1659900969349
GPR[ESUN]-1659900969349
GPR[SSUN]-1659900969350
1613130706
GPR[SPVATF]-1659900969561
GPR[EPVATF]-1659900969789
[122911] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900969789
GPR[EPVATF]-1659900970019
[123141] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900970020
GPR[SSUN]-1659900970020
1613130706
GPR[SPVATF]-1659900970228
GPR[EPVATF]-1659900970453
[123575] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900970454
GPR[EPVATF]-1659900970680
[123802] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900970680
GPR[SSUN]-1659900970680
1613130706
GPR[ESUN]-1659900970888
GPR[SSUN]-1659900970888
1613130706
GPR[ESUN]-1659900971096
GPR[SSUN]-1659900971096
1613130706
GPR[ESUN]-1659900971311
GPR[SSUN]-1659900971311
1613130706
GPR[ESUN]-1659900971516
GPR[SSUN]-1659900971516
1613130706
GPR[SPVATF]-1659900971724
GPR[EPVATF]-1659900971950
[125072] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900971950
GPR[EPVATF]-1659900972186
[125308] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900972186
GPR[SSUN]-1659900972186
1613130706
GPR[SPVATF]-1659900972402
GPR[EPVATF]-1659900972627
[125749] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900972627
GPR[SSUN]-1659900972627
1613130706
GPR[ESUN]-1659900972838
GPR[SSUN]-1659900972838
1613130706
GPR[SPVATF]-1659900973048
GPR[EPVATF]-1659900973276
[126398] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900973276
GPR[EPVATF]-1659900973508
[126630] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900973508
GPR[SSUN]-1659900973508
1613130706
GPR[ESUN]-1659900973730
GPR[SSUN]-1659900973730
1613130706
GPR[SPVATF]-1659900973944
GPR[EPVATF]-1659900974207
[127329] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900974207
GPR[EPVATF]-1659900974444
[127566] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900974444
GPR[SSUN]-1659900974444
-1966087783
GPR[ESUN]-1659900974638
GPR[SSUN]-1659900974638
-1966087783
GPR[SPVATF]-1659900974830
GPR[EPVATF]-1659900974898
[128020] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900974898
GPR[EPVATF]-1659900974965
[128087] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900974965
GPR[SSUN]-1659900974965
-1966087783
GPR[SPVATF]-1659900975159
GPR[EPVATF]-1659900975221
[128343] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900975221
GPR[SSUN]-1659900975221
944853999
GPR[ESUN]-1659900975479
GPR[SSUN]-1659900975479
944853999
GPR[SPVATF]-1659900975728
GPR[EPVATF]-1659900976640
GPR[SPS]-1659900976640
[130327] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:274.
GPR[EPS]-1659900977205
GPR[ESUN]-1659900977205
GPR[SSUN]-1659900977205
944853999
GPR[SPVATF]-1659900977457
GPR[EPVATF]-1659900978399
GPR[SPS]-1659900978399
[132151] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:273.
GPR[EPS]-1659900979029
GPR[ESUN]-1659900979029
GPR[SSUN]-1659900979029
944853999
GPR[SPVATF]-1659900979280
GPR[EPVATF]-1659900980293
GPR[SPS]-1659900980293
[133964] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:739.
GPR[EPS]-1659900980842
GPR[ESUN]-1659900980842
GPR[SSUN]-1659900980842
944853999
GPR[SPVATF]-1659900981095
GPR[EPVATF]-1659900982046
GPR[SPS]-1659900982047
[135551] ERROR ConstraintModelBuilder - Unable to compile the change: 
class PeepholeFoldConstants extends com.google.javascript.jscomp.AbstractPeepholeOptimization {
    static final com.google.javascript.jscomp.DiagnosticType INVALID_GETELEM_INDEX_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_INVALID_GETELEM_INDEX_ERROR", "Array index not integer: {0}");

    static final com.google.javascript.jscomp.DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_INDEX_OUT_OF_BOUNDS_ERROR", "Array index out of bounds: {0}");

    static final com.google.javascript.jscomp.DiagnosticType NEGATING_A_NON_NUMBER_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NEGATING_A_NON_NUMBER_ERROR", "Can't negate non-numeric value: {0}");

    static final com.google.javascript.jscomp.DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE = com.google.javascript.jscomp.DiagnosticType.error("JSC_BITWISE_OPERAND_OUT_OF_RANGE", "Operand out of range, bitwise operation will lose information: {0}");

    static final com.google.javascript.jscomp.DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = com.google.javascript.jscomp.DiagnosticType.error("JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS", "Shift amount out of bounds: {0}");

    static final com.google.javascript.jscomp.DiagnosticType FRACTIONAL_BITWISE_OPERAND = com.google.javascript.jscomp.DiagnosticType.error("JSC_FRACTIONAL_BITWISE_OPERAND", "Fractional bitwise operand: {0}");

    private static final double MAX_FOLD_NUMBER = java.lang.Math.pow(2, 53);

    private final boolean late;

    PeepholeFoldConstants(boolean late) {
        this.late = late;
    }

    @java.lang.Override
    com.google.javascript.rhino.Node optimizeSubtree(com.google.javascript.rhino.Node subtree) {
        switch (subtree.getType()) {
            case com.google.javascript.rhino.Token.NEW :
                return tryFoldCtorCall(subtree);
            case com.google.javascript.rhino.Token.TYPEOF :
                return tryFoldTypeof(subtree);
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.BITNOT :
                tryReduceOperandsForOp(subtree);
                return tryFoldUnaryOperator(subtree);
            case com.google.javascript.rhino.Token.VOID :
                return tryReduceVoid(subtree);
            default :
                tryReduceOperandsForOp(subtree);
                return tryFoldBinaryOperator(subtree);
        }
    }

    private com.google.javascript.rhino.Node tryFoldBinaryOperator(com.google.javascript.rhino.Node subtree) {
        com.google.javascript.rhino.Node left = subtree.getFirstChild();
        if (left == null) {
            return subtree;
        }
        com.google.javascript.rhino.Node right = left.getNext();
        if (right == null) {
            return subtree;
        }
        switch (subtree.getType()) {
            case com.google.javascript.rhino.Token.GETPROP :
                return tryFoldGetProp(subtree, left, right);
            case com.google.javascript.rhino.Token.GETELEM :
                return tryFoldGetElem(subtree, left, right);
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return tryFoldInstanceof(subtree, left, right);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return tryFoldAndOr(subtree, left, right);
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
                return tryFoldShift(subtree, left, right);
            case com.google.javascript.rhino.Token.ASSIGN :
                return tryFoldAssign(subtree, left, right);
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return tryUnfoldAssignOp(subtree, left, right);
            case com.google.javascript.rhino.Token.ADD :
                return tryFoldAdd(subtree, left, right);
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
                return tryFoldArithmeticOp(subtree, left, right);
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
                com.google.javascript.rhino.Node result = tryFoldArithmeticOp(subtree, left, right);
                if (result != subtree) {
                    return result;
                }
                return tryFoldLeftChildOp(subtree, left, right);
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return tryFoldComparison(subtree, left, right);
            default :
                return subtree;
        }
    }

    private com.google.javascript.rhino.Node tryReduceVoid(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node child = n.getFirstChild();
        if ((!child.isNumber()) || (child.getDouble() != 0.0)) {
            if (!mayHaveSideEffects(n)) {
                n.replaceChild(child, com.google.javascript.rhino.IR.number(0));
                reportCodeChange();
            }
        }
        return n;
    }

    private void tryReduceOperandsForOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                com.google.javascript.rhino.Node left = n.getFirstChild();
                com.google.javascript.rhino.Node right = n.getLastChild();
                if ((!com.google.javascript.jscomp.NodeUtil.mayBeString(left)) && (!com.google.javascript.jscomp.NodeUtil.mayBeString(right))) {
                    tryConvertOperandsToNumber(n);
                }
                break;
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                tryConvertToNumber(n.getLastChild());
                break;
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                tryConvertOperandsToNumber(n);
                break;
        }
    }

    private void tryConvertOperandsToNumber(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node next;
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = next) {
            next = c.getNext();
            tryConvertToNumber(c);
        }
    }

    private void tryConvertToNumber(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.NUMBER :
                return;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.COMMA :
                tryConvertToNumber(n.getLastChild());
                return;
            case com.google.javascript.rhino.Token.HOOK :
                tryConvertToNumber(n.getChildAtIndex(1));
                tryConvertToNumber(n.getLastChild());
                return;
            case com.google.javascript.rhino.Token.NAME :
                if (!com.google.javascript.jscomp.NodeUtil.isUndefined(n)) {
                    return;
                }
                break;
        }
        java.lang.Double result = com.google.javascript.jscomp.NodeUtil.getNumberValue(n);
        if (result == null) {
            return;
        }
        double value = result;
        com.google.javascript.rhino.Node replacement = com.google.javascript.jscomp.NodeUtil.numberNode(value, n);
        if (replacement.isEquivalentTo(n)) {
            return;
        }
        n.getParent().replaceChild(n, replacement);
        reportCodeChange();
    }

    private com.google.javascript.rhino.Node tryFoldTypeof(com.google.javascript.rhino.Node originalTypeofNode) {
        com.google.common.base.Preconditions.checkArgument(originalTypeofNode.isTypeOf());
        com.google.javascript.rhino.Node argumentNode = originalTypeofNode.getFirstChild();
        if ((argumentNode == null) || (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(argumentNode, true))) {
            return originalTypeofNode;
        }
        java.lang.String typeNameString = null;
        switch (argumentNode.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                typeNameString = "function";
                break;
            case com.google.javascript.rhino.Token.STRING :
                typeNameString = "string";
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                typeNameString = "number";
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                typeNameString = "boolean";
                break;
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.ARRAYLIT :
                typeNameString = "object";
                break;
            case com.google.javascript.rhino.Token.VOID :
                typeNameString = "undefined";
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ("undefined".equals(argumentNode.getString())) {
                    typeNameString = "undefined";
                }
                break;
        }
        if (typeNameString != null) {
            com.google.javascript.rhino.Node newNode = com.google.javascript.rhino.IR.string(typeNameString);
            originalTypeofNode.getParent().replaceChild(originalTypeofNode, newNode);
            reportCodeChange();
            return newNode;
        }
        return originalTypeofNode;
    }

    private com.google.javascript.rhino.Node tryFoldUnaryOperator(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.hasOneChild());
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node parent = n.getParent();
        if (left == null) {
            return n;
        }
        com.google.javascript.rhino.jstype.TernaryValue leftVal = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(left);
        if (leftVal == com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
            return n;
        }
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.NOT :
                if (late && left.isNumber()) {
                    double numValue = left.getDouble();
                    if ((numValue == 0) || (numValue == 1)) {
                        return n;
                    }
                }
                com.google.javascript.rhino.Node replacementNode = com.google.javascript.jscomp.NodeUtil.booleanNode(!leftVal.toBoolean(true));
                parent.replaceChild(n, replacementNode);
                reportCodeChange();
                return replacementNode;
            case com.google.javascript.rhino.Token.POS :
                if (com.google.javascript.jscomp.NodeUtil.isNumericResult(left)) {
                    parent.replaceChild(n, left.detachFromParent());
                    reportCodeChange();
                    return left;
                }
                return n;
            case com.google.javascript.rhino.Token.NEG :
                try {
                    if (left.isName()) {
                        if (left.getString().equals("Infinity")) {
                            return n;
                        } else if (left.getString().equals("NaN")) {
                            n.removeChild(left);
                            parent.replaceChild(n, left);
                            reportCodeChange();
                            return left;
                        }
                    }
                    double negNum = -left.getDouble();
                    com.google.javascript.rhino.Node negNumNode = com.google.javascript.rhino.IR.number(negNum);
                    parent.replaceChild(n, negNumNode);
                    reportCodeChange();
                    return negNumNode;
                } catch (java.lang.UnsupportedOperationException ex) {
                    error(com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR, left);
                    return n;
                }
            case com.google.javascript.rhino.Token.BITNOT :
                try {
                    double val = left.getDouble();
                    if ((val >= java.lang.Integer.MIN_VALUE) && (val <= java.lang.Integer.MAX_VALUE)) {
                        int intVal = ((int) (val));
                        if (intVal == val) {
                            com.google.javascript.rhino.Node notIntValNode = com.google.javascript.rhino.IR.number(~intVal);
                            parent.replaceChild(n, notIntValNode);
                            reportCodeChange();
                            return notIntValNode;
                        } else {
                            error(com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND, left);
                            return n;
                        }
                    } else {
                        error(com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE, left);
                        return n;
                    }
                } catch (java.lang.UnsupportedOperationException ex) {
                    error(com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR, left);
                    return n;
                }
            default :
                return n;
        }
    }

    private com.google.javascript.rhino.Node tryFoldInstanceof(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isInstanceOf());
        if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, true) && (!mayHaveSideEffects(right))) {
            com.google.javascript.rhino.Node replacementNode = null;
            if (com.google.javascript.jscomp.NodeUtil.isImmutableValue(left)) {
                replacementNode = com.google.javascript.rhino.IR.falseNode();
            } else if (right.isName() && "Object".equals(right.getString())) {
                replacementNode = com.google.javascript.rhino.IR.trueNode();
            }
            if (replacementNode != null) {
                n.getParent().replaceChild(n, replacementNode);
                reportCodeChange();
                return replacementNode;
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldAssign(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isAssign());
        if (!late) {
            return n;
        }
        if ((!right.hasChildren()) || (right.getFirstChild().getNext() != right.getLastChild())) {
            return n;
        }
        if (mayHaveSideEffects(left)) {
            return n;
        }
        com.google.javascript.rhino.Node newRight;
        if (areNodesEqualForInlining(left, right.getFirstChild())) {
            newRight = right.getLastChild();
        } else if (com.google.javascript.jscomp.NodeUtil.isCommutative(right.getType()) && areNodesEqualForInlining(left, right.getLastChild())) {
            newRight = right.getFirstChild();
        } else {
            return n;
        }
        int newType = -1;
        switch (right.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                newType = com.google.javascript.rhino.Token.ASSIGN_ADD;
                break;
            case com.google.javascript.rhino.Token.BITAND :
                newType = com.google.javascript.rhino.Token.ASSIGN_BITAND;
                break;
            case com.google.javascript.rhino.Token.BITOR :
                newType = com.google.javascript.rhino.Token.ASSIGN_BITOR;
                break;
            case com.google.javascript.rhino.Token.BITXOR :
                newType = com.google.javascript.rhino.Token.ASSIGN_BITXOR;
                break;
            case com.google.javascript.rhino.Token.DIV :
                newType = com.google.javascript.rhino.Token.ASSIGN_DIV;
                break;
            case com.google.javascript.rhino.Token.LSH :
                newType = com.google.javascript.rhino.Token.ASSIGN_LSH;
                break;
            case com.google.javascript.rhino.Token.MOD :
                newType = com.google.javascript.rhino.Token.ASSIGN_MOD;
                break;
            case com.google.javascript.rhino.Token.MUL :
                newType = com.google.javascript.rhino.Token.ASSIGN_MUL;
                break;
            case com.google.javascript.rhino.Token.RSH :
                newType = com.google.javascript.rhino.Token.ASSIGN_RSH;
                break;
            case com.google.javascript.rhino.Token.SUB :
                newType = com.google.javascript.rhino.Token.ASSIGN_SUB;
                break;
            case com.google.javascript.rhino.Token.URSH :
                newType = com.google.javascript.rhino.Token.ASSIGN_URSH;
                break;
            default :
                return n;
        }
        com.google.javascript.rhino.Node newNode = new com.google.javascript.rhino.Node(newType, left.detachFromParent(), newRight.detachFromParent());
        n.getParent().replaceChild(n, newNode);
        reportCodeChange();
        return newNode;
    }

    private com.google.javascript.rhino.Node tryUnfoldAssignOp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (late) {
            return n;
        }
        if ((!n.hasChildren()) || (n.getFirstChild().getNext() != n.getLastChild())) {
            return n;
        }
        if (mayHaveSideEffects(left)) {
            return n;
        }
        int op = com.google.javascript.jscomp.NodeUtil.getOpFromAssignmentOp(n);
        com.google.javascript.rhino.Node replacement = com.google.javascript.rhino.IR.assign(left.detachFromParent(), new com.google.javascript.rhino.Node(op, left.cloneTree(), right.detachFromParent()).srcref(n));
        n.getParent().replaceChild(n, replacement);
        reportCodeChange();
        return replacement;
    }

    private com.google.javascript.rhino.Node tryFoldAndOr(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.javascript.rhino.Node parent = n.getParent();
        com.google.javascript.rhino.Node result = null;
        int type = n.getType();
        com.google.javascript.rhino.jstype.TernaryValue leftVal = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(left);
        if (leftVal != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
            boolean lval = leftVal.toBoolean(true);
            if ((lval && (type == com.google.javascript.rhino.Token.OR)) || ((!lval) && (type == com.google.javascript.rhino.Token.AND))) {
                result = left;
            } else if (!mayHaveSideEffects(left)) {
                result = right;
            }
        }
        if (result != null) {
            n.removeChild(result);
            parent.replaceChild(n, result);
            reportCodeChange();
            return result;
        } else {
            return n;
        }
    }

    private com.google.javascript.rhino.Node tryFoldChildAddString(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(right, false) && left.isAdd()) {
            com.google.javascript.rhino.Node ll = left.getFirstChild();
            com.google.javascript.rhino.Node lr = ll.getNext();
            if (lr.isString()) {
                java.lang.String leftString = com.google.javascript.jscomp.NodeUtil.getStringValue(lr);
                java.lang.String rightString = com.google.javascript.jscomp.NodeUtil.getStringValue(right);
                if ((leftString != null) && (rightString != null)) {
                    left.removeChild(ll);
                    java.lang.String result = leftString + rightString;
                    n.replaceChild(left, ll);
                    n.replaceChild(right, com.google.javascript.rhino.IR.string(result));
                    reportCodeChange();
                    return n;
                }
            }
        }
        if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, false) && right.isAdd()) {
            com.google.javascript.rhino.Node rl = right.getFirstChild();
            com.google.javascript.rhino.Node rr = right.getLastChild();
            if (rl.isString()) {
                java.lang.String leftString = com.google.javascript.jscomp.NodeUtil.getStringValue(left);
                java.lang.String rightString = com.google.javascript.jscomp.NodeUtil.getStringValue(rl);
                if ((leftString != null) && (rightString != null)) {
                    right.removeChild(rr);
                    java.lang.String result = leftString + rightString;
                    n.replaceChild(right, rr);
                    n.replaceChild(left, com.google.javascript.rhino.IR.string(result));
                    reportCodeChange();
                    return n;
                }
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldAddConstantString(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (left.isString() || right.isString()) {
            java.lang.String leftString = com.google.javascript.jscomp.NodeUtil.getStringValue(left);
            java.lang.String rightString = com.google.javascript.jscomp.NodeUtil.getStringValue(right);
            if ((leftString != null) && (rightString != null)) {
                com.google.javascript.rhino.Node newStringNode = com.google.javascript.rhino.IR.string(leftString + rightString);
                n.getParent().replaceChild(n, newStringNode);
                reportCodeChange();
                return newStringNode;
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldArithmeticOp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.javascript.rhino.Node result = performArithmeticOp(n.getType(), left, right);
        if (result != null) {
            result.copyInformationFromForTree(n);
            n.getParent().replaceChild(n, result);
            reportCodeChange();
            return result;
        }
        return n;
    }

    private com.google.javascript.rhino.Node performArithmeticOp(int opType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if ((opType == com.google.javascript.rhino.Token.ADD) && (com.google.javascript.jscomp.NodeUtil.mayBeString(left, false) || com.google.javascript.jscomp.NodeUtil.mayBeString(right, false))) {
            return null;
        }
        double result;
        java.lang.Double lValObj = com.google.javascript.jscomp.NodeUtil.getNumberValue(left);
        if (lValObj == null) {
            return null;
        }
        java.lang.Double rValObj = com.google.javascript.jscomp.NodeUtil.getNumberValue(right);
        if (rValObj == null) {
            return null;
        }
        double lval = lValObj;
        double rval = rValObj;
        switch (opType) {
            case com.google.javascript.rhino.Token.BITAND :
                result = com.google.javascript.rhino.head.ScriptRuntime.toInt32(lval) & com.google.javascript.rhino.head.ScriptRuntime.toInt32(rval);
                break;
            case com.google.javascript.rhino.Token.BITOR :
                result = com.google.javascript.rhino.head.ScriptRuntime.toInt32(lval) | com.google.javascript.rhino.head.ScriptRuntime.toInt32(rval);
                break;
            case com.google.javascript.rhino.Token.BITXOR :
                result = com.google.javascript.rhino.head.ScriptRuntime.toInt32(lval) ^ com.google.javascript.rhino.head.ScriptRuntime.toInt32(rval);
                break;
            case com.google.javascript.rhino.Token.ADD :
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(30).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR",com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS",com.google.javascript.jscomp.PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND",com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("opType",opType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("lval",lval);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("lValObj",lValObj);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("right",right);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR",com.google.javascript.jscomp.PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.this.late",com.google.javascript.jscomp.PeepholeFoldConstants.this.late);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR",com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("left",left);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("rValObj",rValObj);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("rval",rval);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE",com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.MAX_FOLD_NUMBER",com.google.javascript.jscomp.PeepholeFoldConstants.MAX_FOLD_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectionEnds();
                }
                if (runtimeAngelicValue)
                    result = lval + rval;

                break;
            case com.google.javascript.rhino.Token.SUB :
                result = lval - rval;
                break;
            case com.google.javascript.rhino.Token.MUL :
                result = lval * rval;
                break;
            case com.google.javascript.rhino.Token.MOD :
                if (rval == 0) {
                    return null;
                }
                result = lval % rval;
                break;
            case com.google.javascript.rhino.Token.DIV :
                if (rval == 0) {
                    return null;
                }
                result = lval / rval;
                break;
            default :
                throw new java.lang.Error("Unexpected arithmetic operator");
        }
        if (((((java.lang.String.valueOf(result).length() <= ((java.lang.String.valueOf(lval).length() + java.lang.String.valueOf(rval).length()) + 1)) && (java.lang.Math.abs(result) <= com.google.javascript.jscomp.PeepholeFoldConstants.MAX_FOLD_NUMBER)) || java.lang.Double.isNaN(result)) || (result == java.lang.Double.POSITIVE_INFINITY)) || (result == java.lang.Double.NEGATIVE_INFINITY)) {
            return com.google.javascript.jscomp.NodeUtil.numberNode(result, null);
        }
        return null;
    }

    private com.google.javascript.rhino.Node tryFoldLeftChildOp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        int opType = n.getType();
        com.google.common.base.Preconditions.checkState((com.google.javascript.jscomp.NodeUtil.isAssociative(opType) && com.google.javascript.jscomp.NodeUtil.isCommutative(opType)) || n.isAdd());
        com.google.common.base.Preconditions.checkState((!n.isAdd()) || (!com.google.javascript.jscomp.NodeUtil.mayBeString(n)));
        java.lang.Double rightValObj = com.google.javascript.jscomp.NodeUtil.getNumberValue(right);
        if ((rightValObj != null) && (left.getType() == opType)) {
            com.google.common.base.Preconditions.checkState(left.getChildCount() == 2);
            com.google.javascript.rhino.Node ll = left.getFirstChild();
            com.google.javascript.rhino.Node lr = ll.getNext();
            com.google.javascript.rhino.Node valueToCombine = ll;
            com.google.javascript.rhino.Node replacement = performArithmeticOp(opType, valueToCombine, right);
            if (replacement == null) {
                valueToCombine = lr;
                replacement = performArithmeticOp(opType, valueToCombine, right);
            }
            if (replacement != null) {
                left.removeChild(valueToCombine);
                n.replaceChild(left, left.removeFirstChild());
                replacement.copyInformationFromForTree(right);
                n.replaceChild(right, replacement);
                reportCodeChange();
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldAdd(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(node.isAdd());
        if (com.google.javascript.jscomp.NodeUtil.mayBeString(node, true)) {
            if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, false) && com.google.javascript.jscomp.NodeUtil.isLiteralValue(right, false)) {
                return tryFoldAddConstantString(node, left, right);
            } else {
                return tryFoldChildAddString(node, left, right);
            }
        } else {
            com.google.javascript.rhino.Node result = tryFoldArithmeticOp(node, left, right);
            if (result != node) {
                return result;
            }
            return tryFoldLeftChildOp(node, left, right);
        }
    }

    private com.google.javascript.rhino.Node tryFoldShift(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (left.isNumber() && right.isNumber()) {
            double result;
            double lval = left.getDouble();
            double rval = right.getDouble();
            if (!((lval >= java.lang.Integer.MIN_VALUE) && (lval <= java.lang.Integer.MAX_VALUE))) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE, left);
                return n;
            }
            if (!((rval >= 0) && (rval < 32))) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
                return n;
            }
            int lvalInt = ((int) (lval));
            if (lvalInt != lval) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND, left);
                return n;
            }
            int rvalInt = ((int) (rval));
            if (rvalInt != rval) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND, right);
                return n;
            }
            switch (n.getType()) {
                case com.google.javascript.rhino.Token.LSH :
                    result = lvalInt << rvalInt;
                    break;
                case com.google.javascript.rhino.Token.RSH :
                    result = lvalInt >> rvalInt;
                    break;
                case com.google.javascript.rhino.Token.URSH :
                    long lvalLong = lvalInt & 0xffffffffL;
                    result = lvalLong >>> rvalInt;
                    break;
                default :
                    throw new java.lang.AssertionError("Unknown shift operator: " + com.google.javascript.rhino.Token.name(n.getType()));
            }
            com.google.javascript.rhino.Node newNumber = com.google.javascript.rhino.IR.number(result);
            n.getParent().replaceChild(n, newNumber);
            reportCodeChange();
            return newNumber;
        }
        return n;
    }

    @java.lang.SuppressWarnings("fallthrough")
    private com.google.javascript.rhino.Node tryFoldComparison(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        boolean leftLiteral = com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, true);
        boolean rightLiteral = com.google.javascript.jscomp.NodeUtil.isLiteralValue(right, true);
        if ((!leftLiteral) || (!rightLiteral)) {
            if ((n.getType() != com.google.javascript.rhino.Token.GT) && (n.getType() != com.google.javascript.rhino.Token.LT)) {
                return n;
            }
        }
        int op = n.getType();
        boolean result;
        boolean undefinedRight = com.google.javascript.jscomp.NodeUtil.isUndefined(right) && rightLiteral;
        boolean nullRight = right.isNull();
        int lhType = getNormalizedNodeType(left);
        int rhType = getNormalizedNodeType(right);
        switch (lhType) {
            case com.google.javascript.rhino.Token.VOID :
                if (!leftLiteral) {
                    return n;
                } else if (!rightLiteral) {
                    return n;
                } else {
                    result = compareToUndefined(right, op);
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
                if (rightLiteral && isEqualityOp(op)) {
                    result = compareToNull(right, op);
                    break;
                }
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                if (undefinedRight) {
                    result = compareToUndefined(left, op);
                    break;
                }
                if (((rhType != com.google.javascript.rhino.Token.TRUE) && (rhType != com.google.javascript.rhino.Token.FALSE)) && (rhType != com.google.javascript.rhino.Token.NULL)) {
                    return n;
                }
                switch (op) {
                    case com.google.javascript.rhino.Token.SHEQ :
                    case com.google.javascript.rhino.Token.EQ :
                        result = lhType == rhType;
                        break;
                    case com.google.javascript.rhino.Token.SHNE :
                    case com.google.javascript.rhino.Token.NE :
                        result = lhType != rhType;
                        break;
                    case com.google.javascript.rhino.Token.GE :
                    case com.google.javascript.rhino.Token.LE :
                    case com.google.javascript.rhino.Token.GT :
                    case com.google.javascript.rhino.Token.LT :
                        java.lang.Boolean compareResult = compareAsNumbers(op, left, right);
                        if (compareResult != null) {
                            result = compareResult;
                        } else {
                            return n;
                        }
                        break;
                    default :
                        return n;
                }
                break;
            case com.google.javascript.rhino.Token.THIS :
                if (!right.isThis()) {
                    return n;
                }
                switch (op) {
                    case com.google.javascript.rhino.Token.SHEQ :
                    case com.google.javascript.rhino.Token.EQ :
                        result = true;
                        break;
                    case com.google.javascript.rhino.Token.SHNE :
                    case com.google.javascript.rhino.Token.NE :
                        result = false;
                        break;
                    default :
                        return n;
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                if (undefinedRight) {
                    result = compareToUndefined(left, op);
                    break;
                }
                if (nullRight && isEqualityOp(op)) {
                    result = compareToNull(left, op);
                    break;
                }
                if (com.google.javascript.rhino.Token.STRING != right.getType()) {
                    return n;
                }
                com.google.javascript.rhino.jstype.TernaryValue ternary = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                switch (op) {
                    case com.google.javascript.rhino.Token.SHEQ :
                    case com.google.javascript.rhino.Token.EQ :
                        ternary = areStringsEqual(left.getString(), right.getString());
                        break;
                    case com.google.javascript.rhino.Token.SHNE :
                    case com.google.javascript.rhino.Token.NE :
                        ternary = areStringsEqual(left.getString(), right.getString()).not();
                        break;
                }
                if (ternary == com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return n;
                }
                result = ternary.toBoolean(true);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                if (undefinedRight) {
                    result = compareToUndefined(left, op);
                    break;
                }
                if (nullRight && isEqualityOp(op)) {
                    result = compareToNull(left, op);
                    break;
                }
                if (com.google.javascript.rhino.Token.NUMBER != right.getType()) {
                    return n;
                }
                java.lang.Boolean compareResult = compareAsNumbers(op, left, right);
                if (compareResult != null) {
                    result = compareResult;
                } else {
                    return null;
                }
                break;
            case com.google.javascript.rhino.Token.NAME :
                if (leftLiteral && undefinedRight) {
                    result = compareToUndefined(left, op);
                    break;
                }
                if (rightLiteral) {
                    boolean undefinedLeft = left.getString().equals("undefined");
                    if (undefinedLeft) {
                        result = compareToUndefined(right, op);
                        break;
                    }
                    if ((leftLiteral && nullRight) && isEqualityOp(op)) {
                        result = compareToNull(left, op);
                        break;
                    }
                }
                if (com.google.javascript.rhino.Token.NAME != right.getType()) {
                    return n;
                }
                java.lang.String ln = left.getString();
                java.lang.String rn = right.getString();
                if (!ln.equals(rn)) {
                    return n;
                }
                switch (op) {
                    case com.google.javascript.rhino.Token.LT :
                    case com.google.javascript.rhino.Token.GT :
                        result = false;
                        break;
                    default :
                        return n;
                }
                break;
            case com.google.javascript.rhino.Token.NEG :
                if (leftLiteral) {
                    if (undefinedRight) {
                        result = compareToUndefined(left, op);
                        break;
                    }
                    if (nullRight && isEqualityOp(op)) {
                        result = compareToNull(left, op);
                        break;
                    }
                }
                return n;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.FUNCTION :
                if (leftLiteral) {
                    if (undefinedRight) {
                        result = compareToUndefined(left, op);
                        break;
                    }
                    if (nullRight && isEqualityOp(op)) {
                        result = compareToNull(left, op);
                        break;
                    }
                }
                return n;
            default :
                return n;
        }
        com.google.javascript.rhino.Node newNode = com.google.javascript.jscomp.NodeUtil.booleanNode(result);
        n.getParent().replaceChild(n, newNode);
        reportCodeChange();
        return newNode;
    }

    private com.google.javascript.rhino.jstype.TernaryValue areStringsEqual(java.lang.String a, java.lang.String b) {
        if ((a.indexOf('\u000b') != (-1)) || (b.indexOf('\u000b') != (-1))) {
            return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        } else {
            return a.equals(b) ? com.google.javascript.rhino.jstype.TernaryValue.TRUE : com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        }
    }

    private int getNormalizedNodeType(com.google.javascript.rhino.Node n) {
        int type = n.getType();
        if (type == com.google.javascript.rhino.Token.NOT) {
            com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n);
            switch (value) {
                case TRUE :
                    return com.google.javascript.rhino.Token.TRUE;
                case FALSE :
                    return com.google.javascript.rhino.Token.FALSE;
            }
        }
        return type;
    }

    private java.lang.Boolean compareAsNumbers(int op, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        java.lang.Double leftValue = com.google.javascript.jscomp.NodeUtil.getNumberValue(left);
        if (leftValue == null) {
            return null;
        }
        java.lang.Double rightValue = com.google.javascript.jscomp.NodeUtil.getNumberValue(right);
        if (rightValue == null) {
            return null;
        }
        double lv = leftValue;
        double rv = rightValue;
        java.lang.Boolean result;
        switch (op) {
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.EQ :
                com.google.common.base.Preconditions.checkState(left.isNumber() && right.isNumber());
                result = lv == rv;
                break;
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.NE :
                com.google.common.base.Preconditions.checkState(left.isNumber() && right.isNumber());
                result = lv != rv;
                break;
            case com.google.javascript.rhino.Token.LE :
                result = lv <= rv;
                break;
            case com.google.javascript.rhino.Token.LT :
                result = lv < rv;
                break;
            case com.google.javascript.rhino.Token.GE :
                result = lv >= rv;
                break;
            case com.google.javascript.rhino.Token.GT :
                result = lv > rv;
                break;
            default :
                return null;
        }
        return result;
    }

    private boolean compareToUndefined(com.google.javascript.rhino.Node value, int op) {
        com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isLiteralValue(value, true));
        boolean valueUndefined = com.google.javascript.jscomp.NodeUtil.isUndefined(value);
        boolean valueNull = com.google.javascript.rhino.Token.NULL == value.getType();
        boolean equivalent = valueUndefined || valueNull;
        switch (op) {
            case com.google.javascript.rhino.Token.EQ :
                return equivalent;
            case com.google.javascript.rhino.Token.NE :
                return !equivalent;
            case com.google.javascript.rhino.Token.SHEQ :
                return valueUndefined;
            case com.google.javascript.rhino.Token.SHNE :
                return !valueUndefined;
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
                return false;
            default :
                throw new java.lang.IllegalStateException("unexpected.");
        }
    }

    private boolean isEqualityOp(int op) {
        switch (op) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return true;
        }
        return false;
    }

    private boolean compareToNull(com.google.javascript.rhino.Node value, int op) {
        boolean valueUndefined = com.google.javascript.jscomp.NodeUtil.isUndefined(value);
        boolean valueNull = com.google.javascript.rhino.Token.NULL == value.getType();
        boolean equivalent = valueUndefined || valueNull;
        switch (op) {
            case com.google.javascript.rhino.Token.EQ :
                return equivalent;
            case com.google.javascript.rhino.Token.NE :
                return !equivalent;
            case com.google.javascript.rhino.Token.SHEQ :
                return valueNull;
            case com.google.javascript.rhino.Token.SHNE :
                return !valueNull;
            default :
                throw new java.lang.IllegalStateException("unexpected.");
        }
    }

    private com.google.javascript.rhino.Node tryFoldCtorCall(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isNew());
        if (inForcedStringContext(n)) {
            return tryFoldInForcedStringContext(n);
        }
        return n;
    }

    private boolean inForcedStringContext(com.google.javascript.rhino.Node n) {
        if (n.getParent().isGetElem() && (n.getParent().getLastChild() == n)) {
            return true;
        }
        if (n.getParent().isAdd()) {
            return true;
        }
        return false;
    }

    private com.google.javascript.rhino.Node tryFoldInForcedStringContext(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isNew());
        com.google.javascript.rhino.Node objectType = n.getFirstChild();
        if (!objectType.isName()) {
            return n;
        }
        if (objectType.getString().equals("String")) {
            com.google.javascript.rhino.Node value = objectType.getNext();
            java.lang.String stringValue = null;
            if (value == null) {
                stringValue = "";
            } else {
                if (!com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                    return n;
                }
                stringValue = com.google.javascript.jscomp.NodeUtil.getStringValue(value);
            }
            if (stringValue == null) {
                return n;
            }
            com.google.javascript.rhino.Node parent = n.getParent();
            com.google.javascript.rhino.Node newString = com.google.javascript.rhino.IR.string(stringValue);
            parent.replaceChild(n, newString);
            newString.copyInformationFrom(parent);
            reportCodeChange();
            return newString;
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldGetElem(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isGetElem());
        if (left.isObjectLit()) {
            return tryFoldObjectPropAccess(n, left, right);
        }
        if (left.isArrayLit()) {
            return tryFoldArrayAccess(n, left, right);
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldGetProp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isGetProp());
        if (left.isObjectLit()) {
            return tryFoldObjectPropAccess(n, left, right);
        }
        if (right.isString() && right.getString().equals("length")) {
            int knownLength = -1;
            switch (left.getType()) {
                case com.google.javascript.rhino.Token.ARRAYLIT :
                    if (mayHaveSideEffects(left)) {
                        return n;
                    }
                    knownLength = left.getChildCount();
                    break;
                case com.google.javascript.rhino.Token.STRING :
                    knownLength = left.getString().length();
                    break;
                default :
                    return n;
            }
            com.google.common.base.Preconditions.checkState(knownLength != (-1));
            com.google.javascript.rhino.Node lengthNode = com.google.javascript.rhino.IR.number(knownLength);
            n.getParent().replaceChild(n, lengthNode);
            reportCodeChange();
            return lengthNode;
        }
        return n;
    }

    private boolean isAssignmentTarget(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        if (((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) || parent.isInc()) || parent.isDec()) {
            return true;
        }
        return false;
    }

    private com.google.javascript.rhino.Node tryFoldArrayAccess(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.javascript.rhino.Node parent = n.getParent();
        if (isAssignmentTarget(n)) {
            return n;
        }
        if (!right.isNumber()) {
            return n;
        }
        double index = right.getDouble();
        int intIndex = ((int) (index));
        if (intIndex != index) {
            error(com.google.javascript.jscomp.PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR, right);
            return n;
        }
        if (intIndex < 0) {
            error(com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR, right);
            return n;
        }
        com.google.javascript.rhino.Node current = left.getFirstChild();
        com.google.javascript.rhino.Node elem = null;
        for (int i = 0; current != null; i++) {
            if (i != intIndex) {
                if (mayHaveSideEffects(current)) {
                    return n;
                }
            } else {
                elem = current;
            }
            current = current.getNext();
        }
        if (elem == null) {
            error(com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR, right);
            return n;
        }
        if (elem.isEmpty()) {
            elem = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(elem);
        } else {
            left.removeChild(elem);
        }
        n.getParent().replaceChild(n, elem);
        reportCodeChange();
        return elem;
    }

    private com.google.javascript.rhino.Node tryFoldObjectPropAccess(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(com.google.javascript.jscomp.NodeUtil.isGet(n));
        if ((!left.isObjectLit()) || (!right.isString())) {
            return n;
        }
        if (isAssignmentTarget(n)) {
            return n;
        }
        com.google.javascript.rhino.Node key = null;
        com.google.javascript.rhino.Node value = null;
        for (com.google.javascript.rhino.Node c = left.getFirstChild(); c != null; c = c.getNext()) {
            if (c.getString().equals(right.getString())) {
                switch (c.getType()) {
                    case com.google.javascript.rhino.Token.SETTER_DEF :
                        continue;
                    case com.google.javascript.rhino.Token.GETTER_DEF :
                    case com.google.javascript.rhino.Token.STRING_KEY :
                        if ((value != null) && mayHaveSideEffects(value)) {
                            return n;
                        }
                        key = c;
                        value = key.getFirstChild();
                        break;
                    default :
                        throw new java.lang.IllegalStateException();
                }
            } else if (mayHaveSideEffects(c.getFirstChild())) {
                return n;
            }
        }
        if (value == null) {
            return n;
        }
        if (value.isFunction() && com.google.javascript.jscomp.NodeUtil.referencesThis(value)) {
            return n;
        }
        com.google.javascript.rhino.Node replacement = value.detachFromParent();
        if (key.isGetterDef()) {
            replacement = com.google.javascript.rhino.IR.call(replacement);
            replacement.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, true);
        }
        n.getParent().replaceChild(n, replacement);
        reportCodeChange();
        return n;
    }
}
[135552] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659900982430
GPR[SSUN]-1659900982430
1616555300
GPR[SPVATF]-1659900982629
GPR[EPVATF]-1659900983598
GPR[SPS]-1659900983598
[137181] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:274.
GPR[EPS]-1659900984059
GPR[ESUN]-1659900984059
GPR[SSUN]-1659900984059
1187751237
GPR[SPVATF]-1659900984345
GPR[EPVATF]-1659900985290
GPR[SPS]-1659900985290
[139112] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3225.
GPR[EPS]-1659900985990
GPR[ESUN]-1659900985990
GPR[SSUN]-1659900985990
944853999
GPR[SPVATF]-1659900986286
GPR[EPVATF]-1659900987241
GPR[SPS]-1659900987241
[140907] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:269.
GPR[EPS]-1659900987785
GPR[SPVATF]-1659900987785
GPR[EPVATF]-1659900988793
GPR[SPS]-1659900988793
[142481] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:269.
GPR[EPS]-1659900989359
GPR[ESUN]-1659900989359
GPR[SSUN]-1659900989359
944853999
GPR[ESUN]-1659900989613
GPR[SSUN]-1659900989613
944853999
GPR[ESUN]-1659900989859
GPR[SSUN]-1659900989859
2433571
GPR[SPVATF]-1659900990103
GPR[EPVATF]-1659900991126
GPR[SPS]-1659900991126
[144894] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1449.
GPR[EPS]-1659900991772
GPR[ESUN]-1659900991772
GPR[SSUN]-1659900991772
944853999
GPR[SPVATF]-1659900992035
GPR[EPVATF]-1659900993021
GPR[SPS]-1659900993021
[146768] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:263.
GPR[EPS]-1659900993646
GPR[ESUN]-1659900993646
GPR[SSUN]-1659900993646
944853999
GPR[SPVATF]-1659900993915
GPR[EPVATF]-1659900994916
GPR[SPS]-1659900994916
[148587] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:926.
GPR[EPS]-1659900995465
GPR[SPVATF]-1659900995465
GPR[EPVATF]-1659900996511
GPR[SPS]-1659900996511
[150192] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:926.
GPR[EPS]-1659900997070
GPR[ESUN]-1659900997070
GPR[SSUN]-1659900997070
-1966087783
GPR[SPVATF]-1659900997269
GPR[EPVATF]-1659900997344
[150466] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900997344
GPR[EPVATF]-1659900997420
[150542] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900997420
GPR[SSUN]-1659900997420
-1966087783
GPR[SPVATF]-1659900997614
GPR[EPVATF]-1659900997685
[150807] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900997685
GPR[EPVATF]-1659900997757
[150879] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900997757
GPR[SSUN]-1659900997757
-1966087783
GPR[SPVATF]-1659900997947
GPR[EPVATF]-1659900998019
[151141] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900998019
GPR[EPVATF]-1659900998091
[151213] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900998091
GPR[SSUN]-1659900998091
-1966087783
GPR[ESUN]-1659900998285
GPR[SSUN]-1659900998285
-1966087783
GPR[ESUN]-1659900998477
GPR[SSUN]-1659900998477
-1966087783
GPR[SPVATF]-1659900998681
GPR[EPVATF]-1659900998755
[151877] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900998755
GPR[EPVATF]-1659900998828
[151950] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900998828
GPR[SSUN]-1659900998828
-1966087783
GPR[SPVATF]-1659900999026
GPR[EPVATF]-1659900999098
[152221] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900999099
GPR[EPVATF]-1659900999166
[152288] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900999166
GPR[SSUN]-1659900999166
-1966087783
GPR[ESUN]-1659900999361
GPR[SSUN]-1659900999361
-1966087783
GPR[SPVATF]-1659900999561
GPR[EPVATF]-1659900999634
[152756] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900999634
GPR[SSUN]-1659900999634
-1966087783
GPR[SPVATF]-1659900999827
GPR[EPVATF]-1659900999901
[153023] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900999901
GPR[SSUN]-1659900999901
-1966087783
GPR[ESUN]-1659901000099
GPR[SSUN]-1659901000099
-1966087783
GPR[SPVATF]-1659901000290
GPR[EPVATF]-1659901000361
[153483] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901000361
GPR[SSUN]-1659901000361
-1966087783
GPR[ESUN]-1659901000608
GPR[SSUN]-1659901000608
-1966087783
GPR[ESUN]-1659901000799
GPR[SSUN]-1659901000799
-1966087783
GPR[SPVATF]-1659901001012
GPR[EPVATF]-1659901001086
[154208] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901001086
GPR[SSUN]-1659901001086
-1966087783
GPR[SPVATF]-1659901001281
GPR[EPVATF]-1659901001357
[154479] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901001357
GPR[SSUN]-1659901001357
944853999
GPR[SPVATF]-1659901001605
GPR[EPVATF]-1659901002616
GPR[SPS]-1659901002616
[156310] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:717.
GPR[EPS]-1659901003188
GPR[ESUN]-1659901003188
GPR[SSUN]-1659901003188
1187751237
GPR[ESUN]-1659901003473
GPR[SSUN]-1659901003473
944853999
GPR[ESUN]-1659901003769
GPR[SSUN]-1659901003769
944853999
GPR[SPVATF]-1659901004026
GPR[EPVATF]-1659901005042
GPR[SPS]-1659901005042
[158718] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:799.
GPR[EPS]-1659901005596
GPR[SPVATF]-1659901005596
GPR[EPVATF]-1659901007617
GPR[SPS]-1659901007617
[161302] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:799.
GPR[EPS]-1659901008180
GPR[ESUN]-1659901008180
GPR[SSUN]-1659901008180
944853999
GPR[ESUN]-1659901008428
GPR[SSUN]-1659901008428
944853999
GPR[SPVATF]-1659901008676
GPR[EPVATF]-1659901009638
GPR[SPS]-1659901009638
[163303] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:793.
GPR[EPS]-1659901010181
GPR[ESUN]-1659901010181
GPR[SSUN]-1659901010181
944853999
GPR[SPVATF]-1659901010442
GPR[EPVATF]-1659901011392
GPR[SPS]-1659901011392
[165092] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:789.
GPR[EPS]-1659901011970
GPR[ESUN]-1659901011970
GPR[SSUN]-1659901011970
944853999
GPR[ESUN]-1659901012223
GPR[SSUN]-1659901012223
1187751237
GPR[SPVATF]-1659901012504
GPR[EPVATF]-1659901013459
GPR[SPS]-1659901013459
[167219] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class NodeUtil {
    static final long MAX_POSITIVE_INTEGER_NUMBER = ((long) (java.lang.Math.pow(2, 53)));

    static final java.lang.String JSC_PROPERTY_NAME_FN = "JSCompiler_renameProperty";

    static final char LARGEST_BASIC_LATIN = 0x7f;

    private static final java.util.Set<java.lang.String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList("Array", "Date", "Error", "Object", "RegExp", "XMLHttpRequest"));

    private NodeUtil() {
    }

    static com.google.javascript.rhino.jstype.TernaryValue getImpureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                return value.not();
            case com.google.javascript.rhino.Token.AND :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.and(rhs);
                }
            case com.google.javascript.rhino.Token.OR :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.or(rhs);
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.javascript.rhino.jstype.TernaryValue trueValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild().getNext());
                    com.google.javascript.rhino.jstype.TernaryValue falseValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    if (trueValue.equals(falseValue)) {
                        return trueValue;
                    } else {
                        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                    }
                }
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.VOID :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            default :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n);
        }
    }

    static com.google.javascript.rhino.jstype.TernaryValue getPureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getString().length() > 0);
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getDouble() != 0);
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getLastChild()).not();
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.FALSE :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            case com.google.javascript.rhino.Token.VOID :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                }
                break;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if ("undefined".equals(name) || "NaN".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                } else if ("Infinity".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.REGEXP :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
        }
        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
    }

    static java.lang.String getStringValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return n.getString();
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name)) {
                    return name;
                }
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(n.getDouble());
            case com.google.javascript.rhino.Token.FALSE :
                return "false";
            case com.google.javascript.rhino.Token.TRUE :
                return "true";
            case com.google.javascript.rhino.Token.NULL :
                return "null";
            case com.google.javascript.rhino.Token.VOID :
                return "undefined";
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? "false" : "true";
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                return com.google.javascript.jscomp.NodeUtil.arrayToString(n);
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return "[object Object]";
        }
        return null;
    }

    static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    static java.lang.String getArrayElementStringValue(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isNullOrUndefined(n) || n.isEmpty() ? "" : com.google.javascript.jscomp.NodeUtil.getStringValue(n);
    }

    static java.lang.String arrayToString(com.google.javascript.rhino.Node literal) {
        com.google.javascript.rhino.Node first = literal.getFirstChild();
        java.lang.StringBuilder result = new java.lang.StringBuilder();
        int nextSlot = 0;
        int nextSkipSlot = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            java.lang.String childValue = com.google.javascript.jscomp.NodeUtil.getArrayElementStringValue(n);
            if (childValue == null) {
                return null;
            }
            if (n != first) {
                result.append(',');
            }
            result.append(childValue);
            nextSlot++;
        }
        return result.toString();
    }

    static java.lang.Double getNumberValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
                return 1.0;
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
                return 0.0;
            case com.google.javascript.rhino.Token.NUMBER :
                return n.getDouble();
            case com.google.javascript.rhino.Token.VOID :
                if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return null;
                } else {
                    return java.lang.Double.NaN;
                }
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("undefined")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("NaN")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("Infinity")) {
                    return java.lang.Double.POSITIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NEG :
                if (((n.getChildCount() == 1) && n.getFirstChild().isName()) && n.getFirstChild().getString().equals("Infinity")) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? 0.0 : 1.0;
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.jscomp.NodeUtil.getStringNumberValue(n.getString());
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                java.lang.String value = com.google.javascript.jscomp.NodeUtil.getStringValue(n);
                return value != null ? com.google.javascript.jscomp.NodeUtil.getStringNumberValue(value) : null;
        }
        return null;
    }

    static java.lang.Double getStringNumberValue(java.lang.String rawJsString) {
        if (rawJsString.contains("\u000b")) {
            return null;
        }
        java.lang.String s = com.google.javascript.jscomp.NodeUtil.trimJsWhiteSpace(rawJsString);
        if (s.length() == 0) {
            return 0.0;
        }
        if (((s.length() > 2) && (s.charAt(0) == '0')) && ((s.charAt(1) == 'x') || (s.charAt(1) == 'X'))) {
            try {
                return java.lang.Double.valueOf(java.lang.Integer.parseInt(s.substring(2), 16));
            } catch (java.lang.NumberFormatException e) {
                return java.lang.Double.NaN;
            }
        }
        if ((((s.length() > 3) && ((s.charAt(0) == '-') || (s.charAt(0) == '+'))) && (s.charAt(1) == '0')) && ((s.charAt(2) == 'x') || (s.charAt(2) == 'X'))) {
            return null;
        }
        if ((s.equals("infinity") || s.equals("-infinity")) || s.equals("+infinity")) {
            return null;
        }
        try {
            return java.lang.Double.parseDouble(s);
        } catch (java.lang.NumberFormatException e) {
            return java.lang.Double.NaN;
        }
    }

    static java.lang.String trimJsWhiteSpace(java.lang.String s) {
        int start = 0;
        int end = s.length();
        while ((end > 0) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(end - 1)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            end--;
        } 
        while ((start < end) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(start)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            start++;
        } 
        return s.substring(start, end);
    }

    public static com.google.javascript.rhino.jstype.TernaryValue isStrWhiteSpaceChar(int c) {
        switch (c) {
            case '\u000b' :
                return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
            case ' ' :
            case '\n' :
            case '\r' :
            case '\t' :
            case ' ' :
            case '\f' :
            case ' ' :
            case ' ' :
            case '﻿' :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            default :
                return java.lang.Character.getType(c) == java.lang.Character.SPACE_SEPARATOR ? com.google.javascript.rhino.jstype.TernaryValue.TRUE : com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        }
    }

    static java.lang.String getFunctionName(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isFunction());
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return parent.getQualifiedName();
            case com.google.javascript.rhino.Token.ASSIGN :
                return parent.getFirstChild().getQualifiedName();
            default :
                java.lang.String name = n.getFirstChild().getQualifiedName();
                return name;
        }
    }

    public static java.lang.String getNearestFunctionName(com.google.javascript.rhino.Node n) {
        if (!n.isFunction()) {
            return null;
        }
        java.lang.String name = com.google.javascript.jscomp.NodeUtil.getFunctionName(n);
        if (name != null) {
            return name;
        }
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SETTER_DEF :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return parent.getString();
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(parent);
        }
        return null;
    }

    static boolean isImmutableValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NEG :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                return ("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name);
        }
        return false;
    }

    static boolean isSymmetricOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.MUL :
                return true;
        }
        return false;
    }

    static boolean isRelationalOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
                return true;
        }
        return false;
    }

    static int getInverseOperator(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.GT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.rhino.Token.LT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.rhino.Token.GE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.rhino.Token.LE :
                return com.google.javascript.rhino.Token.GE;
        }
        return com.google.javascript.rhino.Token.ERROR;
    }

    static boolean isLiteralValue(com.google.javascript.rhino.Node n, boolean includeFunctions) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ARRAYLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if ((!child.isEmpty()) && (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions))) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.REGEXP :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child.getFirstChild(), includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                return includeFunctions && (!com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n));
            default :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n);
        }
    }

    static boolean isValidDefineValue(com.google.javascript.rhino.Node val, java.util.Set<java.lang.String> defines) {
        switch (val.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.URSH :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines) && com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getLastChild(), defines);
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.POS :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines);
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.GETPROP :
                if (val.isQualifiedName()) {
                    return defines.contains(val.getQualifiedName());
                }
        }
        return false;
    }

    static boolean isEmptyBlock(com.google.javascript.rhino.Node block) {
        if (!block.isBlock()) {
            return false;
        }
        for (com.google.javascript.rhino.Node n = block.getFirstChild(); n != null; n = n.getNext()) {
            if (!n.isEmpty()) {
                return false;
            }
        }
        return true;
    }

    static boolean isSimpleOperator(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(n.getType());
    }

    static boolean isSimpleOperatorType(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.COMMA :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.URSH :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node newExpr(com.google.javascript.rhino.Node child) {
        return com.google.javascript.rhino.IR.exprResult(child).srcref(child);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(n, null);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, true, compiler);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n, null);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, false, compiler);
    }

    private static boolean checkForStateChangeHelper(com.google.javascript.rhino.Node n, boolean checkForNewObjects, com.google.javascript.jscomp.AbstractCompiler compiler) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.PARAM_LIST :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.EMPTY :
                break;
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (checkForNewObjects) {
                    return true;
                }
                for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c.getFirstChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                }
                return false;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.REGEXP :
                if (checkForNewObjects) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.NAME :
                if (n.getFirstChild() != null) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                return checkForNewObjects || (!com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
            case com.google.javascript.rhino.Token.NEW :
                if (checkForNewObjects) {
                    return true;
                }
                if (!com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n)) {
                    break;
                }
                return true;
            case com.google.javascript.rhino.Token.CALL :
                if (!com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler)) {
                    break;
                }
                return true;
            default :
                if (com.google.javascript.jscomp.NodeUtil.isSimpleOperator(n)) {
                    break;
                }
                if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
                    com.google.javascript.rhino.Node assignTarget = n.getFirstChild();
                    if (assignTarget.isName()) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getFirstChild(), checkForNewObjects, compiler) || com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getLastChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.isGet(assignTarget)) {
                        com.google.javascript.rhino.Node current = assignTarget.getFirstChild();
                        if (com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(current)) {
                            return false;
                        }
                        while (com.google.javascript.jscomp.NodeUtil.isGet(current)) {
                            current = current.getFirstChild();
                        } 
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(current, true);
                    } else {
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(assignTarget, true);
                    }
                }
                return true;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c, checkForNewObjects, compiler)) {
                return true;
            }
        }
        return false;
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(callNode, null);
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isNew()) {
            throw new java.lang.IllegalStateException("Expected NEW node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName() && com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())) {
            return false;
        }
        return true;
    }

    private static final java.util.Set<java.lang.String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("Object", "Array", "String", "Number", "Boolean", "RegExp", "Error");

    private static final java.util.Set<java.lang.String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("toString", "valueOf");

    private static final java.util.Set<java.lang.String> REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("test", "exec");

    private static final java.util.Set<java.lang.String> STRING_REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("match", "replace", "search", "split");

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(callNode, null);
    }

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode, @javax.annotation.Nullable
    com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isCall()) {
            throw new java.lang.IllegalStateException("Expected CALL node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName()) {
            java.lang.String name = nameNode.getString();
            if (com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
                return false;
            }
        } else if (nameNode.isGetProp()) {
            if (callNode.hasOneChild() && com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())) {
                return false;
            }
            if (callNode.isOnlyModifiesThisCall() && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(nameNode.getFirstChild())) {
                return false;
            }
            if (nameNode.getFirstChild().isName()) {
                if ("Math.floor".equals(nameNode.getQualifiedName())) {
                    return false;
                }
            }
            if ((compiler != null) && (!compiler.hasRegExpGlobalReferences())) {
                if (nameNode.getFirstChild().isRegExp() && com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    return false;
                } else if (nameNode.getFirstChild().isString() && com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    com.google.javascript.rhino.Node param = nameNode.getNext();
                    if ((param != null) && (param.isString() || param.isRegExp())) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    static boolean callHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isCall());
        return (n.getSideEffectFlags() & com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS) > 0;
    }

    static boolean newHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isNew());
        return n.isOnlyModifiesThisCall();
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(n, null);
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
            return true;
        }
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.CALL :
                return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NAME :
                return n.hasChildren();
            default :
                return false;
        }
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n) {
        java.util.Set<java.lang.String> emptySet = java.util.Collections.emptySet();
        return com.google.javascript.jscomp.NodeUtil.canBeSideEffected(n, emptySet);
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n, java.util.Set<java.lang.String> knownConstants) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.NEW :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return (!com.google.javascript.jscomp.NodeUtil.isConstantName(n)) && (!knownConstants.contains(n.getString()));
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GETELEM :
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
                return false;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.canBeSideEffected(c, knownConstants)) {
                return true;
            }
        }
        return false;
    }

    static int precedence(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.COMMA :
                return 0;
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN :
                return 1;
            case com.google.javascript.rhino.Token.HOOK :
                return 2;
            case com.google.javascript.rhino.Token.OR :
                return 3;
            case com.google.javascript.rhino.Token.AND :
                return 4;
            case com.google.javascript.rhino.Token.BITOR :
                return 5;
            case com.google.javascript.rhino.Token.BITXOR :
                return 6;
            case com.google.javascript.rhino.Token.BITAND :
                return 7;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return 8;
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.IN :
                return 9;
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
                return 10;
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
                return 11;
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
                return 12;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                return 13;
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
                return 15;
            default :
                throw new java.lang.Error(((("Unknown precedence for " + com.google.javascript.rhino.Token.name(type)) + " (type ") + type) + ")");
        }
    }

    static boolean isUndefined(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.VOID :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return n.getString().equals("undefined");
        }
        return false;
    }

    static boolean isNullOrUndefined(com.google.javascript.rhino.Node n) {
        return n.isNull() || com.google.javascript.jscomp.NodeUtil.isUndefined(n);
    }

    static boolean allResultsMatch(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> p) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getFirstChild(), p) && com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getFirstChild().getNext(), p) && com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            default :
                return p.apply(n);
        }
    }

    static boolean anyResultsMatch(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> p) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getFirstChild(), p) || com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getFirstChild().getNext(), p) || com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            default :
                return p.apply(n);
        }
    }

    static class NumbericResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isNumericResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate NUMBERIC_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate();

    static boolean isNumericResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);
    }

    static boolean isNumericResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                return (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getFirstChild())) && (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getLastChild()));
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.NUMBER :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("NaN")) {
                    return true;
                }
                if (name.equals("Infinity")) {
                    return true;
                }
                return false;
            default :
                return false;
        }
    }

    static class BooleanResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isBooleanResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate BOOLEAN_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate();

    static boolean isBooleanResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);
    }

    static boolean isBooleanResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.DELPROP :
                return true;
            default :
                return false;
        }
    }

    static class MayBeStringResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate MAY_BE_STRING_PREDICATE = new com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate();

    static boolean mayBeString(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayBeString(n, true);
    }

    static boolean mayBeString(com.google.javascript.rhino.Node n, boolean recurse) {
        if (recurse) {
            return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(44).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE",com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION",com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN",com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER",com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("recurse",recurse);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN",com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectionEnds();
            }
            if (runtimeAngelicValue)
                return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);

        }
    }

    static boolean mayBeStringHelper(com.google.javascript.rhino.Node n) {
        return (((!com.google.javascript.jscomp.NodeUtil.isNumericResult(n)) && (!com.google.javascript.jscomp.NodeUtil.isBooleanResult(n))) && (!com.google.javascript.jscomp.NodeUtil.isUndefined(n))) && (!n.isNull());
    }

    static boolean isAssociative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isCommutative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return true;
        }
        return false;
    }

    static int getOpFromAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.MOD;
        }
        throw new java.lang.IllegalArgumentException("Not an assignment op:" + n);
    }

    static boolean containsFunction(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.containsType(n, com.google.javascript.rhino.Token.FUNCTION);
    }

    static boolean referencesThis(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node start = (n.isFunction()) ? n.getLastChild() : n;
        return com.google.javascript.jscomp.NodeUtil.containsType(start, com.google.javascript.rhino.Token.THIS, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isGet(com.google.javascript.rhino.Node n) {
        return n.isGetProp() || n.isGetElem();
    }

    static boolean isVarDeclaration(com.google.javascript.rhino.Node n) {
        return n.isName() && n.getParent().isVar();
    }

    static com.google.javascript.rhino.Node getAssignedValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isName());
        com.google.javascript.rhino.Node parent = n.getParent();
        if (parent.isVar()) {
            return n.getFirstChild();
        } else if (parent.isAssign() && (parent.getFirstChild() == n)) {
            return n.getNext();
        } else {
            return null;
        }
    }

    static boolean isExprAssign(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isAssign();
    }

    static boolean isExprCall(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isCall();
    }

    static boolean isForIn(com.google.javascript.rhino.Node n) {
        return n.isFor() && (n.getChildCount() == 3);
    }

    static boolean isLoopStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node getLoopCodeBlock(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getFirstChild();
            default :
                return null;
        }
    }

    static boolean isWithinLoop(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node parent : n.getAncestors()) {
            if (com.google.javascript.jscomp.NodeUtil.isLoopStructure(parent)) {
                return true;
            }
            if (parent.isFunction()) {
                break;
            }
        }
        return false;
    }

    static boolean isControlStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.WITH :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                return false;
        }
    }

    static boolean isControlStructureCodeBlock(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node n) {
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.WITH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.DO :
                return parent.getFirstChild() == n;
            case com.google.javascript.rhino.Token.IF :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.TRY :
                return (parent.getFirstChild() == n) || (parent.getLastChild() == n);
            case com.google.javascript.rhino.Token.CATCH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isControlStructure(parent));
                return false;
        }
    }

    static com.google.javascript.rhino.Node getConditionExpression(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getFirstChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.FOR :
                switch (n.getChildCount()) {
                    case 3 :
                        return null;
                    case 4 :
                        return n.getFirstChild().getNext();
                }
                throw new java.lang.IllegalArgumentException("malformed 'for' statement " + n);
            case com.google.javascript.rhino.Token.CASE :
                return null;
        }
        throw new java.lang.IllegalArgumentException(n + " does not have a condition.");
    }

    static boolean isStatementBlock(com.google.javascript.rhino.Node n) {
        return n.isScript() || n.isBlock();
    }

    static boolean isStatement(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isStatementParent(n.getParent());
    }

    static boolean isStatementParent(com.google.javascript.rhino.Node parent) {
        com.google.common.base.Preconditions.checkState(parent != null);
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.LABEL :
                return true;
            default :
                return false;
        }
    }

    static boolean isSwitchCase(com.google.javascript.rhino.Node n) {
        return n.isCase() || n.isDefaultCase();
    }

    static boolean isReferenceName(com.google.javascript.rhino.Node n) {
        return n.isName() && (!n.getString().isEmpty());
    }

    static boolean isTryFinallyNode(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node child) {
        return (parent.isTry() && (parent.getChildCount() == 3)) && (child == parent.getLastChild());
    }

    static boolean isTryCatchNodeContainer(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        return parent.isTry() && (parent.getFirstChild().getNext() == n);
    }

    static void removeChild(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node node) {
        if (com.google.javascript.jscomp.NodeUtil.isTryFinallyNode(parent, node)) {
            if (com.google.javascript.jscomp.NodeUtil.hasCatchHandler(com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent))) {
                parent.removeChild(node);
            } else {
                node.detachChildren();
            }
        } else if (node.isCatch()) {
            com.google.javascript.rhino.Node tryNode = node.getParent().getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachFromParent();
        } else if (com.google.javascript.jscomp.NodeUtil.isTryCatchNodeContainer(node)) {
            com.google.javascript.rhino.Node tryNode = node.getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachChildren();
        } else if (node.isBlock()) {
            node.detachChildren();
        } else if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent) || com.google.javascript.jscomp.NodeUtil.isSwitchCase(node)) {
            parent.removeChild(node);
        } else if (parent.isVar()) {
            if (parent.hasMoreThanOneChild()) {
                parent.removeChild(node);
            } else {
                parent.removeChild(node);
                com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
            }
        } else if (parent.isLabel() && (node == parent.getLastChild())) {
            parent.removeChild(node);
            com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
        } else if (parent.isFor() && (parent.getChildCount() == 4)) {
            parent.replaceChild(node, com.google.javascript.rhino.IR.empty());
        } else {
            throw new java.lang.IllegalStateException((("Invalid attempt to remove node: " + node.toString()) + " of ") + parent.toString());
        }
    }

    static void maybeAddFinally(com.google.javascript.rhino.Node tryNode) {
        com.google.common.base.Preconditions.checkState(tryNode.isTry());
        if (!com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode)) {
            tryNode.addChildrenToBack(com.google.javascript.rhino.IR.block().srcref(tryNode));
        }
    }

    static boolean tryMergeBlock(com.google.javascript.rhino.Node block) {
        com.google.common.base.Preconditions.checkState(block.isBlock());
        com.google.javascript.rhino.Node parent = block.getParent();
        if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)) {
            com.google.javascript.rhino.Node previous = block;
            while (block.hasChildren()) {
                com.google.javascript.rhino.Node child = block.removeFirstChild();
                parent.addChildAfter(child, previous);
                previous = child;
            } 
            parent.removeChild(block);
            return true;
        } else {
            return false;
        }
    }

    static boolean isCallOrNew(com.google.javascript.rhino.Node node) {
        return node.isCall() || node.isNew();
    }

    static com.google.javascript.rhino.Node getFunctionBody(com.google.javascript.rhino.Node fn) {
        com.google.common.base.Preconditions.checkArgument(fn.isFunction());
        return fn.getLastChild();
    }

    static boolean isFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return n.isFunction() && com.google.javascript.jscomp.NodeUtil.isStatement(n);
    }

    static boolean isHoistedFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) && (n.getParent().isScript() || n.getParent().getParent().isFunction());
    }

    static boolean isFunctionExpression(com.google.javascript.rhino.Node n) {
        return n.isFunction() && (!com.google.javascript.jscomp.NodeUtil.isStatement(n));
    }

    static boolean isBleedingFunctionName(com.google.javascript.rhino.Node n) {
        return (n.isName() && (!n.getString().isEmpty())) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n.getParent());
    }

    static boolean isEmptyFunctionExpression(com.google.javascript.rhino.Node node) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(node) && com.google.javascript.jscomp.NodeUtil.isEmptyBlock(node.getLastChild());
    }

    static boolean isVarArgsFunction(com.google.javascript.rhino.Node function) {
        com.google.common.base.Preconditions.checkArgument(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(function.getLastChild(), "arguments", com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isObjectCallMethod(com.google.javascript.rhino.Node callNode, java.lang.String methodName) {
        if (callNode.isCall()) {
            com.google.javascript.rhino.Node functionIndentifyingExpression = callNode.getFirstChild();
            if (com.google.javascript.jscomp.NodeUtil.isGet(functionIndentifyingExpression)) {
                com.google.javascript.rhino.Node last = functionIndentifyingExpression.getLastChild();
                if ((last != null) && last.isString()) {
                    java.lang.String propName = last.getString();
                    return propName.equals(methodName);
                }
            }
        }
        return false;
    }

    static boolean isFunctionObjectCall(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "call");
    }

    static boolean isFunctionObjectApply(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "apply");
    }

    static boolean isVarOrSimpleAssignLhs(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        return (parent.isAssign() && (parent.getFirstChild() == n)) || parent.isVar();
    }

    public static boolean isLValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument((n.isName() || n.isGetProp()) || n.isGetElem());
        com.google.javascript.rhino.Node parent = n.getParent();
        if (parent == null) {
            return false;
        }
        return (((((((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) || (com.google.javascript.jscomp.NodeUtil.isForIn(parent) && (parent.getFirstChild() == n))) || parent.isVar()) || (parent.isFunction() && (parent.getFirstChild() == n))) || parent.isDec()) || parent.isInc()) || parent.isParamList()) || parent.isCatch();
    }

    static boolean isObjectLitKey(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String getObjectLitKeyName(com.google.javascript.rhino.Node key) {
        switch (key.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return key.getString();
        }
        throw new java.lang.IllegalStateException("Unexpected node type: " + key);
    }

    static com.google.javascript.rhino.jstype.JSType getObjectLitKeyTypeFromValueType(com.google.javascript.rhino.Node key, com.google.javascript.rhino.jstype.JSType valueType) {
        if (valueType != null) {
            switch (key.getType()) {
                case com.google.javascript.rhino.Token.GETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        valueType = fntype.getReturnType();
                    } else {
                        return null;
                    }
                    break;
                case com.google.javascript.rhino.Token.SETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        com.google.javascript.rhino.Node param = fntype.getParametersNode().getFirstChild();
                        valueType = param.getJSType();
                    } else {
                        return null;
                    }
                    break;
            }
        }
        return valueType;
    }

    static boolean isGetOrSetKey(com.google.javascript.rhino.Node node) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String opToStr(int operator) {
        switch (operator) {
            case com.google.javascript.rhino.Token.BITOR :
                return "|";
            case com.google.javascript.rhino.Token.OR :
                return "||";
            case com.google.javascript.rhino.Token.BITXOR :
                return "^";
            case com.google.javascript.rhino.Token.AND :
                return "&&";
            case com.google.javascript.rhino.Token.BITAND :
                return "&";
            case com.google.javascript.rhino.Token.SHEQ :
                return "===";
            case com.google.javascript.rhino.Token.EQ :
                return "==";
            case com.google.javascript.rhino.Token.NOT :
                return "!";
            case com.google.javascript.rhino.Token.NE :
                return "!=";
            case com.google.javascript.rhino.Token.SHNE :
                return "!==";
            case com.google.javascript.rhino.Token.LSH :
                return "<<";
            case com.google.javascript.rhino.Token.IN :
                return "in";
            case com.google.javascript.rhino.Token.LE :
                return "<=";
            case com.google.javascript.rhino.Token.LT :
                return "<";
            case com.google.javascript.rhino.Token.URSH :
                return ">>>";
            case com.google.javascript.rhino.Token.RSH :
                return ">>";
            case com.google.javascript.rhino.Token.GE :
                return ">=";
            case com.google.javascript.rhino.Token.GT :
                return ">";
            case com.google.javascript.rhino.Token.MUL :
                return "*";
            case com.google.javascript.rhino.Token.DIV :
                return "/";
            case com.google.javascript.rhino.Token.MOD :
                return "%";
            case com.google.javascript.rhino.Token.BITNOT :
                return "~";
            case com.google.javascript.rhino.Token.ADD :
                return "+";
            case com.google.javascript.rhino.Token.SUB :
                return "-";
            case com.google.javascript.rhino.Token.POS :
                return "+";
            case com.google.javascript.rhino.Token.NEG :
                return "-";
            case com.google.javascript.rhino.Token.ASSIGN :
                return "=";
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return "|=";
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return "^=";
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return "&=";
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return "<<=";
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return ">>=";
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return ">>>=";
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return "+=";
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return "-=";
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return "*=";
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return "/=";
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return "%=";
            case com.google.javascript.rhino.Token.VOID :
                return "void";
            case com.google.javascript.rhino.Token.TYPEOF :
                return "typeof";
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return "instanceof";
            default :
                return null;
        }
    }

    static java.lang.String opToStrNoFail(int operator) {
        java.lang.String res = com.google.javascript.jscomp.NodeUtil.opToStr(operator);
        if (res == null) {
            throw new java.lang.Error((("Unknown op " + operator) + ": ") + com.google.javascript.rhino.Token.name(operator));
        }
        return res;
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type) {
        return com.google.javascript.jscomp.NodeUtil.containsType(node, type, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static void redeclareVarsInsideBranch(com.google.javascript.rhino.Node branch) {
        java.util.Collection<com.google.javascript.rhino.Node> vars = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(branch);
        if (vars.isEmpty()) {
            return;
        }
        com.google.javascript.rhino.Node parent = com.google.javascript.jscomp.NodeUtil.getAddingRoot(branch);
        for (com.google.javascript.rhino.Node nameNode : vars) {
            com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(com.google.javascript.rhino.IR.name(nameNode.getString()).srcref(nameNode)).srcref(nameNode);
            com.google.javascript.jscomp.NodeUtil.copyNameAnnotations(nameNode, var.getFirstChild());
            parent.addChildToFront(var);
        }
    }

    static void copyNameAnnotations(com.google.javascript.rhino.Node source, com.google.javascript.rhino.Node destination) {
        if (source.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME)) {
            destination.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
    }

    private static com.google.javascript.rhino.Node getAddingRoot(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node addingRoot = null;
        com.google.javascript.rhino.Node ancestor = n;
        while (null != (ancestor = ancestor.getParent())) {
            int type = ancestor.getType();
            if (type == com.google.javascript.rhino.Token.SCRIPT) {
                addingRoot = ancestor;
                break;
            } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
                addingRoot = ancestor.getLastChild();
                break;
            }
        } 
        com.google.common.base.Preconditions.checkState(addingRoot.isBlock() || addingRoot.isScript());
        com.google.common.base.Preconditions.checkState((addingRoot.getFirstChild() == null) || (!addingRoot.getFirstChild().isScript()));
        return addingRoot;
    }

    public static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        int endPos = name.indexOf('.');
        if (endPos == (-1)) {
            return com.google.javascript.jscomp.NodeUtil.newName(convention, name);
        }
        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newName(convention, name.substring(0, endPos));
        int startPos;
        do {
            startPos = endPos + 1;
            endPos = name.indexOf('.', startPos);
            java.lang.String part = (endPos == (-1)) ? name.substring(startPos) : name.substring(startPos, endPos);
            com.google.javascript.rhino.Node propNode = com.google.javascript.rhino.IR.string(part);
            if (convention.isConstantKey(part)) {
                propNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
            }
            node = com.google.javascript.rhino.IR.getprop(node, propNode);
        } while (endPos != (-1) );
        return node;
    }

    static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(convention, name);
        com.google.javascript.jscomp.NodeUtil.setDebugInformation(node, basisNode, originalName);
        return node;
    }

    static com.google.javascript.rhino.Node getRootOfQualifiedName(com.google.javascript.rhino.Node qName) {
        for (com.google.javascript.rhino.Node current = qName; true; current = current.getFirstChild()) {
            if (current.isName() || current.isThis()) {
                return current;
            }
            com.google.common.base.Preconditions.checkState(current.isGetProp());
        }
    }

    static void setDebugInformation(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        node.copyInformationFromForTree(basisNode);
        node.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
    }

    private static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.rhino.IR.name(name);
        if (convention.isConstant(name)) {
            nameNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
        return nameNode;
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node srcref) {
        return com.google.javascript.jscomp.NodeUtil.newName(convention, name).srcref(srcref);
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.NodeUtil.newName(convention, name, basisNode);
        nameNode.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
        return nameNode;
    }

    static boolean isLatin(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if (c > com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN) {
                return false;
            }
        }
        return true;
    }

    static boolean isValidSimpleName(java.lang.String name) {
        return (com.google.javascript.rhino.TokenStream.isJSIdentifier(name) && (!com.google.javascript.rhino.TokenStream.isKeyword(name))) && com.google.javascript.jscomp.NodeUtil.isLatin(name);
    }

    public static boolean isValidQualifiedName(java.lang.String name) {
        if (name.endsWith(".") || name.startsWith(".")) {
            return false;
        }
        java.lang.String[] parts = name.split("\\.");
        for (java.lang.String part : parts) {
            if (!com.google.javascript.jscomp.NodeUtil.isValidSimpleName(part)) {
                return false;
            }
        }
        return true;
    }

    static boolean isValidPropertyName(java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isValidSimpleName(name);
    }

    private static class VarCollector implements com.google.javascript.jscomp.NodeUtil.Visitor {
        final java.util.Map<java.lang.String, com.google.javascript.rhino.Node> vars = com.google.common.collect.Maps.newLinkedHashMap();

        @java.lang.Override
        public void visit(com.google.javascript.rhino.Node n) {
            if (n.isName()) {
                com.google.javascript.rhino.Node parent = n.getParent();
                if ((parent != null) && parent.isVar()) {
                    java.lang.String name = n.getString();
                    if (!vars.containsKey(name)) {
                        vars.put(name, n);
                    }
                }
            }
        }
    }

    static java.util.Collection<com.google.javascript.rhino.Node> getVarsDeclaredInBranch(com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.NodeUtil.VarCollector collector = new com.google.javascript.jscomp.NodeUtil.VarCollector();
        com.google.javascript.jscomp.NodeUtil.visitPreOrder(root, collector, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        return collector.vars.values();
    }

    static boolean isPrototypePropertyDeclaration(com.google.javascript.rhino.Node n) {
        if (!com.google.javascript.jscomp.NodeUtil.isExprAssign(n)) {
            return false;
        }
        return com.google.javascript.jscomp.NodeUtil.isPrototypeProperty(n.getFirstChild().getFirstChild());
    }

    static boolean isPrototypeProperty(com.google.javascript.rhino.Node n) {
        java.lang.String lhsString = n.getQualifiedName();
        if (lhsString == null) {
            return false;
        }
        int prototypeIdx = lhsString.indexOf(".prototype.");
        return prototypeIdx != (-1);
    }

    static com.google.javascript.rhino.Node getPrototypeClassName(com.google.javascript.rhino.Node qName) {
        com.google.javascript.rhino.Node cur = qName;
        while (cur.isGetProp()) {
            if (cur.getLastChild().getString().equals("prototype")) {
                return cur.getFirstChild();
            } else {
                cur = cur.getFirstChild();
            }
        } 
        return null;
    }

    static java.lang.String getPrototypePropertyName(com.google.javascript.rhino.Node qName) {
        java.lang.String qNameStr = qName.getQualifiedName();
        int prototypeIdx = qNameStr.lastIndexOf(".prototype.");
        int memberIndex = (prototypeIdx + ".prototype".length()) + 1;
        return qNameStr.substring(memberIndex);
    }

    static com.google.javascript.rhino.Node newUndefinedNode(com.google.javascript.rhino.Node srcReferenceNode) {
        com.google.javascript.rhino.Node node = com.google.javascript.rhino.IR.voidNode(com.google.javascript.rhino.IR.number(0));
        if (srcReferenceNode != null) {
            node.copyInformationFromForTree(srcReferenceNode);
        }
        return node;
    }

    static com.google.javascript.rhino.Node newVarNode(java.lang.String name, com.google.javascript.rhino.Node value) {
        com.google.javascript.rhino.Node nodeName = com.google.javascript.rhino.IR.name(name);
        if (value != null) {
            com.google.common.base.Preconditions.checkState(value.getNext() == null);
            nodeName.addChildToBack(value);
            nodeName.srcref(value);
        }
        com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(nodeName).srcref(nodeName);
        return var;
    }

    private static class MatchNameNode implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final java.lang.String name;

        MatchNameNode(java.lang.String name) {
            this.name = name;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.isName() && n.getString().equals(name);
        }
    }

    static class MatchNodeType implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final int type;

        MatchNodeType(int type) {
            this.type = type;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.getType() == type;
        }
    }

    static class MatchDeclaration implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) || n.isVar();
        }
    }

    private static class MatchNotFunction implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return !n.isFunction();
        }
    }

    static final com.google.common.base.Predicate<com.google.javascript.rhino.Node> MATCH_NOT_FUNCTION = new com.google.javascript.jscomp.NodeUtil.MatchNotFunction();

    static class MatchShallowStatement implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            return n.isBlock() || ((!n.isFunction()) && (((parent == null) || com.google.javascript.jscomp.NodeUtil.isControlStructure(parent)) || com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)));
        }
    }

    static int getNodeTypeReferenceCount(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(node, name, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static int getNameReferenceCount(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static boolean has(com.google.javascript.rhino.Node node, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (pred.apply(node)) {
            return true;
        }
        if (!traverseChildrenPred.apply(node)) {
            return false;
        }
        for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.has(c, pred, traverseChildrenPred)) {
                return true;
            }
        }
        return false;
    }

    static int getCount(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        int total = 0;
        if (pred.apply(n)) {
            total++;
        }
        if (traverseChildrenPred.apply(n)) {
            for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                total += com.google.javascript.jscomp.NodeUtil.getCount(c, pred, traverseChildrenPred);
            }
        }
        return total;
    }

    static interface Visitor {
        public abstract void visit(com.google.javascript.rhino.Node node);
    }

    static void visitPreOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor visitor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        visitor.visit(node);
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPreOrder(c, visitor, traverseChildrenPred);
            }
        }
    }

    static void visitPostOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor visitor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPostOrder(c, visitor, traverseChildrenPred);
            }
        }
        visitor.visit(node);
    }

    static boolean hasFinally(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getChildCount() == 3;
    }

    static com.google.javascript.rhino.Node getCatchBlock(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getFirstChild().getNext();
    }

    static boolean hasCatchHandler(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isBlock());
        return n.hasChildren() && n.getFirstChild().isCatch();
    }

    public static com.google.javascript.rhino.Node getFunctionParameters(com.google.javascript.rhino.Node fnNode) {
        com.google.common.base.Preconditions.checkArgument(fnNode.isFunction());
        return fnNode.getFirstChild().getNext();
    }

    static boolean isConstantName(com.google.javascript.rhino.Node node) {
        return node.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
    }

    static boolean isConstantByConvention(com.google.javascript.jscomp.CodingConvention convention, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        java.lang.String name = node.getString();
        if (parent.isGetProp() && (node == parent.getLastChild())) {
            return convention.isConstantKey(name);
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(node, parent)) {
            return convention.isConstantKey(name);
        } else {
            return convention.isConstant(name);
        }
    }

    public static com.google.javascript.rhino.JSDocInfo getFunctionJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isFunction());
        com.google.javascript.rhino.JSDocInfo fnInfo = n.getJSDocInfo();
        if ((fnInfo == null) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n)) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent.isAssign()) {
                fnInfo = parent.getJSDocInfo();
            } else if (parent.isName()) {
                fnInfo = parent.getParent().getJSDocInfo();
            }
        }
        return fnInfo;
    }

    public static java.lang.String getSourceName(com.google.javascript.rhino.Node n) {
        java.lang.String sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getSourceFileName();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.StaticSourceFile sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getStaticSourceFile();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.InputId getInputId(com.google.javascript.rhino.Node n) {
        while ((n != null) && (!n.isScript())) {
            n = n.getParent();
        } 
        return (n != null) && n.isScript() ? n.getInputId() : null;
    }

    static com.google.javascript.rhino.Node newCallNode(com.google.javascript.rhino.Node callTarget, com.google.javascript.rhino.Node... parameters) {
        boolean isFreeCall = !com.google.javascript.jscomp.NodeUtil.isGet(callTarget);
        com.google.javascript.rhino.Node call = com.google.javascript.rhino.IR.call(callTarget);
        call.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, isFreeCall);
        for (com.google.javascript.rhino.Node parameter : parameters) {
            call.addChildToBack(parameter);
        }
        return call;
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value) {
        return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysFalse());
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value, com.google.common.base.Predicate<com.google.javascript.rhino.Node> locals) {
        switch (value.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals));
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                if (value.getBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP)) {
                    return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals);
                } else {
                    return true;
                }
            case com.google.javascript.rhino.Token.THIS :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.NAME :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.CALL :
                return (com.google.javascript.jscomp.NodeUtil.callHasLocalResult(value) || com.google.javascript.jscomp.NodeUtil.isToStringMethodCall(value)) || locals.apply(value);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.newHasLocalResult(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return true;
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.IN :
                return true;
            default :
                if ((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(value) || com.google.javascript.jscomp.NodeUtil.isSimpleOperator(value)) || com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                    return true;
                }
                throw new java.lang.IllegalStateException((("Unexpected expression node" + value) + "\n parent:") + value.getParent());
        }
    }

    private static com.google.javascript.rhino.Node getNthSibling(com.google.javascript.rhino.Node first, int index) {
        com.google.javascript.rhino.Node sibling = first;
        while ((index != 0) && (sibling != null)) {
            sibling = sibling.getNext();
            index--;
        } 
        return sibling;
    }

    static com.google.javascript.rhino.Node getArgumentForFunction(com.google.javascript.rhino.Node function, int index) {
        com.google.common.base.Preconditions.checkState(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(function.getFirstChild().getNext().getFirstChild(), index);
    }

    static com.google.javascript.rhino.Node getArgumentForCallOrNew(com.google.javascript.rhino.Node call, int index) {
        com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isCallOrNew(call));
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(call.getFirstChild().getNext(), index);
    }

    private static boolean isToStringMethodCall(com.google.javascript.rhino.Node call) {
        com.google.javascript.rhino.Node getNode = call.getFirstChild();
        if (com.google.javascript.jscomp.NodeUtil.isGet(getNode)) {
            com.google.javascript.rhino.Node propNode = getNode.getLastChild();
            return propNode.isString() && "toString".equals(propNode.getString());
        }
        return false;
    }

    static com.google.javascript.rhino.JSDocInfo getBestJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info == null) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent == null) {
                return null;
            }
            if (parent.isName()) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            } else if (parent.isAssign()) {
                return parent.getJSDocInfo();
            } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
                return parent.getJSDocInfo();
            } else if (parent.isFunction()) {
                return parent.getJSDocInfo();
            } else if (parent.isVar() && parent.hasOneChild()) {
                return parent.getJSDocInfo();
            } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            }
        }
        return info;
    }

    static com.google.javascript.rhino.Node getBestLValue(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        boolean isFunctionDeclaration = com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n);
        if (isFunctionDeclaration) {
            return n.getFirstChild();
        } else if (parent.isName()) {
            return parent;
        } else if (parent.isAssign()) {
            return parent.getFirstChild();
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
            return parent;
        } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(parent);
        }
        return null;
    }

    static com.google.javascript.rhino.Node getRValueOfLValue(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return n.getNext();
            case com.google.javascript.rhino.Token.VAR :
                return n.getFirstChild();
            case com.google.javascript.rhino.Token.FUNCTION :
                return parent;
        }
        return null;
    }

    static com.google.javascript.rhino.Node getBestLValueOwner(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
        } else if (com.google.javascript.jscomp.NodeUtil.isGet(lValue)) {
            return lValue.getFirstChild();
        }
        return null;
    }

    static java.lang.String getBestLValueName(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {
            com.google.javascript.rhino.Node owner = com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
            if (owner != null) {
                java.lang.String ownerName = com.google.javascript.jscomp.NodeUtil.getBestLValueName(owner);
                if (ownerName != null) {
                    return (ownerName + ".") + com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(lValue);
                }
            }
            return null;
        }
        return lValue.getQualifiedName();
    }

    static boolean isExpressionResultUsed(com.google.javascript.rhino.Node expr) {
        com.google.javascript.rhino.Node parent = expr.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                return false;
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return expr == parent.getFirstChild() ? true : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.COMMA :
                com.google.javascript.rhino.Node gramps = parent.getParent();
                if (gramps.isCall() && (parent == gramps.getFirstChild())) {
                    if ((((expr == parent.getFirstChild()) && (parent.getChildCount() == 2)) && expr.getNext().isName()) && "eval".equals(expr.getNext().getString())) {
                        return true;
                    }
                }
                return expr == parent.getFirstChild() ? false : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.FOR :
                if (!com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                    return parent.getChildAtIndex(1) == expr;
                }
                break;
        }
        return true;
    }

    static boolean isExecutedExactlyOnce(com.google.javascript.rhino.Node n) {
        inspect : do {
            com.google.javascript.rhino.Node parent = n.getParent();
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.HOOK :
                case com.google.javascript.rhino.Token.AND :
                case com.google.javascript.rhino.Token.OR :
                    if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.FOR :
                    if (com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                        if (parent.getChildAtIndex(1) != n) {
                            return false;
                        }
                    } else if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.DO :
                    return false;
                case com.google.javascript.rhino.Token.TRY :
                    if ((!com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) || (parent.getLastChild() != n)) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.DEFAULT_CASE :
                    return false;
                case com.google.javascript.rhino.Token.SCRIPT :
                case com.google.javascript.rhino.Token.FUNCTION :
                    break inspect;
            }
        } while ((n = n.getParent()) != null );
        return true;
    }

    static com.google.javascript.rhino.Node booleanNode(boolean value) {
        return value ? com.google.javascript.rhino.IR.trueNode() : com.google.javascript.rhino.IR.falseNode();
    }

    static com.google.javascript.rhino.Node numberNode(double value, com.google.javascript.rhino.Node srcref) {
        com.google.javascript.rhino.Node result;
        if (java.lang.Double.isNaN(value)) {
            result = com.google.javascript.rhino.IR.name("NaN");
        } else if (value == java.lang.Double.POSITIVE_INFINITY) {
            result = com.google.javascript.rhino.IR.name("Infinity");
        } else if (value == java.lang.Double.NEGATIVE_INFINITY) {
            result = com.google.javascript.rhino.IR.neg(com.google.javascript.rhino.IR.name("Infinity"));
        } else {
            result = com.google.javascript.rhino.IR.number(value);
        }
        if (srcref != null) {
            result.srcrefTree(srcref);
        }
        return result;
    }
}
[167220] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659901014098
GPR[SSUN]-1659901014098
944853999
GPR[SPVATF]-1659901014349
GPR[EPVATF]-1659901015308
GPR[SPS]-1659901015308
[168970] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:842.
GPR[EPS]-1659901015848
GPR[SPVATF]-1659901015849
GPR[EPVATF]-1659901016809
GPR[SPS]-1659901016809
[170506] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:842.
GPR[EPS]-1659901017384
GPR[ESUN]-1659901017384
GPR[SSUN]-1659901017384
944853999
GPR[ESUN]-1659901017654
GPR[SSUN]-1659901017654
944853999
GPR[SPVATF]-1659901017907
GPR[EPVATF]-1659901019009
GPR[SPS]-1659901019009
[172677] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:198.
GPR[EPS]-1659901019555
GPR[ESUN]-1659901019555
GPR[SSUN]-1659901019555
944853999
GPR[ESUN]-1659901019809
GPR[SSUN]-1659901019809
-1966087783
GPR[SPVATF]-1659901020000
GPR[EPVATF]-1659901020070
[173192] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901020070
GPR[SSUN]-1659901020070
944853999
GPR[SPVATF]-1659901020320
GPR[EPVATF]-1659901021317
GPR[SPS]-1659901021317
[174981] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:262.
GPR[EPS]-1659901021859
GPR[SPVATF]-1659901021859
GPR[EPVATF]-1659901022855
GPR[SPS]-1659901022855
[176561] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:262.
GPR[EPS]-1659901023439
GPR[ESUN]-1659901023439
GPR[SSUN]-1659901023439
944853999
GPR[ESUN]-1659901023690
GPR[SSUN]-1659901023690
-1966087783
GPR[SPVATF]-1659901023881
GPR[EPVATF]-1659901023949
[177071] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901023949
GPR[SSUN]-1659901023949
-1966087783
GPR[SPVATF]-1659901024137
GPR[EPVATF]-1659901024204
[177326] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901024204
GPR[SSUN]-1659901024204
-1966087783
GPR[SPVATF]-1659901024398
GPR[EPVATF]-1659901024468
[177590] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901024468
GPR[SSUN]-1659901024468
-1966087783
GPR[SPVATF]-1659901024660
GPR[EPVATF]-1659901024728
[177850] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901024728
GPR[SSUN]-1659901024728
-1966087783
GPR[SPVATF]-1659901024916
GPR[EPVATF]-1659901024987
[178109] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901024987
GPR[SSUN]-1659901024987
-1966087783
GPR[SPVATF]-1659901025182
GPR[EPVATF]-1659901025253
[178375] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659901025253
GPR[EPVATF]-1659901025321
[178444] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901025322
GPR[SSUN]-1659901025322
-1966087783
GPR[ESUN]-1659901025516
GPR[SSUN]-1659901025516
2433571
GPR[ESUN]-1659901025753
GPR[SSUN]-1659901025753
2433571
GPR[ESUN]-1659901025993
GPR[SSUN]-1659901025993
-675467674
GPR[ESUN]-1659901026194
GPR[SSUN]-1659901026194
1187751237
GPR[ESUN]-1659901026477
GPR[SSUN]-1659901026477
80988634
GPR[ESUN]-1659901026657
GPR[SSUN]-1659901026657
944853999
GPR[ESUN]-1659901026909
GPR[SSUN]-1659901026909
944853999
GPR[SPVATF]-1659901027300
GPR[EPVATF]-1659901028328
GPR[SPS]-1659901028328
[182004] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:1169.
GPR[EPS]-1659901028882
GPR[SPVATF]-1659901028882
GPR[EPVATF]-1659901029883
GPR[SPS]-1659901029883
[183582] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:1169.
GPR[EPS]-1659901030460
GPR[ESUN]-1659901030460
GPR[SSUN]-1659901030460
944853999
GPR[ESUN]-1659901030713
GPR[SSUN]-1659901030713
944853999
GPR[SPVATF]-1659901031006
GPR[EPVATF]-1659901032046
GPR[SPS]-1659901032046
[185543] ERROR ConstraintModelBuilder - Unable to compile the change: 
class PeepholeFoldConstants extends com.google.javascript.jscomp.AbstractPeepholeOptimization {
    static final com.google.javascript.jscomp.DiagnosticType INVALID_GETELEM_INDEX_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_INVALID_GETELEM_INDEX_ERROR", "Array index not integer: {0}");

    static final com.google.javascript.jscomp.DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_INDEX_OUT_OF_BOUNDS_ERROR", "Array index out of bounds: {0}");

    static final com.google.javascript.jscomp.DiagnosticType NEGATING_A_NON_NUMBER_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NEGATING_A_NON_NUMBER_ERROR", "Can't negate non-numeric value: {0}");

    static final com.google.javascript.jscomp.DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE = com.google.javascript.jscomp.DiagnosticType.error("JSC_BITWISE_OPERAND_OUT_OF_RANGE", "Operand out of range, bitwise operation will lose information: {0}");

    static final com.google.javascript.jscomp.DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = com.google.javascript.jscomp.DiagnosticType.error("JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS", "Shift amount out of bounds: {0}");

    static final com.google.javascript.jscomp.DiagnosticType FRACTIONAL_BITWISE_OPERAND = com.google.javascript.jscomp.DiagnosticType.error("JSC_FRACTIONAL_BITWISE_OPERAND", "Fractional bitwise operand: {0}");

    private static final double MAX_FOLD_NUMBER = java.lang.Math.pow(2, 53);

    private final boolean late;

    PeepholeFoldConstants(boolean late) {
        this.late = late;
    }

    @java.lang.Override
    com.google.javascript.rhino.Node optimizeSubtree(com.google.javascript.rhino.Node subtree) {
        switch (subtree.getType()) {
            case com.google.javascript.rhino.Token.NEW :
                return tryFoldCtorCall(subtree);
            case com.google.javascript.rhino.Token.TYPEOF :
                return tryFoldTypeof(subtree);
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.BITNOT :
                tryReduceOperandsForOp(subtree);
                return tryFoldUnaryOperator(subtree);
            case com.google.javascript.rhino.Token.VOID :
                return tryReduceVoid(subtree);
            default :
                tryReduceOperandsForOp(subtree);
                return tryFoldBinaryOperator(subtree);
        }
    }

    private com.google.javascript.rhino.Node tryFoldBinaryOperator(com.google.javascript.rhino.Node subtree) {
        com.google.javascript.rhino.Node left = subtree.getFirstChild();
        if (left == null) {
            return subtree;
        }
        com.google.javascript.rhino.Node right = left.getNext();
        if (right == null) {
            return subtree;
        }
        switch (subtree.getType()) {
            case com.google.javascript.rhino.Token.GETPROP :
                return tryFoldGetProp(subtree, left, right);
            case com.google.javascript.rhino.Token.GETELEM :
                return tryFoldGetElem(subtree, left, right);
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return tryFoldInstanceof(subtree, left, right);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return tryFoldAndOr(subtree, left, right);
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
                return tryFoldShift(subtree, left, right);
            case com.google.javascript.rhino.Token.ASSIGN :
                return tryFoldAssign(subtree, left, right);
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return tryUnfoldAssignOp(subtree, left, right);
            case com.google.javascript.rhino.Token.ADD :
                return tryFoldAdd(subtree, left, right);
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
                return tryFoldArithmeticOp(subtree, left, right);
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
                com.google.javascript.rhino.Node result = tryFoldArithmeticOp(subtree, left, right);
                if (result != subtree) {
                    return result;
                }
                return tryFoldLeftChildOp(subtree, left, right);
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return tryFoldComparison(subtree, left, right);
            default :
                return subtree;
        }
    }

    private com.google.javascript.rhino.Node tryReduceVoid(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node child = n.getFirstChild();
        if ((!child.isNumber()) || (child.getDouble() != 0.0)) {
            if (!mayHaveSideEffects(n)) {
                n.replaceChild(child, com.google.javascript.rhino.IR.number(0));
                reportCodeChange();
            }
        }
        return n;
    }

    private void tryReduceOperandsForOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                com.google.javascript.rhino.Node left = n.getFirstChild();
                com.google.javascript.rhino.Node right = n.getLastChild();
                if ((!com.google.javascript.jscomp.NodeUtil.mayBeString(left)) && (!com.google.javascript.jscomp.NodeUtil.mayBeString(right))) {
                    tryConvertOperandsToNumber(n);
                }
                break;
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                tryConvertToNumber(n.getLastChild());
                break;
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                tryConvertOperandsToNumber(n);
                break;
        }
    }

    private void tryConvertOperandsToNumber(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node next;
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = next) {
            next = c.getNext();
            tryConvertToNumber(c);
        }
    }

    private void tryConvertToNumber(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.NUMBER :
                return;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.COMMA :
                tryConvertToNumber(n.getLastChild());
                return;
            case com.google.javascript.rhino.Token.HOOK :
                tryConvertToNumber(n.getChildAtIndex(1));
                tryConvertToNumber(n.getLastChild());
                return;
            case com.google.javascript.rhino.Token.NAME :
                if (!com.google.javascript.jscomp.NodeUtil.isUndefined(n)) {
                    return;
                }
                break;
        }
        java.lang.Double result = com.google.javascript.jscomp.NodeUtil.getNumberValue(n);
        if (result == null) {
            return;
        }
        double value = result;
        com.google.javascript.rhino.Node replacement = com.google.javascript.jscomp.NodeUtil.numberNode(value, n);
        if (replacement.isEquivalentTo(n)) {
            return;
        }
        n.getParent().replaceChild(n, replacement);
        reportCodeChange();
    }

    private com.google.javascript.rhino.Node tryFoldTypeof(com.google.javascript.rhino.Node originalTypeofNode) {
        com.google.common.base.Preconditions.checkArgument(originalTypeofNode.isTypeOf());
        com.google.javascript.rhino.Node argumentNode = originalTypeofNode.getFirstChild();
        if ((argumentNode == null) || (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(argumentNode, true))) {
            return originalTypeofNode;
        }
        java.lang.String typeNameString = null;
        switch (argumentNode.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                typeNameString = "function";
                break;
            case com.google.javascript.rhino.Token.STRING :
                typeNameString = "string";
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                typeNameString = "number";
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                typeNameString = "boolean";
                break;
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.ARRAYLIT :
                typeNameString = "object";
                break;
            case com.google.javascript.rhino.Token.VOID :
                typeNameString = "undefined";
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ("undefined".equals(argumentNode.getString())) {
                    typeNameString = "undefined";
                }
                break;
        }
        if (typeNameString != null) {
            com.google.javascript.rhino.Node newNode = com.google.javascript.rhino.IR.string(typeNameString);
            originalTypeofNode.getParent().replaceChild(originalTypeofNode, newNode);
            reportCodeChange();
            return newNode;
        }
        return originalTypeofNode;
    }

    private com.google.javascript.rhino.Node tryFoldUnaryOperator(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.hasOneChild());
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node parent = n.getParent();
        if (left == null) {
            return n;
        }
        com.google.javascript.rhino.jstype.TernaryValue leftVal = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(left);
        if (leftVal == com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
            return n;
        }
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.NOT :
                if (late && left.isNumber()) {
                    double numValue = left.getDouble();
                    if ((numValue == 0) || (numValue == 1)) {
                        return n;
                    }
                }
                com.google.javascript.rhino.Node replacementNode = com.google.javascript.jscomp.NodeUtil.booleanNode(!leftVal.toBoolean(true));
                parent.replaceChild(n, replacementNode);
                reportCodeChange();
                return replacementNode;
            case com.google.javascript.rhino.Token.POS :
                if (com.google.javascript.jscomp.NodeUtil.isNumericResult(left)) {
                    parent.replaceChild(n, left.detachFromParent());
                    reportCodeChange();
                    return left;
                }
                return n;
            case com.google.javascript.rhino.Token.NEG :
                try {
                    if (left.isName()) {
                        if (left.getString().equals("Infinity")) {
                            return n;
                        } else if (left.getString().equals("NaN")) {
                            n.removeChild(left);
                            parent.replaceChild(n, left);
                            reportCodeChange();
                            return left;
                        }
                    }
                    double negNum = -left.getDouble();
                    com.google.javascript.rhino.Node negNumNode = com.google.javascript.rhino.IR.number(negNum);
                    parent.replaceChild(n, negNumNode);
                    reportCodeChange();
                    return negNumNode;
                } catch (java.lang.UnsupportedOperationException ex) {
                    error(com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR, left);
                    return n;
                }
            case com.google.javascript.rhino.Token.BITNOT :
                try {
                    double val = left.getDouble();
                    if ((val >= java.lang.Integer.MIN_VALUE) && (val <= java.lang.Integer.MAX_VALUE)) {
                        int intVal = ((int) (val));
                        if (intVal == val) {
                            com.google.javascript.rhino.Node notIntValNode = com.google.javascript.rhino.IR.number(~intVal);
                            parent.replaceChild(n, notIntValNode);
                            reportCodeChange();
                            return notIntValNode;
                        } else {
                            error(com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND, left);
                            return n;
                        }
                    } else {
                        error(com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE, left);
                        return n;
                    }
                } catch (java.lang.UnsupportedOperationException ex) {
                    error(com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR, left);
                    return n;
                }
            default :
                return n;
        }
    }

    private com.google.javascript.rhino.Node tryFoldInstanceof(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isInstanceOf());
        if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, true) && (!mayHaveSideEffects(right))) {
            com.google.javascript.rhino.Node replacementNode = null;
            if (com.google.javascript.jscomp.NodeUtil.isImmutableValue(left)) {
                replacementNode = com.google.javascript.rhino.IR.falseNode();
            } else if (right.isName() && "Object".equals(right.getString())) {
                replacementNode = com.google.javascript.rhino.IR.trueNode();
            }
            if (replacementNode != null) {
                n.getParent().replaceChild(n, replacementNode);
                reportCodeChange();
                return replacementNode;
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldAssign(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isAssign());
        if (!late) {
            return n;
        }
        if ((!right.hasChildren()) || (right.getFirstChild().getNext() != right.getLastChild())) {
            return n;
        }
        if (mayHaveSideEffects(left)) {
            return n;
        }
        com.google.javascript.rhino.Node newRight;
        if (areNodesEqualForInlining(left, right.getFirstChild())) {
            newRight = right.getLastChild();
        } else if (com.google.javascript.jscomp.NodeUtil.isCommutative(right.getType()) && areNodesEqualForInlining(left, right.getLastChild())) {
            newRight = right.getFirstChild();
        } else {
            return n;
        }
        int newType = -1;
        switch (right.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                newType = com.google.javascript.rhino.Token.ASSIGN_ADD;
                break;
            case com.google.javascript.rhino.Token.BITAND :
                newType = com.google.javascript.rhino.Token.ASSIGN_BITAND;
                break;
            case com.google.javascript.rhino.Token.BITOR :
                newType = com.google.javascript.rhino.Token.ASSIGN_BITOR;
                break;
            case com.google.javascript.rhino.Token.BITXOR :
                newType = com.google.javascript.rhino.Token.ASSIGN_BITXOR;
                break;
            case com.google.javascript.rhino.Token.DIV :
                newType = com.google.javascript.rhino.Token.ASSIGN_DIV;
                break;
            case com.google.javascript.rhino.Token.LSH :
                newType = com.google.javascript.rhino.Token.ASSIGN_LSH;
                break;
            case com.google.javascript.rhino.Token.MOD :
                newType = com.google.javascript.rhino.Token.ASSIGN_MOD;
                break;
            case com.google.javascript.rhino.Token.MUL :
                newType = com.google.javascript.rhino.Token.ASSIGN_MUL;
                break;
            case com.google.javascript.rhino.Token.RSH :
                newType = com.google.javascript.rhino.Token.ASSIGN_RSH;
                break;
            case com.google.javascript.rhino.Token.SUB :
                newType = com.google.javascript.rhino.Token.ASSIGN_SUB;
                break;
            case com.google.javascript.rhino.Token.URSH :
                newType = com.google.javascript.rhino.Token.ASSIGN_URSH;
                break;
            default :
                return n;
        }
        com.google.javascript.rhino.Node newNode = new com.google.javascript.rhino.Node(newType, left.detachFromParent(), newRight.detachFromParent());
        n.getParent().replaceChild(n, newNode);
        reportCodeChange();
        return newNode;
    }

    private com.google.javascript.rhino.Node tryUnfoldAssignOp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (late) {
            return n;
        }
        if ((!n.hasChildren()) || (n.getFirstChild().getNext() != n.getLastChild())) {
            return n;
        }
        if (mayHaveSideEffects(left)) {
            return n;
        }
        int op = com.google.javascript.jscomp.NodeUtil.getOpFromAssignmentOp(n);
        com.google.javascript.rhino.Node replacement = com.google.javascript.rhino.IR.assign(left.detachFromParent(), new com.google.javascript.rhino.Node(op, left.cloneTree(), right.detachFromParent()).srcref(n));
        n.getParent().replaceChild(n, replacement);
        reportCodeChange();
        return replacement;
    }

    private com.google.javascript.rhino.Node tryFoldAndOr(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.javascript.rhino.Node parent = n.getParent();
        com.google.javascript.rhino.Node result = null;
        int type = n.getType();
        com.google.javascript.rhino.jstype.TernaryValue leftVal = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(left);
        if (leftVal != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
            boolean lval = leftVal.toBoolean(true);
            if ((lval && (type == com.google.javascript.rhino.Token.OR)) || ((!lval) && (type == com.google.javascript.rhino.Token.AND))) {
                result = left;
            } else if (!mayHaveSideEffects(left)) {
                result = right;
            }
        }
        if (result != null) {
            n.removeChild(result);
            parent.replaceChild(n, result);
            reportCodeChange();
            return result;
        } else {
            return n;
        }
    }

    private com.google.javascript.rhino.Node tryFoldChildAddString(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(right, false) && left.isAdd()) {
            com.google.javascript.rhino.Node ll = left.getFirstChild();
            com.google.javascript.rhino.Node lr = ll.getNext();
            if (lr.isString()) {
                java.lang.String leftString = com.google.javascript.jscomp.NodeUtil.getStringValue(lr);
                java.lang.String rightString = com.google.javascript.jscomp.NodeUtil.getStringValue(right);
                if ((leftString != null) && (rightString != null)) {
                    left.removeChild(ll);
                    java.lang.String result = leftString + rightString;
                    n.replaceChild(left, ll);
                    n.replaceChild(right, com.google.javascript.rhino.IR.string(result));
                    reportCodeChange();
                    return n;
                }
            }
        }
        if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, false) && right.isAdd()) {
            com.google.javascript.rhino.Node rl = right.getFirstChild();
            com.google.javascript.rhino.Node rr = right.getLastChild();
            if (rl.isString()) {
                java.lang.String leftString = com.google.javascript.jscomp.NodeUtil.getStringValue(left);
                java.lang.String rightString = com.google.javascript.jscomp.NodeUtil.getStringValue(rl);
                if ((leftString != null) && (rightString != null)) {
                    right.removeChild(rr);
                    java.lang.String result = leftString + rightString;
                    n.replaceChild(right, rr);
                    n.replaceChild(left, com.google.javascript.rhino.IR.string(result));
                    reportCodeChange();
                    return n;
                }
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldAddConstantString(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (left.isString() || right.isString()) {
            java.lang.String leftString = com.google.javascript.jscomp.NodeUtil.getStringValue(left);
            java.lang.String rightString = com.google.javascript.jscomp.NodeUtil.getStringValue(right);
            if ((leftString != null) && (rightString != null)) {
                com.google.javascript.rhino.Node newStringNode = com.google.javascript.rhino.IR.string(leftString + rightString);
                n.getParent().replaceChild(n, newStringNode);
                reportCodeChange();
                return newStringNode;
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldArithmeticOp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.javascript.rhino.Node result = performArithmeticOp(n.getType(), left, right);
        if (result != null) {
            result.copyInformationFromForTree(n);
            n.getParent().replaceChild(n, result);
            reportCodeChange();
            return result;
        }
        return n;
    }

    private com.google.javascript.rhino.Node performArithmeticOp(int opType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if ((opType == com.google.javascript.rhino.Token.ADD) && (com.google.javascript.jscomp.NodeUtil.mayBeString(left, false) || com.google.javascript.jscomp.NodeUtil.mayBeString(right, false))) {
            return null;
        }
        double result;
        java.lang.Double lValObj = com.google.javascript.jscomp.NodeUtil.getNumberValue(left);
        if (lValObj == null) {
            return null;
        }
        java.lang.Double rValObj = com.google.javascript.jscomp.NodeUtil.getNumberValue(right);
        if (rValObj == null) {
            return null;
        }
        double lval = lValObj;
        double rval = rValObj;
        switch (opType) {
            case com.google.javascript.rhino.Token.BITAND :
                result = com.google.javascript.rhino.head.ScriptRuntime.toInt32(lval) & com.google.javascript.rhino.head.ScriptRuntime.toInt32(rval);
                break;
            case com.google.javascript.rhino.Token.BITOR :
                result = com.google.javascript.rhino.head.ScriptRuntime.toInt32(lval) | com.google.javascript.rhino.head.ScriptRuntime.toInt32(rval);
                break;
            case com.google.javascript.rhino.Token.BITXOR :
                result = com.google.javascript.rhino.head.ScriptRuntime.toInt32(lval) ^ com.google.javascript.rhino.head.ScriptRuntime.toInt32(rval);
                break;
            case com.google.javascript.rhino.Token.ADD :
                result = lval + rval;
                break;
            case com.google.javascript.rhino.Token.SUB :
                result = lval - rval;
                break;
            case com.google.javascript.rhino.Token.MUL :
                result = lval * rval;
                break;
            case com.google.javascript.rhino.Token.MOD :
                if (rval == 0) {
                    return null;
                }
                result = lval % rval;
                break;
            case com.google.javascript.rhino.Token.DIV :
                if (rval == 0) {
                    return null;
                }
                result = lval / rval;
                break;
            default :
                throw new java.lang.Error("Unexpected arithmetic operator");
        }
        if (((((java.lang.String.valueOf(result).length() <= ((java.lang.String.valueOf(lval).length() + java.lang.String.valueOf(rval).length()) + 1)) && (java.lang.Math.abs(result) <= com.google.javascript.jscomp.PeepholeFoldConstants.MAX_FOLD_NUMBER)) || java.lang.Double.isNaN(result)) || (result == java.lang.Double.POSITIVE_INFINITY)) || (result == java.lang.Double.NEGATIVE_INFINITY)) {
            return com.google.javascript.jscomp.NodeUtil.numberNode(result, null);
        }
        return null;
    }

    private com.google.javascript.rhino.Node tryFoldLeftChildOp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        int opType = n.getType();
        com.google.common.base.Preconditions.checkState((com.google.javascript.jscomp.NodeUtil.isAssociative(opType) && com.google.javascript.jscomp.NodeUtil.isCommutative(opType)) || n.isAdd());
        com.google.common.base.Preconditions.checkState((!n.isAdd()) || (!com.google.javascript.jscomp.NodeUtil.mayBeString(n)));
        java.lang.Double rightValObj = com.google.javascript.jscomp.NodeUtil.getNumberValue(right);
        if ((rightValObj != null) && (left.getType() == opType)) {
            com.google.common.base.Preconditions.checkState(left.getChildCount() == 2);
            com.google.javascript.rhino.Node ll = left.getFirstChild();
            com.google.javascript.rhino.Node lr = ll.getNext();
            com.google.javascript.rhino.Node valueToCombine = ll;
            com.google.javascript.rhino.Node replacement = performArithmeticOp(opType, valueToCombine, right);
            if (replacement == null) {
                valueToCombine = lr;
                replacement = performArithmeticOp(opType, valueToCombine, right);
            }
            if (replacement != null) {
                left.removeChild(valueToCombine);
                n.replaceChild(left, left.removeFirstChild());
                replacement.copyInformationFromForTree(right);
                n.replaceChild(right, replacement);
                reportCodeChange();
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldAdd(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(node.isAdd());
        if (com.google.javascript.jscomp.NodeUtil.mayBeString(node, true)) {
            if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, false) && com.google.javascript.jscomp.NodeUtil.isLiteralValue(right, false)) {
                return tryFoldAddConstantString(node, left, right);
            } else {
                return tryFoldChildAddString(node, left, right);
            }
        } else {
            com.google.javascript.rhino.Node result = tryFoldArithmeticOp(node, left, right);
            if (result != node) {
                return result;
            }
            return tryFoldLeftChildOp(node, left, right);
        }
    }

    private com.google.javascript.rhino.Node tryFoldShift(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (left.isNumber() && right.isNumber()) {
            double result;
            double lval = left.getDouble();
            double rval = right.getDouble();
            if (!((lval >= java.lang.Integer.MIN_VALUE) && (lval <= java.lang.Integer.MAX_VALUE))) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE, left);
                return n;
            }
            if (!((rval >= 0) && (rval < 32))) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
                return n;
            }
            int lvalInt = ((int) (lval));
            if (lvalInt != lval) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND, left);
                return n;
            }
            int rvalInt = ((int) (rval));
            if (rvalInt != rval) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND, right);
                return n;
            }
            switch (n.getType()) {
                case com.google.javascript.rhino.Token.LSH :
                    result = lvalInt << rvalInt;
                    break;
                case com.google.javascript.rhino.Token.RSH :
                    result = lvalInt >> rvalInt;
                    break;
                case com.google.javascript.rhino.Token.URSH :
                    long lvalLong = lvalInt & 0xffffffffL;
                    result = lvalLong >>> rvalInt;
                    break;
                default :
                    throw new java.lang.AssertionError("Unknown shift operator: " + com.google.javascript.rhino.Token.name(n.getType()));
            }
            com.google.javascript.rhino.Node newNumber = com.google.javascript.rhino.IR.number(result);
            n.getParent().replaceChild(n, newNumber);
            reportCodeChange();
            return newNumber;
        }
        return n;
    }

    @java.lang.SuppressWarnings("fallthrough")
    private com.google.javascript.rhino.Node tryFoldComparison(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        boolean leftLiteral = com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, true);
        boolean rightLiteral = com.google.javascript.jscomp.NodeUtil.isLiteralValue(right, true);
        if ((!leftLiteral) || (!rightLiteral)) {
            if ((n.getType() != com.google.javascript.rhino.Token.GT) && (n.getType() != com.google.javascript.rhino.Token.LT)) {
                return n;
            }
        }
        int op = n.getType();
        boolean result;
        boolean undefinedRight = com.google.javascript.jscomp.NodeUtil.isUndefined(right) && rightLiteral;
        boolean nullRight = right.isNull();
        int lhType = getNormalizedNodeType(left);
        int rhType = getNormalizedNodeType(right);
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(52).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("undefinedRight",undefinedRight);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("op",op);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR",com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS",com.google.javascript.jscomp.PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND",com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("nullRight",nullRight);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("right",right);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR",com.google.javascript.jscomp.PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.this.late",com.google.javascript.jscomp.PeepholeFoldConstants.this.late);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("rightLiteral",rightLiteral);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR",com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("leftLiteral",leftLiteral);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("left",left);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("lhType",lhType);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("rhType",rhType);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE",com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.MAX_FOLD_NUMBER",com.google.javascript.jscomp.PeepholeFoldConstants.MAX_FOLD_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectionEnds();
        }
        if (runtimeAngelicValue)
            switch (lhType) {
                case com.google.javascript.rhino.Token.VOID :
                    if (!leftLiteral) {
                        return n;
                    } else if (!rightLiteral) {
                        return n;
                    } else {
                        result = compareToUndefined(right, op);
                    }
                    break;
                case com.google.javascript.rhino.Token.NULL :
                    if (rightLiteral && isEqualityOp(op)) {
                        result = compareToNull(right, op);
                        break;
                    }
                case com.google.javascript.rhino.Token.TRUE :
                case com.google.javascript.rhino.Token.FALSE :
                    if (undefinedRight) {
                        result = compareToUndefined(left, op);
                        break;
                    }
                    if (((rhType != com.google.javascript.rhino.Token.TRUE) && (rhType != com.google.javascript.rhino.Token.FALSE)) && (rhType != com.google.javascript.rhino.Token.NULL)) {
                        return n;
                    }
                    switch (op) {
                        case com.google.javascript.rhino.Token.SHEQ :
                        case com.google.javascript.rhino.Token.EQ :
                            result = lhType == rhType;
                            break;
                        case com.google.javascript.rhino.Token.SHNE :
                        case com.google.javascript.rhino.Token.NE :
                            result = lhType != rhType;
                            break;
                        case com.google.javascript.rhino.Token.GE :
                        case com.google.javascript.rhino.Token.LE :
                        case com.google.javascript.rhino.Token.GT :
                        case com.google.javascript.rhino.Token.LT :
                            java.lang.Boolean compareResult = compareAsNumbers(op, left, right);
                            if (compareResult != null) {
                                result = compareResult;
                            } else {
                                return n;
                            }
                            break;
                        default :
                            return n;
                    }
                    break;
                case com.google.javascript.rhino.Token.THIS :
                    if (!right.isThis()) {
                        return n;
                    }
                    switch (op) {
                        case com.google.javascript.rhino.Token.SHEQ :
                        case com.google.javascript.rhino.Token.EQ :
                            result = true;
                            break;
                        case com.google.javascript.rhino.Token.SHNE :
                        case com.google.javascript.rhino.Token.NE :
                            result = false;
                            break;
                        default :
                            return n;
                    }
                    break;
                case com.google.javascript.rhino.Token.STRING :
                    if (undefinedRight) {
                        result = compareToUndefined(left, op);
                        break;
                    }
                    if (nullRight && isEqualityOp(op)) {
                        result = compareToNull(left, op);
                        break;
                    }
                    if (com.google.javascript.rhino.Token.STRING != right.getType()) {
                        return n;
                    }
                    com.google.javascript.rhino.jstype.TernaryValue ternary = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                    switch (op) {
                        case com.google.javascript.rhino.Token.SHEQ :
                        case com.google.javascript.rhino.Token.EQ :
                            ternary = areStringsEqual(left.getString(), right.getString());
                            break;
                        case com.google.javascript.rhino.Token.SHNE :
                        case com.google.javascript.rhino.Token.NE :
                            ternary = areStringsEqual(left.getString(), right.getString()).not();
                            break;
                    }
                    if (ternary == com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                        return n;
                    }
                    result = ternary.toBoolean(true);
                    break;
                case com.google.javascript.rhino.Token.NUMBER :
                    if (undefinedRight) {
                        result = compareToUndefined(left, op);
                        break;
                    }
                    if (nullRight && isEqualityOp(op)) {
                        result = compareToNull(left, op);
                        break;
                    }
                    if (com.google.javascript.rhino.Token.NUMBER != right.getType()) {
                        return n;
                    }
                    java.lang.Boolean compareResult = compareAsNumbers(op, left, right);
                    if (compareResult != null) {
                        result = compareResult;
                    } else {
                        return null;
                    }
                    break;
                case com.google.javascript.rhino.Token.NAME :
                    if (leftLiteral && undefinedRight) {
                        result = compareToUndefined(left, op);
                        break;
                    }
                    if (rightLiteral) {
                        boolean undefinedLeft = left.getString().equals("undefined");
                        if (undefinedLeft) {
                            result = compareToUndefined(right, op);
                            break;
                        }
                        if ((leftLiteral && nullRight) && isEqualityOp(op)) {
                            result = compareToNull(left, op);
                            break;
                        }
                    }
                    if (com.google.javascript.rhino.Token.NAME != right.getType()) {
                        return n;
                    }
                    java.lang.String ln = left.getString();
                    java.lang.String rn = right.getString();
                    if (!ln.equals(rn)) {
                        return n;
                    }
                    switch (op) {
                        case com.google.javascript.rhino.Token.LT :
                        case com.google.javascript.rhino.Token.GT :
                            result = false;
                            break;
                        default :
                            return n;
                    }
                    break;
                case com.google.javascript.rhino.Token.NEG :
                    if (leftLiteral) {
                        if (undefinedRight) {
                            result = compareToUndefined(left, op);
                            break;
                        }
                        if (nullRight && isEqualityOp(op)) {
                            result = compareToNull(left, op);
                            break;
                        }
                    }
                    return n;
                case com.google.javascript.rhino.Token.ARRAYLIT :
                case com.google.javascript.rhino.Token.OBJECTLIT :
                case com.google.javascript.rhino.Token.REGEXP :
                case com.google.javascript.rhino.Token.FUNCTION :
                    if (leftLiteral) {
                        if (undefinedRight) {
                            result = compareToUndefined(left, op);
                            break;
                        }
                        if (nullRight && isEqualityOp(op)) {
                            result = compareToNull(left, op);
                            break;
                        }
                    }
                    return n;
                default :
                    return n;
            }

        com.google.javascript.rhino.Node newNode = com.google.javascript.jscomp.NodeUtil.booleanNode(result);
        n.getParent().replaceChild(n, newNode);
        reportCodeChange();
        return newNode;
    }

    private com.google.javascript.rhino.jstype.TernaryValue areStringsEqual(java.lang.String a, java.lang.String b) {
        if ((a.indexOf('\u000b') != (-1)) || (b.indexOf('\u000b') != (-1))) {
            return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        } else {
            return a.equals(b) ? com.google.javascript.rhino.jstype.TernaryValue.TRUE : com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        }
    }

    private int getNormalizedNodeType(com.google.javascript.rhino.Node n) {
        int type = n.getType();
        if (type == com.google.javascript.rhino.Token.NOT) {
            com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n);
            switch (value) {
                case TRUE :
                    return com.google.javascript.rhino.Token.TRUE;
                case FALSE :
                    return com.google.javascript.rhino.Token.FALSE;
            }
        }
        return type;
    }

    private java.lang.Boolean compareAsNumbers(int op, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        java.lang.Double leftValue = com.google.javascript.jscomp.NodeUtil.getNumberValue(left);
        if (leftValue == null) {
            return null;
        }
        java.lang.Double rightValue = com.google.javascript.jscomp.NodeUtil.getNumberValue(right);
        if (rightValue == null) {
            return null;
        }
        double lv = leftValue;
        double rv = rightValue;
        java.lang.Boolean result;
        switch (op) {
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.EQ :
                com.google.common.base.Preconditions.checkState(left.isNumber() && right.isNumber());
                result = lv == rv;
                break;
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.NE :
                com.google.common.base.Preconditions.checkState(left.isNumber() && right.isNumber());
                result = lv != rv;
                break;
            case com.google.javascript.rhino.Token.LE :
                result = lv <= rv;
                break;
            case com.google.javascript.rhino.Token.LT :
                result = lv < rv;
                break;
            case com.google.javascript.rhino.Token.GE :
                result = lv >= rv;
                break;
            case com.google.javascript.rhino.Token.GT :
                result = lv > rv;
                break;
            default :
                return null;
        }
        return result;
    }

    private boolean compareToUndefined(com.google.javascript.rhino.Node value, int op) {
        com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isLiteralValue(value, true));
        boolean valueUndefined = com.google.javascript.jscomp.NodeUtil.isUndefined(value);
        boolean valueNull = com.google.javascript.rhino.Token.NULL == value.getType();
        boolean equivalent = valueUndefined || valueNull;
        switch (op) {
            case com.google.javascript.rhino.Token.EQ :
                return equivalent;
            case com.google.javascript.rhino.Token.NE :
                return !equivalent;
            case com.google.javascript.rhino.Token.SHEQ :
                return valueUndefined;
            case com.google.javascript.rhino.Token.SHNE :
                return !valueUndefined;
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
                return false;
            default :
                throw new java.lang.IllegalStateException("unexpected.");
        }
    }

    private boolean isEqualityOp(int op) {
        switch (op) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return true;
        }
        return false;
    }

    private boolean compareToNull(com.google.javascript.rhino.Node value, int op) {
        boolean valueUndefined = com.google.javascript.jscomp.NodeUtil.isUndefined(value);
        boolean valueNull = com.google.javascript.rhino.Token.NULL == value.getType();
        boolean equivalent = valueUndefined || valueNull;
        switch (op) {
            case com.google.javascript.rhino.Token.EQ :
                return equivalent;
            case com.google.javascript.rhino.Token.NE :
                return !equivalent;
            case com.google.javascript.rhino.Token.SHEQ :
                return valueNull;
            case com.google.javascript.rhino.Token.SHNE :
                return !valueNull;
            default :
                throw new java.lang.IllegalStateException("unexpected.");
        }
    }

    private com.google.javascript.rhino.Node tryFoldCtorCall(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isNew());
        if (inForcedStringContext(n)) {
            return tryFoldInForcedStringContext(n);
        }
        return n;
    }

    private boolean inForcedStringContext(com.google.javascript.rhino.Node n) {
        if (n.getParent().isGetElem() && (n.getParent().getLastChild() == n)) {
            return true;
        }
        if (n.getParent().isAdd()) {
            return true;
        }
        return false;
    }

    private com.google.javascript.rhino.Node tryFoldInForcedStringContext(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isNew());
        com.google.javascript.rhino.Node objectType = n.getFirstChild();
        if (!objectType.isName()) {
            return n;
        }
        if (objectType.getString().equals("String")) {
            com.google.javascript.rhino.Node value = objectType.getNext();
            java.lang.String stringValue = null;
            if (value == null) {
                stringValue = "";
            } else {
                if (!com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                    return n;
                }
                stringValue = com.google.javascript.jscomp.NodeUtil.getStringValue(value);
            }
            if (stringValue == null) {
                return n;
            }
            com.google.javascript.rhino.Node parent = n.getParent();
            com.google.javascript.rhino.Node newString = com.google.javascript.rhino.IR.string(stringValue);
            parent.replaceChild(n, newString);
            newString.copyInformationFrom(parent);
            reportCodeChange();
            return newString;
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldGetElem(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isGetElem());
        if (left.isObjectLit()) {
            return tryFoldObjectPropAccess(n, left, right);
        }
        if (left.isArrayLit()) {
            return tryFoldArrayAccess(n, left, right);
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldGetProp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isGetProp());
        if (left.isObjectLit()) {
            return tryFoldObjectPropAccess(n, left, right);
        }
        if (right.isString() && right.getString().equals("length")) {
            int knownLength = -1;
            switch (left.getType()) {
                case com.google.javascript.rhino.Token.ARRAYLIT :
                    if (mayHaveSideEffects(left)) {
                        return n;
                    }
                    knownLength = left.getChildCount();
                    break;
                case com.google.javascript.rhino.Token.STRING :
                    knownLength = left.getString().length();
                    break;
                default :
                    return n;
            }
            com.google.common.base.Preconditions.checkState(knownLength != (-1));
            com.google.javascript.rhino.Node lengthNode = com.google.javascript.rhino.IR.number(knownLength);
            n.getParent().replaceChild(n, lengthNode);
            reportCodeChange();
            return lengthNode;
        }
        return n;
    }

    private boolean isAssignmentTarget(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        if (((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) || parent.isInc()) || parent.isDec()) {
            return true;
        }
        return false;
    }

    private com.google.javascript.rhino.Node tryFoldArrayAccess(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.javascript.rhino.Node parent = n.getParent();
        if (isAssignmentTarget(n)) {
            return n;
        }
        if (!right.isNumber()) {
            return n;
        }
        double index = right.getDouble();
        int intIndex = ((int) (index));
        if (intIndex != index) {
            error(com.google.javascript.jscomp.PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR, right);
            return n;
        }
        if (intIndex < 0) {
            error(com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR, right);
            return n;
        }
        com.google.javascript.rhino.Node current = left.getFirstChild();
        com.google.javascript.rhino.Node elem = null;
        for (int i = 0; current != null; i++) {
            if (i != intIndex) {
                if (mayHaveSideEffects(current)) {
                    return n;
                }
            } else {
                elem = current;
            }
            current = current.getNext();
        }
        if (elem == null) {
            error(com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR, right);
            return n;
        }
        if (elem.isEmpty()) {
            elem = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(elem);
        } else {
            left.removeChild(elem);
        }
        n.getParent().replaceChild(n, elem);
        reportCodeChange();
        return elem;
    }

    private com.google.javascript.rhino.Node tryFoldObjectPropAccess(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(com.google.javascript.jscomp.NodeUtil.isGet(n));
        if ((!left.isObjectLit()) || (!right.isString())) {
            return n;
        }
        if (isAssignmentTarget(n)) {
            return n;
        }
        com.google.javascript.rhino.Node key = null;
        com.google.javascript.rhino.Node value = null;
        for (com.google.javascript.rhino.Node c = left.getFirstChild(); c != null; c = c.getNext()) {
            if (c.getString().equals(right.getString())) {
                switch (c.getType()) {
                    case com.google.javascript.rhino.Token.SETTER_DEF :
                        continue;
                    case com.google.javascript.rhino.Token.GETTER_DEF :
                    case com.google.javascript.rhino.Token.STRING_KEY :
                        if ((value != null) && mayHaveSideEffects(value)) {
                            return n;
                        }
                        key = c;
                        value = key.getFirstChild();
                        break;
                    default :
                        throw new java.lang.IllegalStateException();
                }
            } else if (mayHaveSideEffects(c.getFirstChild())) {
                return n;
            }
        }
        if (value == null) {
            return n;
        }
        if (value.isFunction() && com.google.javascript.jscomp.NodeUtil.referencesThis(value)) {
            return n;
        }
        com.google.javascript.rhino.Node replacement = value.detachFromParent();
        if (key.isGetterDef()) {
            replacement = com.google.javascript.rhino.IR.call(replacement);
            replacement.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, true);
        }
        n.getParent().replaceChild(n, replacement);
        reportCodeChange();
        return n;
    }
}
[185544] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659901032422
GPR[SSUN]-1659901032422
944853999
GPR[ESUN]-1659901032679
GPR[SSUN]-1659901032679
944853999
GPR[ESUN]-1659901032933
GPR[SSUN]-1659901032933
944853999
GPR[ESUN]-1659901033189
GPR[SSUN]-1659901033189
944853999
GPR[ESUN]-1659901033454
GPR[SSUN]-1659901033454
944853999
GPR[ESUN]-1659901033721
GPR[SSUN]-1659901033721
944853999
GPR[SPVATF]-1659901033976
GPR[EPVATF]-1659901035046
GPR[SPS]-1659901035046
[188716] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:773.
GPR[EPS]-1659901035594
GPR[ESUN]-1659901035594
GPR[SSUN]-1659901035594
944853999
GPR[SPVATF]-1659901035845
GPR[EPVATF]-1659901036907
GPR[SPS]-1659901036907
[190628] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:764.
GPR[EPS]-1659901037506
GPR[SPVATF]-1659901037506
GPR[EPVATF]-1659901038597
GPR[SPS]-1659901038597
[192288] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:764.
GPR[EPS]-1659901039166
GPR[ESUN]-1659901039166
GPR[SSUN]-1659901039166
2433571
GPR[SPVATF]-1659901039417
GPR[EPVATF]-1659901040582
GPR[SPS]-1659901040582
[194338] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:972.
GPR[EPS]-1659901041216
GPR[ESUN]-1659901041216
GPR[SSUN]-1659901041216
2433571
GPR[SPVATF]-1659901041454
GPR[EPVATF]-1659901042597
GPR[SPS]-1659901042597
[196353] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:971.
GPR[EPS]-1659901043231
GPR[ESUN]-1659901043231
GPR[SSUN]-1659901043232
80988634
GPR[ESUN]-1659901043410
GPR[SSUN]-1659901043410
944853999
GPR[SPVATF]-1659901043661
GPR[EPVATF]-1659901044893
GPR[SPS]-1659901044893
[198388] ERROR ConstraintModelBuilder - Unable to compile the change: 
class PeepholeFoldConstants extends com.google.javascript.jscomp.AbstractPeepholeOptimization {
    static final com.google.javascript.jscomp.DiagnosticType INVALID_GETELEM_INDEX_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_INVALID_GETELEM_INDEX_ERROR", "Array index not integer: {0}");

    static final com.google.javascript.jscomp.DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_INDEX_OUT_OF_BOUNDS_ERROR", "Array index out of bounds: {0}");

    static final com.google.javascript.jscomp.DiagnosticType NEGATING_A_NON_NUMBER_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NEGATING_A_NON_NUMBER_ERROR", "Can't negate non-numeric value: {0}");

    static final com.google.javascript.jscomp.DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE = com.google.javascript.jscomp.DiagnosticType.error("JSC_BITWISE_OPERAND_OUT_OF_RANGE", "Operand out of range, bitwise operation will lose information: {0}");

    static final com.google.javascript.jscomp.DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = com.google.javascript.jscomp.DiagnosticType.error("JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS", "Shift amount out of bounds: {0}");

    static final com.google.javascript.jscomp.DiagnosticType FRACTIONAL_BITWISE_OPERAND = com.google.javascript.jscomp.DiagnosticType.error("JSC_FRACTIONAL_BITWISE_OPERAND", "Fractional bitwise operand: {0}");

    private static final double MAX_FOLD_NUMBER = java.lang.Math.pow(2, 53);

    private final boolean late;

    PeepholeFoldConstants(boolean late) {
        this.late = late;
    }

    @java.lang.Override
    com.google.javascript.rhino.Node optimizeSubtree(com.google.javascript.rhino.Node subtree) {
        switch (subtree.getType()) {
            case com.google.javascript.rhino.Token.NEW :
                return tryFoldCtorCall(subtree);
            case com.google.javascript.rhino.Token.TYPEOF :
                return tryFoldTypeof(subtree);
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.BITNOT :
                tryReduceOperandsForOp(subtree);
                return tryFoldUnaryOperator(subtree);
            case com.google.javascript.rhino.Token.VOID :
                return tryReduceVoid(subtree);
            default :
                tryReduceOperandsForOp(subtree);
                return tryFoldBinaryOperator(subtree);
        }
    }

    private com.google.javascript.rhino.Node tryFoldBinaryOperator(com.google.javascript.rhino.Node subtree) {
        com.google.javascript.rhino.Node left = subtree.getFirstChild();
        if (left == null) {
            return subtree;
        }
        com.google.javascript.rhino.Node right = left.getNext();
        if (right == null) {
            return subtree;
        }
        switch (subtree.getType()) {
            case com.google.javascript.rhino.Token.GETPROP :
                return tryFoldGetProp(subtree, left, right);
            case com.google.javascript.rhino.Token.GETELEM :
                return tryFoldGetElem(subtree, left, right);
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return tryFoldInstanceof(subtree, left, right);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return tryFoldAndOr(subtree, left, right);
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
                return tryFoldShift(subtree, left, right);
            case com.google.javascript.rhino.Token.ASSIGN :
                return tryFoldAssign(subtree, left, right);
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return tryUnfoldAssignOp(subtree, left, right);
            case com.google.javascript.rhino.Token.ADD :
                return tryFoldAdd(subtree, left, right);
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
                return tryFoldArithmeticOp(subtree, left, right);
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
                com.google.javascript.rhino.Node result = tryFoldArithmeticOp(subtree, left, right);
                if (result != subtree) {
                    return result;
                }
                return tryFoldLeftChildOp(subtree, left, right);
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return tryFoldComparison(subtree, left, right);
            default :
                return subtree;
        }
    }

    private com.google.javascript.rhino.Node tryReduceVoid(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node child = n.getFirstChild();
        if ((!child.isNumber()) || (child.getDouble() != 0.0)) {
            if (!mayHaveSideEffects(n)) {
                n.replaceChild(child, com.google.javascript.rhino.IR.number(0));
                reportCodeChange();
            }
        }
        return n;
    }

    private void tryReduceOperandsForOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                com.google.javascript.rhino.Node left = n.getFirstChild();
                com.google.javascript.rhino.Node right = n.getLastChild();
                if ((!com.google.javascript.jscomp.NodeUtil.mayBeString(left)) && (!com.google.javascript.jscomp.NodeUtil.mayBeString(right))) {
                    tryConvertOperandsToNumber(n);
                }
                break;
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                tryConvertToNumber(n.getLastChild());
                break;
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                tryConvertOperandsToNumber(n);
                break;
        }
    }

    private void tryConvertOperandsToNumber(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node next;
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = next) {
            next = c.getNext();
            tryConvertToNumber(c);
        }
    }

    private void tryConvertToNumber(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.NUMBER :
                return;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.COMMA :
                tryConvertToNumber(n.getLastChild());
                return;
            case com.google.javascript.rhino.Token.HOOK :
                tryConvertToNumber(n.getChildAtIndex(1));
                tryConvertToNumber(n.getLastChild());
                return;
            case com.google.javascript.rhino.Token.NAME :
                if (!com.google.javascript.jscomp.NodeUtil.isUndefined(n)) {
                    return;
                }
                break;
        }
        java.lang.Double result = com.google.javascript.jscomp.NodeUtil.getNumberValue(n);
        if (result == null) {
            return;
        }
        double value = result;
        com.google.javascript.rhino.Node replacement = com.google.javascript.jscomp.NodeUtil.numberNode(value, n);
        if (replacement.isEquivalentTo(n)) {
            return;
        }
        n.getParent().replaceChild(n, replacement);
        reportCodeChange();
    }

    private com.google.javascript.rhino.Node tryFoldTypeof(com.google.javascript.rhino.Node originalTypeofNode) {
        com.google.common.base.Preconditions.checkArgument(originalTypeofNode.isTypeOf());
        com.google.javascript.rhino.Node argumentNode = originalTypeofNode.getFirstChild();
        if ((argumentNode == null) || (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(argumentNode, true))) {
            return originalTypeofNode;
        }
        java.lang.String typeNameString = null;
        switch (argumentNode.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                typeNameString = "function";
                break;
            case com.google.javascript.rhino.Token.STRING :
                typeNameString = "string";
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                typeNameString = "number";
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                typeNameString = "boolean";
                break;
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.ARRAYLIT :
                typeNameString = "object";
                break;
            case com.google.javascript.rhino.Token.VOID :
                typeNameString = "undefined";
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ("undefined".equals(argumentNode.getString())) {
                    typeNameString = "undefined";
                }
                break;
        }
        if (typeNameString != null) {
            com.google.javascript.rhino.Node newNode = com.google.javascript.rhino.IR.string(typeNameString);
            originalTypeofNode.getParent().replaceChild(originalTypeofNode, newNode);
            reportCodeChange();
            return newNode;
        }
        return originalTypeofNode;
    }

    private com.google.javascript.rhino.Node tryFoldUnaryOperator(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.hasOneChild());
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node parent = n.getParent();
        if (left == null) {
            return n;
        }
        com.google.javascript.rhino.jstype.TernaryValue leftVal = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(left);
        if (leftVal == com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
            return n;
        }
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.NOT :
                if (late && left.isNumber()) {
                    double numValue = left.getDouble();
                    if ((numValue == 0) || (numValue == 1)) {
                        return n;
                    }
                }
                com.google.javascript.rhino.Node replacementNode = com.google.javascript.jscomp.NodeUtil.booleanNode(!leftVal.toBoolean(true));
                parent.replaceChild(n, replacementNode);
                reportCodeChange();
                return replacementNode;
            case com.google.javascript.rhino.Token.POS :
                if (com.google.javascript.jscomp.NodeUtil.isNumericResult(left)) {
                    parent.replaceChild(n, left.detachFromParent());
                    reportCodeChange();
                    return left;
                }
                return n;
            case com.google.javascript.rhino.Token.NEG :
                try {
                    if (left.isName()) {
                        if (left.getString().equals("Infinity")) {
                            return n;
                        } else if (left.getString().equals("NaN")) {
                            n.removeChild(left);
                            parent.replaceChild(n, left);
                            reportCodeChange();
                            return left;
                        }
                    }
                    double negNum = -left.getDouble();
                    com.google.javascript.rhino.Node negNumNode = com.google.javascript.rhino.IR.number(negNum);
                    parent.replaceChild(n, negNumNode);
                    reportCodeChange();
                    return negNumNode;
                } catch (java.lang.UnsupportedOperationException ex) {
                    error(com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR, left);
                    return n;
                }
            case com.google.javascript.rhino.Token.BITNOT :
                try {
                    double val = left.getDouble();
                    if ((val >= java.lang.Integer.MIN_VALUE) && (val <= java.lang.Integer.MAX_VALUE)) {
                        int intVal = ((int) (val));
                        if (intVal == val) {
                            com.google.javascript.rhino.Node notIntValNode = com.google.javascript.rhino.IR.number(~intVal);
                            parent.replaceChild(n, notIntValNode);
                            reportCodeChange();
                            return notIntValNode;
                        } else {
                            error(com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND, left);
                            return n;
                        }
                    } else {
                        error(com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE, left);
                        return n;
                    }
                } catch (java.lang.UnsupportedOperationException ex) {
                    error(com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR, left);
                    return n;
                }
            default :
                return n;
        }
    }

    private com.google.javascript.rhino.Node tryFoldInstanceof(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isInstanceOf());
        if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, true) && (!mayHaveSideEffects(right))) {
            com.google.javascript.rhino.Node replacementNode = null;
            if (com.google.javascript.jscomp.NodeUtil.isImmutableValue(left)) {
                replacementNode = com.google.javascript.rhino.IR.falseNode();
            } else if (right.isName() && "Object".equals(right.getString())) {
                replacementNode = com.google.javascript.rhino.IR.trueNode();
            }
            if (replacementNode != null) {
                n.getParent().replaceChild(n, replacementNode);
                reportCodeChange();
                return replacementNode;
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldAssign(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isAssign());
        if (!late) {
            return n;
        }
        if ((!right.hasChildren()) || (right.getFirstChild().getNext() != right.getLastChild())) {
            return n;
        }
        if (mayHaveSideEffects(left)) {
            return n;
        }
        com.google.javascript.rhino.Node newRight;
        if (areNodesEqualForInlining(left, right.getFirstChild())) {
            newRight = right.getLastChild();
        } else if (com.google.javascript.jscomp.NodeUtil.isCommutative(right.getType()) && areNodesEqualForInlining(left, right.getLastChild())) {
            newRight = right.getFirstChild();
        } else {
            return n;
        }
        int newType = -1;
        switch (right.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                newType = com.google.javascript.rhino.Token.ASSIGN_ADD;
                break;
            case com.google.javascript.rhino.Token.BITAND :
                newType = com.google.javascript.rhino.Token.ASSIGN_BITAND;
                break;
            case com.google.javascript.rhino.Token.BITOR :
                newType = com.google.javascript.rhino.Token.ASSIGN_BITOR;
                break;
            case com.google.javascript.rhino.Token.BITXOR :
                newType = com.google.javascript.rhino.Token.ASSIGN_BITXOR;
                break;
            case com.google.javascript.rhino.Token.DIV :
                newType = com.google.javascript.rhino.Token.ASSIGN_DIV;
                break;
            case com.google.javascript.rhino.Token.LSH :
                newType = com.google.javascript.rhino.Token.ASSIGN_LSH;
                break;
            case com.google.javascript.rhino.Token.MOD :
                newType = com.google.javascript.rhino.Token.ASSIGN_MOD;
                break;
            case com.google.javascript.rhino.Token.MUL :
                newType = com.google.javascript.rhino.Token.ASSIGN_MUL;
                break;
            case com.google.javascript.rhino.Token.RSH :
                newType = com.google.javascript.rhino.Token.ASSIGN_RSH;
                break;
            case com.google.javascript.rhino.Token.SUB :
                newType = com.google.javascript.rhino.Token.ASSIGN_SUB;
                break;
            case com.google.javascript.rhino.Token.URSH :
                newType = com.google.javascript.rhino.Token.ASSIGN_URSH;
                break;
            default :
                return n;
        }
        com.google.javascript.rhino.Node newNode = new com.google.javascript.rhino.Node(newType, left.detachFromParent(), newRight.detachFromParent());
        n.getParent().replaceChild(n, newNode);
        reportCodeChange();
        return newNode;
    }

    private com.google.javascript.rhino.Node tryUnfoldAssignOp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (late) {
            return n;
        }
        if ((!n.hasChildren()) || (n.getFirstChild().getNext() != n.getLastChild())) {
            return n;
        }
        if (mayHaveSideEffects(left)) {
            return n;
        }
        int op = com.google.javascript.jscomp.NodeUtil.getOpFromAssignmentOp(n);
        com.google.javascript.rhino.Node replacement = com.google.javascript.rhino.IR.assign(left.detachFromParent(), new com.google.javascript.rhino.Node(op, left.cloneTree(), right.detachFromParent()).srcref(n));
        n.getParent().replaceChild(n, replacement);
        reportCodeChange();
        return replacement;
    }

    private com.google.javascript.rhino.Node tryFoldAndOr(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.javascript.rhino.Node parent = n.getParent();
        com.google.javascript.rhino.Node result = null;
        int type = n.getType();
        com.google.javascript.rhino.jstype.TernaryValue leftVal = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(left);
        if (leftVal != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
            boolean lval = leftVal.toBoolean(true);
            if ((lval && (type == com.google.javascript.rhino.Token.OR)) || ((!lval) && (type == com.google.javascript.rhino.Token.AND))) {
                result = left;
            } else if (!mayHaveSideEffects(left)) {
                result = right;
            }
        }
        if (result != null) {
            n.removeChild(result);
            parent.replaceChild(n, result);
            reportCodeChange();
            return result;
        } else {
            return n;
        }
    }

    private com.google.javascript.rhino.Node tryFoldChildAddString(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(right, false) && left.isAdd()) {
            com.google.javascript.rhino.Node ll = left.getFirstChild();
            com.google.javascript.rhino.Node lr = ll.getNext();
            if (lr.isString()) {
                java.lang.String leftString = com.google.javascript.jscomp.NodeUtil.getStringValue(lr);
                java.lang.String rightString = com.google.javascript.jscomp.NodeUtil.getStringValue(right);
                if ((leftString != null) && (rightString != null)) {
                    left.removeChild(ll);
                    java.lang.String result = leftString + rightString;
                    n.replaceChild(left, ll);
                    n.replaceChild(right, com.google.javascript.rhino.IR.string(result));
                    reportCodeChange();
                    return n;
                }
            }
        }
        if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, false) && right.isAdd()) {
            com.google.javascript.rhino.Node rl = right.getFirstChild();
            com.google.javascript.rhino.Node rr = right.getLastChild();
            if (rl.isString()) {
                java.lang.String leftString = com.google.javascript.jscomp.NodeUtil.getStringValue(left);
                java.lang.String rightString = com.google.javascript.jscomp.NodeUtil.getStringValue(rl);
                if ((leftString != null) && (rightString != null)) {
                    right.removeChild(rr);
                    java.lang.String result = leftString + rightString;
                    n.replaceChild(right, rr);
                    n.replaceChild(left, com.google.javascript.rhino.IR.string(result));
                    reportCodeChange();
                    return n;
                }
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldAddConstantString(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (left.isString() || right.isString()) {
            java.lang.String leftString = com.google.javascript.jscomp.NodeUtil.getStringValue(left);
            java.lang.String rightString = com.google.javascript.jscomp.NodeUtil.getStringValue(right);
            if ((leftString != null) && (rightString != null)) {
                com.google.javascript.rhino.Node newStringNode = com.google.javascript.rhino.IR.string(leftString + rightString);
                n.getParent().replaceChild(n, newStringNode);
                reportCodeChange();
                return newStringNode;
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldArithmeticOp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.javascript.rhino.Node result = performArithmeticOp(n.getType(), left, right);
        if (result != null) {
            result.copyInformationFromForTree(n);
            n.getParent().replaceChild(n, result);
            reportCodeChange();
            return result;
        }
        return n;
    }

    private com.google.javascript.rhino.Node performArithmeticOp(int opType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if ((opType == com.google.javascript.rhino.Token.ADD) && (com.google.javascript.jscomp.NodeUtil.mayBeString(left, false) || com.google.javascript.jscomp.NodeUtil.mayBeString(right, false))) {
            return null;
        }
        double result;
        java.lang.Double lValObj = com.google.javascript.jscomp.NodeUtil.getNumberValue(left);
        if (lValObj == null) {
            return null;
        }
        java.lang.Double rValObj = com.google.javascript.jscomp.NodeUtil.getNumberValue(right);
        if (rValObj == null) {
            return null;
        }
        double lval = lValObj;
        double rval = rValObj;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(58).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR",com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS",com.google.javascript.jscomp.PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND",com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("opType",opType);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("lval",lval);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("lValObj",lValObj);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("right",right);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR",com.google.javascript.jscomp.PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.this.late",com.google.javascript.jscomp.PeepholeFoldConstants.this.late);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR",com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("left",left);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("rValObj",rValObj);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("rval",rval);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE",com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.MAX_FOLD_NUMBER",com.google.javascript.jscomp.PeepholeFoldConstants.MAX_FOLD_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectionEnds();
        }
        if (runtimeAngelicValue)
            switch (opType) {
                case com.google.javascript.rhino.Token.BITAND :
                    result = com.google.javascript.rhino.head.ScriptRuntime.toInt32(lval) & com.google.javascript.rhino.head.ScriptRuntime.toInt32(rval);
                    break;
                case com.google.javascript.rhino.Token.BITOR :
                    result = com.google.javascript.rhino.head.ScriptRuntime.toInt32(lval) | com.google.javascript.rhino.head.ScriptRuntime.toInt32(rval);
                    break;
                case com.google.javascript.rhino.Token.BITXOR :
                    result = com.google.javascript.rhino.head.ScriptRuntime.toInt32(lval) ^ com.google.javascript.rhino.head.ScriptRuntime.toInt32(rval);
                    break;
                case com.google.javascript.rhino.Token.ADD :
                    result = lval + rval;
                    break;
                case com.google.javascript.rhino.Token.SUB :
                    result = lval - rval;
                    break;
                case com.google.javascript.rhino.Token.MUL :
                    result = lval * rval;
                    break;
                case com.google.javascript.rhino.Token.MOD :
                    if (rval == 0) {
                        return null;
                    }
                    result = lval % rval;
                    break;
                case com.google.javascript.rhino.Token.DIV :
                    if (rval == 0) {
                        return null;
                    }
                    result = lval / rval;
                    break;
                default :
                    throw new java.lang.Error("Unexpected arithmetic operator");
            }

        if (((((java.lang.String.valueOf(result).length() <= ((java.lang.String.valueOf(lval).length() + java.lang.String.valueOf(rval).length()) + 1)) && (java.lang.Math.abs(result) <= com.google.javascript.jscomp.PeepholeFoldConstants.MAX_FOLD_NUMBER)) || java.lang.Double.isNaN(result)) || (result == java.lang.Double.POSITIVE_INFINITY)) || (result == java.lang.Double.NEGATIVE_INFINITY)) {
            return com.google.javascript.jscomp.NodeUtil.numberNode(result, null);
        }
        return null;
    }

    private com.google.javascript.rhino.Node tryFoldLeftChildOp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        int opType = n.getType();
        com.google.common.base.Preconditions.checkState((com.google.javascript.jscomp.NodeUtil.isAssociative(opType) && com.google.javascript.jscomp.NodeUtil.isCommutative(opType)) || n.isAdd());
        com.google.common.base.Preconditions.checkState((!n.isAdd()) || (!com.google.javascript.jscomp.NodeUtil.mayBeString(n)));
        java.lang.Double rightValObj = com.google.javascript.jscomp.NodeUtil.getNumberValue(right);
        if ((rightValObj != null) && (left.getType() == opType)) {
            com.google.common.base.Preconditions.checkState(left.getChildCount() == 2);
            com.google.javascript.rhino.Node ll = left.getFirstChild();
            com.google.javascript.rhino.Node lr = ll.getNext();
            com.google.javascript.rhino.Node valueToCombine = ll;
            com.google.javascript.rhino.Node replacement = performArithmeticOp(opType, valueToCombine, right);
            if (replacement == null) {
                valueToCombine = lr;
                replacement = performArithmeticOp(opType, valueToCombine, right);
            }
            if (replacement != null) {
                left.removeChild(valueToCombine);
                n.replaceChild(left, left.removeFirstChild());
                replacement.copyInformationFromForTree(right);
                n.replaceChild(right, replacement);
                reportCodeChange();
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldAdd(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(node.isAdd());
        if (com.google.javascript.jscomp.NodeUtil.mayBeString(node, true)) {
            if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, false) && com.google.javascript.jscomp.NodeUtil.isLiteralValue(right, false)) {
                return tryFoldAddConstantString(node, left, right);
            } else {
                return tryFoldChildAddString(node, left, right);
            }
        } else {
            com.google.javascript.rhino.Node result = tryFoldArithmeticOp(node, left, right);
            if (result != node) {
                return result;
            }
            return tryFoldLeftChildOp(node, left, right);
        }
    }

    private com.google.javascript.rhino.Node tryFoldShift(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (left.isNumber() && right.isNumber()) {
            double result;
            double lval = left.getDouble();
            double rval = right.getDouble();
            if (!((lval >= java.lang.Integer.MIN_VALUE) && (lval <= java.lang.Integer.MAX_VALUE))) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE, left);
                return n;
            }
            if (!((rval >= 0) && (rval < 32))) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
                return n;
            }
            int lvalInt = ((int) (lval));
            if (lvalInt != lval) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND, left);
                return n;
            }
            int rvalInt = ((int) (rval));
            if (rvalInt != rval) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND, right);
                return n;
            }
            switch (n.getType()) {
                case com.google.javascript.rhino.Token.LSH :
                    result = lvalInt << rvalInt;
                    break;
                case com.google.javascript.rhino.Token.RSH :
                    result = lvalInt >> rvalInt;
                    break;
                case com.google.javascript.rhino.Token.URSH :
                    long lvalLong = lvalInt & 0xffffffffL;
                    result = lvalLong >>> rvalInt;
                    break;
                default :
                    throw new java.lang.AssertionError("Unknown shift operator: " + com.google.javascript.rhino.Token.name(n.getType()));
            }
            com.google.javascript.rhino.Node newNumber = com.google.javascript.rhino.IR.number(result);
            n.getParent().replaceChild(n, newNumber);
            reportCodeChange();
            return newNumber;
        }
        return n;
    }

    @java.lang.SuppressWarnings("fallthrough")
    private com.google.javascript.rhino.Node tryFoldComparison(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        boolean leftLiteral = com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, true);
        boolean rightLiteral = com.google.javascript.jscomp.NodeUtil.isLiteralValue(right, true);
        if ((!leftLiteral) || (!rightLiteral)) {
            if ((n.getType() != com.google.javascript.rhino.Token.GT) && (n.getType() != com.google.javascript.rhino.Token.LT)) {
                return n;
            }
        }
        int op = n.getType();
        boolean result;
        boolean undefinedRight = com.google.javascript.jscomp.NodeUtil.isUndefined(right) && rightLiteral;
        boolean nullRight = right.isNull();
        int lhType = getNormalizedNodeType(left);
        int rhType = getNormalizedNodeType(right);
        switch (lhType) {
            case com.google.javascript.rhino.Token.VOID :
                if (!leftLiteral) {
                    return n;
                } else if (!rightLiteral) {
                    return n;
                } else {
                    result = compareToUndefined(right, op);
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
                if (rightLiteral && isEqualityOp(op)) {
                    result = compareToNull(right, op);
                    break;
                }
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                if (undefinedRight) {
                    result = compareToUndefined(left, op);
                    break;
                }
                if (((rhType != com.google.javascript.rhino.Token.TRUE) && (rhType != com.google.javascript.rhino.Token.FALSE)) && (rhType != com.google.javascript.rhino.Token.NULL)) {
                    return n;
                }
                switch (op) {
                    case com.google.javascript.rhino.Token.SHEQ :
                    case com.google.javascript.rhino.Token.EQ :
                        result = lhType == rhType;
                        break;
                    case com.google.javascript.rhino.Token.SHNE :
                    case com.google.javascript.rhino.Token.NE :
                        result = lhType != rhType;
                        break;
                    case com.google.javascript.rhino.Token.GE :
                    case com.google.javascript.rhino.Token.LE :
                    case com.google.javascript.rhino.Token.GT :
                    case com.google.javascript.rhino.Token.LT :
                        java.lang.Boolean compareResult = compareAsNumbers(op, left, right);
                        if (compareResult != null) {
                            result = compareResult;
                        } else {
                            return n;
                        }
                        break;
                    default :
                        return n;
                }
                break;
            case com.google.javascript.rhino.Token.THIS :
                if (!right.isThis()) {
                    return n;
                }
                switch (op) {
                    case com.google.javascript.rhino.Token.SHEQ :
                    case com.google.javascript.rhino.Token.EQ :
                        result = true;
                        break;
                    case com.google.javascript.rhino.Token.SHNE :
                    case com.google.javascript.rhino.Token.NE :
                        result = false;
                        break;
                    default :
                        return n;
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                if (undefinedRight) {
                    result = compareToUndefined(left, op);
                    break;
                }
                if (nullRight && isEqualityOp(op)) {
                    result = compareToNull(left, op);
                    break;
                }
                if (com.google.javascript.rhino.Token.STRING != right.getType()) {
                    return n;
                }
                com.google.javascript.rhino.jstype.TernaryValue ternary = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                switch (op) {
                    case com.google.javascript.rhino.Token.SHEQ :
                    case com.google.javascript.rhino.Token.EQ :
                        ternary = areStringsEqual(left.getString(), right.getString());
                        break;
                    case com.google.javascript.rhino.Token.SHNE :
                    case com.google.javascript.rhino.Token.NE :
                        ternary = areStringsEqual(left.getString(), right.getString()).not();
                        break;
                }
                if (ternary == com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return n;
                }
                result = ternary.toBoolean(true);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                if (undefinedRight) {
                    result = compareToUndefined(left, op);
                    break;
                }
                if (nullRight && isEqualityOp(op)) {
                    result = compareToNull(left, op);
                    break;
                }
                if (com.google.javascript.rhino.Token.NUMBER != right.getType()) {
                    return n;
                }
                java.lang.Boolean compareResult = compareAsNumbers(op, left, right);
                if (compareResult != null) {
                    result = compareResult;
                } else {
                    return null;
                }
                break;
            case com.google.javascript.rhino.Token.NAME :
                if (leftLiteral && undefinedRight) {
                    result = compareToUndefined(left, op);
                    break;
                }
                if (rightLiteral) {
                    boolean undefinedLeft = left.getString().equals("undefined");
                    if (undefinedLeft) {
                        result = compareToUndefined(right, op);
                        break;
                    }
                    if ((leftLiteral && nullRight) && isEqualityOp(op)) {
                        result = compareToNull(left, op);
                        break;
                    }
                }
                if (com.google.javascript.rhino.Token.NAME != right.getType()) {
                    return n;
                }
                java.lang.String ln = left.getString();
                java.lang.String rn = right.getString();
                if (!ln.equals(rn)) {
                    return n;
                }
                switch (op) {
                    case com.google.javascript.rhino.Token.LT :
                    case com.google.javascript.rhino.Token.GT :
                        result = false;
                        break;
                    default :
                        return n;
                }
                break;
            case com.google.javascript.rhino.Token.NEG :
                if (leftLiteral) {
                    if (undefinedRight) {
                        result = compareToUndefined(left, op);
                        break;
                    }
                    if (nullRight && isEqualityOp(op)) {
                        result = compareToNull(left, op);
                        break;
                    }
                }
                return n;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.FUNCTION :
                if (leftLiteral) {
                    if (undefinedRight) {
                        result = compareToUndefined(left, op);
                        break;
                    }
                    if (nullRight && isEqualityOp(op)) {
                        result = compareToNull(left, op);
                        break;
                    }
                }
                return n;
            default :
                return n;
        }
        com.google.javascript.rhino.Node newNode = com.google.javascript.jscomp.NodeUtil.booleanNode(result);
        n.getParent().replaceChild(n, newNode);
        reportCodeChange();
        return newNode;
    }

    private com.google.javascript.rhino.jstype.TernaryValue areStringsEqual(java.lang.String a, java.lang.String b) {
        if ((a.indexOf('\u000b') != (-1)) || (b.indexOf('\u000b') != (-1))) {
            return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        } else {
            return a.equals(b) ? com.google.javascript.rhino.jstype.TernaryValue.TRUE : com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        }
    }

    private int getNormalizedNodeType(com.google.javascript.rhino.Node n) {
        int type = n.getType();
        if (type == com.google.javascript.rhino.Token.NOT) {
            com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n);
            switch (value) {
                case TRUE :
                    return com.google.javascript.rhino.Token.TRUE;
                case FALSE :
                    return com.google.javascript.rhino.Token.FALSE;
            }
        }
        return type;
    }

    private java.lang.Boolean compareAsNumbers(int op, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        java.lang.Double leftValue = com.google.javascript.jscomp.NodeUtil.getNumberValue(left);
        if (leftValue == null) {
            return null;
        }
        java.lang.Double rightValue = com.google.javascript.jscomp.NodeUtil.getNumberValue(right);
        if (rightValue == null) {
            return null;
        }
        double lv = leftValue;
        double rv = rightValue;
        java.lang.Boolean result;
        switch (op) {
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.EQ :
                com.google.common.base.Preconditions.checkState(left.isNumber() && right.isNumber());
                result = lv == rv;
                break;
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.NE :
                com.google.common.base.Preconditions.checkState(left.isNumber() && right.isNumber());
                result = lv != rv;
                break;
            case com.google.javascript.rhino.Token.LE :
                result = lv <= rv;
                break;
            case com.google.javascript.rhino.Token.LT :
                result = lv < rv;
                break;
            case com.google.javascript.rhino.Token.GE :
                result = lv >= rv;
                break;
            case com.google.javascript.rhino.Token.GT :
                result = lv > rv;
                break;
            default :
                return null;
        }
        return result;
    }

    private boolean compareToUndefined(com.google.javascript.rhino.Node value, int op) {
        com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isLiteralValue(value, true));
        boolean valueUndefined = com.google.javascript.jscomp.NodeUtil.isUndefined(value);
        boolean valueNull = com.google.javascript.rhino.Token.NULL == value.getType();
        boolean equivalent = valueUndefined || valueNull;
        switch (op) {
            case com.google.javascript.rhino.Token.EQ :
                return equivalent;
            case com.google.javascript.rhino.Token.NE :
                return !equivalent;
            case com.google.javascript.rhino.Token.SHEQ :
                return valueUndefined;
            case com.google.javascript.rhino.Token.SHNE :
                return !valueUndefined;
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
                return false;
            default :
                throw new java.lang.IllegalStateException("unexpected.");
        }
    }

    private boolean isEqualityOp(int op) {
        switch (op) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return true;
        }
        return false;
    }

    private boolean compareToNull(com.google.javascript.rhino.Node value, int op) {
        boolean valueUndefined = com.google.javascript.jscomp.NodeUtil.isUndefined(value);
        boolean valueNull = com.google.javascript.rhino.Token.NULL == value.getType();
        boolean equivalent = valueUndefined || valueNull;
        switch (op) {
            case com.google.javascript.rhino.Token.EQ :
                return equivalent;
            case com.google.javascript.rhino.Token.NE :
                return !equivalent;
            case com.google.javascript.rhino.Token.SHEQ :
                return valueNull;
            case com.google.javascript.rhino.Token.SHNE :
                return !valueNull;
            default :
                throw new java.lang.IllegalStateException("unexpected.");
        }
    }

    private com.google.javascript.rhino.Node tryFoldCtorCall(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isNew());
        if (inForcedStringContext(n)) {
            return tryFoldInForcedStringContext(n);
        }
        return n;
    }

    private boolean inForcedStringContext(com.google.javascript.rhino.Node n) {
        if (n.getParent().isGetElem() && (n.getParent().getLastChild() == n)) {
            return true;
        }
        if (n.getParent().isAdd()) {
            return true;
        }
        return false;
    }

    private com.google.javascript.rhino.Node tryFoldInForcedStringContext(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isNew());
        com.google.javascript.rhino.Node objectType = n.getFirstChild();
        if (!objectType.isName()) {
            return n;
        }
        if (objectType.getString().equals("String")) {
            com.google.javascript.rhino.Node value = objectType.getNext();
            java.lang.String stringValue = null;
            if (value == null) {
                stringValue = "";
            } else {
                if (!com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                    return n;
                }
                stringValue = com.google.javascript.jscomp.NodeUtil.getStringValue(value);
            }
            if (stringValue == null) {
                return n;
            }
            com.google.javascript.rhino.Node parent = n.getParent();
            com.google.javascript.rhino.Node newString = com.google.javascript.rhino.IR.string(stringValue);
            parent.replaceChild(n, newString);
            newString.copyInformationFrom(parent);
            reportCodeChange();
            return newString;
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldGetElem(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isGetElem());
        if (left.isObjectLit()) {
            return tryFoldObjectPropAccess(n, left, right);
        }
        if (left.isArrayLit()) {
            return tryFoldArrayAccess(n, left, right);
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldGetProp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isGetProp());
        if (left.isObjectLit()) {
            return tryFoldObjectPropAccess(n, left, right);
        }
        if (right.isString() && right.getString().equals("length")) {
            int knownLength = -1;
            switch (left.getType()) {
                case com.google.javascript.rhino.Token.ARRAYLIT :
                    if (mayHaveSideEffects(left)) {
                        return n;
                    }
                    knownLength = left.getChildCount();
                    break;
                case com.google.javascript.rhino.Token.STRING :
                    knownLength = left.getString().length();
                    break;
                default :
                    return n;
            }
            com.google.common.base.Preconditions.checkState(knownLength != (-1));
            com.google.javascript.rhino.Node lengthNode = com.google.javascript.rhino.IR.number(knownLength);
            n.getParent().replaceChild(n, lengthNode);
            reportCodeChange();
            return lengthNode;
        }
        return n;
    }

    private boolean isAssignmentTarget(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        if (((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) || parent.isInc()) || parent.isDec()) {
            return true;
        }
        return false;
    }

    private com.google.javascript.rhino.Node tryFoldArrayAccess(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.javascript.rhino.Node parent = n.getParent();
        if (isAssignmentTarget(n)) {
            return n;
        }
        if (!right.isNumber()) {
            return n;
        }
        double index = right.getDouble();
        int intIndex = ((int) (index));
        if (intIndex != index) {
            error(com.google.javascript.jscomp.PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR, right);
            return n;
        }
        if (intIndex < 0) {
            error(com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR, right);
            return n;
        }
        com.google.javascript.rhino.Node current = left.getFirstChild();
        com.google.javascript.rhino.Node elem = null;
        for (int i = 0; current != null; i++) {
            if (i != intIndex) {
                if (mayHaveSideEffects(current)) {
                    return n;
                }
            } else {
                elem = current;
            }
            current = current.getNext();
        }
        if (elem == null) {
            error(com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR, right);
            return n;
        }
        if (elem.isEmpty()) {
            elem = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(elem);
        } else {
            left.removeChild(elem);
        }
        n.getParent().replaceChild(n, elem);
        reportCodeChange();
        return elem;
    }

    private com.google.javascript.rhino.Node tryFoldObjectPropAccess(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(com.google.javascript.jscomp.NodeUtil.isGet(n));
        if ((!left.isObjectLit()) || (!right.isString())) {
            return n;
        }
        if (isAssignmentTarget(n)) {
            return n;
        }
        com.google.javascript.rhino.Node key = null;
        com.google.javascript.rhino.Node value = null;
        for (com.google.javascript.rhino.Node c = left.getFirstChild(); c != null; c = c.getNext()) {
            if (c.getString().equals(right.getString())) {
                switch (c.getType()) {
                    case com.google.javascript.rhino.Token.SETTER_DEF :
                        continue;
                    case com.google.javascript.rhino.Token.GETTER_DEF :
                    case com.google.javascript.rhino.Token.STRING_KEY :
                        if ((value != null) && mayHaveSideEffects(value)) {
                            return n;
                        }
                        key = c;
                        value = key.getFirstChild();
                        break;
                    default :
                        throw new java.lang.IllegalStateException();
                }
            } else if (mayHaveSideEffects(c.getFirstChild())) {
                return n;
            }
        }
        if (value == null) {
            return n;
        }
        if (value.isFunction() && com.google.javascript.jscomp.NodeUtil.referencesThis(value)) {
            return n;
        }
        com.google.javascript.rhino.Node replacement = value.detachFromParent();
        if (key.isGetterDef()) {
            replacement = com.google.javascript.rhino.IR.call(replacement);
            replacement.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, true);
        }
        n.getParent().replaceChild(n, replacement);
        reportCodeChange();
        return n;
    }
}
[198389] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659901045267
GPR[SSUN]-1659901045267
944853999
GPR[ESUN]-1659901045584
GPR[SSUN]-1659901045584
944853999
GPR[ESUN]-1659901045850
GPR[SSUN]-1659901045850
1187751237
GPR[ESUN]-1659901046128
GPR[SSUN]-1659901046128
1187751237
GPR[SPVATF]-1659901046406
GPR[EPVATF]-1659901047633
GPR[SPS]-1659901047633
[201455] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class NodeUtil {
    static final long MAX_POSITIVE_INTEGER_NUMBER = ((long) (java.lang.Math.pow(2, 53)));

    static final java.lang.String JSC_PROPERTY_NAME_FN = "JSCompiler_renameProperty";

    static final char LARGEST_BASIC_LATIN = 0x7f;

    private static final java.util.Set<java.lang.String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList("Array", "Date", "Error", "Object", "RegExp", "XMLHttpRequest"));

    private NodeUtil() {
    }

    static com.google.javascript.rhino.jstype.TernaryValue getImpureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                return value.not();
            case com.google.javascript.rhino.Token.AND :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.and(rhs);
                }
            case com.google.javascript.rhino.Token.OR :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.or(rhs);
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.javascript.rhino.jstype.TernaryValue trueValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild().getNext());
                    com.google.javascript.rhino.jstype.TernaryValue falseValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    if (trueValue.equals(falseValue)) {
                        return trueValue;
                    } else {
                        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                    }
                }
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.VOID :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            default :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n);
        }
    }

    static com.google.javascript.rhino.jstype.TernaryValue getPureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getString().length() > 0);
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getDouble() != 0);
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getLastChild()).not();
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.FALSE :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            case com.google.javascript.rhino.Token.VOID :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                }
                break;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if ("undefined".equals(name) || "NaN".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                } else if ("Infinity".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.REGEXP :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
        }
        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
    }

    static java.lang.String getStringValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return n.getString();
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name)) {
                    return name;
                }
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(n.getDouble());
            case com.google.javascript.rhino.Token.FALSE :
                return "false";
            case com.google.javascript.rhino.Token.TRUE :
                return "true";
            case com.google.javascript.rhino.Token.NULL :
                return "null";
            case com.google.javascript.rhino.Token.VOID :
                return "undefined";
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? "false" : "true";
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                return com.google.javascript.jscomp.NodeUtil.arrayToString(n);
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return "[object Object]";
        }
        return null;
    }

    static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    static java.lang.String getArrayElementStringValue(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isNullOrUndefined(n) || n.isEmpty() ? "" : com.google.javascript.jscomp.NodeUtil.getStringValue(n);
    }

    static java.lang.String arrayToString(com.google.javascript.rhino.Node literal) {
        com.google.javascript.rhino.Node first = literal.getFirstChild();
        java.lang.StringBuilder result = new java.lang.StringBuilder();
        int nextSlot = 0;
        int nextSkipSlot = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            java.lang.String childValue = com.google.javascript.jscomp.NodeUtil.getArrayElementStringValue(n);
            if (childValue == null) {
                return null;
            }
            if (n != first) {
                result.append(',');
            }
            result.append(childValue);
            nextSlot++;
        }
        return result.toString();
    }

    static java.lang.Double getNumberValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
                return 1.0;
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
                return 0.0;
            case com.google.javascript.rhino.Token.NUMBER :
                return n.getDouble();
            case com.google.javascript.rhino.Token.VOID :
                if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return null;
                } else {
                    return java.lang.Double.NaN;
                }
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("undefined")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("NaN")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("Infinity")) {
                    return java.lang.Double.POSITIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NEG :
                if (((n.getChildCount() == 1) && n.getFirstChild().isName()) && n.getFirstChild().getString().equals("Infinity")) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? 0.0 : 1.0;
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.jscomp.NodeUtil.getStringNumberValue(n.getString());
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                java.lang.String value = com.google.javascript.jscomp.NodeUtil.getStringValue(n);
                return value != null ? com.google.javascript.jscomp.NodeUtil.getStringNumberValue(value) : null;
        }
        return null;
    }

    static java.lang.Double getStringNumberValue(java.lang.String rawJsString) {
        if (rawJsString.contains("\u000b")) {
            return null;
        }
        java.lang.String s = com.google.javascript.jscomp.NodeUtil.trimJsWhiteSpace(rawJsString);
        if (s.length() == 0) {
            return 0.0;
        }
        if (((s.length() > 2) && (s.charAt(0) == '0')) && ((s.charAt(1) == 'x') || (s.charAt(1) == 'X'))) {
            try {
                return java.lang.Double.valueOf(java.lang.Integer.parseInt(s.substring(2), 16));
            } catch (java.lang.NumberFormatException e) {
                return java.lang.Double.NaN;
            }
        }
        if ((((s.length() > 3) && ((s.charAt(0) == '-') || (s.charAt(0) == '+'))) && (s.charAt(1) == '0')) && ((s.charAt(2) == 'x') || (s.charAt(2) == 'X'))) {
            return null;
        }
        if ((s.equals("infinity") || s.equals("-infinity")) || s.equals("+infinity")) {
            return null;
        }
        try {
            return java.lang.Double.parseDouble(s);
        } catch (java.lang.NumberFormatException e) {
            return java.lang.Double.NaN;
        }
    }

    static java.lang.String trimJsWhiteSpace(java.lang.String s) {
        int start = 0;
        int end = s.length();
        while ((end > 0) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(end - 1)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            end--;
        } 
        while ((start < end) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(start)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            start++;
        } 
        return s.substring(start, end);
    }

    public static com.google.javascript.rhino.jstype.TernaryValue isStrWhiteSpaceChar(int c) {
        switch (c) {
            case '\u000b' :
                return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
            case ' ' :
            case '\n' :
            case '\r' :
            case '\t' :
            case ' ' :
            case '\f' :
            case ' ' :
            case ' ' :
            case '﻿' :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            default :
                return java.lang.Character.getType(c) == java.lang.Character.SPACE_SEPARATOR ? com.google.javascript.rhino.jstype.TernaryValue.TRUE : com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        }
    }

    static java.lang.String getFunctionName(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isFunction());
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return parent.getQualifiedName();
            case com.google.javascript.rhino.Token.ASSIGN :
                return parent.getFirstChild().getQualifiedName();
            default :
                java.lang.String name = n.getFirstChild().getQualifiedName();
                return name;
        }
    }

    public static java.lang.String getNearestFunctionName(com.google.javascript.rhino.Node n) {
        if (!n.isFunction()) {
            return null;
        }
        java.lang.String name = com.google.javascript.jscomp.NodeUtil.getFunctionName(n);
        if (name != null) {
            return name;
        }
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SETTER_DEF :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return parent.getString();
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(parent);
        }
        return null;
    }

    static boolean isImmutableValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NEG :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                return ("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name);
        }
        return false;
    }

    static boolean isSymmetricOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.MUL :
                return true;
        }
        return false;
    }

    static boolean isRelationalOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
                return true;
        }
        return false;
    }

    static int getInverseOperator(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.GT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.rhino.Token.LT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.rhino.Token.GE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.rhino.Token.LE :
                return com.google.javascript.rhino.Token.GE;
        }
        return com.google.javascript.rhino.Token.ERROR;
    }

    static boolean isLiteralValue(com.google.javascript.rhino.Node n, boolean includeFunctions) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ARRAYLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if ((!child.isEmpty()) && (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions))) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.REGEXP :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child.getFirstChild(), includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                return includeFunctions && (!com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n));
            default :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n);
        }
    }

    static boolean isValidDefineValue(com.google.javascript.rhino.Node val, java.util.Set<java.lang.String> defines) {
        switch (val.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.URSH :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines) && com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getLastChild(), defines);
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.POS :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines);
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.GETPROP :
                if (val.isQualifiedName()) {
                    return defines.contains(val.getQualifiedName());
                }
        }
        return false;
    }

    static boolean isEmptyBlock(com.google.javascript.rhino.Node block) {
        if (!block.isBlock()) {
            return false;
        }
        for (com.google.javascript.rhino.Node n = block.getFirstChild(); n != null; n = n.getNext()) {
            if (!n.isEmpty()) {
                return false;
            }
        }
        return true;
    }

    static boolean isSimpleOperator(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(n.getType());
    }

    static boolean isSimpleOperatorType(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.COMMA :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.URSH :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node newExpr(com.google.javascript.rhino.Node child) {
        return com.google.javascript.rhino.IR.exprResult(child).srcref(child);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(n, null);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, true, compiler);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n, null);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, false, compiler);
    }

    private static boolean checkForStateChangeHelper(com.google.javascript.rhino.Node n, boolean checkForNewObjects, com.google.javascript.jscomp.AbstractCompiler compiler) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.PARAM_LIST :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.EMPTY :
                break;
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (checkForNewObjects) {
                    return true;
                }
                for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c.getFirstChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                }
                return false;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.REGEXP :
                if (checkForNewObjects) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.NAME :
                if (n.getFirstChild() != null) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                return checkForNewObjects || (!com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
            case com.google.javascript.rhino.Token.NEW :
                if (checkForNewObjects) {
                    return true;
                }
                if (!com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n)) {
                    break;
                }
                return true;
            case com.google.javascript.rhino.Token.CALL :
                if (!com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler)) {
                    break;
                }
                return true;
            default :
                if (com.google.javascript.jscomp.NodeUtil.isSimpleOperator(n)) {
                    break;
                }
                if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
                    com.google.javascript.rhino.Node assignTarget = n.getFirstChild();
                    if (assignTarget.isName()) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getFirstChild(), checkForNewObjects, compiler) || com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getLastChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.isGet(assignTarget)) {
                        com.google.javascript.rhino.Node current = assignTarget.getFirstChild();
                        if (com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(current)) {
                            return false;
                        }
                        while (com.google.javascript.jscomp.NodeUtil.isGet(current)) {
                            current = current.getFirstChild();
                        } 
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(current, true);
                    } else {
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(assignTarget, true);
                    }
                }
                return true;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c, checkForNewObjects, compiler)) {
                return true;
            }
        }
        return false;
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(callNode, null);
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isNew()) {
            throw new java.lang.IllegalStateException("Expected NEW node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName() && com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())) {
            return false;
        }
        return true;
    }

    private static final java.util.Set<java.lang.String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("Object", "Array", "String", "Number", "Boolean", "RegExp", "Error");

    private static final java.util.Set<java.lang.String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("toString", "valueOf");

    private static final java.util.Set<java.lang.String> REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("test", "exec");

    private static final java.util.Set<java.lang.String> STRING_REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("match", "replace", "search", "split");

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(callNode, null);
    }

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode, @javax.annotation.Nullable
    com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isCall()) {
            throw new java.lang.IllegalStateException("Expected CALL node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName()) {
            java.lang.String name = nameNode.getString();
            if (com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
                return false;
            }
        } else if (nameNode.isGetProp()) {
            if (callNode.hasOneChild() && com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())) {
                return false;
            }
            if (callNode.isOnlyModifiesThisCall() && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(nameNode.getFirstChild())) {
                return false;
            }
            if (nameNode.getFirstChild().isName()) {
                if ("Math.floor".equals(nameNode.getQualifiedName())) {
                    return false;
                }
            }
            if ((compiler != null) && (!compiler.hasRegExpGlobalReferences())) {
                if (nameNode.getFirstChild().isRegExp() && com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    return false;
                } else if (nameNode.getFirstChild().isString() && com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    com.google.javascript.rhino.Node param = nameNode.getNext();
                    if ((param != null) && (param.isString() || param.isRegExp())) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    static boolean callHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isCall());
        return (n.getSideEffectFlags() & com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS) > 0;
    }

    static boolean newHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isNew());
        return n.isOnlyModifiesThisCall();
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(n, null);
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
            return true;
        }
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.CALL :
                return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NAME :
                return n.hasChildren();
            default :
                return false;
        }
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n) {
        java.util.Set<java.lang.String> emptySet = java.util.Collections.emptySet();
        return com.google.javascript.jscomp.NodeUtil.canBeSideEffected(n, emptySet);
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n, java.util.Set<java.lang.String> knownConstants) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.NEW :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return (!com.google.javascript.jscomp.NodeUtil.isConstantName(n)) && (!knownConstants.contains(n.getString()));
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GETELEM :
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
                return false;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.canBeSideEffected(c, knownConstants)) {
                return true;
            }
        }
        return false;
    }

    static int precedence(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.COMMA :
                return 0;
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN :
                return 1;
            case com.google.javascript.rhino.Token.HOOK :
                return 2;
            case com.google.javascript.rhino.Token.OR :
                return 3;
            case com.google.javascript.rhino.Token.AND :
                return 4;
            case com.google.javascript.rhino.Token.BITOR :
                return 5;
            case com.google.javascript.rhino.Token.BITXOR :
                return 6;
            case com.google.javascript.rhino.Token.BITAND :
                return 7;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return 8;
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.IN :
                return 9;
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
                return 10;
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
                return 11;
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
                return 12;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                return 13;
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
                return 15;
            default :
                throw new java.lang.Error(((("Unknown precedence for " + com.google.javascript.rhino.Token.name(type)) + " (type ") + type) + ")");
        }
    }

    static boolean isUndefined(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.VOID :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return n.getString().equals("undefined");
        }
        return false;
    }

    static boolean isNullOrUndefined(com.google.javascript.rhino.Node n) {
        return n.isNull() || com.google.javascript.jscomp.NodeUtil.isUndefined(n);
    }

    static boolean allResultsMatch(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> p) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getFirstChild(), p) && com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getFirstChild().getNext(), p) && com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            default :
                return p.apply(n);
        }
    }

    static boolean anyResultsMatch(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> p) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getFirstChild(), p) || com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getFirstChild().getNext(), p) || com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            default :
                return p.apply(n);
        }
    }

    static class NumbericResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isNumericResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate NUMBERIC_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate();

    static boolean isNumericResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);
    }

    static boolean isNumericResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                return (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getFirstChild())) && (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getLastChild()));
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.NUMBER :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("NaN")) {
                    return true;
                }
                if (name.equals("Infinity")) {
                    return true;
                }
                return false;
            default :
                return false;
        }
    }

    static class BooleanResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isBooleanResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate BOOLEAN_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate();

    static boolean isBooleanResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);
    }

    static boolean isBooleanResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.DELPROP :
                return true;
            default :
                return false;
        }
    }

    static class MayBeStringResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate MAY_BE_STRING_PREDICATE = new com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate();

    static boolean mayBeString(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayBeString(n, true);
    }

    static boolean mayBeString(com.google.javascript.rhino.Node n, boolean recurse) {
        if (recurse) {
            return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);
        } else {
            return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);
        }
    }

    static boolean mayBeStringHelper(com.google.javascript.rhino.Node n) {
        return (((!com.google.javascript.jscomp.NodeUtil.isNumericResult(n)) && (!com.google.javascript.jscomp.NodeUtil.isBooleanResult(n))) && (!com.google.javascript.jscomp.NodeUtil.isUndefined(n))) && (!n.isNull());
    }

    static boolean isAssociative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isCommutative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return true;
        }
        return false;
    }

    static int getOpFromAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.MOD;
        }
        throw new java.lang.IllegalArgumentException("Not an assignment op:" + n);
    }

    static boolean containsFunction(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.containsType(n, com.google.javascript.rhino.Token.FUNCTION);
    }

    static boolean referencesThis(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node start = (n.isFunction()) ? n.getLastChild() : n;
        return com.google.javascript.jscomp.NodeUtil.containsType(start, com.google.javascript.rhino.Token.THIS, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isGet(com.google.javascript.rhino.Node n) {
        return n.isGetProp() || n.isGetElem();
    }

    static boolean isVarDeclaration(com.google.javascript.rhino.Node n) {
        return n.isName() && n.getParent().isVar();
    }

    static com.google.javascript.rhino.Node getAssignedValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isName());
        com.google.javascript.rhino.Node parent = n.getParent();
        if (parent.isVar()) {
            return n.getFirstChild();
        } else if (parent.isAssign() && (parent.getFirstChild() == n)) {
            return n.getNext();
        } else {
            return null;
        }
    }

    static boolean isExprAssign(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isAssign();
    }

    static boolean isExprCall(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isCall();
    }

    static boolean isForIn(com.google.javascript.rhino.Node n) {
        return n.isFor() && (n.getChildCount() == 3);
    }

    static boolean isLoopStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node getLoopCodeBlock(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getFirstChild();
            default :
                return null;
        }
    }

    static boolean isWithinLoop(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node parent : n.getAncestors()) {
            if (com.google.javascript.jscomp.NodeUtil.isLoopStructure(parent)) {
                return true;
            }
            if (parent.isFunction()) {
                break;
            }
        }
        return false;
    }

    static boolean isControlStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.WITH :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                return false;
        }
    }

    static boolean isControlStructureCodeBlock(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node n) {
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.WITH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.DO :
                return parent.getFirstChild() == n;
            case com.google.javascript.rhino.Token.IF :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.TRY :
                return (parent.getFirstChild() == n) || (parent.getLastChild() == n);
            case com.google.javascript.rhino.Token.CATCH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isControlStructure(parent));
                return false;
        }
    }

    static com.google.javascript.rhino.Node getConditionExpression(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getFirstChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.FOR :
                switch (n.getChildCount()) {
                    case 3 :
                        return null;
                    case 4 :
                        return n.getFirstChild().getNext();
                }
                throw new java.lang.IllegalArgumentException("malformed 'for' statement " + n);
            case com.google.javascript.rhino.Token.CASE :
                return null;
        }
        throw new java.lang.IllegalArgumentException(n + " does not have a condition.");
    }

    static boolean isStatementBlock(com.google.javascript.rhino.Node n) {
        return n.isScript() || n.isBlock();
    }

    static boolean isStatement(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isStatementParent(n.getParent());
    }

    static boolean isStatementParent(com.google.javascript.rhino.Node parent) {
        com.google.common.base.Preconditions.checkState(parent != null);
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.LABEL :
                return true;
            default :
                return false;
        }
    }

    static boolean isSwitchCase(com.google.javascript.rhino.Node n) {
        return n.isCase() || n.isDefaultCase();
    }

    static boolean isReferenceName(com.google.javascript.rhino.Node n) {
        return n.isName() && (!n.getString().isEmpty());
    }

    static boolean isTryFinallyNode(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node child) {
        return (parent.isTry() && (parent.getChildCount() == 3)) && (child == parent.getLastChild());
    }

    static boolean isTryCatchNodeContainer(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        return parent.isTry() && (parent.getFirstChild().getNext() == n);
    }

    static void removeChild(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node node) {
        if (com.google.javascript.jscomp.NodeUtil.isTryFinallyNode(parent, node)) {
            if (com.google.javascript.jscomp.NodeUtil.hasCatchHandler(com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent))) {
                parent.removeChild(node);
            } else {
                node.detachChildren();
            }
        } else if (node.isCatch()) {
            com.google.javascript.rhino.Node tryNode = node.getParent().getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachFromParent();
        } else if (com.google.javascript.jscomp.NodeUtil.isTryCatchNodeContainer(node)) {
            com.google.javascript.rhino.Node tryNode = node.getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachChildren();
        } else if (node.isBlock()) {
            node.detachChildren();
        } else if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent) || com.google.javascript.jscomp.NodeUtil.isSwitchCase(node)) {
            parent.removeChild(node);
        } else if (parent.isVar()) {
            if (parent.hasMoreThanOneChild()) {
                parent.removeChild(node);
            } else {
                parent.removeChild(node);
                com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
            }
        } else if (parent.isLabel() && (node == parent.getLastChild())) {
            parent.removeChild(node);
            com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
        } else if (parent.isFor() && (parent.getChildCount() == 4)) {
            parent.replaceChild(node, com.google.javascript.rhino.IR.empty());
        } else {
            throw new java.lang.IllegalStateException((("Invalid attempt to remove node: " + node.toString()) + " of ") + parent.toString());
        }
    }

    static void maybeAddFinally(com.google.javascript.rhino.Node tryNode) {
        com.google.common.base.Preconditions.checkState(tryNode.isTry());
        if (!com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode)) {
            tryNode.addChildrenToBack(com.google.javascript.rhino.IR.block().srcref(tryNode));
        }
    }

    static boolean tryMergeBlock(com.google.javascript.rhino.Node block) {
        com.google.common.base.Preconditions.checkState(block.isBlock());
        com.google.javascript.rhino.Node parent = block.getParent();
        if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)) {
            com.google.javascript.rhino.Node previous = block;
            while (block.hasChildren()) {
                com.google.javascript.rhino.Node child = block.removeFirstChild();
                parent.addChildAfter(child, previous);
                previous = child;
            } 
            parent.removeChild(block);
            return true;
        } else {
            return false;
        }
    }

    static boolean isCallOrNew(com.google.javascript.rhino.Node node) {
        return node.isCall() || node.isNew();
    }

    static com.google.javascript.rhino.Node getFunctionBody(com.google.javascript.rhino.Node fn) {
        com.google.common.base.Preconditions.checkArgument(fn.isFunction());
        return fn.getLastChild();
    }

    static boolean isFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return n.isFunction() && com.google.javascript.jscomp.NodeUtil.isStatement(n);
    }

    static boolean isHoistedFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) && (n.getParent().isScript() || n.getParent().getParent().isFunction());
    }

    static boolean isFunctionExpression(com.google.javascript.rhino.Node n) {
        return n.isFunction() && (!com.google.javascript.jscomp.NodeUtil.isStatement(n));
    }

    static boolean isBleedingFunctionName(com.google.javascript.rhino.Node n) {
        return (n.isName() && (!n.getString().isEmpty())) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n.getParent());
    }

    static boolean isEmptyFunctionExpression(com.google.javascript.rhino.Node node) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(node) && com.google.javascript.jscomp.NodeUtil.isEmptyBlock(node.getLastChild());
    }

    static boolean isVarArgsFunction(com.google.javascript.rhino.Node function) {
        com.google.common.base.Preconditions.checkArgument(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(function.getLastChild(), "arguments", com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isObjectCallMethod(com.google.javascript.rhino.Node callNode, java.lang.String methodName) {
        if (callNode.isCall()) {
            com.google.javascript.rhino.Node functionIndentifyingExpression = callNode.getFirstChild();
            if (com.google.javascript.jscomp.NodeUtil.isGet(functionIndentifyingExpression)) {
                com.google.javascript.rhino.Node last = functionIndentifyingExpression.getLastChild();
                if ((last != null) && last.isString()) {
                    java.lang.String propName = last.getString();
                    return propName.equals(methodName);
                }
            }
        }
        return false;
    }

    static boolean isFunctionObjectCall(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "call");
    }

    static boolean isFunctionObjectApply(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "apply");
    }

    static boolean isVarOrSimpleAssignLhs(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        return (parent.isAssign() && (parent.getFirstChild() == n)) || parent.isVar();
    }

    public static boolean isLValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument((n.isName() || n.isGetProp()) || n.isGetElem());
        com.google.javascript.rhino.Node parent = n.getParent();
        if (parent == null) {
            return false;
        }
        return (((((((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) || (com.google.javascript.jscomp.NodeUtil.isForIn(parent) && (parent.getFirstChild() == n))) || parent.isVar()) || (parent.isFunction() && (parent.getFirstChild() == n))) || parent.isDec()) || parent.isInc()) || parent.isParamList()) || parent.isCatch();
    }

    static boolean isObjectLitKey(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String getObjectLitKeyName(com.google.javascript.rhino.Node key) {
        switch (key.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return key.getString();
        }
        throw new java.lang.IllegalStateException("Unexpected node type: " + key);
    }

    static com.google.javascript.rhino.jstype.JSType getObjectLitKeyTypeFromValueType(com.google.javascript.rhino.Node key, com.google.javascript.rhino.jstype.JSType valueType) {
        if (valueType != null) {
            switch (key.getType()) {
                case com.google.javascript.rhino.Token.GETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        valueType = fntype.getReturnType();
                    } else {
                        return null;
                    }
                    break;
                case com.google.javascript.rhino.Token.SETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        com.google.javascript.rhino.Node param = fntype.getParametersNode().getFirstChild();
                        valueType = param.getJSType();
                    } else {
                        return null;
                    }
                    break;
            }
        }
        return valueType;
    }

    static boolean isGetOrSetKey(com.google.javascript.rhino.Node node) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String opToStr(int operator) {
        switch (operator) {
            case com.google.javascript.rhino.Token.BITOR :
                return "|";
            case com.google.javascript.rhino.Token.OR :
                return "||";
            case com.google.javascript.rhino.Token.BITXOR :
                return "^";
            case com.google.javascript.rhino.Token.AND :
                return "&&";
            case com.google.javascript.rhino.Token.BITAND :
                return "&";
            case com.google.javascript.rhino.Token.SHEQ :
                return "===";
            case com.google.javascript.rhino.Token.EQ :
                return "==";
            case com.google.javascript.rhino.Token.NOT :
                return "!";
            case com.google.javascript.rhino.Token.NE :
                return "!=";
            case com.google.javascript.rhino.Token.SHNE :
                return "!==";
            case com.google.javascript.rhino.Token.LSH :
                return "<<";
            case com.google.javascript.rhino.Token.IN :
                return "in";
            case com.google.javascript.rhino.Token.LE :
                return "<=";
            case com.google.javascript.rhino.Token.LT :
                return "<";
            case com.google.javascript.rhino.Token.URSH :
                return ">>>";
            case com.google.javascript.rhino.Token.RSH :
                return ">>";
            case com.google.javascript.rhino.Token.GE :
                return ">=";
            case com.google.javascript.rhino.Token.GT :
                return ">";
            case com.google.javascript.rhino.Token.MUL :
                return "*";
            case com.google.javascript.rhino.Token.DIV :
                return "/";
            case com.google.javascript.rhino.Token.MOD :
                return "%";
            case com.google.javascript.rhino.Token.BITNOT :
                return "~";
            case com.google.javascript.rhino.Token.ADD :
                return "+";
            case com.google.javascript.rhino.Token.SUB :
                return "-";
            case com.google.javascript.rhino.Token.POS :
                return "+";
            case com.google.javascript.rhino.Token.NEG :
                return "-";
            case com.google.javascript.rhino.Token.ASSIGN :
                return "=";
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return "|=";
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return "^=";
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return "&=";
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return "<<=";
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return ">>=";
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return ">>>=";
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return "+=";
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return "-=";
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return "*=";
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return "/=";
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return "%=";
            case com.google.javascript.rhino.Token.VOID :
                return "void";
            case com.google.javascript.rhino.Token.TYPEOF :
                return "typeof";
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return "instanceof";
            default :
                return null;
        }
    }

    static java.lang.String opToStrNoFail(int operator) {
        java.lang.String res = com.google.javascript.jscomp.NodeUtil.opToStr(operator);
        if (res == null) {
            throw new java.lang.Error((("Unknown op " + operator) + ": ") + com.google.javascript.rhino.Token.name(operator));
        }
        return res;
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type) {
        return com.google.javascript.jscomp.NodeUtil.containsType(node, type, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static void redeclareVarsInsideBranch(com.google.javascript.rhino.Node branch) {
        java.util.Collection<com.google.javascript.rhino.Node> vars = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(branch);
        if (vars.isEmpty()) {
            return;
        }
        com.google.javascript.rhino.Node parent = com.google.javascript.jscomp.NodeUtil.getAddingRoot(branch);
        for (com.google.javascript.rhino.Node nameNode : vars) {
            com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(com.google.javascript.rhino.IR.name(nameNode.getString()).srcref(nameNode)).srcref(nameNode);
            com.google.javascript.jscomp.NodeUtil.copyNameAnnotations(nameNode, var.getFirstChild());
            parent.addChildToFront(var);
        }
    }

    static void copyNameAnnotations(com.google.javascript.rhino.Node source, com.google.javascript.rhino.Node destination) {
        if (source.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME)) {
            destination.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
    }

    private static com.google.javascript.rhino.Node getAddingRoot(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node addingRoot = null;
        com.google.javascript.rhino.Node ancestor = n;
        while (null != (ancestor = ancestor.getParent())) {
            int type = ancestor.getType();
            if (type == com.google.javascript.rhino.Token.SCRIPT) {
                addingRoot = ancestor;
                break;
            } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
                addingRoot = ancestor.getLastChild();
                break;
            }
        } 
        com.google.common.base.Preconditions.checkState(addingRoot.isBlock() || addingRoot.isScript());
        com.google.common.base.Preconditions.checkState((addingRoot.getFirstChild() == null) || (!addingRoot.getFirstChild().isScript()));
        return addingRoot;
    }

    public static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        int endPos = name.indexOf('.');
        if (endPos == (-1)) {
            return com.google.javascript.jscomp.NodeUtil.newName(convention, name);
        }
        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newName(convention, name.substring(0, endPos));
        int startPos;
        do {
            startPos = endPos + 1;
            endPos = name.indexOf('.', startPos);
            java.lang.String part = (endPos == (-1)) ? name.substring(startPos) : name.substring(startPos, endPos);
            com.google.javascript.rhino.Node propNode = com.google.javascript.rhino.IR.string(part);
            if (convention.isConstantKey(part)) {
                propNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
            }
            node = com.google.javascript.rhino.IR.getprop(node, propNode);
        } while (endPos != (-1) );
        return node;
    }

    static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(convention, name);
        com.google.javascript.jscomp.NodeUtil.setDebugInformation(node, basisNode, originalName);
        return node;
    }

    static com.google.javascript.rhino.Node getRootOfQualifiedName(com.google.javascript.rhino.Node qName) {
        for (com.google.javascript.rhino.Node current = qName; true; current = current.getFirstChild()) {
            if (current.isName() || current.isThis()) {
                return current;
            }
            com.google.common.base.Preconditions.checkState(current.isGetProp());
        }
    }

    static void setDebugInformation(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        node.copyInformationFromForTree(basisNode);
        node.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
    }

    private static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.rhino.IR.name(name);
        if (convention.isConstant(name)) {
            nameNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
        return nameNode;
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node srcref) {
        return com.google.javascript.jscomp.NodeUtil.newName(convention, name).srcref(srcref);
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.NodeUtil.newName(convention, name, basisNode);
        nameNode.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
        return nameNode;
    }

    static boolean isLatin(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if (c > com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN) {
                return false;
            }
        }
        return true;
    }

    static boolean isValidSimpleName(java.lang.String name) {
        return (com.google.javascript.rhino.TokenStream.isJSIdentifier(name) && (!com.google.javascript.rhino.TokenStream.isKeyword(name))) && com.google.javascript.jscomp.NodeUtil.isLatin(name);
    }

    public static boolean isValidQualifiedName(java.lang.String name) {
        if (name.endsWith(".") || name.startsWith(".")) {
            return false;
        }
        java.lang.String[] parts = name.split("\\.");
        for (java.lang.String part : parts) {
            if (!com.google.javascript.jscomp.NodeUtil.isValidSimpleName(part)) {
                return false;
            }
        }
        return true;
    }

    static boolean isValidPropertyName(java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isValidSimpleName(name);
    }

    private static class VarCollector implements com.google.javascript.jscomp.NodeUtil.Visitor {
        final java.util.Map<java.lang.String, com.google.javascript.rhino.Node> vars = com.google.common.collect.Maps.newLinkedHashMap();

        @java.lang.Override
        public void visit(com.google.javascript.rhino.Node n) {
            if (n.isName()) {
                com.google.javascript.rhino.Node parent = n.getParent();
                if ((parent != null) && parent.isVar()) {
                    java.lang.String name = n.getString();
                    if (!vars.containsKey(name)) {
                        vars.put(name, n);
                    }
                }
            }
        }
    }

    static java.util.Collection<com.google.javascript.rhino.Node> getVarsDeclaredInBranch(com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.NodeUtil.VarCollector collector = new com.google.javascript.jscomp.NodeUtil.VarCollector();
        com.google.javascript.jscomp.NodeUtil.visitPreOrder(root, collector, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        return collector.vars.values();
    }

    static boolean isPrototypePropertyDeclaration(com.google.javascript.rhino.Node n) {
        if (!com.google.javascript.jscomp.NodeUtil.isExprAssign(n)) {
            return false;
        }
        return com.google.javascript.jscomp.NodeUtil.isPrototypeProperty(n.getFirstChild().getFirstChild());
    }

    static boolean isPrototypeProperty(com.google.javascript.rhino.Node n) {
        java.lang.String lhsString = n.getQualifiedName();
        if (lhsString == null) {
            return false;
        }
        int prototypeIdx = lhsString.indexOf(".prototype.");
        return prototypeIdx != (-1);
    }

    static com.google.javascript.rhino.Node getPrototypeClassName(com.google.javascript.rhino.Node qName) {
        com.google.javascript.rhino.Node cur = qName;
        while (cur.isGetProp()) {
            if (cur.getLastChild().getString().equals("prototype")) {
                return cur.getFirstChild();
            } else {
                cur = cur.getFirstChild();
            }
        } 
        return null;
    }

    static java.lang.String getPrototypePropertyName(com.google.javascript.rhino.Node qName) {
        java.lang.String qNameStr = qName.getQualifiedName();
        int prototypeIdx = qNameStr.lastIndexOf(".prototype.");
        int memberIndex = (prototypeIdx + ".prototype".length()) + 1;
        return qNameStr.substring(memberIndex);
    }

    static com.google.javascript.rhino.Node newUndefinedNode(com.google.javascript.rhino.Node srcReferenceNode) {
        com.google.javascript.rhino.Node node = com.google.javascript.rhino.IR.voidNode(com.google.javascript.rhino.IR.number(0));
        if (srcReferenceNode != null) {
            node.copyInformationFromForTree(srcReferenceNode);
        }
        return node;
    }

    static com.google.javascript.rhino.Node newVarNode(java.lang.String name, com.google.javascript.rhino.Node value) {
        com.google.javascript.rhino.Node nodeName = com.google.javascript.rhino.IR.name(name);
        if (value != null) {
            com.google.common.base.Preconditions.checkState(value.getNext() == null);
            nodeName.addChildToBack(value);
            nodeName.srcref(value);
        }
        com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(nodeName).srcref(nodeName);
        return var;
    }

    private static class MatchNameNode implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final java.lang.String name;

        MatchNameNode(java.lang.String name) {
            this.name = name;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.isName() && n.getString().equals(name);
        }
    }

    static class MatchNodeType implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final int type;

        MatchNodeType(int type) {
            this.type = type;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.getType() == type;
        }
    }

    static class MatchDeclaration implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) || n.isVar();
        }
    }

    private static class MatchNotFunction implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return !n.isFunction();
        }
    }

    static final com.google.common.base.Predicate<com.google.javascript.rhino.Node> MATCH_NOT_FUNCTION = new com.google.javascript.jscomp.NodeUtil.MatchNotFunction();

    static class MatchShallowStatement implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            return n.isBlock() || ((!n.isFunction()) && (((parent == null) || com.google.javascript.jscomp.NodeUtil.isControlStructure(parent)) || com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)));
        }
    }

    static int getNodeTypeReferenceCount(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(node, name, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static int getNameReferenceCount(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static boolean has(com.google.javascript.rhino.Node node, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (pred.apply(node)) {
            return true;
        }
        if (!traverseChildrenPred.apply(node)) {
            return false;
        }
        for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.has(c, pred, traverseChildrenPred)) {
                return true;
            }
        }
        return false;
    }

    static int getCount(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        int total = 0;
        if (pred.apply(n)) {
            total++;
        }
        if (traverseChildrenPred.apply(n)) {
            for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                total += com.google.javascript.jscomp.NodeUtil.getCount(c, pred, traverseChildrenPred);
            }
        }
        return total;
    }

    static interface Visitor {
        public abstract void visit(com.google.javascript.rhino.Node node);
    }

    static void visitPreOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor visitor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        visitor.visit(node);
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPreOrder(c, visitor, traverseChildrenPred);
            }
        }
    }

    static void visitPostOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor visitor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPostOrder(c, visitor, traverseChildrenPred);
            }
        }
        visitor.visit(node);
    }

    static boolean hasFinally(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getChildCount() == 3;
    }

    static com.google.javascript.rhino.Node getCatchBlock(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getFirstChild().getNext();
    }

    static boolean hasCatchHandler(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isBlock());
        return n.hasChildren() && n.getFirstChild().isCatch();
    }

    public static com.google.javascript.rhino.Node getFunctionParameters(com.google.javascript.rhino.Node fnNode) {
        com.google.common.base.Preconditions.checkArgument(fnNode.isFunction());
        return fnNode.getFirstChild().getNext();
    }

    static boolean isConstantName(com.google.javascript.rhino.Node node) {
        return node.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
    }

    static boolean isConstantByConvention(com.google.javascript.jscomp.CodingConvention convention, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        java.lang.String name = node.getString();
        if (parent.isGetProp() && (node == parent.getLastChild())) {
            return convention.isConstantKey(name);
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(node, parent)) {
            return convention.isConstantKey(name);
        } else {
            return convention.isConstant(name);
        }
    }

    public static com.google.javascript.rhino.JSDocInfo getFunctionJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isFunction());
        com.google.javascript.rhino.JSDocInfo fnInfo = n.getJSDocInfo();
        if ((fnInfo == null) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n)) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent.isAssign()) {
                fnInfo = parent.getJSDocInfo();
            } else if (parent.isName()) {
                fnInfo = parent.getParent().getJSDocInfo();
            }
        }
        return fnInfo;
    }

    public static java.lang.String getSourceName(com.google.javascript.rhino.Node n) {
        java.lang.String sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getSourceFileName();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.StaticSourceFile sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getStaticSourceFile();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.InputId getInputId(com.google.javascript.rhino.Node n) {
        while ((n != null) && (!n.isScript())) {
            n = n.getParent();
        } 
        return (n != null) && n.isScript() ? n.getInputId() : null;
    }

    static com.google.javascript.rhino.Node newCallNode(com.google.javascript.rhino.Node callTarget, com.google.javascript.rhino.Node... parameters) {
        boolean isFreeCall = !com.google.javascript.jscomp.NodeUtil.isGet(callTarget);
        com.google.javascript.rhino.Node call = com.google.javascript.rhino.IR.call(callTarget);
        call.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, isFreeCall);
        for (com.google.javascript.rhino.Node parameter : parameters) {
            call.addChildToBack(parameter);
        }
        return call;
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value) {
        return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysFalse());
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value, com.google.common.base.Predicate<com.google.javascript.rhino.Node> locals) {
        switch (value.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals));
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                if (value.getBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP)) {
                    return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals);
                } else {
                    return true;
                }
            case com.google.javascript.rhino.Token.THIS :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.NAME :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.CALL :
                return (com.google.javascript.jscomp.NodeUtil.callHasLocalResult(value) || com.google.javascript.jscomp.NodeUtil.isToStringMethodCall(value)) || locals.apply(value);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.newHasLocalResult(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return true;
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.IN :
                return true;
            default :
                if ((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(value) || com.google.javascript.jscomp.NodeUtil.isSimpleOperator(value)) || com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                    return true;
                }
                throw new java.lang.IllegalStateException((("Unexpected expression node" + value) + "\n parent:") + value.getParent());
        }
    }

    private static com.google.javascript.rhino.Node getNthSibling(com.google.javascript.rhino.Node first, int index) {
        com.google.javascript.rhino.Node sibling = first;
        while ((index != 0) && (sibling != null)) {
            sibling = sibling.getNext();
            index--;
        } 
        return sibling;
    }

    static com.google.javascript.rhino.Node getArgumentForFunction(com.google.javascript.rhino.Node function, int index) {
        com.google.common.base.Preconditions.checkState(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(function.getFirstChild().getNext().getFirstChild(), index);
    }

    static com.google.javascript.rhino.Node getArgumentForCallOrNew(com.google.javascript.rhino.Node call, int index) {
        com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isCallOrNew(call));
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(call.getFirstChild().getNext(), index);
    }

    private static boolean isToStringMethodCall(com.google.javascript.rhino.Node call) {
        com.google.javascript.rhino.Node getNode = call.getFirstChild();
        if (com.google.javascript.jscomp.NodeUtil.isGet(getNode)) {
            com.google.javascript.rhino.Node propNode = getNode.getLastChild();
            return propNode.isString() && "toString".equals(propNode.getString());
        }
        return false;
    }

    static com.google.javascript.rhino.JSDocInfo getBestJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info == null) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent == null) {
                return null;
            }
            if (parent.isName()) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            } else if (parent.isAssign()) {
                return parent.getJSDocInfo();
            } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
                return parent.getJSDocInfo();
            } else if (parent.isFunction()) {
                return parent.getJSDocInfo();
            } else if (parent.isVar() && parent.hasOneChild()) {
                return parent.getJSDocInfo();
            } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            }
        }
        return info;
    }

    static com.google.javascript.rhino.Node getBestLValue(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        boolean isFunctionDeclaration = com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n);
        if (isFunctionDeclaration) {
            return n.getFirstChild();
        } else if (parent.isName()) {
            return parent;
        } else if (parent.isAssign()) {
            return parent.getFirstChild();
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
            return parent;
        } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(parent);
        }
        return null;
    }

    static com.google.javascript.rhino.Node getRValueOfLValue(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return n.getNext();
            case com.google.javascript.rhino.Token.VAR :
                return n.getFirstChild();
            case com.google.javascript.rhino.Token.FUNCTION :
                return parent;
        }
        return null;
    }

    static com.google.javascript.rhino.Node getBestLValueOwner(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
        } else if (com.google.javascript.jscomp.NodeUtil.isGet(lValue)) {
            return lValue.getFirstChild();
        }
        return null;
    }

    static java.lang.String getBestLValueName(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {
            com.google.javascript.rhino.Node owner = com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
            if (owner != null) {
                java.lang.String ownerName = com.google.javascript.jscomp.NodeUtil.getBestLValueName(owner);
                if (ownerName != null) {
                    return (ownerName + ".") + com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(lValue);
                }
            }
            return null;
        }
        return lValue.getQualifiedName();
    }

    static boolean isExpressionResultUsed(com.google.javascript.rhino.Node expr) {
        com.google.javascript.rhino.Node parent = expr.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                return false;
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return expr == parent.getFirstChild() ? true : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.COMMA :
                com.google.javascript.rhino.Node gramps = parent.getParent();
                if (gramps.isCall() && (parent == gramps.getFirstChild())) {
                    if ((((expr == parent.getFirstChild()) && (parent.getChildCount() == 2)) && expr.getNext().isName()) && "eval".equals(expr.getNext().getString())) {
                        return true;
                    }
                }
                return expr == parent.getFirstChild() ? false : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.FOR :
                if (!com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                    return parent.getChildAtIndex(1) == expr;
                }
                break;
        }
        return true;
    }

    static boolean isExecutedExactlyOnce(com.google.javascript.rhino.Node n) {
        inspect : do {
            com.google.javascript.rhino.Node parent = n.getParent();
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.HOOK :
                case com.google.javascript.rhino.Token.AND :
                case com.google.javascript.rhino.Token.OR :
                    if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.FOR :
                    if (com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                        if (parent.getChildAtIndex(1) != n) {
                            return false;
                        }
                    } else if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.DO :
                    return false;
                case com.google.javascript.rhino.Token.TRY :
                    if ((!com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) || (parent.getLastChild() != n)) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.DEFAULT_CASE :
                    return false;
                case com.google.javascript.rhino.Token.SCRIPT :
                case com.google.javascript.rhino.Token.FUNCTION :
                    break inspect;
            }
        } while ((n = n.getParent()) != null );
        return true;
    }

    static com.google.javascript.rhino.Node booleanNode(boolean value) {
        return value ? com.google.javascript.rhino.IR.trueNode() : com.google.javascript.rhino.IR.falseNode();
    }

    static com.google.javascript.rhino.Node numberNode(double value, com.google.javascript.rhino.Node srcref) {
        com.google.javascript.rhino.Node result;
        if (java.lang.Double.isNaN(value)) {
            result = com.google.javascript.rhino.IR.name("NaN");
        } else if (value == java.lang.Double.POSITIVE_INFINITY) {
            result = com.google.javascript.rhino.IR.name("Infinity");
        } else if (value == java.lang.Double.NEGATIVE_INFINITY) {
            result = com.google.javascript.rhino.IR.neg(com.google.javascript.rhino.IR.name("Infinity"));
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(59).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE",com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION",com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN",com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER",com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN",com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("srcref",srcref);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("value",value);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectionEnds();
            }
            if (runtimeAngelicValue)
                result = com.google.javascript.rhino.IR.number(value);

        }
        if (srcref != null) {
            result.srcrefTree(srcref);
        }
        return result;
    }
}
[201455] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659901048333
GPR[SSUN]-1659901048333
944853999
GPR[SPVATF]-1659901048585
GPR[EPVATF]-1659901049881
GPR[SPS]-1659901049882
[203550] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:924.
GPR[EPS]-1659901050428
GPR[SPVATF]-1659901050428
GPR[EPVATF]-1659901051891
GPR[SPS]-1659901051891
[205568] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:924.
GPR[EPS]-1659901052446
GPR[ESUN]-1659901052446
GPR[SSUN]-1659901052446
944853999
GPR[ESUN]-1659901052695
GPR[SSUN]-1659901052695
944853999
GPR[ESUN]-1659901052943
GPR[SSUN]-1659901052943
944853999
GPR[ESUN]-1659901053189
GPR[SSUN]-1659901053189
1187751237
GPR[SPVATF]-1659901053469
GPR[EPVATF]-1659901054877
GPR[SPS]-1659901054877
[208770] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class NodeUtil {
    static final long MAX_POSITIVE_INTEGER_NUMBER = ((long) (java.lang.Math.pow(2, 53)));

    static final java.lang.String JSC_PROPERTY_NAME_FN = "JSCompiler_renameProperty";

    static final char LARGEST_BASIC_LATIN = 0x7f;

    private static final java.util.Set<java.lang.String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList("Array", "Date", "Error", "Object", "RegExp", "XMLHttpRequest"));

    private NodeUtil() {
    }

    static com.google.javascript.rhino.jstype.TernaryValue getImpureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                return value.not();
            case com.google.javascript.rhino.Token.AND :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.and(rhs);
                }
            case com.google.javascript.rhino.Token.OR :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.or(rhs);
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.javascript.rhino.jstype.TernaryValue trueValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild().getNext());
                    com.google.javascript.rhino.jstype.TernaryValue falseValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    if (trueValue.equals(falseValue)) {
                        return trueValue;
                    } else {
                        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                    }
                }
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.VOID :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            default :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n);
        }
    }

    static com.google.javascript.rhino.jstype.TernaryValue getPureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getString().length() > 0);
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getDouble() != 0);
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getLastChild()).not();
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.FALSE :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            case com.google.javascript.rhino.Token.VOID :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                }
                break;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if ("undefined".equals(name) || "NaN".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                } else if ("Infinity".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.REGEXP :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
        }
        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
    }

    static java.lang.String getStringValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return n.getString();
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name)) {
                    return name;
                }
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(n.getDouble());
            case com.google.javascript.rhino.Token.FALSE :
                return "false";
            case com.google.javascript.rhino.Token.TRUE :
                return "true";
            case com.google.javascript.rhino.Token.NULL :
                return "null";
            case com.google.javascript.rhino.Token.VOID :
                return "undefined";
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? "false" : "true";
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                return com.google.javascript.jscomp.NodeUtil.arrayToString(n);
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return "[object Object]";
        }
        return null;
    }

    static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    static java.lang.String getArrayElementStringValue(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isNullOrUndefined(n) || n.isEmpty() ? "" : com.google.javascript.jscomp.NodeUtil.getStringValue(n);
    }

    static java.lang.String arrayToString(com.google.javascript.rhino.Node literal) {
        com.google.javascript.rhino.Node first = literal.getFirstChild();
        java.lang.StringBuilder result = new java.lang.StringBuilder();
        int nextSlot = 0;
        int nextSkipSlot = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            java.lang.String childValue = com.google.javascript.jscomp.NodeUtil.getArrayElementStringValue(n);
            if (childValue == null) {
                return null;
            }
            if (n != first) {
                result.append(',');
            }
            result.append(childValue);
            nextSlot++;
        }
        return result.toString();
    }

    static java.lang.Double getNumberValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
                return 1.0;
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
                return 0.0;
            case com.google.javascript.rhino.Token.NUMBER :
                return n.getDouble();
            case com.google.javascript.rhino.Token.VOID :
                if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return null;
                } else {
                    return java.lang.Double.NaN;
                }
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("undefined")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("NaN")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("Infinity")) {
                    return java.lang.Double.POSITIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NEG :
                if (((n.getChildCount() == 1) && n.getFirstChild().isName()) && n.getFirstChild().getString().equals("Infinity")) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? 0.0 : 1.0;
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.jscomp.NodeUtil.getStringNumberValue(n.getString());
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                java.lang.String value = com.google.javascript.jscomp.NodeUtil.getStringValue(n);
                return value != null ? com.google.javascript.jscomp.NodeUtil.getStringNumberValue(value) : null;
        }
        return null;
    }

    static java.lang.Double getStringNumberValue(java.lang.String rawJsString) {
        if (rawJsString.contains("\u000b")) {
            return null;
        }
        java.lang.String s = com.google.javascript.jscomp.NodeUtil.trimJsWhiteSpace(rawJsString);
        if (s.length() == 0) {
            return 0.0;
        }
        if (((s.length() > 2) && (s.charAt(0) == '0')) && ((s.charAt(1) == 'x') || (s.charAt(1) == 'X'))) {
            try {
                return java.lang.Double.valueOf(java.lang.Integer.parseInt(s.substring(2), 16));
            } catch (java.lang.NumberFormatException e) {
                return java.lang.Double.NaN;
            }
        }
        if ((((s.length() > 3) && ((s.charAt(0) == '-') || (s.charAt(0) == '+'))) && (s.charAt(1) == '0')) && ((s.charAt(2) == 'x') || (s.charAt(2) == 'X'))) {
            return null;
        }
        if ((s.equals("infinity") || s.equals("-infinity")) || s.equals("+infinity")) {
            return null;
        }
        try {
            return java.lang.Double.parseDouble(s);
        } catch (java.lang.NumberFormatException e) {
            return java.lang.Double.NaN;
        }
    }

    static java.lang.String trimJsWhiteSpace(java.lang.String s) {
        int start = 0;
        int end = s.length();
        while ((end > 0) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(end - 1)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            end--;
        } 
        while ((start < end) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(start)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            start++;
        } 
        return s.substring(start, end);
    }

    public static com.google.javascript.rhino.jstype.TernaryValue isStrWhiteSpaceChar(int c) {
        switch (c) {
            case '\u000b' :
                return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
            case ' ' :
            case '\n' :
            case '\r' :
            case '\t' :
            case ' ' :
            case '\f' :
            case ' ' :
            case ' ' :
            case '﻿' :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            default :
                return java.lang.Character.getType(c) == java.lang.Character.SPACE_SEPARATOR ? com.google.javascript.rhino.jstype.TernaryValue.TRUE : com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        }
    }

    static java.lang.String getFunctionName(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isFunction());
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return parent.getQualifiedName();
            case com.google.javascript.rhino.Token.ASSIGN :
                return parent.getFirstChild().getQualifiedName();
            default :
                java.lang.String name = n.getFirstChild().getQualifiedName();
                return name;
        }
    }

    public static java.lang.String getNearestFunctionName(com.google.javascript.rhino.Node n) {
        if (!n.isFunction()) {
            return null;
        }
        java.lang.String name = com.google.javascript.jscomp.NodeUtil.getFunctionName(n);
        if (name != null) {
            return name;
        }
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SETTER_DEF :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return parent.getString();
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(parent);
        }
        return null;
    }

    static boolean isImmutableValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NEG :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                return ("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name);
        }
        return false;
    }

    static boolean isSymmetricOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.MUL :
                return true;
        }
        return false;
    }

    static boolean isRelationalOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
                return true;
        }
        return false;
    }

    static int getInverseOperator(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.GT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.rhino.Token.LT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.rhino.Token.GE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.rhino.Token.LE :
                return com.google.javascript.rhino.Token.GE;
        }
        return com.google.javascript.rhino.Token.ERROR;
    }

    static boolean isLiteralValue(com.google.javascript.rhino.Node n, boolean includeFunctions) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ARRAYLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if ((!child.isEmpty()) && (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions))) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.REGEXP :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child.getFirstChild(), includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                return includeFunctions && (!com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n));
            default :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n);
        }
    }

    static boolean isValidDefineValue(com.google.javascript.rhino.Node val, java.util.Set<java.lang.String> defines) {
        switch (val.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.URSH :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines) && com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getLastChild(), defines);
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.POS :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines);
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.GETPROP :
                if (val.isQualifiedName()) {
                    return defines.contains(val.getQualifiedName());
                }
        }
        return false;
    }

    static boolean isEmptyBlock(com.google.javascript.rhino.Node block) {
        if (!block.isBlock()) {
            return false;
        }
        for (com.google.javascript.rhino.Node n = block.getFirstChild(); n != null; n = n.getNext()) {
            if (!n.isEmpty()) {
                return false;
            }
        }
        return true;
    }

    static boolean isSimpleOperator(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(n.getType());
    }

    static boolean isSimpleOperatorType(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.COMMA :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.URSH :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node newExpr(com.google.javascript.rhino.Node child) {
        return com.google.javascript.rhino.IR.exprResult(child).srcref(child);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(n, null);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, true, compiler);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n, null);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, false, compiler);
    }

    private static boolean checkForStateChangeHelper(com.google.javascript.rhino.Node n, boolean checkForNewObjects, com.google.javascript.jscomp.AbstractCompiler compiler) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.PARAM_LIST :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.EMPTY :
                break;
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (checkForNewObjects) {
                    return true;
                }
                for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c.getFirstChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                }
                return false;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.REGEXP :
                if (checkForNewObjects) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.NAME :
                if (n.getFirstChild() != null) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                return checkForNewObjects || (!com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
            case com.google.javascript.rhino.Token.NEW :
                if (checkForNewObjects) {
                    return true;
                }
                if (!com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n)) {
                    break;
                }
                return true;
            case com.google.javascript.rhino.Token.CALL :
                if (!com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler)) {
                    break;
                }
                return true;
            default :
                if (com.google.javascript.jscomp.NodeUtil.isSimpleOperator(n)) {
                    break;
                }
                if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
                    com.google.javascript.rhino.Node assignTarget = n.getFirstChild();
                    if (assignTarget.isName()) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getFirstChild(), checkForNewObjects, compiler) || com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getLastChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.isGet(assignTarget)) {
                        com.google.javascript.rhino.Node current = assignTarget.getFirstChild();
                        if (com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(current)) {
                            return false;
                        }
                        while (com.google.javascript.jscomp.NodeUtil.isGet(current)) {
                            current = current.getFirstChild();
                        } 
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(current, true);
                    } else {
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(assignTarget, true);
                    }
                }
                return true;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c, checkForNewObjects, compiler)) {
                return true;
            }
        }
        return false;
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(callNode, null);
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isNew()) {
            throw new java.lang.IllegalStateException("Expected NEW node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName() && com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())) {
            return false;
        }
        return true;
    }

    private static final java.util.Set<java.lang.String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("Object", "Array", "String", "Number", "Boolean", "RegExp", "Error");

    private static final java.util.Set<java.lang.String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("toString", "valueOf");

    private static final java.util.Set<java.lang.String> REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("test", "exec");

    private static final java.util.Set<java.lang.String> STRING_REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("match", "replace", "search", "split");

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(callNode, null);
    }

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode, @javax.annotation.Nullable
    com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isCall()) {
            throw new java.lang.IllegalStateException("Expected CALL node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName()) {
            java.lang.String name = nameNode.getString();
            if (com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
                return false;
            }
        } else if (nameNode.isGetProp()) {
            if (callNode.hasOneChild() && com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())) {
                return false;
            }
            if (callNode.isOnlyModifiesThisCall() && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(nameNode.getFirstChild())) {
                return false;
            }
            if (nameNode.getFirstChild().isName()) {
                if ("Math.floor".equals(nameNode.getQualifiedName())) {
                    return false;
                }
            }
            if ((compiler != null) && (!compiler.hasRegExpGlobalReferences())) {
                if (nameNode.getFirstChild().isRegExp() && com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    return false;
                } else if (nameNode.getFirstChild().isString() && com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    com.google.javascript.rhino.Node param = nameNode.getNext();
                    if ((param != null) && (param.isString() || param.isRegExp())) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    static boolean callHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isCall());
        return (n.getSideEffectFlags() & com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS) > 0;
    }

    static boolean newHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isNew());
        return n.isOnlyModifiesThisCall();
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(n, null);
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
            return true;
        }
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.CALL :
                return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NAME :
                return n.hasChildren();
            default :
                return false;
        }
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n) {
        java.util.Set<java.lang.String> emptySet = java.util.Collections.emptySet();
        return com.google.javascript.jscomp.NodeUtil.canBeSideEffected(n, emptySet);
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n, java.util.Set<java.lang.String> knownConstants) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.NEW :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return (!com.google.javascript.jscomp.NodeUtil.isConstantName(n)) && (!knownConstants.contains(n.getString()));
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GETELEM :
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
                return false;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.canBeSideEffected(c, knownConstants)) {
                return true;
            }
        }
        return false;
    }

    static int precedence(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.COMMA :
                return 0;
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN :
                return 1;
            case com.google.javascript.rhino.Token.HOOK :
                return 2;
            case com.google.javascript.rhino.Token.OR :
                return 3;
            case com.google.javascript.rhino.Token.AND :
                return 4;
            case com.google.javascript.rhino.Token.BITOR :
                return 5;
            case com.google.javascript.rhino.Token.BITXOR :
                return 6;
            case com.google.javascript.rhino.Token.BITAND :
                return 7;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return 8;
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.IN :
                return 9;
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
                return 10;
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
                return 11;
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
                return 12;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                return 13;
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
                return 15;
            default :
                throw new java.lang.Error(((("Unknown precedence for " + com.google.javascript.rhino.Token.name(type)) + " (type ") + type) + ")");
        }
    }

    static boolean isUndefined(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.VOID :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return n.getString().equals("undefined");
        }
        return false;
    }

    static boolean isNullOrUndefined(com.google.javascript.rhino.Node n) {
        return n.isNull() || com.google.javascript.jscomp.NodeUtil.isUndefined(n);
    }

    static boolean allResultsMatch(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> p) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getFirstChild(), p) && com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getFirstChild().getNext(), p) && com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            default :
                return p.apply(n);
        }
    }

    static boolean anyResultsMatch(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> p) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getFirstChild(), p) || com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getFirstChild().getNext(), p) || com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            default :
                return p.apply(n);
        }
    }

    static class NumbericResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isNumericResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate NUMBERIC_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate();

    static boolean isNumericResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);
    }

    static boolean isNumericResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                return (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getFirstChild())) && (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getLastChild()));
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.NUMBER :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("NaN")) {
                    return true;
                }
                if (name.equals("Infinity")) {
                    return true;
                }
                return false;
            default :
                return false;
        }
    }

    static class BooleanResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isBooleanResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate BOOLEAN_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate();

    static boolean isBooleanResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);
    }

    static boolean isBooleanResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.DELPROP :
                return true;
            default :
                return false;
        }
    }

    static class MayBeStringResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate MAY_BE_STRING_PREDICATE = new com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate();

    static boolean mayBeString(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayBeString(n, true);
    }

    static boolean mayBeString(com.google.javascript.rhino.Node n, boolean recurse) {
        if (recurse) {
            return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);
        } else {
            return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);
        }
    }

    static boolean mayBeStringHelper(com.google.javascript.rhino.Node n) {
        return (((!com.google.javascript.jscomp.NodeUtil.isNumericResult(n)) && (!com.google.javascript.jscomp.NodeUtil.isBooleanResult(n))) && (!com.google.javascript.jscomp.NodeUtil.isUndefined(n))) && (!n.isNull());
    }

    static boolean isAssociative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isCommutative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return true;
        }
        return false;
    }

    static int getOpFromAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.MOD;
        }
        throw new java.lang.IllegalArgumentException("Not an assignment op:" + n);
    }

    static boolean containsFunction(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.containsType(n, com.google.javascript.rhino.Token.FUNCTION);
    }

    static boolean referencesThis(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node start = (n.isFunction()) ? n.getLastChild() : n;
        return com.google.javascript.jscomp.NodeUtil.containsType(start, com.google.javascript.rhino.Token.THIS, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isGet(com.google.javascript.rhino.Node n) {
        return n.isGetProp() || n.isGetElem();
    }

    static boolean isVarDeclaration(com.google.javascript.rhino.Node n) {
        return n.isName() && n.getParent().isVar();
    }

    static com.google.javascript.rhino.Node getAssignedValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isName());
        com.google.javascript.rhino.Node parent = n.getParent();
        if (parent.isVar()) {
            return n.getFirstChild();
        } else if (parent.isAssign() && (parent.getFirstChild() == n)) {
            return n.getNext();
        } else {
            return null;
        }
    }

    static boolean isExprAssign(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isAssign();
    }

    static boolean isExprCall(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isCall();
    }

    static boolean isForIn(com.google.javascript.rhino.Node n) {
        return n.isFor() && (n.getChildCount() == 3);
    }

    static boolean isLoopStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node getLoopCodeBlock(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getFirstChild();
            default :
                return null;
        }
    }

    static boolean isWithinLoop(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node parent : n.getAncestors()) {
            if (com.google.javascript.jscomp.NodeUtil.isLoopStructure(parent)) {
                return true;
            }
            if (parent.isFunction()) {
                break;
            }
        }
        return false;
    }

    static boolean isControlStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.WITH :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                return false;
        }
    }

    static boolean isControlStructureCodeBlock(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node n) {
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.WITH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.DO :
                return parent.getFirstChild() == n;
            case com.google.javascript.rhino.Token.IF :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.TRY :
                return (parent.getFirstChild() == n) || (parent.getLastChild() == n);
            case com.google.javascript.rhino.Token.CATCH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isControlStructure(parent));
                return false;
        }
    }

    static com.google.javascript.rhino.Node getConditionExpression(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getFirstChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.FOR :
                switch (n.getChildCount()) {
                    case 3 :
                        return null;
                    case 4 :
                        return n.getFirstChild().getNext();
                }
                throw new java.lang.IllegalArgumentException("malformed 'for' statement " + n);
            case com.google.javascript.rhino.Token.CASE :
                return null;
        }
        throw new java.lang.IllegalArgumentException(n + " does not have a condition.");
    }

    static boolean isStatementBlock(com.google.javascript.rhino.Node n) {
        return n.isScript() || n.isBlock();
    }

    static boolean isStatement(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isStatementParent(n.getParent());
    }

    static boolean isStatementParent(com.google.javascript.rhino.Node parent) {
        com.google.common.base.Preconditions.checkState(parent != null);
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.LABEL :
                return true;
            default :
                return false;
        }
    }

    static boolean isSwitchCase(com.google.javascript.rhino.Node n) {
        return n.isCase() || n.isDefaultCase();
    }

    static boolean isReferenceName(com.google.javascript.rhino.Node n) {
        return n.isName() && (!n.getString().isEmpty());
    }

    static boolean isTryFinallyNode(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node child) {
        return (parent.isTry() && (parent.getChildCount() == 3)) && (child == parent.getLastChild());
    }

    static boolean isTryCatchNodeContainer(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        return parent.isTry() && (parent.getFirstChild().getNext() == n);
    }

    static void removeChild(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node node) {
        if (com.google.javascript.jscomp.NodeUtil.isTryFinallyNode(parent, node)) {
            if (com.google.javascript.jscomp.NodeUtil.hasCatchHandler(com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent))) {
                parent.removeChild(node);
            } else {
                node.detachChildren();
            }
        } else if (node.isCatch()) {
            com.google.javascript.rhino.Node tryNode = node.getParent().getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachFromParent();
        } else if (com.google.javascript.jscomp.NodeUtil.isTryCatchNodeContainer(node)) {
            com.google.javascript.rhino.Node tryNode = node.getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachChildren();
        } else if (node.isBlock()) {
            node.detachChildren();
        } else if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent) || com.google.javascript.jscomp.NodeUtil.isSwitchCase(node)) {
            parent.removeChild(node);
        } else if (parent.isVar()) {
            if (parent.hasMoreThanOneChild()) {
                parent.removeChild(node);
            } else {
                parent.removeChild(node);
                com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
            }
        } else if (parent.isLabel() && (node == parent.getLastChild())) {
            parent.removeChild(node);
            com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
        } else if (parent.isFor() && (parent.getChildCount() == 4)) {
            parent.replaceChild(node, com.google.javascript.rhino.IR.empty());
        } else {
            throw new java.lang.IllegalStateException((("Invalid attempt to remove node: " + node.toString()) + " of ") + parent.toString());
        }
    }

    static void maybeAddFinally(com.google.javascript.rhino.Node tryNode) {
        com.google.common.base.Preconditions.checkState(tryNode.isTry());
        if (!com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode)) {
            tryNode.addChildrenToBack(com.google.javascript.rhino.IR.block().srcref(tryNode));
        }
    }

    static boolean tryMergeBlock(com.google.javascript.rhino.Node block) {
        com.google.common.base.Preconditions.checkState(block.isBlock());
        com.google.javascript.rhino.Node parent = block.getParent();
        if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)) {
            com.google.javascript.rhino.Node previous = block;
            while (block.hasChildren()) {
                com.google.javascript.rhino.Node child = block.removeFirstChild();
                parent.addChildAfter(child, previous);
                previous = child;
            } 
            parent.removeChild(block);
            return true;
        } else {
            return false;
        }
    }

    static boolean isCallOrNew(com.google.javascript.rhino.Node node) {
        return node.isCall() || node.isNew();
    }

    static com.google.javascript.rhino.Node getFunctionBody(com.google.javascript.rhino.Node fn) {
        com.google.common.base.Preconditions.checkArgument(fn.isFunction());
        return fn.getLastChild();
    }

    static boolean isFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return n.isFunction() && com.google.javascript.jscomp.NodeUtil.isStatement(n);
    }

    static boolean isHoistedFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) && (n.getParent().isScript() || n.getParent().getParent().isFunction());
    }

    static boolean isFunctionExpression(com.google.javascript.rhino.Node n) {
        return n.isFunction() && (!com.google.javascript.jscomp.NodeUtil.isStatement(n));
    }

    static boolean isBleedingFunctionName(com.google.javascript.rhino.Node n) {
        return (n.isName() && (!n.getString().isEmpty())) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n.getParent());
    }

    static boolean isEmptyFunctionExpression(com.google.javascript.rhino.Node node) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(node) && com.google.javascript.jscomp.NodeUtil.isEmptyBlock(node.getLastChild());
    }

    static boolean isVarArgsFunction(com.google.javascript.rhino.Node function) {
        com.google.common.base.Preconditions.checkArgument(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(function.getLastChild(), "arguments", com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isObjectCallMethod(com.google.javascript.rhino.Node callNode, java.lang.String methodName) {
        if (callNode.isCall()) {
            com.google.javascript.rhino.Node functionIndentifyingExpression = callNode.getFirstChild();
            if (com.google.javascript.jscomp.NodeUtil.isGet(functionIndentifyingExpression)) {
                com.google.javascript.rhino.Node last = functionIndentifyingExpression.getLastChild();
                if ((last != null) && last.isString()) {
                    java.lang.String propName = last.getString();
                    return propName.equals(methodName);
                }
            }
        }
        return false;
    }

    static boolean isFunctionObjectCall(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "call");
    }

    static boolean isFunctionObjectApply(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "apply");
    }

    static boolean isVarOrSimpleAssignLhs(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        return (parent.isAssign() && (parent.getFirstChild() == n)) || parent.isVar();
    }

    public static boolean isLValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument((n.isName() || n.isGetProp()) || n.isGetElem());
        com.google.javascript.rhino.Node parent = n.getParent();
        if (parent == null) {
            return false;
        }
        return (((((((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) || (com.google.javascript.jscomp.NodeUtil.isForIn(parent) && (parent.getFirstChild() == n))) || parent.isVar()) || (parent.isFunction() && (parent.getFirstChild() == n))) || parent.isDec()) || parent.isInc()) || parent.isParamList()) || parent.isCatch();
    }

    static boolean isObjectLitKey(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String getObjectLitKeyName(com.google.javascript.rhino.Node key) {
        switch (key.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return key.getString();
        }
        throw new java.lang.IllegalStateException("Unexpected node type: " + key);
    }

    static com.google.javascript.rhino.jstype.JSType getObjectLitKeyTypeFromValueType(com.google.javascript.rhino.Node key, com.google.javascript.rhino.jstype.JSType valueType) {
        if (valueType != null) {
            switch (key.getType()) {
                case com.google.javascript.rhino.Token.GETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        valueType = fntype.getReturnType();
                    } else {
                        return null;
                    }
                    break;
                case com.google.javascript.rhino.Token.SETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        com.google.javascript.rhino.Node param = fntype.getParametersNode().getFirstChild();
                        valueType = param.getJSType();
                    } else {
                        return null;
                    }
                    break;
            }
        }
        return valueType;
    }

    static boolean isGetOrSetKey(com.google.javascript.rhino.Node node) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String opToStr(int operator) {
        switch (operator) {
            case com.google.javascript.rhino.Token.BITOR :
                return "|";
            case com.google.javascript.rhino.Token.OR :
                return "||";
            case com.google.javascript.rhino.Token.BITXOR :
                return "^";
            case com.google.javascript.rhino.Token.AND :
                return "&&";
            case com.google.javascript.rhino.Token.BITAND :
                return "&";
            case com.google.javascript.rhino.Token.SHEQ :
                return "===";
            case com.google.javascript.rhino.Token.EQ :
                return "==";
            case com.google.javascript.rhino.Token.NOT :
                return "!";
            case com.google.javascript.rhino.Token.NE :
                return "!=";
            case com.google.javascript.rhino.Token.SHNE :
                return "!==";
            case com.google.javascript.rhino.Token.LSH :
                return "<<";
            case com.google.javascript.rhino.Token.IN :
                return "in";
            case com.google.javascript.rhino.Token.LE :
                return "<=";
            case com.google.javascript.rhino.Token.LT :
                return "<";
            case com.google.javascript.rhino.Token.URSH :
                return ">>>";
            case com.google.javascript.rhino.Token.RSH :
                return ">>";
            case com.google.javascript.rhino.Token.GE :
                return ">=";
            case com.google.javascript.rhino.Token.GT :
                return ">";
            case com.google.javascript.rhino.Token.MUL :
                return "*";
            case com.google.javascript.rhino.Token.DIV :
                return "/";
            case com.google.javascript.rhino.Token.MOD :
                return "%";
            case com.google.javascript.rhino.Token.BITNOT :
                return "~";
            case com.google.javascript.rhino.Token.ADD :
                return "+";
            case com.google.javascript.rhino.Token.SUB :
                return "-";
            case com.google.javascript.rhino.Token.POS :
                return "+";
            case com.google.javascript.rhino.Token.NEG :
                return "-";
            case com.google.javascript.rhino.Token.ASSIGN :
                return "=";
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return "|=";
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return "^=";
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return "&=";
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return "<<=";
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return ">>=";
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return ">>>=";
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return "+=";
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return "-=";
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return "*=";
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return "/=";
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return "%=";
            case com.google.javascript.rhino.Token.VOID :
                return "void";
            case com.google.javascript.rhino.Token.TYPEOF :
                return "typeof";
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return "instanceof";
            default :
                return null;
        }
    }

    static java.lang.String opToStrNoFail(int operator) {
        java.lang.String res = com.google.javascript.jscomp.NodeUtil.opToStr(operator);
        if (res == null) {
            throw new java.lang.Error((("Unknown op " + operator) + ": ") + com.google.javascript.rhino.Token.name(operator));
        }
        return res;
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type) {
        return com.google.javascript.jscomp.NodeUtil.containsType(node, type, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static void redeclareVarsInsideBranch(com.google.javascript.rhino.Node branch) {
        java.util.Collection<com.google.javascript.rhino.Node> vars = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(branch);
        if (vars.isEmpty()) {
            return;
        }
        com.google.javascript.rhino.Node parent = com.google.javascript.jscomp.NodeUtil.getAddingRoot(branch);
        for (com.google.javascript.rhino.Node nameNode : vars) {
            com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(com.google.javascript.rhino.IR.name(nameNode.getString()).srcref(nameNode)).srcref(nameNode);
            com.google.javascript.jscomp.NodeUtil.copyNameAnnotations(nameNode, var.getFirstChild());
            parent.addChildToFront(var);
        }
    }

    static void copyNameAnnotations(com.google.javascript.rhino.Node source, com.google.javascript.rhino.Node destination) {
        if (source.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME)) {
            destination.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
    }

    private static com.google.javascript.rhino.Node getAddingRoot(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node addingRoot = null;
        com.google.javascript.rhino.Node ancestor = n;
        while (null != (ancestor = ancestor.getParent())) {
            int type = ancestor.getType();
            if (type == com.google.javascript.rhino.Token.SCRIPT) {
                addingRoot = ancestor;
                break;
            } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
                addingRoot = ancestor.getLastChild();
                break;
            }
        } 
        com.google.common.base.Preconditions.checkState(addingRoot.isBlock() || addingRoot.isScript());
        com.google.common.base.Preconditions.checkState((addingRoot.getFirstChild() == null) || (!addingRoot.getFirstChild().isScript()));
        return addingRoot;
    }

    public static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        int endPos = name.indexOf('.');
        if (endPos == (-1)) {
            return com.google.javascript.jscomp.NodeUtil.newName(convention, name);
        }
        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newName(convention, name.substring(0, endPos));
        int startPos;
        do {
            startPos = endPos + 1;
            endPos = name.indexOf('.', startPos);
            java.lang.String part = (endPos == (-1)) ? name.substring(startPos) : name.substring(startPos, endPos);
            com.google.javascript.rhino.Node propNode = com.google.javascript.rhino.IR.string(part);
            if (convention.isConstantKey(part)) {
                propNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
            }
            node = com.google.javascript.rhino.IR.getprop(node, propNode);
        } while (endPos != (-1) );
        return node;
    }

    static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(convention, name);
        com.google.javascript.jscomp.NodeUtil.setDebugInformation(node, basisNode, originalName);
        return node;
    }

    static com.google.javascript.rhino.Node getRootOfQualifiedName(com.google.javascript.rhino.Node qName) {
        for (com.google.javascript.rhino.Node current = qName; true; current = current.getFirstChild()) {
            if (current.isName() || current.isThis()) {
                return current;
            }
            com.google.common.base.Preconditions.checkState(current.isGetProp());
        }
    }

    static void setDebugInformation(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        node.copyInformationFromForTree(basisNode);
        node.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
    }

    private static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.rhino.IR.name(name);
        if (convention.isConstant(name)) {
            nameNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
        return nameNode;
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node srcref) {
        return com.google.javascript.jscomp.NodeUtil.newName(convention, name).srcref(srcref);
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.NodeUtil.newName(convention, name, basisNode);
        nameNode.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
        return nameNode;
    }

    static boolean isLatin(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if (c > com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN) {
                return false;
            }
        }
        return true;
    }

    static boolean isValidSimpleName(java.lang.String name) {
        return (com.google.javascript.rhino.TokenStream.isJSIdentifier(name) && (!com.google.javascript.rhino.TokenStream.isKeyword(name))) && com.google.javascript.jscomp.NodeUtil.isLatin(name);
    }

    public static boolean isValidQualifiedName(java.lang.String name) {
        if (name.endsWith(".") || name.startsWith(".")) {
            return false;
        }
        java.lang.String[] parts = name.split("\\.");
        for (java.lang.String part : parts) {
            if (!com.google.javascript.jscomp.NodeUtil.isValidSimpleName(part)) {
                return false;
            }
        }
        return true;
    }

    static boolean isValidPropertyName(java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isValidSimpleName(name);
    }

    private static class VarCollector implements com.google.javascript.jscomp.NodeUtil.Visitor {
        final java.util.Map<java.lang.String, com.google.javascript.rhino.Node> vars = com.google.common.collect.Maps.newLinkedHashMap();

        @java.lang.Override
        public void visit(com.google.javascript.rhino.Node n) {
            if (n.isName()) {
                com.google.javascript.rhino.Node parent = n.getParent();
                if ((parent != null) && parent.isVar()) {
                    java.lang.String name = n.getString();
                    if (!vars.containsKey(name)) {
                        vars.put(name, n);
                    }
                }
            }
        }
    }

    static java.util.Collection<com.google.javascript.rhino.Node> getVarsDeclaredInBranch(com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.NodeUtil.VarCollector collector = new com.google.javascript.jscomp.NodeUtil.VarCollector();
        com.google.javascript.jscomp.NodeUtil.visitPreOrder(root, collector, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        return collector.vars.values();
    }

    static boolean isPrototypePropertyDeclaration(com.google.javascript.rhino.Node n) {
        if (!com.google.javascript.jscomp.NodeUtil.isExprAssign(n)) {
            return false;
        }
        return com.google.javascript.jscomp.NodeUtil.isPrototypeProperty(n.getFirstChild().getFirstChild());
    }

    static boolean isPrototypeProperty(com.google.javascript.rhino.Node n) {
        java.lang.String lhsString = n.getQualifiedName();
        if (lhsString == null) {
            return false;
        }
        int prototypeIdx = lhsString.indexOf(".prototype.");
        return prototypeIdx != (-1);
    }

    static com.google.javascript.rhino.Node getPrototypeClassName(com.google.javascript.rhino.Node qName) {
        com.google.javascript.rhino.Node cur = qName;
        while (cur.isGetProp()) {
            if (cur.getLastChild().getString().equals("prototype")) {
                return cur.getFirstChild();
            } else {
                cur = cur.getFirstChild();
            }
        } 
        return null;
    }

    static java.lang.String getPrototypePropertyName(com.google.javascript.rhino.Node qName) {
        java.lang.String qNameStr = qName.getQualifiedName();
        int prototypeIdx = qNameStr.lastIndexOf(".prototype.");
        int memberIndex = (prototypeIdx + ".prototype".length()) + 1;
        return qNameStr.substring(memberIndex);
    }

    static com.google.javascript.rhino.Node newUndefinedNode(com.google.javascript.rhino.Node srcReferenceNode) {
        com.google.javascript.rhino.Node node = com.google.javascript.rhino.IR.voidNode(com.google.javascript.rhino.IR.number(0));
        if (srcReferenceNode != null) {
            node.copyInformationFromForTree(srcReferenceNode);
        }
        return node;
    }

    static com.google.javascript.rhino.Node newVarNode(java.lang.String name, com.google.javascript.rhino.Node value) {
        com.google.javascript.rhino.Node nodeName = com.google.javascript.rhino.IR.name(name);
        if (value != null) {
            com.google.common.base.Preconditions.checkState(value.getNext() == null);
            nodeName.addChildToBack(value);
            nodeName.srcref(value);
        }
        com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(nodeName).srcref(nodeName);
        return var;
    }

    private static class MatchNameNode implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final java.lang.String name;

        MatchNameNode(java.lang.String name) {
            this.name = name;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.isName() && n.getString().equals(name);
        }
    }

    static class MatchNodeType implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final int type;

        MatchNodeType(int type) {
            this.type = type;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.getType() == type;
        }
    }

    static class MatchDeclaration implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) || n.isVar();
        }
    }

    private static class MatchNotFunction implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return !n.isFunction();
        }
    }

    static final com.google.common.base.Predicate<com.google.javascript.rhino.Node> MATCH_NOT_FUNCTION = new com.google.javascript.jscomp.NodeUtil.MatchNotFunction();

    static class MatchShallowStatement implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            return n.isBlock() || ((!n.isFunction()) && (((parent == null) || com.google.javascript.jscomp.NodeUtil.isControlStructure(parent)) || com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)));
        }
    }

    static int getNodeTypeReferenceCount(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(node, name, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static int getNameReferenceCount(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static boolean has(com.google.javascript.rhino.Node node, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (pred.apply(node)) {
            return true;
        }
        if (!traverseChildrenPred.apply(node)) {
            return false;
        }
        for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.has(c, pred, traverseChildrenPred)) {
                return true;
            }
        }
        return false;
    }

    static int getCount(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        int total = 0;
        if (pred.apply(n)) {
            total++;
        }
        if (traverseChildrenPred.apply(n)) {
            for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                total += com.google.javascript.jscomp.NodeUtil.getCount(c, pred, traverseChildrenPred);
            }
        }
        return total;
    }

    static interface Visitor {
        public abstract void visit(com.google.javascript.rhino.Node node);
    }

    static void visitPreOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor visitor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        visitor.visit(node);
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPreOrder(c, visitor, traverseChildrenPred);
            }
        }
    }

    static void visitPostOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor visitor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPostOrder(c, visitor, traverseChildrenPred);
            }
        }
        visitor.visit(node);
    }

    static boolean hasFinally(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getChildCount() == 3;
    }

    static com.google.javascript.rhino.Node getCatchBlock(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getFirstChild().getNext();
    }

    static boolean hasCatchHandler(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isBlock());
        return n.hasChildren() && n.getFirstChild().isCatch();
    }

    public static com.google.javascript.rhino.Node getFunctionParameters(com.google.javascript.rhino.Node fnNode) {
        com.google.common.base.Preconditions.checkArgument(fnNode.isFunction());
        return fnNode.getFirstChild().getNext();
    }

    static boolean isConstantName(com.google.javascript.rhino.Node node) {
        return node.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
    }

    static boolean isConstantByConvention(com.google.javascript.jscomp.CodingConvention convention, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        java.lang.String name = node.getString();
        if (parent.isGetProp() && (node == parent.getLastChild())) {
            return convention.isConstantKey(name);
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(node, parent)) {
            return convention.isConstantKey(name);
        } else {
            return convention.isConstant(name);
        }
    }

    public static com.google.javascript.rhino.JSDocInfo getFunctionJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isFunction());
        com.google.javascript.rhino.JSDocInfo fnInfo = n.getJSDocInfo();
        if ((fnInfo == null) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n)) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent.isAssign()) {
                fnInfo = parent.getJSDocInfo();
            } else if (parent.isName()) {
                fnInfo = parent.getParent().getJSDocInfo();
            }
        }
        return fnInfo;
    }

    public static java.lang.String getSourceName(com.google.javascript.rhino.Node n) {
        java.lang.String sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getSourceFileName();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.StaticSourceFile sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getStaticSourceFile();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.InputId getInputId(com.google.javascript.rhino.Node n) {
        while ((n != null) && (!n.isScript())) {
            n = n.getParent();
        } 
        return (n != null) && n.isScript() ? n.getInputId() : null;
    }

    static com.google.javascript.rhino.Node newCallNode(com.google.javascript.rhino.Node callTarget, com.google.javascript.rhino.Node... parameters) {
        boolean isFreeCall = !com.google.javascript.jscomp.NodeUtil.isGet(callTarget);
        com.google.javascript.rhino.Node call = com.google.javascript.rhino.IR.call(callTarget);
        call.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, isFreeCall);
        for (com.google.javascript.rhino.Node parameter : parameters) {
            call.addChildToBack(parameter);
        }
        return call;
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value) {
        return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysFalse());
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value, com.google.common.base.Predicate<com.google.javascript.rhino.Node> locals) {
        switch (value.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals));
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                if (value.getBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP)) {
                    return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals);
                } else {
                    return true;
                }
            case com.google.javascript.rhino.Token.THIS :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.NAME :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.CALL :
                return (com.google.javascript.jscomp.NodeUtil.callHasLocalResult(value) || com.google.javascript.jscomp.NodeUtil.isToStringMethodCall(value)) || locals.apply(value);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.newHasLocalResult(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return true;
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.IN :
                return true;
            default :
                if ((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(value) || com.google.javascript.jscomp.NodeUtil.isSimpleOperator(value)) || com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                    return true;
                }
                throw new java.lang.IllegalStateException((("Unexpected expression node" + value) + "\n parent:") + value.getParent());
        }
    }

    private static com.google.javascript.rhino.Node getNthSibling(com.google.javascript.rhino.Node first, int index) {
        com.google.javascript.rhino.Node sibling = first;
        while ((index != 0) && (sibling != null)) {
            sibling = sibling.getNext();
            index--;
        } 
        return sibling;
    }

    static com.google.javascript.rhino.Node getArgumentForFunction(com.google.javascript.rhino.Node function, int index) {
        com.google.common.base.Preconditions.checkState(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(function.getFirstChild().getNext().getFirstChild(), index);
    }

    static com.google.javascript.rhino.Node getArgumentForCallOrNew(com.google.javascript.rhino.Node call, int index) {
        com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isCallOrNew(call));
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(call.getFirstChild().getNext(), index);
    }

    private static boolean isToStringMethodCall(com.google.javascript.rhino.Node call) {
        com.google.javascript.rhino.Node getNode = call.getFirstChild();
        if (com.google.javascript.jscomp.NodeUtil.isGet(getNode)) {
            com.google.javascript.rhino.Node propNode = getNode.getLastChild();
            return propNode.isString() && "toString".equals(propNode.getString());
        }
        return false;
    }

    static com.google.javascript.rhino.JSDocInfo getBestJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info == null) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent == null) {
                return null;
            }
            if (parent.isName()) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            } else if (parent.isAssign()) {
                return parent.getJSDocInfo();
            } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
                return parent.getJSDocInfo();
            } else if (parent.isFunction()) {
                return parent.getJSDocInfo();
            } else if (parent.isVar() && parent.hasOneChild()) {
                return parent.getJSDocInfo();
            } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            }
        }
        return info;
    }

    static com.google.javascript.rhino.Node getBestLValue(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        boolean isFunctionDeclaration = com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n);
        if (isFunctionDeclaration) {
            return n.getFirstChild();
        } else if (parent.isName()) {
            return parent;
        } else if (parent.isAssign()) {
            return parent.getFirstChild();
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
            return parent;
        } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(parent);
        }
        return null;
    }

    static com.google.javascript.rhino.Node getRValueOfLValue(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return n.getNext();
            case com.google.javascript.rhino.Token.VAR :
                return n.getFirstChild();
            case com.google.javascript.rhino.Token.FUNCTION :
                return parent;
        }
        return null;
    }

    static com.google.javascript.rhino.Node getBestLValueOwner(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
        } else if (com.google.javascript.jscomp.NodeUtil.isGet(lValue)) {
            return lValue.getFirstChild();
        }
        return null;
    }

    static java.lang.String getBestLValueName(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {
            com.google.javascript.rhino.Node owner = com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
            if (owner != null) {
                java.lang.String ownerName = com.google.javascript.jscomp.NodeUtil.getBestLValueName(owner);
                if (ownerName != null) {
                    return (ownerName + ".") + com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(lValue);
                }
            }
            return null;
        }
        return lValue.getQualifiedName();
    }

    static boolean isExpressionResultUsed(com.google.javascript.rhino.Node expr) {
        com.google.javascript.rhino.Node parent = expr.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                return false;
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return expr == parent.getFirstChild() ? true : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.COMMA :
                com.google.javascript.rhino.Node gramps = parent.getParent();
                if (gramps.isCall() && (parent == gramps.getFirstChild())) {
                    if ((((expr == parent.getFirstChild()) && (parent.getChildCount() == 2)) && expr.getNext().isName()) && "eval".equals(expr.getNext().getString())) {
                        return true;
                    }
                }
                return expr == parent.getFirstChild() ? false : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.FOR :
                if (!com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                    return parent.getChildAtIndex(1) == expr;
                }
                break;
        }
        return true;
    }

    static boolean isExecutedExactlyOnce(com.google.javascript.rhino.Node n) {
        inspect : do {
            com.google.javascript.rhino.Node parent = n.getParent();
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.HOOK :
                case com.google.javascript.rhino.Token.AND :
                case com.google.javascript.rhino.Token.OR :
                    if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.FOR :
                    if (com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                        if (parent.getChildAtIndex(1) != n) {
                            return false;
                        }
                    } else if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.DO :
                    return false;
                case com.google.javascript.rhino.Token.TRY :
                    if ((!com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) || (parent.getLastChild() != n)) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.DEFAULT_CASE :
                    return false;
                case com.google.javascript.rhino.Token.SCRIPT :
                case com.google.javascript.rhino.Token.FUNCTION :
                    break inspect;
            }
        } while ((n = n.getParent()) != null );
        return true;
    }

    static com.google.javascript.rhino.Node booleanNode(boolean value) {
        return value ? com.google.javascript.rhino.IR.trueNode() : com.google.javascript.rhino.IR.falseNode();
    }

    static com.google.javascript.rhino.Node numberNode(double value, com.google.javascript.rhino.Node srcref) {
        com.google.javascript.rhino.Node result;
        if (java.lang.Double.isNaN(value)) {
            result = com.google.javascript.rhino.IR.name("NaN");
        } else if (value == java.lang.Double.POSITIVE_INFINITY) {
            result = com.google.javascript.rhino.IR.name("Infinity");
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(62).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE",com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION",com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN",com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER",com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN",com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("srcref",srcref);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("value",value);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("value == java.lang.Double.NEGATIVE_INFINITY",value == java.lang.Double.NEGATIVE_INFINITY);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectionEnds();
            }
            if (runtimeAngelicValue) if (value == java.lang.Double.NEGATIVE_INFINITY) {
                result = com.google.javascript.rhino.IR.neg(com.google.javascript.rhino.IR.name("Infinity"));
            } else {
                result = com.google.javascript.rhino.IR.number(value);
            }
        }
        if (srcref != null) {
            result.srcrefTree(srcref);
        }
        return result;
    }
}
[208770] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659901055649
GPR[EPVATF]-1659901057106
GPR[SPS]-1659901057106
[210925] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3219.
GPR[EPS]-1659901057803
GPR[ESUN]-1659901057803
GPR[SSUN]-1659901057803
1187751237
GPR[ESUN]-1659901058090
GPR[SSUN]-1659901058090
1187751237
GPR[SPVATF]-1659901058374
GPR[EPVATF]-1659901060003
GPR[SPS]-1659901060003
[213814] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3224.
GPR[EPS]-1659901060693
GPR[SPVATF]-1659901060693
GPR[EPVATF]-1659901062124
GPR[SPS]-1659901062124
[215931] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3224.
GPR[EPS]-1659901062809
GPR[ESUN]-1659901062809
GPR[SSUN]-1659901062809
1187751237
GPR[SPVATF]-1659901063113
GPR[EPVATF]-1659901064591
GPR[SPS]-1659901064591
[218327] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class NodeUtil {
    static final long MAX_POSITIVE_INTEGER_NUMBER = ((long) (java.lang.Math.pow(2, 53)));

    static final java.lang.String JSC_PROPERTY_NAME_FN = "JSCompiler_renameProperty";

    static final char LARGEST_BASIC_LATIN = 0x7f;

    private static final java.util.Set<java.lang.String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList("Array", "Date", "Error", "Object", "RegExp", "XMLHttpRequest"));

    private NodeUtil() {
    }

    static com.google.javascript.rhino.jstype.TernaryValue getImpureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                return value.not();
            case com.google.javascript.rhino.Token.AND :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.and(rhs);
                }
            case com.google.javascript.rhino.Token.OR :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.or(rhs);
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.javascript.rhino.jstype.TernaryValue trueValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild().getNext());
                    com.google.javascript.rhino.jstype.TernaryValue falseValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    if (trueValue.equals(falseValue)) {
                        return trueValue;
                    } else {
                        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                    }
                }
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.VOID :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            default :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n);
        }
    }

    static com.google.javascript.rhino.jstype.TernaryValue getPureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getString().length() > 0);
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getDouble() != 0);
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getLastChild()).not();
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.FALSE :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            case com.google.javascript.rhino.Token.VOID :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                }
                break;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if ("undefined".equals(name) || "NaN".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                } else if ("Infinity".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.REGEXP :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
        }
        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
    }

    static java.lang.String getStringValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return n.getString();
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name)) {
                    return name;
                }
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(n.getDouble());
            case com.google.javascript.rhino.Token.FALSE :
                return "false";
            case com.google.javascript.rhino.Token.TRUE :
                return "true";
            case com.google.javascript.rhino.Token.NULL :
                return "null";
            case com.google.javascript.rhino.Token.VOID :
                return "undefined";
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? "false" : "true";
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                return com.google.javascript.jscomp.NodeUtil.arrayToString(n);
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return "[object Object]";
        }
        return null;
    }

    static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    static java.lang.String getArrayElementStringValue(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isNullOrUndefined(n) || n.isEmpty() ? "" : com.google.javascript.jscomp.NodeUtil.getStringValue(n);
    }

    static java.lang.String arrayToString(com.google.javascript.rhino.Node literal) {
        com.google.javascript.rhino.Node first = literal.getFirstChild();
        java.lang.StringBuilder result = new java.lang.StringBuilder();
        int nextSlot = 0;
        int nextSkipSlot = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            java.lang.String childValue = com.google.javascript.jscomp.NodeUtil.getArrayElementStringValue(n);
            if (childValue == null) {
                return null;
            }
            if (n != first) {
                result.append(',');
            }
            result.append(childValue);
            nextSlot++;
        }
        return result.toString();
    }

    static java.lang.Double getNumberValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
                return 1.0;
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
                return 0.0;
            case com.google.javascript.rhino.Token.NUMBER :
                return n.getDouble();
            case com.google.javascript.rhino.Token.VOID :
                if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return null;
                } else {
                    return java.lang.Double.NaN;
                }
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("undefined")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("NaN")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("Infinity")) {
                    return java.lang.Double.POSITIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NEG :
                if (((n.getChildCount() == 1) && n.getFirstChild().isName()) && n.getFirstChild().getString().equals("Infinity")) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? 0.0 : 1.0;
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.jscomp.NodeUtil.getStringNumberValue(n.getString());
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                java.lang.String value = com.google.javascript.jscomp.NodeUtil.getStringValue(n);
                return value != null ? com.google.javascript.jscomp.NodeUtil.getStringNumberValue(value) : null;
        }
        return null;
    }

    static java.lang.Double getStringNumberValue(java.lang.String rawJsString) {
        if (rawJsString.contains("\u000b")) {
            return null;
        }
        java.lang.String s = com.google.javascript.jscomp.NodeUtil.trimJsWhiteSpace(rawJsString);
        if (s.length() == 0) {
            return 0.0;
        }
        if (((s.length() > 2) && (s.charAt(0) == '0')) && ((s.charAt(1) == 'x') || (s.charAt(1) == 'X'))) {
            try {
                return java.lang.Double.valueOf(java.lang.Integer.parseInt(s.substring(2), 16));
            } catch (java.lang.NumberFormatException e) {
                return java.lang.Double.NaN;
            }
        }
        if ((((s.length() > 3) && ((s.charAt(0) == '-') || (s.charAt(0) == '+'))) && (s.charAt(1) == '0')) && ((s.charAt(2) == 'x') || (s.charAt(2) == 'X'))) {
            return null;
        }
        if ((s.equals("infinity") || s.equals("-infinity")) || s.equals("+infinity")) {
            return null;
        }
        try {
            return java.lang.Double.parseDouble(s);
        } catch (java.lang.NumberFormatException e) {
            return java.lang.Double.NaN;
        }
    }

    static java.lang.String trimJsWhiteSpace(java.lang.String s) {
        int start = 0;
        int end = s.length();
        while ((end > 0) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(end - 1)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            end--;
        } 
        while ((start < end) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(start)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            start++;
        } 
        return s.substring(start, end);
    }

    public static com.google.javascript.rhino.jstype.TernaryValue isStrWhiteSpaceChar(int c) {
        switch (c) {
            case '\u000b' :
                return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
            case ' ' :
            case '\n' :
            case '\r' :
            case '\t' :
            case ' ' :
            case '\f' :
            case ' ' :
            case ' ' :
            case '﻿' :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            default :
                return java.lang.Character.getType(c) == java.lang.Character.SPACE_SEPARATOR ? com.google.javascript.rhino.jstype.TernaryValue.TRUE : com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        }
    }

    static java.lang.String getFunctionName(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isFunction());
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return parent.getQualifiedName();
            case com.google.javascript.rhino.Token.ASSIGN :
                return parent.getFirstChild().getQualifiedName();
            default :
                java.lang.String name = n.getFirstChild().getQualifiedName();
                return name;
        }
    }

    public static java.lang.String getNearestFunctionName(com.google.javascript.rhino.Node n) {
        if (!n.isFunction()) {
            return null;
        }
        java.lang.String name = com.google.javascript.jscomp.NodeUtil.getFunctionName(n);
        if (name != null) {
            return name;
        }
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SETTER_DEF :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return parent.getString();
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(parent);
        }
        return null;
    }

    static boolean isImmutableValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NEG :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                return ("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name);
        }
        return false;
    }

    static boolean isSymmetricOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.MUL :
                return true;
        }
        return false;
    }

    static boolean isRelationalOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
                return true;
        }
        return false;
    }

    static int getInverseOperator(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.GT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.rhino.Token.LT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.rhino.Token.GE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.rhino.Token.LE :
                return com.google.javascript.rhino.Token.GE;
        }
        return com.google.javascript.rhino.Token.ERROR;
    }

    static boolean isLiteralValue(com.google.javascript.rhino.Node n, boolean includeFunctions) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ARRAYLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if ((!child.isEmpty()) && (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions))) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.REGEXP :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child.getFirstChild(), includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                return includeFunctions && (!com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n));
            default :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n);
        }
    }

    static boolean isValidDefineValue(com.google.javascript.rhino.Node val, java.util.Set<java.lang.String> defines) {
        switch (val.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.URSH :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines) && com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getLastChild(), defines);
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.POS :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines);
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.GETPROP :
                if (val.isQualifiedName()) {
                    return defines.contains(val.getQualifiedName());
                }
        }
        return false;
    }

    static boolean isEmptyBlock(com.google.javascript.rhino.Node block) {
        if (!block.isBlock()) {
            return false;
        }
        for (com.google.javascript.rhino.Node n = block.getFirstChild(); n != null; n = n.getNext()) {
            if (!n.isEmpty()) {
                return false;
            }
        }
        return true;
    }

    static boolean isSimpleOperator(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(n.getType());
    }

    static boolean isSimpleOperatorType(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.COMMA :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.URSH :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node newExpr(com.google.javascript.rhino.Node child) {
        return com.google.javascript.rhino.IR.exprResult(child).srcref(child);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(n, null);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, true, compiler);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n, null);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, false, compiler);
    }

    private static boolean checkForStateChangeHelper(com.google.javascript.rhino.Node n, boolean checkForNewObjects, com.google.javascript.jscomp.AbstractCompiler compiler) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.PARAM_LIST :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.EMPTY :
                break;
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (checkForNewObjects) {
                    return true;
                }
                for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c.getFirstChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                }
                return false;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.REGEXP :
                if (checkForNewObjects) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.NAME :
                if (n.getFirstChild() != null) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                return checkForNewObjects || (!com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
            case com.google.javascript.rhino.Token.NEW :
                if (checkForNewObjects) {
                    return true;
                }
                if (!com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n)) {
                    break;
                }
                return true;
            case com.google.javascript.rhino.Token.CALL :
                if (!com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler)) {
                    break;
                }
                return true;
            default :
                if (com.google.javascript.jscomp.NodeUtil.isSimpleOperator(n)) {
                    break;
                }
                if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
                    com.google.javascript.rhino.Node assignTarget = n.getFirstChild();
                    if (assignTarget.isName()) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getFirstChild(), checkForNewObjects, compiler) || com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getLastChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.isGet(assignTarget)) {
                        com.google.javascript.rhino.Node current = assignTarget.getFirstChild();
                        if (com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(current)) {
                            return false;
                        }
                        while (com.google.javascript.jscomp.NodeUtil.isGet(current)) {
                            current = current.getFirstChild();
                        } 
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(current, true);
                    } else {
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(assignTarget, true);
                    }
                }
                return true;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c, checkForNewObjects, compiler)) {
                return true;
            }
        }
        return false;
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(callNode, null);
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isNew()) {
            throw new java.lang.IllegalStateException("Expected NEW node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName() && com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())) {
            return false;
        }
        return true;
    }

    private static final java.util.Set<java.lang.String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("Object", "Array", "String", "Number", "Boolean", "RegExp", "Error");

    private static final java.util.Set<java.lang.String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("toString", "valueOf");

    private static final java.util.Set<java.lang.String> REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("test", "exec");

    private static final java.util.Set<java.lang.String> STRING_REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("match", "replace", "search", "split");

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(callNode, null);
    }

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode, @javax.annotation.Nullable
    com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isCall()) {
            throw new java.lang.IllegalStateException("Expected CALL node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName()) {
            java.lang.String name = nameNode.getString();
            if (com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
                return false;
            }
        } else if (nameNode.isGetProp()) {
            if (callNode.hasOneChild() && com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())) {
                return false;
            }
            if (callNode.isOnlyModifiesThisCall() && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(nameNode.getFirstChild())) {
                return false;
            }
            if (nameNode.getFirstChild().isName()) {
                if ("Math.floor".equals(nameNode.getQualifiedName())) {
                    return false;
                }
            }
            if ((compiler != null) && (!compiler.hasRegExpGlobalReferences())) {
                if (nameNode.getFirstChild().isRegExp() && com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    return false;
                } else if (nameNode.getFirstChild().isString() && com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    com.google.javascript.rhino.Node param = nameNode.getNext();
                    if ((param != null) && (param.isString() || param.isRegExp())) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    static boolean callHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isCall());
        return (n.getSideEffectFlags() & com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS) > 0;
    }

    static boolean newHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isNew());
        return n.isOnlyModifiesThisCall();
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(n, null);
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
            return true;
        }
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.CALL :
                return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NAME :
                return n.hasChildren();
            default :
                return false;
        }
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n) {
        java.util.Set<java.lang.String> emptySet = java.util.Collections.emptySet();
        return com.google.javascript.jscomp.NodeUtil.canBeSideEffected(n, emptySet);
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n, java.util.Set<java.lang.String> knownConstants) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.NEW :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return (!com.google.javascript.jscomp.NodeUtil.isConstantName(n)) && (!knownConstants.contains(n.getString()));
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GETELEM :
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
                return false;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.canBeSideEffected(c, knownConstants)) {
                return true;
            }
        }
        return false;
    }

    static int precedence(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.COMMA :
                return 0;
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN :
                return 1;
            case com.google.javascript.rhino.Token.HOOK :
                return 2;
            case com.google.javascript.rhino.Token.OR :
                return 3;
            case com.google.javascript.rhino.Token.AND :
                return 4;
            case com.google.javascript.rhino.Token.BITOR :
                return 5;
            case com.google.javascript.rhino.Token.BITXOR :
                return 6;
            case com.google.javascript.rhino.Token.BITAND :
                return 7;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return 8;
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.IN :
                return 9;
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
                return 10;
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
                return 11;
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
                return 12;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                return 13;
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
                return 15;
            default :
                throw new java.lang.Error(((("Unknown precedence for " + com.google.javascript.rhino.Token.name(type)) + " (type ") + type) + ")");
        }
    }

    static boolean isUndefined(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.VOID :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return n.getString().equals("undefined");
        }
        return false;
    }

    static boolean isNullOrUndefined(com.google.javascript.rhino.Node n) {
        return n.isNull() || com.google.javascript.jscomp.NodeUtil.isUndefined(n);
    }

    static boolean allResultsMatch(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> p) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getFirstChild(), p) && com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getFirstChild().getNext(), p) && com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            default :
                return p.apply(n);
        }
    }

    static boolean anyResultsMatch(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> p) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getFirstChild(), p) || com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getFirstChild().getNext(), p) || com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            default :
                return p.apply(n);
        }
    }

    static class NumbericResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isNumericResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate NUMBERIC_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate();

    static boolean isNumericResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);
    }

    static boolean isNumericResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                return (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getFirstChild())) && (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getLastChild()));
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.NUMBER :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("NaN")) {
                    return true;
                }
                if (name.equals("Infinity")) {
                    return true;
                }
                return false;
            default :
                return false;
        }
    }

    static class BooleanResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isBooleanResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate BOOLEAN_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate();

    static boolean isBooleanResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);
    }

    static boolean isBooleanResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.DELPROP :
                return true;
            default :
                return false;
        }
    }

    static class MayBeStringResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate MAY_BE_STRING_PREDICATE = new com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate();

    static boolean mayBeString(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayBeString(n, true);
    }

    static boolean mayBeString(com.google.javascript.rhino.Node n, boolean recurse) {
        if (recurse) {
            return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);
        } else {
            return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);
        }
    }

    static boolean mayBeStringHelper(com.google.javascript.rhino.Node n) {
        return (((!com.google.javascript.jscomp.NodeUtil.isNumericResult(n)) && (!com.google.javascript.jscomp.NodeUtil.isBooleanResult(n))) && (!com.google.javascript.jscomp.NodeUtil.isUndefined(n))) && (!n.isNull());
    }

    static boolean isAssociative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isCommutative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return true;
        }
        return false;
    }

    static int getOpFromAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.MOD;
        }
        throw new java.lang.IllegalArgumentException("Not an assignment op:" + n);
    }

    static boolean containsFunction(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.containsType(n, com.google.javascript.rhino.Token.FUNCTION);
    }

    static boolean referencesThis(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node start = (n.isFunction()) ? n.getLastChild() : n;
        return com.google.javascript.jscomp.NodeUtil.containsType(start, com.google.javascript.rhino.Token.THIS, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isGet(com.google.javascript.rhino.Node n) {
        return n.isGetProp() || n.isGetElem();
    }

    static boolean isVarDeclaration(com.google.javascript.rhino.Node n) {
        return n.isName() && n.getParent().isVar();
    }

    static com.google.javascript.rhino.Node getAssignedValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isName());
        com.google.javascript.rhino.Node parent = n.getParent();
        if (parent.isVar()) {
            return n.getFirstChild();
        } else if (parent.isAssign() && (parent.getFirstChild() == n)) {
            return n.getNext();
        } else {
            return null;
        }
    }

    static boolean isExprAssign(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isAssign();
    }

    static boolean isExprCall(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isCall();
    }

    static boolean isForIn(com.google.javascript.rhino.Node n) {
        return n.isFor() && (n.getChildCount() == 3);
    }

    static boolean isLoopStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node getLoopCodeBlock(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getFirstChild();
            default :
                return null;
        }
    }

    static boolean isWithinLoop(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node parent : n.getAncestors()) {
            if (com.google.javascript.jscomp.NodeUtil.isLoopStructure(parent)) {
                return true;
            }
            if (parent.isFunction()) {
                break;
            }
        }
        return false;
    }

    static boolean isControlStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.WITH :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                return false;
        }
    }

    static boolean isControlStructureCodeBlock(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node n) {
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.WITH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.DO :
                return parent.getFirstChild() == n;
            case com.google.javascript.rhino.Token.IF :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.TRY :
                return (parent.getFirstChild() == n) || (parent.getLastChild() == n);
            case com.google.javascript.rhino.Token.CATCH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isControlStructure(parent));
                return false;
        }
    }

    static com.google.javascript.rhino.Node getConditionExpression(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getFirstChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.FOR :
                switch (n.getChildCount()) {
                    case 3 :
                        return null;
                    case 4 :
                        return n.getFirstChild().getNext();
                }
                throw new java.lang.IllegalArgumentException("malformed 'for' statement " + n);
            case com.google.javascript.rhino.Token.CASE :
                return null;
        }
        throw new java.lang.IllegalArgumentException(n + " does not have a condition.");
    }

    static boolean isStatementBlock(com.google.javascript.rhino.Node n) {
        return n.isScript() || n.isBlock();
    }

    static boolean isStatement(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isStatementParent(n.getParent());
    }

    static boolean isStatementParent(com.google.javascript.rhino.Node parent) {
        com.google.common.base.Preconditions.checkState(parent != null);
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.LABEL :
                return true;
            default :
                return false;
        }
    }

    static boolean isSwitchCase(com.google.javascript.rhino.Node n) {
        return n.isCase() || n.isDefaultCase();
    }

    static boolean isReferenceName(com.google.javascript.rhino.Node n) {
        return n.isName() && (!n.getString().isEmpty());
    }

    static boolean isTryFinallyNode(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node child) {
        return (parent.isTry() && (parent.getChildCount() == 3)) && (child == parent.getLastChild());
    }

    static boolean isTryCatchNodeContainer(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        return parent.isTry() && (parent.getFirstChild().getNext() == n);
    }

    static void removeChild(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node node) {
        if (com.google.javascript.jscomp.NodeUtil.isTryFinallyNode(parent, node)) {
            if (com.google.javascript.jscomp.NodeUtil.hasCatchHandler(com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent))) {
                parent.removeChild(node);
            } else {
                node.detachChildren();
            }
        } else if (node.isCatch()) {
            com.google.javascript.rhino.Node tryNode = node.getParent().getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachFromParent();
        } else if (com.google.javascript.jscomp.NodeUtil.isTryCatchNodeContainer(node)) {
            com.google.javascript.rhino.Node tryNode = node.getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachChildren();
        } else if (node.isBlock()) {
            node.detachChildren();
        } else if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent) || com.google.javascript.jscomp.NodeUtil.isSwitchCase(node)) {
            parent.removeChild(node);
        } else if (parent.isVar()) {
            if (parent.hasMoreThanOneChild()) {
                parent.removeChild(node);
            } else {
                parent.removeChild(node);
                com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
            }
        } else if (parent.isLabel() && (node == parent.getLastChild())) {
            parent.removeChild(node);
            com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
        } else if (parent.isFor() && (parent.getChildCount() == 4)) {
            parent.replaceChild(node, com.google.javascript.rhino.IR.empty());
        } else {
            throw new java.lang.IllegalStateException((("Invalid attempt to remove node: " + node.toString()) + " of ") + parent.toString());
        }
    }

    static void maybeAddFinally(com.google.javascript.rhino.Node tryNode) {
        com.google.common.base.Preconditions.checkState(tryNode.isTry());
        if (!com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode)) {
            tryNode.addChildrenToBack(com.google.javascript.rhino.IR.block().srcref(tryNode));
        }
    }

    static boolean tryMergeBlock(com.google.javascript.rhino.Node block) {
        com.google.common.base.Preconditions.checkState(block.isBlock());
        com.google.javascript.rhino.Node parent = block.getParent();
        if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)) {
            com.google.javascript.rhino.Node previous = block;
            while (block.hasChildren()) {
                com.google.javascript.rhino.Node child = block.removeFirstChild();
                parent.addChildAfter(child, previous);
                previous = child;
            } 
            parent.removeChild(block);
            return true;
        } else {
            return false;
        }
    }

    static boolean isCallOrNew(com.google.javascript.rhino.Node node) {
        return node.isCall() || node.isNew();
    }

    static com.google.javascript.rhino.Node getFunctionBody(com.google.javascript.rhino.Node fn) {
        com.google.common.base.Preconditions.checkArgument(fn.isFunction());
        return fn.getLastChild();
    }

    static boolean isFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return n.isFunction() && com.google.javascript.jscomp.NodeUtil.isStatement(n);
    }

    static boolean isHoistedFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) && (n.getParent().isScript() || n.getParent().getParent().isFunction());
    }

    static boolean isFunctionExpression(com.google.javascript.rhino.Node n) {
        return n.isFunction() && (!com.google.javascript.jscomp.NodeUtil.isStatement(n));
    }

    static boolean isBleedingFunctionName(com.google.javascript.rhino.Node n) {
        return (n.isName() && (!n.getString().isEmpty())) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n.getParent());
    }

    static boolean isEmptyFunctionExpression(com.google.javascript.rhino.Node node) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(node) && com.google.javascript.jscomp.NodeUtil.isEmptyBlock(node.getLastChild());
    }

    static boolean isVarArgsFunction(com.google.javascript.rhino.Node function) {
        com.google.common.base.Preconditions.checkArgument(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(function.getLastChild(), "arguments", com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isObjectCallMethod(com.google.javascript.rhino.Node callNode, java.lang.String methodName) {
        if (callNode.isCall()) {
            com.google.javascript.rhino.Node functionIndentifyingExpression = callNode.getFirstChild();
            if (com.google.javascript.jscomp.NodeUtil.isGet(functionIndentifyingExpression)) {
                com.google.javascript.rhino.Node last = functionIndentifyingExpression.getLastChild();
                if ((last != null) && last.isString()) {
                    java.lang.String propName = last.getString();
                    return propName.equals(methodName);
                }
            }
        }
        return false;
    }

    static boolean isFunctionObjectCall(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "call");
    }

    static boolean isFunctionObjectApply(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "apply");
    }

    static boolean isVarOrSimpleAssignLhs(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        return (parent.isAssign() && (parent.getFirstChild() == n)) || parent.isVar();
    }

    public static boolean isLValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument((n.isName() || n.isGetProp()) || n.isGetElem());
        com.google.javascript.rhino.Node parent = n.getParent();
        if (parent == null) {
            return false;
        }
        return (((((((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) || (com.google.javascript.jscomp.NodeUtil.isForIn(parent) && (parent.getFirstChild() == n))) || parent.isVar()) || (parent.isFunction() && (parent.getFirstChild() == n))) || parent.isDec()) || parent.isInc()) || parent.isParamList()) || parent.isCatch();
    }

    static boolean isObjectLitKey(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String getObjectLitKeyName(com.google.javascript.rhino.Node key) {
        switch (key.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return key.getString();
        }
        throw new java.lang.IllegalStateException("Unexpected node type: " + key);
    }

    static com.google.javascript.rhino.jstype.JSType getObjectLitKeyTypeFromValueType(com.google.javascript.rhino.Node key, com.google.javascript.rhino.jstype.JSType valueType) {
        if (valueType != null) {
            switch (key.getType()) {
                case com.google.javascript.rhino.Token.GETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        valueType = fntype.getReturnType();
                    } else {
                        return null;
                    }
                    break;
                case com.google.javascript.rhino.Token.SETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        com.google.javascript.rhino.Node param = fntype.getParametersNode().getFirstChild();
                        valueType = param.getJSType();
                    } else {
                        return null;
                    }
                    break;
            }
        }
        return valueType;
    }

    static boolean isGetOrSetKey(com.google.javascript.rhino.Node node) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String opToStr(int operator) {
        switch (operator) {
            case com.google.javascript.rhino.Token.BITOR :
                return "|";
            case com.google.javascript.rhino.Token.OR :
                return "||";
            case com.google.javascript.rhino.Token.BITXOR :
                return "^";
            case com.google.javascript.rhino.Token.AND :
                return "&&";
            case com.google.javascript.rhino.Token.BITAND :
                return "&";
            case com.google.javascript.rhino.Token.SHEQ :
                return "===";
            case com.google.javascript.rhino.Token.EQ :
                return "==";
            case com.google.javascript.rhino.Token.NOT :
                return "!";
            case com.google.javascript.rhino.Token.NE :
                return "!=";
            case com.google.javascript.rhino.Token.SHNE :
                return "!==";
            case com.google.javascript.rhino.Token.LSH :
                return "<<";
            case com.google.javascript.rhino.Token.IN :
                return "in";
            case com.google.javascript.rhino.Token.LE :
                return "<=";
            case com.google.javascript.rhino.Token.LT :
                return "<";
            case com.google.javascript.rhino.Token.URSH :
                return ">>>";
            case com.google.javascript.rhino.Token.RSH :
                return ">>";
            case com.google.javascript.rhino.Token.GE :
                return ">=";
            case com.google.javascript.rhino.Token.GT :
                return ">";
            case com.google.javascript.rhino.Token.MUL :
                return "*";
            case com.google.javascript.rhino.Token.DIV :
                return "/";
            case com.google.javascript.rhino.Token.MOD :
                return "%";
            case com.google.javascript.rhino.Token.BITNOT :
                return "~";
            case com.google.javascript.rhino.Token.ADD :
                return "+";
            case com.google.javascript.rhino.Token.SUB :
                return "-";
            case com.google.javascript.rhino.Token.POS :
                return "+";
            case com.google.javascript.rhino.Token.NEG :
                return "-";
            case com.google.javascript.rhino.Token.ASSIGN :
                return "=";
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return "|=";
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return "^=";
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return "&=";
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return "<<=";
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return ">>=";
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return ">>>=";
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return "+=";
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return "-=";
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return "*=";
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return "/=";
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return "%=";
            case com.google.javascript.rhino.Token.VOID :
                return "void";
            case com.google.javascript.rhino.Token.TYPEOF :
                return "typeof";
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return "instanceof";
            default :
                return null;
        }
    }

    static java.lang.String opToStrNoFail(int operator) {
        java.lang.String res = com.google.javascript.jscomp.NodeUtil.opToStr(operator);
        if (res == null) {
            throw new java.lang.Error((("Unknown op " + operator) + ": ") + com.google.javascript.rhino.Token.name(operator));
        }
        return res;
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type) {
        return com.google.javascript.jscomp.NodeUtil.containsType(node, type, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static void redeclareVarsInsideBranch(com.google.javascript.rhino.Node branch) {
        java.util.Collection<com.google.javascript.rhino.Node> vars = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(branch);
        if (vars.isEmpty()) {
            return;
        }
        com.google.javascript.rhino.Node parent = com.google.javascript.jscomp.NodeUtil.getAddingRoot(branch);
        for (com.google.javascript.rhino.Node nameNode : vars) {
            com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(com.google.javascript.rhino.IR.name(nameNode.getString()).srcref(nameNode)).srcref(nameNode);
            com.google.javascript.jscomp.NodeUtil.copyNameAnnotations(nameNode, var.getFirstChild());
            parent.addChildToFront(var);
        }
    }

    static void copyNameAnnotations(com.google.javascript.rhino.Node source, com.google.javascript.rhino.Node destination) {
        if (source.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME)) {
            destination.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
    }

    private static com.google.javascript.rhino.Node getAddingRoot(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node addingRoot = null;
        com.google.javascript.rhino.Node ancestor = n;
        while (null != (ancestor = ancestor.getParent())) {
            int type = ancestor.getType();
            if (type == com.google.javascript.rhino.Token.SCRIPT) {
                addingRoot = ancestor;
                break;
            } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
                addingRoot = ancestor.getLastChild();
                break;
            }
        } 
        com.google.common.base.Preconditions.checkState(addingRoot.isBlock() || addingRoot.isScript());
        com.google.common.base.Preconditions.checkState((addingRoot.getFirstChild() == null) || (!addingRoot.getFirstChild().isScript()));
        return addingRoot;
    }

    public static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        int endPos = name.indexOf('.');
        if (endPos == (-1)) {
            return com.google.javascript.jscomp.NodeUtil.newName(convention, name);
        }
        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newName(convention, name.substring(0, endPos));
        int startPos;
        do {
            startPos = endPos + 1;
            endPos = name.indexOf('.', startPos);
            java.lang.String part = (endPos == (-1)) ? name.substring(startPos) : name.substring(startPos, endPos);
            com.google.javascript.rhino.Node propNode = com.google.javascript.rhino.IR.string(part);
            if (convention.isConstantKey(part)) {
                propNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
            }
            node = com.google.javascript.rhino.IR.getprop(node, propNode);
        } while (endPos != (-1) );
        return node;
    }

    static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(convention, name);
        com.google.javascript.jscomp.NodeUtil.setDebugInformation(node, basisNode, originalName);
        return node;
    }

    static com.google.javascript.rhino.Node getRootOfQualifiedName(com.google.javascript.rhino.Node qName) {
        for (com.google.javascript.rhino.Node current = qName; true; current = current.getFirstChild()) {
            if (current.isName() || current.isThis()) {
                return current;
            }
            com.google.common.base.Preconditions.checkState(current.isGetProp());
        }
    }

    static void setDebugInformation(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        node.copyInformationFromForTree(basisNode);
        node.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
    }

    private static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.rhino.IR.name(name);
        if (convention.isConstant(name)) {
            nameNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
        return nameNode;
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node srcref) {
        return com.google.javascript.jscomp.NodeUtil.newName(convention, name).srcref(srcref);
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.NodeUtil.newName(convention, name, basisNode);
        nameNode.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
        return nameNode;
    }

    static boolean isLatin(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if (c > com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN) {
                return false;
            }
        }
        return true;
    }

    static boolean isValidSimpleName(java.lang.String name) {
        return (com.google.javascript.rhino.TokenStream.isJSIdentifier(name) && (!com.google.javascript.rhino.TokenStream.isKeyword(name))) && com.google.javascript.jscomp.NodeUtil.isLatin(name);
    }

    public static boolean isValidQualifiedName(java.lang.String name) {
        if (name.endsWith(".") || name.startsWith(".")) {
            return false;
        }
        java.lang.String[] parts = name.split("\\.");
        for (java.lang.String part : parts) {
            if (!com.google.javascript.jscomp.NodeUtil.isValidSimpleName(part)) {
                return false;
            }
        }
        return true;
    }

    static boolean isValidPropertyName(java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isValidSimpleName(name);
    }

    private static class VarCollector implements com.google.javascript.jscomp.NodeUtil.Visitor {
        final java.util.Map<java.lang.String, com.google.javascript.rhino.Node> vars = com.google.common.collect.Maps.newLinkedHashMap();

        @java.lang.Override
        public void visit(com.google.javascript.rhino.Node n) {
            if (n.isName()) {
                com.google.javascript.rhino.Node parent = n.getParent();
                if ((parent != null) && parent.isVar()) {
                    java.lang.String name = n.getString();
                    if (!vars.containsKey(name)) {
                        vars.put(name, n);
                    }
                }
            }
        }
    }

    static java.util.Collection<com.google.javascript.rhino.Node> getVarsDeclaredInBranch(com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.NodeUtil.VarCollector collector = new com.google.javascript.jscomp.NodeUtil.VarCollector();
        com.google.javascript.jscomp.NodeUtil.visitPreOrder(root, collector, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        return collector.vars.values();
    }

    static boolean isPrototypePropertyDeclaration(com.google.javascript.rhino.Node n) {
        if (!com.google.javascript.jscomp.NodeUtil.isExprAssign(n)) {
            return false;
        }
        return com.google.javascript.jscomp.NodeUtil.isPrototypeProperty(n.getFirstChild().getFirstChild());
    }

    static boolean isPrototypeProperty(com.google.javascript.rhino.Node n) {
        java.lang.String lhsString = n.getQualifiedName();
        if (lhsString == null) {
            return false;
        }
        int prototypeIdx = lhsString.indexOf(".prototype.");
        return prototypeIdx != (-1);
    }

    static com.google.javascript.rhino.Node getPrototypeClassName(com.google.javascript.rhino.Node qName) {
        com.google.javascript.rhino.Node cur = qName;
        while (cur.isGetProp()) {
            if (cur.getLastChild().getString().equals("prototype")) {
                return cur.getFirstChild();
            } else {
                cur = cur.getFirstChild();
            }
        } 
        return null;
    }

    static java.lang.String getPrototypePropertyName(com.google.javascript.rhino.Node qName) {
        java.lang.String qNameStr = qName.getQualifiedName();
        int prototypeIdx = qNameStr.lastIndexOf(".prototype.");
        int memberIndex = (prototypeIdx + ".prototype".length()) + 1;
        return qNameStr.substring(memberIndex);
    }

    static com.google.javascript.rhino.Node newUndefinedNode(com.google.javascript.rhino.Node srcReferenceNode) {
        com.google.javascript.rhino.Node node = com.google.javascript.rhino.IR.voidNode(com.google.javascript.rhino.IR.number(0));
        if (srcReferenceNode != null) {
            node.copyInformationFromForTree(srcReferenceNode);
        }
        return node;
    }

    static com.google.javascript.rhino.Node newVarNode(java.lang.String name, com.google.javascript.rhino.Node value) {
        com.google.javascript.rhino.Node nodeName = com.google.javascript.rhino.IR.name(name);
        if (value != null) {
            com.google.common.base.Preconditions.checkState(value.getNext() == null);
            nodeName.addChildToBack(value);
            nodeName.srcref(value);
        }
        com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(nodeName).srcref(nodeName);
        return var;
    }

    private static class MatchNameNode implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final java.lang.String name;

        MatchNameNode(java.lang.String name) {
            this.name = name;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.isName() && n.getString().equals(name);
        }
    }

    static class MatchNodeType implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final int type;

        MatchNodeType(int type) {
            this.type = type;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.getType() == type;
        }
    }

    static class MatchDeclaration implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) || n.isVar();
        }
    }

    private static class MatchNotFunction implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return !n.isFunction();
        }
    }

    static final com.google.common.base.Predicate<com.google.javascript.rhino.Node> MATCH_NOT_FUNCTION = new com.google.javascript.jscomp.NodeUtil.MatchNotFunction();

    static class MatchShallowStatement implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            return n.isBlock() || ((!n.isFunction()) && (((parent == null) || com.google.javascript.jscomp.NodeUtil.isControlStructure(parent)) || com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)));
        }
    }

    static int getNodeTypeReferenceCount(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(node, name, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static int getNameReferenceCount(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static boolean has(com.google.javascript.rhino.Node node, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (pred.apply(node)) {
            return true;
        }
        if (!traverseChildrenPred.apply(node)) {
            return false;
        }
        for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.has(c, pred, traverseChildrenPred)) {
                return true;
            }
        }
        return false;
    }

    static int getCount(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        int total = 0;
        if (pred.apply(n)) {
            total++;
        }
        if (traverseChildrenPred.apply(n)) {
            for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                total += com.google.javascript.jscomp.NodeUtil.getCount(c, pred, traverseChildrenPred);
            }
        }
        return total;
    }

    static interface Visitor {
        public abstract void visit(com.google.javascript.rhino.Node node);
    }

    static void visitPreOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor visitor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        visitor.visit(node);
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPreOrder(c, visitor, traverseChildrenPred);
            }
        }
    }

    static void visitPostOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor visitor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPostOrder(c, visitor, traverseChildrenPred);
            }
        }
        visitor.visit(node);
    }

    static boolean hasFinally(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getChildCount() == 3;
    }

    static com.google.javascript.rhino.Node getCatchBlock(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getFirstChild().getNext();
    }

    static boolean hasCatchHandler(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isBlock());
        return n.hasChildren() && n.getFirstChild().isCatch();
    }

    public static com.google.javascript.rhino.Node getFunctionParameters(com.google.javascript.rhino.Node fnNode) {
        com.google.common.base.Preconditions.checkArgument(fnNode.isFunction());
        return fnNode.getFirstChild().getNext();
    }

    static boolean isConstantName(com.google.javascript.rhino.Node node) {
        return node.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
    }

    static boolean isConstantByConvention(com.google.javascript.jscomp.CodingConvention convention, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        java.lang.String name = node.getString();
        if (parent.isGetProp() && (node == parent.getLastChild())) {
            return convention.isConstantKey(name);
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(node, parent)) {
            return convention.isConstantKey(name);
        } else {
            return convention.isConstant(name);
        }
    }

    public static com.google.javascript.rhino.JSDocInfo getFunctionJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isFunction());
        com.google.javascript.rhino.JSDocInfo fnInfo = n.getJSDocInfo();
        if ((fnInfo == null) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n)) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent.isAssign()) {
                fnInfo = parent.getJSDocInfo();
            } else if (parent.isName()) {
                fnInfo = parent.getParent().getJSDocInfo();
            }
        }
        return fnInfo;
    }

    public static java.lang.String getSourceName(com.google.javascript.rhino.Node n) {
        java.lang.String sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getSourceFileName();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.StaticSourceFile sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getStaticSourceFile();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.InputId getInputId(com.google.javascript.rhino.Node n) {
        while ((n != null) && (!n.isScript())) {
            n = n.getParent();
        } 
        return (n != null) && n.isScript() ? n.getInputId() : null;
    }

    static com.google.javascript.rhino.Node newCallNode(com.google.javascript.rhino.Node callTarget, com.google.javascript.rhino.Node... parameters) {
        boolean isFreeCall = !com.google.javascript.jscomp.NodeUtil.isGet(callTarget);
        com.google.javascript.rhino.Node call = com.google.javascript.rhino.IR.call(callTarget);
        call.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, isFreeCall);
        for (com.google.javascript.rhino.Node parameter : parameters) {
            call.addChildToBack(parameter);
        }
        return call;
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value) {
        return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysFalse());
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value, com.google.common.base.Predicate<com.google.javascript.rhino.Node> locals) {
        switch (value.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals));
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                if (value.getBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP)) {
                    return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals);
                } else {
                    return true;
                }
            case com.google.javascript.rhino.Token.THIS :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.NAME :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.CALL :
                return (com.google.javascript.jscomp.NodeUtil.callHasLocalResult(value) || com.google.javascript.jscomp.NodeUtil.isToStringMethodCall(value)) || locals.apply(value);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.newHasLocalResult(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return true;
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.IN :
                return true;
            default :
                if ((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(value) || com.google.javascript.jscomp.NodeUtil.isSimpleOperator(value)) || com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                    return true;
                }
                throw new java.lang.IllegalStateException((("Unexpected expression node" + value) + "\n parent:") + value.getParent());
        }
    }

    private static com.google.javascript.rhino.Node getNthSibling(com.google.javascript.rhino.Node first, int index) {
        com.google.javascript.rhino.Node sibling = first;
        while ((index != 0) && (sibling != null)) {
            sibling = sibling.getNext();
            index--;
        } 
        return sibling;
    }

    static com.google.javascript.rhino.Node getArgumentForFunction(com.google.javascript.rhino.Node function, int index) {
        com.google.common.base.Preconditions.checkState(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(function.getFirstChild().getNext().getFirstChild(), index);
    }

    static com.google.javascript.rhino.Node getArgumentForCallOrNew(com.google.javascript.rhino.Node call, int index) {
        com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isCallOrNew(call));
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(call.getFirstChild().getNext(), index);
    }

    private static boolean isToStringMethodCall(com.google.javascript.rhino.Node call) {
        com.google.javascript.rhino.Node getNode = call.getFirstChild();
        if (com.google.javascript.jscomp.NodeUtil.isGet(getNode)) {
            com.google.javascript.rhino.Node propNode = getNode.getLastChild();
            return propNode.isString() && "toString".equals(propNode.getString());
        }
        return false;
    }

    static com.google.javascript.rhino.JSDocInfo getBestJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info == null) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent == null) {
                return null;
            }
            if (parent.isName()) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            } else if (parent.isAssign()) {
                return parent.getJSDocInfo();
            } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
                return parent.getJSDocInfo();
            } else if (parent.isFunction()) {
                return parent.getJSDocInfo();
            } else if (parent.isVar() && parent.hasOneChild()) {
                return parent.getJSDocInfo();
            } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            }
        }
        return info;
    }

    static com.google.javascript.rhino.Node getBestLValue(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        boolean isFunctionDeclaration = com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n);
        if (isFunctionDeclaration) {
            return n.getFirstChild();
        } else if (parent.isName()) {
            return parent;
        } else if (parent.isAssign()) {
            return parent.getFirstChild();
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
            return parent;
        } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(parent);
        }
        return null;
    }

    static com.google.javascript.rhino.Node getRValueOfLValue(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return n.getNext();
            case com.google.javascript.rhino.Token.VAR :
                return n.getFirstChild();
            case com.google.javascript.rhino.Token.FUNCTION :
                return parent;
        }
        return null;
    }

    static com.google.javascript.rhino.Node getBestLValueOwner(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
        } else if (com.google.javascript.jscomp.NodeUtil.isGet(lValue)) {
            return lValue.getFirstChild();
        }
        return null;
    }

    static java.lang.String getBestLValueName(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {
            com.google.javascript.rhino.Node owner = com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
            if (owner != null) {
                java.lang.String ownerName = com.google.javascript.jscomp.NodeUtil.getBestLValueName(owner);
                if (ownerName != null) {
                    return (ownerName + ".") + com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(lValue);
                }
            }
            return null;
        }
        return lValue.getQualifiedName();
    }

    static boolean isExpressionResultUsed(com.google.javascript.rhino.Node expr) {
        com.google.javascript.rhino.Node parent = expr.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                return false;
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return expr == parent.getFirstChild() ? true : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.COMMA :
                com.google.javascript.rhino.Node gramps = parent.getParent();
                if (gramps.isCall() && (parent == gramps.getFirstChild())) {
                    if ((((expr == parent.getFirstChild()) && (parent.getChildCount() == 2)) && expr.getNext().isName()) && "eval".equals(expr.getNext().getString())) {
                        return true;
                    }
                }
                return expr == parent.getFirstChild() ? false : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.FOR :
                if (!com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                    return parent.getChildAtIndex(1) == expr;
                }
                break;
        }
        return true;
    }

    static boolean isExecutedExactlyOnce(com.google.javascript.rhino.Node n) {
        inspect : do {
            com.google.javascript.rhino.Node parent = n.getParent();
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.HOOK :
                case com.google.javascript.rhino.Token.AND :
                case com.google.javascript.rhino.Token.OR :
                    if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.FOR :
                    if (com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                        if (parent.getChildAtIndex(1) != n) {
                            return false;
                        }
                    } else if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.DO :
                    return false;
                case com.google.javascript.rhino.Token.TRY :
                    if ((!com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) || (parent.getLastChild() != n)) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.DEFAULT_CASE :
                    return false;
                case com.google.javascript.rhino.Token.SCRIPT :
                case com.google.javascript.rhino.Token.FUNCTION :
                    break inspect;
            }
        } while ((n = n.getParent()) != null );
        return true;
    }

    static com.google.javascript.rhino.Node booleanNode(boolean value) {
        return value ? com.google.javascript.rhino.IR.trueNode() : com.google.javascript.rhino.IR.falseNode();
    }

    static com.google.javascript.rhino.Node numberNode(double value, com.google.javascript.rhino.Node srcref) {
        com.google.javascript.rhino.Node result;
        if (java.lang.Double.isNaN(value)) {
            result = com.google.javascript.rhino.IR.name("NaN");
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(66).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE",com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION",com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN",com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER",com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("value == java.lang.Double.POSITIVE_INFINITY",value == java.lang.Double.POSITIVE_INFINITY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN",com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("srcref",srcref);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("value",value);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectionEnds();
            }
            if (runtimeAngelicValue) if (value == java.lang.Double.POSITIVE_INFINITY) {
                result = com.google.javascript.rhino.IR.name("Infinity");
            } else if (value == java.lang.Double.NEGATIVE_INFINITY) {
                result = com.google.javascript.rhino.IR.neg(com.google.javascript.rhino.IR.name("Infinity"));
            } else {
                result = com.google.javascript.rhino.IR.number(value);
            }
        }
        if (srcref != null) {
            result.srcrefTree(srcref);
        }
        return result;
    }
}
[218327] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659901065205
GPR[EPVATF]-1659901066644
GPR[SPS]-1659901066644
[220479] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3217.
GPR[EPS]-1659901067357
GPR[ESUN]-1659901067357
GPR[SSUN]-1659901067357
1187751237
GPR[SPVATF]-1659901067639
GPR[EPVATF]-1659901069113
GPR[SPS]-1659901069113
[222862] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class NodeUtil {
    static final long MAX_POSITIVE_INTEGER_NUMBER = ((long) (java.lang.Math.pow(2, 53)));

    static final java.lang.String JSC_PROPERTY_NAME_FN = "JSCompiler_renameProperty";

    static final char LARGEST_BASIC_LATIN = 0x7f;

    private static final java.util.Set<java.lang.String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList("Array", "Date", "Error", "Object", "RegExp", "XMLHttpRequest"));

    private NodeUtil() {
    }

    static com.google.javascript.rhino.jstype.TernaryValue getImpureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                return value.not();
            case com.google.javascript.rhino.Token.AND :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.and(rhs);
                }
            case com.google.javascript.rhino.Token.OR :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.or(rhs);
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.javascript.rhino.jstype.TernaryValue trueValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild().getNext());
                    com.google.javascript.rhino.jstype.TernaryValue falseValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    if (trueValue.equals(falseValue)) {
                        return trueValue;
                    } else {
                        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                    }
                }
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.VOID :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            default :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n);
        }
    }

    static com.google.javascript.rhino.jstype.TernaryValue getPureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getString().length() > 0);
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getDouble() != 0);
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getLastChild()).not();
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.FALSE :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            case com.google.javascript.rhino.Token.VOID :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                }
                break;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if ("undefined".equals(name) || "NaN".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                } else if ("Infinity".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.REGEXP :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
        }
        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
    }

    static java.lang.String getStringValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return n.getString();
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name)) {
                    return name;
                }
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(n.getDouble());
            case com.google.javascript.rhino.Token.FALSE :
                return "false";
            case com.google.javascript.rhino.Token.TRUE :
                return "true";
            case com.google.javascript.rhino.Token.NULL :
                return "null";
            case com.google.javascript.rhino.Token.VOID :
                return "undefined";
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? "false" : "true";
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                return com.google.javascript.jscomp.NodeUtil.arrayToString(n);
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return "[object Object]";
        }
        return null;
    }

    static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    static java.lang.String getArrayElementStringValue(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isNullOrUndefined(n) || n.isEmpty() ? "" : com.google.javascript.jscomp.NodeUtil.getStringValue(n);
    }

    static java.lang.String arrayToString(com.google.javascript.rhino.Node literal) {
        com.google.javascript.rhino.Node first = literal.getFirstChild();
        java.lang.StringBuilder result = new java.lang.StringBuilder();
        int nextSlot = 0;
        int nextSkipSlot = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            java.lang.String childValue = com.google.javascript.jscomp.NodeUtil.getArrayElementStringValue(n);
            if (childValue == null) {
                return null;
            }
            if (n != first) {
                result.append(',');
            }
            result.append(childValue);
            nextSlot++;
        }
        return result.toString();
    }

    static java.lang.Double getNumberValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
                return 1.0;
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
                return 0.0;
            case com.google.javascript.rhino.Token.NUMBER :
                return n.getDouble();
            case com.google.javascript.rhino.Token.VOID :
                if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return null;
                } else {
                    return java.lang.Double.NaN;
                }
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("undefined")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("NaN")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("Infinity")) {
                    return java.lang.Double.POSITIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NEG :
                if (((n.getChildCount() == 1) && n.getFirstChild().isName()) && n.getFirstChild().getString().equals("Infinity")) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? 0.0 : 1.0;
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.jscomp.NodeUtil.getStringNumberValue(n.getString());
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                java.lang.String value = com.google.javascript.jscomp.NodeUtil.getStringValue(n);
                return value != null ? com.google.javascript.jscomp.NodeUtil.getStringNumberValue(value) : null;
        }
        return null;
    }

    static java.lang.Double getStringNumberValue(java.lang.String rawJsString) {
        if (rawJsString.contains("\u000b")) {
            return null;
        }
        java.lang.String s = com.google.javascript.jscomp.NodeUtil.trimJsWhiteSpace(rawJsString);
        if (s.length() == 0) {
            return 0.0;
        }
        if (((s.length() > 2) && (s.charAt(0) == '0')) && ((s.charAt(1) == 'x') || (s.charAt(1) == 'X'))) {
            try {
                return java.lang.Double.valueOf(java.lang.Integer.parseInt(s.substring(2), 16));
            } catch (java.lang.NumberFormatException e) {
                return java.lang.Double.NaN;
            }
        }
        if ((((s.length() > 3) && ((s.charAt(0) == '-') || (s.charAt(0) == '+'))) && (s.charAt(1) == '0')) && ((s.charAt(2) == 'x') || (s.charAt(2) == 'X'))) {
            return null;
        }
        if ((s.equals("infinity") || s.equals("-infinity")) || s.equals("+infinity")) {
            return null;
        }
        try {
            return java.lang.Double.parseDouble(s);
        } catch (java.lang.NumberFormatException e) {
            return java.lang.Double.NaN;
        }
    }

    static java.lang.String trimJsWhiteSpace(java.lang.String s) {
        int start = 0;
        int end = s.length();
        while ((end > 0) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(end - 1)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            end--;
        } 
        while ((start < end) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(start)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            start++;
        } 
        return s.substring(start, end);
    }

    public static com.google.javascript.rhino.jstype.TernaryValue isStrWhiteSpaceChar(int c) {
        switch (c) {
            case '\u000b' :
                return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
            case ' ' :
            case '\n' :
            case '\r' :
            case '\t' :
            case ' ' :
            case '\f' :
            case ' ' :
            case ' ' :
            case '﻿' :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            default :
                return java.lang.Character.getType(c) == java.lang.Character.SPACE_SEPARATOR ? com.google.javascript.rhino.jstype.TernaryValue.TRUE : com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        }
    }

    static java.lang.String getFunctionName(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isFunction());
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return parent.getQualifiedName();
            case com.google.javascript.rhino.Token.ASSIGN :
                return parent.getFirstChild().getQualifiedName();
            default :
                java.lang.String name = n.getFirstChild().getQualifiedName();
                return name;
        }
    }

    public static java.lang.String getNearestFunctionName(com.google.javascript.rhino.Node n) {
        if (!n.isFunction()) {
            return null;
        }
        java.lang.String name = com.google.javascript.jscomp.NodeUtil.getFunctionName(n);
        if (name != null) {
            return name;
        }
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SETTER_DEF :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return parent.getString();
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(parent);
        }
        return null;
    }

    static boolean isImmutableValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NEG :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                return ("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name);
        }
        return false;
    }

    static boolean isSymmetricOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.MUL :
                return true;
        }
        return false;
    }

    static boolean isRelationalOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
                return true;
        }
        return false;
    }

    static int getInverseOperator(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.GT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.rhino.Token.LT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.rhino.Token.GE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.rhino.Token.LE :
                return com.google.javascript.rhino.Token.GE;
        }
        return com.google.javascript.rhino.Token.ERROR;
    }

    static boolean isLiteralValue(com.google.javascript.rhino.Node n, boolean includeFunctions) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ARRAYLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if ((!child.isEmpty()) && (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions))) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.REGEXP :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child.getFirstChild(), includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                return includeFunctions && (!com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n));
            default :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n);
        }
    }

    static boolean isValidDefineValue(com.google.javascript.rhino.Node val, java.util.Set<java.lang.String> defines) {
        switch (val.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.URSH :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines) && com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getLastChild(), defines);
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.POS :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines);
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.GETPROP :
                if (val.isQualifiedName()) {
                    return defines.contains(val.getQualifiedName());
                }
        }
        return false;
    }

    static boolean isEmptyBlock(com.google.javascript.rhino.Node block) {
        if (!block.isBlock()) {
            return false;
        }
        for (com.google.javascript.rhino.Node n = block.getFirstChild(); n != null; n = n.getNext()) {
            if (!n.isEmpty()) {
                return false;
            }
        }
        return true;
    }

    static boolean isSimpleOperator(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(n.getType());
    }

    static boolean isSimpleOperatorType(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.COMMA :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.URSH :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node newExpr(com.google.javascript.rhino.Node child) {
        return com.google.javascript.rhino.IR.exprResult(child).srcref(child);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(n, null);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, true, compiler);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n, null);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, false, compiler);
    }

    private static boolean checkForStateChangeHelper(com.google.javascript.rhino.Node n, boolean checkForNewObjects, com.google.javascript.jscomp.AbstractCompiler compiler) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.PARAM_LIST :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.EMPTY :
                break;
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (checkForNewObjects) {
                    return true;
                }
                for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c.getFirstChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                }
                return false;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.REGEXP :
                if (checkForNewObjects) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.NAME :
                if (n.getFirstChild() != null) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                return checkForNewObjects || (!com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
            case com.google.javascript.rhino.Token.NEW :
                if (checkForNewObjects) {
                    return true;
                }
                if (!com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n)) {
                    break;
                }
                return true;
            case com.google.javascript.rhino.Token.CALL :
                if (!com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler)) {
                    break;
                }
                return true;
            default :
                if (com.google.javascript.jscomp.NodeUtil.isSimpleOperator(n)) {
                    break;
                }
                if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
                    com.google.javascript.rhino.Node assignTarget = n.getFirstChild();
                    if (assignTarget.isName()) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getFirstChild(), checkForNewObjects, compiler) || com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getLastChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.isGet(assignTarget)) {
                        com.google.javascript.rhino.Node current = assignTarget.getFirstChild();
                        if (com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(current)) {
                            return false;
                        }
                        while (com.google.javascript.jscomp.NodeUtil.isGet(current)) {
                            current = current.getFirstChild();
                        } 
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(current, true);
                    } else {
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(assignTarget, true);
                    }
                }
                return true;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c, checkForNewObjects, compiler)) {
                return true;
            }
        }
        return false;
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(callNode, null);
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isNew()) {
            throw new java.lang.IllegalStateException("Expected NEW node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName() && com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())) {
            return false;
        }
        return true;
    }

    private static final java.util.Set<java.lang.String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("Object", "Array", "String", "Number", "Boolean", "RegExp", "Error");

    private static final java.util.Set<java.lang.String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("toString", "valueOf");

    private static final java.util.Set<java.lang.String> REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("test", "exec");

    private static final java.util.Set<java.lang.String> STRING_REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("match", "replace", "search", "split");

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(callNode, null);
    }

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode, @javax.annotation.Nullable
    com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isCall()) {
            throw new java.lang.IllegalStateException("Expected CALL node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName()) {
            java.lang.String name = nameNode.getString();
            if (com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
                return false;
            }
        } else if (nameNode.isGetProp()) {
            if (callNode.hasOneChild() && com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())) {
                return false;
            }
            if (callNode.isOnlyModifiesThisCall() && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(nameNode.getFirstChild())) {
                return false;
            }
            if (nameNode.getFirstChild().isName()) {
                if ("Math.floor".equals(nameNode.getQualifiedName())) {
                    return false;
                }
            }
            if ((compiler != null) && (!compiler.hasRegExpGlobalReferences())) {
                if (nameNode.getFirstChild().isRegExp() && com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    return false;
                } else if (nameNode.getFirstChild().isString() && com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    com.google.javascript.rhino.Node param = nameNode.getNext();
                    if ((param != null) && (param.isString() || param.isRegExp())) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    static boolean callHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isCall());
        return (n.getSideEffectFlags() & com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS) > 0;
    }

    static boolean newHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isNew());
        return n.isOnlyModifiesThisCall();
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(n, null);
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
            return true;
        }
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.CALL :
                return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NAME :
                return n.hasChildren();
            default :
                return false;
        }
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n) {
        java.util.Set<java.lang.String> emptySet = java.util.Collections.emptySet();
        return com.google.javascript.jscomp.NodeUtil.canBeSideEffected(n, emptySet);
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n, java.util.Set<java.lang.String> knownConstants) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.NEW :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return (!com.google.javascript.jscomp.NodeUtil.isConstantName(n)) && (!knownConstants.contains(n.getString()));
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GETELEM :
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
                return false;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.canBeSideEffected(c, knownConstants)) {
                return true;
            }
        }
        return false;
    }

    static int precedence(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.COMMA :
                return 0;
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN :
                return 1;
            case com.google.javascript.rhino.Token.HOOK :
                return 2;
            case com.google.javascript.rhino.Token.OR :
                return 3;
            case com.google.javascript.rhino.Token.AND :
                return 4;
            case com.google.javascript.rhino.Token.BITOR :
                return 5;
            case com.google.javascript.rhino.Token.BITXOR :
                return 6;
            case com.google.javascript.rhino.Token.BITAND :
                return 7;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return 8;
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.IN :
                return 9;
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
                return 10;
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
                return 11;
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
                return 12;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                return 13;
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
                return 15;
            default :
                throw new java.lang.Error(((("Unknown precedence for " + com.google.javascript.rhino.Token.name(type)) + " (type ") + type) + ")");
        }
    }

    static boolean isUndefined(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.VOID :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return n.getString().equals("undefined");
        }
        return false;
    }

    static boolean isNullOrUndefined(com.google.javascript.rhino.Node n) {
        return n.isNull() || com.google.javascript.jscomp.NodeUtil.isUndefined(n);
    }

    static boolean allResultsMatch(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> p) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getFirstChild(), p) && com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getFirstChild().getNext(), p) && com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            default :
                return p.apply(n);
        }
    }

    static boolean anyResultsMatch(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> p) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getFirstChild(), p) || com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getFirstChild().getNext(), p) || com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            default :
                return p.apply(n);
        }
    }

    static class NumbericResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isNumericResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate NUMBERIC_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate();

    static boolean isNumericResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);
    }

    static boolean isNumericResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                return (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getFirstChild())) && (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getLastChild()));
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.NUMBER :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("NaN")) {
                    return true;
                }
                if (name.equals("Infinity")) {
                    return true;
                }
                return false;
            default :
                return false;
        }
    }

    static class BooleanResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isBooleanResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate BOOLEAN_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate();

    static boolean isBooleanResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);
    }

    static boolean isBooleanResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.DELPROP :
                return true;
            default :
                return false;
        }
    }

    static class MayBeStringResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate MAY_BE_STRING_PREDICATE = new com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate();

    static boolean mayBeString(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayBeString(n, true);
    }

    static boolean mayBeString(com.google.javascript.rhino.Node n, boolean recurse) {
        if (recurse) {
            return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);
        } else {
            return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);
        }
    }

    static boolean mayBeStringHelper(com.google.javascript.rhino.Node n) {
        return (((!com.google.javascript.jscomp.NodeUtil.isNumericResult(n)) && (!com.google.javascript.jscomp.NodeUtil.isBooleanResult(n))) && (!com.google.javascript.jscomp.NodeUtil.isUndefined(n))) && (!n.isNull());
    }

    static boolean isAssociative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isCommutative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return true;
        }
        return false;
    }

    static int getOpFromAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.MOD;
        }
        throw new java.lang.IllegalArgumentException("Not an assignment op:" + n);
    }

    static boolean containsFunction(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.containsType(n, com.google.javascript.rhino.Token.FUNCTION);
    }

    static boolean referencesThis(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node start = (n.isFunction()) ? n.getLastChild() : n;
        return com.google.javascript.jscomp.NodeUtil.containsType(start, com.google.javascript.rhino.Token.THIS, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isGet(com.google.javascript.rhino.Node n) {
        return n.isGetProp() || n.isGetElem();
    }

    static boolean isVarDeclaration(com.google.javascript.rhino.Node n) {
        return n.isName() && n.getParent().isVar();
    }

    static com.google.javascript.rhino.Node getAssignedValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isName());
        com.google.javascript.rhino.Node parent = n.getParent();
        if (parent.isVar()) {
            return n.getFirstChild();
        } else if (parent.isAssign() && (parent.getFirstChild() == n)) {
            return n.getNext();
        } else {
            return null;
        }
    }

    static boolean isExprAssign(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isAssign();
    }

    static boolean isExprCall(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isCall();
    }

    static boolean isForIn(com.google.javascript.rhino.Node n) {
        return n.isFor() && (n.getChildCount() == 3);
    }

    static boolean isLoopStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node getLoopCodeBlock(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getFirstChild();
            default :
                return null;
        }
    }

    static boolean isWithinLoop(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node parent : n.getAncestors()) {
            if (com.google.javascript.jscomp.NodeUtil.isLoopStructure(parent)) {
                return true;
            }
            if (parent.isFunction()) {
                break;
            }
        }
        return false;
    }

    static boolean isControlStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.WITH :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                return false;
        }
    }

    static boolean isControlStructureCodeBlock(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node n) {
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.WITH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.DO :
                return parent.getFirstChild() == n;
            case com.google.javascript.rhino.Token.IF :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.TRY :
                return (parent.getFirstChild() == n) || (parent.getLastChild() == n);
            case com.google.javascript.rhino.Token.CATCH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isControlStructure(parent));
                return false;
        }
    }

    static com.google.javascript.rhino.Node getConditionExpression(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getFirstChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.FOR :
                switch (n.getChildCount()) {
                    case 3 :
                        return null;
                    case 4 :
                        return n.getFirstChild().getNext();
                }
                throw new java.lang.IllegalArgumentException("malformed 'for' statement " + n);
            case com.google.javascript.rhino.Token.CASE :
                return null;
        }
        throw new java.lang.IllegalArgumentException(n + " does not have a condition.");
    }

    static boolean isStatementBlock(com.google.javascript.rhino.Node n) {
        return n.isScript() || n.isBlock();
    }

    static boolean isStatement(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isStatementParent(n.getParent());
    }

    static boolean isStatementParent(com.google.javascript.rhino.Node parent) {
        com.google.common.base.Preconditions.checkState(parent != null);
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.LABEL :
                return true;
            default :
                return false;
        }
    }

    static boolean isSwitchCase(com.google.javascript.rhino.Node n) {
        return n.isCase() || n.isDefaultCase();
    }

    static boolean isReferenceName(com.google.javascript.rhino.Node n) {
        return n.isName() && (!n.getString().isEmpty());
    }

    static boolean isTryFinallyNode(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node child) {
        return (parent.isTry() && (parent.getChildCount() == 3)) && (child == parent.getLastChild());
    }

    static boolean isTryCatchNodeContainer(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        return parent.isTry() && (parent.getFirstChild().getNext() == n);
    }

    static void removeChild(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node node) {
        if (com.google.javascript.jscomp.NodeUtil.isTryFinallyNode(parent, node)) {
            if (com.google.javascript.jscomp.NodeUtil.hasCatchHandler(com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent))) {
                parent.removeChild(node);
            } else {
                node.detachChildren();
            }
        } else if (node.isCatch()) {
            com.google.javascript.rhino.Node tryNode = node.getParent().getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachFromParent();
        } else if (com.google.javascript.jscomp.NodeUtil.isTryCatchNodeContainer(node)) {
            com.google.javascript.rhino.Node tryNode = node.getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachChildren();
        } else if (node.isBlock()) {
            node.detachChildren();
        } else if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent) || com.google.javascript.jscomp.NodeUtil.isSwitchCase(node)) {
            parent.removeChild(node);
        } else if (parent.isVar()) {
            if (parent.hasMoreThanOneChild()) {
                parent.removeChild(node);
            } else {
                parent.removeChild(node);
                com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
            }
        } else if (parent.isLabel() && (node == parent.getLastChild())) {
            parent.removeChild(node);
            com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
        } else if (parent.isFor() && (parent.getChildCount() == 4)) {
            parent.replaceChild(node, com.google.javascript.rhino.IR.empty());
        } else {
            throw new java.lang.IllegalStateException((("Invalid attempt to remove node: " + node.toString()) + " of ") + parent.toString());
        }
    }

    static void maybeAddFinally(com.google.javascript.rhino.Node tryNode) {
        com.google.common.base.Preconditions.checkState(tryNode.isTry());
        if (!com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode)) {
            tryNode.addChildrenToBack(com.google.javascript.rhino.IR.block().srcref(tryNode));
        }
    }

    static boolean tryMergeBlock(com.google.javascript.rhino.Node block) {
        com.google.common.base.Preconditions.checkState(block.isBlock());
        com.google.javascript.rhino.Node parent = block.getParent();
        if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)) {
            com.google.javascript.rhino.Node previous = block;
            while (block.hasChildren()) {
                com.google.javascript.rhino.Node child = block.removeFirstChild();
                parent.addChildAfter(child, previous);
                previous = child;
            } 
            parent.removeChild(block);
            return true;
        } else {
            return false;
        }
    }

    static boolean isCallOrNew(com.google.javascript.rhino.Node node) {
        return node.isCall() || node.isNew();
    }

    static com.google.javascript.rhino.Node getFunctionBody(com.google.javascript.rhino.Node fn) {
        com.google.common.base.Preconditions.checkArgument(fn.isFunction());
        return fn.getLastChild();
    }

    static boolean isFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return n.isFunction() && com.google.javascript.jscomp.NodeUtil.isStatement(n);
    }

    static boolean isHoistedFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) && (n.getParent().isScript() || n.getParent().getParent().isFunction());
    }

    static boolean isFunctionExpression(com.google.javascript.rhino.Node n) {
        return n.isFunction() && (!com.google.javascript.jscomp.NodeUtil.isStatement(n));
    }

    static boolean isBleedingFunctionName(com.google.javascript.rhino.Node n) {
        return (n.isName() && (!n.getString().isEmpty())) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n.getParent());
    }

    static boolean isEmptyFunctionExpression(com.google.javascript.rhino.Node node) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(node) && com.google.javascript.jscomp.NodeUtil.isEmptyBlock(node.getLastChild());
    }

    static boolean isVarArgsFunction(com.google.javascript.rhino.Node function) {
        com.google.common.base.Preconditions.checkArgument(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(function.getLastChild(), "arguments", com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isObjectCallMethod(com.google.javascript.rhino.Node callNode, java.lang.String methodName) {
        if (callNode.isCall()) {
            com.google.javascript.rhino.Node functionIndentifyingExpression = callNode.getFirstChild();
            if (com.google.javascript.jscomp.NodeUtil.isGet(functionIndentifyingExpression)) {
                com.google.javascript.rhino.Node last = functionIndentifyingExpression.getLastChild();
                if ((last != null) && last.isString()) {
                    java.lang.String propName = last.getString();
                    return propName.equals(methodName);
                }
            }
        }
        return false;
    }

    static boolean isFunctionObjectCall(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "call");
    }

    static boolean isFunctionObjectApply(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "apply");
    }

    static boolean isVarOrSimpleAssignLhs(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        return (parent.isAssign() && (parent.getFirstChild() == n)) || parent.isVar();
    }

    public static boolean isLValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument((n.isName() || n.isGetProp()) || n.isGetElem());
        com.google.javascript.rhino.Node parent = n.getParent();
        if (parent == null) {
            return false;
        }
        return (((((((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) || (com.google.javascript.jscomp.NodeUtil.isForIn(parent) && (parent.getFirstChild() == n))) || parent.isVar()) || (parent.isFunction() && (parent.getFirstChild() == n))) || parent.isDec()) || parent.isInc()) || parent.isParamList()) || parent.isCatch();
    }

    static boolean isObjectLitKey(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String getObjectLitKeyName(com.google.javascript.rhino.Node key) {
        switch (key.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return key.getString();
        }
        throw new java.lang.IllegalStateException("Unexpected node type: " + key);
    }

    static com.google.javascript.rhino.jstype.JSType getObjectLitKeyTypeFromValueType(com.google.javascript.rhino.Node key, com.google.javascript.rhino.jstype.JSType valueType) {
        if (valueType != null) {
            switch (key.getType()) {
                case com.google.javascript.rhino.Token.GETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        valueType = fntype.getReturnType();
                    } else {
                        return null;
                    }
                    break;
                case com.google.javascript.rhino.Token.SETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        com.google.javascript.rhino.Node param = fntype.getParametersNode().getFirstChild();
                        valueType = param.getJSType();
                    } else {
                        return null;
                    }
                    break;
            }
        }
        return valueType;
    }

    static boolean isGetOrSetKey(com.google.javascript.rhino.Node node) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String opToStr(int operator) {
        switch (operator) {
            case com.google.javascript.rhino.Token.BITOR :
                return "|";
            case com.google.javascript.rhino.Token.OR :
                return "||";
            case com.google.javascript.rhino.Token.BITXOR :
                return "^";
            case com.google.javascript.rhino.Token.AND :
                return "&&";
            case com.google.javascript.rhino.Token.BITAND :
                return "&";
            case com.google.javascript.rhino.Token.SHEQ :
                return "===";
            case com.google.javascript.rhino.Token.EQ :
                return "==";
            case com.google.javascript.rhino.Token.NOT :
                return "!";
            case com.google.javascript.rhino.Token.NE :
                return "!=";
            case com.google.javascript.rhino.Token.SHNE :
                return "!==";
            case com.google.javascript.rhino.Token.LSH :
                return "<<";
            case com.google.javascript.rhino.Token.IN :
                return "in";
            case com.google.javascript.rhino.Token.LE :
                return "<=";
            case com.google.javascript.rhino.Token.LT :
                return "<";
            case com.google.javascript.rhino.Token.URSH :
                return ">>>";
            case com.google.javascript.rhino.Token.RSH :
                return ">>";
            case com.google.javascript.rhino.Token.GE :
                return ">=";
            case com.google.javascript.rhino.Token.GT :
                return ">";
            case com.google.javascript.rhino.Token.MUL :
                return "*";
            case com.google.javascript.rhino.Token.DIV :
                return "/";
            case com.google.javascript.rhino.Token.MOD :
                return "%";
            case com.google.javascript.rhino.Token.BITNOT :
                return "~";
            case com.google.javascript.rhino.Token.ADD :
                return "+";
            case com.google.javascript.rhino.Token.SUB :
                return "-";
            case com.google.javascript.rhino.Token.POS :
                return "+";
            case com.google.javascript.rhino.Token.NEG :
                return "-";
            case com.google.javascript.rhino.Token.ASSIGN :
                return "=";
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return "|=";
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return "^=";
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return "&=";
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return "<<=";
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return ">>=";
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return ">>>=";
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return "+=";
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return "-=";
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return "*=";
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return "/=";
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return "%=";
            case com.google.javascript.rhino.Token.VOID :
                return "void";
            case com.google.javascript.rhino.Token.TYPEOF :
                return "typeof";
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return "instanceof";
            default :
                return null;
        }
    }

    static java.lang.String opToStrNoFail(int operator) {
        java.lang.String res = com.google.javascript.jscomp.NodeUtil.opToStr(operator);
        if (res == null) {
            throw new java.lang.Error((("Unknown op " + operator) + ": ") + com.google.javascript.rhino.Token.name(operator));
        }
        return res;
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type) {
        return com.google.javascript.jscomp.NodeUtil.containsType(node, type, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static void redeclareVarsInsideBranch(com.google.javascript.rhino.Node branch) {
        java.util.Collection<com.google.javascript.rhino.Node> vars = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(branch);
        if (vars.isEmpty()) {
            return;
        }
        com.google.javascript.rhino.Node parent = com.google.javascript.jscomp.NodeUtil.getAddingRoot(branch);
        for (com.google.javascript.rhino.Node nameNode : vars) {
            com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(com.google.javascript.rhino.IR.name(nameNode.getString()).srcref(nameNode)).srcref(nameNode);
            com.google.javascript.jscomp.NodeUtil.copyNameAnnotations(nameNode, var.getFirstChild());
            parent.addChildToFront(var);
        }
    }

    static void copyNameAnnotations(com.google.javascript.rhino.Node source, com.google.javascript.rhino.Node destination) {
        if (source.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME)) {
            destination.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
    }

    private static com.google.javascript.rhino.Node getAddingRoot(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node addingRoot = null;
        com.google.javascript.rhino.Node ancestor = n;
        while (null != (ancestor = ancestor.getParent())) {
            int type = ancestor.getType();
            if (type == com.google.javascript.rhino.Token.SCRIPT) {
                addingRoot = ancestor;
                break;
            } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
                addingRoot = ancestor.getLastChild();
                break;
            }
        } 
        com.google.common.base.Preconditions.checkState(addingRoot.isBlock() || addingRoot.isScript());
        com.google.common.base.Preconditions.checkState((addingRoot.getFirstChild() == null) || (!addingRoot.getFirstChild().isScript()));
        return addingRoot;
    }

    public static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        int endPos = name.indexOf('.');
        if (endPos == (-1)) {
            return com.google.javascript.jscomp.NodeUtil.newName(convention, name);
        }
        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newName(convention, name.substring(0, endPos));
        int startPos;
        do {
            startPos = endPos + 1;
            endPos = name.indexOf('.', startPos);
            java.lang.String part = (endPos == (-1)) ? name.substring(startPos) : name.substring(startPos, endPos);
            com.google.javascript.rhino.Node propNode = com.google.javascript.rhino.IR.string(part);
            if (convention.isConstantKey(part)) {
                propNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
            }
            node = com.google.javascript.rhino.IR.getprop(node, propNode);
        } while (endPos != (-1) );
        return node;
    }

    static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(convention, name);
        com.google.javascript.jscomp.NodeUtil.setDebugInformation(node, basisNode, originalName);
        return node;
    }

    static com.google.javascript.rhino.Node getRootOfQualifiedName(com.google.javascript.rhino.Node qName) {
        for (com.google.javascript.rhino.Node current = qName; true; current = current.getFirstChild()) {
            if (current.isName() || current.isThis()) {
                return current;
            }
            com.google.common.base.Preconditions.checkState(current.isGetProp());
        }
    }

    static void setDebugInformation(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        node.copyInformationFromForTree(basisNode);
        node.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
    }

    private static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.rhino.IR.name(name);
        if (convention.isConstant(name)) {
            nameNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
        return nameNode;
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node srcref) {
        return com.google.javascript.jscomp.NodeUtil.newName(convention, name).srcref(srcref);
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.NodeUtil.newName(convention, name, basisNode);
        nameNode.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
        return nameNode;
    }

    static boolean isLatin(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if (c > com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN) {
                return false;
            }
        }
        return true;
    }

    static boolean isValidSimpleName(java.lang.String name) {
        return (com.google.javascript.rhino.TokenStream.isJSIdentifier(name) && (!com.google.javascript.rhino.TokenStream.isKeyword(name))) && com.google.javascript.jscomp.NodeUtil.isLatin(name);
    }

    public static boolean isValidQualifiedName(java.lang.String name) {
        if (name.endsWith(".") || name.startsWith(".")) {
            return false;
        }
        java.lang.String[] parts = name.split("\\.");
        for (java.lang.String part : parts) {
            if (!com.google.javascript.jscomp.NodeUtil.isValidSimpleName(part)) {
                return false;
            }
        }
        return true;
    }

    static boolean isValidPropertyName(java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isValidSimpleName(name);
    }

    private static class VarCollector implements com.google.javascript.jscomp.NodeUtil.Visitor {
        final java.util.Map<java.lang.String, com.google.javascript.rhino.Node> vars = com.google.common.collect.Maps.newLinkedHashMap();

        @java.lang.Override
        public void visit(com.google.javascript.rhino.Node n) {
            if (n.isName()) {
                com.google.javascript.rhino.Node parent = n.getParent();
                if ((parent != null) && parent.isVar()) {
                    java.lang.String name = n.getString();
                    if (!vars.containsKey(name)) {
                        vars.put(name, n);
                    }
                }
            }
        }
    }

    static java.util.Collection<com.google.javascript.rhino.Node> getVarsDeclaredInBranch(com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.NodeUtil.VarCollector collector = new com.google.javascript.jscomp.NodeUtil.VarCollector();
        com.google.javascript.jscomp.NodeUtil.visitPreOrder(root, collector, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        return collector.vars.values();
    }

    static boolean isPrototypePropertyDeclaration(com.google.javascript.rhino.Node n) {
        if (!com.google.javascript.jscomp.NodeUtil.isExprAssign(n)) {
            return false;
        }
        return com.google.javascript.jscomp.NodeUtil.isPrototypeProperty(n.getFirstChild().getFirstChild());
    }

    static boolean isPrototypeProperty(com.google.javascript.rhino.Node n) {
        java.lang.String lhsString = n.getQualifiedName();
        if (lhsString == null) {
            return false;
        }
        int prototypeIdx = lhsString.indexOf(".prototype.");
        return prototypeIdx != (-1);
    }

    static com.google.javascript.rhino.Node getPrototypeClassName(com.google.javascript.rhino.Node qName) {
        com.google.javascript.rhino.Node cur = qName;
        while (cur.isGetProp()) {
            if (cur.getLastChild().getString().equals("prototype")) {
                return cur.getFirstChild();
            } else {
                cur = cur.getFirstChild();
            }
        } 
        return null;
    }

    static java.lang.String getPrototypePropertyName(com.google.javascript.rhino.Node qName) {
        java.lang.String qNameStr = qName.getQualifiedName();
        int prototypeIdx = qNameStr.lastIndexOf(".prototype.");
        int memberIndex = (prototypeIdx + ".prototype".length()) + 1;
        return qNameStr.substring(memberIndex);
    }

    static com.google.javascript.rhino.Node newUndefinedNode(com.google.javascript.rhino.Node srcReferenceNode) {
        com.google.javascript.rhino.Node node = com.google.javascript.rhino.IR.voidNode(com.google.javascript.rhino.IR.number(0));
        if (srcReferenceNode != null) {
            node.copyInformationFromForTree(srcReferenceNode);
        }
        return node;
    }

    static com.google.javascript.rhino.Node newVarNode(java.lang.String name, com.google.javascript.rhino.Node value) {
        com.google.javascript.rhino.Node nodeName = com.google.javascript.rhino.IR.name(name);
        if (value != null) {
            com.google.common.base.Preconditions.checkState(value.getNext() == null);
            nodeName.addChildToBack(value);
            nodeName.srcref(value);
        }
        com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(nodeName).srcref(nodeName);
        return var;
    }

    private static class MatchNameNode implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final java.lang.String name;

        MatchNameNode(java.lang.String name) {
            this.name = name;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.isName() && n.getString().equals(name);
        }
    }

    static class MatchNodeType implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final int type;

        MatchNodeType(int type) {
            this.type = type;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.getType() == type;
        }
    }

    static class MatchDeclaration implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) || n.isVar();
        }
    }

    private static class MatchNotFunction implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return !n.isFunction();
        }
    }

    static final com.google.common.base.Predicate<com.google.javascript.rhino.Node> MATCH_NOT_FUNCTION = new com.google.javascript.jscomp.NodeUtil.MatchNotFunction();

    static class MatchShallowStatement implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            return n.isBlock() || ((!n.isFunction()) && (((parent == null) || com.google.javascript.jscomp.NodeUtil.isControlStructure(parent)) || com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)));
        }
    }

    static int getNodeTypeReferenceCount(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(node, name, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static int getNameReferenceCount(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static boolean has(com.google.javascript.rhino.Node node, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (pred.apply(node)) {
            return true;
        }
        if (!traverseChildrenPred.apply(node)) {
            return false;
        }
        for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.has(c, pred, traverseChildrenPred)) {
                return true;
            }
        }
        return false;
    }

    static int getCount(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        int total = 0;
        if (pred.apply(n)) {
            total++;
        }
        if (traverseChildrenPred.apply(n)) {
            for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                total += com.google.javascript.jscomp.NodeUtil.getCount(c, pred, traverseChildrenPred);
            }
        }
        return total;
    }

    static interface Visitor {
        public abstract void visit(com.google.javascript.rhino.Node node);
    }

    static void visitPreOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor visitor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        visitor.visit(node);
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPreOrder(c, visitor, traverseChildrenPred);
            }
        }
    }

    static void visitPostOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor visitor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPostOrder(c, visitor, traverseChildrenPred);
            }
        }
        visitor.visit(node);
    }

    static boolean hasFinally(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getChildCount() == 3;
    }

    static com.google.javascript.rhino.Node getCatchBlock(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getFirstChild().getNext();
    }

    static boolean hasCatchHandler(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isBlock());
        return n.hasChildren() && n.getFirstChild().isCatch();
    }

    public static com.google.javascript.rhino.Node getFunctionParameters(com.google.javascript.rhino.Node fnNode) {
        com.google.common.base.Preconditions.checkArgument(fnNode.isFunction());
        return fnNode.getFirstChild().getNext();
    }

    static boolean isConstantName(com.google.javascript.rhino.Node node) {
        return node.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
    }

    static boolean isConstantByConvention(com.google.javascript.jscomp.CodingConvention convention, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        java.lang.String name = node.getString();
        if (parent.isGetProp() && (node == parent.getLastChild())) {
            return convention.isConstantKey(name);
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(node, parent)) {
            return convention.isConstantKey(name);
        } else {
            return convention.isConstant(name);
        }
    }

    public static com.google.javascript.rhino.JSDocInfo getFunctionJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isFunction());
        com.google.javascript.rhino.JSDocInfo fnInfo = n.getJSDocInfo();
        if ((fnInfo == null) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n)) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent.isAssign()) {
                fnInfo = parent.getJSDocInfo();
            } else if (parent.isName()) {
                fnInfo = parent.getParent().getJSDocInfo();
            }
        }
        return fnInfo;
    }

    public static java.lang.String getSourceName(com.google.javascript.rhino.Node n) {
        java.lang.String sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getSourceFileName();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.StaticSourceFile sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getStaticSourceFile();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.InputId getInputId(com.google.javascript.rhino.Node n) {
        while ((n != null) && (!n.isScript())) {
            n = n.getParent();
        } 
        return (n != null) && n.isScript() ? n.getInputId() : null;
    }

    static com.google.javascript.rhino.Node newCallNode(com.google.javascript.rhino.Node callTarget, com.google.javascript.rhino.Node... parameters) {
        boolean isFreeCall = !com.google.javascript.jscomp.NodeUtil.isGet(callTarget);
        com.google.javascript.rhino.Node call = com.google.javascript.rhino.IR.call(callTarget);
        call.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, isFreeCall);
        for (com.google.javascript.rhino.Node parameter : parameters) {
            call.addChildToBack(parameter);
        }
        return call;
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value) {
        return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysFalse());
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value, com.google.common.base.Predicate<com.google.javascript.rhino.Node> locals) {
        switch (value.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals));
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                if (value.getBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP)) {
                    return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals);
                } else {
                    return true;
                }
            case com.google.javascript.rhino.Token.THIS :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.NAME :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.CALL :
                return (com.google.javascript.jscomp.NodeUtil.callHasLocalResult(value) || com.google.javascript.jscomp.NodeUtil.isToStringMethodCall(value)) || locals.apply(value);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.newHasLocalResult(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return true;
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.IN :
                return true;
            default :
                if ((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(value) || com.google.javascript.jscomp.NodeUtil.isSimpleOperator(value)) || com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                    return true;
                }
                throw new java.lang.IllegalStateException((("Unexpected expression node" + value) + "\n parent:") + value.getParent());
        }
    }

    private static com.google.javascript.rhino.Node getNthSibling(com.google.javascript.rhino.Node first, int index) {
        com.google.javascript.rhino.Node sibling = first;
        while ((index != 0) && (sibling != null)) {
            sibling = sibling.getNext();
            index--;
        } 
        return sibling;
    }

    static com.google.javascript.rhino.Node getArgumentForFunction(com.google.javascript.rhino.Node function, int index) {
        com.google.common.base.Preconditions.checkState(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(function.getFirstChild().getNext().getFirstChild(), index);
    }

    static com.google.javascript.rhino.Node getArgumentForCallOrNew(com.google.javascript.rhino.Node call, int index) {
        com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isCallOrNew(call));
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(call.getFirstChild().getNext(), index);
    }

    private static boolean isToStringMethodCall(com.google.javascript.rhino.Node call) {
        com.google.javascript.rhino.Node getNode = call.getFirstChild();
        if (com.google.javascript.jscomp.NodeUtil.isGet(getNode)) {
            com.google.javascript.rhino.Node propNode = getNode.getLastChild();
            return propNode.isString() && "toString".equals(propNode.getString());
        }
        return false;
    }

    static com.google.javascript.rhino.JSDocInfo getBestJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info == null) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent == null) {
                return null;
            }
            if (parent.isName()) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            } else if (parent.isAssign()) {
                return parent.getJSDocInfo();
            } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
                return parent.getJSDocInfo();
            } else if (parent.isFunction()) {
                return parent.getJSDocInfo();
            } else if (parent.isVar() && parent.hasOneChild()) {
                return parent.getJSDocInfo();
            } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            }
        }
        return info;
    }

    static com.google.javascript.rhino.Node getBestLValue(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        boolean isFunctionDeclaration = com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n);
        if (isFunctionDeclaration) {
            return n.getFirstChild();
        } else if (parent.isName()) {
            return parent;
        } else if (parent.isAssign()) {
            return parent.getFirstChild();
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
            return parent;
        } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(parent);
        }
        return null;
    }

    static com.google.javascript.rhino.Node getRValueOfLValue(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return n.getNext();
            case com.google.javascript.rhino.Token.VAR :
                return n.getFirstChild();
            case com.google.javascript.rhino.Token.FUNCTION :
                return parent;
        }
        return null;
    }

    static com.google.javascript.rhino.Node getBestLValueOwner(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
        } else if (com.google.javascript.jscomp.NodeUtil.isGet(lValue)) {
            return lValue.getFirstChild();
        }
        return null;
    }

    static java.lang.String getBestLValueName(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {
            com.google.javascript.rhino.Node owner = com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
            if (owner != null) {
                java.lang.String ownerName = com.google.javascript.jscomp.NodeUtil.getBestLValueName(owner);
                if (ownerName != null) {
                    return (ownerName + ".") + com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(lValue);
                }
            }
            return null;
        }
        return lValue.getQualifiedName();
    }

    static boolean isExpressionResultUsed(com.google.javascript.rhino.Node expr) {
        com.google.javascript.rhino.Node parent = expr.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                return false;
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return expr == parent.getFirstChild() ? true : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.COMMA :
                com.google.javascript.rhino.Node gramps = parent.getParent();
                if (gramps.isCall() && (parent == gramps.getFirstChild())) {
                    if ((((expr == parent.getFirstChild()) && (parent.getChildCount() == 2)) && expr.getNext().isName()) && "eval".equals(expr.getNext().getString())) {
                        return true;
                    }
                }
                return expr == parent.getFirstChild() ? false : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.FOR :
                if (!com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                    return parent.getChildAtIndex(1) == expr;
                }
                break;
        }
        return true;
    }

    static boolean isExecutedExactlyOnce(com.google.javascript.rhino.Node n) {
        inspect : do {
            com.google.javascript.rhino.Node parent = n.getParent();
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.HOOK :
                case com.google.javascript.rhino.Token.AND :
                case com.google.javascript.rhino.Token.OR :
                    if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.FOR :
                    if (com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                        if (parent.getChildAtIndex(1) != n) {
                            return false;
                        }
                    } else if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.DO :
                    return false;
                case com.google.javascript.rhino.Token.TRY :
                    if ((!com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) || (parent.getLastChild() != n)) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.DEFAULT_CASE :
                    return false;
                case com.google.javascript.rhino.Token.SCRIPT :
                case com.google.javascript.rhino.Token.FUNCTION :
                    break inspect;
            }
        } while ((n = n.getParent()) != null );
        return true;
    }

    static com.google.javascript.rhino.Node booleanNode(boolean value) {
        return value ? com.google.javascript.rhino.IR.trueNode() : com.google.javascript.rhino.IR.falseNode();
    }

    static com.google.javascript.rhino.Node numberNode(double value, com.google.javascript.rhino.Node srcref) {
        com.google.javascript.rhino.Node result;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(68).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE",com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION",com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN",com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER",com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN",com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("srcref",srcref);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("value",value);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectionEnds();
        }
        if (runtimeAngelicValue) if (java.lang.Double.isNaN(value)) {
            result = com.google.javascript.rhino.IR.name("NaN");
        } else if (value == java.lang.Double.POSITIVE_INFINITY) {
            result = com.google.javascript.rhino.IR.name("Infinity");
        } else if (value == java.lang.Double.NEGATIVE_INFINITY) {
            result = com.google.javascript.rhino.IR.neg(com.google.javascript.rhino.IR.name("Infinity"));
        } else {
            result = com.google.javascript.rhino.IR.number(value);
        }
        if (srcref != null) {
            result.srcrefTree(srcref);
        }
        return result;
    }
}
[222862] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659901069740
GPR[EPVATF]-1659901071171
GPR[SPS]-1659901071171
[224986] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3215.
GPR[EPS]-1659901071864
GPR[ESUN]-1659901071865
GPR[SSUN]-1659901071865
944853999
GPR[SPVATF]-1659901072118
GPR[EPVATF]-1659901073586
GPR[SPS]-1659901073586
[227260] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:720.
GPR[EPS]-1659901074138
GPR[SPVATF]-1659901074138
GPR[EPVATF]-1659901075587
GPR[SPS]-1659901075587
[229266] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:720.
GPR[EPS]-1659901076144
GPR[ESUN]-1659901076144
GPR[SSUN]-1659901076144
944853999
GPR[ESUN]-1659901076397
GPR[SSUN]-1659901076397
944853999
GPR[SPVATF]-1659901076663
GPR[EPVATF]-1659901078172
GPR[SPS]-1659901078172
[231866] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:716.
GPR[EPS]-1659901078744
GPR[SPVATF]-1659901078744
GPR[EPVATF]-1659901080183
GPR[SPS]-1659901080183
[233863] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:716.
GPR[EPS]-1659901080741
GPR[ESUN]-1659901080741
GPR[SSUN]-1659901080741
944853999
GPR[ESUN]-1659901081001
GPR[SSUN]-1659901081001
944853999
GPR[SPVATF]-1659901081250
GPR[EPVATF]-1659901082721
GPR[SPS]-1659901082721
[236403] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:704.
GPR[EPS]-1659901083281
GPR[SPVATF]-1659901083281
GPR[EPVATF]-1659901084718
GPR[SPS]-1659901084718
[238397] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:704.
GPR[EPS]-1659901085275
GPR[ESUN]-1659901085275
GPR[SSUN]-1659901085275
944853999
GPR[SPVATF]-1659901085531
GPR[EPVATF]-1659901087002
GPR[SPS]-1659901087002
[241730] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:689.
GPR[EPS]-1659901088608
GPR[SPVATF]-1659901088609
GPR[EPVATF]-1659901090039
GPR[SPS]-1659901090039
[243754] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:689.
GPR[EPS]-1659901090632
GPR[ESUN]-1659901090632
GPR[SSUN]-1659901090632
944853999
GPR[ESUN]-1659901090883
GPR[SSUN]-1659901090883
944853999
GPR[SPVATF]-1659901091151
GPR[EPVATF]-1659901092480
GPR[SPS]-1659901092480
[246163] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:830.
GPR[EPS]-1659901093041
GPR[ESUN]-1659901093041
GPR[SSUN]-1659901093041
944853999
GPR[SPVATF]-1659901093315
GPR[EPVATF]-1659901094344
GPR[SPS]-1659901094344
[248049] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:828.
GPR[EPS]-1659901094927
GPR[ESUN]-1659901094927
GPR[SSUN]-1659901094927
944853999
GPR[SPVATF]-1659901095178
GPR[EPVATF]-1659901096200
GPR[SPS]-1659901096200
[249882] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:197.
GPR[EPS]-1659901096760
GPR[SPVATF]-1659901096760
GPR[EPVATF]-1659901097802
GPR[SPS]-1659901097802
[251480] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:197.
GPR[EPS]-1659901098358
GPR[ESUN]-1659901098358
GPR[SSUN]-1659901098358
944853999
GPR[ESUN]-1659901098695
GPR[SSUN]-1659901098695
944853999
GPR[ESUN]-1659901098945
GPR[SSUN]-1659901098945
944853999
GPR[ESUN]-1659901099213
GPR[SSUN]-1659901099213
1187751237
GPR[ESUN]-1659901099498
GPR[SSUN]-1659901099498
2433571
GPR[ESUN]-1659901099737
GPR[SSUN]-1659901099737
1187751237
GPR[ESUN]-1659901100020
GPR[SSUN]-1659901100020
1187751237
GPR[ESUN]-1659901100291
GPR[SSUN]-1659901100291
1187751237
GPR[ESUN]-1659901100566
GPR[SSUN]-1659901100566
1187751237
GPR[SPVATF]-1659901100841
GPR[EPVATF]-1659901101897
GPR[SPS]-1659901101897
[255632] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class NodeUtil {
    static final long MAX_POSITIVE_INTEGER_NUMBER = ((long) (java.lang.Math.pow(2, 53)));

    static final java.lang.String JSC_PROPERTY_NAME_FN = "JSCompiler_renameProperty";

    static final char LARGEST_BASIC_LATIN = 0x7f;

    private static final java.util.Set<java.lang.String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList("Array", "Date", "Error", "Object", "RegExp", "XMLHttpRequest"));

    private NodeUtil() {
    }

    static com.google.javascript.rhino.jstype.TernaryValue getImpureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                return value.not();
            case com.google.javascript.rhino.Token.AND :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.and(rhs);
                }
            case com.google.javascript.rhino.Token.OR :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.or(rhs);
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.javascript.rhino.jstype.TernaryValue trueValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild().getNext());
                    com.google.javascript.rhino.jstype.TernaryValue falseValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    if (trueValue.equals(falseValue)) {
                        return trueValue;
                    } else {
                        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                    }
                }
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.VOID :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            default :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n);
        }
    }

    static com.google.javascript.rhino.jstype.TernaryValue getPureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getString().length() > 0);
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getDouble() != 0);
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getLastChild()).not();
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.FALSE :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            case com.google.javascript.rhino.Token.VOID :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                }
                break;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if ("undefined".equals(name) || "NaN".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                } else if ("Infinity".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.REGEXP :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
        }
        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
    }

    static java.lang.String getStringValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return n.getString();
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name)) {
                    return name;
                }
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(n.getDouble());
            case com.google.javascript.rhino.Token.FALSE :
                return "false";
            case com.google.javascript.rhino.Token.TRUE :
                return "true";
            case com.google.javascript.rhino.Token.NULL :
                return "null";
            case com.google.javascript.rhino.Token.VOID :
                return "undefined";
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? "false" : "true";
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                return com.google.javascript.jscomp.NodeUtil.arrayToString(n);
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return "[object Object]";
        }
        return null;
    }

    static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    static java.lang.String getArrayElementStringValue(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isNullOrUndefined(n) || n.isEmpty() ? "" : com.google.javascript.jscomp.NodeUtil.getStringValue(n);
    }

    static java.lang.String arrayToString(com.google.javascript.rhino.Node literal) {
        com.google.javascript.rhino.Node first = literal.getFirstChild();
        java.lang.StringBuilder result = new java.lang.StringBuilder();
        int nextSlot = 0;
        int nextSkipSlot = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            java.lang.String childValue = com.google.javascript.jscomp.NodeUtil.getArrayElementStringValue(n);
            if (childValue == null) {
                return null;
            }
            if (n != first) {
                result.append(',');
            }
            result.append(childValue);
            nextSlot++;
        }
        return result.toString();
    }

    static java.lang.Double getNumberValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
                return 1.0;
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
                return 0.0;
            case com.google.javascript.rhino.Token.NUMBER :
                return n.getDouble();
            case com.google.javascript.rhino.Token.VOID :
                if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return null;
                } else {
                    return java.lang.Double.NaN;
                }
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("undefined")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("NaN")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("Infinity")) {
                    return java.lang.Double.POSITIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NEG :
                if (((n.getChildCount() == 1) && n.getFirstChild().isName()) && n.getFirstChild().getString().equals("Infinity")) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? 0.0 : 1.0;
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.jscomp.NodeUtil.getStringNumberValue(n.getString());
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                java.lang.String value = com.google.javascript.jscomp.NodeUtil.getStringValue(n);
                return value != null ? com.google.javascript.jscomp.NodeUtil.getStringNumberValue(value) : null;
        }
        return null;
    }

    static java.lang.Double getStringNumberValue(java.lang.String rawJsString) {
        if (rawJsString.contains("\u000b")) {
            return null;
        }
        java.lang.String s = com.google.javascript.jscomp.NodeUtil.trimJsWhiteSpace(rawJsString);
        if (s.length() == 0) {
            return 0.0;
        }
        if (((s.length() > 2) && (s.charAt(0) == '0')) && ((s.charAt(1) == 'x') || (s.charAt(1) == 'X'))) {
            try {
                return java.lang.Double.valueOf(java.lang.Integer.parseInt(s.substring(2), 16));
            } catch (java.lang.NumberFormatException e) {
                return java.lang.Double.NaN;
            }
        }
        if ((((s.length() > 3) && ((s.charAt(0) == '-') || (s.charAt(0) == '+'))) && (s.charAt(1) == '0')) && ((s.charAt(2) == 'x') || (s.charAt(2) == 'X'))) {
            return null;
        }
        if ((s.equals("infinity") || s.equals("-infinity")) || s.equals("+infinity")) {
            return null;
        }
        try {
            return java.lang.Double.parseDouble(s);
        } catch (java.lang.NumberFormatException e) {
            return java.lang.Double.NaN;
        }
    }

    static java.lang.String trimJsWhiteSpace(java.lang.String s) {
        int start = 0;
        int end = s.length();
        while ((end > 0) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(end - 1)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            end--;
        } 
        while ((start < end) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(start)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            start++;
        } 
        return s.substring(start, end);
    }

    public static com.google.javascript.rhino.jstype.TernaryValue isStrWhiteSpaceChar(int c) {
        switch (c) {
            case '\u000b' :
                return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
            case ' ' :
            case '\n' :
            case '\r' :
            case '\t' :
            case ' ' :
            case '\f' :
            case ' ' :
            case ' ' :
            case '﻿' :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            default :
                return java.lang.Character.getType(c) == java.lang.Character.SPACE_SEPARATOR ? com.google.javascript.rhino.jstype.TernaryValue.TRUE : com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        }
    }

    static java.lang.String getFunctionName(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isFunction());
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return parent.getQualifiedName();
            case com.google.javascript.rhino.Token.ASSIGN :
                return parent.getFirstChild().getQualifiedName();
            default :
                java.lang.String name = n.getFirstChild().getQualifiedName();
                return name;
        }
    }

    public static java.lang.String getNearestFunctionName(com.google.javascript.rhino.Node n) {
        if (!n.isFunction()) {
            return null;
        }
        java.lang.String name = com.google.javascript.jscomp.NodeUtil.getFunctionName(n);
        if (name != null) {
            return name;
        }
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SETTER_DEF :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return parent.getString();
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(parent);
        }
        return null;
    }

    static boolean isImmutableValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NEG :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                return ("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name);
        }
        return false;
    }

    static boolean isSymmetricOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.MUL :
                return true;
        }
        return false;
    }

    static boolean isRelationalOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
                return true;
        }
        return false;
    }

    static int getInverseOperator(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.GT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.rhino.Token.LT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.rhino.Token.GE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.rhino.Token.LE :
                return com.google.javascript.rhino.Token.GE;
        }
        return com.google.javascript.rhino.Token.ERROR;
    }

    static boolean isLiteralValue(com.google.javascript.rhino.Node n, boolean includeFunctions) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ARRAYLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if ((!child.isEmpty()) && (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions))) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.REGEXP :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child.getFirstChild(), includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                return includeFunctions && (!com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n));
            default :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n);
        }
    }

    static boolean isValidDefineValue(com.google.javascript.rhino.Node val, java.util.Set<java.lang.String> defines) {
        switch (val.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.URSH :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines) && com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getLastChild(), defines);
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.POS :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines);
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.GETPROP :
                if (val.isQualifiedName()) {
                    return defines.contains(val.getQualifiedName());
                }
        }
        return false;
    }

    static boolean isEmptyBlock(com.google.javascript.rhino.Node block) {
        if (!block.isBlock()) {
            return false;
        }
        for (com.google.javascript.rhino.Node n = block.getFirstChild(); n != null; n = n.getNext()) {
            if (!n.isEmpty()) {
                return false;
            }
        }
        return true;
    }

    static boolean isSimpleOperator(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(n.getType());
    }

    static boolean isSimpleOperatorType(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.COMMA :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.URSH :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node newExpr(com.google.javascript.rhino.Node child) {
        return com.google.javascript.rhino.IR.exprResult(child).srcref(child);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(n, null);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, true, compiler);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n, null);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, false, compiler);
    }

    private static boolean checkForStateChangeHelper(com.google.javascript.rhino.Node n, boolean checkForNewObjects, com.google.javascript.jscomp.AbstractCompiler compiler) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.PARAM_LIST :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.EMPTY :
                break;
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (checkForNewObjects) {
                    return true;
                }
                for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c.getFirstChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                }
                return false;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.REGEXP :
                if (checkForNewObjects) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.NAME :
                if (n.getFirstChild() != null) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                return checkForNewObjects || (!com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
            case com.google.javascript.rhino.Token.NEW :
                if (checkForNewObjects) {
                    return true;
                }
                if (!com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n)) {
                    break;
                }
                return true;
            case com.google.javascript.rhino.Token.CALL :
                if (!com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler)) {
                    break;
                }
                return true;
            default :
                if (com.google.javascript.jscomp.NodeUtil.isSimpleOperator(n)) {
                    break;
                }
                if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
                    com.google.javascript.rhino.Node assignTarget = n.getFirstChild();
                    if (assignTarget.isName()) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getFirstChild(), checkForNewObjects, compiler) || com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getLastChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.isGet(assignTarget)) {
                        com.google.javascript.rhino.Node current = assignTarget.getFirstChild();
                        if (com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(current)) {
                            return false;
                        }
                        while (com.google.javascript.jscomp.NodeUtil.isGet(current)) {
                            current = current.getFirstChild();
                        } 
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(current, true);
                    } else {
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(assignTarget, true);
                    }
                }
                return true;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c, checkForNewObjects, compiler)) {
                return true;
            }
        }
        return false;
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(callNode, null);
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isNew()) {
            throw new java.lang.IllegalStateException("Expected NEW node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName() && com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())) {
            return false;
        }
        return true;
    }

    private static final java.util.Set<java.lang.String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("Object", "Array", "String", "Number", "Boolean", "RegExp", "Error");

    private static final java.util.Set<java.lang.String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("toString", "valueOf");

    private static final java.util.Set<java.lang.String> REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("test", "exec");

    private static final java.util.Set<java.lang.String> STRING_REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("match", "replace", "search", "split");

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(callNode, null);
    }

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode, @javax.annotation.Nullable
    com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isCall()) {
            throw new java.lang.IllegalStateException("Expected CALL node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName()) {
            java.lang.String name = nameNode.getString();
            if (com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
                return false;
            }
        } else if (nameNode.isGetProp()) {
            if (callNode.hasOneChild() && com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())) {
                return false;
            }
            if (callNode.isOnlyModifiesThisCall() && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(nameNode.getFirstChild())) {
                return false;
            }
            if (nameNode.getFirstChild().isName()) {
                if ("Math.floor".equals(nameNode.getQualifiedName())) {
                    return false;
                }
            }
            if ((compiler != null) && (!compiler.hasRegExpGlobalReferences())) {
                if (nameNode.getFirstChild().isRegExp() && com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    return false;
                } else if (nameNode.getFirstChild().isString() && com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    com.google.javascript.rhino.Node param = nameNode.getNext();
                    if ((param != null) && (param.isString() || param.isRegExp())) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    static boolean callHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isCall());
        return (n.getSideEffectFlags() & com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS) > 0;
    }

    static boolean newHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isNew());
        return n.isOnlyModifiesThisCall();
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(n, null);
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
            return true;
        }
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.CALL :
                return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NAME :
                return n.hasChildren();
            default :
                return false;
        }
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n) {
        java.util.Set<java.lang.String> emptySet = java.util.Collections.emptySet();
        return com.google.javascript.jscomp.NodeUtil.canBeSideEffected(n, emptySet);
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n, java.util.Set<java.lang.String> knownConstants) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.NEW :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return (!com.google.javascript.jscomp.NodeUtil.isConstantName(n)) && (!knownConstants.contains(n.getString()));
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GETELEM :
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
                return false;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.canBeSideEffected(c, knownConstants)) {
                return true;
            }
        }
        return false;
    }

    static int precedence(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.COMMA :
                return 0;
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN :
                return 1;
            case com.google.javascript.rhino.Token.HOOK :
                return 2;
            case com.google.javascript.rhino.Token.OR :
                return 3;
            case com.google.javascript.rhino.Token.AND :
                return 4;
            case com.google.javascript.rhino.Token.BITOR :
                return 5;
            case com.google.javascript.rhino.Token.BITXOR :
                return 6;
            case com.google.javascript.rhino.Token.BITAND :
                return 7;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return 8;
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.IN :
                return 9;
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
                return 10;
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
                return 11;
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
                return 12;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                return 13;
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
                return 15;
            default :
                throw new java.lang.Error(((("Unknown precedence for " + com.google.javascript.rhino.Token.name(type)) + " (type ") + type) + ")");
        }
    }

    static boolean isUndefined(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.VOID :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return n.getString().equals("undefined");
        }
        return false;
    }

    static boolean isNullOrUndefined(com.google.javascript.rhino.Node n) {
        return n.isNull() || com.google.javascript.jscomp.NodeUtil.isUndefined(n);
    }

    static boolean allResultsMatch(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> p) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getFirstChild(), p) && com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getFirstChild().getNext(), p) && com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            default :
                return p.apply(n);
        }
    }

    static boolean anyResultsMatch(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> p) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getFirstChild(), p) || com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getFirstChild().getNext(), p) || com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            default :
                return p.apply(n);
        }
    }

    static class NumbericResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isNumericResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate NUMBERIC_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate();

    static boolean isNumericResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);
    }

    static boolean isNumericResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                return (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getFirstChild())) && (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getLastChild()));
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.NUMBER :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("NaN")) {
                    return true;
                }
                if (name.equals("Infinity")) {
                    return true;
                }
                return false;
            default :
                return false;
        }
    }

    static class BooleanResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isBooleanResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate BOOLEAN_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate();

    static boolean isBooleanResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);
    }

    static boolean isBooleanResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.DELPROP :
                return true;
            default :
                return false;
        }
    }

    static class MayBeStringResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate MAY_BE_STRING_PREDICATE = new com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate();

    static boolean mayBeString(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayBeString(n, true);
    }

    static boolean mayBeString(com.google.javascript.rhino.Node n, boolean recurse) {
        if (recurse) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(82).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE",com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION",com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN",com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER",com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("recurse",recurse);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN",com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectionEnds();
            }
            if (runtimeAngelicValue)
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);

        } else {
            return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);
        }
    }

    static boolean mayBeStringHelper(com.google.javascript.rhino.Node n) {
        return (((!com.google.javascript.jscomp.NodeUtil.isNumericResult(n)) && (!com.google.javascript.jscomp.NodeUtil.isBooleanResult(n))) && (!com.google.javascript.jscomp.NodeUtil.isUndefined(n))) && (!n.isNull());
    }

    static boolean isAssociative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isCommutative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return true;
        }
        return false;
    }

    static int getOpFromAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.MOD;
        }
        throw new java.lang.IllegalArgumentException("Not an assignment op:" + n);
    }

    static boolean containsFunction(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.containsType(n, com.google.javascript.rhino.Token.FUNCTION);
    }

    static boolean referencesThis(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node start = (n.isFunction()) ? n.getLastChild() : n;
        return com.google.javascript.jscomp.NodeUtil.containsType(start, com.google.javascript.rhino.Token.THIS, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isGet(com.google.javascript.rhino.Node n) {
        return n.isGetProp() || n.isGetElem();
    }

    static boolean isVarDeclaration(com.google.javascript.rhino.Node n) {
        return n.isName() && n.getParent().isVar();
    }

    static com.google.javascript.rhino.Node getAssignedValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isName());
        com.google.javascript.rhino.Node parent = n.getParent();
        if (parent.isVar()) {
            return n.getFirstChild();
        } else if (parent.isAssign() && (parent.getFirstChild() == n)) {
            return n.getNext();
        } else {
            return null;
        }
    }

    static boolean isExprAssign(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isAssign();
    }

    static boolean isExprCall(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isCall();
    }

    static boolean isForIn(com.google.javascript.rhino.Node n) {
        return n.isFor() && (n.getChildCount() == 3);
    }

    static boolean isLoopStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node getLoopCodeBlock(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getFirstChild();
            default :
                return null;
        }
    }

    static boolean isWithinLoop(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node parent : n.getAncestors()) {
            if (com.google.javascript.jscomp.NodeUtil.isLoopStructure(parent)) {
                return true;
            }
            if (parent.isFunction()) {
                break;
            }
        }
        return false;
    }

    static boolean isControlStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.WITH :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                return false;
        }
    }

    static boolean isControlStructureCodeBlock(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node n) {
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.WITH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.DO :
                return parent.getFirstChild() == n;
            case com.google.javascript.rhino.Token.IF :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.TRY :
                return (parent.getFirstChild() == n) || (parent.getLastChild() == n);
            case com.google.javascript.rhino.Token.CATCH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isControlStructure(parent));
                return false;
        }
    }

    static com.google.javascript.rhino.Node getConditionExpression(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getFirstChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.FOR :
                switch (n.getChildCount()) {
                    case 3 :
                        return null;
                    case 4 :
                        return n.getFirstChild().getNext();
                }
                throw new java.lang.IllegalArgumentException("malformed 'for' statement " + n);
            case com.google.javascript.rhino.Token.CASE :
                return null;
        }
        throw new java.lang.IllegalArgumentException(n + " does not have a condition.");
    }

    static boolean isStatementBlock(com.google.javascript.rhino.Node n) {
        return n.isScript() || n.isBlock();
    }

    static boolean isStatement(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isStatementParent(n.getParent());
    }

    static boolean isStatementParent(com.google.javascript.rhino.Node parent) {
        com.google.common.base.Preconditions.checkState(parent != null);
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.LABEL :
                return true;
            default :
                return false;
        }
    }

    static boolean isSwitchCase(com.google.javascript.rhino.Node n) {
        return n.isCase() || n.isDefaultCase();
    }

    static boolean isReferenceName(com.google.javascript.rhino.Node n) {
        return n.isName() && (!n.getString().isEmpty());
    }

    static boolean isTryFinallyNode(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node child) {
        return (parent.isTry() && (parent.getChildCount() == 3)) && (child == parent.getLastChild());
    }

    static boolean isTryCatchNodeContainer(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        return parent.isTry() && (parent.getFirstChild().getNext() == n);
    }

    static void removeChild(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node node) {
        if (com.google.javascript.jscomp.NodeUtil.isTryFinallyNode(parent, node)) {
            if (com.google.javascript.jscomp.NodeUtil.hasCatchHandler(com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent))) {
                parent.removeChild(node);
            } else {
                node.detachChildren();
            }
        } else if (node.isCatch()) {
            com.google.javascript.rhino.Node tryNode = node.getParent().getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachFromParent();
        } else if (com.google.javascript.jscomp.NodeUtil.isTryCatchNodeContainer(node)) {
            com.google.javascript.rhino.Node tryNode = node.getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachChildren();
        } else if (node.isBlock()) {
            node.detachChildren();
        } else if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent) || com.google.javascript.jscomp.NodeUtil.isSwitchCase(node)) {
            parent.removeChild(node);
        } else if (parent.isVar()) {
            if (parent.hasMoreThanOneChild()) {
                parent.removeChild(node);
            } else {
                parent.removeChild(node);
                com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
            }
        } else if (parent.isLabel() && (node == parent.getLastChild())) {
            parent.removeChild(node);
            com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
        } else if (parent.isFor() && (parent.getChildCount() == 4)) {
            parent.replaceChild(node, com.google.javascript.rhino.IR.empty());
        } else {
            throw new java.lang.IllegalStateException((("Invalid attempt to remove node: " + node.toString()) + " of ") + parent.toString());
        }
    }

    static void maybeAddFinally(com.google.javascript.rhino.Node tryNode) {
        com.google.common.base.Preconditions.checkState(tryNode.isTry());
        if (!com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode)) {
            tryNode.addChildrenToBack(com.google.javascript.rhino.IR.block().srcref(tryNode));
        }
    }

    static boolean tryMergeBlock(com.google.javascript.rhino.Node block) {
        com.google.common.base.Preconditions.checkState(block.isBlock());
        com.google.javascript.rhino.Node parent = block.getParent();
        if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)) {
            com.google.javascript.rhino.Node previous = block;
            while (block.hasChildren()) {
                com.google.javascript.rhino.Node child = block.removeFirstChild();
                parent.addChildAfter(child, previous);
                previous = child;
            } 
            parent.removeChild(block);
            return true;
        } else {
            return false;
        }
    }

    static boolean isCallOrNew(com.google.javascript.rhino.Node node) {
        return node.isCall() || node.isNew();
    }

    static com.google.javascript.rhino.Node getFunctionBody(com.google.javascript.rhino.Node fn) {
        com.google.common.base.Preconditions.checkArgument(fn.isFunction());
        return fn.getLastChild();
    }

    static boolean isFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return n.isFunction() && com.google.javascript.jscomp.NodeUtil.isStatement(n);
    }

    static boolean isHoistedFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) && (n.getParent().isScript() || n.getParent().getParent().isFunction());
    }

    static boolean isFunctionExpression(com.google.javascript.rhino.Node n) {
        return n.isFunction() && (!com.google.javascript.jscomp.NodeUtil.isStatement(n));
    }

    static boolean isBleedingFunctionName(com.google.javascript.rhino.Node n) {
        return (n.isName() && (!n.getString().isEmpty())) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n.getParent());
    }

    static boolean isEmptyFunctionExpression(com.google.javascript.rhino.Node node) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(node) && com.google.javascript.jscomp.NodeUtil.isEmptyBlock(node.getLastChild());
    }

    static boolean isVarArgsFunction(com.google.javascript.rhino.Node function) {
        com.google.common.base.Preconditions.checkArgument(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(function.getLastChild(), "arguments", com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isObjectCallMethod(com.google.javascript.rhino.Node callNode, java.lang.String methodName) {
        if (callNode.isCall()) {
            com.google.javascript.rhino.Node functionIndentifyingExpression = callNode.getFirstChild();
            if (com.google.javascript.jscomp.NodeUtil.isGet(functionIndentifyingExpression)) {
                com.google.javascript.rhino.Node last = functionIndentifyingExpression.getLastChild();
                if ((last != null) && last.isString()) {
                    java.lang.String propName = last.getString();
                    return propName.equals(methodName);
                }
            }
        }
        return false;
    }

    static boolean isFunctionObjectCall(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "call");
    }

    static boolean isFunctionObjectApply(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "apply");
    }

    static boolean isVarOrSimpleAssignLhs(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        return (parent.isAssign() && (parent.getFirstChild() == n)) || parent.isVar();
    }

    public static boolean isLValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument((n.isName() || n.isGetProp()) || n.isGetElem());
        com.google.javascript.rhino.Node parent = n.getParent();
        if (parent == null) {
            return false;
        }
        return (((((((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) || (com.google.javascript.jscomp.NodeUtil.isForIn(parent) && (parent.getFirstChild() == n))) || parent.isVar()) || (parent.isFunction() && (parent.getFirstChild() == n))) || parent.isDec()) || parent.isInc()) || parent.isParamList()) || parent.isCatch();
    }

    static boolean isObjectLitKey(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String getObjectLitKeyName(com.google.javascript.rhino.Node key) {
        switch (key.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return key.getString();
        }
        throw new java.lang.IllegalStateException("Unexpected node type: " + key);
    }

    static com.google.javascript.rhino.jstype.JSType getObjectLitKeyTypeFromValueType(com.google.javascript.rhino.Node key, com.google.javascript.rhino.jstype.JSType valueType) {
        if (valueType != null) {
            switch (key.getType()) {
                case com.google.javascript.rhino.Token.GETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        valueType = fntype.getReturnType();
                    } else {
                        return null;
                    }
                    break;
                case com.google.javascript.rhino.Token.SETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        com.google.javascript.rhino.Node param = fntype.getParametersNode().getFirstChild();
                        valueType = param.getJSType();
                    } else {
                        return null;
                    }
                    break;
            }
        }
        return valueType;
    }

    static boolean isGetOrSetKey(com.google.javascript.rhino.Node node) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String opToStr(int operator) {
        switch (operator) {
            case com.google.javascript.rhino.Token.BITOR :
                return "|";
            case com.google.javascript.rhino.Token.OR :
                return "||";
            case com.google.javascript.rhino.Token.BITXOR :
                return "^";
            case com.google.javascript.rhino.Token.AND :
                return "&&";
            case com.google.javascript.rhino.Token.BITAND :
                return "&";
            case com.google.javascript.rhino.Token.SHEQ :
                return "===";
            case com.google.javascript.rhino.Token.EQ :
                return "==";
            case com.google.javascript.rhino.Token.NOT :
                return "!";
            case com.google.javascript.rhino.Token.NE :
                return "!=";
            case com.google.javascript.rhino.Token.SHNE :
                return "!==";
            case com.google.javascript.rhino.Token.LSH :
                return "<<";
            case com.google.javascript.rhino.Token.IN :
                return "in";
            case com.google.javascript.rhino.Token.LE :
                return "<=";
            case com.google.javascript.rhino.Token.LT :
                return "<";
            case com.google.javascript.rhino.Token.URSH :
                return ">>>";
            case com.google.javascript.rhino.Token.RSH :
                return ">>";
            case com.google.javascript.rhino.Token.GE :
                return ">=";
            case com.google.javascript.rhino.Token.GT :
                return ">";
            case com.google.javascript.rhino.Token.MUL :
                return "*";
            case com.google.javascript.rhino.Token.DIV :
                return "/";
            case com.google.javascript.rhino.Token.MOD :
                return "%";
            case com.google.javascript.rhino.Token.BITNOT :
                return "~";
            case com.google.javascript.rhino.Token.ADD :
                return "+";
            case com.google.javascript.rhino.Token.SUB :
                return "-";
            case com.google.javascript.rhino.Token.POS :
                return "+";
            case com.google.javascript.rhino.Token.NEG :
                return "-";
            case com.google.javascript.rhino.Token.ASSIGN :
                return "=";
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return "|=";
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return "^=";
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return "&=";
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return "<<=";
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return ">>=";
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return ">>>=";
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return "+=";
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return "-=";
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return "*=";
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return "/=";
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return "%=";
            case com.google.javascript.rhino.Token.VOID :
                return "void";
            case com.google.javascript.rhino.Token.TYPEOF :
                return "typeof";
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return "instanceof";
            default :
                return null;
        }
    }

    static java.lang.String opToStrNoFail(int operator) {
        java.lang.String res = com.google.javascript.jscomp.NodeUtil.opToStr(operator);
        if (res == null) {
            throw new java.lang.Error((("Unknown op " + operator) + ": ") + com.google.javascript.rhino.Token.name(operator));
        }
        return res;
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type) {
        return com.google.javascript.jscomp.NodeUtil.containsType(node, type, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static void redeclareVarsInsideBranch(com.google.javascript.rhino.Node branch) {
        java.util.Collection<com.google.javascript.rhino.Node> vars = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(branch);
        if (vars.isEmpty()) {
            return;
        }
        com.google.javascript.rhino.Node parent = com.google.javascript.jscomp.NodeUtil.getAddingRoot(branch);
        for (com.google.javascript.rhino.Node nameNode : vars) {
            com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(com.google.javascript.rhino.IR.name(nameNode.getString()).srcref(nameNode)).srcref(nameNode);
            com.google.javascript.jscomp.NodeUtil.copyNameAnnotations(nameNode, var.getFirstChild());
            parent.addChildToFront(var);
        }
    }

    static void copyNameAnnotations(com.google.javascript.rhino.Node source, com.google.javascript.rhino.Node destination) {
        if (source.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME)) {
            destination.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
    }

    private static com.google.javascript.rhino.Node getAddingRoot(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node addingRoot = null;
        com.google.javascript.rhino.Node ancestor = n;
        while (null != (ancestor = ancestor.getParent())) {
            int type = ancestor.getType();
            if (type == com.google.javascript.rhino.Token.SCRIPT) {
                addingRoot = ancestor;
                break;
            } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
                addingRoot = ancestor.getLastChild();
                break;
            }
        } 
        com.google.common.base.Preconditions.checkState(addingRoot.isBlock() || addingRoot.isScript());
        com.google.common.base.Preconditions.checkState((addingRoot.getFirstChild() == null) || (!addingRoot.getFirstChild().isScript()));
        return addingRoot;
    }

    public static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        int endPos = name.indexOf('.');
        if (endPos == (-1)) {
            return com.google.javascript.jscomp.NodeUtil.newName(convention, name);
        }
        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newName(convention, name.substring(0, endPos));
        int startPos;
        do {
            startPos = endPos + 1;
            endPos = name.indexOf('.', startPos);
            java.lang.String part = (endPos == (-1)) ? name.substring(startPos) : name.substring(startPos, endPos);
            com.google.javascript.rhino.Node propNode = com.google.javascript.rhino.IR.string(part);
            if (convention.isConstantKey(part)) {
                propNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
            }
            node = com.google.javascript.rhino.IR.getprop(node, propNode);
        } while (endPos != (-1) );
        return node;
    }

    static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(convention, name);
        com.google.javascript.jscomp.NodeUtil.setDebugInformation(node, basisNode, originalName);
        return node;
    }

    static com.google.javascript.rhino.Node getRootOfQualifiedName(com.google.javascript.rhino.Node qName) {
        for (com.google.javascript.rhino.Node current = qName; true; current = current.getFirstChild()) {
            if (current.isName() || current.isThis()) {
                return current;
            }
            com.google.common.base.Preconditions.checkState(current.isGetProp());
        }
    }

    static void setDebugInformation(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        node.copyInformationFromForTree(basisNode);
        node.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
    }

    private static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.rhino.IR.name(name);
        if (convention.isConstant(name)) {
            nameNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
        return nameNode;
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node srcref) {
        return com.google.javascript.jscomp.NodeUtil.newName(convention, name).srcref(srcref);
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.NodeUtil.newName(convention, name, basisNode);
        nameNode.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
        return nameNode;
    }

    static boolean isLatin(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if (c > com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN) {
                return false;
            }
        }
        return true;
    }

    static boolean isValidSimpleName(java.lang.String name) {
        return (com.google.javascript.rhino.TokenStream.isJSIdentifier(name) && (!com.google.javascript.rhino.TokenStream.isKeyword(name))) && com.google.javascript.jscomp.NodeUtil.isLatin(name);
    }

    public static boolean isValidQualifiedName(java.lang.String name) {
        if (name.endsWith(".") || name.startsWith(".")) {
            return false;
        }
        java.lang.String[] parts = name.split("\\.");
        for (java.lang.String part : parts) {
            if (!com.google.javascript.jscomp.NodeUtil.isValidSimpleName(part)) {
                return false;
            }
        }
        return true;
    }

    static boolean isValidPropertyName(java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isValidSimpleName(name);
    }

    private static class VarCollector implements com.google.javascript.jscomp.NodeUtil.Visitor {
        final java.util.Map<java.lang.String, com.google.javascript.rhino.Node> vars = com.google.common.collect.Maps.newLinkedHashMap();

        @java.lang.Override
        public void visit(com.google.javascript.rhino.Node n) {
            if (n.isName()) {
                com.google.javascript.rhino.Node parent = n.getParent();
                if ((parent != null) && parent.isVar()) {
                    java.lang.String name = n.getString();
                    if (!vars.containsKey(name)) {
                        vars.put(name, n);
                    }
                }
            }
        }
    }

    static java.util.Collection<com.google.javascript.rhino.Node> getVarsDeclaredInBranch(com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.NodeUtil.VarCollector collector = new com.google.javascript.jscomp.NodeUtil.VarCollector();
        com.google.javascript.jscomp.NodeUtil.visitPreOrder(root, collector, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        return collector.vars.values();
    }

    static boolean isPrototypePropertyDeclaration(com.google.javascript.rhino.Node n) {
        if (!com.google.javascript.jscomp.NodeUtil.isExprAssign(n)) {
            return false;
        }
        return com.google.javascript.jscomp.NodeUtil.isPrototypeProperty(n.getFirstChild().getFirstChild());
    }

    static boolean isPrototypeProperty(com.google.javascript.rhino.Node n) {
        java.lang.String lhsString = n.getQualifiedName();
        if (lhsString == null) {
            return false;
        }
        int prototypeIdx = lhsString.indexOf(".prototype.");
        return prototypeIdx != (-1);
    }

    static com.google.javascript.rhino.Node getPrototypeClassName(com.google.javascript.rhino.Node qName) {
        com.google.javascript.rhino.Node cur = qName;
        while (cur.isGetProp()) {
            if (cur.getLastChild().getString().equals("prototype")) {
                return cur.getFirstChild();
            } else {
                cur = cur.getFirstChild();
            }
        } 
        return null;
    }

    static java.lang.String getPrototypePropertyName(com.google.javascript.rhino.Node qName) {
        java.lang.String qNameStr = qName.getQualifiedName();
        int prototypeIdx = qNameStr.lastIndexOf(".prototype.");
        int memberIndex = (prototypeIdx + ".prototype".length()) + 1;
        return qNameStr.substring(memberIndex);
    }

    static com.google.javascript.rhino.Node newUndefinedNode(com.google.javascript.rhino.Node srcReferenceNode) {
        com.google.javascript.rhino.Node node = com.google.javascript.rhino.IR.voidNode(com.google.javascript.rhino.IR.number(0));
        if (srcReferenceNode != null) {
            node.copyInformationFromForTree(srcReferenceNode);
        }
        return node;
    }

    static com.google.javascript.rhino.Node newVarNode(java.lang.String name, com.google.javascript.rhino.Node value) {
        com.google.javascript.rhino.Node nodeName = com.google.javascript.rhino.IR.name(name);
        if (value != null) {
            com.google.common.base.Preconditions.checkState(value.getNext() == null);
            nodeName.addChildToBack(value);
            nodeName.srcref(value);
        }
        com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(nodeName).srcref(nodeName);
        return var;
    }

    private static class MatchNameNode implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final java.lang.String name;

        MatchNameNode(java.lang.String name) {
            this.name = name;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.isName() && n.getString().equals(name);
        }
    }

    static class MatchNodeType implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final int type;

        MatchNodeType(int type) {
            this.type = type;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.getType() == type;
        }
    }

    static class MatchDeclaration implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) || n.isVar();
        }
    }

    private static class MatchNotFunction implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return !n.isFunction();
        }
    }

    static final com.google.common.base.Predicate<com.google.javascript.rhino.Node> MATCH_NOT_FUNCTION = new com.google.javascript.jscomp.NodeUtil.MatchNotFunction();

    static class MatchShallowStatement implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            return n.isBlock() || ((!n.isFunction()) && (((parent == null) || com.google.javascript.jscomp.NodeUtil.isControlStructure(parent)) || com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)));
        }
    }

    static int getNodeTypeReferenceCount(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(node, name, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static int getNameReferenceCount(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static boolean has(com.google.javascript.rhino.Node node, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (pred.apply(node)) {
            return true;
        }
        if (!traverseChildrenPred.apply(node)) {
            return false;
        }
        for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.has(c, pred, traverseChildrenPred)) {
                return true;
            }
        }
        return false;
    }

    static int getCount(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        int total = 0;
        if (pred.apply(n)) {
            total++;
        }
        if (traverseChildrenPred.apply(n)) {
            for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                total += com.google.javascript.jscomp.NodeUtil.getCount(c, pred, traverseChildrenPred);
            }
        }
        return total;
    }

    static interface Visitor {
        public abstract void visit(com.google.javascript.rhino.Node node);
    }

    static void visitPreOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor visitor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        visitor.visit(node);
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPreOrder(c, visitor, traverseChildrenPred);
            }
        }
    }

    static void visitPostOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor visitor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPostOrder(c, visitor, traverseChildrenPred);
            }
        }
        visitor.visit(node);
    }

    static boolean hasFinally(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getChildCount() == 3;
    }

    static com.google.javascript.rhino.Node getCatchBlock(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getFirstChild().getNext();
    }

    static boolean hasCatchHandler(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isBlock());
        return n.hasChildren() && n.getFirstChild().isCatch();
    }

    public static com.google.javascript.rhino.Node getFunctionParameters(com.google.javascript.rhino.Node fnNode) {
        com.google.common.base.Preconditions.checkArgument(fnNode.isFunction());
        return fnNode.getFirstChild().getNext();
    }

    static boolean isConstantName(com.google.javascript.rhino.Node node) {
        return node.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
    }

    static boolean isConstantByConvention(com.google.javascript.jscomp.CodingConvention convention, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        java.lang.String name = node.getString();
        if (parent.isGetProp() && (node == parent.getLastChild())) {
            return convention.isConstantKey(name);
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(node, parent)) {
            return convention.isConstantKey(name);
        } else {
            return convention.isConstant(name);
        }
    }

    public static com.google.javascript.rhino.JSDocInfo getFunctionJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isFunction());
        com.google.javascript.rhino.JSDocInfo fnInfo = n.getJSDocInfo();
        if ((fnInfo == null) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n)) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent.isAssign()) {
                fnInfo = parent.getJSDocInfo();
            } else if (parent.isName()) {
                fnInfo = parent.getParent().getJSDocInfo();
            }
        }
        return fnInfo;
    }

    public static java.lang.String getSourceName(com.google.javascript.rhino.Node n) {
        java.lang.String sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getSourceFileName();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.StaticSourceFile sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getStaticSourceFile();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.InputId getInputId(com.google.javascript.rhino.Node n) {
        while ((n != null) && (!n.isScript())) {
            n = n.getParent();
        } 
        return (n != null) && n.isScript() ? n.getInputId() : null;
    }

    static com.google.javascript.rhino.Node newCallNode(com.google.javascript.rhino.Node callTarget, com.google.javascript.rhino.Node... parameters) {
        boolean isFreeCall = !com.google.javascript.jscomp.NodeUtil.isGet(callTarget);
        com.google.javascript.rhino.Node call = com.google.javascript.rhino.IR.call(callTarget);
        call.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, isFreeCall);
        for (com.google.javascript.rhino.Node parameter : parameters) {
            call.addChildToBack(parameter);
        }
        return call;
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value) {
        return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysFalse());
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value, com.google.common.base.Predicate<com.google.javascript.rhino.Node> locals) {
        switch (value.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals));
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                if (value.getBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP)) {
                    return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals);
                } else {
                    return true;
                }
            case com.google.javascript.rhino.Token.THIS :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.NAME :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.CALL :
                return (com.google.javascript.jscomp.NodeUtil.callHasLocalResult(value) || com.google.javascript.jscomp.NodeUtil.isToStringMethodCall(value)) || locals.apply(value);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.newHasLocalResult(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return true;
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.IN :
                return true;
            default :
                if ((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(value) || com.google.javascript.jscomp.NodeUtil.isSimpleOperator(value)) || com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                    return true;
                }
                throw new java.lang.IllegalStateException((("Unexpected expression node" + value) + "\n parent:") + value.getParent());
        }
    }

    private static com.google.javascript.rhino.Node getNthSibling(com.google.javascript.rhino.Node first, int index) {
        com.google.javascript.rhino.Node sibling = first;
        while ((index != 0) && (sibling != null)) {
            sibling = sibling.getNext();
            index--;
        } 
        return sibling;
    }

    static com.google.javascript.rhino.Node getArgumentForFunction(com.google.javascript.rhino.Node function, int index) {
        com.google.common.base.Preconditions.checkState(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(function.getFirstChild().getNext().getFirstChild(), index);
    }

    static com.google.javascript.rhino.Node getArgumentForCallOrNew(com.google.javascript.rhino.Node call, int index) {
        com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isCallOrNew(call));
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(call.getFirstChild().getNext(), index);
    }

    private static boolean isToStringMethodCall(com.google.javascript.rhino.Node call) {
        com.google.javascript.rhino.Node getNode = call.getFirstChild();
        if (com.google.javascript.jscomp.NodeUtil.isGet(getNode)) {
            com.google.javascript.rhino.Node propNode = getNode.getLastChild();
            return propNode.isString() && "toString".equals(propNode.getString());
        }
        return false;
    }

    static com.google.javascript.rhino.JSDocInfo getBestJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info == null) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent == null) {
                return null;
            }
            if (parent.isName()) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            } else if (parent.isAssign()) {
                return parent.getJSDocInfo();
            } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
                return parent.getJSDocInfo();
            } else if (parent.isFunction()) {
                return parent.getJSDocInfo();
            } else if (parent.isVar() && parent.hasOneChild()) {
                return parent.getJSDocInfo();
            } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            }
        }
        return info;
    }

    static com.google.javascript.rhino.Node getBestLValue(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        boolean isFunctionDeclaration = com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n);
        if (isFunctionDeclaration) {
            return n.getFirstChild();
        } else if (parent.isName()) {
            return parent;
        } else if (parent.isAssign()) {
            return parent.getFirstChild();
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
            return parent;
        } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(parent);
        }
        return null;
    }

    static com.google.javascript.rhino.Node getRValueOfLValue(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return n.getNext();
            case com.google.javascript.rhino.Token.VAR :
                return n.getFirstChild();
            case com.google.javascript.rhino.Token.FUNCTION :
                return parent;
        }
        return null;
    }

    static com.google.javascript.rhino.Node getBestLValueOwner(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
        } else if (com.google.javascript.jscomp.NodeUtil.isGet(lValue)) {
            return lValue.getFirstChild();
        }
        return null;
    }

    static java.lang.String getBestLValueName(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {
            com.google.javascript.rhino.Node owner = com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
            if (owner != null) {
                java.lang.String ownerName = com.google.javascript.jscomp.NodeUtil.getBestLValueName(owner);
                if (ownerName != null) {
                    return (ownerName + ".") + com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(lValue);
                }
            }
            return null;
        }
        return lValue.getQualifiedName();
    }

    static boolean isExpressionResultUsed(com.google.javascript.rhino.Node expr) {
        com.google.javascript.rhino.Node parent = expr.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                return false;
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return expr == parent.getFirstChild() ? true : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.COMMA :
                com.google.javascript.rhino.Node gramps = parent.getParent();
                if (gramps.isCall() && (parent == gramps.getFirstChild())) {
                    if ((((expr == parent.getFirstChild()) && (parent.getChildCount() == 2)) && expr.getNext().isName()) && "eval".equals(expr.getNext().getString())) {
                        return true;
                    }
                }
                return expr == parent.getFirstChild() ? false : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.FOR :
                if (!com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                    return parent.getChildAtIndex(1) == expr;
                }
                break;
        }
        return true;
    }

    static boolean isExecutedExactlyOnce(com.google.javascript.rhino.Node n) {
        inspect : do {
            com.google.javascript.rhino.Node parent = n.getParent();
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.HOOK :
                case com.google.javascript.rhino.Token.AND :
                case com.google.javascript.rhino.Token.OR :
                    if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.FOR :
                    if (com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                        if (parent.getChildAtIndex(1) != n) {
                            return false;
                        }
                    } else if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.DO :
                    return false;
                case com.google.javascript.rhino.Token.TRY :
                    if ((!com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) || (parent.getLastChild() != n)) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.DEFAULT_CASE :
                    return false;
                case com.google.javascript.rhino.Token.SCRIPT :
                case com.google.javascript.rhino.Token.FUNCTION :
                    break inspect;
            }
        } while ((n = n.getParent()) != null );
        return true;
    }

    static com.google.javascript.rhino.Node booleanNode(boolean value) {
        return value ? com.google.javascript.rhino.IR.trueNode() : com.google.javascript.rhino.IR.falseNode();
    }

    static com.google.javascript.rhino.Node numberNode(double value, com.google.javascript.rhino.Node srcref) {
        com.google.javascript.rhino.Node result;
        if (java.lang.Double.isNaN(value)) {
            result = com.google.javascript.rhino.IR.name("NaN");
        } else if (value == java.lang.Double.POSITIVE_INFINITY) {
            result = com.google.javascript.rhino.IR.name("Infinity");
        } else if (value == java.lang.Double.NEGATIVE_INFINITY) {
            result = com.google.javascript.rhino.IR.neg(com.google.javascript.rhino.IR.name("Infinity"));
        } else {
            result = com.google.javascript.rhino.IR.number(value);
        }
        if (srcref != null) {
            result.srcrefTree(srcref);
        }
        return result;
    }
}
[255633] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659901102511
GPR[SSUN]-1659901102511
1187751237
GPR[SPVATF]-1659901102790
GPR[EPVATF]-1659901103827
GPR[SPS]-1659901103827
[258406] INFO SMTNopolSynthesizer - Not enough specifications: 1. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1416.
GPR[EPS]-1659901105285
GPR[ESUN]-1659901105285
GPR[SSUN]-1659901105285
1187751237
GPR[ESUN]-1659901105584
GPR[SSUN]-1659901105584
1187751237
GPR[ESUN]-1659901105856
GPR[SSUN]-1659901105856
944853999
GPR[ESUN]-1659901106101
GPR[SSUN]-1659901106101
2433571
GPR[ESUN]-1659901106333
GPR[SSUN]-1659901106333
2433571
GPR[ESUN]-1659901106568
GPR[SSUN]-1659901106568
2433571
GPR[SPVATF]-1659901106803
GPR[EPVATF]-1659901107867
GPR[SPS]-1659901107867
[261608] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1787.
GPR[EPS]-1659901108486
GPR[ESUN]-1659901108486
GPR[SSUN]-1659901108486
2433571
GPR[SPVATF]-1659901108739
GPR[EPVATF]-1659901109857
GPR[SPS]-1659901109857
[263611] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1786.
GPR[EPS]-1659901110489
GPR[ESUN]-1659901110490
GPR[SSUN]-1659901110490
-132053243
GPR[SPVATF]-1659901110685
GPR[EPVATF]-1659901110758
[263880] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901110758
GPR[SSUN]-1659901110758
-132053243
GPR[SPVATF]-1659901110954
GPR[EPVATF]-1659901111024
[264146] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901111024
GPR[SSUN]-1659901111024
-132053243
GPR[SPVATF]-1659901111229
GPR[EPVATF]-1659901111298
[264420] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901111298
GPR[SSUN]-1659901111298
GPR[ESUN]-1659901111299
GPR[SSUN]-1659901111299
GPR[ESUN]-1659901111299
GPR[SSUN]-1659901111299
GPR[ESUN]-1659901111299
GPR[SSUN]-1659901111299
GPR[ESUN]-1659901111299
GPR[SSUN]-1659901111299
GPR[ESUN]-1659901111299
GPR[SSUN]-1659901111299
GPR[ESUN]-1659901111299
GPR[SSUN]-1659901111299
GPR[ESUN]-1659901111299
GPR[SSUN]-1659901111299
GPR[ESUN]-1659901111299
GPR[SSUN]-1659901111299
1187751237
GPR[ESUN]-1659901111576
GPR[SSUN]-1659901111576
1187751237
GPR[ESUN]-1659901111852
GPR[SSUN]-1659901111852
1187751237
GPR[ESUN]-1659901112126
GPR[SSUN]-1659901112126
-132053243
GPR[SPVATF]-1659901112316
GPR[EPVATF]-1659901112386
[265509] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659901112387
GPR[EPVATF]-1659901112454
[265576] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901112454
GPR[SSUN]-1659901112454
-132053243
GPR[ESUN]-1659901112645
GPR[SSUN]-1659901112645
80988634
GPR[ESUN]-1659901112819
GPR[SSUN]-1659901112819
1187751237
GPR[ESUN]-1659901113095
GPR[SSUN]-1659901113095
1187751237
GPR[ESUN]-1659901113370
GPR[SSUN]-1659901113370
-132053243
GPR[ESUN]-1659901113565
GPR[SSUN]-1659901113565
-132053243
GPR[SPVATF]-1659901113763
GPR[EPVATF]-1659901113833
[266955] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659901113833
GPR[EPVATF]-1659901113902
[267024] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901113902
GPR[SSUN]-1659901113902
-132053243
GPR[ESUN]-1659901114097
GPR[SSUN]-1659901114097
-132053243
GPR[ESUN]-1659901114286
GPR[SSUN]-1659901114286
-132053243
GPR[ESUN]-1659901114473
GPR[SSUN]-1659901114473
-132053243
GPR[SPVATF]-1659901114660
GPR[EPVATF]-1659901114731
[267853] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659901114731
GPR[EPVATF]-1659901114798
[267920] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901114798
GPR[SSUN]-1659901114798
-132053243
GPR[SPVATF]-1659901115028
GPR[EPVATF]-1659901115098
[268220] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901115098
GPR[SSUN]-1659901115098
2433571
GPR[ESUN]-1659901115334
GPR[SSUN]-1659901115334
1187751237
GPR[ESUN]-1659901115607
GPR[SSUN]-1659901115607
80988634
GPR[ESUN]-1659901115780
GPR[SSUN]-1659901115780
944853999
GPR[SPVATF]-1659901116024
GPR[EPVATF]-1659901117128
GPR[SPS]-1659901117128
[270795] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:241.
GPR[EPS]-1659901117673
GPR[ESUN]-1659901117673
GPR[SSUN]-1659901117673
944853999
GPR[ESUN]-1659901117926
GPR[SSUN]-1659901117926
944853999
GPR[SPVATF]-1659901118174
GPR[EPVATF]-1659901119338
GPR[SPS]-1659901119338
[273010] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:236.
GPR[EPS]-1659901119888
GPR[ESUN]-1659901119888
GPR[SSUN]-1659901119888
944853999
GPR[SPVATF]-1659901120136
GPR[EPVATF]-1659901121289
GPR[SPS]-1659901121289
[274784] ERROR ConstraintModelBuilder - Unable to compile the change: 
class PeepholeFoldConstants extends com.google.javascript.jscomp.AbstractPeepholeOptimization {
    static final com.google.javascript.jscomp.DiagnosticType INVALID_GETELEM_INDEX_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_INVALID_GETELEM_INDEX_ERROR", "Array index not integer: {0}");

    static final com.google.javascript.jscomp.DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_INDEX_OUT_OF_BOUNDS_ERROR", "Array index out of bounds: {0}");

    static final com.google.javascript.jscomp.DiagnosticType NEGATING_A_NON_NUMBER_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NEGATING_A_NON_NUMBER_ERROR", "Can't negate non-numeric value: {0}");

    static final com.google.javascript.jscomp.DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE = com.google.javascript.jscomp.DiagnosticType.error("JSC_BITWISE_OPERAND_OUT_OF_RANGE", "Operand out of range, bitwise operation will lose information: {0}");

    static final com.google.javascript.jscomp.DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = com.google.javascript.jscomp.DiagnosticType.error("JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS", "Shift amount out of bounds: {0}");

    static final com.google.javascript.jscomp.DiagnosticType FRACTIONAL_BITWISE_OPERAND = com.google.javascript.jscomp.DiagnosticType.error("JSC_FRACTIONAL_BITWISE_OPERAND", "Fractional bitwise operand: {0}");

    private static final double MAX_FOLD_NUMBER = java.lang.Math.pow(2, 53);

    private final boolean late;

    PeepholeFoldConstants(boolean late) {
        this.late = late;
    }

    @java.lang.Override
    com.google.javascript.rhino.Node optimizeSubtree(com.google.javascript.rhino.Node subtree) {
        switch (subtree.getType()) {
            case com.google.javascript.rhino.Token.NEW :
                return tryFoldCtorCall(subtree);
            case com.google.javascript.rhino.Token.TYPEOF :
                return tryFoldTypeof(subtree);
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.BITNOT :
                tryReduceOperandsForOp(subtree);
                return tryFoldUnaryOperator(subtree);
            case com.google.javascript.rhino.Token.VOID :
                return tryReduceVoid(subtree);
            default :
                tryReduceOperandsForOp(subtree);
                return tryFoldBinaryOperator(subtree);
        }
    }

    private com.google.javascript.rhino.Node tryFoldBinaryOperator(com.google.javascript.rhino.Node subtree) {
        com.google.javascript.rhino.Node left = subtree.getFirstChild();
        if (left == null) {
            return subtree;
        }
        com.google.javascript.rhino.Node right = left.getNext();
        if (right == null) {
            return subtree;
        }
        switch (subtree.getType()) {
            case com.google.javascript.rhino.Token.GETPROP :
                return tryFoldGetProp(subtree, left, right);
            case com.google.javascript.rhino.Token.GETELEM :
                return tryFoldGetElem(subtree, left, right);
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return tryFoldInstanceof(subtree, left, right);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return tryFoldAndOr(subtree, left, right);
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
                return tryFoldShift(subtree, left, right);
            case com.google.javascript.rhino.Token.ASSIGN :
                return tryFoldAssign(subtree, left, right);
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return tryUnfoldAssignOp(subtree, left, right);
            case com.google.javascript.rhino.Token.ADD :
                return tryFoldAdd(subtree, left, right);
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
                return tryFoldArithmeticOp(subtree, left, right);
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
                com.google.javascript.rhino.Node result = tryFoldArithmeticOp(subtree, left, right);
                if (result != subtree) {
                    return result;
                }
                return tryFoldLeftChildOp(subtree, left, right);
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return tryFoldComparison(subtree, left, right);
            default :
                return subtree;
        }
    }

    private com.google.javascript.rhino.Node tryReduceVoid(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node child = n.getFirstChild();
        if ((!child.isNumber()) || (child.getDouble() != 0.0)) {
            if (!mayHaveSideEffects(n)) {
                n.replaceChild(child, com.google.javascript.rhino.IR.number(0));
                reportCodeChange();
            }
        }
        return n;
    }

    private void tryReduceOperandsForOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                com.google.javascript.rhino.Node left = n.getFirstChild();
                com.google.javascript.rhino.Node right = n.getLastChild();
                if ((!com.google.javascript.jscomp.NodeUtil.mayBeString(left)) && (!com.google.javascript.jscomp.NodeUtil.mayBeString(right))) {
                    tryConvertOperandsToNumber(n);
                }
                break;
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                tryConvertToNumber(n.getLastChild());
                break;
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                tryConvertOperandsToNumber(n);
                break;
        }
    }

    private void tryConvertOperandsToNumber(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node next;
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = next) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(88).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR",com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR",com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS",com.google.javascript.jscomp.PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND",com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR",com.google.javascript.jscomp.PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE",com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.this.late",com.google.javascript.jscomp.PeepholeFoldConstants.this.late);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.MAX_FOLD_NUMBER",com.google.javascript.jscomp.PeepholeFoldConstants.MAX_FOLD_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectionEnds();
            }
            if (runtimeAngelicValue)
                next = c.getNext();

            tryConvertToNumber(c);
        }
    }

    private void tryConvertToNumber(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.NUMBER :
                return;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.COMMA :
                tryConvertToNumber(n.getLastChild());
                return;
            case com.google.javascript.rhino.Token.HOOK :
                tryConvertToNumber(n.getChildAtIndex(1));
                tryConvertToNumber(n.getLastChild());
                return;
            case com.google.javascript.rhino.Token.NAME :
                if (!com.google.javascript.jscomp.NodeUtil.isUndefined(n)) {
                    return;
                }
                break;
        }
        java.lang.Double result = com.google.javascript.jscomp.NodeUtil.getNumberValue(n);
        if (result == null) {
            return;
        }
        double value = result;
        com.google.javascript.rhino.Node replacement = com.google.javascript.jscomp.NodeUtil.numberNode(value, n);
        if (replacement.isEquivalentTo(n)) {
            return;
        }
        n.getParent().replaceChild(n, replacement);
        reportCodeChange();
    }

    private com.google.javascript.rhino.Node tryFoldTypeof(com.google.javascript.rhino.Node originalTypeofNode) {
        com.google.common.base.Preconditions.checkArgument(originalTypeofNode.isTypeOf());
        com.google.javascript.rhino.Node argumentNode = originalTypeofNode.getFirstChild();
        if ((argumentNode == null) || (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(argumentNode, true))) {
            return originalTypeofNode;
        }
        java.lang.String typeNameString = null;
        switch (argumentNode.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                typeNameString = "function";
                break;
            case com.google.javascript.rhino.Token.STRING :
                typeNameString = "string";
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                typeNameString = "number";
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                typeNameString = "boolean";
                break;
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.ARRAYLIT :
                typeNameString = "object";
                break;
            case com.google.javascript.rhino.Token.VOID :
                typeNameString = "undefined";
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ("undefined".equals(argumentNode.getString())) {
                    typeNameString = "undefined";
                }
                break;
        }
        if (typeNameString != null) {
            com.google.javascript.rhino.Node newNode = com.google.javascript.rhino.IR.string(typeNameString);
            originalTypeofNode.getParent().replaceChild(originalTypeofNode, newNode);
            reportCodeChange();
            return newNode;
        }
        return originalTypeofNode;
    }

    private com.google.javascript.rhino.Node tryFoldUnaryOperator(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.hasOneChild());
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node parent = n.getParent();
        if (left == null) {
            return n;
        }
        com.google.javascript.rhino.jstype.TernaryValue leftVal = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(left);
        if (leftVal == com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
            return n;
        }
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.NOT :
                if (late && left.isNumber()) {
                    double numValue = left.getDouble();
                    if ((numValue == 0) || (numValue == 1)) {
                        return n;
                    }
                }
                com.google.javascript.rhino.Node replacementNode = com.google.javascript.jscomp.NodeUtil.booleanNode(!leftVal.toBoolean(true));
                parent.replaceChild(n, replacementNode);
                reportCodeChange();
                return replacementNode;
            case com.google.javascript.rhino.Token.POS :
                if (com.google.javascript.jscomp.NodeUtil.isNumericResult(left)) {
                    parent.replaceChild(n, left.detachFromParent());
                    reportCodeChange();
                    return left;
                }
                return n;
            case com.google.javascript.rhino.Token.NEG :
                try {
                    if (left.isName()) {
                        if (left.getString().equals("Infinity")) {
                            return n;
                        } else if (left.getString().equals("NaN")) {
                            n.removeChild(left);
                            parent.replaceChild(n, left);
                            reportCodeChange();
                            return left;
                        }
                    }
                    double negNum = -left.getDouble();
                    com.google.javascript.rhino.Node negNumNode = com.google.javascript.rhino.IR.number(negNum);
                    parent.replaceChild(n, negNumNode);
                    reportCodeChange();
                    return negNumNode;
                } catch (java.lang.UnsupportedOperationException ex) {
                    error(com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR, left);
                    return n;
                }
            case com.google.javascript.rhino.Token.BITNOT :
                try {
                    double val = left.getDouble();
                    if ((val >= java.lang.Integer.MIN_VALUE) && (val <= java.lang.Integer.MAX_VALUE)) {
                        int intVal = ((int) (val));
                        if (intVal == val) {
                            com.google.javascript.rhino.Node notIntValNode = com.google.javascript.rhino.IR.number(~intVal);
                            parent.replaceChild(n, notIntValNode);
                            reportCodeChange();
                            return notIntValNode;
                        } else {
                            error(com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND, left);
                            return n;
                        }
                    } else {
                        error(com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE, left);
                        return n;
                    }
                } catch (java.lang.UnsupportedOperationException ex) {
                    error(com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR, left);
                    return n;
                }
            default :
                return n;
        }
    }

    private com.google.javascript.rhino.Node tryFoldInstanceof(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isInstanceOf());
        if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, true) && (!mayHaveSideEffects(right))) {
            com.google.javascript.rhino.Node replacementNode = null;
            if (com.google.javascript.jscomp.NodeUtil.isImmutableValue(left)) {
                replacementNode = com.google.javascript.rhino.IR.falseNode();
            } else if (right.isName() && "Object".equals(right.getString())) {
                replacementNode = com.google.javascript.rhino.IR.trueNode();
            }
            if (replacementNode != null) {
                n.getParent().replaceChild(n, replacementNode);
                reportCodeChange();
                return replacementNode;
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldAssign(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isAssign());
        if (!late) {
            return n;
        }
        if ((!right.hasChildren()) || (right.getFirstChild().getNext() != right.getLastChild())) {
            return n;
        }
        if (mayHaveSideEffects(left)) {
            return n;
        }
        com.google.javascript.rhino.Node newRight;
        if (areNodesEqualForInlining(left, right.getFirstChild())) {
            newRight = right.getLastChild();
        } else if (com.google.javascript.jscomp.NodeUtil.isCommutative(right.getType()) && areNodesEqualForInlining(left, right.getLastChild())) {
            newRight = right.getFirstChild();
        } else {
            return n;
        }
        int newType = -1;
        switch (right.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                newType = com.google.javascript.rhino.Token.ASSIGN_ADD;
                break;
            case com.google.javascript.rhino.Token.BITAND :
                newType = com.google.javascript.rhino.Token.ASSIGN_BITAND;
                break;
            case com.google.javascript.rhino.Token.BITOR :
                newType = com.google.javascript.rhino.Token.ASSIGN_BITOR;
                break;
            case com.google.javascript.rhino.Token.BITXOR :
                newType = com.google.javascript.rhino.Token.ASSIGN_BITXOR;
                break;
            case com.google.javascript.rhino.Token.DIV :
                newType = com.google.javascript.rhino.Token.ASSIGN_DIV;
                break;
            case com.google.javascript.rhino.Token.LSH :
                newType = com.google.javascript.rhino.Token.ASSIGN_LSH;
                break;
            case com.google.javascript.rhino.Token.MOD :
                newType = com.google.javascript.rhino.Token.ASSIGN_MOD;
                break;
            case com.google.javascript.rhino.Token.MUL :
                newType = com.google.javascript.rhino.Token.ASSIGN_MUL;
                break;
            case com.google.javascript.rhino.Token.RSH :
                newType = com.google.javascript.rhino.Token.ASSIGN_RSH;
                break;
            case com.google.javascript.rhino.Token.SUB :
                newType = com.google.javascript.rhino.Token.ASSIGN_SUB;
                break;
            case com.google.javascript.rhino.Token.URSH :
                newType = com.google.javascript.rhino.Token.ASSIGN_URSH;
                break;
            default :
                return n;
        }
        com.google.javascript.rhino.Node newNode = new com.google.javascript.rhino.Node(newType, left.detachFromParent(), newRight.detachFromParent());
        n.getParent().replaceChild(n, newNode);
        reportCodeChange();
        return newNode;
    }

    private com.google.javascript.rhino.Node tryUnfoldAssignOp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (late) {
            return n;
        }
        if ((!n.hasChildren()) || (n.getFirstChild().getNext() != n.getLastChild())) {
            return n;
        }
        if (mayHaveSideEffects(left)) {
            return n;
        }
        int op = com.google.javascript.jscomp.NodeUtil.getOpFromAssignmentOp(n);
        com.google.javascript.rhino.Node replacement = com.google.javascript.rhino.IR.assign(left.detachFromParent(), new com.google.javascript.rhino.Node(op, left.cloneTree(), right.detachFromParent()).srcref(n));
        n.getParent().replaceChild(n, replacement);
        reportCodeChange();
        return replacement;
    }

    private com.google.javascript.rhino.Node tryFoldAndOr(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.javascript.rhino.Node parent = n.getParent();
        com.google.javascript.rhino.Node result = null;
        int type = n.getType();
        com.google.javascript.rhino.jstype.TernaryValue leftVal = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(left);
        if (leftVal != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
            boolean lval = leftVal.toBoolean(true);
            if ((lval && (type == com.google.javascript.rhino.Token.OR)) || ((!lval) && (type == com.google.javascript.rhino.Token.AND))) {
                result = left;
            } else if (!mayHaveSideEffects(left)) {
                result = right;
            }
        }
        if (result != null) {
            n.removeChild(result);
            parent.replaceChild(n, result);
            reportCodeChange();
            return result;
        } else {
            return n;
        }
    }

    private com.google.javascript.rhino.Node tryFoldChildAddString(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(right, false) && left.isAdd()) {
            com.google.javascript.rhino.Node ll = left.getFirstChild();
            com.google.javascript.rhino.Node lr = ll.getNext();
            if (lr.isString()) {
                java.lang.String leftString = com.google.javascript.jscomp.NodeUtil.getStringValue(lr);
                java.lang.String rightString = com.google.javascript.jscomp.NodeUtil.getStringValue(right);
                if ((leftString != null) && (rightString != null)) {
                    left.removeChild(ll);
                    java.lang.String result = leftString + rightString;
                    n.replaceChild(left, ll);
                    n.replaceChild(right, com.google.javascript.rhino.IR.string(result));
                    reportCodeChange();
                    return n;
                }
            }
        }
        if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, false) && right.isAdd()) {
            com.google.javascript.rhino.Node rl = right.getFirstChild();
            com.google.javascript.rhino.Node rr = right.getLastChild();
            if (rl.isString()) {
                java.lang.String leftString = com.google.javascript.jscomp.NodeUtil.getStringValue(left);
                java.lang.String rightString = com.google.javascript.jscomp.NodeUtil.getStringValue(rl);
                if ((leftString != null) && (rightString != null)) {
                    right.removeChild(rr);
                    java.lang.String result = leftString + rightString;
                    n.replaceChild(right, rr);
                    n.replaceChild(left, com.google.javascript.rhino.IR.string(result));
                    reportCodeChange();
                    return n;
                }
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldAddConstantString(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (left.isString() || right.isString()) {
            java.lang.String leftString = com.google.javascript.jscomp.NodeUtil.getStringValue(left);
            java.lang.String rightString = com.google.javascript.jscomp.NodeUtil.getStringValue(right);
            if ((leftString != null) && (rightString != null)) {
                com.google.javascript.rhino.Node newStringNode = com.google.javascript.rhino.IR.string(leftString + rightString);
                n.getParent().replaceChild(n, newStringNode);
                reportCodeChange();
                return newStringNode;
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldArithmeticOp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.javascript.rhino.Node result = performArithmeticOp(n.getType(), left, right);
        if (result != null) {
            result.copyInformationFromForTree(n);
            n.getParent().replaceChild(n, result);
            reportCodeChange();
            return result;
        }
        return n;
    }

    private com.google.javascript.rhino.Node performArithmeticOp(int opType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if ((opType == com.google.javascript.rhino.Token.ADD) && (com.google.javascript.jscomp.NodeUtil.mayBeString(left, false) || com.google.javascript.jscomp.NodeUtil.mayBeString(right, false))) {
            return null;
        }
        double result;
        java.lang.Double lValObj = com.google.javascript.jscomp.NodeUtil.getNumberValue(left);
        if (lValObj == null) {
            return null;
        }
        java.lang.Double rValObj = com.google.javascript.jscomp.NodeUtil.getNumberValue(right);
        if (rValObj == null) {
            return null;
        }
        double lval = lValObj;
        double rval = rValObj;
        switch (opType) {
            case com.google.javascript.rhino.Token.BITAND :
                result = com.google.javascript.rhino.head.ScriptRuntime.toInt32(lval) & com.google.javascript.rhino.head.ScriptRuntime.toInt32(rval);
                break;
            case com.google.javascript.rhino.Token.BITOR :
                result = com.google.javascript.rhino.head.ScriptRuntime.toInt32(lval) | com.google.javascript.rhino.head.ScriptRuntime.toInt32(rval);
                break;
            case com.google.javascript.rhino.Token.BITXOR :
                result = com.google.javascript.rhino.head.ScriptRuntime.toInt32(lval) ^ com.google.javascript.rhino.head.ScriptRuntime.toInt32(rval);
                break;
            case com.google.javascript.rhino.Token.ADD :
                result = lval + rval;
                break;
            case com.google.javascript.rhino.Token.SUB :
                result = lval - rval;
                break;
            case com.google.javascript.rhino.Token.MUL :
                result = lval * rval;
                break;
            case com.google.javascript.rhino.Token.MOD :
                if (rval == 0) {
                    return null;
                }
                result = lval % rval;
                break;
            case com.google.javascript.rhino.Token.DIV :
                if (rval == 0) {
                    return null;
                }
                result = lval / rval;
                break;
            default :
                throw new java.lang.Error("Unexpected arithmetic operator");
        }
        if (((((java.lang.String.valueOf(result).length() <= ((java.lang.String.valueOf(lval).length() + java.lang.String.valueOf(rval).length()) + 1)) && (java.lang.Math.abs(result) <= com.google.javascript.jscomp.PeepholeFoldConstants.MAX_FOLD_NUMBER)) || java.lang.Double.isNaN(result)) || (result == java.lang.Double.POSITIVE_INFINITY)) || (result == java.lang.Double.NEGATIVE_INFINITY)) {
            return com.google.javascript.jscomp.NodeUtil.numberNode(result, null);
        }
        return null;
    }

    private com.google.javascript.rhino.Node tryFoldLeftChildOp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        int opType = n.getType();
        com.google.common.base.Preconditions.checkState((com.google.javascript.jscomp.NodeUtil.isAssociative(opType) && com.google.javascript.jscomp.NodeUtil.isCommutative(opType)) || n.isAdd());
        com.google.common.base.Preconditions.checkState((!n.isAdd()) || (!com.google.javascript.jscomp.NodeUtil.mayBeString(n)));
        java.lang.Double rightValObj = com.google.javascript.jscomp.NodeUtil.getNumberValue(right);
        if ((rightValObj != null) && (left.getType() == opType)) {
            com.google.common.base.Preconditions.checkState(left.getChildCount() == 2);
            com.google.javascript.rhino.Node ll = left.getFirstChild();
            com.google.javascript.rhino.Node lr = ll.getNext();
            com.google.javascript.rhino.Node valueToCombine = ll;
            com.google.javascript.rhino.Node replacement = performArithmeticOp(opType, valueToCombine, right);
            if (replacement == null) {
                valueToCombine = lr;
                replacement = performArithmeticOp(opType, valueToCombine, right);
            }
            if (replacement != null) {
                left.removeChild(valueToCombine);
                n.replaceChild(left, left.removeFirstChild());
                replacement.copyInformationFromForTree(right);
                n.replaceChild(right, replacement);
                reportCodeChange();
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldAdd(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(node.isAdd());
        if (com.google.javascript.jscomp.NodeUtil.mayBeString(node, true)) {
            if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, false) && com.google.javascript.jscomp.NodeUtil.isLiteralValue(right, false)) {
                return tryFoldAddConstantString(node, left, right);
            } else {
                return tryFoldChildAddString(node, left, right);
            }
        } else {
            com.google.javascript.rhino.Node result = tryFoldArithmeticOp(node, left, right);
            if (result != node) {
                return result;
            }
            return tryFoldLeftChildOp(node, left, right);
        }
    }

    private com.google.javascript.rhino.Node tryFoldShift(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (left.isNumber() && right.isNumber()) {
            double result;
            double lval = left.getDouble();
            double rval = right.getDouble();
            if (!((lval >= java.lang.Integer.MIN_VALUE) && (lval <= java.lang.Integer.MAX_VALUE))) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE, left);
                return n;
            }
            if (!((rval >= 0) && (rval < 32))) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
                return n;
            }
            int lvalInt = ((int) (lval));
            if (lvalInt != lval) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND, left);
                return n;
            }
            int rvalInt = ((int) (rval));
            if (rvalInt != rval) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND, right);
                return n;
            }
            switch (n.getType()) {
                case com.google.javascript.rhino.Token.LSH :
                    result = lvalInt << rvalInt;
                    break;
                case com.google.javascript.rhino.Token.RSH :
                    result = lvalInt >> rvalInt;
                    break;
                case com.google.javascript.rhino.Token.URSH :
                    long lvalLong = lvalInt & 0xffffffffL;
                    result = lvalLong >>> rvalInt;
                    break;
                default :
                    throw new java.lang.AssertionError("Unknown shift operator: " + com.google.javascript.rhino.Token.name(n.getType()));
            }
            com.google.javascript.rhino.Node newNumber = com.google.javascript.rhino.IR.number(result);
            n.getParent().replaceChild(n, newNumber);
            reportCodeChange();
            return newNumber;
        }
        return n;
    }

    @java.lang.SuppressWarnings("fallthrough")
    private com.google.javascript.rhino.Node tryFoldComparison(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        boolean leftLiteral = com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, true);
        boolean rightLiteral = com.google.javascript.jscomp.NodeUtil.isLiteralValue(right, true);
        if ((!leftLiteral) || (!rightLiteral)) {
            if ((n.getType() != com.google.javascript.rhino.Token.GT) && (n.getType() != com.google.javascript.rhino.Token.LT)) {
                return n;
            }
        }
        int op = n.getType();
        boolean result;
        boolean undefinedRight = com.google.javascript.jscomp.NodeUtil.isUndefined(right) && rightLiteral;
        boolean nullRight = right.isNull();
        int lhType = getNormalizedNodeType(left);
        int rhType = getNormalizedNodeType(right);
        switch (lhType) {
            case com.google.javascript.rhino.Token.VOID :
                if (!leftLiteral) {
                    return n;
                } else if (!rightLiteral) {
                    return n;
                } else {
                    result = compareToUndefined(right, op);
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
                if (rightLiteral && isEqualityOp(op)) {
                    result = compareToNull(right, op);
                    break;
                }
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                if (undefinedRight) {
                    result = compareToUndefined(left, op);
                    break;
                }
                if (((rhType != com.google.javascript.rhino.Token.TRUE) && (rhType != com.google.javascript.rhino.Token.FALSE)) && (rhType != com.google.javascript.rhino.Token.NULL)) {
                    return n;
                }
                switch (op) {
                    case com.google.javascript.rhino.Token.SHEQ :
                    case com.google.javascript.rhino.Token.EQ :
                        result = lhType == rhType;
                        break;
                    case com.google.javascript.rhino.Token.SHNE :
                    case com.google.javascript.rhino.Token.NE :
                        result = lhType != rhType;
                        break;
                    case com.google.javascript.rhino.Token.GE :
                    case com.google.javascript.rhino.Token.LE :
                    case com.google.javascript.rhino.Token.GT :
                    case com.google.javascript.rhino.Token.LT :
                        java.lang.Boolean compareResult = compareAsNumbers(op, left, right);
                        if (compareResult != null) {
                            result = compareResult;
                        } else {
                            return n;
                        }
                        break;
                    default :
                        return n;
                }
                break;
            case com.google.javascript.rhino.Token.THIS :
                if (!right.isThis()) {
                    return n;
                }
                switch (op) {
                    case com.google.javascript.rhino.Token.SHEQ :
                    case com.google.javascript.rhino.Token.EQ :
                        result = true;
                        break;
                    case com.google.javascript.rhino.Token.SHNE :
                    case com.google.javascript.rhino.Token.NE :
                        result = false;
                        break;
                    default :
                        return n;
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                if (undefinedRight) {
                    result = compareToUndefined(left, op);
                    break;
                }
                if (nullRight && isEqualityOp(op)) {
                    result = compareToNull(left, op);
                    break;
                }
                if (com.google.javascript.rhino.Token.STRING != right.getType()) {
                    return n;
                }
                com.google.javascript.rhino.jstype.TernaryValue ternary = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                switch (op) {
                    case com.google.javascript.rhino.Token.SHEQ :
                    case com.google.javascript.rhino.Token.EQ :
                        ternary = areStringsEqual(left.getString(), right.getString());
                        break;
                    case com.google.javascript.rhino.Token.SHNE :
                    case com.google.javascript.rhino.Token.NE :
                        ternary = areStringsEqual(left.getString(), right.getString()).not();
                        break;
                }
                if (ternary == com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return n;
                }
                result = ternary.toBoolean(true);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                if (undefinedRight) {
                    result = compareToUndefined(left, op);
                    break;
                }
                if (nullRight && isEqualityOp(op)) {
                    result = compareToNull(left, op);
                    break;
                }
                if (com.google.javascript.rhino.Token.NUMBER != right.getType()) {
                    return n;
                }
                java.lang.Boolean compareResult = compareAsNumbers(op, left, right);
                if (compareResult != null) {
                    result = compareResult;
                } else {
                    return null;
                }
                break;
            case com.google.javascript.rhino.Token.NAME :
                if (leftLiteral && undefinedRight) {
                    result = compareToUndefined(left, op);
                    break;
                }
                if (rightLiteral) {
                    boolean undefinedLeft = left.getString().equals("undefined");
                    if (undefinedLeft) {
                        result = compareToUndefined(right, op);
                        break;
                    }
                    if ((leftLiteral && nullRight) && isEqualityOp(op)) {
                        result = compareToNull(left, op);
                        break;
                    }
                }
                if (com.google.javascript.rhino.Token.NAME != right.getType()) {
                    return n;
                }
                java.lang.String ln = left.getString();
                java.lang.String rn = right.getString();
                if (!ln.equals(rn)) {
                    return n;
                }
                switch (op) {
                    case com.google.javascript.rhino.Token.LT :
                    case com.google.javascript.rhino.Token.GT :
                        result = false;
                        break;
                    default :
                        return n;
                }
                break;
            case com.google.javascript.rhino.Token.NEG :
                if (leftLiteral) {
                    if (undefinedRight) {
                        result = compareToUndefined(left, op);
                        break;
                    }
                    if (nullRight && isEqualityOp(op)) {
                        result = compareToNull(left, op);
                        break;
                    }
                }
                return n;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.FUNCTION :
                if (leftLiteral) {
                    if (undefinedRight) {
                        result = compareToUndefined(left, op);
                        break;
                    }
                    if (nullRight && isEqualityOp(op)) {
                        result = compareToNull(left, op);
                        break;
                    }
                }
                return n;
            default :
                return n;
        }
        com.google.javascript.rhino.Node newNode = com.google.javascript.jscomp.NodeUtil.booleanNode(result);
        n.getParent().replaceChild(n, newNode);
        reportCodeChange();
        return newNode;
    }

    private com.google.javascript.rhino.jstype.TernaryValue areStringsEqual(java.lang.String a, java.lang.String b) {
        if ((a.indexOf('\u000b') != (-1)) || (b.indexOf('\u000b') != (-1))) {
            return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        } else {
            return a.equals(b) ? com.google.javascript.rhino.jstype.TernaryValue.TRUE : com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        }
    }

    private int getNormalizedNodeType(com.google.javascript.rhino.Node n) {
        int type = n.getType();
        if (type == com.google.javascript.rhino.Token.NOT) {
            com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n);
            switch (value) {
                case TRUE :
                    return com.google.javascript.rhino.Token.TRUE;
                case FALSE :
                    return com.google.javascript.rhino.Token.FALSE;
            }
        }
        return type;
    }

    private java.lang.Boolean compareAsNumbers(int op, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        java.lang.Double leftValue = com.google.javascript.jscomp.NodeUtil.getNumberValue(left);
        if (leftValue == null) {
            return null;
        }
        java.lang.Double rightValue = com.google.javascript.jscomp.NodeUtil.getNumberValue(right);
        if (rightValue == null) {
            return null;
        }
        double lv = leftValue;
        double rv = rightValue;
        java.lang.Boolean result;
        switch (op) {
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.EQ :
                com.google.common.base.Preconditions.checkState(left.isNumber() && right.isNumber());
                result = lv == rv;
                break;
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.NE :
                com.google.common.base.Preconditions.checkState(left.isNumber() && right.isNumber());
                result = lv != rv;
                break;
            case com.google.javascript.rhino.Token.LE :
                result = lv <= rv;
                break;
            case com.google.javascript.rhino.Token.LT :
                result = lv < rv;
                break;
            case com.google.javascript.rhino.Token.GE :
                result = lv >= rv;
                break;
            case com.google.javascript.rhino.Token.GT :
                result = lv > rv;
                break;
            default :
                return null;
        }
        return result;
    }

    private boolean compareToUndefined(com.google.javascript.rhino.Node value, int op) {
        com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isLiteralValue(value, true));
        boolean valueUndefined = com.google.javascript.jscomp.NodeUtil.isUndefined(value);
        boolean valueNull = com.google.javascript.rhino.Token.NULL == value.getType();
        boolean equivalent = valueUndefined || valueNull;
        switch (op) {
            case com.google.javascript.rhino.Token.EQ :
                return equivalent;
            case com.google.javascript.rhino.Token.NE :
                return !equivalent;
            case com.google.javascript.rhino.Token.SHEQ :
                return valueUndefined;
            case com.google.javascript.rhino.Token.SHNE :
                return !valueUndefined;
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
                return false;
            default :
                throw new java.lang.IllegalStateException("unexpected.");
        }
    }

    private boolean isEqualityOp(int op) {
        switch (op) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return true;
        }
        return false;
    }

    private boolean compareToNull(com.google.javascript.rhino.Node value, int op) {
        boolean valueUndefined = com.google.javascript.jscomp.NodeUtil.isUndefined(value);
        boolean valueNull = com.google.javascript.rhino.Token.NULL == value.getType();
        boolean equivalent = valueUndefined || valueNull;
        switch (op) {
            case com.google.javascript.rhino.Token.EQ :
                return equivalent;
            case com.google.javascript.rhino.Token.NE :
                return !equivalent;
            case com.google.javascript.rhino.Token.SHEQ :
                return valueNull;
            case com.google.javascript.rhino.Token.SHNE :
                return !valueNull;
            default :
                throw new java.lang.IllegalStateException("unexpected.");
        }
    }

    private com.google.javascript.rhino.Node tryFoldCtorCall(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isNew());
        if (inForcedStringContext(n)) {
            return tryFoldInForcedStringContext(n);
        }
        return n;
    }

    private boolean inForcedStringContext(com.google.javascript.rhino.Node n) {
        if (n.getParent().isGetElem() && (n.getParent().getLastChild() == n)) {
            return true;
        }
        if (n.getParent().isAdd()) {
            return true;
        }
        return false;
    }

    private com.google.javascript.rhino.Node tryFoldInForcedStringContext(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isNew());
        com.google.javascript.rhino.Node objectType = n.getFirstChild();
        if (!objectType.isName()) {
            return n;
        }
        if (objectType.getString().equals("String")) {
            com.google.javascript.rhino.Node value = objectType.getNext();
            java.lang.String stringValue = null;
            if (value == null) {
                stringValue = "";
            } else {
                if (!com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                    return n;
                }
                stringValue = com.google.javascript.jscomp.NodeUtil.getStringValue(value);
            }
            if (stringValue == null) {
                return n;
            }
            com.google.javascript.rhino.Node parent = n.getParent();
            com.google.javascript.rhino.Node newString = com.google.javascript.rhino.IR.string(stringValue);
            parent.replaceChild(n, newString);
            newString.copyInformationFrom(parent);
            reportCodeChange();
            return newString;
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldGetElem(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isGetElem());
        if (left.isObjectLit()) {
            return tryFoldObjectPropAccess(n, left, right);
        }
        if (left.isArrayLit()) {
            return tryFoldArrayAccess(n, left, right);
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldGetProp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isGetProp());
        if (left.isObjectLit()) {
            return tryFoldObjectPropAccess(n, left, right);
        }
        if (right.isString() && right.getString().equals("length")) {
            int knownLength = -1;
            switch (left.getType()) {
                case com.google.javascript.rhino.Token.ARRAYLIT :
                    if (mayHaveSideEffects(left)) {
                        return n;
                    }
                    knownLength = left.getChildCount();
                    break;
                case com.google.javascript.rhino.Token.STRING :
                    knownLength = left.getString().length();
                    break;
                default :
                    return n;
            }
            com.google.common.base.Preconditions.checkState(knownLength != (-1));
            com.google.javascript.rhino.Node lengthNode = com.google.javascript.rhino.IR.number(knownLength);
            n.getParent().replaceChild(n, lengthNode);
            reportCodeChange();
            return lengthNode;
        }
        return n;
    }

    private boolean isAssignmentTarget(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        if (((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) || parent.isInc()) || parent.isDec()) {
            return true;
        }
        return false;
    }

    private com.google.javascript.rhino.Node tryFoldArrayAccess(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.javascript.rhino.Node parent = n.getParent();
        if (isAssignmentTarget(n)) {
            return n;
        }
        if (!right.isNumber()) {
            return n;
        }
        double index = right.getDouble();
        int intIndex = ((int) (index));
        if (intIndex != index) {
            error(com.google.javascript.jscomp.PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR, right);
            return n;
        }
        if (intIndex < 0) {
            error(com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR, right);
            return n;
        }
        com.google.javascript.rhino.Node current = left.getFirstChild();
        com.google.javascript.rhino.Node elem = null;
        for (int i = 0; current != null; i++) {
            if (i != intIndex) {
                if (mayHaveSideEffects(current)) {
                    return n;
                }
            } else {
                elem = current;
            }
            current = current.getNext();
        }
        if (elem == null) {
            error(com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR, right);
            return n;
        }
        if (elem.isEmpty()) {
            elem = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(elem);
        } else {
            left.removeChild(elem);
        }
        n.getParent().replaceChild(n, elem);
        reportCodeChange();
        return elem;
    }

    private com.google.javascript.rhino.Node tryFoldObjectPropAccess(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(com.google.javascript.jscomp.NodeUtil.isGet(n));
        if ((!left.isObjectLit()) || (!right.isString())) {
            return n;
        }
        if (isAssignmentTarget(n)) {
            return n;
        }
        com.google.javascript.rhino.Node key = null;
        com.google.javascript.rhino.Node value = null;
        for (com.google.javascript.rhino.Node c = left.getFirstChild(); c != null; c = c.getNext()) {
            if (c.getString().equals(right.getString())) {
                switch (c.getType()) {
                    case com.google.javascript.rhino.Token.SETTER_DEF :
                        continue;
                    case com.google.javascript.rhino.Token.GETTER_DEF :
                    case com.google.javascript.rhino.Token.STRING_KEY :
                        if ((value != null) && mayHaveSideEffects(value)) {
                            return n;
                        }
                        key = c;
                        value = key.getFirstChild();
                        break;
                    default :
                        throw new java.lang.IllegalStateException();
                }
            } else if (mayHaveSideEffects(c.getFirstChild())) {
                return n;
            }
        }
        if (value == null) {
            return n;
        }
        if (value.isFunction() && com.google.javascript.jscomp.NodeUtil.referencesThis(value)) {
            return n;
        }
        com.google.javascript.rhino.Node replacement = value.detachFromParent();
        if (key.isGetterDef()) {
            replacement = com.google.javascript.rhino.IR.call(replacement);
            replacement.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, true);
        }
        n.getParent().replaceChild(n, replacement);
        reportCodeChange();
        return n;
    }
}
[274785] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659901121663
GPR[SSUN]-1659901121663
944853999
GPR[SPVATF]-1659901121913
GPR[EPVATF]-1659901123118
GPR[SPS]-1659901123118
[276842] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:234.
GPR[EPS]-1659901123720
GPR[ESUN]-1659901123720
GPR[SSUN]-1659901123720
-132053243
GPR[SPVATF]-1659901123914
GPR[EPVATF]-1659901123984
[277106] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901123984
GPR[SSUN]-1659901123984
-132053243
GPR[SPVATF]-1659901124175
GPR[EPVATF]-1659901124245
[277367] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901124245
GPR[SSUN]-1659901124245
-132053243
GPR[SPVATF]-1659901124439
GPR[EPVATF]-1659901124512
[277634] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659901124512
GPR[EPVATF]-1659901124581
[277703] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901124581
GPR[SSUN]-1659901124581
1187751237
GPR[SPVATF]-1659901124858
GPR[EPVATF]-1659901126115
GPR[SPS]-1659901126115
GPR[EPS]-1659901137494
GPR[ESUN]-1659901137494
GPR[SSUN]-1659901137494
2433571
GPR[ESUN]-1659901137736
GPR[SSUN]-1659901137736
-132053243
GPR[ESUN]-1659901137927
GPR[SSUN]-1659901137927
-132053243
GPR[SPVATF]-1659901138121
GPR[EPVATF]-1659901138191
[291313] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659901138191
GPR[EPVATF]-1659901138261
[291383] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901138261
GPR[SSUN]-1659901138261
-132053243
GPR[ESUN]-1659901138489
GPR[SSUN]-1659901138489
-132053243
GPR[SPVATF]-1659901138680
GPR[EPVATF]-1659901138752
[291874] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901138752
GPR[SSUN]-1659901138752
-132053243
GPR[SPVATF]-1659901138941
GPR[EPVATF]-1659901139013
[292135] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901139013
GPR[SSUN]-1659901139013
-132053243
GPR[SPVATF]-1659901139206
GPR[EPVATF]-1659901139276
[292399] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901139277
GPR[SSUN]-1659901139277
-132053243
GPR[SPVATF]-1659901139463
GPR[EPVATF]-1659901139533
[292655] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901139533
GPR[SSUN]-1659901139533
-132053243
GPR[SPVATF]-1659901139719
GPR[EPVATF]-1659901139789
[292911] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901139789
GPR[SSUN]-1659901139789
-132053243
GPR[ESUN]-1659901139975
GPR[SSUN]-1659901139975
2433571
GPR[SPVATF]-1659901140206
GPR[EPVATF]-1659901141551
GPR[SPS]-1659901141552
[295336] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:997.
GPR[EPS]-1659901142214
GPR[ESUN]-1659901142214
GPR[SSUN]-1659901142214
2433571
GPR[SPVATF]-1659901142456
GPR[EPVATF]-1659901143947
GPR[SPS]-1659901143947
[297707] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:996.
GPR[EPS]-1659901144585
GPR[ESUN]-1659901144585
GPR[SSUN]-1659901144585
2433571
GPR[SPVATF]-1659901144826
GPR[EPVATF]-1659901146337
GPR[SPS]-1659901146337
[300067] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int INFERRED_FUNCTION = 55;

    public static final int LAST_PROP = 55;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            case com.google.javascript.rhino.Node.INFERRED_FUNCTION :
                return "inferred";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private static abstract class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(93).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.INFERRED_FUNCTION",com.google.javascript.rhino.Node.INFERRED_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            if (com.google.javascript.rhino.Node.this.last!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.parent!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.next!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.first!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            value = x.toString();

                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            java.lang.String name = getString();
            return name.isEmpty() ? null : name;
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[300067] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659901146945
GPR[SSUN]-1659901146945
2433571
GPR[SPVATF]-1659901147295
GPR[EPVATF]-1659901148776
GPR[SPS]-1659901148776
[302493] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int INFERRED_FUNCTION = 55;

    public static final int LAST_PROP = 55;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            case com.google.javascript.rhino.Node.INFERRED_FUNCTION :
                return "inferred";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private static abstract class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(94).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.INFERRED_FUNCTION",com.google.javascript.rhino.Node.INFERRED_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    if (com.google.javascript.rhino.Node.this.last!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.parent!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.next!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.first!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectionEnds();
                }
                if (runtimeAngelicValue)
                    switch (type) {
                        default :
                            value = x.toString();
                            break;
                    }

                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            java.lang.String name = getString();
            return name.isEmpty() ? null : name;
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[302494] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659901149372
GPR[SSUN]-1659901149372
2433571
GPR[SPVATF]-1659901149605
GPR[EPVATF]-1659901151040
GPR[SPS]-1659901151040
[304796] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:989.
GPR[EPS]-1659901151674
GPR[ESUN]-1659901151674
GPR[SSUN]-1659901151674
2433571
GPR[SPVATF]-1659901151912
GPR[EPVATF]-1659901153345
GPR[SPS]-1659901153345
[307141] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:988.
GPR[EPS]-1659901154019
GPR[ESUN]-1659901154019
GPR[SSUN]-1659901154019
2433571
GPR[SPVATF]-1659901154254
GPR[EPVATF]-1659901155698
GPR[SPS]-1659901155698
[309452] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:987.
GPR[EPS]-1659901156330
GPR[ESUN]-1659901156330
GPR[SSUN]-1659901156330
2433571
GPR[ESUN]-1659901156565
GPR[SSUN]-1659901156565
2433571
GPR[ESUN]-1659901156797
GPR[SSUN]-1659901156797
2433571
GPR[SPVATF]-1659901157032
GPR[EPVATF]-1659901158488
GPR[SPS]-1659901158488
[312287] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:978.
GPR[EPS]-1659901159165
GPR[ESUN]-1659901159165
GPR[SSUN]-1659901159165
2433571
GPR[SPVATF]-1659901159405
GPR[EPVATF]-1659901160817
GPR[SPS]-1659901160817
[314572] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:977.
GPR[EPS]-1659901161450
GPR[ESUN]-1659901161450
GPR[SSUN]-1659901161450
2433571
GPR[SPVATF]-1659901161703
GPR[EPVATF]-1659901163120
GPR[SPS]-1659901163120
[316917] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:890.
GPR[EPS]-1659901163795
GPR[ESUN]-1659901163795
GPR[SSUN]-1659901163795
2433571
GPR[SPVATF]-1659901164033
GPR[EPVATF]-1659901165453
GPR[SPS]-1659901165453
[319213] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:889.
GPR[EPS]-1659901166091
GPR[ESUN]-1659901166091
GPR[SSUN]-1659901166092
2433571
GPR[SPVATF]-1659901166326
GPR[EPVATF]-1659901167743
GPR[SPS]-1659901167743
[321491] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:884.
GPR[EPS]-1659901168369
GPR[ESUN]-1659901168369
GPR[SSUN]-1659901168369
2433571
GPR[ESUN]-1659901168654
GPR[SSUN]-1659901168654
2433571
GPR[ESUN]-1659901168889
GPR[SSUN]-1659901168889
2433571
GPR[ESUN]-1659901169120
GPR[SSUN]-1659901169120
881600600
GPR[ESUN]-1659901169321
GPR[SSUN]-1659901169321
-1966087783
GPR[ESUN]-1659901169510
GPR[SSUN]-1659901169510
-1966087783
GPR[SPVATF]-1659901169705
GPR[EPVATF]-1659901169785
[322907] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659901169785
GPR[EPVATF]-1659901169863
[322985] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901169863
GPR[SSUN]-1659901169863
-1345859678
GPR[ESUN]-1659901170116
GPR[SSUN]-1659901170116
GPR[ESUN]-1659901170116
GPR[SSUN]-1659901170116
80988634
GPR[ESUN]-1659901170288
GPR[SSUN]-1659901170288
1187751237
GPR[ESUN]-1659901170564
GPR[SSUN]-1659901170564
2433571
GPR[SPVATF]-1659901170798
GPR[EPVATF]-1659901172215
GPR[SPS]-1659901172215
[325930] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1041.
GPR[EPS]-1659901172808
GPR[ESUN]-1659901172808
GPR[SSUN]-1659901172808
2433571
GPR[SPVATF]-1659901173041
GPR[EPVATF]-1659901174502
GPR[SPS]-1659901174502
[328227] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1034.
GPR[EPS]-1659901175105
GPR[ESUN]-1659901175105
GPR[SSUN]-1659901175105
2433571
GPR[ESUN]-1659901175346
GPR[SSUN]-1659901175346
944853999
GPR[ESUN]-1659901175596
GPR[SSUN]-1659901175596
2433571
GPR[ESUN]-1659901175834
GPR[SSUN]-1659901175834
2433571
GPR[ESUN]-1659901176070
GPR[SSUN]-1659901176070
2433571
GPR[SPVATF]-1659901176302
GPR[EPVATF]-1659901177722
GPR[SPS]-1659901177722
[331443] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1038.
GPR[EPS]-1659901178321
GPR[ESUN]-1659901178322
GPR[SSUN]-1659901178322
2433571
GPR[SPVATF]-1659901178560
GPR[EPVATF]-1659901180034
GPR[SPS]-1659901180034
[333754] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1037.
GPR[EPS]-1659901180632
GPR[ESUN]-1659901180633
GPR[SSUN]-1659901180633
2433571
GPR[SPVATF]-1659901180865
GPR[EPVATF]-1659901182315
GPR[SPS]-1659901182315
[336043] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1036.
GPR[EPS]-1659901182921
GPR[ESUN]-1659901182921
GPR[SSUN]-1659901182921
2433571
GPR[SPVATF]-1659901183161
GPR[EPVATF]-1659901184628
GPR[SPS]-1659901184628
[338367] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1033.
GPR[EPS]-1659901185245
GPR[ESUN]-1659901185245
GPR[SSUN]-1659901185245
2433571
GPR[ESUN]-1659901185489
GPR[SSUN]-1659901185489
2433571
GPR[SPVATF]-1659901185729
GPR[EPVATF]-1659901187204
GPR[SPS]-1659901187204
[340988] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1028.
GPR[EPS]-1659901187866
GPR[ESUN]-1659901187866
GPR[SSUN]-1659901187866
2433571
GPR[ESUN]-1659901188102
GPR[SSUN]-1659901188102
2433571
GPR[SPVATF]-1659901188336
GPR[EPVATF]-1659901189829
GPR[SPS]-1659901189829
[343599] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1020.
GPR[EPS]-1659901190477
GPR[ESUN]-1659901190477
GPR[SSUN]-1659901190477
2433571
GPR[ESUN]-1659901190718
GPR[SSUN]-1659901190718
2433571
GPR[ESUN]-1659901190951
GPR[SSUN]-1659901190951
GPR[ESUN]-1659901190951
GPR[SSUN]-1659901190951
944853999
GPR[SPVATF]-1659901191205
GPR[EPVATF]-1659901192623
GPR[SPS]-1659901192623
[346305] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:1379.
GPR[EPS]-1659901193183
GPR[SPVATF]-1659901193184
GPR[EPVATF]-1659901194653
GPR[SPS]-1659901194653
[348333] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:1379.
GPR[EPS]-1659901195211
GPR[ESUN]-1659901195211
GPR[SSUN]-1659901195211
80988634
GPR[ESUN]-1659901195390
GPR[SSUN]-1659901195390
944853999
GPR[SPVATF]-1659901195638
GPR[EPVATF]-1659901197096
GPR[SPS]-1659901197096
[350787] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:1375.
GPR[EPS]-1659901197665
GPR[SPVATF]-1659901197665
GPR[EPVATF]-1659901199134
GPR[SPS]-1659901199134
[352860] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:1375.
GPR[EPS]-1659901199738
GPR[ESUN]-1659901199738
GPR[SSUN]-1659901199738
944853999
GPR[SPVATF]-1659901199993
GPR[EPVATF]-1659901201594
GPR[SPS]-1659901201594
[355279] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:1373.
GPR[EPS]-1659901202157
GPR[ESUN]-1659901202157
GPR[SSUN]-1659901202157
944853999
GPR[ESUN]-1659901202407
GPR[SSUN]-1659901202407
2433571
GPR[SPVATF]-1659901202639
GPR[EPVATF]-1659901204115
GPR[SPS]-1659901204116
[357903] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:959.
GPR[EPS]-1659901204781
GPR[ESUN]-1659901204782
GPR[SSUN]-1659901204782
2433571
GPR[SPVATF]-1659901205017
GPR[EPVATF]-1659901206475
GPR[SPS]-1659901206475
[360237] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:958.
GPR[EPS]-1659901207115
GPR[ESUN]-1659901207115
GPR[SSUN]-1659901207115
2433571
GPR[SPVATF]-1659901207467
GPR[EPVATF]-1659901208933
GPR[SPS]-1659901208934
[362730] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1002.
GPR[EPS]-1659901209608
GPR[SPVATF]-1659901209609
GPR[EPVATF]-1659901211088
GPR[SPS]-1659901211088
[364850] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1002.
GPR[EPS]-1659901211728
GPR[ESUN]-1659901211728
GPR[SSUN]-1659901211728
2433571
GPR[SPVATF]-1659901211966
GPR[EPVATF]-1659901213475
GPR[SPS]-1659901213475
CodeCache: size=245760Kb used=243358Kb max_used=243365Kb free=2401Kb
 bounds [0x00007fcdc5000000, 0x00007fcdd4000000, 0x00007fcdd4000000]
 total_blobs=67545 nmethods=67037 adapters=407
 compilation: disabled (not enough contiguous free space left)
[368657] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:984.
GPR[EPS]-1659901215535
GPR[ESUN]-1659901215536
GPR[SSUN]-1659901215536
2433571
GPR[ESUN]-1659901216701
GPR[SSUN]-1659901216701
2433571
GPR[SPVATF]-1659901217941
GPR[EPVATF]-1659901220014
GPR[SPS]-1659901220014
[374534] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:976.
GPR[EPS]-1659901221412
GPR[SPVATF]-1659901221413
GPR[EPVATF]-1659901222377
GPR[SPS]-1659901222377
[376379] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:976.
GPR[EPS]-1659901223257
GPR[ESUN]-1659901223257
GPR[SSUN]-1659901223257
2433571
GPR[ESUN]-1659901223554
GPR[SSUN]-1659901223554
2433571
GPR[ESUN]-1659901223871
GPR[SSUN]-1659901223871
2433571
GPR[ESUN]-1659901224161
GPR[SSUN]-1659901224161
2433571
GPR[SPVATF]-1659901224474
GPR[EPVATF]-1659901225411
GPR[SPS]-1659901225411
[379294] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:893.
GPR[EPS]-1659901226172
GPR[ESUN]-1659901226172
GPR[SSUN]-1659901226172
2433571
GPR[SPVATF]-1659901226439
GPR[EPVATF]-1659901227380
GPR[SPS]-1659901227380
[381244] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:888.
GPR[EPS]-1659901228122
GPR[ESUN]-1659901228122
GPR[SSUN]-1659901228122
2433571
GPR[ESUN]-1659901228403
GPR[SSUN]-1659901228403
2433571
GPR[SPVATF]-1659901228686
GPR[EPVATF]-1659901229611
GPR[SPS]-1659901229612
[383437] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:883.
GPR[EPS]-1659901230315
GPR[ESUN]-1659901230315
GPR[SSUN]-1659901230315
2433571
GPR[ESUN]-1659901230564
GPR[SSUN]-1659901230564
1187751237
GPR[ESUN]-1659901230863
GPR[SSUN]-1659901230863
GPR[ESUN]-1659901230863
GPR[SSUN]-1659901230863
2433571
GPR[SPVATF]-1659901231109
GPR[EPVATF]-1659901232031
GPR[SPS]-1659901232031
[385891] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:970.
GPR[EPS]-1659901232769
GPR[SPVATF]-1659901232769
GPR[EPVATF]-1659901233696
GPR[SPS]-1659901233696
[388527] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:970.
GPR[EPS]-1659901235405
GPR[ESUN]-1659901235405
GPR[SSUN]-1659901235405
-1966087783
GPR[SPVATF]-1659901235613
GPR[EPVATF]-1659901235683
[388805] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659901235683
GPR[EPVATF]-1659901235752
[388874] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901235752
GPR[SSUN]-1659901235752
-1966087783
GPR[ESUN]-1659901235947
GPR[SSUN]-1659901235947
2433571
GPR[SPVATF]-1659901236186
GPR[EPVATF]-1659901237111
GPR[SPS]-1659901237111
[390957] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:960.
GPR[EPS]-1659901237835
GPR[SPVATF]-1659901237836
GPR[EPVATF]-1659901238824
GPR[SPS]-1659901238824
[392623] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:960.
GPR[EPS]-1659901239501
GPR[ESUN]-1659901239501
GPR[SSUN]-1659901239501
2433571
GPR[ESUN]-1659901239773
GPR[SSUN]-1659901239773
2433571
GPR[SPVATF]-1659901240021
GPR[EPVATF]-1659901240960
GPR[SPS]-1659901240960
[394746] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1001.
GPR[EPS]-1659901241624
GPR[SPVATF]-1659901241625
GPR[EPVATF]-1659901242557
GPR[SPS]-1659901242557
[396336] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1001.
GPR[EPS]-1659901243214
GPR[ESUN]-1659901243214
GPR[SSUN]-1659901243214
2433571
GPR[SPVATF]-1659901243460
GPR[EPVATF]-1659901244394
GPR[SPS]-1659901244394
[398152] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:982.
GPR[EPS]-1659901245030
GPR[SPVATF]-1659901245030
GPR[EPVATF]-1659901245957
GPR[SPS]-1659901245957
[399731] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:982.
GPR[EPS]-1659901246609
GPR[ESUN]-1659901246609
GPR[SSUN]-1659901246609
2433571
GPR[SPVATF]-1659901246850
GPR[EPVATF]-1659901247801
GPR[SPS]-1659901247801
[401573] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:974.
GPR[EPS]-1659901248451
GPR[SPVATF]-1659901248451
GPR[EPVATF]-1659901249384
GPR[SPS]-1659901249384
[403136] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:974.
GPR[EPS]-1659901250014
GPR[ESUN]-1659901250014
GPR[SSUN]-1659901250014
2433571
GPR[SPVATF]-1659901250259
GPR[EPVATF]-1659901251227
GPR[SPS]-1659901251227
[404987] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:957.
GPR[EPS]-1659901251865
GPR[SPVATF]-1659901251865
GPR[EPVATF]-1659901252788
GPR[SPS]-1659901252788
[406590] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:957.
GPR[EPS]-1659901253468
GPR[ESUN]-1659901253468
GPR[SSUN]-1659901253468
2433571
GPR[SPVATF]-1659901253709
GPR[EPVATF]-1659901254677
GPR[SPS]-1659901254677
[408441] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:956.
GPR[EPS]-1659901255319
GPR[ESUN]-1659901255319
GPR[SSUN]-1659901255319
2433571
GPR[ESUN]-1659901255558
GPR[SSUN]-1659901255558
2433571
GPR[SPVATF]-1659901255794
GPR[EPVATF]-1659901256740
GPR[SPS]-1659901256740
[410497] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:947.
GPR[EPS]-1659901257375
GPR[ESUN]-1659901257375
GPR[SSUN]-1659901257375
2433571
GPR[ESUN]-1659901257615
GPR[SSUN]-1659901257615
2433571
GPR[ESUN]-1659901257852
GPR[SSUN]-1659901257852
1187751237
GPR[ESUN]-1659901258137
GPR[SSUN]-1659901258137
1187751237
GPR[ESUN]-1659901258417
GPR[SSUN]-1659901258417
-718432441
GPR[SPVATF]-1659901258637
GPR[EPVATF]-1659901259622
GPR[SPS]-1659901259622
[413461] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:267.
GPR[EPS]-1659901260339
GPR[ESUN]-1659901260339
GPR[SSUN]-1659901260339
-718432441
GPR[SPVATF]-1659901260567
GPR[EPVATF]-1659901261527
GPR[SPS]-1659901261527
[415331] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:266.
GPR[EPS]-1659901262209
GPR[ESUN]-1659901262209
GPR[SSUN]-1659901262209
-718432441
GPR[SPVATF]-1659901262425
GPR[EPVATF]-1659901263429
GPR[SPS]-1659901263430
[417231] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:265.
GPR[EPS]-1659901264109
GPR[ESUN]-1659901264109
GPR[SSUN]-1659901264109
-718432441
GPR[SPVATF]-1659901264339
GPR[EPVATF]-1659901265307
GPR[SPS]-1659901265307
[419121] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:264.
GPR[EPS]-1659901265999
GPR[ESUN]-1659901265999
GPR[SSUN]-1659901265999
-718432441
GPR[SPVATF]-1659901266223
GPR[EPVATF]-1659901267238
GPR[SPS]-1659901267238
[421158] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:263.
GPR[EPS]-1659901268036
GPR[ESUN]-1659901268036
GPR[SSUN]-1659901268036
-718432441
GPR[SPVATF]-1659901268257
GPR[EPVATF]-1659901269223
GPR[SPS]-1659901269223
[423028] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:262.
GPR[EPS]-1659901269906
GPR[ESUN]-1659901269906
GPR[SSUN]-1659901269906
-718432441
GPR[ESUN]-1659901270126
GPR[SSUN]-1659901270126
-718432441
GPR[SPVATF]-1659901270342
GPR[EPVATF]-1659901271395
GPR[SPS]-1659901271395
[425195] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:260.
GPR[EPS]-1659901272073
GPR[ESUN]-1659901272074
GPR[SSUN]-1659901272074
1187751237
GPR[ESUN]-1659901272368
GPR[SSUN]-1659901272368
-718432441
GPR[SPVATF]-1659901272589
GPR[EPVATF]-1659901273579
GPR[SPS]-1659901273579
[791186] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659901651368
GPR[SSUN]-1659901654461
\n\nNode: host-45\n
\n\nDate: Sun 07 Aug 2022 01:31:46 PM PDT\n
End running Nopol Closure/10 results at /experiment_home///results/Nopol/Closure/10/seed_261/
Removing checked out dir script/workingdir/Nopol/Closure_10
GPR[SSLE]-1659904307238
GPR[ESLE]-1659904367242
