Sleep 1m start
GPR[SSLI]-1659907956164
GPR[ESLI]-1659908016168
Running Nopol Closure 132b with approach: smt
Timezone: America/Los_Angeles
Seed 261
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/132/seed_261/
The file script/workingdir/Nopol/Closure_132 does not exist!
script/workingdir/Nopol/Closure_132
script/workingdir/Nopol/Closure_132
classpath:  script/workingdir/Nopol/Closure_132/build/classes:script/workingdir/Nopol/Closure_132/lib/args4j.jar:script/workingdir/Nopol/Closure_132/lib/guava.jar:script/workingdir/Nopol/Closure_132/lib/json.jar:script/workingdir/Nopol/Closure_132/lib/jsr305.jar:script/workingdir/Nopol/Closure_132/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_132/build/lib/rhino.jar:script/workingdir/Nopol/Closure_132/lib/ant.jar:script/workingdir/Nopol/Closure_132/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_132/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_132/lib/jarjar.jar:script/workingdir/Nopol/Closure_132/lib/junit.jar:script/workingdir/Nopol/Closure_132/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659908034510
GPR[ESLB]-1659908094516
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_132//build/classes:script/workingdir/Nopol/Closure_132//build/test:script/workingdir/Nopol/Closure_132/build/classes:script/workingdir/Nopol/Closure_132/lib/args4j.jar:script/workingdir/Nopol/Closure_132/lib/guava.jar:script/workingdir/Nopol/Closure_132/lib/json.jar:script/workingdir/Nopol/Closure_132/lib/jsr305.jar:script/workingdir/Nopol/Closure_132/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_132/build/lib/rhino.jar:script/workingdir/Nopol/Closure_132/lib/ant.jar:script/workingdir/Nopol/Closure_132/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_132/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_132/lib/jarjar.jar:script/workingdir/Nopol/Closure_132/lib/junit.jar:script/workingdir/Nopol/Closure_132/build/test
Node: host-48
Date init: Sun 07 Aug 2022 02:34:54 PM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_132/src]
[1] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_132/build/classes/, file:script/workingdir/Nopol/Closure_132/build/test/, file:script/workingdir/Nopol/Closure_132/build/classes/, file:script/workingdir/Nopol/Closure_132/lib/args4j.jar, file:script/workingdir/Nopol/Closure_132/lib/guava.jar, file:script/workingdir/Nopol/Closure_132/lib/json.jar, file:script/workingdir/Nopol/Closure_132/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_132/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_132/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_132/lib/ant.jar, file:script/workingdir/Nopol/Closure_132/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_132/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_132/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_132/lib/junit.jar, file:script/workingdir/Nopol/Closure_132/build/test/]
[1] INFO NoPol - Statement type: PRE_THEN_COND
[1] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AngularPassTest, com.google.javascript.jscomp.AngularPassTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TemplatizedTypeTest, com.google.javascript.rhino.jstype.TemplatizedTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[3] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_132/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AngularPassTest, com.google.javascript.jscomp.AngularPassTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TemplatizedTypeTest, com.google.javascript.rhino.jstype.TemplatizedTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/132/seed_261/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[7] INFO NoPol - Free memory: 1 GB
[7] INFO NoPol - Maximum memory: 7 GB
[8] INFO NoPol - Total memory available to JVM: 1 GB
[9] INFO NoPol - Java version: 1.8.0_45
[10] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[10] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659908099966
GPR[ESUP]-1659908099966
GPR[SFL]-1659908099966
GPR[EFL]-1659908143119
GPR[SFP]-1659908143119
GPR[SSUN]-1659908152383
-283827935
GPR[SPVATF]-1659908152917
GPR[EPVATF]-1659908152972
[57609] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908152973
GPR[SSUN]-1659908152973
-283827935
GPR[ESUN]-1659908153179
GPR[SSUN]-1659908153179
-283827935
GPR[ESUN]-1659908153378
GPR[SSUN]-1659908153378
-283827935
GPR[ESUN]-1659908153571
GPR[SSUN]-1659908153571
-283827935
GPR[SPVATF]-1659908153754
GPR[EPVATF]-1659908153778
[58414] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908153778
GPR[SSUN]-1659908153778
-283827935
GPR[ESUN]-1659908153965
GPR[SSUN]-1659908153965
-283827935
GPR[SPVATF]-1659908154160
GPR[EPVATF]-1659908154185
[58821] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908154185
GPR[SSUN]-1659908154185
-283827935
GPR[SPVATF]-1659908154380
GPR[EPVATF]-1659908154402
[59038] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908154402
GPR[SSUN]-1659908154402
-283827935
GPR[SPVATF]-1659908154593
GPR[EPVATF]-1659908154614
[59250] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908154614
GPR[SSUN]-1659908154614
-283827935
GPR[SPVATF]-1659908154806
GPR[EPVATF]-1659908154827
[59463] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908154827
GPR[SSUN]-1659908154827
-283827935
GPR[SPVATF]-1659908155208
GPR[EPVATF]-1659908155230
[59866] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908155230
GPR[SSUN]-1659908155230
-283827935
GPR[ESUN]-1659908155420
GPR[SSUN]-1659908155420
-283827935
GPR[ESUN]-1659908155606
GPR[SSUN]-1659908155606
80988634
GPR[ESUN]-1659908155791
GPR[SSUN]-1659908155791
-1966087783
GPR[ESUN]-1659908155988
GPR[SSUN]-1659908155988
-1966087783
GPR[SPVATF]-1659908156178
GPR[EPVATF]-1659908156255
[60891] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908156255
GPR[SSUN]-1659908156255
-1659631726
GPR[ESUN]-1659908156439
GPR[SSUN]-1659908156439
130004992
GPR[ESUN]-1659908156617
GPR[SSUN]-1659908156617
130004992
GPR[SPVATF]-1659908156795
GPR[EPVATF]-1659908156869
[61505] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908156869
GPR[SSUN]-1659908156869
130004992
GPR[ESUN]-1659908157047
GPR[SSUN]-1659908157047
80988634
GPR[ESUN]-1659908157216
GPR[SSUN]-1659908157216
-1966087783
GPR[SPVATF]-1659908157404
GPR[EPVATF]-1659908157471
[62108] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908157472
GPR[SSUN]-1659908157472
-1966087783
GPR[SPVATF]-1659908157663
GPR[EPVATF]-1659908157731
[62368] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908157732
GPR[SSUN]-1659908157732
890942016
GPR[ESUN]-1659908157927
GPR[SSUN]-1659908157927
890942016
GPR[SPVATF]-1659908158159
GPR[EPVATF]-1659908158228
[62864] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908158228
GPR[SSUN]-1659908158228
890942016
GPR[SPVATF]-1659908158421
GPR[EPVATF]-1659908158488
[63124] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908158489
GPR[EPVATF]-1659908158553
[63189] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908158553
GPR[SSUN]-1659908158553
890942016
GPR[ESUN]-1659908158746
GPR[SSUN]-1659908158746
890942016
GPR[ESUN]-1659908158938
GPR[SSUN]-1659908158938
-1966087783
GPR[ESUN]-1659908159136
GPR[SSUN]-1659908159136
-1966087783
GPR[SPVATF]-1659908159334
GPR[EPVATF]-1659908159402
[64038] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908159402
GPR[EPVATF]-1659908159468
[64104] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908159468
GPR[SSUN]-1659908159468
-1966087783
GPR[ESUN]-1659908159662
GPR[SSUN]-1659908159662
-1966087783
GPR[SPVATF]-1659908159862
GPR[EPVATF]-1659908159929
[64565] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908159929
GPR[EPVATF]-1659908159997
[64633] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908159997
GPR[SSUN]-1659908159997
-1966087783
GPR[ESUN]-1659908160200
GPR[SSUN]-1659908160200
-1966087783
GPR[ESUN]-1659908160410
GPR[SSUN]-1659908160410
-1966087783
GPR[ESUN]-1659908160610
GPR[SSUN]-1659908160610
80988634
GPR[ESUN]-1659908160786
GPR[SSUN]-1659908160786
1613130706
GPR[ESUN]-1659908161001
GPR[SSUN]-1659908161001
1613130706
GPR[ESUN]-1659908161219
GPR[SSUN]-1659908161219
1613130706
GPR[SPVATF]-1659908161430
GPR[EPVATF]-1659908161673
[66309] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908161673
GPR[SSUN]-1659908161673
80988634
GPR[ESUN]-1659908161859
GPR[SSUN]-1659908161859
214953636
GPR[SPVATF]-1659908162092
GPR[EPVATF]-1659908162621
GPR[SPS]-1659908162621
[70997] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:797.
GPR[EPS]-1659908166361
GPR[ESUN]-1659908166361
GPR[SSUN]-1659908166361
214953636
GPR[SPVATF]-1659908166608
GPR[EPVATF]-1659908167129
GPR[SPS]-1659908167129
[72427] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:795.
GPR[EPS]-1659908167791
GPR[ESUN]-1659908167791
GPR[SSUN]-1659908167791
214953636
GPR[SPVATF]-1659908168018
GPR[EPVATF]-1659908168548
GPR[SPS]-1659908168548
[73848] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:794.
GPR[EPS]-1659908169212
GPR[ESUN]-1659908169212
GPR[SSUN]-1659908169212
214953636
GPR[ESUN]-1659908169446
GPR[SSUN]-1659908169446
214953636
GPR[ESUN]-1659908169673
GPR[SSUN]-1659908169674
214953636
GPR[ESUN]-1659908169907
GPR[SSUN]-1659908169907
214953636
GPR[SPVATF]-1659908170137
GPR[EPVATF]-1659908170663
GPR[SPS]-1659908170664
[75927] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:788.
GPR[EPS]-1659908171291
GPR[ESUN]-1659908171292
GPR[SSUN]-1659908171292
214953636
GPR[ESUN]-1659908171542
GPR[SSUN]-1659908171542
214953636
GPR[ESUN]-1659908171767
GPR[SSUN]-1659908171767
214953636
GPR[ESUN]-1659908171994
GPR[SSUN]-1659908171994
214953636
GPR[SPVATF]-1659908172220
GPR[EPVATF]-1659908172742
GPR[SPS]-1659908172742
[77993] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:784.
GPR[EPS]-1659908173357
GPR[ESUN]-1659908173357
GPR[SSUN]-1659908173357
214953636
GPR[SPVATF]-1659908173589
GPR[EPVATF]-1659908174129
GPR[SPS]-1659908174129
[79967] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:777.
GPR[EPS]-1659908175331
GPR[SPVATF]-1659908175331
GPR[EPVATF]-1659908175863
GPR[SPS]-1659908175863
[81109] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:777.
GPR[EPS]-1659908176473
GPR[ESUN]-1659908176473
GPR[SSUN]-1659908176473
214953636
GPR[ESUN]-1659908177022
GPR[SSUN]-1659908177022
79183632
GPR[ESUN]-1659908177296
GPR[SSUN]-1659908177296
234947553
GPR[ESUN]-1659908177674
GPR[SSUN]-1659908177674
234947553
GPR[SPVATF]-1659908177869
GPR[EPVATF]-1659908177932
[82568] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908177932
GPR[EPVATF]-1659908177992
[82628] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908177992
GPR[SSUN]-1659908177992
234947553
GPR[ESUN]-1659908178183
GPR[SSUN]-1659908178183
234947553
GPR[SPVATF]-1659908178366
GPR[EPVATF]-1659908178430
[83067] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908178431
GPR[EPVATF]-1659908178491
[83127] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908178491
GPR[SSUN]-1659908178491
234947553
GPR[SPVATF]-1659908178688
GPR[EPVATF]-1659908178751
[83387] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908178751
GPR[SSUN]-1659908178751
234947553
GPR[ESUN]-1659908178942
GPR[SSUN]-1659908178942
234947553
GPR[ESUN]-1659908179130
GPR[SSUN]-1659908179130
234947553
GPR[SPVATF]-1659908179313
GPR[EPVATF]-1659908179376
[84012] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908179376
GPR[SSUN]-1659908179376
234947553
GPR[SPVATF]-1659908179564
GPR[EPVATF]-1659908179627
[84263] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908179627
GPR[SSUN]-1659908179627
234947553
GPR[SPVATF]-1659908179818
GPR[EPVATF]-1659908179879
[84515] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908179879
GPR[SSUN]-1659908179879
234947553
GPR[ESUN]-1659908180073
GPR[SSUN]-1659908180073
234947553
GPR[ESUN]-1659908180267
GPR[SSUN]-1659908180267
234947553
GPR[SPVATF]-1659908180456
GPR[EPVATF]-1659908180516
[85152] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908180516
GPR[SSUN]-1659908180516
234947553
GPR[SPVATF]-1659908180709
GPR[EPVATF]-1659908180770
[85406] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908180770
GPR[SSUN]-1659908180770
234947553
GPR[ESUN]-1659908180961
GPR[SSUN]-1659908180961
234947553
GPR[SPVATF]-1659908181151
GPR[EPVATF]-1659908181211
[85847] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908181211
GPR[SSUN]-1659908181211
234947553
GPR[SPVATF]-1659908181399
GPR[EPVATF]-1659908181459
[86095] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908181460
GPR[SSUN]-1659908181460
234947553
GPR[ESUN]-1659908181647
GPR[SSUN]-1659908181647
890942016
GPR[SPVATF]-1659908181849
GPR[EPVATF]-1659908181916
[86552] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908181916
GPR[EPVATF]-1659908181983
[86619] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908181983
GPR[SSUN]-1659908181983
890942016
GPR[SPVATF]-1659908182175
GPR[EPVATF]-1659908182242
[86878] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908182242
GPR[SSUN]-1659908182242
890942016
GPR[ESUN]-1659908182436
GPR[SSUN]-1659908182436
890942016
GPR[SPVATF]-1659908182621
GPR[EPVATF]-1659908182687
[87323] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908182687
GPR[SSUN]-1659908182687
890942016
GPR[SPVATF]-1659908182878
GPR[EPVATF]-1659908182944
[87580] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908182945
GPR[EPVATF]-1659908183011
[87647] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908183011
GPR[SSUN]-1659908183011
890942016
GPR[SPVATF]-1659908183204
GPR[EPVATF]-1659908183269
[87905] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908183269
GPR[SSUN]-1659908183269
890942016
GPR[SPVATF]-1659908183469
GPR[EPVATF]-1659908183535
[88171] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908183536
GPR[EPVATF]-1659908183600
[88236] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908183600
GPR[SSUN]-1659908183600
890942016
GPR[ESUN]-1659908183795
GPR[SSUN]-1659908183795
890942016
GPR[SPVATF]-1659908183986
GPR[EPVATF]-1659908184052
[88688] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908184052
GPR[SSUN]-1659908184052
890942016
GPR[SPVATF]-1659908184248
GPR[EPVATF]-1659908184315
[88951] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908184315
GPR[SSUN]-1659908184315
890942016
GPR[SPVATF]-1659908184511
GPR[EPVATF]-1659908184580
[89216] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908184580
GPR[SSUN]-1659908184580
890942016
GPR[ESUN]-1659908184769
GPR[SSUN]-1659908184769
1613130706
GPR[SPVATF]-1659908184985
GPR[EPVATF]-1659908185218
[89854] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908185218
GPR[EPVATF]-1659908185448
[90085] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908185450
GPR[SSUN]-1659908185450
1613130706
GPR[SPVATF]-1659908185661
GPR[EPVATF]-1659908185893
[90529] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908185893
GPR[EPVATF]-1659908186118
[90755] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908186119
GPR[SSUN]-1659908186119
1613130706
GPR[SPVATF]-1659908186330
GPR[EPVATF]-1659908186562
[91198] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908186562
GPR[SSUN]-1659908186562
214953636
GPR[SPVATF]-1659908186788
GPR[EPVATF]-1659908187318
GPR[SPS]-1659908187318
[92558] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:775.
GPR[EPS]-1659908187922
GPR[SPVATF]-1659908187922
GPR[EPVATF]-1659908188463
GPR[SPS]-1659908188463
[93693] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:775.
GPR[EPS]-1659908189057
GPR[ESUN]-1659908189057
GPR[SSUN]-1659908189057
2433571
GPR[SPVATF]-1659908189303
GPR[EPVATF]-1659908189851
GPR[SPS]-1659908189851
[95299] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1446.
GPR[EPS]-1659908190663
GPR[ESUN]-1659908190664
GPR[SSUN]-1659908190664
2433571
GPR[SPVATF]-1659908190929
GPR[EPVATF]-1659908192243
GPR[SPS]-1659908192243
GPR[EPS]-1659908193475
GPR[SPVATR]-1659908193475
[98111] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1417: PRECONDITION node2.type < com.google.javascript.rhino.Node.VAR_ARGS_NAME
[98526] INFO TestPatch - Running test suite to check the patch "node2.type < com.google.javascript.rhino.Node.VAR_ARGS_NAME" is working
GPR[EPVATR]-1659908194137
[98774] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659908194138
[98803] INFO NoPol - --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1416,7 +1416,9 @@
       if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        if (node2.type < com.google.javascript.rhino.Node.VAR_ARGS_NAME) {
+          return "Node tree inequality:" +
+          "\nTree1:\n" + toStringTree() +
+          "\n\nTree2:\n" + node2.toStringTree() +
+          "\n\nSubtree1: " + diff.nodeA.toStringTree() +
+          "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/132/seed_261/patch_94201_1ts_1659908194167.diff
GPR[ESUN]-1659908194168
GPR[SSUN]-1659908194168
1613130706
GPR[SPVATF]-1659908194394
GPR[EPVATF]-1659908194621
[99258] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908194622
GPR[EPVATF]-1659908194847
[99483] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908194847
GPR[SSUN]-1659908194847
1613130706
GPR[SPVATF]-1659908195057
GPR[EPVATF]-1659908195280
[99916] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908195280
GPR[EPVATF]-1659908195507
[100143] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908195507
GPR[SSUN]-1659908195507
1613130706
GPR[ESUN]-1659908195712
GPR[SSUN]-1659908195712
1613130706
GPR[ESUN]-1659908195915
GPR[SSUN]-1659908195915
1613130706
GPR[ESUN]-1659908196123
GPR[SSUN]-1659908196123
1613130706
GPR[ESUN]-1659908196335
GPR[SSUN]-1659908196335
1613130706
GPR[SPVATF]-1659908196540
GPR[EPVATF]-1659908196759
[101395] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908196760
GPR[EPVATF]-1659908196982
[101618] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908196982
GPR[SSUN]-1659908196982
214953636
GPR[SPVATF]-1659908197211
GPR[EPVATF]-1659908197717
GPR[SPS]-1659908197717
[102944] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:773.
GPR[EPS]-1659908198308
GPR[SPVATF]-1659908198309
GPR[EPVATF]-1659908198828
GPR[SPS]-1659908198828
[104046] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:773.
GPR[EPS]-1659908199410
GPR[ESUN]-1659908199410
GPR[SSUN]-1659908199410
214953636
GPR[ESUN]-1659908199629
GPR[SSUN]-1659908199629
214953636
GPR[ESUN]-1659908199850
GPR[SSUN]-1659908199850
1613130706
GPR[SPVATF]-1659908200062
GPR[EPVATF]-1659908200287
[104923] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908200288
GPR[SSUN]-1659908200288
1613130706
GPR[ESUN]-1659908200503
GPR[SSUN]-1659908200503
1613130706
GPR[SPVATF]-1659908200723
GPR[EPVATF]-1659908200955
[105591] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908200956
GPR[EPVATF]-1659908201186
[105822] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908201186
GPR[SSUN]-1659908201186
1613130706
GPR[ESUN]-1659908201416
GPR[SSUN]-1659908201416
1613130706
GPR[SPVATF]-1659908201626
GPR[EPVATF]-1659908201857
[106493] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908201858
GPR[EPVATF]-1659908202094
[106730] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908202095
GPR[SSUN]-1659908202095
-1966087783
GPR[ESUN]-1659908202290
GPR[SSUN]-1659908202290
-1966087783
GPR[SPVATF]-1659908202483
GPR[EPVATF]-1659908202552
[107189] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908202553
GPR[EPVATF]-1659908202619
[107255] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908202619
GPR[SSUN]-1659908202619
-1966087783
GPR[SPVATF]-1659908202807
GPR[EPVATF]-1659908202875
[107511] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908202875
GPR[SSUN]-1659908202875
2346
GPR[ESUN]-1659908203059
GPR[SSUN]-1659908203059
2346
GPR[SPVATF]-1659908203240
GPR[EPVATF]-1659908203767
GPR[SPS]-1659908203767
[108843] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.IR:343.
GPR[EPS]-1659908204207
GPR[ESUN]-1659908204207
GPR[SSUN]-1659908204207
2346
GPR[SPVATF]-1659908204397
GPR[EPVATF]-1659908204937
GPR[SPS]-1659908204937
[110035] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.IR:342.
GPR[EPS]-1659908205399
GPR[ESUN]-1659908205399
GPR[SSUN]-1659908205399
2346
GPR[SPVATF]-1659908205588
GPR[EPVATF]-1659908206124
GPR[SPS]-1659908206124
[111197] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.IR:341.
GPR[EPS]-1659908206561
GPR[ESUN]-1659908206561
GPR[SSUN]-1659908206561
2433571
GPR[SPVATF]-1659908206807
GPR[EPVATF]-1659908207381
GPR[SPS]-1659908207381
[112666] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1433.
GPR[EPS]-1659908208030
GPR[ESUN]-1659908208031
GPR[SSUN]-1659908208031
-1966087783
GPR[SPVATF]-1659908208224
GPR[EPVATF]-1659908208295
[112931] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908208295
GPR[EPVATF]-1659908208364
[113000] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908208364
GPR[SSUN]-1659908208364
-1966087783
GPR[SPVATF]-1659908208555
GPR[EPVATF]-1659908208624
[113261] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908208625
GPR[EPVATF]-1659908208694
[113331] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908208695
GPR[SSUN]-1659908208695
-1966087783
GPR[SPVATF]-1659908208922
GPR[EPVATF]-1659908208993
[113629] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908208993
GPR[EPVATF]-1659908209063
[113699] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908209063
GPR[SSUN]-1659908209063
-1966087783
GPR[ESUN]-1659908209258
GPR[SSUN]-1659908209258
-1966087783
GPR[ESUN]-1659908209450
GPR[SSUN]-1659908209450
-1966087783
GPR[SPVATF]-1659908209638
GPR[EPVATF]-1659908209709
[114345] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908209709
GPR[EPVATF]-1659908209781
[114417] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908209781
GPR[SSUN]-1659908209781
-1966087783
GPR[SPVATF]-1659908209975
GPR[EPVATF]-1659908210048
[114684] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908210048
GPR[EPVATF]-1659908210122
[114758] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908210122
GPR[SSUN]-1659908210122
-1966087783
GPR[ESUN]-1659908210315
GPR[SSUN]-1659908210315
-1966087783
GPR[SPVATF]-1659908210508
GPR[EPVATF]-1659908210578
[115214] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908210578
GPR[SSUN]-1659908210578
-1966087783
GPR[SPVATF]-1659908210774
GPR[EPVATF]-1659908210843
[115479] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908210843
GPR[SSUN]-1659908210843
-1966087783
GPR[ESUN]-1659908211031
GPR[SSUN]-1659908211031
-1966087783
GPR[SPVATF]-1659908211215
GPR[EPVATF]-1659908211283
[115919] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908211283
GPR[SSUN]-1659908211283
-1966087783
GPR[ESUN]-1659908211476
GPR[SSUN]-1659908211476
-1966087783
GPR[ESUN]-1659908211661
GPR[SSUN]-1659908211661
-1966087783
GPR[SPVATF]-1659908211846
GPR[EPVATF]-1659908211918
[116554] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908211918
GPR[SSUN]-1659908211918
-1966087783
GPR[SPVATF]-1659908212104
GPR[EPVATF]-1659908212176
[116812] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908212176
GPR[SSUN]-1659908212176
-1966087783
GPR[SPVATF]-1659908212363
GPR[EPVATF]-1659908212428
[117064] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908212428
GPR[SSUN]-1659908212428
-718432441
GPR[SPVATF]-1659908212677
GPR[EPVATF]-1659908213214
GPR[SPS]-1659908213214
[118569] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:515.
GPR[EPS]-1659908213933
GPR[ESUN]-1659908213933
GPR[SSUN]-1659908213933
-718432441
GPR[SPVATF]-1659908214150
GPR[EPVATF]-1659908215661
GPR[SPS]-1659908215661
[120997] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:513.
GPR[EPS]-1659908216361
GPR[ESUN]-1659908216361
GPR[SSUN]-1659908216361
-718432441
GPR[SPVATF]-1659908216577
GPR[EPVATF]-1659908217115
GPR[SPS]-1659908217115
[122440] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:512.
GPR[EPS]-1659908217804
GPR[ESUN]-1659908217804
GPR[SSUN]-1659908217804
-1966087783
GPR[SPVATF]-1659908217995
GPR[EPVATF]-1659908218061
[122698] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908218062
GPR[SSUN]-1659908218062
-1966087783
GPR[SPVATF]-1659908218250
GPR[EPVATF]-1659908218314
[122950] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908218314
GPR[SSUN]-1659908218314
-1966087783
GPR[SPVATF]-1659908218519
GPR[EPVATF]-1659908218584
[123220] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908218584
GPR[SSUN]-1659908218584
-1966087783
GPR[SPVATF]-1659908218769
GPR[EPVATF]-1659908218834
[123470] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908218834
GPR[SSUN]-1659908218834
-1966087783
GPR[SPVATF]-1659908219024
GPR[EPVATF]-1659908219089
[123725] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908219089
GPR[SSUN]-1659908219089
-1966087783
GPR[SPVATF]-1659908219286
GPR[EPVATF]-1659908219351
[123987] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908219351
GPR[EPVATF]-1659908219413
[124049] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908219413
GPR[SSUN]-1659908219413
-1966087783
GPR[ESUN]-1659908219606
GPR[SSUN]-1659908219606
2433571
GPR[ESUN]-1659908219839
GPR[SSUN]-1659908219839
2433571
GPR[ESUN]-1659908220072
GPR[SSUN]-1659908220072
-675467674
GPR[ESUN]-1659908220253
GPR[SSUN]-1659908220253
2433571
GPR[SPVATF]-1659908220488
GPR[EPVATF]-1659908221025
GPR[SPS]-1659908221025
[126317] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:956.
GPR[EPS]-1659908221681
GPR[ESUN]-1659908221681
GPR[SSUN]-1659908221681
2433571
GPR[SPVATF]-1659908221937
GPR[EPVATF]-1659908222477
GPR[SPS]-1659908222477
[127758] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:955.
GPR[EPS]-1659908223122
GPR[ESUN]-1659908223122
GPR[SSUN]-1659908223122
80988634
GPR[ESUN]-1659908223300
GPR[SSUN]-1659908223301
214953636
GPR[SPVATF]-1659908223525
GPR[EPVATF]-1659908224057
GPR[SPS]-1659908224057
[129269] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:990.
GPR[EPS]-1659908224633
GPR[SPVATF]-1659908224633
GPR[EPVATF]-1659908225197
GPR[SPS]-1659908225197
[130548] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:990.
GPR[EPS]-1659908225912
GPR[ESUN]-1659908225912
GPR[SSUN]-1659908225912
214953636
GPR[ESUN]-1659908226136
GPR[SSUN]-1659908226136
214953636
GPR[SPVATF]-1659908226356
GPR[EPVATF]-1659908226897
GPR[SPS]-1659908226897
[132104] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:913.
GPR[EPS]-1659908227468
GPR[ESUN]-1659908227468
GPR[SSUN]-1659908227468
GPR[ESUN]-1659908227468
GPR[SSUN]-1659908227468
GPR[ESUN]-1659908227468
GPR[SSUN]-1659908227468
GPR[ESUN]-1659908227468
GPR[SSUN]-1659908227468
GPR[ESUN]-1659908227468
GPR[SSUN]-1659908227468
GPR[ESUN]-1659908227468
GPR[SSUN]-1659908227468
214953636
GPR[ESUN]-1659908227699
GPR[SSUN]-1659908227699
214953636
GPR[SPVATF]-1659908227920
GPR[EPVATF]-1659908228468
GPR[SPS]-1659908228468
[133701] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:963.
GPR[EPS]-1659908229065
GPR[ESUN]-1659908229065
GPR[SSUN]-1659908229065
-132053243
GPR[SPVATF]-1659908229265
GPR[EPVATF]-1659908229330
[133966] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908229330
GPR[SSUN]-1659908229330
-132053243
GPR[SPVATF]-1659908229590
GPR[EPVATF]-1659908229657
[134293] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908229658
GPR[SSUN]-1659908229658
-132053243
GPR[SPVATF]-1659908229852
GPR[EPVATF]-1659908229920
[134556] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908229920
GPR[SSUN]-1659908229920
214953636
GPR[ESUN]-1659908230148
GPR[SSUN]-1659908230148
214953636
GPR[SPVATF]-1659908230371
GPR[EPVATF]-1659908230923
GPR[SPS]-1659908230923
[136140] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:988.
GPR[EPS]-1659908231504
GPR[SPVATF]-1659908231504
GPR[EPVATF]-1659908232068
GPR[SPS]-1659908232069
[137310] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:988.
GPR[EPS]-1659908232674
GPR[ESUN]-1659908232674
GPR[SSUN]-1659908232674
214953636
GPR[SPVATF]-1659908232892
GPR[EPVATF]-1659908233454
GPR[SPS]-1659908233454
[138662] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:987.
GPR[EPS]-1659908234026
GPR[SPVATF]-1659908234027
GPR[EPVATF]-1659908234603
GPR[SPS]-1659908234603
[139812] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:987.
GPR[EPS]-1659908235176
GPR[ESUN]-1659908235176
GPR[SSUN]-1659908235176
214953636
GPR[SPVATF]-1659908235400
GPR[EPVATF]-1659908235985
GPR[SPS]-1659908235985
[141228] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:770.
GPR[EPS]-1659908236592
GPR[SPVATF]-1659908236592
GPR[EPVATF]-1659908237171
GPR[SPS]-1659908237171
[142379] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:770.
GPR[EPS]-1659908237743
GPR[ESUN]-1659908237743
GPR[SSUN]-1659908237743
214953636
GPR[ESUN]-1659908237961
GPR[SSUN]-1659908237961
214953636
GPR[ESUN]-1659908238178
GPR[SSUN]-1659908238178
214953636
GPR[SPVATF]-1659908238398
GPR[EPVATF]-1659908238994
GPR[SPS]-1659908238994
[144244] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:749.
GPR[EPS]-1659908239608
GPR[SPVATF]-1659908239608
GPR[EPVATF]-1659908240216
GPR[SPS]-1659908240216
[145412] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:749.
GPR[EPS]-1659908240776
GPR[ESUN]-1659908240776
GPR[SSUN]-1659908240776
214953636
GPR[ESUN]-1659908240996
GPR[SSUN]-1659908240996
214953636
GPR[SPVATF]-1659908241214
GPR[EPVATF]-1659908241829
GPR[SPS]-1659908241829
[147027] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:911.
GPR[EPS]-1659908242391
GPR[SPVATF]-1659908242391
GPR[EPVATF]-1659908243015
GPR[SPS]-1659908243015
[148255] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:911.
GPR[EPS]-1659908243619
GPR[ESUN]-1659908243619
GPR[SSUN]-1659908243619
214953636
GPR[ESUN]-1659908243843
GPR[SSUN]-1659908243843
214953636
GPR[ESUN]-1659908244059
GPR[SSUN]-1659908244059
214953636
GPR[SPVATF]-1659908244274
GPR[EPVATF]-1659908244902
GPR[SPS]-1659908244902
[150096] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:906.
GPR[EPS]-1659908245460
GPR[ESUN]-1659908245460
GPR[SSUN]-1659908245460
214953636
GPR[SPVATF]-1659908245679
GPR[EPVATF]-1659908246319
GPR[SPS]-1659908246319
[151512] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:905.
GPR[EPS]-1659908246876
GPR[ESUN]-1659908246876
GPR[SSUN]-1659908246876
214953636
GPR[ESUN]-1659908247142
GPR[SSUN]-1659908247142
214953636
GPR[ESUN]-1659908247361
GPR[SSUN]-1659908247361
214953636
GPR[ESUN]-1659908247579
GPR[SSUN]-1659908247579
214953636
GPR[SPVATF]-1659908247800
GPR[EPVATF]-1659908249339
GPR[SPS]-1659908249339
[154628] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:896.
GPR[EPS]-1659908249992
GPR[SPVATF]-1659908249993
GPR[EPVATF]-1659908250637
GPR[SPS]-1659908250637
[155826] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:896.
GPR[EPS]-1659908251190
GPR[ESUN]-1659908251190
GPR[SSUN]-1659908251190
214953636
GPR[ESUN]-1659908251409
GPR[SSUN]-1659908251409
214953636
GPR[SPVATF]-1659908251629
GPR[EPVATF]-1659908252213
GPR[SPS]-1659908252213
[157407] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:893.
GPR[EPS]-1659908252771
GPR[ESUN]-1659908252771
GPR[SSUN]-1659908252771
214953636
GPR[SPVATF]-1659908253009
GPR[EPVATF]-1659908253585
GPR[SPS]-1659908253585
[158827] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:740.
GPR[EPS]-1659908254191
GPR[SPVATF]-1659908254192
GPR[EPVATF]-1659908254754
GPR[SPS]-1659908254754
[159947] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:740.
GPR[EPS]-1659908255311
GPR[ESUN]-1659908255311
GPR[SSUN]-1659908255311
214953636
GPR[SPVATF]-1659908255531
GPR[EPVATF]-1659908256096
GPR[SPS]-1659908256096
[161288] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:736.
GPR[EPS]-1659908256652
GPR[ESUN]-1659908256652
GPR[SSUN]-1659908256652
-132053243
GPR[SPVATF]-1659908256865
GPR[EPVATF]-1659908256931
[161567] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908256931
GPR[EPVATF]-1659908256995
[161631] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908256995
GPR[SSUN]-1659908256995
-132053243
GPR[ESUN]-1659908257178
GPR[SSUN]-1659908257178
GPR[ESUN]-1659908257178
GPR[SSUN]-1659908257178
GPR[ESUN]-1659908257178
GPR[SSUN]-1659908257178
-1345859678
GPR[ESUN]-1659908257423
GPR[SSUN]-1659908257424
2433571
GPR[ESUN]-1659908257658
GPR[SSUN]-1659908257658
-132053243
GPR[ESUN]-1659908257846
GPR[SSUN]-1659908257846
-132053243
GPR[SPVATF]-1659908258033
GPR[EPVATF]-1659908258099
[162735] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908258099
GPR[EPVATF]-1659908258165
[162801] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908258165
GPR[SSUN]-1659908258165
-132053243
GPR[ESUN]-1659908258350
GPR[SSUN]-1659908258350
-132053243
GPR[ESUN]-1659908258534
GPR[SSUN]-1659908258534
-132053243
GPR[ESUN]-1659908258719
GPR[SSUN]-1659908258719
-132053243
GPR[SPVATF]-1659908258901
GPR[EPVATF]-1659908258966
[163602] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908258966
GPR[EPVATF]-1659908259029
[163665] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908259029
GPR[SSUN]-1659908259029
-132053243
GPR[SPVATF]-1659908259215
GPR[EPVATF]-1659908259281
[163917] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908259281
GPR[SSUN]-1659908259281
1187751237
GPR[ESUN]-1659908259558
GPR[SSUN]-1659908259558
214953636
GPR[SPVATF]-1659908259780
GPR[EPVATF]-1659908260397
GPR[SPS]-1659908260397
[165605] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:950.
GPR[EPS]-1659908260969
GPR[ESUN]-1659908260969
GPR[SSUN]-1659908260969
214953636
GPR[SPVATF]-1659908261193
GPR[EPVATF]-1659908261779
GPR[SPS]-1659908261779
[166977] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:937.
GPR[EPS]-1659908262341
GPR[SPVATF]-1659908262341
GPR[EPVATF]-1659908262931
GPR[SPS]-1659908262931
[168130] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:937.
GPR[EPS]-1659908263494
GPR[ESUN]-1659908263495
GPR[SSUN]-1659908263495
80988634
GPR[ESUN]-1659908263668
GPR[SSUN]-1659908263668
-132053243
GPR[SPVATF]-1659908263858
GPR[EPVATF]-1659908263921
[168557] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908263921
GPR[SSUN]-1659908263921
-132053243
GPR[SPVATF]-1659908264135
GPR[EPVATF]-1659908264201
[168837] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908264201
GPR[SSUN]-1659908264201
-132053243
GPR[SPVATF]-1659908264387
GPR[EPVATF]-1659908264455
[169092] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908264456
GPR[EPVATF]-1659908264525
[169161] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908264525
GPR[SSUN]-1659908264525
80988634
GPR[ESUN]-1659908264697
GPR[SSUN]-1659908264697
2433571
GPR[ESUN]-1659908264931
GPR[SSUN]-1659908264931
2433571
GPR[SPVATF]-1659908265163
GPR[EPVATF]-1659908265773
GPR[SPS]-1659908265773
[171036] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:981.
GPR[EPS]-1659908266400
GPR[ESUN]-1659908266400
GPR[SSUN]-1659908266400
2433571
GPR[SPVATF]-1659908266635
GPR[EPVATF]-1659908267241
GPR[SPS]-1659908267241
[172523] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:980.
GPR[EPS]-1659908267887
GPR[ESUN]-1659908267887
GPR[SSUN]-1659908267887
2433571
GPR[SPVATF]-1659908268125
GPR[EPVATF]-1659908268737
GPR[SPS]-1659908268738
[174007] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int INFERRED_FUNCTION = 55;

    public static final int LAST_PROP = 55;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            case com.google.javascript.rhino.Node.INFERRED_FUNCTION :
                return "inferred";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private static abstract class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double value) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String value) throws java.lang.UnsupportedOperationException {
        if ((this.getType() == com.google.javascript.rhino.Token.STRING) || (this.getType() == com.google.javascript.rhino.Token.NAME)) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(49).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.INFERRED_FUNCTION",com.google.javascript.rhino.Node.INFERRED_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            if (com.google.javascript.rhino.Node.this.last!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.parent!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.next!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.first!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            value = x.toString();

                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            java.lang.String name = getString();
            return name.isEmpty() ? null : name;
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public com.google.javascript.rhino.Node setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
        return this;
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCast() {
        return this.getType() == com.google.javascript.rhino.Token.CAST;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[174007] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659908269371
GPR[SSUN]-1659908269371
2433571
GPR[SPVATF]-1659908269606
GPR[EPVATF]-1659908270230
GPR[SPS]-1659908270230
[175472] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int INFERRED_FUNCTION = 55;

    public static final int LAST_PROP = 55;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            case com.google.javascript.rhino.Node.INFERRED_FUNCTION :
                return "inferred";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private static abstract class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double value) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String value) throws java.lang.UnsupportedOperationException {
        if ((this.getType() == com.google.javascript.rhino.Token.STRING) || (this.getType() == com.google.javascript.rhino.Token.NAME)) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(50).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.INFERRED_FUNCTION",com.google.javascript.rhino.Node.INFERRED_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    if (com.google.javascript.rhino.Node.this.last!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.parent!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.next!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.first!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectionEnds();
                }
                if (runtimeAngelicValue)
                    switch (type) {
                        default :
                            value = x.toString();
                            break;
                    }

                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            java.lang.String name = getString();
            return name.isEmpty() ? null : name;
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public com.google.javascript.rhino.Node setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
        return this;
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCast() {
        return this.getType() == com.google.javascript.rhino.Token.CAST;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[175472] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659908270836
GPR[SSUN]-1659908270836
2433571
GPR[SPVATF]-1659908271100
GPR[EPVATF]-1659908271800
GPR[SPS]-1659908271800
[177055] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:973.
GPR[EPS]-1659908272419
GPR[ESUN]-1659908272419
GPR[SSUN]-1659908272420
2433571
GPR[SPVATF]-1659908272655
GPR[EPVATF]-1659908273317
GPR[SPS]-1659908273317
[178593] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:972.
GPR[EPS]-1659908273957
GPR[ESUN]-1659908273957
GPR[SSUN]-1659908273957
2433571
GPR[SPVATF]-1659908274195
GPR[EPVATF]-1659908274871
GPR[SPS]-1659908274871
[180169] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:971.
GPR[EPS]-1659908275533
GPR[ESUN]-1659908275533
GPR[SSUN]-1659908275534
2433571
GPR[ESUN]-1659908275768
GPR[SSUN]-1659908275769
2433571
GPR[ESUN]-1659908275993
GPR[SSUN]-1659908275993
2433571
GPR[SPVATF]-1659908276230
GPR[EPVATF]-1659908276945
GPR[SPS]-1659908276945
[182206] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:962.
GPR[EPS]-1659908277570
GPR[ESUN]-1659908277570
GPR[SSUN]-1659908277570
2433571
GPR[SPVATF]-1659908277810
GPR[EPVATF]-1659908278538
GPR[SPS]-1659908278538
[183831] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:961.
GPR[EPS]-1659908279195
GPR[ESUN]-1659908279195
GPR[SSUN]-1659908279195
2433571
GPR[SPVATF]-1659908279434
GPR[EPVATF]-1659908280187
GPR[SPS]-1659908280187
[185445] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:868.
GPR[EPS]-1659908280809
GPR[ESUN]-1659908280809
GPR[SSUN]-1659908280809
2433571
GPR[SPVATF]-1659908281046
GPR[EPVATF]-1659908281820
GPR[SPS]-1659908281820
[187079] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:867.
GPR[EPS]-1659908282443
GPR[ESUN]-1659908282444
GPR[SSUN]-1659908282444
2433571
GPR[SPVATF]-1659908282682
GPR[EPVATF]-1659908283484
GPR[SPS]-1659908283484
[188740] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:862.
GPR[EPS]-1659908284104
GPR[ESUN]-1659908284104
GPR[SSUN]-1659908284104
2433571
GPR[ESUN]-1659908284335
GPR[SSUN]-1659908284335
2433571
GPR[ESUN]-1659908284567
GPR[SSUN]-1659908284567
2433571
GPR[ESUN]-1659908284801
GPR[SSUN]-1659908284801
881600600
GPR[ESUN]-1659908284993
GPR[SSUN]-1659908284993
-132053243
GPR[ESUN]-1659908285179
GPR[SSUN]-1659908285179
-132053243
GPR[SPVATF]-1659908285477
GPR[EPVATF]-1659908285546
[190182] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908285546
GPR[EPVATF]-1659908285613
[190249] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908285613
GPR[SSUN]-1659908285613
-132053243
GPR[ESUN]-1659908285799
GPR[SSUN]-1659908285799
-132053243
GPR[SPVATF]-1659908285983
GPR[EPVATF]-1659908286051
[190688] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908286052
GPR[SSUN]-1659908286052
-132053243
GPR[SPVATF]-1659908286237
GPR[EPVATF]-1659908286307
[190943] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908286307
GPR[SSUN]-1659908286307
-132053243
GPR[SPVATF]-1659908286493
GPR[EPVATF]-1659908286560
[191196] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908286560
GPR[SSUN]-1659908286560
-132053243
GPR[SPVATF]-1659908286745
GPR[EPVATF]-1659908286814
[191450] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908286814
GPR[SSUN]-1659908286814
-132053243
GPR[SPVATF]-1659908287040
GPR[EPVATF]-1659908287109
[191745] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908287109
GPR[SSUN]-1659908287109
-132053243
GPR[ESUN]-1659908287296
GPR[SSUN]-1659908287296
80988634
GPR[ESUN]-1659908287468
GPR[SSUN]-1659908287468
-1966087783
GPR[ESUN]-1659908287657
GPR[SSUN]-1659908287657
1627430776
GPR[ESUN]-1659908287850
GPR[SSUN]-1659908287850
1627430776
GPR[SPVATF]-1659908288040
GPR[EPVATF]-1659908288798
GPR[SPS]-1659908288798
[193910] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeOptimizationsPass:102.
GPR[EPS]-1659908289274
GPR[ESUN]-1659908289274
GPR[SSUN]-1659908289274
79183632
GPR[ESUN]-1659908289471
GPR[SSUN]-1659908289471
79183632
GPR[SPVATF]-1659908289663
GPR[EPVATF]-1659908290434
GPR[SPS]-1659908290434
[195537] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractPeepholeOptimization:74.
GPR[EPS]-1659908290901
GPR[ESUN]-1659908290901
GPR[SSUN]-1659908290901
-1966087783
GPR[SPVATF]-1659908291096
GPR[EPVATF]-1659908291162
[195798] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908291162
GPR[EPVATF]-1659908291235
[195871] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908291235
GPR[SSUN]-1659908291235
214953636
GPR[SPVATF]-1659908291458
GPR[EPVATF]-1659908292297
GPR[SPS]-1659908292297
[197497] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:930.
GPR[EPS]-1659908292861
GPR[SPVATF]-1659908292861
GPR[EPVATF]-1659908293665
GPR[SPS]-1659908293665
[198866] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:930.
GPR[EPS]-1659908294230
GPR[ESUN]-1659908294230
GPR[SSUN]-1659908294230
214953636
GPR[ESUN]-1659908294453
GPR[SSUN]-1659908294453
2433571
GPR[SPVATF]-1659908294685
GPR[EPVATF]-1659908295511
GPR[SPS]-1659908295511
[200744] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1025.
GPR[EPS]-1659908296108
GPR[ESUN]-1659908296108
GPR[SSUN]-1659908296108
2433571
GPR[SPVATF]-1659908296343
GPR[EPVATF]-1659908297211
GPR[SPS]-1659908297211
[202435] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1018.
GPR[EPS]-1659908297799
GPR[ESUN]-1659908297799
GPR[SSUN]-1659908297799
2433571
GPR[ESUN]-1659908298035
GPR[SSUN]-1659908298035
2433571
GPR[ESUN]-1659908298268
GPR[SSUN]-1659908298268
2433571
GPR[SPVATF]-1659908298499
GPR[EPVATF]-1659908299329
GPR[SPS]-1659908299329
[204555] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1022.
GPR[EPS]-1659908299919
GPR[ESUN]-1659908299919
GPR[SSUN]-1659908299919
2433571
GPR[SPVATF]-1659908300154
GPR[EPVATF]-1659908300994
GPR[SPS]-1659908300994
[206269] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1021.
GPR[EPS]-1659908301633
GPR[ESUN]-1659908301633
GPR[SSUN]-1659908301633
2433571
GPR[SPVATF]-1659908301869
GPR[EPVATF]-1659908302699
GPR[SPS]-1659908302699
[207932] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1020.
GPR[EPS]-1659908303296
GPR[ESUN]-1659908303296
GPR[SSUN]-1659908303296
2433571
GPR[SPVATF]-1659908303532
GPR[EPVATF]-1659908304355
GPR[SPS]-1659908304355
[209593] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1017.
GPR[EPS]-1659908304957
GPR[ESUN]-1659908304957
GPR[SSUN]-1659908304957
2433571
GPR[ESUN]-1659908305194
GPR[SSUN]-1659908305194
2433571
GPR[SPVATF]-1659908305427
GPR[EPVATF]-1659908306254
GPR[SPS]-1659908306254
[211561] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1012.
GPR[EPS]-1659908306925
GPR[ESUN]-1659908306925
GPR[SSUN]-1659908306925
2433571
GPR[ESUN]-1659908307162
GPR[SSUN]-1659908307162
2433571
GPR[SPVATF]-1659908307396
GPR[EPVATF]-1659908308216
GPR[SPS]-1659908308216
[214345] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1004.
GPR[EPS]-1659908309709
GPR[ESUN]-1659908309709
GPR[SSUN]-1659908309709
2433571
GPR[ESUN]-1659908309955
GPR[SSUN]-1659908309955
2433571
GPR[ESUN]-1659908310182
GPR[SSUN]-1659908310182
GPR[ESUN]-1659908310182
GPR[SSUN]-1659908310182
-1345859678
GPR[ESUN]-1659908310427
GPR[SSUN]-1659908310427
214953636
GPR[SPVATF]-1659908310650
GPR[EPVATF]-1659908311463
GPR[SPS]-1659908311463
[216726] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:928.
GPR[EPS]-1659908312090
GPR[SPVATF]-1659908312091
GPR[EPVATF]-1659908313263
GPR[SPS]-1659908313263
[218465] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:928.
GPR[EPS]-1659908313829
GPR[ESUN]-1659908313829
GPR[SSUN]-1659908313829
214953636
GPR[SPVATF]-1659908314052
GPR[EPVATF]-1659908314627
GPR[SPS]-1659908314627
[219845] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:927.
GPR[EPS]-1659908315209
GPR[SPVATF]-1659908315210
GPR[EPVATF]-1659908315797
GPR[SPS]-1659908315797
[220994] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:927.
GPR[EPS]-1659908316358
GPR[ESUN]-1659908316358
GPR[SSUN]-1659908316358
80988634
GPR[ESUN]-1659908316531
GPR[SSUN]-1659908316531
214953636
GPR[SPVATF]-1659908316754
GPR[EPVATF]-1659908317341
GPR[SPS]-1659908317341
[222541] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:652.
GPR[EPS]-1659908317905
GPR[SPVATF]-1659908317905
GPR[EPVATF]-1659908318495
GPR[SPS]-1659908318495
[223694] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:652.
GPR[EPS]-1659908319058
GPR[ESUN]-1659908319058
GPR[SSUN]-1659908319058
214953636
GPR[ESUN]-1659908319302
GPR[SSUN]-1659908319302
214953636
GPR[ESUN]-1659908319520
GPR[SSUN]-1659908319520
2433571
GPR[SPVATF]-1659908319754
GPR[EPVATF]-1659908320352
GPR[SPS]-1659908320352
[225622] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:943.
GPR[EPS]-1659908320986
GPR[ESUN]-1659908320986
GPR[SSUN]-1659908320986
2433571
GPR[SPVATF]-1659908321235
GPR[EPVATF]-1659908321835
GPR[SPS]-1659908321835
[227102] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:942.
GPR[EPS]-1659908322466
GPR[ESUN]-1659908322466
GPR[SSUN]-1659908322466
-534884160
GPR[SPVATF]-1659908322815
GPR[EPVATF]-1659908323454
GPR[SPS]-1659908323454
[228995] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Compiler extends com.google.javascript.jscomp.AbstractCompiler {
    static final java.lang.String SINGLETON_MODULE_NAME = "[singleton]";

    static final com.google.javascript.jscomp.DiagnosticType MODULE_DEPENDENCY_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_MODULE_DEPENDENCY_ERROR", "Bad dependency: {0} -> {1}. " + "Modules must be listed in dependency order.");

    static final com.google.javascript.jscomp.DiagnosticType MISSING_ENTRY_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_MISSING_ENTRY_ERROR", "required entry point \"{0}\" never provided");

    static final com.google.javascript.jscomp.DiagnosticType MISSING_MODULE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_MISSING_ENTRY_ERROR", "unknown module \"{0}\" specified in entry point spec");

    static final java.lang.String PARSING_PASS_NAME = "parseInputs";

    private static final java.lang.String CONFIG_RESOURCE = "com.google.javascript.jscomp.parsing.ParserConfig";

    com.google.javascript.jscomp.CompilerOptions options = null;

    private com.google.javascript.jscomp.PassConfig passes = null;

    private java.util.List<com.google.javascript.jscomp.CompilerInput> externs;

    private java.util.List<com.google.javascript.jscomp.JSModule> modules;

    private com.google.javascript.jscomp.JSModuleGraph moduleGraph;

    private java.util.List<com.google.javascript.jscomp.CompilerInput> inputs;

    private com.google.javascript.jscomp.ErrorManager errorManager;

    private com.google.javascript.jscomp.WarningsGuard warningsGuard;

    private final java.util.Map<java.lang.String, com.google.javascript.rhino.Node> injectedLibraries = com.google.common.collect.Maps.newLinkedHashMap();

    com.google.javascript.rhino.Node externsRoot;

    com.google.javascript.rhino.Node jsRoot;

    com.google.javascript.rhino.Node externAndJsRoot;

    private java.util.Map<com.google.javascript.rhino.InputId, com.google.javascript.jscomp.CompilerInput> inputsById;

    private com.google.javascript.jscomp.SourceMap sourceMap;

    private java.lang.String externExports = null;

    private int uniqueNameId = 0;

    private boolean hasRegExpGlobalReferences = true;

    private com.google.javascript.jscomp.FunctionInformationMap functionInformationMap;

    private final java.lang.StringBuilder debugLog = new java.lang.StringBuilder();

    com.google.javascript.jscomp.CodingConvention defaultCodingConvention = new com.google.javascript.jscomp.ClosureCodingConvention();

    private com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private com.google.javascript.jscomp.parsing.Config parserConfig = null;

    private com.google.javascript.jscomp.type.ReverseAbstractInterpreter abstractInterpreter;

    private com.google.javascript.jscomp.TypeValidator typeValidator;

    public com.google.javascript.jscomp.PerformanceTracker tracker;

    private final com.google.javascript.rhino.ErrorReporter oldErrorReporter = com.google.javascript.jscomp.RhinoErrorReporter.forOldRhino(this);

    private final com.google.javascript.rhino.head.ErrorReporter defaultErrorReporter = com.google.javascript.jscomp.RhinoErrorReporter.forNewRhino(this);

    public static final com.google.javascript.jscomp.DiagnosticType OPTIMIZE_LOOP_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_OPTIMIZE_LOOP_ERROR", "Exceeded max number of optimization iterations: {0}");

    public static final com.google.javascript.jscomp.DiagnosticType MOTION_ITERATIONS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_OPTIMIZE_LOOP_ERROR", "Exceeded max number of code motion iterations: {0}");

    private static final long COMPILER_STACK_SIZE = 1 << 21;

    private static final java.util.concurrent.ExecutorService compilerExecutor = java.util.concurrent.Executors.newCachedThreadPool(new java.util.concurrent.ThreadFactory() {
        @java.lang.Override
        public java.lang.Thread newThread(java.lang.Runnable r) {
            return new java.lang.Thread(null, r, "jscompiler", com.google.javascript.jscomp.Compiler.COMPILER_STACK_SIZE);
        }
    });

    private java.lang.Thread compilerThread = null;

    private boolean useThreads = true;

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger("com.google.javascript.jscomp");

    private final java.io.PrintStream outStream;

    private com.google.javascript.jscomp.GlobalVarReferenceMap globalRefMap = null;

    private volatile double progress = 0.0;

    private java.lang.String lastPassName;

    public Compiler() {
        this(((java.io.PrintStream) (null)));
    }

    public Compiler(java.io.PrintStream stream) {
        addChangeHandler(recentChange);
        outStream = stream;
    }

    public Compiler(com.google.javascript.jscomp.ErrorManager errorManager) {
        this();
        setErrorManager(errorManager);
    }

    public void setErrorManager(com.google.javascript.jscomp.ErrorManager errorManager) {
        com.google.common.base.Preconditions.checkNotNull(errorManager, "the error manager cannot be null");
        this.errorManager = errorManager;
    }

    private com.google.javascript.jscomp.MessageFormatter createMessageFormatter() {
        boolean colorize = options.shouldColorizeErrorOutput();
        return options.errorFormat.toFormatter(this, colorize);
    }

    public void initOptions(com.google.javascript.jscomp.CompilerOptions options) {
        this.options = options;
        if (errorManager == null) {
            if (outStream == null) {
                setErrorManager(new com.google.javascript.jscomp.LoggerErrorManager(createMessageFormatter(), com.google.javascript.jscomp.Compiler.logger));
            } else {
                com.google.javascript.jscomp.PrintStreamErrorManager printer = new com.google.javascript.jscomp.PrintStreamErrorManager(createMessageFormatter(), outStream);
                printer.setSummaryDetailLevel(options.summaryDetailLevel);
                setErrorManager(printer);
            }
        }
        reconcileOptionsWithGuards();
        java.util.List<com.google.javascript.jscomp.WarningsGuard> guards = com.google.common.collect.Lists.newArrayList();
        guards.add(new com.google.javascript.jscomp.SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));
        guards.add(options.getWarningsGuard());
        this.warningsGuard = new com.google.javascript.jscomp.ComposeWarningsGuard(guards);
    }

    protected void reconcileOptionsWithGuards() {
        if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES)) {
            options.checkTypes = true;
        } else if (options.disables(com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES)) {
            options.checkTypes = false;
        } else if (!options.checkTypes) {
            options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroup.forType(com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR), com.google.javascript.jscomp.CheckLevel.OFF);
        }
        if (options.checkGlobalThisLevel.isOn() && (!options.disables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS))) {
            options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);
        }
        if (options.getLanguageIn() == com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT) {
            options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT, com.google.javascript.jscomp.CheckLevel.ERROR);
        }
        if ((!options.checkSymbols) && (!options.enables(com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES))) {
            options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES, com.google.javascript.jscomp.CheckLevel.OFF);
        }
    }

    @java.lang.Deprecated
    public void init(com.google.javascript.jscomp.JSSourceFile[] externs, com.google.javascript.jscomp.JSSourceFile[] inputs, com.google.javascript.jscomp.CompilerOptions options) {
        init(com.google.common.collect.Lists.<com.google.javascript.jscomp.JSSourceFile>newArrayList(externs), com.google.common.collect.Lists.<com.google.javascript.jscomp.JSSourceFile>newArrayList(inputs), options);
    }

    public <T1 extends com.google.javascript.jscomp.SourceFile, T2 extends com.google.javascript.jscomp.SourceFile> void init(java.util.List<T1> externs, java.util.List<T2> inputs, com.google.javascript.jscomp.CompilerOptions options) {
        com.google.javascript.jscomp.JSModule module = new com.google.javascript.jscomp.JSModule(com.google.javascript.jscomp.Compiler.SINGLETON_MODULE_NAME);
        for (com.google.javascript.jscomp.SourceFile input : inputs) {
            module.add(input);
        }
        initModules(externs, com.google.common.collect.Lists.newArrayList(module), options);
    }

    @java.lang.Deprecated
    public void init(com.google.javascript.jscomp.JSSourceFile[] externs, com.google.javascript.jscomp.JSModule[] modules, com.google.javascript.jscomp.CompilerOptions options) {
        initModules(com.google.common.collect.Lists.<com.google.javascript.jscomp.SourceFile>newArrayList(externs), com.google.common.collect.Lists.<com.google.javascript.jscomp.JSModule>newArrayList(modules), options);
    }

    public <T extends com.google.javascript.jscomp.SourceFile> void initModules(java.util.List<T> externs, java.util.List<com.google.javascript.jscomp.JSModule> modules, com.google.javascript.jscomp.CompilerOptions options) {
        initOptions(options);
        checkFirstModule(modules);
        com.google.javascript.jscomp.Compiler.fillEmptyModules(modules);
        this.externs = makeCompilerInput(externs, true);
        this.modules = modules;
        if (modules.size() > 1) {
            try {
                this.moduleGraph = new com.google.javascript.jscomp.JSModuleGraph(modules);
            } catch (com.google.javascript.jscomp.JSModuleGraph.ModuleDependenceException e) {
                report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.MODULE_DEPENDENCY_ERROR, e.getModule().getName(), e.getDependentModule().getName()));
                return;
            }
        } else {
            this.moduleGraph = null;
        }
        this.inputs = com.google.javascript.jscomp.Compiler.getAllInputsFromModules(modules);
        initBasedOnOptions();
        initInputsByIdMap();
    }

    private void initBasedOnOptions() {
        if (options.sourceMapOutputPath != null) {
            sourceMap = options.sourceMapFormat.getInstance();
            sourceMap.setPrefixMappings(options.sourceMapLocationMappings);
        }
    }

    private <T extends com.google.javascript.jscomp.SourceFile> java.util.List<com.google.javascript.jscomp.CompilerInput> makeCompilerInput(java.util.List<T> files, boolean isExtern) {
        java.util.List<com.google.javascript.jscomp.CompilerInput> inputs = com.google.common.collect.Lists.newArrayList();
        for (T file : files) {
            inputs.add(new com.google.javascript.jscomp.CompilerInput(file, isExtern));
        }
        return inputs;
    }

    private static final com.google.javascript.jscomp.DiagnosticType EMPTY_MODULE_LIST_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_EMPTY_MODULE_LIST_ERROR", "At least one module must be provided");

    private static final com.google.javascript.jscomp.DiagnosticType EMPTY_ROOT_MODULE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_EMPTY_ROOT_MODULE_ERROR", "Root module '{0}' must contain at least one source code input");

    private void checkFirstModule(java.util.List<com.google.javascript.jscomp.JSModule> modules) {
        if (modules.isEmpty()) {
            report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.EMPTY_MODULE_LIST_ERROR));
        } else if (modules.get(0).getInputs().isEmpty() && (modules.size() > 1)) {
            report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.EMPTY_ROOT_MODULE_ERROR, modules.get(0).getName()));
        }
    }

    static java.lang.String createFillFileName(java.lang.String moduleName) {
        return ("[" + moduleName) + "]";
    }

    private static void fillEmptyModules(java.util.List<com.google.javascript.jscomp.JSModule> modules) {
        for (com.google.javascript.jscomp.JSModule module : modules) {
            if (module.getInputs().isEmpty()) {
                module.add(com.google.javascript.jscomp.SourceFile.fromCode(com.google.javascript.jscomp.Compiler.createFillFileName(module.getName()), ""));
            }
        }
    }

    public void rebuildInputsFromModules() {
        inputs = com.google.javascript.jscomp.Compiler.getAllInputsFromModules(modules);
        initInputsByIdMap();
    }

    private static java.util.List<com.google.javascript.jscomp.CompilerInput> getAllInputsFromModules(java.util.List<com.google.javascript.jscomp.JSModule> modules) {
        java.util.List<com.google.javascript.jscomp.CompilerInput> inputs = com.google.common.collect.Lists.newArrayList();
        java.util.Map<java.lang.String, com.google.javascript.jscomp.JSModule> inputMap = com.google.common.collect.Maps.newHashMap();
        for (com.google.javascript.jscomp.JSModule module : modules) {
            for (com.google.javascript.jscomp.CompilerInput input : module.getInputs()) {
                java.lang.String inputName = input.getName();
                inputs.add(input);
                inputMap.put(inputName, module);
            }
        }
        return inputs;
    }

    static final com.google.javascript.jscomp.DiagnosticType DUPLICATE_INPUT = com.google.javascript.jscomp.DiagnosticType.error("JSC_DUPLICATE_INPUT", "Duplicate input: {0}");

    static final com.google.javascript.jscomp.DiagnosticType DUPLICATE_EXTERN_INPUT = com.google.javascript.jscomp.DiagnosticType.error("JSC_DUPLICATE_EXTERN_INPUT", "Duplicate extern input: {0}");

    void initInputsByIdMap() {
        inputsById = new java.util.HashMap<com.google.javascript.rhino.InputId, com.google.javascript.jscomp.CompilerInput>();
        for (com.google.javascript.jscomp.CompilerInput input : externs) {
            com.google.javascript.rhino.InputId id = input.getInputId();
            com.google.javascript.jscomp.CompilerInput previous = putCompilerInput(id, input);
            if (previous != null) {
                report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.DUPLICATE_EXTERN_INPUT, input.getName()));
            }
        }
        for (com.google.javascript.jscomp.CompilerInput input : inputs) {
            com.google.javascript.rhino.InputId id = input.getInputId();
            com.google.javascript.jscomp.CompilerInput previous = putCompilerInput(id, input);
            if (previous != null) {
                report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT, input.getName()));
            }
        }
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.SourceFile extern, com.google.javascript.jscomp.SourceFile input, com.google.javascript.jscomp.CompilerOptions options) {
        return compile(com.google.common.collect.Lists.newArrayList(extern), com.google.common.collect.Lists.newArrayList(input), options);
    }

    @java.lang.Deprecated
    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.SourceFile extern, com.google.javascript.jscomp.JSSourceFile[] input, com.google.javascript.jscomp.CompilerOptions options) {
        return compile(com.google.common.collect.Lists.newArrayList(extern), com.google.common.collect.Lists.newArrayList(input), options);
    }

    @java.lang.Deprecated
    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.JSSourceFile extern, com.google.javascript.jscomp.JSModule[] modules, com.google.javascript.jscomp.CompilerOptions options) {
        return compileModules(com.google.common.collect.Lists.newArrayList(extern), com.google.common.collect.Lists.newArrayList(modules), options);
    }

    @java.lang.Deprecated
    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.JSSourceFile[] externs, com.google.javascript.jscomp.JSSourceFile[] inputs, com.google.javascript.jscomp.CompilerOptions options) {
        return compile(com.google.common.collect.Lists.<com.google.javascript.jscomp.SourceFile>newArrayList(externs), com.google.common.collect.Lists.<com.google.javascript.jscomp.SourceFile>newArrayList(inputs), options);
    }

    public <T1 extends com.google.javascript.jscomp.SourceFile, T2 extends com.google.javascript.jscomp.SourceFile> com.google.javascript.jscomp.Result compile(java.util.List<T1> externs, java.util.List<T2> inputs, com.google.javascript.jscomp.CompilerOptions options) {
        com.google.common.base.Preconditions.checkState(jsRoot == null);
        try {
            init(externs, inputs, options);
            if (hasErrors()) {
                return getResult();
            }
            return compile();
        } finally {
            com.google.javascript.jscomp.Tracer t = newTracer("generateReport");
            errorManager.generateReport();
            stopTracer(t, "generateReport");
        }
    }

    @java.lang.Deprecated
    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.JSSourceFile[] externs, com.google.javascript.jscomp.JSModule[] modules, com.google.javascript.jscomp.CompilerOptions options) {
        return compileModules(com.google.common.collect.Lists.<com.google.javascript.jscomp.SourceFile>newArrayList(externs), com.google.common.collect.Lists.<com.google.javascript.jscomp.JSModule>newArrayList(modules), options);
    }

    public <T extends com.google.javascript.jscomp.SourceFile> com.google.javascript.jscomp.Result compileModules(java.util.List<T> externs, java.util.List<com.google.javascript.jscomp.JSModule> modules, com.google.javascript.jscomp.CompilerOptions options) {
        com.google.common.base.Preconditions.checkState(jsRoot == null);
        try {
            initModules(externs, modules, options);
            if (hasErrors()) {
                return getResult();
            }
            return compile();
        } finally {
            com.google.javascript.jscomp.Tracer t = newTracer("generateReport");
            errorManager.generateReport();
            stopTracer(t, "generateReport");
        }
    }

    private com.google.javascript.jscomp.Result compile() {
        return runInCompilerThread(new java.util.concurrent.Callable<com.google.javascript.jscomp.Result>() {
            @java.lang.Override
            public com.google.javascript.jscomp.Result call() throws java.lang.Exception {
                compileInternal();
                return getResult();
            }
        });
    }

    public void disableThreads() {
        useThreads = false;
    }

    @java.lang.SuppressWarnings("unchecked")
    <T> T runInCompilerThread(final java.util.concurrent.Callable<T> callable) {
        final boolean dumpTraceReport = (options != null) && options.tracer.isOn();
        T result = null;
        final java.lang.Throwable[] exception = new java.lang.Throwable[1];
        java.util.concurrent.Callable<T> bootCompilerThread = new java.util.concurrent.Callable<T>() {
            @java.lang.Override
            public T call() {
                try {
                    compilerThread = java.lang.Thread.currentThread();
                    if (dumpTraceReport) {
                        com.google.javascript.jscomp.Tracer.initCurrentThreadTrace();
                    }
                    return callable.call();
                } catch (java.lang.Throwable e) {
                    exception[0] = e;
                } finally {
                    compilerThread = null;
                    if (dumpTraceReport) {
                        com.google.javascript.jscomp.Tracer.logAndClearCurrentThreadTrace();
                        tracker.outputTracerReport(outStream == null ? java.lang.System.out : outStream);
                    }
                }
                return null;
            }
        };
        com.google.common.base.Preconditions.checkState((compilerThread == null) || (compilerThread == java.lang.Thread.currentThread()), "Please do not share the Compiler across threads");
        if (useThreads && (compilerThread == null)) {
            try {
                result = com.google.javascript.jscomp.Compiler.compilerExecutor.submit(bootCompilerThread).get();
            } catch (java.lang.InterruptedException e) {
                throw com.google.common.base.Throwables.propagate(e);
            } catch (java.util.concurrent.ExecutionException e) {
                throw com.google.common.base.Throwables.propagate(e);
            }
        } else {
            try {
                result = callable.call();
            } catch (java.lang.Exception e) {
                exception[0] = e;
            }
        }
        if (exception[0] != null) {
            throw new java.lang.RuntimeException(exception[0]);
        }
        return result;
    }

    private void compileInternal() {
        setProgress(0.0, null);
        parse();
        setProgress(0.15, "parse");
        if (hasErrors()) {
            return;
        }
        if (!precheck()) {
            return;
        }
        if (options.nameAnonymousFunctionsOnly) {
            check();
            return;
        }
        if (!options.skipAllPasses) {
            check();
            if (hasErrors()) {
                return;
            }
            if (options.isExternExportsEnabled() || (options.externExportsPath != null)) {
                externExports();
            }
            if (!options.ideMode) {
                optimize();
            }
        }
        if (options.recordFunctionInformation) {
            recordFunctionInformation();
        }
        if (options.devMode == com.google.javascript.jscomp.CompilerOptions.DevMode.START_AND_END) {
            runSanityCheck();
        }
        setProgress(1.0, "recordFunctionInformation");
    }

    public void parse() {
        parseInputs();
    }

    com.google.javascript.jscomp.PassConfig getPassConfig() {
        if (passes == null) {
            passes = createPassConfigInternal();
        }
        return passes;
    }

    com.google.javascript.jscomp.PassConfig createPassConfigInternal() {
        return new com.google.javascript.jscomp.DefaultPassConfig(options);
    }

    public void setPassConfig(com.google.javascript.jscomp.PassConfig passes) {
        com.google.common.base.Preconditions.checkNotNull(passes);
        if (this.passes != null) {
            throw new java.lang.IllegalStateException("this.passes has already been assigned");
        }
        this.passes = passes;
    }

    boolean precheck() {
        return true;
    }

    public void check() {
        runCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.BEFORE_CHECKS);
        com.google.javascript.jscomp.PhaseOptimizer phaseOptimizer = new com.google.javascript.jscomp.PhaseOptimizer(this, tracker, new com.google.javascript.jscomp.PhaseOptimizer.ProgressRange(getProgress(), 1.0));
        if (options.devMode == com.google.javascript.jscomp.CompilerOptions.DevMode.EVERY_PASS) {
            phaseOptimizer.setSanityCheck(sanityCheck);
        }
        if (options.getCheckDeterminism()) {
            phaseOptimizer.setPrintAstHashcodes(true);
        }
        phaseOptimizer.consume(getPassConfig().getChecks());
        phaseOptimizer.process(externsRoot, jsRoot);
        if (hasErrors()) {
            return;
        }
        if (options.nameAnonymousFunctionsOnly) {
            return;
        }
        if (options.removeTryCatchFinally) {
            removeTryCatchFinally();
        }
        if ((((options.getTweakProcessing().shouldStrip() || (!options.stripTypes.isEmpty())) || (!options.stripNameSuffixes.isEmpty())) || (!options.stripTypePrefixes.isEmpty())) || (!options.stripNamePrefixes.isEmpty())) {
            stripCode(options.stripTypes, options.stripNameSuffixes, options.stripTypePrefixes, options.stripNamePrefixes);
        }
        runCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);
    }

    private void externExports() {
        com.google.javascript.jscomp.Compiler.logger.fine("Creating extern file for exports");
        startPass("externExports");
        com.google.javascript.jscomp.ExternExportsPass pass = new com.google.javascript.jscomp.ExternExportsPass(this);
        process(pass);
        externExports = pass.getGeneratedExterns();
        endPass();
    }

    @java.lang.Override
    void process(com.google.javascript.jscomp.CompilerPass p) {
        p.process(externsRoot, jsRoot);
    }

    private final com.google.javascript.jscomp.PassFactory sanityCheck = new com.google.javascript.jscomp.PassFactory("sanityCheck", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass create(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.SanityCheck(compiler);
        }
    };

    private void maybeSanityCheck() {
        if (options.devMode == com.google.javascript.jscomp.CompilerOptions.DevMode.EVERY_PASS) {
            runSanityCheck();
        }
    }

    private void runSanityCheck() {
        sanityCheck.create(this).process(externsRoot, jsRoot);
    }

    void removeTryCatchFinally() {
        com.google.javascript.jscomp.Compiler.logger.fine("Remove try/catch/finally");
        startPass("removeTryCatchFinally");
        com.google.javascript.jscomp.RemoveTryCatch r = new com.google.javascript.jscomp.RemoveTryCatch(this);
        process(r);
        endPass();
    }

    void stripCode(java.util.Set<java.lang.String> stripTypes, java.util.Set<java.lang.String> stripNameSuffixes, java.util.Set<java.lang.String> stripTypePrefixes, java.util.Set<java.lang.String> stripNamePrefixes) {
        com.google.javascript.jscomp.Compiler.logger.fine("Strip code");
        startPass("stripCode");
        com.google.javascript.jscomp.StripCode r = new com.google.javascript.jscomp.StripCode(this, stripTypes, stripNameSuffixes, stripTypePrefixes, stripNamePrefixes);
        if (options.getTweakProcessing().shouldStrip()) {
            r.enableTweakStripping();
        }
        process(r);
        endPass();
    }

    private void runCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime executionTime) {
        if (options.customPasses != null) {
            com.google.javascript.jscomp.Tracer t = newTracer("runCustomPasses");
            try {
                for (com.google.javascript.jscomp.CompilerPass p : options.customPasses.get(executionTime)) {
                    process(p);
                }
            } finally {
                stopTracer(t, "runCustomPasses");
            }
        }
    }

    private com.google.javascript.jscomp.Tracer currentTracer = null;

    private java.lang.String currentPassName = null;

    void startPass(java.lang.String passName) {
        com.google.common.base.Preconditions.checkState(currentTracer == null);
        currentPassName = passName;
        currentTracer = newTracer(passName);
    }

    void endPass() {
        com.google.common.base.Preconditions.checkState(currentTracer != null, "Tracer should not be null at the end of a pass.");
        stopTracer(currentTracer, currentPassName);
        currentPassName = null;
        currentTracer = null;
        maybeSanityCheck();
    }

    com.google.javascript.jscomp.Tracer newTracer(java.lang.String passName) {
        java.lang.String comment = passName + (recentChange.hasCodeChanged() ? " on recently changed AST" : "");
        if (options.tracer.isOn()) {
            tracker.recordPassStart(passName, true);
        }
        return new com.google.javascript.jscomp.Tracer("Compiler", comment);
    }

    void stopTracer(com.google.javascript.jscomp.Tracer t, java.lang.String passName) {
        long result = t.stop();
        if (options.tracer.isOn()) {
            tracker.recordPassStop(passName, result);
        }
    }

    public com.google.javascript.jscomp.Result getResult() {
        com.google.javascript.jscomp.PassConfig.State state = getPassConfig().getIntermediateState();
        return new com.google.javascript.jscomp.Result(getErrors(), getWarnings(), debugLog.toString(), state.variableMap, state.propertyMap, state.anonymousFunctionNameMap, state.stringMap, functionInformationMap, sourceMap, externExports, state.cssNames, state.idGeneratorMap);
    }

    public com.google.javascript.jscomp.JSError[] getMessages() {
        return getErrors();
    }

    public com.google.javascript.jscomp.JSError[] getErrors() {
        return errorManager.getErrors();
    }

    public com.google.javascript.jscomp.JSError[] getWarnings() {
        return errorManager.getWarnings();
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getRoot() {
        return externAndJsRoot;
    }

    private int nextUniqueNameId() {
        return uniqueNameId++;
    }

    @com.google.common.annotations.VisibleForTesting
    void resetUniqueNameId() {
        uniqueNameId = 0;
    }

    @java.lang.Override
    com.google.common.base.Supplier<java.lang.String> getUniqueNameIdSupplier() {
        final com.google.javascript.jscomp.Compiler self = this;
        return new com.google.common.base.Supplier<java.lang.String>() {
            @java.lang.Override
            public java.lang.String get() {
                return java.lang.String.valueOf(self.nextUniqueNameId());
            }
        };
    }

    @java.lang.Override
    boolean areNodesEqualForInlining(com.google.javascript.rhino.Node n1, com.google.javascript.rhino.Node n2) {
        if (options.ambiguateProperties || options.disambiguateProperties) {
            return n1.isEquivalentToTyped(n2);
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(79).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.MODULE_DEPENDENCY_ERROR",com.google.javascript.jscomp.Compiler.MODULE_DEPENDENCY_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("n1",n1);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("n2",n2);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.OPTIMIZE_LOOP_ERROR",com.google.javascript.jscomp.Compiler.OPTIMIZE_LOOP_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.EMPTY_ROOT_MODULE_ERROR",com.google.javascript.jscomp.Compiler.EMPTY_ROOT_MODULE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.oldErrorReporter",com.google.javascript.jscomp.Compiler.this.oldErrorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.compilerExecutor",com.google.javascript.jscomp.Compiler.compilerExecutor);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.DUPLICATE_EXTERN_INPUT",com.google.javascript.jscomp.Compiler.DUPLICATE_EXTERN_INPUT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.abstractInterpreter",com.google.javascript.jscomp.Compiler.this.abstractInterpreter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.errorManager",com.google.javascript.jscomp.Compiler.this.errorManager);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.uniqueNameId",com.google.javascript.jscomp.Compiler.this.uniqueNameId);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.lastPassName",com.google.javascript.jscomp.Compiler.this.lastPassName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.sourceMap",com.google.javascript.jscomp.Compiler.this.sourceMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.tracker",com.google.javascript.jscomp.Compiler.this.tracker);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.recentChange",com.google.javascript.jscomp.Compiler.this.recentChange);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.progress",com.google.javascript.jscomp.Compiler.this.progress);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.sanityCheck",com.google.javascript.jscomp.Compiler.this.sanityCheck);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.defaultCodingConvention",com.google.javascript.jscomp.Compiler.this.defaultCodingConvention);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.SINGLETON_MODULE_NAME",com.google.javascript.jscomp.Compiler.SINGLETON_MODULE_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.codeChangeHandlers",com.google.javascript.jscomp.Compiler.this.codeChangeHandlers);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.syntheticCodeId",com.google.javascript.jscomp.Compiler.this.syntheticCodeId);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.injectedLibraries",com.google.javascript.jscomp.Compiler.this.injectedLibraries);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.moduleGraph",com.google.javascript.jscomp.Compiler.this.moduleGraph);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS",com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.parserConfig",com.google.javascript.jscomp.Compiler.this.parserConfig);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.synthesizedExternsInput",com.google.javascript.jscomp.Compiler.this.synthesizedExternsInput);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.hasRegExpGlobalReferences",com.google.javascript.jscomp.Compiler.this.hasRegExpGlobalReferences);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.PARSING_PASS_NAME",com.google.javascript.jscomp.Compiler.PARSING_PASS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.externs",com.google.javascript.jscomp.Compiler.this.externs);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.COMPILER_STACK_SIZE",com.google.javascript.jscomp.Compiler.COMPILER_STACK_SIZE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.passes",com.google.javascript.jscomp.Compiler.this.passes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.typeRegistry",com.google.javascript.jscomp.Compiler.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.logger",com.google.javascript.jscomp.Compiler.logger);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.jsRoot",com.google.javascript.jscomp.Compiler.this.jsRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.currentPassName",com.google.javascript.jscomp.Compiler.this.currentPassName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.CONFIG_RESOURCE",com.google.javascript.jscomp.Compiler.CONFIG_RESOURCE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.externAndJsRoot",com.google.javascript.jscomp.Compiler.this.externAndJsRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.functionInformationMap",com.google.javascript.jscomp.Compiler.this.functionInformationMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR",com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.externExports",com.google.javascript.jscomp.Compiler.this.externExports);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.typeValidator",com.google.javascript.jscomp.Compiler.this.typeValidator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.outStream",com.google.javascript.jscomp.Compiler.this.outStream);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.debugLog",com.google.javascript.jscomp.Compiler.this.debugLog);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.defaultErrorReporter",com.google.javascript.jscomp.Compiler.this.defaultErrorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.MISSING_MODULE_ERROR",com.google.javascript.jscomp.Compiler.MISSING_MODULE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.EMPTY_MODULE_LIST_ERROR",com.google.javascript.jscomp.Compiler.EMPTY_MODULE_LIST_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.globalRefMap",com.google.javascript.jscomp.Compiler.this.globalRefMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT",com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.useThreads",com.google.javascript.jscomp.Compiler.this.useThreads);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.compilerThread",com.google.javascript.jscomp.Compiler.this.compilerThread);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.inputsById",com.google.javascript.jscomp.Compiler.this.inputsById);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR",com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.options",com.google.javascript.jscomp.Compiler.this.options);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.modules",com.google.javascript.jscomp.Compiler.this.modules);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.warningsGuard",com.google.javascript.jscomp.Compiler.this.warningsGuard);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.inputs",com.google.javascript.jscomp.Compiler.this.inputs);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.externsRoot",com.google.javascript.jscomp.Compiler.this.externsRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectInput("com.google.javascript.jscomp.Compiler.this.currentTracer",com.google.javascript.jscomp.Compiler.this.currentTracer);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectionEnds();
            }
            if (runtimeAngelicValue)
                return n1.isEquivalentTo(n2);

        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.CompilerInput getInput(com.google.javascript.rhino.InputId id) {
        return inputsById.get(id);
    }

    protected void removeExternInput(com.google.javascript.rhino.InputId id) {
        com.google.javascript.jscomp.CompilerInput input = getInput(id);
        if (input == null) {
            return;
        }
        com.google.common.base.Preconditions.checkState(input.isExtern(), "Not an extern input: %s", input.getName());
        inputsById.remove(id);
        externs.remove(input);
        com.google.javascript.rhino.Node root = input.getAstRoot(this);
        if (root != null) {
            root.detachFromParent();
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.CompilerInput newExternInput(java.lang.String name) {
        com.google.javascript.jscomp.SourceAst ast = new com.google.javascript.jscomp.SyntheticAst(name);
        if (inputsById.containsKey(ast.getInputId())) {
            throw new java.lang.IllegalArgumentException("Conflicting externs name: " + name);
        }
        com.google.javascript.jscomp.CompilerInput input = new com.google.javascript.jscomp.CompilerInput(ast, true);
        putCompilerInput(input.getInputId(), input);
        externsRoot.addChildToFront(ast.getAstRoot(this));
        externs.add(0, input);
        return input;
    }

    private com.google.javascript.jscomp.CompilerInput putCompilerInput(com.google.javascript.rhino.InputId id, com.google.javascript.jscomp.CompilerInput input) {
        input.setCompiler(this);
        return inputsById.put(id, input);
    }

    void addIncrementalSourceAst(com.google.javascript.jscomp.JsAst ast) {
        com.google.javascript.rhino.InputId id = ast.getInputId();
        com.google.common.base.Preconditions.checkState(getInput(id) == null, "Duplicate input %s", id.getIdName());
        putCompilerInput(id, new com.google.javascript.jscomp.CompilerInput(ast));
    }

    boolean replaceIncrementalSourceAst(com.google.javascript.jscomp.JsAst ast) {
        com.google.javascript.jscomp.CompilerInput oldInput = getInput(ast.getInputId());
        com.google.common.base.Preconditions.checkNotNull(oldInput, "No input to replace: %s", ast.getInputId().getIdName());
        com.google.javascript.rhino.Node newRoot = ast.getAstRoot(this);
        if (newRoot == null) {
            return false;
        }
        com.google.javascript.rhino.Node oldRoot = oldInput.getAstRoot(this);
        if (oldRoot != null) {
            oldRoot.getParent().replaceChild(oldRoot, newRoot);
        } else {
            getRoot().getLastChild().addChildToBack(newRoot);
        }
        com.google.javascript.jscomp.CompilerInput newInput = new com.google.javascript.jscomp.CompilerInput(ast);
        putCompilerInput(ast.getInputId(), newInput);
        com.google.javascript.jscomp.JSModule module = oldInput.getModule();
        if (module != null) {
            module.addAfter(newInput, oldInput);
            module.remove(oldInput);
        }
        com.google.common.base.Preconditions.checkState(newInput.getInputId().equals(oldInput.getInputId()));
        com.google.javascript.rhino.InputId inputIdOnAst = newInput.getAstRoot(this).getInputId();
        com.google.common.base.Preconditions.checkState(newInput.getInputId().equals(inputIdOnAst));
        inputs.remove(oldInput);
        return true;
    }

    boolean addNewSourceAst(com.google.javascript.jscomp.JsAst ast) {
        com.google.javascript.jscomp.CompilerInput oldInput = getInput(ast.getInputId());
        if (oldInput != null) {
            throw new java.lang.IllegalStateException("Input already exists: " + ast.getInputId().getIdName());
        }
        com.google.javascript.rhino.Node newRoot = ast.getAstRoot(this);
        if (newRoot == null) {
            return false;
        }
        getRoot().getLastChild().addChildToBack(newRoot);
        com.google.javascript.jscomp.CompilerInput newInput = new com.google.javascript.jscomp.CompilerInput(ast);
        if ((moduleGraph == null) && (!modules.isEmpty())) {
            modules.get(0).add(newInput);
        }
        putCompilerInput(ast.getInputId(), newInput);
        return true;
    }

    @java.lang.Override
    com.google.javascript.jscomp.JSModuleGraph getModuleGraph() {
        return moduleGraph;
    }

    com.google.javascript.jscomp.JSModuleGraph getDegenerateModuleGraph() {
        return moduleGraph == null ? new com.google.javascript.jscomp.JSModuleGraph(modules) : moduleGraph;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSTypeRegistry getTypeRegistry() {
        if (typeRegistry == null) {
            typeRegistry = new com.google.javascript.rhino.jstype.JSTypeRegistry(oldErrorReporter, options.looseTypes);
        }
        return typeRegistry;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.MemoizedScopeCreator getTypedScopeCreator() {
        return getPassConfig().getTypedScopeCreator();
    }

    @java.lang.SuppressWarnings("unchecked")
    com.google.javascript.jscomp.DefaultPassConfig ensureDefaultPassConfig() {
        com.google.javascript.jscomp.PassConfig passes = getPassConfig().getBasePassConfig();
        com.google.common.base.Preconditions.checkState(passes instanceof com.google.javascript.jscomp.DefaultPassConfig, "PassConfigs must eventually delegate to the DefaultPassConfig");
        return ((com.google.javascript.jscomp.DefaultPassConfig) (passes));
    }

    public com.google.javascript.jscomp.SymbolTable buildKnownSymbolTable() {
        com.google.javascript.jscomp.SymbolTable symbolTable = new com.google.javascript.jscomp.SymbolTable(getTypeRegistry());
        com.google.javascript.jscomp.MemoizedScopeCreator typedScopeCreator = getTypedScopeCreator();
        if (typedScopeCreator != null) {
            symbolTable.addScopes(typedScopeCreator.getAllMemoizedScopes());
            symbolTable.addSymbolsFrom(typedScopeCreator);
        } else {
            symbolTable.findScopes(this, externsRoot, jsRoot);
        }
        com.google.javascript.jscomp.GlobalNamespace globalNamespace = ensureDefaultPassConfig().getGlobalNamespace();
        if (globalNamespace != null) {
            symbolTable.addSymbolsFrom(globalNamespace);
        }
        com.google.javascript.jscomp.ReferenceCollectingCallback refCollector = new com.google.javascript.jscomp.ReferenceCollectingCallback(this, com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR);
        com.google.javascript.jscomp.NodeTraversal.traverse(this, getRoot(), refCollector);
        symbolTable.addSymbolsFrom(refCollector);
        com.google.javascript.jscomp.PreprocessorSymbolTable preprocessorSymbolTable = ensureDefaultPassConfig().getPreprocessorSymbolTable();
        if (preprocessorSymbolTable != null) {
            symbolTable.addSymbolsFrom(preprocessorSymbolTable);
        }
        symbolTable.fillNamespaceReferences();
        symbolTable.fillPropertyScopes();
        symbolTable.fillThisReferences(this, externsRoot, jsRoot);
        symbolTable.fillPropertySymbols(this, externsRoot, jsRoot);
        symbolTable.fillJSDocInfo(this, externsRoot, jsRoot);
        return symbolTable;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Scope getTopScope() {
        return getPassConfig().getTopScope();
    }

    @java.lang.Override
    public com.google.javascript.jscomp.type.ReverseAbstractInterpreter getReverseAbstractInterpreter() {
        if (abstractInterpreter == null) {
            com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter interpreter = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter(getCodingConvention(), getTypeRegistry());
            if (options.closurePass) {
                interpreter = new com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter(getCodingConvention(), getTypeRegistry()).append(interpreter).getFirst();
            }
            abstractInterpreter = interpreter;
        }
        return abstractInterpreter;
    }

    @java.lang.Override
    com.google.javascript.jscomp.TypeValidator getTypeValidator() {
        if (typeValidator == null) {
            typeValidator = new com.google.javascript.jscomp.TypeValidator(this);
        }
        return typeValidator;
    }

    com.google.javascript.rhino.Node parseInputs() {
        boolean devMode = options.devMode != com.google.javascript.jscomp.CompilerOptions.DevMode.OFF;
        if (externsRoot != null) {
            externsRoot.detachChildren();
        }
        if (jsRoot != null) {
            jsRoot.detachChildren();
        }
        jsRoot = com.google.javascript.rhino.IR.block();
        jsRoot.setIsSyntheticBlock(true);
        externsRoot = com.google.javascript.rhino.IR.block();
        externsRoot.setIsSyntheticBlock(true);
        externAndJsRoot = com.google.javascript.rhino.IR.block(externsRoot, jsRoot);
        externAndJsRoot.setIsSyntheticBlock(true);
        if (options.tracer.isOn()) {
            tracker = new com.google.javascript.jscomp.PerformanceTracker(jsRoot, options.tracer);
            addChangeHandler(tracker.getCodeChangeHandler());
        }
        com.google.javascript.jscomp.Tracer tracer = newTracer(com.google.javascript.jscomp.Compiler.PARSING_PASS_NAME);
        try {
            for (com.google.javascript.jscomp.CompilerInput input : externs) {
                com.google.javascript.rhino.Node n = input.getAstRoot(this);
                if (hasErrors()) {
                    return null;
                }
                externsRoot.addChildToBack(n);
            }
            if (options.transformAMDToCJSModules || options.processCommonJSModules) {
                processAMDAndCommonJSModules();
            }
            hoistExterns(externsRoot);
            boolean staleInputs = false;
            if (options.dependencyOptions.needsManagement()) {
                for (com.google.javascript.jscomp.CompilerInput input : inputs) {
                    for (java.lang.String provide : input.getProvides()) {
                        getTypeRegistry().forwardDeclareType(provide);
                    }
                }
                try {
                    inputs = (moduleGraph == null ? new com.google.javascript.jscomp.JSModuleGraph(modules) : moduleGraph).manageDependencies(options.dependencyOptions, inputs);
                    staleInputs = true;
                } catch (com.google.javascript.jscomp.deps.SortedDependencies.CircularDependencyException e) {
                    report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
                } catch (com.google.javascript.jscomp.deps.SortedDependencies.MissingProvideException e) {
                    report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR, e.getMessage()));
                } catch (com.google.javascript.jscomp.JSModuleGraph.MissingModuleException e) {
                    report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.MISSING_MODULE_ERROR, e.getMessage()));
                }
                if (hasErrors()) {
                    return null;
                }
            }
            hoistNoCompileFiles();
            if (staleInputs) {
                repartitionInputs();
            }
            for (com.google.javascript.jscomp.CompilerInput input : inputs) {
                com.google.javascript.rhino.Node n = input.getAstRoot(this);
                if (n == null) {
                    continue;
                }
                if (devMode) {
                    runSanityCheck();
                    if (hasErrors()) {
                        return null;
                    }
                }
                if ((options.sourceMapOutputPath != null) || (options.nameReferenceReportPath != null)) {
                    com.google.javascript.jscomp.SourceInformationAnnotator sia = new com.google.javascript.jscomp.SourceInformationAnnotator(input.getName(), options.devMode != com.google.javascript.jscomp.CompilerOptions.DevMode.OFF);
                    com.google.javascript.jscomp.NodeTraversal.traverse(this, n, sia);
                }
                jsRoot.addChildToBack(n);
            }
            if (hasErrors()) {
                return null;
            }
            return externAndJsRoot;
        } finally {
            stopTracer(tracer, com.google.javascript.jscomp.Compiler.PARSING_PASS_NAME);
        }
    }

    private void hoistExterns(com.google.javascript.rhino.Node externsRoot) {
        boolean staleInputs = false;
        for (com.google.javascript.jscomp.CompilerInput input : inputs) {
            if (options.dependencyOptions.needsManagement()) {
                if ((!input.getProvides().isEmpty()) || (!input.getRequires().isEmpty())) {
                    continue;
                }
            }
            com.google.javascript.rhino.Node n = input.getAstRoot(this);
            if (n == null) {
                continue;
            }
            com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
            if ((info != null) && info.isExterns()) {
                externsRoot.addChildToBack(n);
                input.setIsExtern(true);
                input.getModule().remove(input);
                externs.add(input);
                staleInputs = true;
            }
        }
        if (staleInputs) {
            repartitionInputs();
        }
    }

    private void hoistNoCompileFiles() {
        boolean staleInputs = false;
        for (com.google.javascript.jscomp.CompilerInput input : inputs) {
            com.google.javascript.rhino.Node n = input.getAstRoot(this);
            if (n == null) {
                continue;
            }
            com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
            if ((info != null) && info.isNoCompile()) {
                input.getModule().remove(input);
                staleInputs = true;
            }
        }
        if (staleInputs) {
            repartitionInputs();
        }
    }

    private void repartitionInputs() {
        com.google.javascript.jscomp.Compiler.fillEmptyModules(modules);
        rebuildInputsFromModules();
    }

    void processAMDAndCommonJSModules() {
        java.util.Map<java.lang.String, com.google.javascript.jscomp.JSModule> modulesByName = com.google.common.collect.Maps.newLinkedHashMap();
        java.util.Map<com.google.javascript.jscomp.CompilerInput, com.google.javascript.jscomp.JSModule> modulesByInput = com.google.common.collect.Maps.newLinkedHashMap();
        for (com.google.javascript.jscomp.CompilerInput input : inputs) {
            input.setCompiler(this);
            com.google.javascript.rhino.Node root = input.getAstRoot(this);
            if (root == null) {
                continue;
            }
            if (options.transformAMDToCJSModules) {
                new com.google.javascript.jscomp.TransformAMDToCJSModule(this).process(null, root);
            }
            if (options.processCommonJSModules) {
                com.google.javascript.jscomp.ProcessCommonJSModules cjs = new com.google.javascript.jscomp.ProcessCommonJSModules(this, options.commonJSModulePathPrefix);
                cjs.process(null, root);
                com.google.javascript.jscomp.JSModule m = cjs.getModule();
                if (m != null) {
                    modulesByName.put(m.getName(), m);
                    modulesByInput.put(input, m);
                }
            }
        }
        if (options.processCommonJSModules) {
            java.util.List<com.google.javascript.jscomp.JSModule> modules = com.google.common.collect.Lists.newArrayList(modulesByName.values());
            if (!modules.isEmpty()) {
                this.modules = modules;
                this.moduleGraph = new com.google.javascript.jscomp.JSModuleGraph(this.modules);
            }
            for (com.google.javascript.jscomp.JSModule module : modules) {
                for (com.google.javascript.jscomp.CompilerInput input : module.getInputs()) {
                    for (java.lang.String require : input.getRequires()) {
                        com.google.javascript.jscomp.JSModule dependency = modulesByName.get(require);
                        if (dependency == null) {
                            report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR, require));
                        } else {
                            module.addDependency(dependency);
                        }
                    }
                }
            }
            try {
                modules = com.google.common.collect.Lists.newArrayList();
                for (com.google.javascript.jscomp.CompilerInput input : this.moduleGraph.manageDependencies(options.dependencyOptions, inputs)) {
                    modules.add(modulesByInput.get(input));
                }
                com.google.javascript.jscomp.JSModule root = new com.google.javascript.jscomp.JSModule("root");
                for (com.google.javascript.jscomp.JSModule m : modules) {
                    m.addDependency(root);
                }
                modules.add(0, root);
                com.google.javascript.jscomp.deps.SortedDependencies<com.google.javascript.jscomp.JSModule> sorter = new com.google.javascript.jscomp.deps.SortedDependencies<com.google.javascript.jscomp.JSModule>(modules);
                modules = sorter.getDependenciesOf(modules, true);
                this.modules = modules;
                this.moduleGraph = new com.google.javascript.jscomp.JSModuleGraph(modules);
            } catch (java.lang.Exception e) {
                com.google.common.base.Throwables.propagate(e);
            }
        }
    }

    public com.google.javascript.rhino.Node parse(com.google.javascript.jscomp.SourceFile file) {
        initCompilerOptionsIfTesting();
        addToDebugLog("Parsing: " + file.getName());
        return new com.google.javascript.jscomp.JsAst(file).getAstRoot(this);
    }

    private int syntheticCodeId = 0;

    @java.lang.Override
    com.google.javascript.rhino.Node parseSyntheticCode(java.lang.String js) {
        com.google.javascript.jscomp.CompilerInput input = new com.google.javascript.jscomp.CompilerInput(com.google.javascript.jscomp.SourceFile.fromCode((" [synthetic:" + (++syntheticCodeId)) + "] ", js));
        putCompilerInput(input.getInputId(), input);
        return input.getAstRoot(this);
    }

    protected com.google.javascript.jscomp.CompilerOptions newCompilerOptions() {
        return new com.google.javascript.jscomp.CompilerOptions();
    }

    void initCompilerOptionsIfTesting() {
        if (options == null) {
            initOptions(newCompilerOptions());
        }
    }

    @java.lang.Override
    com.google.javascript.rhino.Node parseSyntheticCode(java.lang.String fileName, java.lang.String js) {
        initCompilerOptionsIfTesting();
        return parse(com.google.javascript.jscomp.SourceFile.fromCode(fileName, js));
    }

    @java.lang.Override
    com.google.javascript.rhino.Node parseTestCode(java.lang.String js) {
        initCompilerOptionsIfTesting();
        com.google.javascript.jscomp.CompilerInput input = new com.google.javascript.jscomp.CompilerInput(com.google.javascript.jscomp.SourceFile.fromCode("[testcode]", js));
        if (inputsById == null) {
            inputsById = com.google.common.collect.Maps.newHashMap();
        }
        putCompilerInput(input.getInputId(), input);
        return input.getAstRoot(this);
    }

    @java.lang.Override
    com.google.javascript.rhino.head.ErrorReporter getDefaultErrorReporter() {
        return defaultErrorReporter;
    }

    public java.lang.String toSource() {
        return runInCompilerThread(new java.util.concurrent.Callable<java.lang.String>() {
            @java.lang.Override
            public java.lang.String call() throws java.lang.Exception {
                com.google.javascript.jscomp.Tracer tracer = newTracer("toSource");
                try {
                    com.google.javascript.jscomp.Compiler.CodeBuilder cb = new com.google.javascript.jscomp.Compiler.CodeBuilder();
                    if (jsRoot != null) {
                        int i = 0;
                        for (com.google.javascript.rhino.Node scriptNode = jsRoot.getFirstChild(); scriptNode != null; scriptNode = scriptNode.getNext()) {
                            toSource(cb, i++, scriptNode);
                        }
                    }
                    return cb.toString();
                } finally {
                    stopTracer(tracer, "toSource");
                }
            }
        });
    }

    public java.lang.String[] toSourceArray() {
        return runInCompilerThread(new java.util.concurrent.Callable<java.lang.String[]>() {
            @java.lang.Override
            public java.lang.String[] call() throws java.lang.Exception {
                com.google.javascript.jscomp.Tracer tracer = newTracer("toSourceArray");
                try {
                    int numInputs = inputs.size();
                    java.lang.String[] sources = new java.lang.String[numInputs];
                    com.google.javascript.jscomp.Compiler.CodeBuilder cb = new com.google.javascript.jscomp.Compiler.CodeBuilder();
                    for (int i = 0; i < numInputs; i++) {
                        com.google.javascript.rhino.Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
                        cb.reset();
                        toSource(cb, i, scriptNode);
                        sources[i] = cb.toString();
                    }
                    return sources;
                } finally {
                    stopTracer(tracer, "toSourceArray");
                }
            }
        });
    }

    public java.lang.String toSource(final com.google.javascript.jscomp.JSModule module) {
        return runInCompilerThread(new java.util.concurrent.Callable<java.lang.String>() {
            @java.lang.Override
            public java.lang.String call() throws java.lang.Exception {
                java.util.List<com.google.javascript.jscomp.CompilerInput> inputs = module.getInputs();
                int numInputs = inputs.size();
                if (numInputs == 0) {
                    return "";
                }
                com.google.javascript.jscomp.Compiler.CodeBuilder cb = new com.google.javascript.jscomp.Compiler.CodeBuilder();
                for (int i = 0; i < numInputs; i++) {
                    com.google.javascript.rhino.Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
                    if (scriptNode == null) {
                        throw new java.lang.IllegalArgumentException("Bad module: " + module.getName());
                    }
                    toSource(cb, i, scriptNode);
                }
                return cb.toString();
            }
        });
    }

    public java.lang.String[] toSourceArray(final com.google.javascript.jscomp.JSModule module) {
        return runInCompilerThread(new java.util.concurrent.Callable<java.lang.String[]>() {
            @java.lang.Override
            public java.lang.String[] call() throws java.lang.Exception {
                java.util.List<com.google.javascript.jscomp.CompilerInput> inputs = module.getInputs();
                int numInputs = inputs.size();
                if (numInputs == 0) {
                    return new java.lang.String[0];
                }
                java.lang.String[] sources = new java.lang.String[numInputs];
                com.google.javascript.jscomp.Compiler.CodeBuilder cb = new com.google.javascript.jscomp.Compiler.CodeBuilder();
                for (int i = 0; i < numInputs; i++) {
                    com.google.javascript.rhino.Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
                    if (scriptNode == null) {
                        throw new java.lang.IllegalArgumentException("Bad module input: " + inputs.get(i).getName());
                    }
                    cb.reset();
                    toSource(cb, i, scriptNode);
                    sources[i] = cb.toString();
                }
                return sources;
            }
        });
    }

    public void toSource(final com.google.javascript.jscomp.Compiler.CodeBuilder cb, final int inputSeqNum, final com.google.javascript.rhino.Node root) {
        runInCompilerThread(new java.util.concurrent.Callable<java.lang.Void>() {
            @java.lang.Override
            public java.lang.Void call() throws java.lang.Exception {
                if (options.printInputDelimiter) {
                    if ((cb.getLength() > 0) && (!cb.endsWith("\n"))) {
                        cb.append("\n");
                    }
                    com.google.common.base.Preconditions.checkState(root.isScript());
                    java.lang.String delimiter = options.inputDelimiter;
                    java.lang.String inputName = root.getInputId().getIdName();
                    java.lang.String sourceName = root.getSourceFileName();
                    com.google.common.base.Preconditions.checkState(sourceName != null);
                    com.google.common.base.Preconditions.checkState(!sourceName.isEmpty());
                    delimiter = delimiter.replaceAll("%name%", java.util.regex.Matcher.quoteReplacement(inputName)).replaceAll("%num%", java.lang.String.valueOf(inputSeqNum));
                    cb.append(delimiter).append("\n");
                }
                if ((root.getJSDocInfo() != null) && (root.getJSDocInfo().getLicense() != null)) {
                    cb.append("/*\n").append(root.getJSDocInfo().getLicense()).append("*/\n");
                }
                if (options.sourceMapOutputPath != null) {
                    sourceMap.setStartingPosition(cb.getLineIndex(), cb.getColumnIndex());
                }
                java.lang.String code = toSource(root, sourceMap, inputSeqNum == 0);
                if (!code.isEmpty()) {
                    cb.append(code);
                    int length = code.length();
                    char lastChar = code.charAt(length - 1);
                    char secondLastChar = (length >= 2) ? code.charAt(length - 2) : '\u0000';
                    boolean hasSemiColon = (lastChar == ';') || ((lastChar == '\n') && (secondLastChar == ';'));
                    if (!hasSemiColon) {
                        cb.append(";");
                    }
                }
                return null;
            }
        });
    }

    @java.lang.Override
    java.lang.String toSource(com.google.javascript.rhino.Node n) {
        initCompilerOptionsIfTesting();
        return toSource(n, null, true);
    }

    private java.lang.String toSource(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.SourceMap sourceMap, boolean firstOutput) {
        com.google.javascript.jscomp.CodePrinter.Builder builder = new com.google.javascript.jscomp.CodePrinter.Builder(n);
        builder.setCompilerOptions(options);
        builder.setSourceMap(sourceMap);
        builder.setTagAsStrict(firstOutput && (options.getLanguageOut() == com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
        return builder.build();
    }

    public static class CodeBuilder {
        private final java.lang.StringBuilder sb = new java.lang.StringBuilder();

        private int lineCount = 0;

        private int colCount = 0;

        void reset() {
            sb.setLength(0);
        }

        com.google.javascript.jscomp.Compiler.CodeBuilder append(java.lang.String str) {
            sb.append(str);
            int index = -1;
            int lastIndex = index;
            while ((index = str.indexOf('\n', index + 1)) >= 0) {
                ++lineCount;
                lastIndex = index;
            } 
            if (lastIndex == (-1)) {
                colCount += str.length();
            } else {
                colCount = str.length() - (lastIndex + 1);
            }
            return this;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return sb.toString();
        }

        public int getLength() {
            return sb.length();
        }

        int getLineIndex() {
            return lineCount;
        }

        int getColumnIndex() {
            return colCount;
        }

        boolean endsWith(java.lang.String suffix) {
            return (sb.length() > suffix.length()) && suffix.equals(sb.substring(sb.length() - suffix.length()));
        }
    }

    public void optimize() {
        normalize();
        com.google.javascript.jscomp.PhaseOptimizer phaseOptimizer = new com.google.javascript.jscomp.PhaseOptimizer(this, tracker, null);
        if (options.devMode == com.google.javascript.jscomp.CompilerOptions.DevMode.EVERY_PASS) {
            phaseOptimizer.setSanityCheck(sanityCheck);
        }
        if (options.getCheckDeterminism()) {
            phaseOptimizer.setPrintAstHashcodes(true);
        }
        phaseOptimizer.consume(getPassConfig().getOptimizations());
        phaseOptimizer.process(externsRoot, jsRoot);
    }

    @java.lang.Override
    void setCssRenamingMap(com.google.javascript.jscomp.CssRenamingMap map) {
        options.cssRenamingMap = map;
    }

    @java.lang.Override
    com.google.javascript.jscomp.CssRenamingMap getCssRenamingMap() {
        return options.cssRenamingMap;
    }

    public void processDefines() {
        new com.google.javascript.jscomp.DefaultPassConfig(options).processDefines.create(this).process(externsRoot, jsRoot);
    }

    boolean isInliningForbidden() {
        return (options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) || (options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC);
    }

    com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> computeCFG() {
        com.google.javascript.jscomp.Compiler.logger.fine("Computing Control Flow Graph");
        com.google.javascript.jscomp.Tracer tracer = newTracer("computeCFG");
        com.google.javascript.jscomp.ControlFlowAnalysis cfa = new com.google.javascript.jscomp.ControlFlowAnalysis(this, true, false);
        process(cfa);
        stopTracer(tracer, "computeCFG");
        return cfa.getCfg();
    }

    public void normalize() {
        com.google.javascript.jscomp.Compiler.logger.fine("Normalizing");
        startPass("normalize");
        process(new com.google.javascript.jscomp.Normalize(this, false));
        endPass();
    }

    @java.lang.Override
    void prepareAst(com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.CompilerPass pass = new com.google.javascript.jscomp.PrepareAst(this);
        pass.process(null, root);
    }

    void recordFunctionInformation() {
        com.google.javascript.jscomp.Compiler.logger.fine("Recording function information");
        startPass("recordFunctionInformation");
        com.google.javascript.jscomp.RecordFunctionInformation recordFunctionInfoPass = new com.google.javascript.jscomp.RecordFunctionInformation(this, getPassConfig().getIntermediateState().functionNames);
        process(recordFunctionInfoPass);
        functionInformationMap = recordFunctionInfoPass.getMap();
        endPass();
    }

    protected final com.google.javascript.jscomp.CodeChangeHandler recentChange = new com.google.javascript.jscomp.CodeChangeHandler();

    private final java.util.List<com.google.javascript.jscomp.CodeChangeHandler> codeChangeHandlers = com.google.common.collect.Lists.<com.google.javascript.jscomp.CodeChangeHandler>newArrayList();

    static final java.lang.String SYNTHETIC_EXTERNS = "{SyntheticVarsDeclar}";

    private com.google.javascript.jscomp.CompilerInput synthesizedExternsInput = null;

    @java.lang.Override
    void addChangeHandler(com.google.javascript.jscomp.CodeChangeHandler handler) {
        codeChangeHandlers.add(handler);
    }

    @java.lang.Override
    void removeChangeHandler(com.google.javascript.jscomp.CodeChangeHandler handler) {
        codeChangeHandlers.remove(handler);
    }

    @java.lang.Override
    public void reportCodeChange() {
        for (com.google.javascript.jscomp.CodeChangeHandler handler : codeChangeHandlers) {
            handler.reportChange();
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.CodingConvention getCodingConvention() {
        com.google.javascript.jscomp.CodingConvention convention = options.getCodingConvention();
        convention = (convention != null) ? convention : defaultCodingConvention;
        return convention;
    }

    @java.lang.Override
    public boolean isIdeMode() {
        return options.ideMode;
    }

    @java.lang.Override
    public boolean acceptEcmaScript5() {
        switch (options.getLanguageIn()) {
            case ECMASCRIPT5 :
            case ECMASCRIPT5_STRICT :
                return true;
            case ECMASCRIPT3 :
                return false;
        }
        throw new java.lang.IllegalStateException("unexpected language mode");
    }

    public com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode() {
        return options.getLanguageIn();
    }

    @java.lang.Override
    public boolean acceptConstKeyword() {
        return options.acceptConstKeyword;
    }

    @java.lang.Override
    com.google.javascript.jscomp.parsing.Config getParserConfig() {
        if (parserConfig == null) {
            com.google.javascript.jscomp.parsing.Config.LanguageMode mode;
            switch (options.getLanguageIn()) {
                case ECMASCRIPT3 :
                    mode = com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT3;
                    break;
                case ECMASCRIPT5 :
                    mode = com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT5;
                    break;
                case ECMASCRIPT5_STRICT :
                    mode = com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT5_STRICT;
                    break;
                default :
                    throw new java.lang.IllegalStateException("unexpected language mode");
            }
            parserConfig = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(isIdeMode(), mode, acceptConstKeyword(), options.extraAnnotationNames);
        }
        return parserConfig;
    }

    @java.lang.Override
    public boolean isTypeCheckingEnabled() {
        return options.checkTypes;
    }

    protected com.google.javascript.jscomp.DiagnosticGroups getDiagnosticGroups() {
        return new com.google.javascript.jscomp.DiagnosticGroups();
    }

    @java.lang.Override
    public void report(com.google.javascript.jscomp.JSError error) {
        com.google.javascript.jscomp.CheckLevel level = error.getDefaultLevel();
        if (warningsGuard != null) {
            com.google.javascript.jscomp.CheckLevel newLevel = warningsGuard.level(error);
            if (newLevel != null) {
                level = newLevel;
            }
        }
        if (level.isOn()) {
            if (getOptions().errorHandler != null) {
                getOptions().errorHandler.report(level, error);
            }
            errorManager.report(level, error);
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.CheckLevel getErrorLevel(com.google.javascript.jscomp.JSError error) {
        com.google.common.base.Preconditions.checkNotNull(options);
        return warningsGuard.level(error);
    }

    @java.lang.Override
    void throwInternalError(java.lang.String message, java.lang.Exception cause) {
        java.lang.String finalMessage = ("INTERNAL COMPILER ERROR.\n" + "Please report this problem.\n") + message;
        java.lang.RuntimeException e = new java.lang.RuntimeException(finalMessage, cause);
        if (cause != null) {
            e.setStackTrace(cause.getStackTrace());
        }
        throw e;
    }

    public int getErrorCount() {
        return errorManager.getErrorCount();
    }

    public int getWarningCount() {
        return errorManager.getWarningCount();
    }

    @java.lang.Override
    boolean hasHaltingErrors() {
        return (!isIdeMode()) && (getErrorCount() > 0);
    }

    public boolean hasErrors() {
        return hasHaltingErrors();
    }

    @java.lang.Override
    void addToDebugLog(java.lang.String str) {
        debugLog.append(str);
        debugLog.append('\n');
        com.google.javascript.jscomp.Compiler.logger.fine(str);
    }

    @java.lang.Override
    com.google.javascript.jscomp.SourceFile getSourceFileByName(java.lang.String sourceName) {
        if (sourceName != null) {
            com.google.javascript.jscomp.CompilerInput input = inputsById.get(new com.google.javascript.rhino.InputId(sourceName));
            if (input != null) {
                return input.getSourceFile();
            }
        }
        return null;
    }

    @java.lang.Override
    public java.lang.String getSourceLine(java.lang.String sourceName, int lineNumber) {
        if (lineNumber < 1) {
            return null;
        }
        com.google.javascript.jscomp.SourceFile input = getSourceFileByName(sourceName);
        if (input != null) {
            return input.getLine(lineNumber);
        }
        return null;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Region getSourceRegion(java.lang.String sourceName, int lineNumber) {
        if (lineNumber < 1) {
            return null;
        }
        com.google.javascript.jscomp.SourceFile input = getSourceFileByName(sourceName);
        if (input != null) {
            return input.getRegion(lineNumber);
        }
        return null;
    }

    @java.lang.Override
    com.google.javascript.rhino.Node getNodeForCodeInsertion(com.google.javascript.jscomp.JSModule module) {
        if (module == null) {
            if (inputs.isEmpty()) {
                throw new java.lang.IllegalStateException("No inputs");
            }
            return inputs.get(0).getAstRoot(this);
        }
        java.util.List<com.google.javascript.jscomp.CompilerInput> moduleInputs = module.getInputs();
        if (moduleInputs.size() > 0) {
            return moduleInputs.get(0).getAstRoot(this);
        }
        throw new java.lang.IllegalStateException("Root module has no inputs");
    }

    public com.google.javascript.jscomp.SourceMap getSourceMap() {
        return sourceMap;
    }

    com.google.javascript.jscomp.VariableMap getVariableMap() {
        return getPassConfig().getIntermediateState().variableMap;
    }

    com.google.javascript.jscomp.VariableMap getPropertyMap() {
        return getPassConfig().getIntermediateState().propertyMap;
    }

    com.google.javascript.jscomp.CompilerOptions getOptions() {
        return options;
    }

    com.google.javascript.jscomp.FunctionInformationMap getFunctionalInformationMap() {
        return functionInformationMap;
    }

    public static void setLoggingLevel(java.util.logging.Level level) {
        com.google.javascript.jscomp.Compiler.logger.setLevel(level);
    }

    public java.lang.String getAstDotGraph() throws java.io.IOException {
        if (jsRoot != null) {
            com.google.javascript.jscomp.ControlFlowAnalysis cfa = new com.google.javascript.jscomp.ControlFlowAnalysis(this, true, false);
            cfa.process(null, jsRoot);
            return com.google.javascript.jscomp.DotFormatter.toDot(jsRoot, cfa.getCfg());
        } else {
            return "";
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.ErrorManager getErrorManager() {
        if (options == null) {
            initOptions(newCompilerOptions());
        }
        return errorManager;
    }

    @java.lang.Override
    java.util.List<com.google.javascript.jscomp.CompilerInput> getInputsInOrder() {
        return java.util.Collections.<com.google.javascript.jscomp.CompilerInput>unmodifiableList(inputs);
    }

    public java.util.Map<com.google.javascript.rhino.InputId, com.google.javascript.jscomp.CompilerInput> getInputsById() {
        return java.util.Collections.unmodifiableMap(inputsById);
    }

    java.util.List<com.google.javascript.jscomp.CompilerInput> getExternsInOrder() {
        return java.util.Collections.<com.google.javascript.jscomp.CompilerInput>unmodifiableList(externs);
    }

    public static class IntermediateState implements java.io.Serializable {
        private static final long serialVersionUID = 1L;

        com.google.javascript.rhino.Node externsRoot;

        private com.google.javascript.rhino.Node jsRoot;

        private java.util.List<com.google.javascript.jscomp.CompilerInput> externs;

        private java.util.List<com.google.javascript.jscomp.CompilerInput> inputs;

        private java.util.List<com.google.javascript.jscomp.JSModule> modules;

        private com.google.javascript.jscomp.PassConfig.State passConfigState;

        private com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

        private com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage lifeCycleStage;

        private java.util.Map<java.lang.String, com.google.javascript.rhino.Node> injectedLibraries;

        private IntermediateState() {
        }
    }

    public com.google.javascript.jscomp.Compiler.IntermediateState getState() {
        com.google.javascript.jscomp.Compiler.IntermediateState state = new com.google.javascript.jscomp.Compiler.IntermediateState();
        state.externsRoot = externsRoot;
        state.jsRoot = jsRoot;
        state.externs = externs;
        state.inputs = inputs;
        state.modules = modules;
        state.passConfigState = getPassConfig().getIntermediateState();
        state.typeRegistry = typeRegistry;
        state.lifeCycleStage = getLifeCycleStage();
        state.injectedLibraries = com.google.common.collect.Maps.newLinkedHashMap(injectedLibraries);
        return state;
    }

    public void setState(com.google.javascript.jscomp.Compiler.IntermediateState state) {
        externsRoot = state.externsRoot;
        jsRoot = state.jsRoot;
        externs = state.externs;
        inputs = state.inputs;
        modules = state.modules;
        passes = createPassConfigInternal();
        getPassConfig().setIntermediateState(state.passConfigState);
        typeRegistry = state.typeRegistry;
        setLifeCycleStage(state.lifeCycleStage);
        injectedLibraries.clear();
        injectedLibraries.putAll(state.injectedLibraries);
    }

    @com.google.common.annotations.VisibleForTesting
    java.util.List<com.google.javascript.jscomp.CompilerInput> getInputsForTesting() {
        return inputs;
    }

    @com.google.common.annotations.VisibleForTesting
    java.util.List<com.google.javascript.jscomp.CompilerInput> getExternsForTesting() {
        return externs;
    }

    @java.lang.Override
    boolean hasRegExpGlobalReferences() {
        return hasRegExpGlobalReferences;
    }

    @java.lang.Override
    void setHasRegExpGlobalReferences(boolean references) {
        hasRegExpGlobalReferences = references;
    }

    @java.lang.Override
    void updateGlobalVarReferences(java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> refMapPatch, com.google.javascript.rhino.Node collectionRoot) {
        com.google.common.base.Preconditions.checkState(collectionRoot.isScript() || collectionRoot.isBlock());
        if (globalRefMap == null) {
            globalRefMap = new com.google.javascript.jscomp.GlobalVarReferenceMap(getInputsInOrder(), getExternsInOrder());
        }
        globalRefMap.updateGlobalVarReferences(refMapPatch, collectionRoot);
    }

    @java.lang.Override
    com.google.javascript.jscomp.GlobalVarReferenceMap getGlobalVarReferences() {
        return globalRefMap;
    }

    @java.lang.Override
    com.google.javascript.jscomp.CompilerInput getSynthesizedExternsInput() {
        if (synthesizedExternsInput == null) {
            synthesizedExternsInput = newExternInput(com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS);
        }
        return synthesizedExternsInput;
    }

    @java.lang.Override
    public double getProgress() {
        return progress;
    }

    @java.lang.Override
    java.lang.String getLastPassName() {
        return lastPassName;
    }

    @java.lang.Override
    void setProgress(double newProgress, java.lang.String passName) {
        this.lastPassName = passName;
        if (newProgress > 1.0) {
            progress = 1.0;
        } else {
            progress = newProgress;
        }
    }

    public void replaceScript(com.google.javascript.jscomp.JsAst ast) {
        com.google.javascript.jscomp.CompilerInput input = this.getInput(ast.getInputId());
        if (!replaceIncrementalSourceAst(ast)) {
            return;
        }
        com.google.javascript.rhino.Node originalRoot = input.getAstRoot(this);
        processNewScript(ast, originalRoot);
    }

    public void addNewScript(com.google.javascript.jscomp.JsAst ast) {
        if (!addNewSourceAst(ast)) {
            return;
        }
        com.google.javascript.rhino.Node emptyScript = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);
        com.google.javascript.rhino.InputId inputId = ast.getInputId();
        emptyScript.setInputId(inputId);
        emptyScript.setStaticSourceFile(com.google.javascript.jscomp.SourceFile.fromCode(inputId.getIdName(), ""));
        processNewScript(ast, emptyScript);
    }

    private void processNewScript(com.google.javascript.jscomp.JsAst ast, com.google.javascript.rhino.Node originalRoot) {
        com.google.javascript.rhino.Node js = ast.getAstRoot(this);
        com.google.common.base.Preconditions.checkNotNull(js);
        runHotSwap(originalRoot, js, this.getCleanupPassConfig());
        runHotSwapPass(null, null, ensureDefaultPassConfig().garbageCollectChecks);
        this.getTypeRegistry().clearNamedTypes();
        this.removeSyntheticVarsInput();
        runHotSwap(originalRoot, js, this.ensureDefaultPassConfig());
    }

    private void runHotSwap(com.google.javascript.rhino.Node originalRoot, com.google.javascript.rhino.Node js, com.google.javascript.jscomp.PassConfig passConfig) {
        for (com.google.javascript.jscomp.PassFactory passFactory : passConfig.getChecks()) {
            runHotSwapPass(originalRoot, js, passFactory);
        }
    }

    private void runHotSwapPass(com.google.javascript.rhino.Node originalRoot, com.google.javascript.rhino.Node js, com.google.javascript.jscomp.PassFactory passFactory) {
        com.google.javascript.jscomp.HotSwapCompilerPass pass = passFactory.getHotSwapPass(this);
        if (pass != null) {
            com.google.javascript.jscomp.Compiler.logger.info("Performing HotSwap for pass " + passFactory.getName());
            pass.hotSwapScript(js, originalRoot);
        }
    }

    private com.google.javascript.jscomp.PassConfig getCleanupPassConfig() {
        return new com.google.javascript.jscomp.CleanupPasses(getOptions());
    }

    private void removeSyntheticVarsInput() {
        java.lang.String sourceName = com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS;
        removeExternInput(new com.google.javascript.rhino.InputId(sourceName));
    }

    @java.lang.Override
    com.google.javascript.rhino.Node ensureLibraryInjected(java.lang.String resourceName) {
        if (injectedLibraries.containsKey(resourceName)) {
            return null;
        }
        boolean isBase = "base".equals(resourceName);
        if (!isBase) {
            ensureLibraryInjected("base");
        }
        com.google.javascript.rhino.Node firstChild = loadLibraryCode(resourceName).removeChildren();
        com.google.javascript.rhino.Node lastChild = firstChild.getLastSibling();
        com.google.javascript.rhino.Node parent = getNodeForCodeInsertion(null);
        if (isBase) {
            parent.addChildrenToFront(firstChild);
        } else {
            parent.addChildrenAfter(firstChild, injectedLibraries.get("base"));
        }
        reportCodeChange();
        injectedLibraries.put(resourceName, lastChild);
        return lastChild;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node loadLibraryCode(java.lang.String resourceName) {
        java.lang.String originalCode;
        try {
            originalCode = com.google.common.io.CharStreams.toString(new java.io.InputStreamReader(com.google.javascript.jscomp.Compiler.class.getResourceAsStream(java.lang.String.format("js/%s.js", resourceName)), com.google.common.base.Charsets.UTF_8));
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException(e);
        }
        return com.google.javascript.jscomp.Normalize.parseAndNormalizeSyntheticCode(this, originalCode, java.lang.String.format("jscomp_%s_", resourceName));
    }

    public static java.lang.String getReleaseVersion() {
        java.util.ResourceBundle config = java.util.ResourceBundle.getBundle(com.google.javascript.jscomp.Compiler.CONFIG_RESOURCE);
        return config.getString("compiler.version");
    }

    public static java.lang.String getReleaseDate() {
        java.util.ResourceBundle config = java.util.ResourceBundle.getBundle(com.google.javascript.jscomp.Compiler.CONFIG_RESOURCE);
        return config.getString("compiler.date");
    }

    @java.lang.Override
    public void setOldParseTree(java.lang.String sourceName, com.google.javascript.rhino.head.ast.AstRoot oldAst) {
    }

    @java.lang.Override
    public com.google.javascript.rhino.head.ast.AstRoot getOldParseTreeByName(java.lang.String sourceName) {
        return null;
    }
}
[228996] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659908324360
GPR[SSUN]-1659908324360
-534884160
GPR[SPVATF]-1659908324717
GPR[EPVATF]-1659908325328
GPR[SPS]-1659908325328
[230820] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1041.
GPR[EPS]-1659908326185
GPR[ESUN]-1659908326185
GPR[SSUN]-1659908326185
214953636
GPR[SPVATF]-1659908326413
GPR[EPVATF]-1659908327074
GPR[SPS]-1659908327074
[232293] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:645.
GPR[EPS]-1659908327657
GPR[SPVATF]-1659908327657
GPR[EPVATF]-1659908328291
GPR[SPS]-1659908328291
[233487] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:645.
GPR[EPS]-1659908328851
GPR[ESUN]-1659908328851
GPR[SSUN]-1659908328852
214953636
GPR[ESUN]-1659908329067
GPR[SSUN]-1659908329067
214953636
GPR[ESUN]-1659908329286
GPR[SSUN]-1659908329286
214953636
GPR[ESUN]-1659908329498
GPR[SSUN]-1659908329498
214953636
GPR[SPVATF]-1659908329707
GPR[EPVATF]-1659908330351
GPR[SPS]-1659908330351
[235564] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:110.
GPR[EPS]-1659908330928
GPR[ESUN]-1659908330928
GPR[SSUN]-1659908330928
2433571
GPR[SPVATF]-1659908331161
GPR[EPVATF]-1659908331870
GPR[SPS]-1659908331870
[237144] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:986.
GPR[EPS]-1659908332508
GPR[SPVATF]-1659908332509
GPR[EPVATF]-1659908333187
GPR[SPS]-1659908333187
[238456] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:986.
GPR[EPS]-1659908333820
GPR[ESUN]-1659908333820
GPR[SSUN]-1659908333820
2433571
GPR[SPVATF]-1659908334056
GPR[EPVATF]-1659908334756
GPR[SPS]-1659908334756
[240019] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:968.
GPR[EPS]-1659908335383
GPR[ESUN]-1659908335384
GPR[SSUN]-1659908335384
2433571
GPR[ESUN]-1659908335616
GPR[SSUN]-1659908335616
2433571
GPR[SPVATF]-1659908335884
GPR[EPVATF]-1659908336599
GPR[SPS]-1659908336599
[241865] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:960.
GPR[EPS]-1659908337229
GPR[SPVATF]-1659908337230
GPR[EPVATF]-1659908337954
GPR[SPS]-1659908337954
[243210] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:960.
GPR[EPS]-1659908338574
GPR[ESUN]-1659908338575
GPR[SSUN]-1659908338575
2433571
GPR[ESUN]-1659908338805
GPR[SSUN]-1659908338805
2433571
GPR[ESUN]-1659908339032
GPR[SSUN]-1659908339033
2433571
GPR[ESUN]-1659908339266
GPR[SSUN]-1659908339266
2433571
GPR[SPVATF]-1659908339496
GPR[EPVATF]-1659908340247
GPR[SPS]-1659908340247
[245547] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:871.
GPR[EPS]-1659908340911
GPR[ESUN]-1659908340911
GPR[SSUN]-1659908340911
2433571
GPR[SPVATF]-1659908341147
GPR[EPVATF]-1659908341923
GPR[SPS]-1659908341923
[247190] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:866.
GPR[EPS]-1659908342554
GPR[ESUN]-1659908342554
GPR[SSUN]-1659908342554
2433571
GPR[ESUN]-1659908342792
GPR[SSUN]-1659908342792
2433571
GPR[SPVATF]-1659908343025
GPR[EPVATF]-1659908343840
GPR[SPS]-1659908343840
[249116] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:861.
GPR[EPS]-1659908344480
GPR[ESUN]-1659908344480
GPR[SSUN]-1659908344480
2433571
GPR[ESUN]-1659908344715
GPR[SSUN]-1659908344715
1187751237
GPR[ESUN]-1659908345044
GPR[SSUN]-1659908345044
2433571
GPR[SPVATF]-1659908345280
GPR[EPVATF]-1659908346054
GPR[SPS]-1659908346054
[251435] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:954.
GPR[EPS]-1659908346799
GPR[SPVATF]-1659908346799
GPR[EPVATF]-1659908347581
GPR[SPS]-1659908347581
[252889] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:954.
GPR[EPS]-1659908348253
GPR[ESUN]-1659908348253
GPR[SSUN]-1659908348253
2433571
GPR[SPVATF]-1659908348488
GPR[EPVATF]-1659908349309
GPR[SPS]-1659908349309
[254577] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:944.
GPR[EPS]-1659908349941
GPR[SPVATF]-1659908349941
GPR[EPVATF]-1659908350834
GPR[SPS]-1659908350834
[256112] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:944.
GPR[EPS]-1659908351476
GPR[ESUN]-1659908351476
GPR[SSUN]-1659908351476
2433571
GPR[ESUN]-1659908351710
GPR[SSUN]-1659908351710
2433571
GPR[ESUN]-1659908351944
GPR[SSUN]-1659908351944
2433571
GPR[SPVATF]-1659908352176
GPR[EPVATF]-1659908353048
GPR[SPS]-1659908353048
[258317] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:985.
GPR[EPS]-1659908353681
GPR[SPVATF]-1659908353681
GPR[EPVATF]-1659908354517
GPR[SPS]-1659908354517
[259778] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:985.
GPR[EPS]-1659908355142
GPR[ESUN]-1659908355142
GPR[SSUN]-1659908355142
2433571
GPR[SPVATF]-1659908355429
GPR[EPVATF]-1659908356271
GPR[SPS]-1659908356271
[261560] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:966.
GPR[EPS]-1659908356924
GPR[SPVATF]-1659908356924
GPR[EPVATF]-1659908357772
GPR[SPS]-1659908357772
[263035] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:966.
GPR[EPS]-1659908358400
GPR[ESUN]-1659908358400
GPR[SSUN]-1659908358400
2433571
GPR[SPVATF]-1659908358634
GPR[EPVATF]-1659908359482
GPR[SPS]-1659908359482
[264754] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:958.
GPR[EPS]-1659908360118
GPR[SPVATF]-1659908360118
GPR[EPVATF]-1659908360969
GPR[SPS]-1659908360969
[266282] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:958.
GPR[EPS]-1659908361646
GPR[ESUN]-1659908361646
GPR[SSUN]-1659908361646
2433571
GPR[SPVATF]-1659908361881
GPR[EPVATF]-1659908362737
GPR[SPS]-1659908362737
[268004] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:941.
GPR[EPS]-1659908363368
GPR[SPVATF]-1659908363369
GPR[EPVATF]-1659908364220
GPR[SPS]-1659908364220
[269528] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:941.
GPR[EPS]-1659908364892
GPR[ESUN]-1659908364892
GPR[SSUN]-1659908364892
2433571
GPR[SPVATF]-1659908365124
GPR[EPVATF]-1659908365979
GPR[SPS]-1659908365979
[271363] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:940.
GPR[EPS]-1659908366727
GPR[ESUN]-1659908366727
GPR[SSUN]-1659908366727
2433571
GPR[ESUN]-1659908366964
GPR[SSUN]-1659908366964
2433571
GPR[SPVATF]-1659908367197
GPR[EPVATF]-1659908368044
GPR[SPS]-1659908368044
[273312] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:931.
GPR[EPS]-1659908368676
GPR[ESUN]-1659908368676
GPR[SSUN]-1659908368676
2433571
GPR[ESUN]-1659908368912
GPR[SSUN]-1659908368912
-1966087783
GPR[SPVATF]-1659908369102
GPR[EPVATF]-1659908369176
[273813] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908369177
GPR[EPVATF]-1659908369250
[273886] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908369250
GPR[SSUN]-1659908369250
-1966087783
GPR[ESUN]-1659908369440
GPR[SSUN]-1659908369440
GPR[ESUN]-1659908369441
GPR[SSUN]-1659908369441
GPR[ESUN]-1659908369441
GPR[SSUN]-1659908369441
-1117079791
GPR[SPVATF]-1659908369636
GPR[EPVATF]-1659908370490
GPR[SPS]-1659908370490
[275621] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:469.
GPR[EPS]-1659908370985
GPR[ESUN]-1659908370985
GPR[SSUN]-1659908370985
-718432441
GPR[SPVATF]-1659908371199
GPR[EPVATF]-1659908372092
GPR[SPS]-1659908372092
[277419] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:285.
GPR[EPS]-1659908372783
GPR[ESUN]-1659908372784
GPR[SSUN]-1659908372784
-718432441
GPR[SPVATF]-1659908373004
GPR[EPVATF]-1659908373878
GPR[SPS]-1659908373878
[279205] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:284.
GPR[EPS]-1659908374569
GPR[ESUN]-1659908374569
GPR[SSUN]-1659908374569
-718432441
GPR[SPVATF]-1659908374784
GPR[EPVATF]-1659908375643
GPR[SPS]-1659908375644
[280974] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:283.
GPR[EPS]-1659908376338
GPR[ESUN]-1659908376338
GPR[SSUN]-1659908376338
-718432441
GPR[SPVATF]-1659908376557
GPR[EPVATF]-1659908377434
GPR[SPS]-1659908377434
[282814] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:282.
GPR[EPS]-1659908378178
GPR[ESUN]-1659908378178
GPR[SSUN]-1659908378178
-718432441
GPR[SPVATF]-1659908378395
GPR[EPVATF]-1659908379257
GPR[SPS]-1659908379257
[284589] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:281.
GPR[EPS]-1659908379953
GPR[ESUN]-1659908379953
GPR[SSUN]-1659908379953
-718432441
GPR[SPVATF]-1659908380167
GPR[EPVATF]-1659908381027
GPR[SPS]-1659908381027
[286366] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:280.
GPR[EPS]-1659908381730
GPR[ESUN]-1659908381730
GPR[SSUN]-1659908381730
-718432441
GPR[ESUN]-1659908381943
GPR[SSUN]-1659908381943
-718432441
GPR[SPVATF]-1659908382156
GPR[EPVATF]-1659908383060
GPR[SPS]-1659908383060
[288398] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:278.
GPR[EPS]-1659908383762
GPR[ESUN]-1659908383762
GPR[SSUN]-1659908383762
1187751237
GPR[ESUN]-1659908384046
GPR[SSUN]-1659908384046
GPR[ESUN]-1659908384047
GPR[SSUN]-1659908384047
GPR[ESUN]-1659908384047
GPR[SSUN]-1659908384047
GPR[ESUN]-1659908384047
GPR[SSUN]-1659908384047
GPR[ESUN]-1659908384047
GPR[SSUN]-1659908384047
-1117079791
GPR[ESUN]-1659908384250
GPR[SSUN]-1659908384250
-1117079791
GPR[SPVATF]-1659908384442
GPR[EPVATF]-1659908385304
GPR[SPS]-1659908385304
[290431] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:759.
GPR[EPS]-1659908385795
GPR[ESUN]-1659908385795
GPR[SSUN]-1659908385796
-1117079791
GPR[SPVATF]-1659908385997
GPR[EPVATF]-1659908386871
GPR[SPS]-1659908386871
[292002] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:758.
GPR[EPS]-1659908387366
GPR[ESUN]-1659908387366
GPR[SSUN]-1659908387366
-1117079791
GPR[SPVATF]-1659908387563
GPR[EPVATF]-1659908388461
GPR[SPS]-1659908388461
[293667] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:757.
GPR[EPS]-1659908389031
GPR[ESUN]-1659908389031
GPR[SSUN]-1659908389031
-1117079791
GPR[ESUN]-1659908389231
GPR[SSUN]-1659908389231
-1117079791
GPR[SPVATF]-1659908389425
GPR[EPVATF]-1659908390293
GPR[SPS]-1659908390293
[295445] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:755.
GPR[EPS]-1659908390809
GPR[ESUN]-1659908390809
GPR[SSUN]-1659908390809
-1117079791
GPR[ESUN]-1659908391005
GPR[SSUN]-1659908391005
-1117079791
GPR[SPVATF]-1659908391197
GPR[EPVATF]-1659908392060
GPR[SPS]-1659908392060
[297197] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:223.
GPR[EPS]-1659908392561
GPR[ESUN]-1659908392561
GPR[SSUN]-1659908392561
-718432441
GPR[SPVATF]-1659908392779
GPR[EPVATF]-1659908393638
GPR[SPS]-1659908393638
[298963] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:508.
GPR[EPS]-1659908394327
GPR[SPVATF]-1659908394327
GPR[EPVATF]-1659908395225
GPR[SPS]-1659908395226
[301579] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:508.
GPR[EPS]-1659908396943
GPR[ESUN]-1659908396943
GPR[SSUN]-1659908396943
-718432441
GPR[ESUN]-1659908397160
GPR[SSUN]-1659908397160
-718432441
GPR[ESUN]-1659908397383
GPR[SSUN]-1659908397383
-718432441
GPR[SPVATF]-1659908397612
GPR[EPVATF]-1659908398690
GPR[SPS]-1659908398690
[304114] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:503.
GPR[EPS]-1659908399478
GPR[ESUN]-1659908399478
GPR[SSUN]-1659908399478
214953636
GPR[ESUN]-1659908399699
GPR[SSUN]-1659908399699
214953636
GPR[SPVATF]-1659908399916
GPR[EPVATF]-1659908400568
GPR[SPS]-1659908400568
[305829] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:114.
GPR[EPS]-1659908401193
GPR[ESUN]-1659908401193
GPR[SSUN]-1659908401193
214953636
GPR[ESUN]-1659908401432
GPR[SSUN]-1659908401432
214953636
GPR[SPVATF]-1659908401652
GPR[EPVATF]-1659908402315
GPR[SPS]-1659908402315
[307547] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:1301.
GPR[EPS]-1659908402911
GPR[SPVATF]-1659908402911
GPR[EPVATF]-1659908403534
GPR[SPS]-1659908403534
[308739] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:1301.
GPR[EPS]-1659908404103
GPR[ESUN]-1659908404103
GPR[SSUN]-1659908404103
214953636
GPR[ESUN]-1659908404330
GPR[SSUN]-1659908404330
214953636
GPR[ESUN]-1659908404553
GPR[SSUN]-1659908404553
214953636
GPR[ESUN]-1659908404780
GPR[SSUN]-1659908404780
GPR[ESUN]-1659908404780
GPR[SSUN]-1659908404780
GPR[ESUN]-1659908404780
GPR[SSUN]-1659908404780
GPR[ESUN]-1659908404780
GPR[SSUN]-1659908404780
-1345859678
GPR[SPVATF]-1659908405030
GPR[EPVATF]-1659908405687
GPR[SPS]-1659908405687
[310949] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:842.
GPR[EPS]-1659908406313
GPR[ESUN]-1659908406313
GPR[SSUN]-1659908406314
711965926
GPR[ESUN]-1659908406609
GPR[SSUN]-1659908406609
711965926
GPR[SPVATF]-1659908406789
GPR[EPVATF]-1659908407465
GPR[SPS]-1659908407465
[312601] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractMessageFormatter:37.
GPR[EPS]-1659908407965
GPR[ESUN]-1659908407965
GPR[SSUN]-1659908407965
GPR[ESUN]-1659908407965
GPR[SSUN]-1659908407965
-132053243
GPR[ESUN]-1659908408159
GPR[SSUN]-1659908408159
-132053243
GPR[SPVATF]-1659908408348
GPR[EPVATF]-1659908408417
[313053] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908408417
GPR[SSUN]-1659908408417
1627430776
GPR[SPVATF]-1659908408613
GPR[EPVATF]-1659908409278
GPR[SPS]-1659908409278
[314417] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeOptimizationsPass:195.
GPR[EPS]-1659908409781
GPR[ESUN]-1659908409781
GPR[SSUN]-1659908409781
1627430776
GPR[SPVATF]-1659908409980
GPR[EPVATF]-1659908410636
GPR[SPS]-1659908410636
[315758] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeOptimizationsPass:193.
GPR[EPS]-1659908411122
GPR[ESUN]-1659908411122
GPR[SSUN]-1659908411122
GPR[ESUN]-1659908411122
GPR[SSUN]-1659908411122
GPR[ESUN]-1659908411122
GPR[SSUN]-1659908411122
GPR[ESUN]-1659908411122
GPR[SSUN]-1659908411122
GPR[ESUN]-1659908411122
GPR[SSUN]-1659908411122
GPR[ESUN]-1659908411122
GPR[SSUN]-1659908411122
GPR[ESUN]-1659908411122
GPR[SSUN]-1659908411122
-1345859678
GPR[SPVATF]-1659908411378
GPR[EPVATF]-1659908412053
GPR[SPS]-1659908412053
[317313] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1166.
GPR[EPS]-1659908412677
GPR[SPVATF]-1659908412677
GPR[EPVATF]-1659908413380
GPR[SPS]-1659908413380
[318648] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1166.
GPR[EPS]-1659908414012
GPR[ESUN]-1659908414012
GPR[SSUN]-1659908414012
214953636
GPR[ESUN]-1659908414235
GPR[SSUN]-1659908414235
214953636
GPR[SPVATF]-1659908414456
GPR[EPVATF]-1659908415165
GPR[SPS]-1659908415165
[320364] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:402.
GPR[EPS]-1659908415728
GPR[SPVATF]-1659908415728
GPR[EPVATF]-1659908416441
GPR[SPS]-1659908416441
[321662] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:402.
GPR[EPS]-1659908417026
GPR[ESUN]-1659908417026
GPR[SSUN]-1659908417026
214953636
GPR[ESUN]-1659908417245
GPR[SSUN]-1659908417245
1187751237
GPR[ESUN]-1659908417535
GPR[SSUN]-1659908417535
79183632
GPR[ESUN]-1659908417724
GPR[SSUN]-1659908417725
79183632
GPR[SPVATF]-1659908417914
GPR[EPVATF]-1659908418705
GPR[SPS]-1659908418705
[323817] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractPeepholeOptimization:83.
GPR[EPS]-1659908419181
GPR[ESUN]-1659908419181
GPR[SSUN]-1659908419181
GPR[ESUN]-1659908419181
GPR[SSUN]-1659908419181
GPR[ESUN]-1659908419181
GPR[SSUN]-1659908419181
GPR[ESUN]-1659908419181
GPR[SSUN]-1659908419181
GPR[ESUN]-1659908419181
GPR[SSUN]-1659908419181
GPR[ESUN]-1659908419181
GPR[SSUN]-1659908419181
214953636
GPR[ESUN]-1659908419398
GPR[SSUN]-1659908419398
214953636
GPR[SPVATF]-1659908419660
GPR[EPVATF]-1659908420503
GPR[SPS]-1659908420503
[325722] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:310.
GPR[EPS]-1659908421086
GPR[SPVATF]-1659908421086
GPR[EPVATF]-1659908421917
GPR[SPS]-1659908421917
[327119] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:310.
GPR[EPS]-1659908422483
GPR[ESUN]-1659908422483
GPR[SSUN]-1659908422483
214953636
GPR[ESUN]-1659908422706
GPR[SSUN]-1659908422706
214953636
GPR[SPVATF]-1659908422926
GPR[EPVATF]-1659908423744
GPR[SPS]-1659908423744
[328933] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:308.
GPR[EPS]-1659908424297
GPR[ESUN]-1659908424297
GPR[SSUN]-1659908424297
214953636
GPR[ESUN]-1659908424517
GPR[SSUN]-1659908424517
214953636
GPR[ESUN]-1659908424729
GPR[SSUN]-1659908424729
214953636
GPR[ESUN]-1659908424942
GPR[SSUN]-1659908424942
1187751237
GPR[ESUN]-1659908425216
GPR[SSUN]-1659908425216
1187751237
GPR[SPVATF]-1659908425520
GPR[EPVATF]-1659908426318
GPR[SPS]-1659908426318
[331706] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:124.
GPR[EPS]-1659908427070
GPR[ESUN]-1659908427070
GPR[SSUN]-1659908427070
1187751237
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
GPR[ESUN]-1659908427347
GPR[SSUN]-1659908427347
1537627151
GPR[ESUN]-1659908427547
GPR[SSUN]-1659908427547
-1345859678
GPR[ESUN]-1659908427791
GPR[SSUN]-1659908427791
-1345859678
GPR[ESUN]-1659908428036
GPR[SSUN]-1659908428036
GPR[ESUN]-1659908428036
GPR[SSUN]-1659908428036
-718432441
GPR[SPVATF]-1659908428259
GPR[EPVATF]-1659908429087
GPR[SPS]-1659908429087
[334407] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:490.
GPR[EPS]-1659908429771
GPR[ESUN]-1659908429771
GPR[SSUN]-1659908429771
-718432441
GPR[SPVATF]-1659908430008
GPR[EPVATF]-1659908430848
GPR[SPS]-1659908430848
[336235] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:489.
GPR[EPS]-1659908431599
GPR[ESUN]-1659908431599
GPR[SSUN]-1659908431599
-718432441
GPR[SPVATF]-1659908431820
GPR[EPVATF]-1659908432692
GPR[SPS]-1659908432692
[338028] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:488.
GPR[EPS]-1659908433392
GPR[ESUN]-1659908433392
GPR[SSUN]-1659908433392
-718432441
GPR[SPVATF]-1659908433608
GPR[EPVATF]-1659908434444
GPR[SPS]-1659908434444
[339751] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:487.
GPR[EPS]-1659908435116
GPR[ESUN]-1659908435116
GPR[SSUN]-1659908435116
-718432441
GPR[SPVATF]-1659908435332
GPR[EPVATF]-1659908436181
GPR[SPS]-1659908436181
[341492] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:486.
GPR[EPS]-1659908436857
GPR[ESUN]-1659908436857
GPR[SSUN]-1659908436857
-718432441
GPR[SPVATF]-1659908437073
GPR[EPVATF]-1659908437960
GPR[SPS]-1659908437960
[343284] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:483.
GPR[EPS]-1659908438648
GPR[ESUN]-1659908438648
GPR[SSUN]-1659908438648
GPR[ESUN]-1659908438648
GPR[SSUN]-1659908438648
GPR[ESUN]-1659908438648
GPR[SSUN]-1659908438648
GPR[ESUN]-1659908438648
GPR[SSUN]-1659908438648
GPR[ESUN]-1659908438648
GPR[SSUN]-1659908438648
1627430776
GPR[ESUN]-1659908438846
GPR[SSUN]-1659908438846
1627430776
GPR[SPVATF]-1659908439037
GPR[EPVATF]-1659908439885
GPR[SPS]-1659908439885
[345008] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeOptimizationsPass$PeepholeChangeHandler:87.
GPR[EPS]-1659908440372
GPR[ESUN]-1659908440372
GPR[SSUN]-1659908440372
1627430776
GPR[ESUN]-1659908440566
GPR[SSUN]-1659908440566
79183632
GPR[ESUN]-1659908440766
GPR[SSUN]-1659908440766
79183632
GPR[SPVATF]-1659908440957
GPR[EPVATF]-1659908441802
GPR[SPS]-1659908441803
[346930] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractPeepholeOptimization:63.
GPR[EPS]-1659908442295
GPR[ESUN]-1659908442295
GPR[SSUN]-1659908442295
79183632
GPR[SPVATF]-1659908442491
GPR[EPVATF]-1659908443328
GPR[SPS]-1659908443328
[348443] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractPeepholeOptimization:62.
GPR[EPS]-1659908443807
GPR[ESUN]-1659908443807
GPR[SSUN]-1659908443807
-1117079791
GPR[ESUN]-1659908444010
GPR[SSUN]-1659908444010
-1117079791
GPR[SPVATF]-1659908444200
GPR[EPVATF]-1659908445085
GPR[SPS]-1659908445085
[350205] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:468.
GPR[EPS]-1659908445569
GPR[SPVATF]-1659908445569
GPR[EPVATF]-1659908446414
GPR[SPS]-1659908446414
[351543] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:468.
GPR[EPS]-1659908446907
GPR[ESUN]-1659908446907
GPR[SSUN]-1659908446907
-1117079791
GPR[ESUN]-1659908447107
GPR[SSUN]-1659908447107
-1117079791
GPR[SPVATF]-1659908447300
GPR[EPVATF]-1659908448155
GPR[SPS]-1659908448155
[353276] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:467.
GPR[EPS]-1659908448640
GPR[ESUN]-1659908448640
GPR[SSUN]-1659908448640
-1117079791
GPR[SPVATF]-1659908448834
GPR[EPVATF]-1659908449691
GPR[SPS]-1659908449691
[354820] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:466.
GPR[EPS]-1659908450184
GPR[ESUN]-1659908450184
GPR[SSUN]-1659908450184
-1117079791
GPR[SPVATF]-1659908450381
GPR[EPVATF]-1659908451259
GPR[SPS]-1659908451259
[356389] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:465.
GPR[EPS]-1659908451753
GPR[ESUN]-1659908451753
GPR[SSUN]-1659908451753
-1117079791
GPR[SPVATF]-1659908451946
GPR[EPVATF]-1659908452865
GPR[SPS]-1659908452865
[357995] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:464.
GPR[EPS]-1659908453359
GPR[ESUN]-1659908453359
GPR[SSUN]-1659908453359
-1117079791
GPR[SPVATF]-1659908453556
GPR[EPVATF]-1659908454413
GPR[SPS]-1659908454413
[359583] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:463.
GPR[EPS]-1659908454947
GPR[ESUN]-1659908454947
GPR[SSUN]-1659908454947
-1117079791
GPR[SPVATF]-1659908455142
GPR[EPVATF]-1659908456001
GPR[SPS]-1659908456001
[361140] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:119.
GPR[EPS]-1659908456505
GPR[ESUN]-1659908456505
GPR[SSUN]-1659908456505
-1117079791
GPR[ESUN]-1659908456701
GPR[SSUN]-1659908456701
-1117079791
GPR[SPVATF]-1659908456902
GPR[EPVATF]-1659908457773
GPR[SPS]-1659908457773
[362909] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:745.
GPR[EPS]-1659908458273
GPR[ESUN]-1659908458273
GPR[SSUN]-1659908458273
-1117079791
GPR[SPVATF]-1659908458473
GPR[EPVATF]-1659908459338
GPR[SPS]-1659908459338
[364469] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:744.
GPR[EPS]-1659908459833
GPR[ESUN]-1659908459833
GPR[SSUN]-1659908459834
-1117079791
GPR[ESUN]-1659908460034
GPR[SSUN]-1659908460034
-1117079791
GPR[SPVATF]-1659908460228
GPR[EPVATF]-1659908461137
GPR[SPS]-1659908461137
[366263] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:175.
GPR[EPS]-1659908461628
GPR[ESUN]-1659908461628
GPR[SSUN]-1659908461628
-1117079791
GPR[ESUN]-1659908461849
GPR[SSUN]-1659908461849
-1117079791
GPR[SPVATF]-1659908462043
GPR[EPVATF]-1659908462900
GPR[SPS]-1659908462900
[368052] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:240.
GPR[EPS]-1659908463416
GPR[ESUN]-1659908463416
GPR[SSUN]-1659908463417
-1117079791
GPR[SPVATF]-1659908463613
GPR[EPVATF]-1659908464464
GPR[SPS]-1659908464464
[369591] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:795.
GPR[EPS]-1659908464955
GPR[ESUN]-1659908464955
GPR[SSUN]-1659908464955
2433571
GPR[SPVATF]-1659908465188
GPR[EPVATF]-1659908466052
GPR[SPS]-1659908466052
[371321] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1626.
GPR[EPS]-1659908466685
GPR[ESUN]-1659908466685
GPR[SSUN]-1659908466685
2433571
GPR[ESUN]-1659908467041
GPR[SSUN]-1659908467041
2433571
GPR[SPVATF]-1659908467274
GPR[EPVATF]-1659908468131
GPR[SPS]-1659908468131
[373437] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1625.
GPR[EPS]-1659908468802
GPR[SPVATF]-1659908468802
GPR[EPVATF]-1659908469661
GPR[SPS]-1659908469661
[374931] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1625.
GPR[EPS]-1659908470295
GPR[ESUN]-1659908470295
GPR[SSUN]-1659908470295
2433571
GPR[ESUN]-1659908470531
GPR[SSUN]-1659908470531
2346
GPR[ESUN]-1659908470722
GPR[SSUN]-1659908470722
2346
GPR[SPVATF]-1659908470901
GPR[EPVATF]-1659908471765
GPR[SPS]-1659908471765
[376861] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.IR:175.
GPR[EPS]-1659908472225
GPR[ESUN]-1659908472225
GPR[SSUN]-1659908472225
1187751237
GPR[ESUN]-1659908472504
GPR[SSUN]-1659908472504
1187751237
GPR[ESUN]-1659908472783
GPR[SSUN]-1659908472784
-1345859678
GPR[ESUN]-1659908473032
GPR[SSUN]-1659908473032
-1345859678
GPR[ESUN]-1659908473296
GPR[SSUN]-1659908473296
1187751237
GPR[SPVATF]-1659908473574
GPR[EPVATF]-1659908474440
GPR[SPS]-1659908474440
[379858] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:876.
GPR[EPS]-1659908475222
GPR[ESUN]-1659908475222
GPR[SSUN]-1659908475222
-1117079791
GPR[ESUN]-1659908475417
GPR[SSUN]-1659908475417
-1117079791
GPR[SPVATF]-1659908475615
GPR[EPVATF]-1659908476507
GPR[SPS]-1659908476507
[381638] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:268.
GPR[EPS]-1659908477002
GPR[ESUN]-1659908477002
GPR[SSUN]-1659908477002
1627430776
GPR[SPVATF]-1659908477201
GPR[EPVATF]-1659908478058
GPR[SPS]-1659908478058
[383231] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeOptimizationsPass:217.
GPR[EPS]-1659908478595
GPR[ESUN]-1659908478595
GPR[SSUN]-1659908478595
1627430776
GPR[SPVATF]-1659908478788
GPR[EPVATF]-1659908479651
GPR[SPS]-1659908479651
[384788] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeOptimizationsPass:211.
GPR[EPS]-1659908480152
GPR[ESUN]-1659908480152
GPR[SSUN]-1659908480152
1627430776
GPR[SPVATF]-1659908480349
GPR[EPVATF]-1659908481212
GPR[SPS]-1659908481212
[386349] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeOptimizationsPass:198.
GPR[EPS]-1659908481713
GPR[SPVATF]-1659908481713
GPR[EPVATF]-1659908482577
GPR[SPS]-1659908482577
[387752] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeOptimizationsPass:198.
GPR[EPS]-1659908483116
GPR[ESUN]-1659908483116
GPR[SSUN]-1659908483116
1627430776
GPR[SPVATF]-1659908483315
GPR[EPVATF]-1659908484195
GPR[SPS]-1659908484195
[389332] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeOptimizationsPass:192.
GPR[EPS]-1659908484696
GPR[SPVATF]-1659908484696
GPR[EPVATF]-1659908485570
GPR[SPS]-1659908485570
[553705] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeOptimizationsPass:192.
GPR[EPS]-1659908649069
GPR[ESUN]-1659908658218
GPR[SSUN]-1659908658218
[586673] WARN Launcher - cannot create shadow class: com.google.javascript.rhino.Node
java.lang.OutOfMemoryError: GC overhead limit exceeded
	at java.lang.StringBuilder.toString(StringBuilder.java:407)
	at spoon.support.visitor.SignaturePrinter.getSignature(SignaturePrinter.java:34)
	at spoon.support.reflect.declaration.CtExecutableImpl.getSignature(CtExecutableImpl.java:183)
	at spoon.support.reflect.declaration.CtTypeImpl.addMethod(CtTypeImpl.java:587)
	at spoon.support.visitor.java.internal.TypeRuntimeBuilderContext.addMethod(TypeRuntimeBuilderContext.java:54)
	at spoon.support.visitor.java.JavaReflectionTreeBuilder.visitMethod(JavaReflectionTreeBuilder.java:280)
	at spoon.support.visitor.java.JavaReflectionVisitorImpl.visitMethod(JavaReflectionVisitorImpl.java:333)
	at spoon.support.visitor.java.JavaReflectionVisitorImpl.visitClass(JavaReflectionVisitorImpl.java:82)
	at spoon.support.visitor.java.JavaReflectionTreeBuilder.visitClass(JavaReflectionTreeBuilder.java:152)
	at spoon.support.visitor.java.JavaReflectionTreeBuilder.scan(JavaReflectionTreeBuilder.java:109)
	at spoon.reflect.factory.TypeFactory.get(TypeFactory.java:564)
	at spoon.support.compiler.jdt.JDTImportBuilder.getOrLoadClass(JDTImportBuilder.java:150)
	at spoon.support.compiler.jdt.JDTImportBuilder.build(JDTImportBuilder.java:75)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.lambda$buildModel$1(JDTBasedSpoonCompiler.java:441)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler$$Lambda$44/214929887.accept(Unknown Source)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.forEachCompilationUnit(JDTBasedSpoonCompiler.java:464)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:440)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:372)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:335)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:116)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:99)
	at fr.inria.lille.commons.spoon.util.SpoonModelLibrary.modelFor(SpoonModelLibrary.java:53)
	at fr.inria.lille.commons.spoon.SpoonedFile.<init>(SpoonedFile.java:60)
	at fr.inria.lille.commons.spoon.SpoonedClass.<init>(SpoonedClass.java:14)
	at fr.inria.lille.commons.spoon.SpoonedProject.forked(SpoonedProject.java:47)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:233)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
1627430776
GPR[ESUN]-1659908682050
GPR[SSUN]-1659908682050
1627430776
GPR[SPVATF]-1659908722022
[632235] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: GC overhead limit exceeded
GPR[ESUN]-1659908727599
GPR[SSUN]-1659908727599
[660522] WARN Launcher - cannot create shadow class: java.util.ArrayList
java.lang.OutOfMemoryError: GC overhead limit exceeded
	at java.util.Arrays.copyOfRange(Arrays.java:3664)
	at java.lang.String.<init>(String.java:201)
	at java.lang.StringBuilder.toString(StringBuilder.java:407)
	at spoon.support.reflect.reference.CtTypeReferenceImpl.getQualifiedName(CtTypeReferenceImpl.java:225)
	at spoon.support.visitor.SignaturePrinter.visitCtTypeReference(SignaturePrinter.java:74)
	at spoon.support.reflect.reference.CtTypeReferenceImpl.accept(CtTypeReferenceImpl.java:75)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:191)
	at spoon.support.visitor.SignaturePrinter.visitCtMethod(SignaturePrinter.java:144)
	at spoon.support.reflect.declaration.CtMethodImpl.accept(CtMethodImpl.java:58)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:191)
	at spoon.support.reflect.declaration.CtExecutableImpl.getSignature(CtExecutableImpl.java:182)
	at spoon.support.reflect.declaration.CtTypeImpl.addMethod(CtTypeImpl.java:587)
	at spoon.support.visitor.java.internal.TypeRuntimeBuilderContext.addMethod(TypeRuntimeBuilderContext.java:54)
	at spoon.support.visitor.java.JavaReflectionTreeBuilder.visitMethod(JavaReflectionTreeBuilder.java:280)
	at spoon.support.visitor.java.JavaReflectionVisitorImpl.visitMethod(JavaReflectionVisitorImpl.java:333)
	at spoon.support.visitor.java.JavaReflectionVisitorImpl.visitClass(JavaReflectionVisitorImpl.java:82)
	at spoon.support.visitor.java.JavaReflectionTreeBuilder.visitClass(JavaReflectionTreeBuilder.java:152)
	at spoon.support.visitor.java.JavaReflectionTreeBuilder.scan(JavaReflectionTreeBuilder.java:109)
	at spoon.reflect.factory.TypeFactory.get(TypeFactory.java:564)
	at spoon.support.compiler.jdt.JDTImportBuilder.getOrLoadClass(JDTImportBuilder.java:150)
	at spoon.support.compiler.jdt.JDTImportBuilder.build(JDTImportBuilder.java:75)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.lambda$buildModel$1(JDTBasedSpoonCompiler.java:441)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler$$Lambda$44/214929887.accept(Unknown Source)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.forEachCompilationUnit(JDTBasedSpoonCompiler.java:464)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:440)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:372)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:335)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:116)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:99)
	at fr.inria.lille.commons.spoon.util.SpoonModelLibrary.modelFor(SpoonModelLibrary.java:53)
	at fr.inria.lille.commons.spoon.SpoonedFile.<init>(SpoonedFile.java:60)
	at fr.inria.lille.commons.spoon.SpoonedClass.<init>(SpoonedClass.java:14)
1627430776
GPR[SPVATF]-1659908755890
GPR[EPVATF]-1659908801654
GPR[SPS]-1659908801654
[722122] WARN Launcher - cannot create shadow class: com.google.javascript.rhino.Node
java.lang.OutOfMemoryError: GC overhead limit exceeded
[737648] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.OutOfMemoryError: GC overhead limit exceeded
GPR[ESUN]-1659908833012
GPR[SSUN]-1659908833012
1627430776
GPR[SPVATF]-1659908848347
[757253] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: GC overhead limit exceeded
GPR[SPVATF]-1659908852617
GPR[EPVATF]-1659908887939
GPR[SPS]-1659908887939
[800994] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: GC overhead limit exceeded
GPR[ESUN]-1659908896358
GPR[SSUN]-1659908896358
1627430776
GPR[ESUN]-1659908909878
GPR[SSUN]-1659908909878
\n\nNode: host-48\n
\n\nDate: Sun 07 Aug 2022 02:48:39 PM PDT\n
End running Nopol Closure/132 results at /experiment_home///results/Nopol/Closure/132/seed_261/
Removing checked out dir script/workingdir/Nopol/Closure_132
GPR[SSLE]-1659908919615
GPR[ESLE]-1659908979621
