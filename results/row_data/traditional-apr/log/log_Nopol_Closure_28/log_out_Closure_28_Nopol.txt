Sleep 1m start
GPR[SSLI]-1659902424570
GPR[ESLI]-1659902484573
Running Nopol Closure 28b with approach: smt
Timezone: America/Los_Angeles
Seed 264
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/28/seed_264/
The file script/workingdir/Nopol/Closure_28 does not exist!
script/workingdir/Nopol/Closure_28
script/workingdir/Nopol/Closure_28
classpath:  script/workingdir/Nopol/Closure_28/build/classes:script/workingdir/Nopol/Closure_28/lib/args4j.jar:script/workingdir/Nopol/Closure_28/lib/guava.jar:script/workingdir/Nopol/Closure_28/lib/json.jar:script/workingdir/Nopol/Closure_28/lib/jsr305.jar:script/workingdir/Nopol/Closure_28/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_28/build/lib/rhino.jar:script/workingdir/Nopol/Closure_28/lib/ant.jar:script/workingdir/Nopol/Closure_28/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_28/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_28/lib/jarjar.jar:script/workingdir/Nopol/Closure_28/lib/junit.jar:script/workingdir/Nopol/Closure_28/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659902504071
GPR[ESLB]-1659902564077
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_28//build/classes:script/workingdir/Nopol/Closure_28//build/test:script/workingdir/Nopol/Closure_28/build/classes:script/workingdir/Nopol/Closure_28/lib/args4j.jar:script/workingdir/Nopol/Closure_28/lib/guava.jar:script/workingdir/Nopol/Closure_28/lib/json.jar:script/workingdir/Nopol/Closure_28/lib/jsr305.jar:script/workingdir/Nopol/Closure_28/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_28/build/lib/rhino.jar:script/workingdir/Nopol/Closure_28/lib/ant.jar:script/workingdir/Nopol/Closure_28/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_28/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_28/lib/jarjar.jar:script/workingdir/Nopol/Closure_28/lib/junit.jar:script/workingdir/Nopol/Closure_28/build/test
Node: host-50
Date init: Sun 07 Aug 2022 01:02:44 PM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_28/src]
[0] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_28/build/classes/, file:script/workingdir/Nopol/Closure_28/build/test/, file:script/workingdir/Nopol/Closure_28/build/classes/, file:script/workingdir/Nopol/Closure_28/lib/args4j.jar, file:script/workingdir/Nopol/Closure_28/lib/guava.jar, file:script/workingdir/Nopol/Closure_28/lib/json.jar, file:script/workingdir/Nopol/Closure_28/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_28/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_28/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_28/lib/ant.jar, file:script/workingdir/Nopol/Closure_28/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_28/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_28/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_28/lib/junit.jar, file:script/workingdir/Nopol/Closure_28/build/test/]
[0] INFO NoPol - Statement type: PRE_THEN_COND
[0] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_28/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/28/seed_264/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[8] INFO NoPol - Free memory: 1 GB
[8] INFO NoPol - Maximum memory: 7 GB
[8] INFO NoPol - Total memory available to JVM: 1 GB
[9] INFO NoPol - Java version: 1.8.0_45
[10] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[10] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659902569377
GPR[ESUP]-1659902569377
GPR[SFL]-1659902569378
GPR[EFL]-1659902609662
GPR[SFP]-1659902609663
GPR[SSUN]-1659902611347
-283827935
GPR[SPVATF]-1659902611904
GPR[EPVATF]-1659902611941
[47069] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902611941
GPR[SSUN]-1659902611941
80988634
GPR[ESUN]-1659902612119
GPR[SSUN]-1659902612120
-1966087783
GPR[ESUN]-1659902612343
GPR[SSUN]-1659902612343
-1966087783
GPR[SPVATF]-1659902612542
GPR[EPVATF]-1659902612574
[47702] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902612574
GPR[SSUN]-1659902612574
-1659631726
GPR[ESUN]-1659902612771
GPR[SSUN]-1659902612771
130004992
GPR[ESUN]-1659902612954
GPR[SSUN]-1659902612954
130004992
GPR[SPVATF]-1659902613520
GPR[EPVATF]-1659902613548
[48676] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902613548
GPR[SSUN]-1659902613548
130004992
GPR[ESUN]-1659902613730
GPR[SSUN]-1659902613730
80988634
GPR[ESUN]-1659902613908
GPR[SSUN]-1659902613908
-1966087783
GPR[SPVATF]-1659902614107
GPR[EPVATF]-1659902614128
[49257] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902614129
GPR[SSUN]-1659902614129
-1966087783
GPR[SPVATF]-1659902614327
GPR[EPVATF]-1659902614348
[49476] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902614348
GPR[SSUN]-1659902614348
890942016
GPR[ESUN]-1659902614547
GPR[SSUN]-1659902614547
890942016
GPR[SPVATF]-1659902614746
GPR[EPVATF]-1659902614766
[49894] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902614766
GPR[SSUN]-1659902614766
890942016
GPR[SPVATF]-1659902614965
GPR[EPVATF]-1659902614990
[50118] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902614990
GPR[EPVATF]-1659902615019
[50147] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902615019
GPR[SSUN]-1659902615019
890942016
GPR[ESUN]-1659902615222
GPR[SSUN]-1659902615222
890942016
GPR[ESUN]-1659902615419
GPR[SSUN]-1659902615419
-1966087783
GPR[ESUN]-1659902615616
GPR[SSUN]-1659902615616
-1966087783
GPR[SPVATF]-1659902615819
GPR[EPVATF]-1659902615841
[50969] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902615841
GPR[EPVATF]-1659902615860
[50988] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902615860
GPR[SSUN]-1659902615860
-1966087783
GPR[ESUN]-1659902616063
GPR[SSUN]-1659902616063
-1966087783
GPR[SPVATF]-1659902616460
GPR[EPVATF]-1659902616480
[51608] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902616481
GPR[EPVATF]-1659902616500
[51628] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902616500
GPR[SSUN]-1659902616500
-1966087783
GPR[ESUN]-1659902616717
GPR[SSUN]-1659902616717
-1966087783
GPR[ESUN]-1659902616911
GPR[SSUN]-1659902616911
-1966087783
GPR[ESUN]-1659902617100
GPR[SSUN]-1659902617100
1613130706
GPR[ESUN]-1659902617310
GPR[SSUN]-1659902617311
1613130706
GPR[ESUN]-1659902617522
GPR[SSUN]-1659902617522
1613130706
GPR[SPVATF]-1659902617730
GPR[EPVATF]-1659902617915
[53043] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902617915
GPR[SSUN]-1659902617915
234947553
GPR[ESUN]-1659902618148
GPR[SSUN]-1659902618148
234947553
GPR[SPVATF]-1659902618340
GPR[EPVATF]-1659902618358
[53486] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902618358
GPR[EPVATF]-1659902618375
[53503] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902618375
GPR[SSUN]-1659902618375
234947553
GPR[ESUN]-1659902618573
GPR[SSUN]-1659902618573
234947553
GPR[SPVATF]-1659902618766
GPR[EPVATF]-1659902618784
[53912] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902618784
GPR[EPVATF]-1659902618800
[53928] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902618800
GPR[SSUN]-1659902618800
234947553
GPR[SPVATF]-1659902618995
GPR[EPVATF]-1659902619011
[54139] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902619011
GPR[SSUN]-1659902619011
234947553
GPR[ESUN]-1659902619213
GPR[SSUN]-1659902619213
234947553
GPR[ESUN]-1659902619405
GPR[SSUN]-1659902619406
234947553
GPR[SPVATF]-1659902619595
GPR[EPVATF]-1659902619611
[54739] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902619611
GPR[SSUN]-1659902619611
234947553
GPR[SPVATF]-1659902619801
GPR[EPVATF]-1659902619817
[54945] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902619817
GPR[SSUN]-1659902619817
234947553
GPR[SPVATF]-1659902620008
GPR[EPVATF]-1659902620024
[55152] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902620024
GPR[SSUN]-1659902620024
234947553
GPR[ESUN]-1659902620216
GPR[SSUN]-1659902620216
234947553
GPR[ESUN]-1659902620405
GPR[SSUN]-1659902620405
234947553
GPR[SPVATF]-1659902620600
GPR[EPVATF]-1659902620616
[55744] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902620616
GPR[SSUN]-1659902620616
234947553
GPR[SPVATF]-1659902620811
GPR[EPVATF]-1659902620826
[55955] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902620827
GPR[SSUN]-1659902620827
234947553
GPR[ESUN]-1659902621018
GPR[SSUN]-1659902621018
234947553
GPR[SPVATF]-1659902621205
GPR[EPVATF]-1659902621222
[56350] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902621222
GPR[SSUN]-1659902621222
234947553
GPR[SPVATF]-1659902621413
GPR[EPVATF]-1659902621428
[56557] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902621429
GPR[SSUN]-1659902621429
234947553
GPR[ESUN]-1659902621621
GPR[SSUN]-1659902621621
890942016
GPR[SPVATF]-1659902621813
GPR[EPVATF]-1659902621831
[56959] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902621831
GPR[EPVATF]-1659902621858
[56987] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902621859
GPR[SSUN]-1659902621859
890942016
GPR[SPVATF]-1659902622052
GPR[EPVATF]-1659902622070
[57198] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902622070
GPR[SSUN]-1659902622070
890942016
GPR[ESUN]-1659902622261
GPR[SSUN]-1659902622261
890942016
GPR[SPVATF]-1659902622451
GPR[EPVATF]-1659902622470
[57598] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902622470
GPR[SSUN]-1659902622470
890942016
GPR[SPVATF]-1659902622664
GPR[EPVATF]-1659902622682
[57810] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902622682
GPR[EPVATF]-1659902622702
[57830] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902622702
GPR[SSUN]-1659902622702
890942016
GPR[SPVATF]-1659902622898
GPR[EPVATF]-1659902622917
[58045] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902622917
GPR[SSUN]-1659902622917
890942016
GPR[SPVATF]-1659902623111
GPR[EPVATF]-1659902623129
[58257] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902623130
GPR[EPVATF]-1659902623146
[58275] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902623147
GPR[SSUN]-1659902623147
890942016
GPR[ESUN]-1659902623340
GPR[SSUN]-1659902623340
890942016
GPR[SPVATF]-1659902623527
GPR[EPVATF]-1659902623545
[58673] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902623545
GPR[SSUN]-1659902623545
890942016
GPR[SPVATF]-1659902623733
GPR[EPVATF]-1659902625810
[60938] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902625810
GPR[SSUN]-1659902625810
890942016
GPR[SPVATF]-1659902626015
GPR[EPVATF]-1659902626035
[61163] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902626035
GPR[SSUN]-1659902626035
890942016
GPR[ESUN]-1659902626225
GPR[SSUN]-1659902626225
1613130706
GPR[SPVATF]-1659902626433
GPR[EPVATF]-1659902626602
[61730] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902626602
GPR[EPVATF]-1659902626769
[61897] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902626769
GPR[SSUN]-1659902626769
1613130706
GPR[SPVATF]-1659902626986
GPR[EPVATF]-1659902627154
[62282] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902627154
GPR[SSUN]-1659902627154
1613130706
GPR[SPVATF]-1659902627365
GPR[EPVATF]-1659902627547
[62675] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902627547
GPR[EPVATF]-1659902627720
[62848] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902627720
GPR[SSUN]-1659902627720
2433571
GPR[ESUN]-1659902627967
GPR[SSUN]-1659902627967
80988634
GPR[ESUN]-1659902628146
GPR[SSUN]-1659902628146
80988634
GPR[ESUN]-1659902628338
GPR[SSUN]-1659902628338
1613130706
GPR[SPVATF]-1659902628549
GPR[EPVATF]-1659902628723
[63851] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902628723
GPR[EPVATF]-1659902628898
[64026] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902628898
GPR[SSUN]-1659902628898
1613130706
GPR[SPVATF]-1659902629109
GPR[EPVATF]-1659902629276
[64404] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902629288
GPR[EPVATF]-1659902629461
[64589] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902629461
GPR[SSUN]-1659902629461
1613130706
GPR[ESUN]-1659902629670
GPR[SSUN]-1659902629670
1613130706
GPR[ESUN]-1659902629875
GPR[SSUN]-1659902629875
1613130706
GPR[ESUN]-1659902630077
GPR[SSUN]-1659902630077
1613130706
GPR[ESUN]-1659902630281
GPR[SSUN]-1659902630281
1613130706
GPR[SPVATF]-1659902630494
GPR[EPVATF]-1659902630666
[65794] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902630666
GPR[EPVATF]-1659902630838
[65966] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902630838
GPR[SSUN]-1659902630840
2433571
GPR[SPVATF]-1659902631082
GPR[EPVATF]-1659902632185
GPR[SPS]-1659902632185
[68562] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1459.
GPR[EPS]-1659902633434
GPR[ESUN]-1659902633434
GPR[SSUN]-1659902633434
2433571
GPR[SPVATF]-1659902633678
GPR[EPVATF]-1659902634164
GPR[SPS]-1659902634164
GPR[EPS]-1659902635444
GPR[SPVATR]-1659902635444
[70572] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1430: PRECONDITION node2.type <= com.google.javascript.rhino.Node.JSDOC_INFO_PROP
[71189] INFO TestPatch - Running test suite to check the patch "node2.type <= com.google.javascript.rhino.Node.JSDOC_INFO_PROP" is working
GPR[EPVATR]-1659902636277
[71405] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659902636277
[71432] INFO NoPol - --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1429,7 +1429,9 @@
       if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        if (node2.type <= com.google.javascript.rhino.Node.JSDOC_INFO_PROP) {
+          return "Node tree inequality:" +
+          "\nTree1:\n" + toStringTree() +
+          "\n\nTree2:\n" + node2.toStringTree() +
+          "\n\nSubtree1: " + diff.nodeA.toStringTree() +
+          "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/28/seed_264/patch_66926_1ts_1659902636304.diff
GPR[ESUN]-1659902636305
GPR[SSUN]-1659902636305
1045502179
GPR[ESUN]-1659902636549
GPR[SSUN]-1659902636549
1045502179
GPR[SPVATF]-1659902636793
GPR[EPVATF]-1659902637268
GPR[SPS]-1659902637268
GPR[EPS]-1659902638429
GPR[SPVATR]-1659902638429
[73557] INFO TestPatch - Applying patch: com.google.javascript.jscomp.InlineFunctions:699: PRECONDITION fs.references.size() <= 2
[74060] INFO TestPatch - Running test suite to check the patch "fs.references.size() <= 2" is working
GPR[EPVATR]-1659902639156
[74284] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659902639157
[74293] INFO NoPol - --- a/src/com/google/javascript/jscomp/InlineFunctions.java
+++ b/src/com/google/javascript/jscomp/InlineFunctions.java
@@ -698,3 +698,5 @@
       } else {
-        return false;
+        if (fs.references.size() <= 2) {
+          return false;
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/28/seed_264/patch_69787_2ts_1659902639165.diff
GPR[ESUN]-1659902639165
GPR[SSUN]-1659902639165
1613130706
GPR[SPVATF]-1659902639379
GPR[EPVATF]-1659902639552
[74680] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902639552
GPR[SSUN]-1659902639552
1613130706
GPR[ESUN]-1659902639784
GPR[SSUN]-1659902639784
1613130706
GPR[SPVATF]-1659902640008
GPR[EPVATF]-1659902640171
[75299] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902640171
GPR[EPVATF]-1659902640342
[75471] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902640343
GPR[SSUN]-1659902640343
1613130706
GPR[ESUN]-1659902640557
GPR[SSUN]-1659902640557
1613130706
GPR[SPVATF]-1659902640772
GPR[EPVATF]-1659902640938
[76066] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902640939
GPR[EPVATF]-1659902641108
[76236] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902641108
GPR[SSUN]-1659902641108
1045502179
GPR[ESUN]-1659902641357
GPR[SSUN]-1659902641357
-1966087783
GPR[ESUN]-1659902641548
GPR[SSUN]-1659902641548
-1966087783
GPR[SPVATF]-1659902641735
GPR[EPVATF]-1659902641754
[76882] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902641754
GPR[EPVATF]-1659902641775
[76903] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902641775
GPR[SSUN]-1659902641775
-1966087783
GPR[SPVATF]-1659902641960
GPR[EPVATF]-1659902641979
[77107] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902641979
GPR[SSUN]-1659902641979
1045502179
GPR[SPVATF]-1659902642219
GPR[EPVATF]-1659902642701
GPR[SPS]-1659902642701
GPR[EPS]-1659902650812
GPR[ESUN]-1659902650812
GPR[SSUN]-1659902650812
-1966087783
GPR[SPVATF]-1659902651001
GPR[EPVATF]-1659902651023
[86151] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902651023
GPR[EPVATF]-1659902651044
[86172] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902651044
GPR[SSUN]-1659902651044
-1966087783
GPR[SPVATF]-1659902651234
GPR[EPVATF]-1659902651255
[86383] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902651255
GPR[EPVATF]-1659902651275
[86403] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902651275
GPR[SSUN]-1659902651275
-1966087783
GPR[SPVATF]-1659902651459
GPR[EPVATF]-1659902651480
[86608] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902651480
GPR[EPVATF]-1659902651501
[86629] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902651501
GPR[SSUN]-1659902651501
-1966087783
GPR[ESUN]-1659902651683
GPR[SSUN]-1659902651683
-1966087783
GPR[ESUN]-1659902651869
GPR[SSUN]-1659902651869
-1966087783
GPR[SPVATF]-1659902652050
GPR[EPVATF]-1659902652070
[87199] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902652071
GPR[EPVATF]-1659902652091
[87219] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902652091
GPR[SSUN]-1659902652091
-1966087783
GPR[SPVATF]-1659902652275
GPR[EPVATF]-1659902652296
[87424] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902652296
GPR[EPVATF]-1659902652316
[87444] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902652316
GPR[SSUN]-1659902652316
-1966087783
GPR[ESUN]-1659902652503
GPR[SSUN]-1659902652503
-1966087783
GPR[SPVATF]-1659902652689
GPR[EPVATF]-1659902652710
[87838] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902652710
GPR[SSUN]-1659902652710
-1966087783
GPR[SPVATF]-1659902652906
GPR[EPVATF]-1659902652927
[88055] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902652927
GPR[SSUN]-1659902652927
-1966087783
GPR[ESUN]-1659902653121
GPR[SSUN]-1659902653121
-1966087783
GPR[SPVATF]-1659902653304
GPR[EPVATF]-1659902653326
[88455] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902653327
GPR[SSUN]-1659902653327
-1966087783
GPR[ESUN]-1659902653511
GPR[SSUN]-1659902653511
-1966087783
GPR[ESUN]-1659902653697
GPR[SSUN]-1659902653697
-1966087783
GPR[SPVATF]-1659902653887
GPR[EPVATF]-1659902653909
[89037] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902653909
GPR[SSUN]-1659902653909
-1966087783
GPR[SPVATF]-1659902654100
GPR[EPVATF]-1659902654121
[89249] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902654121
GPR[SSUN]-1659902654121
2433571
GPR[SPVATF]-1659902654372
GPR[EPVATF]-1659902654853
GPR[SPS]-1659902654853
[90644] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1446.
GPR[EPS]-1659902655516
GPR[ESUN]-1659902655516
GPR[SSUN]-1659902655516
-1966087783
GPR[SPVATF]-1659902655705
GPR[EPVATF]-1659902655721
[90849] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902655721
GPR[SSUN]-1659902655721
1616555300
GPR[ESUN]-1659902655912
GPR[SSUN]-1659902655912
1616555300
GPR[ESUN]-1659902656104
GPR[SSUN]-1659902656104
170294779
GPR[ESUN]-1659902656288
GPR[SSUN]-1659902656288
170294779
GPR[SPVATF]-1659902656475
GPR[EPVATF]-1659902656954
GPR[SPS]-1659902656954
[92578] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineCostEstimator$CompiledSizeEstimator:88.
GPR[EPS]-1659902657450
GPR[SPVATF]-1659902657450
GPR[EPVATF]-1659902657962
GPR[SPS]-1659902657962
[93565] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineCostEstimator$CompiledSizeEstimator:88.
GPR[EPS]-1659902658437
GPR[ESUN]-1659902658437
GPR[SSUN]-1659902658437
170294779
GPR[SPVATF]-1659902658628
GPR[EPVATF]-1659902659122
GPR[SPS]-1659902659122
[94736] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineCostEstimator$CompiledSizeEstimator:87.
GPR[EPS]-1659902659608
GPR[ESUN]-1659902659608
GPR[SSUN]-1659902659608
170294779
GPR[SPVATF]-1659902659839
GPR[EPVATF]-1659902660345
GPR[SPS]-1659902660345
[95992] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineCostEstimator$CompiledSizeEstimator:86.
GPR[EPS]-1659902660864
GPR[ESUN]-1659902660864
GPR[SSUN]-1659902660864
170294779
GPR[ESUN]-1659902661058
GPR[SSUN]-1659902661058
170294779
GPR[ESUN]-1659902661256
GPR[SSUN]-1659902661256
170294779
GPR[ESUN]-1659902661450
GPR[SSUN]-1659902661450
170294779
GPR[ESUN]-1659902661637
GPR[SSUN]-1659902661637
170294779
GPR[SPVATF]-1659902661826
GPR[EPVATF]-1659902662310
GPR[SPS]-1659902662310
[97980] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineCostEstimator$CompiledSizeEstimator:67.
GPR[EPS]-1659902662852
GPR[ESUN]-1659902662852
GPR[SSUN]-1659902662852
170294779
GPR[ESUN]-1659902663039
GPR[SSUN]-1659902663039
170294779
GPR[ESUN]-1659902663220
GPR[SSUN]-1659902663220
170294779
GPR[SPVATF]-1659902663406
GPR[EPVATF]-1659902663989
GPR[SPS]-1659902663989
[99588] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineCostEstimator:47.
GPR[EPS]-1659902664460
GPR[ESUN]-1659902664460
GPR[SSUN]-1659902664460
170294779
GPR[ESUN]-1659902664644
GPR[SSUN]-1659902664644
170294779
GPR[ESUN]-1659902664831
GPR[SSUN]-1659902664831
2433571
GPR[SPVATF]-1659902665061
GPR[EPVATF]-1659902665566
GPR[SPS]-1659902665566
[101370] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:965.
GPR[EPS]-1659902666242
GPR[ESUN]-1659902666242
GPR[SSUN]-1659902666242
80988634
GPR[ESUN]-1659902666417
GPR[SSUN]-1659902666417
2433571
GPR[SPVATF]-1659902666652
GPR[EPVATF]-1659902667215
GPR[SPS]-1659902667215
[103623] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:962.
GPR[EPS]-1659902668495
GPR[SPVATF]-1659902668495
GPR[EPVATF]-1659902669108
GPR[SPS]-1659902669108
[104894] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:962.
GPR[EPS]-1659902669766
GPR[ESUN]-1659902669766
GPR[SSUN]-1659902669766
2433571
GPR[SPVATF]-1659902670014
GPR[EPVATF]-1659902670509
GPR[SPS]-1659902670509
[106274] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:958.
GPR[EPS]-1659902671146
GPR[ESUN]-1659902671146
GPR[SSUN]-1659902671146
-1966087783
GPR[SPVATF]-1659902671339
GPR[EPVATF]-1659902671356
[106484] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902671356
GPR[SSUN]-1659902671356
-1966087783
GPR[SPVATF]-1659902671544
GPR[EPVATF]-1659902671560
[106688] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902671560
GPR[SSUN]-1659902671560
-1966087783
GPR[SPVATF]-1659902671749
GPR[EPVATF]-1659902671766
[106894] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902671766
GPR[SSUN]-1659902671766
-1966087783
GPR[SPVATF]-1659902671968
GPR[EPVATF]-1659902671985
[107113] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902671985
GPR[SSUN]-1659902671985
-1966087783
GPR[SPVATF]-1659902672172
GPR[EPVATF]-1659902672190
[107318] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902672190
GPR[SSUN]-1659902672190
-1966087783
GPR[SPVATF]-1659902672383
GPR[EPVATF]-1659902672399
[107527] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902672399
GPR[EPVATF]-1659902672415
[107543] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902672415
GPR[SSUN]-1659902672415
-1966087783
GPR[ESUN]-1659902672606
GPR[SSUN]-1659902672606
2433571
GPR[ESUN]-1659902672842
GPR[SSUN]-1659902672842
2433571
GPR[ESUN]-1659902673069
GPR[SSUN]-1659902673069
-675467674
GPR[ESUN]-1659902673238
GPR[SSUN]-1659902673238
1045502179
GPR[SPVATF]-1659902673477
GPR[EPVATF]-1659902673958
GPR[SPS]-1659902673958
[109751] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:902.
GPR[EPS]-1659902674623
GPR[SPVATF]-1659902674624
GPR[EPVATF]-1659902675122
GPR[SPS]-1659902675122
[110940] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:902.
GPR[EPS]-1659902675812
GPR[ESUN]-1659902675812
GPR[SSUN]-1659902675812
1045502179
GPR[SPVATF]-1659902676055
GPR[EPVATF]-1659902676553
GPR[SPS]-1659902676553
[112354] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:901.
GPR[EPS]-1659902677226
GPR[ESUN]-1659902677227
GPR[SSUN]-1659902677227
1045502179
GPR[SPVATF]-1659902677463
GPR[EPVATF]-1659902677950
GPR[SPS]-1659902677950
GPR[EPS]-1659902679445
GPR[SPVATR]-1659902679445
[114573] INFO TestPatch - Applying patch: com.google.javascript.jscomp.InlineFunctions:692: PRECONDITION fs.references.size() <= 2
[115073] INFO TestPatch - Running test suite to check the patch "fs.references.size() <= 2" is working
GPR[EPVATR]-1659902680368
[115496] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659902680368
[115501] INFO NoPol - --- a/src/com/google/javascript/jscomp/InlineFunctions.java
+++ b/src/com/google/javascript/jscomp/InlineFunctions.java
@@ -691,10 +691,12 @@
       // Try again without Block inlining references
-      if (fs.hasBlockInliningReferences()) {
-        fs.setRemove(false);
-        fs.removeBlockInliningReferences();
-        if (!fs.hasReferences() || !inliningLowersCost(fs)) {
+      if (fs.references.size() <= 2) {
+        if (fs.hasBlockInliningReferences()) {
+          fs.setRemove(false);
+          fs.removeBlockInliningReferences();
+          if (!fs.hasReferences() || !inliningLowersCost(fs)) {
+            return false;
+          }
+        } else {
           return false;
         }
-      } else {
-        return false;
       }

Saving patch at /experiment_home///results/Nopol/Closure/28/seed_264/patch_110995_3ts_1659902680373.diff
GPR[SPVATF]-1659902680374
GPR[EPVATF]-1659902680864
GPR[SPS]-1659902680864
[116750] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:692.
GPR[EPS]-1659902681622
GPR[ESUN]-1659902681622
GPR[SSUN]-1659902681622
170294779
GPR[SPVATF]-1659902681816
GPR[EPVATF]-1659902682303
GPR[SPS]-1659902682303
[117939] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineCostEstimator$CompiledSizeEstimator:89.
GPR[EPS]-1659902682811
GPR[ESUN]-1659902682811
GPR[SSUN]-1659902682811
80988634
GPR[ESUN]-1659902682986
GPR[SSUN]-1659902682986
1616555300
GPR[ESUN]-1659902683170
GPR[SSUN]-1659902683170
-132053243
GPR[SPVATF]-1659902683362
GPR[EPVATF]-1659902683380
[118508] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902683380
GPR[SSUN]-1659902683380
-132053243
GPR[SPVATF]-1659902683634
GPR[EPVATF]-1659902683652
[118780] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902683652
GPR[SSUN]-1659902683652
-132053243
GPR[SPVATF]-1659902683911
GPR[EPVATF]-1659902683928
[119056] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902683928
GPR[SSUN]-1659902683928
-132053243
GPR[SPVATF]-1659902684116
GPR[EPVATF]-1659902684135
[119263] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902684135
GPR[EPVATF]-1659902684152
[119280] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902684152
GPR[SSUN]-1659902684152
-132053243
GPR[ESUN]-1659902684351
GPR[SSUN]-1659902684351
80988634
GPR[ESUN]-1659902684527
GPR[SSUN]-1659902684527
-132053243
GPR[ESUN]-1659902684715
GPR[SSUN]-1659902684715
-132053243
GPR[SPVATF]-1659902684899
GPR[EPVATF]-1659902684917
[120045] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902684917
GPR[EPVATF]-1659902684935
[120063] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902684935
GPR[SSUN]-1659902684935
-132053243
GPR[ESUN]-1659902685119
GPR[SSUN]-1659902685119
-132053243
GPR[ESUN]-1659902685303
GPR[SSUN]-1659902685303
-132053243
GPR[ESUN]-1659902685492
GPR[SSUN]-1659902685492
-132053243
GPR[SPVATF]-1659902685716
GPR[EPVATF]-1659902685736
[120864] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902685737
GPR[EPVATF]-1659902685754
[120882] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902685754
GPR[SSUN]-1659902685754
-132053243
GPR[SPVATF]-1659902685950
GPR[EPVATF]-1659902685968
[121096] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902685968
GPR[SSUN]-1659902685968
1045502179
GPR[ESUN]-1659902686219
GPR[SSUN]-1659902686219
1045502179
GPR[ESUN]-1659902686455
GPR[SSUN]-1659902686455
1045502179
GPR[SPVATF]-1659902686715
GPR[EPVATF]-1659902687213
GPR[SPS]-1659902687213
[123028] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:189.
GPR[EPS]-1659902687900
GPR[ESUN]-1659902687900
GPR[SSUN]-1659902687900
-132053243
GPR[SPVATF]-1659902688090
GPR[EPVATF]-1659902688110
[123238] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902688110
GPR[EPVATF]-1659902688128
[123256] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902688128
GPR[SSUN]-1659902688128
-132053243
GPR[SPVATF]-1659902688318
GPR[EPVATF]-1659902688336
[123465] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902688337
GPR[SSUN]-1659902688337
-132053243
GPR[SPVATF]-1659902688525
GPR[EPVATF]-1659902688546
[123674] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902688546
GPR[SSUN]-1659902688546
2433571
GPR[ESUN]-1659902688796
GPR[SSUN]-1659902688796
448480590
GPR[SPVATF]-1659902689030
GPR[EPVATF]-1659902689537
GPR[SPS]-1659902689537
[125260] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodePrinter$CompactCodePrinter:503.
GPR[EPS]-1659902690132
GPR[ESUN]-1659902690132
GPR[SSUN]-1659902690132
448480590
GPR[ESUN]-1659902690335
GPR[SSUN]-1659902690336
448480590
GPR[SPVATF]-1659902691261
GPR[EPVATF]-1659902691958
GPR[SPS]-1659902691958
[127629] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodePrinter$CompactCodePrinter:459.
GPR[EPS]-1659902692501
GPR[ESUN]-1659902692501
GPR[SSUN]-1659902692501
448480590
GPR[SPVATF]-1659902692703
GPR[EPVATF]-1659902693211
GPR[SPS]-1659902693211
[128866] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodePrinter$CompactCodePrinter:458.
GPR[EPS]-1659902693738
GPR[ESUN]-1659902693738
GPR[SSUN]-1659902693738
448480590
GPR[SPVATF]-1659902693949
GPR[EPVATF]-1659902694446
GPR[SPS]-1659902694446
[130104] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodePrinter$CompactCodePrinter:457.
GPR[EPS]-1659902694976
GPR[ESUN]-1659902694976
GPR[SSUN]-1659902694976
448480590
GPR[SPVATF]-1659902695177
GPR[EPVATF]-1659902695679
GPR[SPS]-1659902695680
[131357] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodePrinter$CompactCodePrinter:456.
GPR[EPS]-1659902696229
GPR[ESUN]-1659902696229
GPR[SSUN]-1659902696229
448480590
GPR[SPVATF]-1659902696451
GPR[EPVATF]-1659902696948
GPR[SPS]-1659902696948
[132589] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodePrinter$CompactCodePrinter:455.
GPR[EPS]-1659902697461
GPR[ESUN]-1659902697461
GPR[SSUN]-1659902697461
448480590
GPR[SPVATF]-1659902697668
GPR[EPVATF]-1659902698167
GPR[SPS]-1659902698167
[133814] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodePrinter$CompactCodePrinter:454.
GPR[EPS]-1659902698686
GPR[ESUN]-1659902698686
GPR[SSUN]-1659902698686
448480590
GPR[SPVATF]-1659902698896
GPR[EPVATF]-1659902699414
GPR[SPS]-1659902699414
[135074] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodePrinter$CompactCodePrinter:453.
GPR[EPS]-1659902699946
GPR[SPVATF]-1659902699946
GPR[EPVATF]-1659902700450
GPR[SPS]-1659902700450
[136148] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodePrinter$CompactCodePrinter:453.
GPR[EPS]-1659902701020
GPR[ESUN]-1659902701020
GPR[SSUN]-1659902701020
2433571
GPR[SPVATF]-1659902701256
GPR[EPVATF]-1659902701783
GPR[SPS]-1659902701783
[137539] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1038.
GPR[EPS]-1659902702411
GPR[ESUN]-1659902702411
GPR[SSUN]-1659902702411
2433571
GPR[SPVATF]-1659902702642
GPR[EPVATF]-1659902703140
GPR[SPS]-1659902703140
[138979] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1031.
GPR[EPS]-1659902703851
GPR[ESUN]-1659902703852
GPR[SSUN]-1659902703852
-132053243
GPR[ESUN]-1659902704044
GPR[SSUN]-1659902704044
-132053243
GPR[SPVATF]-1659902704231
GPR[EPVATF]-1659902704249
[139377] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902704249
GPR[EPVATF]-1659902704268
[139396] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902704268
GPR[SSUN]-1659902704268
-132053243
GPR[ESUN]-1659902704456
GPR[SSUN]-1659902704456
2433571
GPR[ESUN]-1659902704684
GPR[SSUN]-1659902704684
2433571
GPR[ESUN]-1659902704959
GPR[SSUN]-1659902704960
2433571
GPR[SPVATF]-1659902705189
GPR[EPVATF]-1659902705695
GPR[SPS]-1659902705695
[141430] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1035.
GPR[EPS]-1659902706302
GPR[ESUN]-1659902706302
GPR[SSUN]-1659902706302
2433571
GPR[SPVATF]-1659902706539
GPR[EPVATF]-1659902707073
GPR[SPS]-1659902707073
[142826] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1034.
GPR[EPS]-1659902707698
GPR[ESUN]-1659902707698
GPR[SSUN]-1659902707698
2433571
GPR[SPVATF]-1659902707930
GPR[EPVATF]-1659902708446
GPR[SPS]-1659902708446
[144293] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1033.
GPR[EPS]-1659902709165
GPR[ESUN]-1659902709165
GPR[SSUN]-1659902709165
2433571
GPR[SPVATF]-1659902709401
GPR[EPVATF]-1659902709933
GPR[SPS]-1659902709933
[146426] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1030.
GPR[EPS]-1659902711298
GPR[ESUN]-1659902711298
GPR[SSUN]-1659902711298
2433571
GPR[ESUN]-1659902711544
GPR[SSUN]-1659902711544
2433571
GPR[SPVATF]-1659902711773
GPR[EPVATF]-1659902712478
GPR[SPS]-1659902712478
[148238] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1025.
GPR[EPS]-1659902713110
GPR[ESUN]-1659902713110
GPR[SSUN]-1659902713110
2433571
GPR[ESUN]-1659902713338
GPR[SSUN]-1659902713338
2433571
GPR[SPVATF]-1659902713564
GPR[EPVATF]-1659902714063
GPR[SPS]-1659902714063
[149810] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1017.
GPR[EPS]-1659902714682
GPR[ESUN]-1659902714682
GPR[SSUN]-1659902714682
2433571
GPR[ESUN]-1659902714914
GPR[SSUN]-1659902714914
2433571
GPR[ESUN]-1659902715168
GPR[SSUN]-1659902715168
80988634
GPR[ESUN]-1659902715370
GPR[SSUN]-1659902715370
-132053243
GPR[SPVATF]-1659902715553
GPR[EPVATF]-1659902715572
[150700] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902715572
GPR[SSUN]-1659902715572
-132053243
GPR[SPVATF]-1659902715760
GPR[EPVATF]-1659902715779
[150907] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902715779
GPR[SSUN]-1659902715779
-132053243
GPR[SPVATF]-1659902715968
GPR[EPVATF]-1659902715984
[151112] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902715984
GPR[SSUN]-1659902715984
-132053243
GPR[SPVATF]-1659902716171
GPR[EPVATF]-1659902716188
[151316] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902716188
GPR[SSUN]-1659902716188
-132053243
GPR[SPVATF]-1659902716374
GPR[EPVATF]-1659902716391
[151519] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902716391
GPR[SSUN]-1659902716391
-132053243
GPR[ESUN]-1659902716582
GPR[SSUN]-1659902716582
448480590
GPR[SPVATF]-1659902716784
GPR[EPVATF]-1659902717275
GPR[SPS]-1659902717275
[152915] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodePrinter$CompactCodePrinter:493.
GPR[EPS]-1659902717787
GPR[SPVATF]-1659902717788
GPR[EPVATF]-1659902718283
GPR[SPS]-1659902718283
[153934] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodePrinter$CompactCodePrinter:493.
GPR[EPS]-1659902718806
GPR[ESUN]-1659902718806
GPR[SSUN]-1659902718806
80988634
GPR[ESUN]-1659902718983
GPR[SSUN]-1659902718983
-1966087783
GPR[ESUN]-1659902719169
GPR[SSUN]-1659902719169
-1966087783
GPR[SPVATF]-1659902719357
GPR[EPVATF]-1659902719378
[154506] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902719378
GPR[EPVATF]-1659902719398
[154526] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902719398
GPR[SSUN]-1659902719398
2433571
GPR[SPVATF]-1659902719632
GPR[EPVATF]-1659902720159
GPR[SPS]-1659902720159
[155997] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:994.
GPR[EPS]-1659902720869
GPR[ESUN]-1659902720869
GPR[SSUN]-1659902720869
2433571
GPR[SPVATF]-1659902721100
GPR[EPVATF]-1659902721595
GPR[SPS]-1659902721595
[157409] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:993.
GPR[EPS]-1659902722281
GPR[ESUN]-1659902722282
GPR[SSUN]-1659902722282
2433571
GPR[SPVATF]-1659902722521
GPR[EPVATF]-1659902723034
GPR[SPS]-1659902723034
[158786] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int LAST_PROP = 54;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private abstract static class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(43).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            if (com.google.javascript.rhino.Node.this.last!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.parent!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.next!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.first!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            value = x.toString();

                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[158786] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659902723658
GPR[SSUN]-1659902723658
2433571
GPR[SPVATF]-1659902723923
GPR[EPVATF]-1659902724423
GPR[SPS]-1659902724423
[160162] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int LAST_PROP = 54;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private abstract static class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(44).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    if (com.google.javascript.rhino.Node.this.last!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.parent!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.next!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.first!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectionEnds();
                }
                if (runtimeAngelicValue)
                    switch (type) {
                        default :
                            value = x.toString();
                            break;
                    }

                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[160163] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659902725035
GPR[SSUN]-1659902725035
2433571
GPR[SPVATF]-1659902725265
GPR[EPVATF]-1659902725773
GPR[SPS]-1659902725773
[161603] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:986.
GPR[EPS]-1659902726476
GPR[ESUN]-1659902726476
GPR[SSUN]-1659902726476
2433571
GPR[SPVATF]-1659902726732
GPR[EPVATF]-1659902727236
GPR[SPS]-1659902727236
[163099] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:985.
GPR[EPS]-1659902727971
GPR[ESUN]-1659902727971
GPR[SSUN]-1659902727972
2433571
GPR[SPVATF]-1659902728211
GPR[EPVATF]-1659902728725
GPR[SPS]-1659902728725
[164601] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:984.
GPR[EPS]-1659902729473
GPR[ESUN]-1659902729473
GPR[SSUN]-1659902729473
2433571
GPR[ESUN]-1659902729711
GPR[SSUN]-1659902729711
2433571
GPR[ESUN]-1659902729948
GPR[SSUN]-1659902729948
2433571
GPR[SPVATF]-1659902730178
GPR[EPVATF]-1659902730681
GPR[SPS]-1659902730681
[166485] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:975.
GPR[EPS]-1659902731357
GPR[ESUN]-1659902731357
GPR[SSUN]-1659902731357
2433571
GPR[SPVATF]-1659902731592
GPR[EPVATF]-1659902732116
GPR[SPS]-1659902732116
[167964] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:974.
GPR[EPS]-1659902732836
GPR[ESUN]-1659902732836
GPR[SSUN]-1659902732836
2433571
GPR[SPVATF]-1659902733068
GPR[EPVATF]-1659902733628
GPR[SPS]-1659902733628
[169400] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:887.
GPR[EPS]-1659902734272
GPR[ESUN]-1659902734272
GPR[SSUN]-1659902734272
2433571
GPR[SPVATF]-1659902734501
GPR[EPVATF]-1659902735027
GPR[SPS]-1659902735027
[170800] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:886.
GPR[EPS]-1659902735672
GPR[ESUN]-1659902735672
GPR[SSUN]-1659902735672
2433571
GPR[SPVATF]-1659902735909
GPR[EPVATF]-1659902737291
GPR[SPS]-1659902737291
[173108] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:881.
GPR[EPS]-1659902737980
GPR[ESUN]-1659902737980
GPR[SSUN]-1659902737980
2433571
GPR[ESUN]-1659902738216
GPR[SSUN]-1659902738216
2433571
GPR[ESUN]-1659902738442
GPR[SSUN]-1659902738442
2433571
GPR[ESUN]-1659902738671
GPR[SSUN]-1659902738671
881600600
GPR[ESUN]-1659902738864
GPR[SSUN]-1659902738864
2433571
GPR[SPVATF]-1659902739091
GPR[EPVATF]-1659902739611
GPR[SPS]-1659902739611
[175411] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:999.
GPR[EPS]-1659902740283
GPR[SPVATF]-1659902740283
GPR[EPVATF]-1659902740798
GPR[SPS]-1659902740799
[176581] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:999.
GPR[EPS]-1659902741453
GPR[ESUN]-1659902741453
GPR[SSUN]-1659902741453
2433571
GPR[SPVATF]-1659902741699
GPR[EPVATF]-1659902742250
GPR[SPS]-1659902742250
[178040] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:981.
GPR[EPS]-1659902742912
GPR[ESUN]-1659902742912
GPR[SSUN]-1659902742912
2433571
GPR[ESUN]-1659902743145
GPR[SSUN]-1659902743145
2433571
GPR[SPVATF]-1659902743378
GPR[EPVATF]-1659902743897
GPR[SPS]-1659902743897
[179849] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:973.
GPR[EPS]-1659902744721
GPR[SPVATF]-1659902744722
GPR[EPVATF]-1659902745228
GPR[SPS]-1659902745228
[181035] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:973.
GPR[EPS]-1659902745907
GPR[ESUN]-1659902745907
GPR[SSUN]-1659902745907
2433571
GPR[ESUN]-1659902746168
GPR[SSUN]-1659902746168
2433571
GPR[ESUN]-1659902746401
GPR[SSUN]-1659902746401
2433571
GPR[ESUN]-1659902746639
GPR[SSUN]-1659902746639
2433571
GPR[SPVATF]-1659902746868
GPR[EPVATF]-1659902747428
GPR[SPS]-1659902747428
[183218] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:890.
GPR[EPS]-1659902748090
GPR[ESUN]-1659902748090
GPR[SSUN]-1659902748090
2433571
GPR[SPVATF]-1659902748330
GPR[EPVATF]-1659902748845
GPR[SPS]-1659902748845
[184614] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:885.
GPR[EPS]-1659902749486
GPR[ESUN]-1659902749486
GPR[SSUN]-1659902749486
2433571
GPR[ESUN]-1659902749714
GPR[SSUN]-1659902749714
2433571
GPR[SPVATF]-1659902749941
GPR[EPVATF]-1659902750469
GPR[SPS]-1659902750469
[186282] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:880.
GPR[EPS]-1659902751154
GPR[ESUN]-1659902751154
GPR[SSUN]-1659902751154
2433571
GPR[ESUN]-1659902751402
GPR[SSUN]-1659902751402
2433571
GPR[SPVATF]-1659902751638
GPR[EPVATF]-1659902752149
GPR[SPS]-1659902752149
[187910] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:956.
GPR[EPS]-1659902752782
GPR[ESUN]-1659902752782
GPR[SSUN]-1659902752782
2433571
GPR[SPVATF]-1659902753011
GPR[EPVATF]-1659902753522
GPR[SPS]-1659902753522
[189282] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:955.
GPR[EPS]-1659902754154
GPR[ESUN]-1659902754154
GPR[SSUN]-1659902754154
1045502179
GPR[SPVATF]-1659902754396
GPR[EPVATF]-1659902754927
GPR[SPS]-1659902754927
[190790] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:140.
GPR[EPS]-1659902755662
GPR[ESUN]-1659902755662
GPR[SSUN]-1659902755662
1299274573
GPR[ESUN]-1659902755885
GPR[SSUN]-1659902755885
1299274573
GPR[ESUN]-1659902756100
GPR[SSUN]-1659902756100
1299274573
GPR[ESUN]-1659902756310
GPR[SSUN]-1659902756310
2433571
GPR[SPVATF]-1659902756545
GPR[EPVATF]-1659902757074
GPR[SPS]-1659902757074
[192862] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:967.
GPR[EPS]-1659902757734
GPR[SPVATF]-1659902757735
GPR[EPVATF]-1659902758276
GPR[SPS]-1659902758276
[194073] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:967.
GPR[EPS]-1659902758945
GPR[ESUN]-1659902758945
GPR[SSUN]-1659902758945
80988634
GPR[ESUN]-1659902759119
GPR[SSUN]-1659902759119
2433571
GPR[SPVATF]-1659902759347
GPR[EPVATF]-1659902759933
GPR[SPS]-1659902759933
[195822] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:957.
GPR[EPS]-1659902760694
GPR[SPVATF]-1659902760695
GPR[EPVATF]-1659902761248
GPR[SPS]-1659902761248
[197040] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:957.
GPR[EPS]-1659902761912
GPR[ESUN]-1659902761912
GPR[SSUN]-1659902761912
2433571
GPR[ESUN]-1659902762144
GPR[SSUN]-1659902762144
2433571
GPR[SPVATF]-1659902762370
GPR[EPVATF]-1659902762930
GPR[SPS]-1659902762930
[198730] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:998.
GPR[EPS]-1659902763602
GPR[SPVATF]-1659902763602
GPR[EPVATF]-1659902764183
GPR[SPS]-1659902764183
[200759] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:998.
GPR[EPS]-1659902765631
GPR[ESUN]-1659902765631
GPR[SSUN]-1659902765631
2433571
GPR[SPVATF]-1659902765878
GPR[EPVATF]-1659902766669
GPR[SPS]-1659902766669
[202480] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:979.
GPR[EPS]-1659902767352
GPR[SPVATF]-1659902767352
GPR[EPVATF]-1659902767886
GPR[SPS]-1659902767886
[203682] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:979.
GPR[EPS]-1659902768554
GPR[ESUN]-1659902768554
GPR[SSUN]-1659902768554
2433571
GPR[SPVATF]-1659902768786
GPR[EPVATF]-1659902769315
GPR[SPS]-1659902769315
[205199] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:971.
GPR[EPS]-1659902770071
GPR[SPVATF]-1659902770071
GPR[EPVATF]-1659902770623
GPR[SPS]-1659902770623
[206441] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:971.
GPR[EPS]-1659902771313
GPR[ESUN]-1659902771313
GPR[SSUN]-1659902771313
2433571
GPR[SPVATF]-1659902771547
GPR[EPVATF]-1659902772069
GPR[SPS]-1659902772069
[207885] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:954.
GPR[EPS]-1659902772757
GPR[SPVATF]-1659902772757
GPR[EPVATF]-1659902773275
GPR[SPS]-1659902773275
[209068] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:954.
GPR[EPS]-1659902773940
GPR[ESUN]-1659902773940
GPR[SSUN]-1659902773940
2433571
GPR[SPVATF]-1659902774169
GPR[EPVATF]-1659902774687
GPR[SPS]-1659902774687
[210487] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:953.
GPR[EPS]-1659902775359
GPR[ESUN]-1659902775359
GPR[SSUN]-1659902775359
2433571
GPR[ESUN]-1659902775587
GPR[SSUN]-1659902775587
2433571
GPR[SPVATF]-1659902775812
GPR[EPVATF]-1659902776385
GPR[SPS]-1659902776385
[212183] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:944.
GPR[EPS]-1659902777055
GPR[ESUN]-1659902777055
GPR[SSUN]-1659902777055
2433571
GPR[ESUN]-1659902777285
GPR[SSUN]-1659902777285
1187751237
GPR[ESUN]-1659902777559
GPR[SSUN]-1659902777559
170294779
GPR[ESUN]-1659902777748
GPR[SSUN]-1659902777748
170294779
GPR[SPVATF]-1659902777933
GPR[EPVATF]-1659902778451
GPR[SPS]-1659902778451
GPR[EPS]-1659902797427
GPR[ESUN]-1659902797427
GPR[SSUN]-1659902797427
-1966087783
GPR[SPVATF]-1659902797625
GPR[EPVATF]-1659902797644
[232772] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659902797644
GPR[EPVATF]-1659902797661
[232789] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902797661
GPR[SSUN]-1659902797661
-1966087783
GPR[ESUN]-1659902797850
GPR[SSUN]-1659902797850
1852376448
GPR[SPVATF]-1659902798063
GPR[EPVATF]-1659902798596
GPR[SPS]-1659902798596
[234244] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:149.
GPR[EPS]-1659902799116
GPR[SPVATF]-1659902799116
GPR[EPVATF]-1659902799661
GPR[SPS]-1659902799661
[235299] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:149.
GPR[EPS]-1659902800171
GPR[ESUN]-1659902800171
GPR[SSUN]-1659902800171
1852376448
GPR[SPVATF]-1659902800390
GPR[EPVATF]-1659902800939
GPR[SPS]-1659902800939
[236565] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:148.
GPR[EPS]-1659902801437
GPR[ESUN]-1659902801437
GPR[SSUN]-1659902801437
1852376448
GPR[SPVATF]-1659902801653
GPR[EPVATF]-1659902802266
GPR[SPS]-1659902802266
[237898] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:142.
GPR[EPS]-1659902802770
GPR[SPVATF]-1659902802770
GPR[EPVATF]-1659902803343
GPR[SPS]-1659902803343
[238977] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:142.
GPR[EPS]-1659902803849
GPR[ESUN]-1659902803849
GPR[SSUN]-1659902803849
1852376448
GPR[ESUN]-1659902804146
GPR[SSUN]-1659902804146
80988634
GPR[ESUN]-1659902804351
GPR[SSUN]-1659902804351
-718432441
GPR[SPVATF]-1659902804562
GPR[EPVATF]-1659902805141
GPR[SPS]-1659902805141
[240976] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:564.
GPR[EPS]-1659902805848
GPR[ESUN]-1659902805848
GPR[SSUN]-1659902805848
-718432441
GPR[SPVATF]-1659902806060
GPR[EPVATF]-1659902806638
GPR[SPS]-1659902806638
GPR[EPS]-1659902827169
GPR[ESUN]-1659902827169
GPR[SSUN]-1659902827169
-718432441
GPR[SPVATF]-1659902827383
GPR[EPVATF]-1659902827990
GPR[SPS]-1659902827990
[263804] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:562.
GPR[EPS]-1659902828676
GPR[ESUN]-1659902828676
GPR[SSUN]-1659902828676
1299274573
GPR[ESUN]-1659902828897
GPR[SSUN]-1659902828897
711965926
GPR[ESUN]-1659902829077
GPR[SSUN]-1659902829077
711965926
GPR[SPVATF]-1659902829252
GPR[EPVATF]-1659902829879
GPR[SPS]-1659902829879
[265547] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractMessageFormatter:37.
GPR[EPS]-1659902830419
GPR[ESUN]-1659902830419
GPR[SSUN]-1659902830419
-1345859678
GPR[ESUN]-1659902830666
GPR[SSUN]-1659902830666
GPR[ESUN]-1659902830666
GPR[SSUN]-1659902830666
1299274573
GPR[SPVATF]-1659902830876
GPR[EPVATF]-1659902831487
GPR[SPS]-1659902831487
[266994] ERROR ConstraintModelBuilder - Unable to compile the change: 
class FunctionInjector {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier;

    private final boolean allowDecomposition;

    private java.util.Set<java.lang.String> knownConstants = com.google.common.collect.Sets.newHashSet();

    private final boolean assumeStrictThis;

    private final boolean assumeMinimumCapture;

    public FunctionInjector(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier, boolean allowDecomposition, boolean assumeStrictThis, boolean assumeMinimumCapture) {
        com.google.common.base.Preconditions.checkNotNull(compiler);
        com.google.common.base.Preconditions.checkNotNull(safeNameIdSupplier);
        this.compiler = compiler;
        this.safeNameIdSupplier = safeNameIdSupplier;
        this.allowDecomposition = allowDecomposition;
        this.assumeStrictThis = assumeStrictThis;
        this.assumeMinimumCapture = assumeMinimumCapture;
    }

    enum InliningMode {

        DIRECT,
        BLOCK;}

    static class Reference {
        final com.google.javascript.rhino.Node callNode;

        final com.google.javascript.jscomp.JSModule module;

        final com.google.javascript.jscomp.FunctionInjector.InliningMode mode;

        Reference(com.google.javascript.rhino.Node callNode, com.google.javascript.jscomp.JSModule module, com.google.javascript.jscomp.FunctionInjector.InliningMode mode) {
            this.callNode = callNode;
            this.module = module;
            this.mode = mode;
        }
    }

    private static final int NAME_COST_ESTIMATE = com.google.javascript.jscomp.InlineCostEstimator.ESTIMATED_IDENTIFIER_COST;

    private static final int COMMA_COST = 1;

    private static final int PAREN_COST = 2;

    boolean doesFunctionMeetMinimumRequirements(final java.lang.String fnName, com.google.javascript.rhino.Node fnNode) {
        com.google.javascript.rhino.Node block = com.google.javascript.jscomp.NodeUtil.getFunctionBody(fnNode);
        if (!compiler.getCodingConvention().isInlinableFunction(fnNode)) {
            return false;
        }
        final java.lang.String fnRecursionName = fnNode.getFirstChild().getString();
        com.google.common.base.Preconditions.checkState(fnRecursionName != null);
        boolean referencesArguments = com.google.javascript.jscomp.NodeUtil.isNameReferenced(block, "arguments", com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        com.google.common.base.Predicate<com.google.javascript.rhino.Node> p = new com.google.common.base.Predicate<com.google.javascript.rhino.Node>() {
            @java.lang.Override
            public boolean apply(com.google.javascript.rhino.Node n) {
                if (n.isName()) {
                    return (n.getString().equals("eval") || ((!fnName.isEmpty()) && n.getString().equals(fnName))) || ((!fnRecursionName.isEmpty()) && n.getString().equals(fnRecursionName));
                }
                return false;
            }
        };
        return (!referencesArguments) && (!com.google.javascript.jscomp.NodeUtil.has(block, p, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue()));
    }

    com.google.javascript.jscomp.FunctionInjector.CanInlineResult canInlineReferenceToFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> needAliases, com.google.javascript.jscomp.FunctionInjector.InliningMode mode, boolean referencesThis, boolean containsFunctions) {
        if (!isSupportedCallType(callNode)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (containsFunctions) {
            if ((!assumeMinimumCapture) && (!t.inGlobalScope())) {
                return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
            } else if (com.google.javascript.jscomp.NodeUtil.isWithinLoop(callNode)) {
                return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
            }
        }
        if (referencesThis && (!com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode))) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT) {
            return canInlineReferenceDirectly(callNode, fnNode);
        } else {
            return canInlineReferenceAsStatementBlock(t, callNode, fnNode, needAliases);
        }
    }

    private boolean isSupportedCallType(com.google.javascript.rhino.Node callNode) {
        if (!callNode.getFirstChild().isName()) {
            if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode)) {
                if (!assumeStrictThis) {
                    com.google.javascript.rhino.Node thisValue = callNode.getFirstChild().getNext();
                    if ((thisValue == null) || (!thisValue.isThis())) {
                        return false;
                    }
                }
            } else if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectApply(callNode)) {
                return false;
            }
        }
        return true;
    }

    com.google.javascript.rhino.Node inline(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, java.lang.String fnName, com.google.javascript.rhino.Node fnNode, com.google.javascript.jscomp.FunctionInjector.InliningMode mode) {
        com.google.common.base.Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());
        if (mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT) {
            return inlineReturnValue(callNode, fnNode);
        } else {
            return inlineFunction(callNode, fnNode, fnName);
        }
    }

    private com.google.javascript.rhino.Node inlineReturnValue(com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode) {
        com.google.javascript.rhino.Node block = fnNode.getLastChild();
        com.google.javascript.rhino.Node callParentNode = callNode.getParent();
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> argMap = com.google.javascript.jscomp.FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);
        com.google.javascript.rhino.Node newExpression;
        if (!block.hasChildren()) {
            com.google.javascript.rhino.Node srcLocation = block;
            newExpression = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(srcLocation);
        } else {
            com.google.javascript.rhino.Node returnNode = block.getFirstChild();
            com.google.common.base.Preconditions.checkArgument(returnNode.isReturn());
            com.google.javascript.rhino.Node safeReturnNode = returnNode.cloneTree();
            com.google.javascript.rhino.Node inlineResult = com.google.javascript.jscomp.FunctionArgumentInjector.inject(null, safeReturnNode, null, argMap);
            com.google.common.base.Preconditions.checkArgument(safeReturnNode == inlineResult);
            newExpression = safeReturnNode.removeFirstChild();
        }
        callParentNode.replaceChild(callNode, newExpression);
        return newExpression;
    }

    private enum CallSiteType {

        UNSUPPORTED,
        SIMPLE_CALL,
        SIMPLE_ASSIGNMENT,
        VAR_DECL_SIMPLE_ASSIGNMENT,
        EXPRESSION,
        DECOMPOSABLE_EXPRESSION;}

    private com.google.javascript.jscomp.FunctionInjector.CallSiteType classifyCallSite(com.google.javascript.rhino.Node callNode) {
        com.google.javascript.rhino.Node parent = callNode.getParent();
        com.google.javascript.rhino.Node grandParent = parent.getParent();
        if (com.google.javascript.jscomp.NodeUtil.isExprCall(parent)) {
            return com.google.javascript.jscomp.FunctionInjector.CallSiteType.SIMPLE_CALL;
        } else if (((com.google.javascript.jscomp.NodeUtil.isExprAssign(grandParent) && (!com.google.javascript.jscomp.NodeUtil.isVarOrSimpleAssignLhs(callNode, parent))) && parent.getFirstChild().isName()) && (!com.google.javascript.jscomp.NodeUtil.isConstantName(parent.getFirstChild()))) {
            return com.google.javascript.jscomp.FunctionInjector.CallSiteType.SIMPLE_ASSIGNMENT;
        } else if (((parent.isName() && (!com.google.javascript.jscomp.NodeUtil.isConstantName(parent))) && grandParent.isVar()) && grandParent.hasOneChild()) {
            return com.google.javascript.jscomp.FunctionInjector.CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT;
        } else {
            com.google.javascript.rhino.Node expressionRoot = com.google.javascript.jscomp.ExpressionDecomposer.findExpressionRoot(callNode);
            if (expressionRoot != null) {
                com.google.javascript.jscomp.ExpressionDecomposer decomposer = new com.google.javascript.jscomp.ExpressionDecomposer(compiler, safeNameIdSupplier, knownConstants);
                com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType type = decomposer.canExposeExpression(callNode);
                if (type == com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.MOVABLE) {
                    return com.google.javascript.jscomp.FunctionInjector.CallSiteType.EXPRESSION;
                } else if (type == com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.DECOMPOSABLE) {
                    return com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION;
                } else {
                    com.google.common.base.Preconditions.checkState(type == com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.UNDECOMPOSABLE);
                }
            }
        }
        return com.google.javascript.jscomp.FunctionInjector.CallSiteType.UNSUPPORTED;
    }

    private com.google.javascript.rhino.Node inlineFunction(com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode, java.lang.String fnName) {
        com.google.javascript.rhino.Node parent = callNode.getParent();
        com.google.javascript.rhino.Node grandParent = parent.getParent();
        com.google.javascript.jscomp.FunctionInjector.CallSiteType callSiteType = classifyCallSite(callNode);
        com.google.common.base.Preconditions.checkArgument(callSiteType != com.google.javascript.jscomp.FunctionInjector.CallSiteType.UNSUPPORTED);
        boolean isCallInLoop = com.google.javascript.jscomp.NodeUtil.isWithinLoop(callNode);
        java.lang.String resultName = null;
        boolean needsDefaultReturnResult = true;
        switch (callSiteType) {
            case SIMPLE_ASSIGNMENT :
                resultName = parent.getFirstChild().getString();
                break;
            case VAR_DECL_SIMPLE_ASSIGNMENT :
                resultName = parent.getString();
                break;
            case SIMPLE_CALL :
                resultName = null;
                needsDefaultReturnResult = false;
                break;
            case EXPRESSION :
                resultName = getUniqueResultName();
                needsDefaultReturnResult = isCallInLoop;
                break;
            case DECOMPOSABLE_EXPRESSION :
                throw new java.lang.IllegalStateException("Decomposable expressions must decomposed before inlining.");
            default :
                throw new java.lang.IllegalStateException("Unexpected call site type.");
        }
        com.google.javascript.jscomp.FunctionToBlockMutator mutator = new com.google.javascript.jscomp.FunctionToBlockMutator(compiler, this.safeNameIdSupplier);
        com.google.javascript.rhino.Node newBlock = mutator.mutate(fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);
        com.google.javascript.rhino.Node greatGrandParent = grandParent.getParent();
        switch (callSiteType) {
            case VAR_DECL_SIMPLE_ASSIGNMENT :
                parent.removeChild(parent.getFirstChild());
                com.google.common.base.Preconditions.checkState(parent.getFirstChild() == null);
                greatGrandParent.addChildAfter(newBlock, grandParent);
                break;
            case SIMPLE_ASSIGNMENT :
                com.google.common.base.Preconditions.checkState(grandParent.isExprResult());
                greatGrandParent.replaceChild(grandParent, newBlock);
                break;
            case SIMPLE_CALL :
                com.google.common.base.Preconditions.checkState(parent.isExprResult());
                grandParent.replaceChild(parent, newBlock);
                break;
            case EXPRESSION :
                com.google.javascript.rhino.Node injectionPoint = com.google.javascript.jscomp.ExpressionDecomposer.findInjectionPoint(callNode);
                com.google.common.base.Preconditions.checkNotNull(injectionPoint);
                com.google.javascript.rhino.Node injectionPointParent = injectionPoint.getParent();
                com.google.common.base.Preconditions.checkNotNull(injectionPointParent);
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isStatementBlock(injectionPointParent));
                newBlock.addChildrenToFront(com.google.javascript.jscomp.NodeUtil.newVarNode(resultName, null).copyInformationFromForTree(callNode));
                injectionPointParent.addChildBefore(newBlock, injectionPoint);
                parent.replaceChild(callNode, com.google.javascript.rhino.IR.name(resultName));
                break;
            default :
                throw new java.lang.IllegalStateException("Unexpected call site type.");
        }
        return newBlock;
    }

    boolean isDirectCallNodeReplacementPossible(com.google.javascript.rhino.Node fnNode) {
        com.google.javascript.rhino.Node block = com.google.javascript.jscomp.NodeUtil.getFunctionBody(fnNode);
        if (!block.hasChildren()) {
            return true;
        } else if (block.hasOneChild()) {
            if (block.getFirstChild().isReturn() && (block.getFirstChild().getFirstChild() != null)) {
                return true;
            }
        }
        return false;
    }

    enum CanInlineResult {

        YES,
        AFTER_DECOMPOSITION,
        NO;}

    private com.google.javascript.jscomp.FunctionInjector.CanInlineResult canInlineReferenceAsStatementBlock(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> namesToAlias) {
        com.google.javascript.jscomp.FunctionInjector.CallSiteType callSiteType = classifyCallSite(callNode);
        if (callSiteType == com.google.javascript.jscomp.FunctionInjector.CallSiteType.UNSUPPORTED) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if ((!allowDecomposition) && (callSiteType == com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (callSiteType == com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.AFTER_DECOMPOSITION;
        } else {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.YES;
        }
    }

    private boolean callMeetsBlockInliningRequirements(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, final com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> namesToAlias) {
        final boolean assumeMinimumCapture = this.assumeMinimumCapture;
        boolean fnContainsVars = com.google.javascript.jscomp.NodeUtil.has(com.google.javascript.jscomp.NodeUtil.getFunctionBody(fnNode), new com.google.javascript.jscomp.NodeUtil.MatchDeclaration(), new com.google.javascript.jscomp.NodeUtil.MatchShallowStatement());
        boolean forbidTemps = false;
        if (!t.inGlobalScope()) {
            com.google.javascript.rhino.Node fnCaller = t.getScopeRoot();
            com.google.javascript.rhino.Node fnCallerBody = fnCaller.getLastChild();
            com.google.common.base.Predicate<com.google.javascript.rhino.Node> match = new com.google.common.base.Predicate<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean apply(com.google.javascript.rhino.Node n) {
                    if (n.isName()) {
                        return n.getString().equals("eval");
                    }
                    if ((!assumeMinimumCapture) && n.isFunction()) {
                        return n != fnNode;
                    }
                    return false;
                }
            };
            forbidTemps = com.google.javascript.jscomp.NodeUtil.has(fnCallerBody, match, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        }
        if (fnContainsVars && forbidTemps) {
            return false;
        }
        if (forbidTemps) {
            java.util.Map<java.lang.String, com.google.javascript.rhino.Node> args = com.google.javascript.jscomp.FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);
            boolean hasArgs = !args.isEmpty();
            if (hasArgs) {
                java.util.Set<java.lang.String> allNamesToAlias = com.google.common.collect.Sets.newHashSet(namesToAlias);
                com.google.javascript.jscomp.FunctionArgumentInjector.maybeAddTempsForCallArguments(fnNode, args, allNamesToAlias, compiler.getCodingConvention());
                if (!allNamesToAlias.isEmpty()) {
                    return false;
                }
            }
        }
        return true;
    }

    private com.google.javascript.jscomp.FunctionInjector.CanInlineResult canInlineReferenceDirectly(com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode) {
        if (!isDirectCallNodeReplacementPossible(fnNode)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        com.google.javascript.rhino.Node block = fnNode.getLastChild();
        com.google.javascript.rhino.Node cArg = callNode.getFirstChild().getNext();
        if (!callNode.getFirstChild().isName()) {
            if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode)) {
                if ((cArg == null) || (!cArg.isThis())) {
                    return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
                }
                cArg = cArg.getNext();
            } else {
                com.google.common.base.Preconditions.checkState(!com.google.javascript.jscomp.NodeUtil.isFunctionObjectApply(callNode));
            }
        }
        com.google.javascript.rhino.Node fnParam = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(fnNode).getFirstChild();
        while ((cArg != null) || (fnParam != null)) {
            if (fnParam != null) {
                if (cArg != null) {
                    if (com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(cArg) && (com.google.javascript.jscomp.NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1)) {
                        return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
                    }
                }
                fnParam = fnParam.getNext();
            }
            if (cArg != null) {
                if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(cArg)) {
                    return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
                }
                cArg = cArg.getNext();
            }
        } 
        return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.YES;
    }

    private java.lang.String getUniqueResultName() {
        return ("JSCompiler_inline_result" + com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.UNIQUE_ID_SEPARATOR) + safeNameIdSupplier.get();
    }

    boolean inliningLowersCost(com.google.javascript.jscomp.JSModule fnModule, com.google.javascript.rhino.Node fnNode, java.util.Collection<? extends com.google.javascript.jscomp.FunctionInjector.Reference> refs, java.util.Set<java.lang.String> namesToAlias, boolean isRemovable, boolean referencesThis) {
        int referenceCount = refs.size();
        if (referenceCount == 0) {
            return true;
        }
        int referencesUsingBlockInlining = 0;
        boolean checkModules = isRemovable && (fnModule != null);
        com.google.javascript.jscomp.JSModuleGraph moduleGraph = compiler.getModuleGraph();
        for (com.google.javascript.jscomp.FunctionInjector.Reference ref : refs) {
            if (ref.mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.BLOCK) {
                referencesUsingBlockInlining++;
            }
            if (checkModules && (ref.module != null)) {
                if ((ref.module != fnModule) && (!moduleGraph.dependsOn(ref.module, fnModule))) {
                    isRemovable = false;
                    checkModules = false;
                }
            }
        }
        int referencesUsingDirectInlining = referenceCount - referencesUsingBlockInlining;
        if (((referenceCount == 1) && isRemovable) && (referencesUsingDirectInlining == 1)) {
            return true;
        }
        int callCost = com.google.javascript.jscomp.FunctionInjector.estimateCallCost(fnNode, referencesThis);
        int overallCallCost = callCost * referenceCount;
        int costDeltaDirect = com.google.javascript.jscomp.FunctionInjector.inlineCostDelta(fnNode, namesToAlias, com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT);
        int costDeltaBlock = com.google.javascript.jscomp.FunctionInjector.inlineCostDelta(fnNode, namesToAlias, com.google.javascript.jscomp.FunctionInjector.InliningMode.BLOCK);
        return doesLowerCost(fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable);
    }

    private boolean doesLowerCost(com.google.javascript.rhino.Node fnNode, int callCost, int directInlines, int costDeltaDirect, int blockInlines, int costDeltaBlock, boolean removable) {
        int fnInstanceCount = (directInlines + blockInlines) - (removable ? 1 : 0);
        if (fnInstanceCount == 0) {
            if ((blockInlines > 0) && (costDeltaBlock > 0)) {
                return false;
            }
            return true;
        }
        int costDelta = (directInlines * costDeltaDirect) + (blockInlines * costDeltaBlock);
        int threshold = (callCost - costDelta) / fnInstanceCount;
        return com.google.javascript.jscomp.InlineCostEstimator.getCost(fnNode, threshold + 1) <= threshold;
    }

    private static int estimateCallCost(com.google.javascript.rhino.Node fnNode, boolean referencesThis) {
        com.google.javascript.rhino.Node argsNode = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(fnNode);
        int numArgs = argsNode.getChildCount();
        int callCost = com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE + com.google.javascript.jscomp.FunctionInjector.PAREN_COST;
        if (numArgs > 0) {
            callCost += (numArgs * com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE) + ((numArgs - 1) * com.google.javascript.jscomp.FunctionInjector.COMMA_COST);
        }
        if (referencesThis) {
            callCost += 5 + 5;
        }
        return callCost;
    }

    private static int inlineCostDelta(com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> namesToAlias, com.google.javascript.jscomp.FunctionInjector.InliningMode mode) {
        int paramCount = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(fnNode).getChildCount();
        int commaCount = (paramCount > 1) ? paramCount - 1 : 0;
        int costDeltaFunctionOverhead = (15 + commaCount) + (paramCount * com.google.javascript.jscomp.InlineCostEstimator.ESTIMATED_IDENTIFIER_COST);
        com.google.javascript.rhino.Node block = fnNode.getLastChild();
        if (!block.hasChildren()) {
            return -costDeltaFunctionOverhead;
        }
        if (mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT) {
            return -(costDeltaFunctionOverhead + 7);
        } else {
            int aliasCount = namesToAlias.size();
            final int INLINE_BLOCK_OVERHEAD = 4;
            final int PER_RETURN_OVERHEAD = 2;
            final int PER_RETURN_RESULT_OVERHEAD = 3;
            final int PER_ALIAS_OVERHEAD = 3;
            int returnCount = com.google.javascript.jscomp.NodeUtil.getNodeTypeReferenceCount(block, com.google.javascript.rhino.Token.RETURN, new com.google.javascript.jscomp.NodeUtil.MatchShallowStatement());
            int resultCount = (returnCount > 0) ? returnCount - 1 : 0;
            int baseOverhead = (returnCount > 0) ? INLINE_BLOCK_OVERHEAD : 0;
            int overhead = ((baseOverhead + (returnCount * PER_RETURN_OVERHEAD)) + (resultCount * PER_RETURN_RESULT_OVERHEAD)) + (aliasCount * PER_ALIAS_OVERHEAD);
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(88).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("PER_RETURN_OVERHEAD",PER_RETURN_OVERHEAD);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("resultCount",resultCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("returnCount",returnCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("PER_ALIAS_OVERHEAD",PER_ALIAS_OVERHEAD);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("overhead",overhead);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("namesToAlias",namesToAlias);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE",com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("fnNode",fnNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("com.google.javascript.jscomp.FunctionInjector.COMMA_COST",com.google.javascript.jscomp.FunctionInjector.COMMA_COST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("com.google.javascript.jscomp.FunctionInjector.PAREN_COST",com.google.javascript.jscomp.FunctionInjector.PAREN_COST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("mode",mode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("INLINE_BLOCK_OVERHEAD",INLINE_BLOCK_OVERHEAD);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("aliasCount",aliasCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("paramCount",paramCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("baseOverhead",baseOverhead);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("block",block);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("PER_RETURN_RESULT_OVERHEAD",PER_RETURN_RESULT_OVERHEAD);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("costDeltaFunctionOverhead",costDeltaFunctionOverhead);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectInput("commaCount",commaCount);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectionEnds();
            }
            if (runtimeAngelicValue)
                return overhead - costDeltaFunctionOverhead;

        }
    }

    public void setKnownConstants(java.util.Set<java.lang.String> knownConstants) {
        com.google.common.base.Preconditions.checkState(this.knownConstants.isEmpty());
        this.knownConstants = knownConstants;
    }
}
[266994] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659902831866
GPR[SSUN]-1659902831866
1299274573
GPR[ESUN]-1659902832082
GPR[SSUN]-1659902832083
1299274573
GPR[ESUN]-1659902832297
GPR[SSUN]-1659902832297
1299274573
GPR[ESUN]-1659902832512
GPR[SSUN]-1659902832512
1299274573
GPR[ESUN]-1659902832738
GPR[SSUN]-1659902832738
1299274573
GPR[ESUN]-1659902832951
GPR[SSUN]-1659902832951
1299274573
GPR[ESUN]-1659902833165
GPR[SSUN]-1659902833165
1299274573
GPR[ESUN]-1659902833380
GPR[SSUN]-1659902833380
1299274573
GPR[ESUN]-1659902833594
GPR[SSUN]-1659902833594
1299274573
GPR[ESUN]-1659902833811
GPR[SSUN]-1659902833811
1299274573
GPR[SPVATF]-1659902834030
GPR[EPVATF]-1659902834665
GPR[SPS]-1659902834665
[270167] ERROR ConstraintModelBuilder - Unable to compile the change: 
class FunctionInjector {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier;

    private final boolean allowDecomposition;

    private java.util.Set<java.lang.String> knownConstants = com.google.common.collect.Sets.newHashSet();

    private final boolean assumeStrictThis;

    private final boolean assumeMinimumCapture;

    public FunctionInjector(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier, boolean allowDecomposition, boolean assumeStrictThis, boolean assumeMinimumCapture) {
        com.google.common.base.Preconditions.checkNotNull(compiler);
        com.google.common.base.Preconditions.checkNotNull(safeNameIdSupplier);
        this.compiler = compiler;
        this.safeNameIdSupplier = safeNameIdSupplier;
        this.allowDecomposition = allowDecomposition;
        this.assumeStrictThis = assumeStrictThis;
        this.assumeMinimumCapture = assumeMinimumCapture;
    }

    enum InliningMode {

        DIRECT,
        BLOCK;}

    static class Reference {
        final com.google.javascript.rhino.Node callNode;

        final com.google.javascript.jscomp.JSModule module;

        final com.google.javascript.jscomp.FunctionInjector.InliningMode mode;

        Reference(com.google.javascript.rhino.Node callNode, com.google.javascript.jscomp.JSModule module, com.google.javascript.jscomp.FunctionInjector.InliningMode mode) {
            this.callNode = callNode;
            this.module = module;
            this.mode = mode;
        }
    }

    private static final int NAME_COST_ESTIMATE = com.google.javascript.jscomp.InlineCostEstimator.ESTIMATED_IDENTIFIER_COST;

    private static final int COMMA_COST = 1;

    private static final int PAREN_COST = 2;

    boolean doesFunctionMeetMinimumRequirements(final java.lang.String fnName, com.google.javascript.rhino.Node fnNode) {
        com.google.javascript.rhino.Node block = com.google.javascript.jscomp.NodeUtil.getFunctionBody(fnNode);
        if (!compiler.getCodingConvention().isInlinableFunction(fnNode)) {
            return false;
        }
        final java.lang.String fnRecursionName = fnNode.getFirstChild().getString();
        com.google.common.base.Preconditions.checkState(fnRecursionName != null);
        boolean referencesArguments = com.google.javascript.jscomp.NodeUtil.isNameReferenced(block, "arguments", com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        com.google.common.base.Predicate<com.google.javascript.rhino.Node> p = new com.google.common.base.Predicate<com.google.javascript.rhino.Node>() {
            @java.lang.Override
            public boolean apply(com.google.javascript.rhino.Node n) {
                if (n.isName()) {
                    return (n.getString().equals("eval") || ((!fnName.isEmpty()) && n.getString().equals(fnName))) || ((!fnRecursionName.isEmpty()) && n.getString().equals(fnRecursionName));
                }
                return false;
            }
        };
        return (!referencesArguments) && (!com.google.javascript.jscomp.NodeUtil.has(block, p, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue()));
    }

    com.google.javascript.jscomp.FunctionInjector.CanInlineResult canInlineReferenceToFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> needAliases, com.google.javascript.jscomp.FunctionInjector.InliningMode mode, boolean referencesThis, boolean containsFunctions) {
        if (!isSupportedCallType(callNode)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (containsFunctions) {
            if ((!assumeMinimumCapture) && (!t.inGlobalScope())) {
                return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
            } else if (com.google.javascript.jscomp.NodeUtil.isWithinLoop(callNode)) {
                return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
            }
        }
        if (referencesThis && (!com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode))) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT) {
            return canInlineReferenceDirectly(callNode, fnNode);
        } else {
            return canInlineReferenceAsStatementBlock(t, callNode, fnNode, needAliases);
        }
    }

    private boolean isSupportedCallType(com.google.javascript.rhino.Node callNode) {
        if (!callNode.getFirstChild().isName()) {
            if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode)) {
                if (!assumeStrictThis) {
                    com.google.javascript.rhino.Node thisValue = callNode.getFirstChild().getNext();
                    if ((thisValue == null) || (!thisValue.isThis())) {
                        return false;
                    }
                }
            } else if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectApply(callNode)) {
                return false;
            }
        }
        return true;
    }

    com.google.javascript.rhino.Node inline(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, java.lang.String fnName, com.google.javascript.rhino.Node fnNode, com.google.javascript.jscomp.FunctionInjector.InliningMode mode) {
        com.google.common.base.Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());
        if (mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT) {
            return inlineReturnValue(callNode, fnNode);
        } else {
            return inlineFunction(callNode, fnNode, fnName);
        }
    }

    private com.google.javascript.rhino.Node inlineReturnValue(com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode) {
        com.google.javascript.rhino.Node block = fnNode.getLastChild();
        com.google.javascript.rhino.Node callParentNode = callNode.getParent();
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> argMap = com.google.javascript.jscomp.FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);
        com.google.javascript.rhino.Node newExpression;
        if (!block.hasChildren()) {
            com.google.javascript.rhino.Node srcLocation = block;
            newExpression = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(srcLocation);
        } else {
            com.google.javascript.rhino.Node returnNode = block.getFirstChild();
            com.google.common.base.Preconditions.checkArgument(returnNode.isReturn());
            com.google.javascript.rhino.Node safeReturnNode = returnNode.cloneTree();
            com.google.javascript.rhino.Node inlineResult = com.google.javascript.jscomp.FunctionArgumentInjector.inject(null, safeReturnNode, null, argMap);
            com.google.common.base.Preconditions.checkArgument(safeReturnNode == inlineResult);
            newExpression = safeReturnNode.removeFirstChild();
        }
        callParentNode.replaceChild(callNode, newExpression);
        return newExpression;
    }

    private enum CallSiteType {

        UNSUPPORTED,
        SIMPLE_CALL,
        SIMPLE_ASSIGNMENT,
        VAR_DECL_SIMPLE_ASSIGNMENT,
        EXPRESSION,
        DECOMPOSABLE_EXPRESSION;}

    private com.google.javascript.jscomp.FunctionInjector.CallSiteType classifyCallSite(com.google.javascript.rhino.Node callNode) {
        com.google.javascript.rhino.Node parent = callNode.getParent();
        com.google.javascript.rhino.Node grandParent = parent.getParent();
        if (com.google.javascript.jscomp.NodeUtil.isExprCall(parent)) {
            return com.google.javascript.jscomp.FunctionInjector.CallSiteType.SIMPLE_CALL;
        } else if (((com.google.javascript.jscomp.NodeUtil.isExprAssign(grandParent) && (!com.google.javascript.jscomp.NodeUtil.isVarOrSimpleAssignLhs(callNode, parent))) && parent.getFirstChild().isName()) && (!com.google.javascript.jscomp.NodeUtil.isConstantName(parent.getFirstChild()))) {
            return com.google.javascript.jscomp.FunctionInjector.CallSiteType.SIMPLE_ASSIGNMENT;
        } else if (((parent.isName() && (!com.google.javascript.jscomp.NodeUtil.isConstantName(parent))) && grandParent.isVar()) && grandParent.hasOneChild()) {
            return com.google.javascript.jscomp.FunctionInjector.CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT;
        } else {
            com.google.javascript.rhino.Node expressionRoot = com.google.javascript.jscomp.ExpressionDecomposer.findExpressionRoot(callNode);
            if (expressionRoot != null) {
                com.google.javascript.jscomp.ExpressionDecomposer decomposer = new com.google.javascript.jscomp.ExpressionDecomposer(compiler, safeNameIdSupplier, knownConstants);
                com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType type = decomposer.canExposeExpression(callNode);
                if (type == com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.MOVABLE) {
                    return com.google.javascript.jscomp.FunctionInjector.CallSiteType.EXPRESSION;
                } else if (type == com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.DECOMPOSABLE) {
                    return com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION;
                } else {
                    com.google.common.base.Preconditions.checkState(type == com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.UNDECOMPOSABLE);
                }
            }
        }
        return com.google.javascript.jscomp.FunctionInjector.CallSiteType.UNSUPPORTED;
    }

    private com.google.javascript.rhino.Node inlineFunction(com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode, java.lang.String fnName) {
        com.google.javascript.rhino.Node parent = callNode.getParent();
        com.google.javascript.rhino.Node grandParent = parent.getParent();
        com.google.javascript.jscomp.FunctionInjector.CallSiteType callSiteType = classifyCallSite(callNode);
        com.google.common.base.Preconditions.checkArgument(callSiteType != com.google.javascript.jscomp.FunctionInjector.CallSiteType.UNSUPPORTED);
        boolean isCallInLoop = com.google.javascript.jscomp.NodeUtil.isWithinLoop(callNode);
        java.lang.String resultName = null;
        boolean needsDefaultReturnResult = true;
        switch (callSiteType) {
            case SIMPLE_ASSIGNMENT :
                resultName = parent.getFirstChild().getString();
                break;
            case VAR_DECL_SIMPLE_ASSIGNMENT :
                resultName = parent.getString();
                break;
            case SIMPLE_CALL :
                resultName = null;
                needsDefaultReturnResult = false;
                break;
            case EXPRESSION :
                resultName = getUniqueResultName();
                needsDefaultReturnResult = isCallInLoop;
                break;
            case DECOMPOSABLE_EXPRESSION :
                throw new java.lang.IllegalStateException("Decomposable expressions must decomposed before inlining.");
            default :
                throw new java.lang.IllegalStateException("Unexpected call site type.");
        }
        com.google.javascript.jscomp.FunctionToBlockMutator mutator = new com.google.javascript.jscomp.FunctionToBlockMutator(compiler, this.safeNameIdSupplier);
        com.google.javascript.rhino.Node newBlock = mutator.mutate(fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);
        com.google.javascript.rhino.Node greatGrandParent = grandParent.getParent();
        switch (callSiteType) {
            case VAR_DECL_SIMPLE_ASSIGNMENT :
                parent.removeChild(parent.getFirstChild());
                com.google.common.base.Preconditions.checkState(parent.getFirstChild() == null);
                greatGrandParent.addChildAfter(newBlock, grandParent);
                break;
            case SIMPLE_ASSIGNMENT :
                com.google.common.base.Preconditions.checkState(grandParent.isExprResult());
                greatGrandParent.replaceChild(grandParent, newBlock);
                break;
            case SIMPLE_CALL :
                com.google.common.base.Preconditions.checkState(parent.isExprResult());
                grandParent.replaceChild(parent, newBlock);
                break;
            case EXPRESSION :
                com.google.javascript.rhino.Node injectionPoint = com.google.javascript.jscomp.ExpressionDecomposer.findInjectionPoint(callNode);
                com.google.common.base.Preconditions.checkNotNull(injectionPoint);
                com.google.javascript.rhino.Node injectionPointParent = injectionPoint.getParent();
                com.google.common.base.Preconditions.checkNotNull(injectionPointParent);
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isStatementBlock(injectionPointParent));
                newBlock.addChildrenToFront(com.google.javascript.jscomp.NodeUtil.newVarNode(resultName, null).copyInformationFromForTree(callNode));
                injectionPointParent.addChildBefore(newBlock, injectionPoint);
                parent.replaceChild(callNode, com.google.javascript.rhino.IR.name(resultName));
                break;
            default :
                throw new java.lang.IllegalStateException("Unexpected call site type.");
        }
        return newBlock;
    }

    boolean isDirectCallNodeReplacementPossible(com.google.javascript.rhino.Node fnNode) {
        com.google.javascript.rhino.Node block = com.google.javascript.jscomp.NodeUtil.getFunctionBody(fnNode);
        if (!block.hasChildren()) {
            return true;
        } else if (block.hasOneChild()) {
            if (block.getFirstChild().isReturn() && (block.getFirstChild().getFirstChild() != null)) {
                return true;
            }
        }
        return false;
    }

    enum CanInlineResult {

        YES,
        AFTER_DECOMPOSITION,
        NO;}

    private com.google.javascript.jscomp.FunctionInjector.CanInlineResult canInlineReferenceAsStatementBlock(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> namesToAlias) {
        com.google.javascript.jscomp.FunctionInjector.CallSiteType callSiteType = classifyCallSite(callNode);
        if (callSiteType == com.google.javascript.jscomp.FunctionInjector.CallSiteType.UNSUPPORTED) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if ((!allowDecomposition) && (callSiteType == com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (callSiteType == com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.AFTER_DECOMPOSITION;
        } else {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.YES;
        }
    }

    private boolean callMeetsBlockInliningRequirements(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, final com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> namesToAlias) {
        final boolean assumeMinimumCapture = this.assumeMinimumCapture;
        boolean fnContainsVars = com.google.javascript.jscomp.NodeUtil.has(com.google.javascript.jscomp.NodeUtil.getFunctionBody(fnNode), new com.google.javascript.jscomp.NodeUtil.MatchDeclaration(), new com.google.javascript.jscomp.NodeUtil.MatchShallowStatement());
        boolean forbidTemps = false;
        if (!t.inGlobalScope()) {
            com.google.javascript.rhino.Node fnCaller = t.getScopeRoot();
            com.google.javascript.rhino.Node fnCallerBody = fnCaller.getLastChild();
            com.google.common.base.Predicate<com.google.javascript.rhino.Node> match = new com.google.common.base.Predicate<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean apply(com.google.javascript.rhino.Node n) {
                    if (n.isName()) {
                        return n.getString().equals("eval");
                    }
                    if ((!assumeMinimumCapture) && n.isFunction()) {
                        return n != fnNode;
                    }
                    return false;
                }
            };
            forbidTemps = com.google.javascript.jscomp.NodeUtil.has(fnCallerBody, match, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        }
        if (fnContainsVars && forbidTemps) {
            return false;
        }
        if (forbidTemps) {
            java.util.Map<java.lang.String, com.google.javascript.rhino.Node> args = com.google.javascript.jscomp.FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);
            boolean hasArgs = !args.isEmpty();
            if (hasArgs) {
                java.util.Set<java.lang.String> allNamesToAlias = com.google.common.collect.Sets.newHashSet(namesToAlias);
                com.google.javascript.jscomp.FunctionArgumentInjector.maybeAddTempsForCallArguments(fnNode, args, allNamesToAlias, compiler.getCodingConvention());
                if (!allNamesToAlias.isEmpty()) {
                    return false;
                }
            }
        }
        return true;
    }

    private com.google.javascript.jscomp.FunctionInjector.CanInlineResult canInlineReferenceDirectly(com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode) {
        if (!isDirectCallNodeReplacementPossible(fnNode)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        com.google.javascript.rhino.Node block = fnNode.getLastChild();
        com.google.javascript.rhino.Node cArg = callNode.getFirstChild().getNext();
        if (!callNode.getFirstChild().isName()) {
            if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode)) {
                if ((cArg == null) || (!cArg.isThis())) {
                    return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
                }
                cArg = cArg.getNext();
            } else {
                com.google.common.base.Preconditions.checkState(!com.google.javascript.jscomp.NodeUtil.isFunctionObjectApply(callNode));
            }
        }
        com.google.javascript.rhino.Node fnParam = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(fnNode).getFirstChild();
        while ((cArg != null) || (fnParam != null)) {
            if (fnParam != null) {
                if (cArg != null) {
                    if (com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(cArg) && (com.google.javascript.jscomp.NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1)) {
                        return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
                    }
                }
                fnParam = fnParam.getNext();
            }
            if (cArg != null) {
                if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(cArg)) {
                    return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
                }
                cArg = cArg.getNext();
            }
        } 
        return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.YES;
    }

    private java.lang.String getUniqueResultName() {
        return ("JSCompiler_inline_result" + com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.UNIQUE_ID_SEPARATOR) + safeNameIdSupplier.get();
    }

    boolean inliningLowersCost(com.google.javascript.jscomp.JSModule fnModule, com.google.javascript.rhino.Node fnNode, java.util.Collection<? extends com.google.javascript.jscomp.FunctionInjector.Reference> refs, java.util.Set<java.lang.String> namesToAlias, boolean isRemovable, boolean referencesThis) {
        int referenceCount = refs.size();
        if (referenceCount == 0) {
            return true;
        }
        int referencesUsingBlockInlining = 0;
        boolean checkModules = isRemovable && (fnModule != null);
        com.google.javascript.jscomp.JSModuleGraph moduleGraph = compiler.getModuleGraph();
        for (com.google.javascript.jscomp.FunctionInjector.Reference ref : refs) {
            if (ref.mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.BLOCK) {
                referencesUsingBlockInlining++;
            }
            if (checkModules && (ref.module != null)) {
                if ((ref.module != fnModule) && (!moduleGraph.dependsOn(ref.module, fnModule))) {
                    isRemovable = false;
                    checkModules = false;
                }
            }
        }
        int referencesUsingDirectInlining = referenceCount - referencesUsingBlockInlining;
        if (((referenceCount == 1) && isRemovable) && (referencesUsingDirectInlining == 1)) {
            return true;
        }
        int callCost = com.google.javascript.jscomp.FunctionInjector.estimateCallCost(fnNode, referencesThis);
        int overallCallCost = callCost * referenceCount;
        int costDeltaDirect = com.google.javascript.jscomp.FunctionInjector.inlineCostDelta(fnNode, namesToAlias, com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT);
        int costDeltaBlock = com.google.javascript.jscomp.FunctionInjector.inlineCostDelta(fnNode, namesToAlias, com.google.javascript.jscomp.FunctionInjector.InliningMode.BLOCK);
        return doesLowerCost(fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable);
    }

    private boolean doesLowerCost(com.google.javascript.rhino.Node fnNode, int callCost, int directInlines, int costDeltaDirect, int blockInlines, int costDeltaBlock, boolean removable) {
        int fnInstanceCount = (directInlines + blockInlines) - (removable ? 1 : 0);
        if (fnInstanceCount == 0) {
            if ((blockInlines > 0) && (costDeltaBlock > 0)) {
                return false;
            }
            return true;
        }
        int costDelta = (directInlines * costDeltaDirect) + (blockInlines * costDeltaBlock);
        int threshold = (callCost - costDelta) / fnInstanceCount;
        return com.google.javascript.jscomp.InlineCostEstimator.getCost(fnNode, threshold + 1) <= threshold;
    }

    private static int estimateCallCost(com.google.javascript.rhino.Node fnNode, boolean referencesThis) {
        com.google.javascript.rhino.Node argsNode = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(fnNode);
        int numArgs = argsNode.getChildCount();
        int callCost = com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE + com.google.javascript.jscomp.FunctionInjector.PAREN_COST;
        if (numArgs > 0) {
            callCost += (numArgs * com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE) + ((numArgs - 1) * com.google.javascript.jscomp.FunctionInjector.COMMA_COST);
        }
        if (referencesThis) {
            callCost += 5 + 5;
        }
        return callCost;
    }

    private static int inlineCostDelta(com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> namesToAlias, com.google.javascript.jscomp.FunctionInjector.InliningMode mode) {
        int paramCount = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(fnNode).getChildCount();
        int commaCount = (paramCount > 1) ? paramCount - 1 : 0;
        int costDeltaFunctionOverhead = (15 + commaCount) + (paramCount * com.google.javascript.jscomp.InlineCostEstimator.ESTIMATED_IDENTIFIER_COST);
        com.google.javascript.rhino.Node block = fnNode.getLastChild();
        if (!block.hasChildren()) {
            return -costDeltaFunctionOverhead;
        }
        if (mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(89).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.FunctionInjector.PAREN_COST",com.google.javascript.jscomp.FunctionInjector.PAREN_COST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("mode",mode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("paramCount",paramCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("namesToAlias",namesToAlias);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("block",block);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE",com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("fnNode",fnNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.FunctionInjector.COMMA_COST",com.google.javascript.jscomp.FunctionInjector.COMMA_COST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("costDeltaFunctionOverhead",costDeltaFunctionOverhead);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("commaCount",commaCount);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectionEnds();
            }
            if (runtimeAngelicValue)
                return -(costDeltaFunctionOverhead + 7);

        } else {
            int aliasCount = namesToAlias.size();
            final int INLINE_BLOCK_OVERHEAD = 4;
            final int PER_RETURN_OVERHEAD = 2;
            final int PER_RETURN_RESULT_OVERHEAD = 3;
            final int PER_ALIAS_OVERHEAD = 3;
            int returnCount = com.google.javascript.jscomp.NodeUtil.getNodeTypeReferenceCount(block, com.google.javascript.rhino.Token.RETURN, new com.google.javascript.jscomp.NodeUtil.MatchShallowStatement());
            int resultCount = (returnCount > 0) ? returnCount - 1 : 0;
            int baseOverhead = (returnCount > 0) ? INLINE_BLOCK_OVERHEAD : 0;
            int overhead = ((baseOverhead + (returnCount * PER_RETURN_OVERHEAD)) + (resultCount * PER_RETURN_RESULT_OVERHEAD)) + (aliasCount * PER_ALIAS_OVERHEAD);
            return overhead - costDeltaFunctionOverhead;
        }
    }

    public void setKnownConstants(java.util.Set<java.lang.String> knownConstants) {
        com.google.common.base.Preconditions.checkState(this.knownConstants.isEmpty());
        this.knownConstants = knownConstants;
    }
}
[270167] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659902835039
GPR[SSUN]-1659902835039
1299274573
GPR[SPVATF]-1659902835276
GPR[EPVATF]-1659902835927
GPR[SPS]-1659902835927
[272453] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:871.
GPR[EPS]-1659902837326
GPR[ESUN]-1659902837326
GPR[SSUN]-1659902837326
1299274573
GPR[SPVATF]-1659902837552
GPR[EPVATF]-1659902838400
GPR[SPS]-1659902838400
[274424] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:866.
GPR[EPS]-1659902839296
GPR[SPVATF]-1659902839297
GPR[EPVATF]-1659902839857
GPR[SPS]-1659902839857
[275545] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:866.
GPR[EPS]-1659902840417
GPR[ESUN]-1659902840417
GPR[SSUN]-1659902840417
1299274573
GPR[ESUN]-1659902840634
GPR[SSUN]-1659902840634
1299274573
GPR[ESUN]-1659902840847
GPR[SSUN]-1659902840847
1299274573
GPR[ESUN]-1659902841062
GPR[SSUN]-1659902841062
1299274573
GPR[ESUN]-1659902841275
GPR[SSUN]-1659902841275
1299274573
GPR[ESUN]-1659902841486
GPR[SSUN]-1659902841486
1299274573
GPR[SPVATF]-1659902841700
GPR[EPVATF]-1659902842223
GPR[SPS]-1659902842223
[277906] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:841.
GPR[EPS]-1659902842778
GPR[SPVATF]-1659902842778
GPR[EPVATF]-1659902843316
GPR[SPS]-1659902843316
GPR[EPS]-1659902845563
GPR[SPVATR]-1659902845563
[280691] INFO TestPatch - Applying patch: com.google.javascript.jscomp.FunctionInjector:841: CONDITIONAL callCost == 4
[281032] INFO TestPatch - Running test suite to check the patch "callCost == 4" is working
GPR[EPVATR]-1659902846902
[282030] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659902846902
[282034] INFO NoPol - --- a/src/com/google/javascript/jscomp/FunctionInjector.java
+++ b/src/com/google/javascript/jscomp/FunctionInjector.java
@@ -840,3 +840,3 @@
 
-    if (referencesThis) {
+    if (callCost == 4) {
       // TODO(johnlenz): Update this if we start supporting inlining

Saving patch at /experiment_home///results/Nopol/Closure/28/seed_264/patch_277528_4ts_1659902846906.diff
GPR[ESUN]-1659902846907
GPR[SSUN]-1659902846907
1299274573
GPR[SPVATF]-1659902847133
GPR[EPVATF]-1659902847706
GPR[SPS]-1659902847706
[283411] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:837.
GPR[EPS]-1659902848283
GPR[SPVATF]-1659902848283
GPR[EPVATF]-1659902848820
GPR[SPS]-1659902848820
[284500] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:837.
GPR[EPS]-1659902849372
GPR[ESUN]-1659902849372
GPR[SSUN]-1659902849372
1299274573
GPR[ESUN]-1659902849593
GPR[SSUN]-1659902849593
1299274573
GPR[ESUN]-1659902849810
GPR[SSUN]-1659902849810
1299274573
GPR[ESUN]-1659902850025
GPR[SSUN]-1659902850025
1299274573
GPR[SPVATF]-1659902850238
GPR[EPVATF]-1659902850758
GPR[SPS]-1659902850758
[286429] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:810.
GPR[EPS]-1659902851301
GPR[SPVATF]-1659902851301
GPR[EPVATF]-1659902851841
GPR[SPS]-1659902851841
GPR[EPS]-1659902856144
GPR[SPVATR]-1659902856144
[291272] INFO TestPatch - Applying patch: com.google.javascript.jscomp.FunctionInjector:810: CONDITIONAL (3 <= fnInstanceCount) || (fnInstanceCount == 0)
[291605] INFO TestPatch - Running test suite to check the patch "(3 <= fnInstanceCount) || (fnInstanceCount == 0)" is working
GPR[EPVATR]-1659902857549
[292677] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659902857549
[292681] INFO NoPol - --- a/src/com/google/javascript/jscomp/FunctionInjector.java
+++ b/src/com/google/javascript/jscomp/FunctionInjector.java
@@ -809,3 +809,3 @@
     // Prevent division by zero.
-    if (fnInstanceCount == 0) {
+    if ((3 <= fnInstanceCount) || (fnInstanceCount == 0)) {
       // Special case single reference function that are being block inlined:

Saving patch at /experiment_home///results/Nopol/Closure/28/seed_264/patch_288175_5ts_1659902857553.diff
GPR[ESUN]-1659902857554
GPR[SSUN]-1659902857554
1299274573
GPR[ESUN]-1659902857785
GPR[SSUN]-1659902857785
1299274573
GPR[ESUN]-1659902858002
GPR[SSUN]-1659902858002
1299274573
GPR[ESUN]-1659902858215
GPR[SSUN]-1659902858215
1299274573
GPR[ESUN]-1659902858426
GPR[SSUN]-1659902858426
1299274573
GPR[ESUN]-1659902858641
GPR[SSUN]-1659902858641
1299274573
GPR[ESUN]-1659902858858
GPR[SSUN]-1659902858858
1299274573
GPR[SPVATF]-1659902859072
GPR[EPVATF]-1659902859620
GPR[SPS]-1659902859620
[295298] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:693.
GPR[EPS]-1659902860170
GPR[ESUN]-1659902860170
GPR[SSUN]-1659902860170
1299274573
GPR[ESUN]-1659902860390
GPR[SSUN]-1659902860390
1299274573
GPR[SPVATF]-1659902860605
GPR[EPVATF]-1659902861156
GPR[SPS]-1659902861156
[296894] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:678.
GPR[EPS]-1659902861766
GPR[SPVATF]-1659902861766
GPR[EPVATF]-1659902862346
GPR[SPS]-1659902862346
[298052] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:678.
GPR[EPS]-1659902862924
GPR[ESUN]-1659902862924
GPR[SSUN]-1659902862924
1299274573
GPR[ESUN]-1659902863138
GPR[SSUN]-1659902863138
1299274573
GPR[ESUN]-1659902863349
GPR[SSUN]-1659902863349
1299274573
GPR[SPVATF]-1659902863562
GPR[EPVATF]-1659902864118
GPR[SPS]-1659902864118
[299897] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:666.
GPR[EPS]-1659902864769
GPR[SPVATF]-1659902864769
GPR[EPVATF]-1659902865332
GPR[SPS]-1659902865332
[301012] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:666.
GPR[EPS]-1659902865884
GPR[ESUN]-1659902865884
GPR[SSUN]-1659902865884
1299274573
GPR[SPVATF]-1659902866100
GPR[EPVATF]-1659902866677
GPR[SPS]-1659902866677
[302193] ERROR ConstraintModelBuilder - Unable to compile the change: 
class FunctionInjector {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier;

    private final boolean allowDecomposition;

    private java.util.Set<java.lang.String> knownConstants = com.google.common.collect.Sets.newHashSet();

    private final boolean assumeStrictThis;

    private final boolean assumeMinimumCapture;

    public FunctionInjector(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier, boolean allowDecomposition, boolean assumeStrictThis, boolean assumeMinimumCapture) {
        com.google.common.base.Preconditions.checkNotNull(compiler);
        com.google.common.base.Preconditions.checkNotNull(safeNameIdSupplier);
        this.compiler = compiler;
        this.safeNameIdSupplier = safeNameIdSupplier;
        this.allowDecomposition = allowDecomposition;
        this.assumeStrictThis = assumeStrictThis;
        this.assumeMinimumCapture = assumeMinimumCapture;
    }

    enum InliningMode {

        DIRECT,
        BLOCK;}

    static class Reference {
        final com.google.javascript.rhino.Node callNode;

        final com.google.javascript.jscomp.JSModule module;

        final com.google.javascript.jscomp.FunctionInjector.InliningMode mode;

        Reference(com.google.javascript.rhino.Node callNode, com.google.javascript.jscomp.JSModule module, com.google.javascript.jscomp.FunctionInjector.InliningMode mode) {
            this.callNode = callNode;
            this.module = module;
            this.mode = mode;
        }
    }

    private static final int NAME_COST_ESTIMATE = com.google.javascript.jscomp.InlineCostEstimator.ESTIMATED_IDENTIFIER_COST;

    private static final int COMMA_COST = 1;

    private static final int PAREN_COST = 2;

    boolean doesFunctionMeetMinimumRequirements(final java.lang.String fnName, com.google.javascript.rhino.Node fnNode) {
        com.google.javascript.rhino.Node block = com.google.javascript.jscomp.NodeUtil.getFunctionBody(fnNode);
        if (!compiler.getCodingConvention().isInlinableFunction(fnNode)) {
            return false;
        }
        final java.lang.String fnRecursionName = fnNode.getFirstChild().getString();
        com.google.common.base.Preconditions.checkState(fnRecursionName != null);
        boolean referencesArguments = com.google.javascript.jscomp.NodeUtil.isNameReferenced(block, "arguments", com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        com.google.common.base.Predicate<com.google.javascript.rhino.Node> p = new com.google.common.base.Predicate<com.google.javascript.rhino.Node>() {
            @java.lang.Override
            public boolean apply(com.google.javascript.rhino.Node n) {
                if (n.isName()) {
                    return (n.getString().equals("eval") || ((!fnName.isEmpty()) && n.getString().equals(fnName))) || ((!fnRecursionName.isEmpty()) && n.getString().equals(fnRecursionName));
                }
                return false;
            }
        };
        return (!referencesArguments) && (!com.google.javascript.jscomp.NodeUtil.has(block, p, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue()));
    }

    com.google.javascript.jscomp.FunctionInjector.CanInlineResult canInlineReferenceToFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> needAliases, com.google.javascript.jscomp.FunctionInjector.InliningMode mode, boolean referencesThis, boolean containsFunctions) {
        if (!isSupportedCallType(callNode)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (containsFunctions) {
            if ((!assumeMinimumCapture) && (!t.inGlobalScope())) {
                return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
            } else if (com.google.javascript.jscomp.NodeUtil.isWithinLoop(callNode)) {
                return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
            }
        }
        if (referencesThis && (!com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode))) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(104).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.jscomp.FunctionInjector.this.safeNameIdSupplier",com.google.javascript.jscomp.FunctionInjector.this.safeNameIdSupplier);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("needAliases",needAliases);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.jscomp.FunctionInjector.this.compiler",com.google.javascript.jscomp.FunctionInjector.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE",com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("fnNode",fnNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.jscomp.FunctionInjector.COMMA_COST",com.google.javascript.jscomp.FunctionInjector.COMMA_COST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("referencesThis",referencesThis);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.jscomp.FunctionInjector.this.assumeStrictThis",com.google.javascript.jscomp.FunctionInjector.this.assumeStrictThis);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.jscomp.FunctionInjector.PAREN_COST",com.google.javascript.jscomp.FunctionInjector.PAREN_COST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("mode",mode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("containsFunctions",containsFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("callNode",callNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.jscomp.FunctionInjector.this.knownConstants",com.google.javascript.jscomp.FunctionInjector.this.knownConstants);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.jscomp.FunctionInjector.this.assumeMinimumCapture",com.google.javascript.jscomp.FunctionInjector.this.assumeMinimumCapture);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.jscomp.FunctionInjector.this.allowDecomposition",com.google.javascript.jscomp.FunctionInjector.this.allowDecomposition);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectionEnds();
            }
            if (runtimeAngelicValue)
                return canInlineReferenceDirectly(callNode, fnNode);

        } else {
            return canInlineReferenceAsStatementBlock(t, callNode, fnNode, needAliases);
        }
    }

    private boolean isSupportedCallType(com.google.javascript.rhino.Node callNode) {
        if (!callNode.getFirstChild().isName()) {
            if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode)) {
                if (!assumeStrictThis) {
                    com.google.javascript.rhino.Node thisValue = callNode.getFirstChild().getNext();
                    if ((thisValue == null) || (!thisValue.isThis())) {
                        return false;
                    }
                }
            } else if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectApply(callNode)) {
                return false;
            }
        }
        return true;
    }

    com.google.javascript.rhino.Node inline(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, java.lang.String fnName, com.google.javascript.rhino.Node fnNode, com.google.javascript.jscomp.FunctionInjector.InliningMode mode) {
        com.google.common.base.Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());
        if (mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT) {
            return inlineReturnValue(callNode, fnNode);
        } else {
            return inlineFunction(callNode, fnNode, fnName);
        }
    }

    private com.google.javascript.rhino.Node inlineReturnValue(com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode) {
        com.google.javascript.rhino.Node block = fnNode.getLastChild();
        com.google.javascript.rhino.Node callParentNode = callNode.getParent();
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> argMap = com.google.javascript.jscomp.FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);
        com.google.javascript.rhino.Node newExpression;
        if (!block.hasChildren()) {
            com.google.javascript.rhino.Node srcLocation = block;
            newExpression = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(srcLocation);
        } else {
            com.google.javascript.rhino.Node returnNode = block.getFirstChild();
            com.google.common.base.Preconditions.checkArgument(returnNode.isReturn());
            com.google.javascript.rhino.Node safeReturnNode = returnNode.cloneTree();
            com.google.javascript.rhino.Node inlineResult = com.google.javascript.jscomp.FunctionArgumentInjector.inject(null, safeReturnNode, null, argMap);
            com.google.common.base.Preconditions.checkArgument(safeReturnNode == inlineResult);
            newExpression = safeReturnNode.removeFirstChild();
        }
        callParentNode.replaceChild(callNode, newExpression);
        return newExpression;
    }

    private enum CallSiteType {

        UNSUPPORTED,
        SIMPLE_CALL,
        SIMPLE_ASSIGNMENT,
        VAR_DECL_SIMPLE_ASSIGNMENT,
        EXPRESSION,
        DECOMPOSABLE_EXPRESSION;}

    private com.google.javascript.jscomp.FunctionInjector.CallSiteType classifyCallSite(com.google.javascript.rhino.Node callNode) {
        com.google.javascript.rhino.Node parent = callNode.getParent();
        com.google.javascript.rhino.Node grandParent = parent.getParent();
        if (com.google.javascript.jscomp.NodeUtil.isExprCall(parent)) {
            return com.google.javascript.jscomp.FunctionInjector.CallSiteType.SIMPLE_CALL;
        } else if (((com.google.javascript.jscomp.NodeUtil.isExprAssign(grandParent) && (!com.google.javascript.jscomp.NodeUtil.isVarOrSimpleAssignLhs(callNode, parent))) && parent.getFirstChild().isName()) && (!com.google.javascript.jscomp.NodeUtil.isConstantName(parent.getFirstChild()))) {
            return com.google.javascript.jscomp.FunctionInjector.CallSiteType.SIMPLE_ASSIGNMENT;
        } else if (((parent.isName() && (!com.google.javascript.jscomp.NodeUtil.isConstantName(parent))) && grandParent.isVar()) && grandParent.hasOneChild()) {
            return com.google.javascript.jscomp.FunctionInjector.CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT;
        } else {
            com.google.javascript.rhino.Node expressionRoot = com.google.javascript.jscomp.ExpressionDecomposer.findExpressionRoot(callNode);
            if (expressionRoot != null) {
                com.google.javascript.jscomp.ExpressionDecomposer decomposer = new com.google.javascript.jscomp.ExpressionDecomposer(compiler, safeNameIdSupplier, knownConstants);
                com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType type = decomposer.canExposeExpression(callNode);
                if (type == com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.MOVABLE) {
                    return com.google.javascript.jscomp.FunctionInjector.CallSiteType.EXPRESSION;
                } else if (type == com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.DECOMPOSABLE) {
                    return com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION;
                } else {
                    com.google.common.base.Preconditions.checkState(type == com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.UNDECOMPOSABLE);
                }
            }
        }
        return com.google.javascript.jscomp.FunctionInjector.CallSiteType.UNSUPPORTED;
    }

    private com.google.javascript.rhino.Node inlineFunction(com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode, java.lang.String fnName) {
        com.google.javascript.rhino.Node parent = callNode.getParent();
        com.google.javascript.rhino.Node grandParent = parent.getParent();
        com.google.javascript.jscomp.FunctionInjector.CallSiteType callSiteType = classifyCallSite(callNode);
        com.google.common.base.Preconditions.checkArgument(callSiteType != com.google.javascript.jscomp.FunctionInjector.CallSiteType.UNSUPPORTED);
        boolean isCallInLoop = com.google.javascript.jscomp.NodeUtil.isWithinLoop(callNode);
        java.lang.String resultName = null;
        boolean needsDefaultReturnResult = true;
        switch (callSiteType) {
            case SIMPLE_ASSIGNMENT :
                resultName = parent.getFirstChild().getString();
                break;
            case VAR_DECL_SIMPLE_ASSIGNMENT :
                resultName = parent.getString();
                break;
            case SIMPLE_CALL :
                resultName = null;
                needsDefaultReturnResult = false;
                break;
            case EXPRESSION :
                resultName = getUniqueResultName();
                needsDefaultReturnResult = isCallInLoop;
                break;
            case DECOMPOSABLE_EXPRESSION :
                throw new java.lang.IllegalStateException("Decomposable expressions must decomposed before inlining.");
            default :
                throw new java.lang.IllegalStateException("Unexpected call site type.");
        }
        com.google.javascript.jscomp.FunctionToBlockMutator mutator = new com.google.javascript.jscomp.FunctionToBlockMutator(compiler, this.safeNameIdSupplier);
        com.google.javascript.rhino.Node newBlock = mutator.mutate(fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);
        com.google.javascript.rhino.Node greatGrandParent = grandParent.getParent();
        switch (callSiteType) {
            case VAR_DECL_SIMPLE_ASSIGNMENT :
                parent.removeChild(parent.getFirstChild());
                com.google.common.base.Preconditions.checkState(parent.getFirstChild() == null);
                greatGrandParent.addChildAfter(newBlock, grandParent);
                break;
            case SIMPLE_ASSIGNMENT :
                com.google.common.base.Preconditions.checkState(grandParent.isExprResult());
                greatGrandParent.replaceChild(grandParent, newBlock);
                break;
            case SIMPLE_CALL :
                com.google.common.base.Preconditions.checkState(parent.isExprResult());
                grandParent.replaceChild(parent, newBlock);
                break;
            case EXPRESSION :
                com.google.javascript.rhino.Node injectionPoint = com.google.javascript.jscomp.ExpressionDecomposer.findInjectionPoint(callNode);
                com.google.common.base.Preconditions.checkNotNull(injectionPoint);
                com.google.javascript.rhino.Node injectionPointParent = injectionPoint.getParent();
                com.google.common.base.Preconditions.checkNotNull(injectionPointParent);
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isStatementBlock(injectionPointParent));
                newBlock.addChildrenToFront(com.google.javascript.jscomp.NodeUtil.newVarNode(resultName, null).copyInformationFromForTree(callNode));
                injectionPointParent.addChildBefore(newBlock, injectionPoint);
                parent.replaceChild(callNode, com.google.javascript.rhino.IR.name(resultName));
                break;
            default :
                throw new java.lang.IllegalStateException("Unexpected call site type.");
        }
        return newBlock;
    }

    boolean isDirectCallNodeReplacementPossible(com.google.javascript.rhino.Node fnNode) {
        com.google.javascript.rhino.Node block = com.google.javascript.jscomp.NodeUtil.getFunctionBody(fnNode);
        if (!block.hasChildren()) {
            return true;
        } else if (block.hasOneChild()) {
            if (block.getFirstChild().isReturn() && (block.getFirstChild().getFirstChild() != null)) {
                return true;
            }
        }
        return false;
    }

    enum CanInlineResult {

        YES,
        AFTER_DECOMPOSITION,
        NO;}

    private com.google.javascript.jscomp.FunctionInjector.CanInlineResult canInlineReferenceAsStatementBlock(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> namesToAlias) {
        com.google.javascript.jscomp.FunctionInjector.CallSiteType callSiteType = classifyCallSite(callNode);
        if (callSiteType == com.google.javascript.jscomp.FunctionInjector.CallSiteType.UNSUPPORTED) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if ((!allowDecomposition) && (callSiteType == com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (!callMeetsBlockInliningRequirements(t, callNode, fnNode, namesToAlias)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        if (callSiteType == com.google.javascript.jscomp.FunctionInjector.CallSiteType.DECOMPOSABLE_EXPRESSION) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.AFTER_DECOMPOSITION;
        } else {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.YES;
        }
    }

    private boolean callMeetsBlockInliningRequirements(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node callNode, final com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> namesToAlias) {
        final boolean assumeMinimumCapture = this.assumeMinimumCapture;
        boolean fnContainsVars = com.google.javascript.jscomp.NodeUtil.has(com.google.javascript.jscomp.NodeUtil.getFunctionBody(fnNode), new com.google.javascript.jscomp.NodeUtil.MatchDeclaration(), new com.google.javascript.jscomp.NodeUtil.MatchShallowStatement());
        boolean forbidTemps = false;
        if (!t.inGlobalScope()) {
            com.google.javascript.rhino.Node fnCaller = t.getScopeRoot();
            com.google.javascript.rhino.Node fnCallerBody = fnCaller.getLastChild();
            com.google.common.base.Predicate<com.google.javascript.rhino.Node> match = new com.google.common.base.Predicate<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean apply(com.google.javascript.rhino.Node n) {
                    if (n.isName()) {
                        return n.getString().equals("eval");
                    }
                    if ((!assumeMinimumCapture) && n.isFunction()) {
                        return n != fnNode;
                    }
                    return false;
                }
            };
            forbidTemps = com.google.javascript.jscomp.NodeUtil.has(fnCallerBody, match, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        }
        if (fnContainsVars && forbidTemps) {
            return false;
        }
        if (forbidTemps) {
            java.util.Map<java.lang.String, com.google.javascript.rhino.Node> args = com.google.javascript.jscomp.FunctionArgumentInjector.getFunctionCallParameterMap(fnNode, callNode, this.safeNameIdSupplier);
            boolean hasArgs = !args.isEmpty();
            if (hasArgs) {
                java.util.Set<java.lang.String> allNamesToAlias = com.google.common.collect.Sets.newHashSet(namesToAlias);
                com.google.javascript.jscomp.FunctionArgumentInjector.maybeAddTempsForCallArguments(fnNode, args, allNamesToAlias, compiler.getCodingConvention());
                if (!allNamesToAlias.isEmpty()) {
                    return false;
                }
            }
        }
        return true;
    }

    private com.google.javascript.jscomp.FunctionInjector.CanInlineResult canInlineReferenceDirectly(com.google.javascript.rhino.Node callNode, com.google.javascript.rhino.Node fnNode) {
        if (!isDirectCallNodeReplacementPossible(fnNode)) {
            return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
        }
        com.google.javascript.rhino.Node block = fnNode.getLastChild();
        com.google.javascript.rhino.Node cArg = callNode.getFirstChild().getNext();
        if (!callNode.getFirstChild().isName()) {
            if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode)) {
                if ((cArg == null) || (!cArg.isThis())) {
                    return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
                }
                cArg = cArg.getNext();
            } else {
                com.google.common.base.Preconditions.checkState(!com.google.javascript.jscomp.NodeUtil.isFunctionObjectApply(callNode));
            }
        }
        com.google.javascript.rhino.Node fnParam = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(fnNode).getFirstChild();
        while ((cArg != null) || (fnParam != null)) {
            if (fnParam != null) {
                if (cArg != null) {
                    if (com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(cArg) && (com.google.javascript.jscomp.NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1)) {
                        return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
                    }
                }
                fnParam = fnParam.getNext();
            }
            if (cArg != null) {
                if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(cArg)) {
                    return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;
                }
                cArg = cArg.getNext();
            }
        } 
        return com.google.javascript.jscomp.FunctionInjector.CanInlineResult.YES;
    }

    private java.lang.String getUniqueResultName() {
        return ("JSCompiler_inline_result" + com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.UNIQUE_ID_SEPARATOR) + safeNameIdSupplier.get();
    }

    boolean inliningLowersCost(com.google.javascript.jscomp.JSModule fnModule, com.google.javascript.rhino.Node fnNode, java.util.Collection<? extends com.google.javascript.jscomp.FunctionInjector.Reference> refs, java.util.Set<java.lang.String> namesToAlias, boolean isRemovable, boolean referencesThis) {
        int referenceCount = refs.size();
        if (referenceCount == 0) {
            return true;
        }
        int referencesUsingBlockInlining = 0;
        boolean checkModules = isRemovable && (fnModule != null);
        com.google.javascript.jscomp.JSModuleGraph moduleGraph = compiler.getModuleGraph();
        for (com.google.javascript.jscomp.FunctionInjector.Reference ref : refs) {
            if (ref.mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.BLOCK) {
                referencesUsingBlockInlining++;
            }
            if (checkModules && (ref.module != null)) {
                if ((ref.module != fnModule) && (!moduleGraph.dependsOn(ref.module, fnModule))) {
                    isRemovable = false;
                    checkModules = false;
                }
            }
        }
        int referencesUsingDirectInlining = referenceCount - referencesUsingBlockInlining;
        if (((referenceCount == 1) && isRemovable) && (referencesUsingDirectInlining == 1)) {
            return true;
        }
        int callCost = com.google.javascript.jscomp.FunctionInjector.estimateCallCost(fnNode, referencesThis);
        int overallCallCost = callCost * referenceCount;
        int costDeltaDirect = com.google.javascript.jscomp.FunctionInjector.inlineCostDelta(fnNode, namesToAlias, com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT);
        int costDeltaBlock = com.google.javascript.jscomp.FunctionInjector.inlineCostDelta(fnNode, namesToAlias, com.google.javascript.jscomp.FunctionInjector.InliningMode.BLOCK);
        return doesLowerCost(fnNode, overallCallCost, referencesUsingDirectInlining, costDeltaDirect, referencesUsingBlockInlining, costDeltaBlock, isRemovable);
    }

    private boolean doesLowerCost(com.google.javascript.rhino.Node fnNode, int callCost, int directInlines, int costDeltaDirect, int blockInlines, int costDeltaBlock, boolean removable) {
        int fnInstanceCount = (directInlines + blockInlines) - (removable ? 1 : 0);
        if (fnInstanceCount == 0) {
            if ((blockInlines > 0) && (costDeltaBlock > 0)) {
                return false;
            }
            return true;
        }
        int costDelta = (directInlines * costDeltaDirect) + (blockInlines * costDeltaBlock);
        int threshold = (callCost - costDelta) / fnInstanceCount;
        return com.google.javascript.jscomp.InlineCostEstimator.getCost(fnNode, threshold + 1) <= threshold;
    }

    private static int estimateCallCost(com.google.javascript.rhino.Node fnNode, boolean referencesThis) {
        com.google.javascript.rhino.Node argsNode = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(fnNode);
        int numArgs = argsNode.getChildCount();
        int callCost = com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE + com.google.javascript.jscomp.FunctionInjector.PAREN_COST;
        if (numArgs > 0) {
            callCost += (numArgs * com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE) + ((numArgs - 1) * com.google.javascript.jscomp.FunctionInjector.COMMA_COST);
        }
        if (referencesThis) {
            callCost += 5 + 5;
        }
        return callCost;
    }

    private static int inlineCostDelta(com.google.javascript.rhino.Node fnNode, java.util.Set<java.lang.String> namesToAlias, com.google.javascript.jscomp.FunctionInjector.InliningMode mode) {
        int paramCount = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(fnNode).getChildCount();
        int commaCount = (paramCount > 1) ? paramCount - 1 : 0;
        int costDeltaFunctionOverhead = (15 + commaCount) + (paramCount * com.google.javascript.jscomp.InlineCostEstimator.ESTIMATED_IDENTIFIER_COST);
        com.google.javascript.rhino.Node block = fnNode.getLastChild();
        if (!block.hasChildren()) {
            return -costDeltaFunctionOverhead;
        }
        if (mode == com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT) {
            return -(costDeltaFunctionOverhead + 7);
        } else {
            int aliasCount = namesToAlias.size();
            final int INLINE_BLOCK_OVERHEAD = 4;
            final int PER_RETURN_OVERHEAD = 2;
            final int PER_RETURN_RESULT_OVERHEAD = 3;
            final int PER_ALIAS_OVERHEAD = 3;
            int returnCount = com.google.javascript.jscomp.NodeUtil.getNodeTypeReferenceCount(block, com.google.javascript.rhino.Token.RETURN, new com.google.javascript.jscomp.NodeUtil.MatchShallowStatement());
            int resultCount = (returnCount > 0) ? returnCount - 1 : 0;
            int baseOverhead = (returnCount > 0) ? INLINE_BLOCK_OVERHEAD : 0;
            int overhead = ((baseOverhead + (returnCount * PER_RETURN_OVERHEAD)) + (resultCount * PER_RETURN_RESULT_OVERHEAD)) + (aliasCount * PER_ALIAS_OVERHEAD);
            return overhead - costDeltaFunctionOverhead;
        }
    }

    public void setKnownConstants(java.util.Set<java.lang.String> knownConstants) {
        com.google.common.base.Preconditions.checkState(this.knownConstants.isEmpty());
        this.knownConstants = knownConstants;
    }
}
[302193] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659902867065
GPR[SSUN]-1659902867066
-718432441
GPR[SPVATF]-1659902867281
GPR[EPVATF]-1659902867870
GPR[SPS]-1659902867870
[303686] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:240.
GPR[EPS]-1659902868558
GPR[ESUN]-1659902868558
GPR[SSUN]-1659902868558
-718432441
GPR[SPVATF]-1659902868774
GPR[EPVATF]-1659902869448
GPR[SPS]-1659902869448
[305249] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:239.
GPR[EPS]-1659902870121
GPR[ESUN]-1659902870121
GPR[SSUN]-1659902870121
-718432441
GPR[SPVATF]-1659902870337
GPR[EPVATF]-1659902870933
GPR[SPS]-1659902870933
[306755] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:238.
GPR[EPS]-1659902871627
GPR[ESUN]-1659902871627
GPR[SSUN]-1659902871627
-718432441
GPR[SPVATF]-1659902871837
GPR[EPVATF]-1659902872444
GPR[SPS]-1659902872444
[308245] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:237.
GPR[EPS]-1659902873117
GPR[ESUN]-1659902873117
GPR[SSUN]-1659902873117
1045502179
GPR[SPVATF]-1659902873356
GPR[EPVATF]-1659902873981
GPR[SPS]-1659902873981
[309776] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:187.
GPR[EPS]-1659902874648
GPR[SPVATF]-1659902874649
GPR[EPVATF]-1659902875284
GPR[SPS]-1659902875284
[311091] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:187.
GPR[EPS]-1659902875963
GPR[ESUN]-1659902875963
GPR[SSUN]-1659902875963
1045502179
GPR[ESUN]-1659902877095
GPR[SSUN]-1659902877095
1045502179
GPR[SPVATF]-1659902877339
GPR[EPVATF]-1659902878049
GPR[SPS]-1659902878049
[314144] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:185.
GPR[EPS]-1659902879016
GPR[ESUN]-1659902879016
GPR[SSUN]-1659902879016
1299274573
GPR[SPVATF]-1659902879288
GPR[EPVATF]-1659902879936
GPR[SPS]-1659902879936
[315625] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:532.
GPR[EPS]-1659902880497
GPR[ESUN]-1659902880497
GPR[SSUN]-1659902880497
1187751237
GPR[ESUN]-1659902880771
GPR[SSUN]-1659902880771
1187751237
GPR[SPVATF]-1659902881045
GPR[EPVATF]-1659902881633
GPR[SPS]-1659902881633
[317472] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2182.
GPR[EPS]-1659902882344
GPR[SPVATF]-1659902882344
GPR[EPVATF]-1659902882894
GPR[SPS]-1659902882894
[318728] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2182.
GPR[EPS]-1659902883600
GPR[ESUN]-1659902883600
GPR[SSUN]-1659902883600
1187751237
GPR[ESUN]-1659902883874
GPR[SSUN]-1659902883874
1045502179
GPR[SPVATF]-1659902884138
GPR[EPVATF]-1659902884685
GPR[SPS]-1659902884685
[320532] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:259.
GPR[EPS]-1659902885404
GPR[ESUN]-1659902885404
GPR[SSUN]-1659902885404
-132053243
GPR[ESUN]-1659902885592
GPR[SSUN]-1659902885592
-132053243
GPR[SPVATF]-1659902885779
GPR[EPVATF]-1659902885798
[320926] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659902885798
GPR[SSUN]-1659902885798
1045502179
GPR[ESUN]-1659902886037
GPR[SSUN]-1659902886037
1045502179
GPR[SPVATF]-1659902886268
GPR[EPVATF]-1659902886807
GPR[SPS]-1659902886807
[322622] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:953.
GPR[EPS]-1659902887494
GPR[ESUN]-1659902887494
GPR[SSUN]-1659902887494
-1117079791
GPR[SPVATF]-1659902887691
GPR[EPVATF]-1659902888246
GPR[SPS]-1659902888246
[323856] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:483.
GPR[EPS]-1659902888728
GPR[ESUN]-1659902888728
GPR[SSUN]-1659902888728
-1117079791
GPR[ESUN]-1659902888931
GPR[SSUN]-1659902888931
-1117079791
GPR[SPVATF]-1659902889124
GPR[EPVATF]-1659902889690
GPR[SPS]-1659902889690
[325300] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:482.
GPR[EPS]-1659902890172
GPR[SPVATF]-1659902890172
GPR[EPVATF]-1659902890722
GPR[SPS]-1659902890722
[326346] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:482.
GPR[EPS]-1659902891218
GPR[ESUN]-1659902891218
GPR[SSUN]-1659902891218
-1117079791
GPR[SPVATF]-1659902891421
GPR[EPVATF]-1659902891986
GPR[SPS]-1659902891987
[327654] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:481.
GPR[EPS]-1659902892526
GPR[ESUN]-1659902892526
GPR[SSUN]-1659902892527
-1117079791
GPR[SPVATF]-1659902892725
GPR[EPVATF]-1659902893286
GPR[SPS]-1659902893286
[328910] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:480.
GPR[EPS]-1659902893782
GPR[ESUN]-1659902893782
GPR[SSUN]-1659902893782
-1117079791
GPR[ESUN]-1659902893975
GPR[SSUN]-1659902893975
-1117079791
GPR[SPVATF]-1659902894163
GPR[EPVATF]-1659902894729
GPR[SPS]-1659902894729
[330359] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:129.
GPR[EPS]-1659902895231
GPR[ESUN]-1659902895231
GPR[SSUN]-1659902895231
GPR[ESUN]-1659902895231
GPR[SSUN]-1659902895231
1187751237
GPR[SPVATF]-1659902895502
GPR[EPVATF]-1659902896058
GPR[SPS]-1659902896058
[331867] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2688.
GPR[EPS]-1659902896739
GPR[ESUN]-1659902896739
GPR[SSUN]-1659902896739
1187751237
GPR[ESUN]-1659902897020
GPR[SSUN]-1659902897020
1299274573
GPR[SPVATF]-1659902897236
GPR[EPVATF]-1659902897801
GPR[SPS]-1659902897801
[333507] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:756.
GPR[EPS]-1659902898379
GPR[SPVATF]-1659902898379
GPR[EPVATF]-1659902899015
GPR[SPS]-1659902899016
[334704] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:756.
GPR[EPS]-1659902899577
GPR[ESUN]-1659902899577
GPR[SSUN]-1659902899577
-1345859678
GPR[ESUN]-1659902899892
GPR[SSUN]-1659902899892
1045502179
GPR[SPVATF]-1659902900131
GPR[EPVATF]-1659902900705
GPR[SPS]-1659902900705
[336500] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:984.
GPR[EPS]-1659902901372
GPR[ESUN]-1659902901372
GPR[SSUN]-1659902901372
1045502179
GPR[ESUN]-1659902901608
GPR[SSUN]-1659902901608
1045502179
GPR[ESUN]-1659902901841
GPR[SSUN]-1659902901841
1045502179
GPR[SPVATF]-1659902902071
GPR[EPVATF]-1659902902665
GPR[SPS]-1659902902665
[338465] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:971.
GPR[EPS]-1659902903337
GPR[ESUN]-1659902903337
GPR[SSUN]-1659902903337
1045502179
GPR[SPVATF]-1659902903573
GPR[EPVATF]-1659902904166
GPR[SPS]-1659902904166
[339968] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:969.
GPR[EPS]-1659902904840
GPR[ESUN]-1659902904840
GPR[SSUN]-1659902904840
1045502179
GPR[SPVATF]-1659902905081
GPR[EPVATF]-1659902905679
GPR[SPS]-1659902905679
[341487] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:968.
GPR[EPS]-1659902906359
GPR[SPVATF]-1659902906359
GPR[EPVATF]-1659902906998
GPR[SPS]-1659902906998
[342877] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:968.
GPR[EPS]-1659902907749
GPR[ESUN]-1659902907749
GPR[SSUN]-1659902907749
1045502179
GPR[ESUN]-1659902907989
GPR[SSUN]-1659902907989
1045502179
GPR[ESUN]-1659902908224
GPR[SSUN]-1659902908224
1045502179
GPR[SPVATF]-1659902908460
GPR[EPVATF]-1659902909127
GPR[SPS]-1659902909127
GPR[EPS]-1659902912197
GPR[SPVATR]-1659902912197
[347325] INFO TestPatch - Applying patch: com.google.javascript.jscomp.InlineFunctions:690: PRECONDITION fs.references.size() <= 2
[347778] INFO TestPatch - Running test suite to check the patch "fs.references.size() <= 2" is working
GPR[EPVATR]-1659902914098
[349226] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659902914098
[349231] INFO NoPol - --- a/src/com/google/javascript/jscomp/InlineFunctions.java
+++ b/src/com/google/javascript/jscomp/InlineFunctions.java
@@ -689,12 +689,14 @@
   private boolean mimimizeCost(FunctionState fs) {
-    if (!inliningLowersCost(fs)) {
-      // Try again without Block inlining references
-      if (fs.hasBlockInliningReferences()) {
-        fs.setRemove(false);
-        fs.removeBlockInliningReferences();
-        if (!fs.hasReferences() || !inliningLowersCost(fs)) {
+    if (fs.references.size() <= 2) {
+      if (!inliningLowersCost(fs)) {
+        // Try again without Block inlining references
+        if (fs.hasBlockInliningReferences()) {
+          fs.setRemove(false);
+          fs.removeBlockInliningReferences();
+          if (!fs.hasReferences() || !inliningLowersCost(fs)) {
+            return false;
+          }
+        } else {
           return false;
         }
-      } else {
-        return false;
       }

Saving patch at /experiment_home///results/Nopol/Closure/28/seed_264/patch_344725_6ts_1659902914103.diff
GPR[SPVATF]-1659902914104
GPR[EPVATF]-1659902914750
GPR[SPS]-1659902914750
GPR[EPS]-1659904018200
GPR[ESUN]-1659904018200
GPR[SSUN]-1659904018200
1045502179
GPR[SPVATF]-1659904018639
GPR[EPVATF]-1659904020385
GPR[SPS]-1659904020385
[1456276] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:676.
GPR[EPS]-1659904021148
GPR[SPVATF]-1659904021148
GPR[EPVATF]-1659904021963
GPR[SPS]-1659904021963
[1457777] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:676.
GPR[EPS]-1659904022649
GPR[ESUN]-1659904022649
GPR[SSUN]-1659904022649
1045502179
GPR[SPVATF]-1659904022892
GPR[EPVATF]-1659904023434
GPR[SPS]-1659904023434
GPR[EPS]-1659904033507
GPR[SPVATF]-1659904033507
GPR[EPVATF]-1659904034047
GPR[SPS]-1659904034047
GPR[EPS]-1659904048900
GPR[ESUN]-1659904048900
GPR[SSUN]-1659904048900
1045502179
GPR[ESUN]-1659904049143
GPR[SSUN]-1659904049143
1299274573
GPR[SPVATF]-1659904049362
GPR[EPVATF]-1659904049872
GPR[SPS]-1659904049872
[1485552] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:775.
GPR[EPS]-1659904050424
GPR[SPVATF]-1659904050424
GPR[EPVATF]-1659904050948
GPR[SPS]-1659904050948
GPR[EPS]-1659904054378
GPR[SPVATR]-1659904054378
[1489507] INFO TestPatch - Applying patch: com.google.javascript.jscomp.FunctionInjector:775: CONDITIONAL ((refs.size()) != (com.google.javascript.jscomp.FunctionInjector.PAREN_COST)) && ((((referenceCount == 1) && isRemovable) && (referencesUsingDirectInlining == 1)) || (!((referenceCount == 1))))
[1489835] INFO TestPatch - Running test suite to check the patch "((refs.size()) != (com.google.javascript.jscomp.FunctionInjector.PAREN_COST)) && ((((referenceCount == 1) && isRemovable) && (referencesUsingDirectInlining == 1)) || (!((referenceCount == 1))))" is working
GPR[EPVATR]-1659904055957
[1491085] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659904055957
[1491089] INFO NoPol - --- a/src/com/google/javascript/jscomp/FunctionInjector.java
+++ b/src/com/google/javascript/jscomp/FunctionInjector.java
@@ -774,4 +774,3 @@
     // so use the cost estimating.
-    if (referenceCount == 1 && isRemovable &&
-        referencesUsingDirectInlining == 1) {
+    if (((refs.size()) != (com.google.javascript.jscomp.FunctionInjector.PAREN_COST)) && ((((referenceCount == 1) && isRemovable) && (referencesUsingDirectInlining == 1)) || (!((referenceCount == 1))))) {
       return true;

Saving patch at /experiment_home///results/Nopol/Closure/28/seed_264/patch_1486583_7ts_1659904055961.diff
GPR[ESUN]-1659904055962
GPR[SSUN]-1659904055962
1299274573
GPR[ESUN]-1659904056217
GPR[SSUN]-1659904056217
1299274573
GPR[ESUN]-1659904056431
GPR[SSUN]-1659904056431
1299274573
GPR[SPVATF]-1659904056645
GPR[EPVATF]-1659904057171
GPR[SPS]-1659904057171
[1492866] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:755.
GPR[EPS]-1659904057738
GPR[SPVATF]-1659904057738
GPR[EPVATF]-1659904058278
GPR[SPS]-1659904058278
[1493962] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:755.
GPR[EPS]-1659904058834
GPR[ESUN]-1659904058834
GPR[SSUN]-1659904058834
1299274573
GPR[SPVATF]-1659904059061
GPR[EPVATF]-1659904059667
GPR[SPS]-1659904059667
[1495358] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:750.
GPR[EPS]-1659904060230
GPR[SPVATF]-1659904060231
GPR[EPVATF]-1659904060790
GPR[SPS]-1659904060791
[1496461] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:750.
GPR[EPS]-1659904061333
GPR[ESUN]-1659904061333
GPR[SSUN]-1659904061333
1299274573
GPR[SPVATF]-1659904061549
GPR[EPVATF]-1659904062103
GPR[SPS]-1659904062103
[1497859] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:749.
GPR[EPS]-1659904062731
GPR[ESUN]-1659904062731
GPR[SSUN]-1659904062731
1299274573
GPR[ESUN]-1659904062951
GPR[SSUN]-1659904062951
1299274573
GPR[ESUN]-1659904063168
GPR[SSUN]-1659904063168
1299274573
GPR[ESUN]-1659904063381
GPR[SSUN]-1659904063381
1299274573
GPR[SPVATF]-1659904063592
GPR[EPVATF]-1659904064214
GPR[SPS]-1659904064214
[1499889] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:740.
GPR[EPS]-1659904064761
GPR[SPVATF]-1659904064761
GPR[EPVATF]-1659904065325
GPR[SPS]-1659904065325
GPR[EPS]-1659904068114
GPR[SPVATR]-1659904068114
[1503242] INFO TestPatch - Applying patch: com.google.javascript.jscomp.FunctionInjector:740: CONDITIONAL com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE < refs.size()
[1503576] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE < refs.size()" is working
GPR[EPVATR]-1659904069762
[1504890] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659904069763
[1504895] INFO NoPol - --- a/src/com/google/javascript/jscomp/FunctionInjector.java
+++ b/src/com/google/javascript/jscomp/FunctionInjector.java
@@ -739,3 +739,3 @@
     int referenceCount = refs.size();
-    if (referenceCount == 0) {
+    if (com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE < refs.size()) {
       return true;

Saving patch at /experiment_home///results/Nopol/Closure/28/seed_264/patch_1500389_8ts_1659904069767.diff
GPR[ESUN]-1659904069767
GPR[SSUN]-1659904069767
1299274573
GPR[ESUN]-1659904069990
GPR[SSUN]-1659904069990
1045502179
GPR[SPVATF]-1659904070224
GPR[EPVATF]-1659904070791
GPR[SPS]-1659904070791
[1506663] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:540.
GPR[EPS]-1659904071535
GPR[ESUN]-1659904071535
GPR[SSUN]-1659904071535
1045502179
GPR[SPVATF]-1659904071784
GPR[EPVATF]-1659904072370
GPR[SPS]-1659904072370
[1508206] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:539.
GPR[EPS]-1659904073078
GPR[ESUN]-1659904073078
GPR[SSUN]-1659904073078
1045502179
GPR[ESUN]-1659904073316
GPR[SSUN]-1659904073316
-718432441
GPR[SPVATF]-1659904073527
GPR[EPVATF]-1659904073641
GPR[SPS]-1659904073641
[1509349] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:569.
GPR[EPS]-1659904074221
GPR[ESUN]-1659904074222
GPR[SSUN]-1659904074222
-718432441
GPR[SPVATF]-1659904074435
GPR[EPVATF]-1659904074549
GPR[SPS]-1659904074549
[1510261] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:568.
GPR[EPS]-1659904075133
GPR[ESUN]-1659904075133
GPR[SSUN]-1659904075133
-718432441
GPR[SPVATF]-1659904075342
GPR[EPVATF]-1659904075453
GPR[SPS]-1659904075453
[1511159] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:567.
GPR[EPS]-1659904076031
GPR[ESUN]-1659904076031
GPR[SSUN]-1659904076031
1045502179
GPR[ESUN]-1659904076275
GPR[SSUN]-1659904076275
1045502179
GPR[SPVATF]-1659904076514
GPR[EPVATF]-1659904077108
GPR[SPS]-1659904077108
[1512970] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:961.
GPR[EPS]-1659904077842
GPR[SPVATF]-1659904077843
GPR[EPVATF]-1659904078432
GPR[SPS]-1659904078432
[1514380] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:961.
GPR[EPS]-1659904079252
GPR[ESUN]-1659904079252
GPR[SSUN]-1659904079252
GPR[ESUN]-1659904079252
GPR[SSUN]-1659904079252
1045502179
GPR[SPVATF]-1659904079490
GPR[EPVATF]-1659904080145
GPR[SPS]-1659904080145
[1515929] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:438.
GPR[EPS]-1659904080801
GPR[ESUN]-1659904080801
GPR[SSUN]-1659904080801
1045502179
GPR[SPVATF]-1659904081044
GPR[EPVATF]-1659904081673
GPR[SPS]-1659904081673
[1517460] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$CallVisitor:398.
GPR[EPS]-1659904082332
GPR[ESUN]-1659904082332
GPR[SSUN]-1659904082332
1045502179
GPR[SPVATF]-1659904082575
GPR[EPVATF]-1659904083221
GPR[SPS]-1659904083221
[1519004] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:983.
GPR[EPS]-1659904083876
GPR[SPVATF]-1659904083876
GPR[EPVATF]-1659904084542
GPR[SPS]-1659904084542
[1520388] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:983.
GPR[EPS]-1659904085260
GPR[ESUN]-1659904085260
GPR[SSUN]-1659904085260
1045502179
GPR[ESUN]-1659904085501
GPR[SSUN]-1659904085501
1045502179
GPR[ESUN]-1659904085742
GPR[SSUN]-1659904085742
1045502179
GPR[ESUN]-1659904085978
GPR[SSUN]-1659904085978
1045502179
GPR[SPVATF]-1659904086219
GPR[EPVATF]-1659904086904
GPR[SPS]-1659904086904
[1522719] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:535.
GPR[EPS]-1659904087591
GPR[SPVATF]-1659904087591
GPR[EPVATF]-1659904089110
GPR[SPS]-1659904089110
[1525030] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:535.
GPR[EPS]-1659904089902
GPR[ESUN]-1659904089902
GPR[SSUN]-1659904089902
1045502179
GPR[ESUN]-1659904090143
GPR[SSUN]-1659904090143
1045502179
GPR[SPVATF]-1659904090378
GPR[EPVATF]-1659904091823
GPR[SPS]-1659904091823
[1527649] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:521.
GPR[EPS]-1659904092521
GPR[SPVATF]-1659904092521
GPR[EPVATF]-1659904093088
GPR[SPS]-1659904093089
[1528901] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:521.
GPR[EPS]-1659904093773
GPR[ESUN]-1659904093773
GPR[SSUN]-1659904093773
1045502179
GPR[ESUN]-1659904094009
GPR[SSUN]-1659904094009
1045502179
GPR[SPVATF]-1659904094247
GPR[EPVATF]-1659904094788
GPR[SPS]-1659904094788
[1530587] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:510.
GPR[EPS]-1659904095459
GPR[SPVATF]-1659904095460
GPR[EPVATF]-1659904096014
GPR[SPS]-1659904096014
[1531835] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:510.
GPR[EPS]-1659904096707
GPR[ESUN]-1659904096707
GPR[SSUN]-1659904096707
1045502179
GPR[SPVATF]-1659904096978
GPR[EPVATF]-1659904097544
GPR[SPS]-1659904097544
[1533374] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:501.
GPR[EPS]-1659904098246
GPR[SPVATF]-1659904098246
GPR[EPVATF]-1659904098822
GPR[SPS]-1659904098822
[1534631] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:501.
GPR[EPS]-1659904099503
GPR[ESUN]-1659904099503
GPR[SSUN]-1659904099503
1045502179
GPR[SPVATF]-1659904099739
GPR[EPVATF]-1659904100274
GPR[SPS]-1659904100274
[1536094] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:499.
GPR[EPS]-1659904100966
GPR[ESUN]-1659904100966
GPR[SSUN]-1659904100966
1045502179
GPR[ESUN]-1659904101211
GPR[SSUN]-1659904101211
1045502179
GPR[ESUN]-1659904101449
GPR[SSUN]-1659904101449
GPR[ESUN]-1659904101449
GPR[SSUN]-1659904101449
GPR[ESUN]-1659904101449
GPR[SSUN]-1659904101449
1045502179
GPR[ESUN]-1659904101696
GPR[SSUN]-1659904101696
1187751237
GPR[SPVATF]-1659904101970
GPR[EPVATF]-1659904102506
GPR[SPS]-1659904102506
[1538307] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2693.
GPR[EPS]-1659904103179
GPR[ESUN]-1659904103179
GPR[SSUN]-1659904103179
1045502179
GPR[ESUN]-1659904103423
GPR[SSUN]-1659904103423
1045502179
GPR[ESUN]-1659904103717
GPR[SSUN]-1659904103717
1045502179
GPR[ESUN]-1659904103954
GPR[SSUN]-1659904103954
1045502179
GPR[ESUN]-1659904104191
GPR[SSUN]-1659904104191
1045502179
GPR[SPVATF]-1659904104427
GPR[EPVATF]-1659904104967
GPR[SPS]-1659904104967
GPR[EPS]-1659904114927
GPR[SPVATF]-1659904114927
GPR[EPVATF]-1659904115490
GPR[SPS]-1659904115490
GPR[EPS]-1659904128776
GPR[ESUN]-1659904128776
GPR[SSUN]-1659904128776
1045502179
GPR[ESUN]-1659904129015
GPR[SSUN]-1659904129015
1045502179
GPR[SPVATF]-1659904129255
GPR[EPVATF]-1659904129808
GPR[SPS]-1659904129808
GPR[EPS]-1659904149003
GPR[ESUN]-1659904149003
GPR[SSUN]-1659904149003
1045502179
GPR[SPVATF]-1659904149361
GPR[EPVATF]-1659904149921
GPR[SPS]-1659904149922
[1585724] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:139.
GPR[EPS]-1659904150596
GPR[SPVATF]-1659904150596
GPR[EPVATF]-1659904151168
GPR[SPS]-1659904151168
[1586970] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:139.
GPR[EPS]-1659904151842
GPR[ESUN]-1659904151842
GPR[SSUN]-1659904151842
1045502179
GPR[SPVATF]-1659904152079
GPR[EPVATF]-1659904152659
GPR[SPS]-1659904152659
GPR[EPS]-1659904162705
GPR[ESUN]-1659904162705
GPR[SSUN]-1659904162705
1045502179
GPR[SPVATF]-1659904162975
GPR[EPVATF]-1659904163596
GPR[SPS]-1659904163596
[1599414] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:136.
GPR[EPS]-1659904164286
GPR[ESUN]-1659904164286
GPR[SSUN]-1659904164286
1045502179
GPR[ESUN]-1659904164519
GPR[SSUN]-1659904164519
1045502179
GPR[SPVATF]-1659904164756
GPR[EPVATF]-1659904165362
GPR[SPS]-1659904165362
[1601163] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$CallVisitor:415.
GPR[EPS]-1659904166035
GPR[ESUN]-1659904166035
GPR[SSUN]-1659904166035
1045502179
GPR[SPVATF]-1659904166268
GPR[EPVATF]-1659904166885
GPR[SPS]-1659904166885
[1602697] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:492.
GPR[EPS]-1659904167569
GPR[SPVATF]-1659904167570
GPR[EPVATF]-1659904168218
GPR[SPS]-1659904168218
[1604028] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:492.
GPR[EPS]-1659904168900
GPR[ESUN]-1659904168900
GPR[SSUN]-1659904168900
1045502179
GPR[ESUN]-1659904169139
GPR[SSUN]-1659904169139
1045502179
GPR[SPVATF]-1659904169375
GPR[EPVATF]-1659904170022
GPR[SPS]-1659904170022
[1605847] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:487.
GPR[EPS]-1659904170719
GPR[ESUN]-1659904170719
GPR[SSUN]-1659904170719
1045502179
GPR[ESUN]-1659904170961
GPR[SSUN]-1659904170961
1045502179
GPR[SPVATF]-1659904171197
GPR[EPVATF]-1659904171853
GPR[SPS]-1659904171853
[1607647] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:994.
GPR[EPS]-1659904172519
GPR[ESUN]-1659904172520
GPR[SSUN]-1659904172520
1045502179
GPR[ESUN]-1659904172752
GPR[SSUN]-1659904172752
1045502179
GPR[SPVATF]-1659904172982
GPR[EPVATF]-1659904173674
GPR[SPS]-1659904173674
[1609491] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:287.
GPR[EPS]-1659904174363
GPR[SPVATF]-1659904174363
GPR[EPVATF]-1659904175048
GPR[SPS]-1659904175048
[1610848] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:287.
GPR[EPS]-1659904175720
GPR[ESUN]-1659904175720
GPR[SSUN]-1659904175720
1045502179
GPR[SPVATF]-1659904175958
GPR[EPVATF]-1659904176653
GPR[SPS]-1659904176653
[1612457] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:283.
GPR[EPS]-1659904177329
GPR[SPVATF]-1659904177330
GPR[EPVATF]-1659904178107
GPR[SPS]-1659904178107
[1614749] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:283.
GPR[EPS]-1659904179621
GPR[ESUN]-1659904179621
GPR[SSUN]-1659904179621
1045502179
GPR[ESUN]-1659904179874
GPR[SSUN]-1659904179874
1045502179
GPR[SPVATF]-1659904180105
GPR[EPVATF]-1659904181029
GPR[SPS]-1659904181029
[1617302] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:277.
GPR[EPS]-1659904182174
GPR[SPVATF]-1659904182174
GPR[EPVATF]-1659904182746
GPR[SPS]-1659904182746
[1618549] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:277.
GPR[EPS]-1659904183421
GPR[ESUN]-1659904183421
GPR[SSUN]-1659904183421
1045502179
GPR[ESUN]-1659904183657
GPR[SSUN]-1659904183657
1045502179
GPR[ESUN]-1659904183890
GPR[SSUN]-1659904183890
1045502179
GPR[SPVATF]-1659904184125
GPR[EPVATF]-1659904184673
GPR[SPS]-1659904184673
[1620478] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:272.
GPR[EPS]-1659904185350
GPR[ESUN]-1659904185350
GPR[SSUN]-1659904185350
1299274573
GPR[SPVATF]-1659904185564
GPR[EPVATF]-1659904186103
GPR[SPS]-1659904186103
[1621773] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:530.
GPR[EPS]-1659904186645
GPR[SPVATF]-1659904186645
GPR[EPVATF]-1659904187237
GPR[SPS]-1659904187237
[1622909] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:530.
GPR[EPS]-1659904187781
GPR[ESUN]-1659904187781
GPR[SSUN]-1659904187781
1045502179
GPR[SPVATF]-1659904188020
GPR[EPVATF]-1659904188570
GPR[SPS]-1659904188570
[1624378] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:436.
GPR[EPS]-1659904189250
GPR[SPVATF]-1659904189250
GPR[EPVATF]-1659904189800
GPR[SPS]-1659904189801
[1625592] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:436.
GPR[EPS]-1659904190464
GPR[ESUN]-1659904190464
GPR[SSUN]-1659904190464
1187751237
GPR[ESUN]-1659904190734
GPR[SSUN]-1659904190734
1187751237
GPR[SPVATF]-1659904191003
GPR[EPVATF]-1659904191538
GPR[SPS]-1659904191538
[1627362] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2692.
GPR[EPS]-1659904192234
GPR[ESUN]-1659904192234
GPR[SSUN]-1659904192234
1187751237
GPR[SPVATF]-1659904192508
GPR[EPVATF]-1659904193047
GPR[SPS]-1659904193047
[1628844] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2691.
GPR[EPS]-1659904193716
GPR[SPVATF]-1659904193717
GPR[EPVATF]-1659904194306
GPR[SPS]-1659904194306
[1630107] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2691.
GPR[EPS]-1659904194979
GPR[ESUN]-1659904194979
GPR[SSUN]-1659904194979
1187751237
GPR[SPVATF]-1659904195264
GPR[EPVATF]-1659904195813
GPR[SPS]-1659904195813
[1631624] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2687.
GPR[EPS]-1659904196496
GPR[SPVATF]-1659904196496
GPR[EPVATF]-1659904197045
GPR[SPS]-1659904197045
[1632875] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2687.
GPR[EPS]-1659904197747
GPR[ESUN]-1659904197747
GPR[SSUN]-1659904197747
1187751237
GPR[ESUN]-1659904198018
GPR[SSUN]-1659904198018
1299274573
GPR[ESUN]-1659904198231
GPR[SSUN]-1659904198231
1299274573
GPR[SPVATF]-1659904198446
GPR[EPVATF]-1659904198985
GPR[SPS]-1659904198985
[1634652] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:917.
GPR[EPS]-1659904199524
GPR[ESUN]-1659904199524
GPR[SSUN]-1659904199524
1299274573
GPR[SPVATF]-1659904199746
GPR[EPVATF]-1659904200305
GPR[SPS]-1659904200305
[1635977] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:916.
GPR[EPS]-1659904200849
GPR[ESUN]-1659904200849
GPR[SSUN]-1659904200849
1045502179
GPR[ESUN]-1659904201157
GPR[SSUN]-1659904201157
1045502179
GPR[ESUN]-1659904201402
GPR[SSUN]-1659904201402
1299274573
GPR[ESUN]-1659904201619
GPR[SSUN]-1659904201619
1299274573
GPR[ESUN]-1659904201834
GPR[SSUN]-1659904201834
1299274573
GPR[ESUN]-1659904202052
GPR[SSUN]-1659904202052
1299274573
GPR[SPVATF]-1659904202267
GPR[EPVATF]-1659904202821
GPR[SPS]-1659904202821
[1638497] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:138.
GPR[EPS]-1659904203369
GPR[ESUN]-1659904203369
GPR[SSUN]-1659904203369
1299274573
GPR[ESUN]-1659904203587
GPR[SSUN]-1659904203587
1299274573
GPR[SPVATF]-1659904203802
GPR[EPVATF]-1659904204357
GPR[SPS]-1659904204357
[1640026] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:133.
GPR[EPS]-1659904204898
GPR[SPVATF]-1659904204898
GPR[EPVATF]-1659904205466
GPR[SPS]-1659904205466
[1641147] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:133.
GPR[EPS]-1659904206019
GPR[ESUN]-1659904206019
GPR[SSUN]-1659904206019
1299274573
GPR[ESUN]-1659904206232
GPR[SSUN]-1659904206232
1045502179
GPR[SPVATF]-1659904206463
GPR[EPVATF]-1659904207038
GPR[SPS]-1659904207038
[1642819] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:354.
GPR[EPS]-1659904207691
GPR[SPVATF]-1659904207691
GPR[EPVATF]-1659904208285
GPR[SPS]-1659904208285
[1644197] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:354.
GPR[EPS]-1659904209069
GPR[ESUN]-1659904209069
GPR[SSUN]-1659904209069
1045502179
GPR[SPVATF]-1659904209419
GPR[EPVATF]-1659904210006
GPR[SPS]-1659904210006
[1645798] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$CallVisitor:414.
GPR[EPS]-1659904210670
GPR[SPVATF]-1659904210670
GPR[EPVATF]-1659904211285
GPR[SPS]-1659904211285
[1647080] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$CallVisitor:414.
GPR[EPS]-1659904211952
GPR[ESUN]-1659904211952
GPR[SSUN]-1659904211952
1045502179
GPR[ESUN]-1659904212191
GPR[SSUN]-1659904212191
1045502179
GPR[SPVATF]-1659904212425
GPR[EPVATF]-1659904213032
GPR[SPS]-1659904213032
[1648835] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:349.
GPR[EPS]-1659904213707
GPR[SPVATF]-1659904213707
GPR[EPVATF]-1659904214340
GPR[SPS]-1659904214340
[1650156] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:349.
GPR[EPS]-1659904215029
GPR[ESUN]-1659904215029
GPR[SSUN]-1659904215029
1045502179
GPR[SPVATF]-1659904215268
GPR[EPVATF]-1659904215901
GPR[SPS]-1659904215901
[1651774] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$CallVisitor:411.
GPR[EPS]-1659904216646
GPR[SPVATF]-1659904216646
GPR[EPVATF]-1659904217281
GPR[SPS]-1659904217281
[1653072] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$CallVisitor:411.
GPR[EPS]-1659904217944
GPR[ESUN]-1659904217944
GPR[SSUN]-1659904217944
1045502179
GPR[SPVATF]-1659904218187
GPR[EPVATF]-1659904218869
GPR[SPS]-1659904218869
[1654656] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$CallVisitor:397.
GPR[EPS]-1659904219528
GPR[SPVATF]-1659904219528
GPR[EPVATF]-1659904220190
GPR[SPS]-1659904220190
[1655985] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$CallVisitor:397.
GPR[EPS]-1659904220857
GPR[ESUN]-1659904220857
GPR[SSUN]-1659904220857
1045502179
GPR[ESUN]-1659904221099
GPR[SSUN]-1659904221099
1045502179
GPR[ESUN]-1659904221335
GPR[SSUN]-1659904221335
1045502179
GPR[ESUN]-1659904221586
GPR[SSUN]-1659904221586
1045502179
GPR[ESUN]-1659904221823
GPR[SSUN]-1659904221823
1045502179
GPR[SPVATF]-1659904222055
GPR[EPVATF]-1659904223602
GPR[SPS]-1659904223602
[1659673] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:915.
GPR[EPS]-1659904224545
GPR[ESUN]-1659904224545
GPR[SSUN]-1659904224545
1045502179
GPR[SPVATF]-1659904224848
GPR[EPVATF]-1659904225637
GPR[SPS]-1659904225637
[1661434] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FunctionState:914.
GPR[EPS]-1659904226306
GPR[ESUN]-1659904226306
GPR[SSUN]-1659904226306
1045502179
GPR[ESUN]-1659904226551
GPR[SSUN]-1659904226551
1045502179
GPR[ESUN]-1659904226790
GPR[SSUN]-1659904226790
1045502179
GPR[ESUN]-1659904227020
GPR[SSUN]-1659904227020
1045502179
GPR[SPVATF]-1659904227254
GPR[EPVATF]-1659904227820
GPR[SPS]-1659904227820
[1663649] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:656.
GPR[EPS]-1659904228521
GPR[SPVATF]-1659904228521
GPR[EPVATF]-1659904229078
GPR[SPS]-1659904229078
[1664870] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:656.
GPR[EPS]-1659904229742
GPR[ESUN]-1659904229742
GPR[SSUN]-1659904229742
1045502179
GPR[ESUN]-1659904229990
GPR[SSUN]-1659904229990
1045502179
GPR[SPVATF]-1659904230227
GPR[EPVATF]-1659904230819
GPR[SPS]-1659904230819
[1666641] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:654.
GPR[EPS]-1659904231513
GPR[ESUN]-1659904231513
GPR[SSUN]-1659904231513
1045502179
GPR[SPVATF]-1659904231756
GPR[EPVATF]-1659904232310
GPR[SPS]-1659904232310
[1668118] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:433.
GPR[EPS]-1659904232990
GPR[ESUN]-1659904232990
GPR[SSUN]-1659904232990
1045502179
GPR[SPVATF]-1659904233227
GPR[EPVATF]-1659904233789
GPR[SPS]-1659904233789
[1669585] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:430.
GPR[EPS]-1659904234457
GPR[SPVATF]-1659904234458
GPR[EPVATF]-1659904234990
GPR[SPS]-1659904234990
[1670797] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:430.
GPR[EPS]-1659904235669
GPR[ESUN]-1659904235669
GPR[SSUN]-1659904235669
1045502179
GPR[SPVATF]-1659904235911
GPR[EPVATF]-1659904236454
GPR[SPS]-1659904236454
[1672259] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:429.
GPR[EPS]-1659904237131
GPR[ESUN]-1659904237131
GPR[SSUN]-1659904237131
1045502179
GPR[ESUN]-1659904237372
GPR[SSUN]-1659904237372
1045502179
GPR[SPVATF]-1659904237606
GPR[EPVATF]-1659904238203
GPR[SPS]-1659904238203
[1674034] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:338.
GPR[EPS]-1659904238906
GPR[SPVATF]-1659904238906
GPR[EPVATF]-1659904239446
GPR[SPS]-1659904239446
[1675274] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:338.
GPR[EPS]-1659904240146
GPR[ESUN]-1659904240146
GPR[SSUN]-1659904240146
1045502179
GPR[ESUN]-1659904240383
GPR[SSUN]-1659904240383
1045502179
GPR[ESUN]-1659904240620
GPR[SSUN]-1659904240620
1045502179
GPR[SPVATF]-1659904240878
GPR[EPVATF]-1659904241402
GPR[SPS]-1659904241402
[1677203] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:301.
GPR[EPS]-1659904242075
GPR[SPVATF]-1659904242075
GPR[EPVATF]-1659904242625
GPR[SPS]-1659904242625
[1678430] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:301.
GPR[EPS]-1659904243302
GPR[ESUN]-1659904243302
GPR[SSUN]-1659904243302
1045502179
GPR[SPVATF]-1659904243540
GPR[EPVATF]-1659904244112
GPR[SPS]-1659904244112
[1679980] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:271.
GPR[EPS]-1659904244852
GPR[SPVATF]-1659904244852
GPR[EPVATF]-1659904245498
GPR[SPS]-1659904245498
[1681300] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:271.
GPR[EPS]-1659904246172
GPR[ESUN]-1659904246172
GPR[SSUN]-1659904246172
1045502179
GPR[SPVATF]-1659904246418
GPR[EPVATF]-1659904246984
GPR[SPS]-1659904246984
[1682798] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:265.
GPR[EPS]-1659904247670
GPR[SPVATF]-1659904247671
GPR[EPVATF]-1659904248244
GPR[SPS]-1659904248244
[1684054] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:265.
GPR[EPS]-1659904248926
GPR[ESUN]-1659904248926
GPR[SSUN]-1659904248927
1045502179
GPR[SPVATF]-1659904249173
GPR[EPVATF]-1659904249759
GPR[SPS]-1659904249759
[1685633] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:257.
GPR[EPS]-1659904250505
GPR[SPVATF]-1659904250505
GPR[EPVATF]-1659904251094
GPR[SPS]-1659904251094
[1686901] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:257.
GPR[EPS]-1659904251773
GPR[ESUN]-1659904251773
GPR[SSUN]-1659904251773
1045502179
GPR[SPVATF]-1659904252010
GPR[EPVATF]-1659904252603
GPR[SPS]-1659904252603
[1688477] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:256.
GPR[EPS]-1659904253349
GPR[ESUN]-1659904253349
GPR[SSUN]-1659904253349
1045502179
GPR[SPVATF]-1659904253586
GPR[EPVATF]-1659904254195
GPR[SPS]-1659904254195
[1689992] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:254.
GPR[EPS]-1659904254864
GPR[SPVATF]-1659904254864
GPR[EPVATF]-1659904255501
GPR[SPS]-1659904255501
[1691277] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:254.
GPR[EPS]-1659904256149
GPR[ESUN]-1659904256149
GPR[SSUN]-1659904256149
1045502179
GPR[SPVATF]-1659904256405
GPR[EPVATF]-1659904257034
GPR[SPS]-1659904257034
[1692829] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:250.
GPR[EPS]-1659904257701
GPR[SPVATF]-1659904257701
GPR[EPVATF]-1659904258344
GPR[SPS]-1659904258344
[1694135] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:250.
GPR[EPS]-1659904259007
GPR[ESUN]-1659904259007
GPR[SSUN]-1659904259007
1045502179
GPR[ESUN]-1659904259245
GPR[SSUN]-1659904259245
1045502179
GPR[ESUN]-1659904259478
GPR[SSUN]-1659904259478
1045502179
GPR[SPVATF]-1659904259711
GPR[EPVATF]-1659904260448
GPR[SPS]-1659904260448
[1696259] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:123.
GPR[EPS]-1659904261131
GPR[SPVATF]-1659904261131
GPR[EPVATF]-1659904261799
GPR[SPS]-1659904261799
[1698439] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:123.
GPR[EPS]-1659904263311
GPR[ESUN]-1659904263311
GPR[SSUN]-1659904263311
1045502179
GPR[SPVATF]-1659904263550
GPR[EPVATF]-1659904264694
GPR[SPS]-1659904264694
[1700535] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:122.
GPR[EPS]-1659904265407
GPR[ESUN]-1659904265407
GPR[SSUN]-1659904265407
1045502179
GPR[SPVATF]-1659904265649
GPR[EPVATF]-1659904266352
GPR[SPS]-1659904266352
[1702164] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:120.
GPR[EPS]-1659904267036
GPR[ESUN]-1659904267036
GPR[SSUN]-1659904267036
1045502179
GPR[ESUN]-1659904267271
GPR[SSUN]-1659904267271
1045502179
GPR[SPVATF]-1659904267503
GPR[EPVATF]-1659904268075
GPR[SPS]-1659904268075
[1703887] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:101.
GPR[EPS]-1659904268759
GPR[ESUN]-1659904268759
GPR[SSUN]-1659904268759
1045502179
GPR[SPVATF]-1659904268999
GPR[EPVATF]-1659904269575
GPR[SPS]-1659904269575
[1705489] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:100.
GPR[EPS]-1659904270361
GPR[ESUN]-1659904270361
GPR[SSUN]-1659904270361
1045502179
GPR[SPVATF]-1659904270625
GPR[EPVATF]-1659904271202
GPR[SPS]-1659904271202
[1706992] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:99.
GPR[EPS]-1659904271864
GPR[SPVATF]-1659904271864
GPR[EPVATF]-1659904272476
GPR[SPS]-1659904272476
[1708274] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:99.
GPR[EPS]-1659904273146
GPR[ESUN]-1659904273146
GPR[SSUN]-1659904273146
1045502179
GPR[ESUN]-1659904273387
GPR[SSUN]-1659904273387
1045502179
GPR[ESUN]-1659904273618
GPR[SSUN]-1659904273618
1045502179
GPR[SPVATF]-1659904273859
GPR[EPVATF]-1659904274416
GPR[SPS]-1659904274416
[1710242] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$CallVisitor:390.
GPR[EPS]-1659904275114
GPR[ESUN]-1659904275114
GPR[SSUN]-1659904275114
1045502179
GPR[SPVATF]-1659904275352
GPR[EPVATF]-1659904275897
GPR[SPS]-1659904275897
[1711735] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:553.
GPR[EPS]-1659904276607
GPR[ESUN]-1659904276607
GPR[SSUN]-1659904276607
1045502179
GPR[SPVATF]-1659904276857
GPR[EPVATF]-1659904277406
GPR[SPS]-1659904277406
[1713257] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:552.
GPR[EPS]-1659904278129
GPR[SPVATF]-1659904278129
GPR[EPVATF]-1659904278674
GPR[SPS]-1659904278674
[1714506] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:552.
GPR[EPS]-1659904279378
GPR[ESUN]-1659904279378
GPR[SSUN]-1659904279378
1045502179
GPR[SPVATF]-1659904279621
GPR[EPVATF]-1659904280189
GPR[SPS]-1659904280189
[1715988] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:550.
GPR[EPS]-1659904280860
GPR[ESUN]-1659904280860
GPR[SSUN]-1659904280860
1045502179
GPR[ESUN]-1659904281102
GPR[SSUN]-1659904281102
1045502179
GPR[SPVATF]-1659904281334
GPR[EPVATF]-1659904281886
GPR[SPS]-1659904281886
[1717715] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:480.
GPR[EPS]-1659904282587
GPR[ESUN]-1659904282587
GPR[SSUN]-1659904282587
1045502179
GPR[SPVATF]-1659904282828
GPR[EPVATF]-1659904283399
GPR[SPS]-1659904283399
[1719240] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:479.
GPR[EPS]-1659904284112
GPR[SPVATF]-1659904284113
GPR[EPVATF]-1659904284741
GPR[SPS]-1659904284741
[1720563] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:479.
GPR[EPS]-1659904285435
GPR[ESUN]-1659904285435
GPR[SSUN]-1659904285435
1045502179
GPR[SPVATF]-1659904285679
GPR[EPVATF]-1659904286262
GPR[SPS]-1659904286262
[1722079] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidatesReferences:478.
GPR[EPS]-1659904286951
GPR[ESUN]-1659904286951
GPR[SSUN]-1659904286951
-718432441
GPR[SPVATF]-1659904287164
GPR[EPVATF]-1659904287760
GPR[SPS]-1659904287760
[1723580] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:543.
GPR[EPS]-1659904288452
GPR[ESUN]-1659904288452
GPR[SSUN]-1659904288452
-718432441
GPR[SPVATF]-1659904288668
GPR[EPVATF]-1659904289249
GPR[SPS]-1659904289249
[1725069] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:542.
GPR[EPS]-1659904289941
GPR[ESUN]-1659904289941
GPR[SSUN]-1659904289941
1045502179
GPR[SPVATF]-1659904290179
GPR[EPVATF]-1659904290776
GPR[SPS]-1659904290776
[1726588] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:220.
GPR[EPS]-1659904291460
GPR[SPVATF]-1659904291460
GPR[EPVATF]-1659904292060
GPR[SPS]-1659904292060
[1727924] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:220.
GPR[EPS]-1659904292796
GPR[ESUN]-1659904292796
GPR[SSUN]-1659904292796
1299274573
GPR[SPVATF]-1659904293009
GPR[EPVATF]-1659904293614
GPR[SPS]-1659904293614
[1729301] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:528.
GPR[EPS]-1659904294173
GPR[SPVATF]-1659904294173
GPR[EPVATF]-1659904294805
GPR[SPS]-1659904294805
[1730517] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:528.
GPR[EPS]-1659904295389
GPR[ESUN]-1659904295389
GPR[SSUN]-1659904295389
1496027449
GPR[ESUN]-1659904295616
GPR[SSUN]-1659904295616
1496027449
GPR[ESUN]-1659904295845
GPR[SSUN]-1659904295845
1496027449
GPR[SPVATF]-1659904296070
GPR[EPVATF]-1659904296715
GPR[SPS]-1659904296715
[1732375] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodingConventions$DefaultCodingConvention:351.
GPR[EPS]-1659904297247
GPR[ESUN]-1659904297247
GPR[SSUN]-1659904297247
1045502179
GPR[SPVATF]-1659904297493
GPR[EPVATF]-1659904298134
GPR[SPS]-1659904298134
[1733930] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:228.
GPR[EPS]-1659904298802
GPR[SPVATF]-1659904298802
GPR[EPVATF]-1659904299476
GPR[SPS]-1659904299476
[1735357] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:228.
GPR[EPS]-1659904300229
GPR[ESUN]-1659904300229
GPR[SSUN]-1659904300229
1045502179
GPR[SPVATF]-1659904300467
GPR[EPVATF]-1659904301148
GPR[SPS]-1659904301148
[1736943] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:218.
GPR[EPS]-1659904301815
GPR[SPVATF]-1659904301815
GPR[EPVATF]-1659904302485
GPR[SPS]-1659904302485
[1738301] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:218.
GPR[EPS]-1659904303173
GPR[ESUN]-1659904303173
GPR[SSUN]-1659904303173
1045502179
GPR[ESUN]-1659904303410
GPR[SSUN]-1659904303410
GPR[ESUN]-1659904303410
GPR[SSUN]-1659904303410
GPR[ESUN]-1659904303410
GPR[SSUN]-1659904303410
1852376448
GPR[SPVATF]-1659904303628
GPR[EPVATF]-1659904305221
GPR[SPS]-1659904305221
[1741069] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:184.
GPR[EPS]-1659904305941
GPR[ESUN]-1659904305941
GPR[SSUN]-1659904305941
1045502179
GPR[ESUN]-1659904306182
GPR[SSUN]-1659904306182
1045502179
GPR[SPVATF]-1659904306425
GPR[EPVATF]-1659904307155
GPR[SPS]-1659904307155
[1742952] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:181.
GPR[EPS]-1659904307824
GPR[ESUN]-1659904307824
GPR[SSUN]-1659904307824
1299274573
GPR[SPVATF]-1659904308038
GPR[EPVATF]-1659904308593
GPR[SPS]-1659904308593
[1744275] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:525.
GPR[EPS]-1659904309147
GPR[SPVATF]-1659904309147
GPR[EPVATF]-1659904309726
GPR[SPS]-1659904309726
[1745393] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:525.
GPR[EPS]-1659904310265
GPR[ESUN]-1659904310265
GPR[SSUN]-1659904310265
1299274573
GPR[ESUN]-1659904310480
GPR[SSUN]-1659904310480
1045502179
GPR[SPVATF]-1659904310725
GPR[EPVATF]-1659904311285
GPR[SPS]-1659904311285
[1747084] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:178.
GPR[EPS]-1659904311956
GPR[ESUN]-1659904311956
GPR[SSUN]-1659904311956
1045502179
GPR[ESUN]-1659904312198
GPR[SSUN]-1659904312198
1045502179
GPR[SPVATF]-1659904312489
GPR[EPVATF]-1659904313085
GPR[SPS]-1659904313085
[1748986] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:213.
GPR[EPS]-1659904313858
GPR[ESUN]-1659904313858
GPR[SSUN]-1659904313858
1045502179
GPR[SPVATF]-1659904314106
GPR[EPVATF]-1659904314653
GPR[SPS]-1659904314653
[1750470] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:176.
GPR[EPS]-1659904315342
GPR[SPVATF]-1659904315342
GPR[EPVATF]-1659904315918
GPR[SPS]-1659904315918
[1751733] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:176.
GPR[EPS]-1659904316605
GPR[ESUN]-1659904316605
GPR[SSUN]-1659904316605
1045502179
GPR[SPVATF]-1659904316843
GPR[EPVATF]-1659904317380
GPR[SPS]-1659904317380
[1753191] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:171.
GPR[EPS]-1659904318063
GPR[ESUN]-1659904318063
GPR[SSUN]-1659904318063
1045502179
GPR[SPVATF]-1659904318298
GPR[EPVATF]-1659904318845
GPR[SPS]-1659904318845
[1754651] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:169.
GPR[EPS]-1659904319523
GPR[ESUN]-1659904319523
GPR[SSUN]-1659904319523
-1345859678
GPR[SPVATF]-1659904319812
GPR[EPVATF]-1659904320400
GPR[SPS]-1659904320400
[1756134] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:232.
GPR[EPS]-1659904321006
GPR[ESUN]-1659904321006
GPR[SSUN]-1659904321006
-1345859678
GPR[SPVATF]-1659904321250
GPR[EPVATF]-1659904321832
GPR[SPS]-1659904321832
[1757566] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:231.
GPR[EPS]-1659904322438
GPR[ESUN]-1659904322438
GPR[SSUN]-1659904322438
-1345859678
GPR[SPVATF]-1659904322746
GPR[EPVATF]-1659904323297
GPR[SPS]-1659904323297
[1759029] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:230.
GPR[EPS]-1659904323901
GPR[ESUN]-1659904323901
GPR[SSUN]-1659904323901
-1345859678
GPR[SPVATF]-1659904324141
GPR[EPVATF]-1659904324697
GPR[SPS]-1659904324697
[1760411] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:229.
GPR[EPS]-1659904325283
GPR[ESUN]-1659904325283
GPR[SSUN]-1659904325283
-1345859678
GPR[ESUN]-1659904325519
GPR[SSUN]-1659904325519
GPR[ESUN]-1659904325519
GPR[SSUN]-1659904325519
GPR[ESUN]-1659904325519
GPR[SSUN]-1659904325519
GPR[ESUN]-1659904325519
GPR[SSUN]-1659904325519
-718432441
GPR[SPVATF]-1659904325721
GPR[EPVATF]-1659904326290
GPR[SPS]-1659904326290
[1762096] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:835.
GPR[EPS]-1659904326968
GPR[ESUN]-1659904326968
GPR[SSUN]-1659904326968
-718432441
GPR[SPVATF]-1659904327183
GPR[EPVATF]-1659904327823
GPR[SPS]-1659904327823
[1763619] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:546.
GPR[EPS]-1659904328491
GPR[SPVATF]-1659904328491
GPR[EPVATF]-1659904329077
GPR[SPS]-1659904329077
[1764880] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:546.
GPR[EPS]-1659904329752
GPR[ESUN]-1659904329752
GPR[SSUN]-1659904329752
-718432441
GPR[SPVATF]-1659904330090
GPR[EPVATF]-1659904330685
GPR[SPS]-1659904330685
[1766502] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:535.
GPR[EPS]-1659904331374
GPR[SPVATF]-1659904331375
GPR[EPVATF]-1659904331989
GPR[SPS]-1659904331989
[1767787] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:535.
GPR[EPS]-1659904332659
GPR[ESUN]-1659904332659
GPR[SSUN]-1659904332659
-718432441
GPR[SPVATF]-1659904332872
GPR[EPVATF]-1659904333491
GPR[SPS]-1659904333491
[1769302] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:533.
GPR[EPS]-1659904334174
GPR[ESUN]-1659904334174
GPR[SSUN]-1659904334174
-718432441
GPR[SPVATF]-1659904334394
GPR[EPVATF]-1659904335007
GPR[SPS]-1659904335007
[1770891] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:532.
GPR[EPS]-1659904335763
GPR[ESUN]-1659904335763
GPR[SSUN]-1659904335763
-718432441
GPR[SPVATF]-1659904335975
GPR[EPVATF]-1659904336587
GPR[SPS]-1659904336587
[1772388] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:531.
GPR[EPS]-1659904337260
GPR[ESUN]-1659904337260
GPR[SSUN]-1659904337260
-718432441
GPR[SPVATF]-1659904337472
GPR[EPVATF]-1659904338109
GPR[SPS]-1659904338109
[1773923] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:527.
GPR[EPS]-1659904338795
GPR[SPVATF]-1659904338795
GPR[EPVATF]-1659904339433
GPR[SPS]-1659904339433
[1775234] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:527.
GPR[EPS]-1659904340106
GPR[ESUN]-1659904340106
GPR[SSUN]-1659904340106
-718432441
GPR[ESUN]-1659904340321
GPR[SSUN]-1659904340321
-718432441
GPR[ESUN]-1659904340531
GPR[SSUN]-1659904340531
-718432441
GPR[SPVATF]-1659904340742
GPR[EPVATF]-1659904341395
GPR[SPS]-1659904341395
[1777196] ERROR ConstraintModelBuilder - Unable to compile the change: 
class CodeGenerator {
    private final java.util.Map<java.lang.String, java.lang.String> ESCAPED_JS_STRINGS = com.google.common.collect.Maps.newHashMap();

    private static final char[] HEX_CHARS = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };

    private final com.google.javascript.jscomp.CodeConsumer cc;

    private final java.nio.charset.CharsetEncoder outputCharsetEncoder;

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer, java.nio.charset.Charset outputCharset) {
        cc = consumer;
        if ((outputCharset == null) || (outputCharset == com.google.common.base.Charsets.US_ASCII)) {
            this.outputCharsetEncoder = null;
        } else {
            this.outputCharsetEncoder = outputCharset.newEncoder();
        }
    }

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer) {
        this(consumer, null);
    }

    public void tagAsStrict() {
        add("'use strict';");
    }

    void add(java.lang.String str) {
        cc.add(str);
    }

    private void addIdentifier(java.lang.String identifier) {
        cc.addIdentifier(com.google.javascript.jscomp.CodeGenerator.identifierEscape(identifier));
    }

    void add(com.google.javascript.rhino.Node n) {
        add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void add(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if (!cc.continueProcessing()) {
            return;
        }
        int type = n.getType();
        java.lang.String opstr = com.google.javascript.jscomp.NodeUtil.opToStr(type);
        int childCount = n.getChildCount();
        com.google.javascript.rhino.Node first = n.getFirstChild();
        com.google.javascript.rhino.Node last = n.getLastChild();
        if ((opstr != null) && (first != last)) {
            com.google.common.base.Preconditions.checkState(childCount == 2, "Bad binary operator \"%s\": expected 2 arguments but got %s", opstr, childCount);
            int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
            com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);
            if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else {
                unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);
            }
            return;
        }
        cc.startSourceMapping(n);
        switch (type) {
            case com.google.javascript.rhino.Token.TRY :
                {
                    com.google.common.base.Preconditions.checkState(first.getNext().isBlock() && (!first.getNext().hasMoreThanOneChild()));
                    com.google.common.base.Preconditions.checkState((childCount >= 2) && (childCount <= 3));
                    add("try");
                    add(first, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    com.google.javascript.rhino.Node catchblock = first.getNext().getFirstChild();
                    if (catchblock != null) {
                        add(catchblock);
                    }
                    if (childCount == 3) {
                        add("finally");
                        add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CATCH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("catch(");
                add(first);
                add(")");
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.THROW :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("throw");
                add(first);
                cc.endStatement(true);
                break;
            case com.google.javascript.rhino.Token.RETURN :
                add("return");
                if (childCount == 1) {
                    add(first);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 0);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.VAR :
                if (first != null) {
                    add("var ");
                    addList(first, false, getContextForNoInOperator(context));
                }
                break;
            case com.google.javascript.rhino.Token.LABEL_NAME :
                com.google.common.base.Preconditions.checkState(!n.getString().isEmpty());
                addIdentifier(n.getString());
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ((first == null) || first.isEmpty()) {
                    addIdentifier(n.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    addIdentifier(n.getString());
                    cc.addOp("=", true);
                    if (first.isComma()) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.ASSIGN), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    } else {
                        addExpr(first, 0, getContextForNoInOperator(context));
                    }
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                add("[");
                addArrayList(first);
                add("]");
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                add("(");
                addList(first);
                add(")");
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                unrollBinaryOperator(n, com.google.javascript.rhino.Token.COMMA, ",", context, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, 0, 0);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addNumber(n.getDouble());
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.NEG :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    if (n.getFirstChild().isNumber()) {
                        cc.addNumber(-n.getFirstChild().getDouble());
                    } else {
                        cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
                    addExpr(first, p + 1, context);
                    cc.addOp("?", true);
                    addExpr(first.getNext(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    cc.addOp(":", true);
                    addExpr(last, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.REGEXP :
                if ((!first.isString()) || (!last.isString())) {
                    throw new java.lang.Error("Expected children to be strings");
                }
                java.lang.String regexp = com.google.javascript.jscomp.CodeGenerator.regexpEscape(first.getString(), outputCharsetEncoder);
                if (childCount == 2) {
                    add(regexp + last.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    add(regexp);
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                if (n.getClass() != com.google.javascript.rhino.Node.class) {
                    throw new java.lang.Error("Unexpected Node subclass.");
                }
                com.google.common.base.Preconditions.checkState(childCount == 3);
                boolean funcNeedsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                if (funcNeedsParens) {
                    add("(");
                }
                add("function");
                add(first);
                add(first.getNext());
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                cc.endFunction(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                if (funcNeedsParens) {
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                com.google.common.base.Preconditions.checkState(n.getParent().isObjectLit());
                com.google.common.base.Preconditions.checkState(childCount == 1);
                com.google.common.base.Preconditions.checkState(first.isFunction());
                com.google.common.base.Preconditions.checkState(first.getFirstChild().getString().isEmpty());
                if (type == com.google.javascript.rhino.Token.GETTER_DEF) {
                    com.google.common.base.Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());
                    add("get ");
                } else {
                    com.google.common.base.Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
                    add("set ");
                }
                java.lang.String name = n.getString();
                com.google.javascript.rhino.Node fn = first;
                com.google.javascript.rhino.Node parameters = fn.getChildAtIndex(1);
                com.google.javascript.rhino.Node body = fn.getLastChild();
                if (((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {
                    add(name);
                } else {
                    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);
                    if (!java.lang.Double.isNaN(d)) {
                        cc.addNumber(d);
                    } else {
                        addJsString(n);
                    }
                }
                add(parameters);
                add(body, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                {
                    if (n.getClass() != com.google.javascript.rhino.Node.class) {
                        throw new java.lang.Error("Unexpected Node subclass.");
                    }
                    boolean preserveBlock = context == com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
                    if (preserveBlock) {
                        cc.beginBlock();
                    }
                    boolean preferLineBreaks = (type == com.google.javascript.rhino.Token.SCRIPT) || ((((type == com.google.javascript.rhino.Token.BLOCK) && (!preserveBlock)) && (n.getParent() != null)) && n.getParent().isScript());
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        add(c, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                        if (c.isVar()) {
                            cc.endStatement();
                        }
                        if (c.isFunction()) {
                            cc.maybeLineBreak();
                        }
                        if (preferLineBreaks) {
                            cc.notePreferredLineBreak();
                        }
                    }
                    if (preserveBlock) {
                        cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.FOR :
                if (childCount == 4) {
                    add("for(");
                    if (first.isVar()) {
                        add(first, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    } else {
                        addExpr(first, 0, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    }
                    add(";");
                    add(first.getNext());
                    add(";");
                    add(first.getNext().getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    add("for(");
                    add(first);
                    add("in");
                    add(first.getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                }
                break;
            case com.google.javascript.rhino.Token.DO :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("do");
                addNonEmptyStatement(first, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                add("while(");
                add(last);
                add(")");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.WHILE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("while(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.EMPTY :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETPROP: expected 2 children, but got %s", childCount);
                    com.google.common.base.Preconditions.checkState(last.isString(), "Bad GETPROP: RHS should be STRING");
                    boolean needsParens = first.isNumber();
                    if (needsParens) {
                        add("(");
                    }
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                    if (needsParens) {
                        add(")");
                    }
                    add(".");
                    addIdentifier(last.getString());
                    break;
                }
            case com.google.javascript.rhino.Token.GETELEM :
                com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETELEM: expected 2 children but got %s", childCount);
                addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                add("[");
                add(first.getNext());
                add("]");
                break;
            case com.google.javascript.rhino.Token.WITH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("with(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    java.lang.String o = (type == com.google.javascript.rhino.Token.INC) ? "++" : "--";
                    int postProp = n.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
                    if (postProp != 0) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                        cc.addOp(o, false);
                    } else {
                        cc.addOp(o, false);
                        add(first);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CALL :
                if (isIndirectEval(first) || (n.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) && com.google.javascript.jscomp.NodeUtil.isGet(first))) {
                    add("(0,");
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.COMMA), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    add(")");
                } else {
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                }
                add("(");
                addList(first.getNext());
                add(")");
                break;
            case com.google.javascript.rhino.Token.IF :
                boolean hasElse = childCount == 3;
                boolean ambiguousElseClause = (context == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE) && (!hasElse);
                if (ambiguousElseClause) {
                    cc.beginBlock();
                }
                add("if(");
                add(first);
                add(")");
                if (hasElse) {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE, false);
                    add("else");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                    com.google.common.base.Preconditions.checkState(childCount == 2);
                }
                if (ambiguousElseClause) {
                    cc.endBlock();
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("null");
                break;
            case com.google.javascript.rhino.Token.THIS :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("this");
                break;
            case com.google.javascript.rhino.Token.FALSE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("false");
                break;
            case com.google.javascript.rhino.Token.TRUE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("true");
                break;
            case com.google.javascript.rhino.Token.CONTINUE :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("continue");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.DEBUGGER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("debugger");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.BREAK :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("break");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first, com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR);
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.NEW :
                add("new ");
                int precedence = com.google.javascript.jscomp.NodeUtil.precedence(type);
                if (com.google.javascript.jscomp.NodeUtil.containsType(first, com.google.javascript.rhino.Token.CALL, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION)) {
                    precedence = com.google.javascript.jscomp.NodeUtil.precedence(first.getType()) + 1;
                }
                addExpr(first, precedence, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                com.google.javascript.rhino.Node next = first.getNext();
                if (next != null) {
                    add("(");
                    addList(next);
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.STRING_KEY :
                com.google.common.base.Preconditions.checkState(childCount == 1, "Object lit key must have 1 child");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.STRING :
                com.google.common.base.Preconditions.checkState(childCount == 0, "A string may not have children");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("delete ");
                add(first);
                break;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                {
                    boolean needsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                    if (needsParens) {
                        add("(");
                    }
                    add("{");
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        if (c != first) {
                            cc.listSeparator();
                        }
                        if (c.isGetterDef() || c.isSetterDef()) {
                            add(c);
                        } else {
                            com.google.common.base.Preconditions.checkState(c.isStringKey());
                            java.lang.String key = c.getString();
                            if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {
                                add(key);
                            } else {
                                double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);
                                if (!java.lang.Double.isNaN(d)) {
                                    cc.addNumber(d);
                                } else {
                                    addExpr(c, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                                }
                            }
                            add(":");
                            addExpr(c.getFirstChild(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                        }
                    }
                    add("}");
                    if (needsParens) {
                        add(")");
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.SWITCH :
                add("switch(");
                add(first);
                add(")");
                cc.beginBlock();
                addAllSiblings(first.getNext());
                cc.endBlock(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("case ");
                add(first);
                addCaseBody(last);
                break;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("default");
                addCaseBody(first);
                break;
            case com.google.javascript.rhino.Token.LABEL :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                if (!first.isLabelName()) {
                    throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                }
                add(first);
                add(":");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), true);
                break;
            default :
                throw new java.lang.Error((("Unknown type " + type) + "\n") + n.toStringTree());
        }
        cc.endSourceMapping(n);
    }

    private void unrollBinaryOperator(com.google.javascript.rhino.Node n, int op, java.lang.String opStr, com.google.javascript.jscomp.CodeGenerator.Context context, com.google.javascript.jscomp.CodeGenerator.Context rhsContext, int leftPrecedence, int rightPrecedence) {
        com.google.javascript.rhino.Node firstNonOperator = n.getFirstChild();
        while (firstNonOperator.getType() == op) {
            firstNonOperator = firstNonOperator.getFirstChild();
        } 
        addExpr(firstNonOperator, leftPrecedence, context);
        com.google.javascript.rhino.Node current = firstNonOperator;
        do {
            current = current.getParent();
            cc.addOp(opStr, true);
            addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);
        } while (current != n );
    }

    static boolean isSimpleNumber(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if ((c < '0') || (c > '9')) {
                return false;
            }
        }
        return (len > 0) && (s.charAt(0) != '0');
    }

    static double getSimpleNumber(java.lang.String s) {
        if (com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(s)) {
            try {
                long l = java.lang.Long.parseLong(s);
                if (l < com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                    return l;
                }
            } catch (java.lang.NumberFormatException e) {
            }
        }
        return java.lang.Double.NaN;
    }

    private boolean isIndirectEval(com.google.javascript.rhino.Node n) {
        return (n.isName() && "eval".equals(n.getString())) && (!n.getBooleanProp(com.google.javascript.rhino.Node.DIRECT_EVAL));
    }

    private void addNonEmptyStatement(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context, boolean allowNonBlockChild) {
        com.google.javascript.rhino.Node nodeToProcess = n;
        if ((!allowNonBlockChild) && (!n.isBlock())) {
            throw new java.lang.Error("Missing BLOCK child.");
        }
        if (n.isBlock()) {
            int count = com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2);
            if (count == 0) {
                if (cc.shouldPreserveExtraBlocks()) {
                    cc.beginBlock();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                } else {
                    cc.endStatement(true);
                }
                return;
            }
            if (count == 1) {
                com.google.javascript.rhino.Node firstAndOnlyChild = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n);
                boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();
                if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {
                    cc.beginBlock();
                    add(firstAndOnlyChild, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                    cc.maybeLineBreak();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    return;
                } else {
                    nodeToProcess = firstAndOnlyChild;
                }
            }
            if (count > 1) {
                context = com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
            }
        }
        if (nodeToProcess.isEmpty()) {
            cc.endStatement(true);
        } else {
            add(nodeToProcess, context);
            if (nodeToProcess.isVar()) {
                cc.endStatement();
            }
        }
    }

    private boolean isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node n) {
        if (n.isLabel()) {
            com.google.javascript.rhino.Node labeledStatement = n.getLastChild();
            if (!labeledStatement.isBlock()) {
                return isOneExactlyFunctionOrDo(labeledStatement);
            } else if (com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2) == 1) {
                return isOneExactlyFunctionOrDo(com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n));
            } else {
                return false;
            }
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(286).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(286).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(286).collectInput("com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",com.google.javascript.jscomp.CodeGenerator.HEX_CHARS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(286).collectInput("com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS",com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(286).collectInput("com.google.javascript.jscomp.CodeGenerator.this.cc",com.google.javascript.jscomp.CodeGenerator.this.cc);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(286).collectInput("com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder",com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(286).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(286).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(286).collectionEnds();
            }
            if (runtimeAngelicValue)
                return n.isFunction() || n.isDo();

        }
    }

    private void addExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if ((com.google.javascript.jscomp.NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE) && n.isIn())) {
            add("(");
            add(n, clearContextForNoInOperator(context));
            add(")");
        } else {
            add(n, context);
        }
    }

    void addList(com.google.javascript.rhino.Node firstInList) {
        addList(firstInList, true, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument) {
        addList(firstInList, isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context lhsContext) {
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            boolean isFirst = n == firstInList;
            if (isFirst) {
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
            } else {
                cc.listSeparator();
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            }
        }
    }

    void addArrayList(com.google.javascript.rhino.Node firstInList) {
        boolean lastWasEmpty = false;
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            if (n != firstInList) {
                cc.listSeparator();
            }
            addExpr(n, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            lastWasEmpty = n.isEmpty();
        }
        if (lastWasEmpty) {
            cc.listSeparator();
        }
    }

    void addCaseBody(com.google.javascript.rhino.Node caseBody) {
        cc.beginCaseBody();
        add(caseBody);
        cc.endCaseBody();
    }

    void addAllSiblings(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n; c != null; c = c.getNext()) {
            add(c);
        }
    }

    private void addJsString(com.google.javascript.rhino.Node n) {
        java.lang.String s = n.getString();
        boolean useSlashV = n.getBooleanProp(com.google.javascript.rhino.Node.SLASH_V);
        if (useSlashV) {
            add(jsString(n.getString(), useSlashV));
        } else {
            java.lang.String cached = ESCAPED_JS_STRINGS.get(s);
            if (cached == null) {
                cached = jsString(n.getString(), useSlashV);
                ESCAPED_JS_STRINGS.put(s, cached);
            }
            add(cached);
        }
    }

    private java.lang.String jsString(java.lang.String s, boolean useSlashV) {
        int singleq = 0;
        int doubleq = 0;
        for (int i = 0; i < s.length(); i++) {
            switch (s.charAt(i)) {
                case '"' :
                    doubleq++;
                    break;
                case '\'' :
                    singleq++;
                    break;
            }
        }
        java.lang.String doublequote;
        java.lang.String singlequote;
        char quote;
        if (singleq < doubleq) {
            quote = '\'';
            doublequote = "\"";
            singlequote = "\\\'";
        } else {
            quote = '\"';
            doublequote = "\\\"";
            singlequote = "\'";
        }
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder, useSlashV);
    }

    static java.lang.String regexpEscape(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '/', "\"", "'", "\\", outputCharsetEncoder, false);
    }

    static java.lang.String escapeToDoubleQuotedJsString(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '"', "\\\"", "\'", "\\\\", null, false);
    }

    static java.lang.String regexpEscape(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.regexpEscape(s, null);
    }

    private static java.lang.String strEscape(java.lang.String s, char quote, java.lang.String doublequoteEscape, java.lang.String singlequoteEscape, java.lang.String backslashEscape, java.nio.charset.CharsetEncoder outputCharsetEncoder, boolean useSlashV) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder(s.length() + 2);
        sb.append(quote);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch (c) {
                case '\u0000' :
                    sb.append("\\x00");
                    break;
                case '\u000b' :
                    if (useSlashV) {
                        sb.append("\\v");
                    } else {
                        sb.append("\\x0B");
                    }
                    break;
                case '\b' :
                    sb.append("\\b");
                    break;
                case '\f' :
                    sb.append("\\f");
                    break;
                case '\n' :
                    sb.append("\\n");
                    break;
                case '\r' :
                    sb.append("\\r");
                    break;
                case '\t' :
                    sb.append("\\t");
                    break;
                case '\\' :
                    sb.append(backslashEscape);
                    break;
                case '\"' :
                    sb.append(doublequoteEscape);
                    break;
                case '\'' :
                    sb.append(singlequoteEscape);
                    break;
                case ' ' :
                    sb.append("\\u2028");
                    break;
                case ' ' :
                    sb.append("\\u2029");
                    break;
                case '>' :
                    if ((i >= 2) && (((s.charAt(i - 1) == '-') && (s.charAt(i - 2) == '-')) || ((s.charAt(i - 1) == ']') && (s.charAt(i - 2) == ']')))) {
                        sb.append("\\>");
                    } else {
                        sb.append(c);
                    }
                    break;
                case '<' :
                    final java.lang.String END_SCRIPT = "/script";
                    final java.lang.String START_COMMENT = "!--";
                    if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {
                        sb.append("<\\");
                    } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {
                        sb.append("<\\");
                    } else {
                        sb.append(c);
                    }
                    break;
                default :
                    if (outputCharsetEncoder != null) {
                        if (outputCharsetEncoder.canEncode(c)) {
                            sb.append(c);
                        } else {
                            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                        }
                    } else if ((c > 0x1f) && (c < 0x7f)) {
                        sb.append(c);
                    } else {
                        com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                    }
            }
        }
        sb.append(quote);
        return sb.toString();
    }

    static java.lang.String identifierEscape(java.lang.String s) {
        if (com.google.javascript.jscomp.NodeUtil.isLatin(s)) {
            return s;
        }
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if ((c > 0x1f) && (c < 0x7f)) {
                sb.append(c);
            } else {
                com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
            }
        }
        return sb.toString();
    }

    private static int getNonEmptyChildCount(com.google.javascript.rhino.Node n, int maxCount) {
        int i = 0;
        com.google.javascript.rhino.Node c = n.getFirstChild();
        for (; (c != null) && (i < maxCount); c = c.getNext()) {
            if (c.isBlock()) {
                i += com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(c, maxCount - i);
            } else if (!c.isEmpty()) {
                i++;
            }
        }
        return i;
    }

    private static com.google.javascript.rhino.Node getFirstNonEmptyChild(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.isBlock()) {
                com.google.javascript.rhino.Node result = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(c);
                if (result != null) {
                    return result;
                }
            } else if (!c.isEmpty()) {
                return c;
            }
        }
        return null;
    }

    enum Context {

        STATEMENT,
        BEFORE_DANGLING_ELSE,
        START_OF_EXPR,
        PRESERVE_BLOCK,
        IN_FOR_INIT_CLAUSE,
        OTHER;}

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNonEmptyExpression(com.google.javascript.jscomp.CodeGenerator.Context currentContext) {
        return currentContext == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE ? com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context clearContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.OTHER : context;
    }

    private static void appendHexJavaScriptRepresentation(java.lang.StringBuilder sb, char c) {
        try {
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(c, sb);
        } catch (java.io.IOException ex) {
            throw new java.lang.RuntimeException(ex);
        }
    }

    private static void appendHexJavaScriptRepresentation(int codePoint, java.lang.Appendable out) throws java.io.IOException {
        if (java.lang.Character.isSupplementaryCodePoint(codePoint)) {
            char[] surrogates = java.lang.Character.toChars(codePoint);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[0], out);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[1], out);
            return;
        }
        out.append("\\u").append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 12) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 8) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 4) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[codePoint & 0xf]);
    }
}
[1777197] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659904342069
GPR[SSUN]-1659904342069
-718432441
GPR[SPVATF]-1659904342369
GPR[EPVATF]-1659904343027
GPR[SPS]-1659904343027
[1778816] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:862.
GPR[EPS]-1659904343688
GPR[ESUN]-1659904343688
GPR[SSUN]-1659904343688
-718432441
GPR[SPVATF]-1659904343899
GPR[EPVATF]-1659904344562
GPR[SPS]-1659904344562
[1780353] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1153.
GPR[EPS]-1659904345226
GPR[ESUN]-1659904345226
GPR[SSUN]-1659904345226
-718432441
GPR[SPVATF]-1659904345439
GPR[EPVATF]-1659904347253
GPR[SPS]-1659904347253
[1783151] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1147.
GPR[EPS]-1659904348023
GPR[SPVATF]-1659904348024
GPR[EPVATF]-1659904349254
GPR[SPS]-1659904349254
[1785055] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1147.
GPR[EPS]-1659904349927
GPR[ESUN]-1659904349927
GPR[SSUN]-1659904349927
-718432441
GPR[SPVATF]-1659904350140
GPR[EPVATF]-1659904350719
GPR[SPS]-1659904350719
[1786531] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1146.
GPR[EPS]-1659904351403
GPR[ESUN]-1659904351403
GPR[SSUN]-1659904351403
-718432441
GPR[SPVATF]-1659904351648
GPR[EPVATF]-1659904352226
GPR[SPS]-1659904352226
[1788033] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:827.
GPR[EPS]-1659904352905
GPR[SPVATF]-1659904352906
GPR[EPVATF]-1659904353472
GPR[SPS]-1659904353472
[1789276] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:827.
GPR[EPS]-1659904354148
GPR[ESUN]-1659904354148
GPR[SSUN]-1659904354148
-718432441
GPR[ESUN]-1659904354357
GPR[SSUN]-1659904354357
-718432441
GPR[ESUN]-1659904354563
GPR[SSUN]-1659904354563
-1117079791
GPR[ESUN]-1659904354790
GPR[SSUN]-1659904354790
-1117079791
GPR[SPVATF]-1659904355011
GPR[EPVATF]-1659904355570
GPR[SPS]-1659904355570
[1791170] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:468.
GPR[EPS]-1659904356042
GPR[SPVATF]-1659904356042
GPR[EPVATF]-1659904356597
GPR[SPS]-1659904356597
[1792209] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:468.
GPR[EPS]-1659904357081
GPR[ESUN]-1659904357081
GPR[SSUN]-1659904357081
-1117079791
GPR[ESUN]-1659904357274
GPR[SSUN]-1659904357274
-1117079791
GPR[SPVATF]-1659904357463
GPR[EPVATF]-1659904358056
GPR[SPS]-1659904358056
[1793650] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:467.
GPR[EPS]-1659904358523
GPR[ESUN]-1659904358523
GPR[SSUN]-1659904358523
-1117079791
GPR[SPVATF]-1659904358719
GPR[EPVATF]-1659904359276
GPR[SPS]-1659904359276
[1794887] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:466.
GPR[EPS]-1659904359759
GPR[ESUN]-1659904359759
GPR[SSUN]-1659904359759
-1117079791
GPR[SPVATF]-1659904359954
GPR[EPVATF]-1659904360512
GPR[SPS]-1659904360512
[1796118] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:465.
GPR[EPS]-1659904360990
GPR[ESUN]-1659904360990
GPR[SSUN]-1659904360990
-1117079791
GPR[SPVATF]-1659904361189
GPR[EPVATF]-1659904361743
GPR[SPS]-1659904361743
[1797362] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:464.
GPR[EPS]-1659904362234
GPR[ESUN]-1659904362234
GPR[SSUN]-1659904362234
-1117079791
GPR[SPVATF]-1659904362434
GPR[EPVATF]-1659904363054
GPR[SPS]-1659904363054
[1798673] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:463.
GPR[EPS]-1659904363545
GPR[ESUN]-1659904363545
GPR[SSUN]-1659904363545
-1117079791
GPR[SPVATF]-1659904363805
GPR[EPVATF]-1659904364367
GPR[SPS]-1659904364367
[1799981] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:120.
GPR[EPS]-1659904364853
GPR[ESUN]-1659904364853
GPR[SSUN]-1659904364853
-1117079791
GPR[ESUN]-1659904365055
GPR[SSUN]-1659904365055
-1117079791
GPR[SPVATF]-1659904365247
GPR[EPVATF]-1659904365821
GPR[SPS]-1659904365821
[1801440] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:745.
GPR[EPS]-1659904366312
GPR[ESUN]-1659904366312
GPR[SSUN]-1659904366312
-1117079791
GPR[SPVATF]-1659904366509
GPR[EPVATF]-1659904367086
GPR[SPS]-1659904367086
[1802696] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:744.
GPR[EPS]-1659904367568
GPR[ESUN]-1659904367568
GPR[SSUN]-1659904367568
-1117079791
GPR[ESUN]-1659904367762
GPR[SSUN]-1659904367762
-1117079791
GPR[SPVATF]-1659904367956
GPR[EPVATF]-1659904368539
GPR[SPS]-1659904368539
[1804150] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:175.
GPR[EPS]-1659904369022
GPR[ESUN]-1659904369022
GPR[SSUN]-1659904369022
1045502179
GPR[SPVATF]-1659904369262
GPR[EPVATF]-1659904369854
GPR[SPS]-1659904369854
[1805647] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:117.
GPR[EPS]-1659904370519
GPR[SPVATF]-1659904370519
GPR[EPVATF]-1659904371122
GPR[SPS]-1659904371122
[1806978] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:117.
GPR[EPS]-1659904371850
GPR[ESUN]-1659904371850
GPR[SSUN]-1659904371850
1045502179
GPR[SPVATF]-1659904372091
GPR[EPVATF]-1659904372689
GPR[SPS]-1659904372689
[1808477] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:116.
GPR[EPS]-1659904373349
GPR[ESUN]-1659904373349
GPR[SSUN]-1659904373349
1045502179
GPR[SPVATF]-1659904373583
GPR[EPVATF]-1659904374200
GPR[SPS]-1659904374200
[1809997] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions:114.
GPR[EPS]-1659904374869
GPR[ESUN]-1659904374869
GPR[SSUN]-1659904374869
1045502179
GPR[ESUN]-1659904375110
GPR[SSUN]-1659904375110
1045502179
GPR[SPVATF]-1659904375343
GPR[EPVATF]-1659904375970
GPR[SPS]-1659904375970
[1811771] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:167.
GPR[EPS]-1659904376643
GPR[SPVATF]-1659904376643
GPR[EPVATF]-1659904377258
GPR[SPS]-1659904377258
[1813075] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineFunctions$FindCandidateFunctions:167.
GPR[EPS]-1659904377947
GPR[ESUN]-1659904377947
GPR[SSUN]-1659904377947
1045502179
GPR[ESUN]-1659904378181
GPR[SSUN]-1659904378181
GPR[ESUN]-1659904378181
GPR[SSUN]-1659904378181
GPR[ESUN]-1659904378181
GPR[SSUN]-1659904378181
1537627151
GPR[ESUN]-1659904378385
GPR[SSUN]-1659904378385
-1345859678
GPR[ESUN]-1659904378710
GPR[SSUN]-1659904378710
-1345859678
GPR[ESUN]-1659904378951
GPR[SSUN]-1659904378951
1299274573
GPR[SPVATF]-1659904379165
GPR[EPVATF]-1659904379803
GPR[SPS]-1659904379803
[1815483] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:209.
GPR[EPS]-1659904380355
GPR[ESUN]-1659904380355
GPR[SSUN]-1659904380355
GPR[ESUN]-1659904380355
GPR[SSUN]-1659904380355
GPR[ESUN]-1659904380355
GPR[SSUN]-1659904380355
GPR[ESUN]-1659904380355
GPR[SSUN]-1659904380355
1299274573
GPR[SPVATF]-1659904380572
GPR[EPVATF]-1659904381252
GPR[SPS]-1659904381252
[1816933] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:203.
GPR[EPS]-1659904381805
GPR[SPVATF]-1659904381805
GPR[EPVATF]-1659904382462
GPR[SPS]-1659904382462
[1818140] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:203.
GPR[EPS]-1659904383012
GPR[ESUN]-1659904383012
GPR[SSUN]-1659904383012
1299274573
GPR[ESUN]-1659904383230
GPR[SSUN]-1659904383230
1299274573
GPR[SPVATF]-1659904383448
GPR[EPVATF]-1659904384152
GPR[SPS]-1659904384152
[1819825] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:190.
GPR[EPS]-1659904384697
GPR[SPVATF]-1659904384697
GPR[EPVATF]-1659904385383
GPR[SPS]-1659904385383
[1821051] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:190.
GPR[EPS]-1659904385923
GPR[ESUN]-1659904385923
GPR[SSUN]-1659904385923
1187751237
GPR[ESUN]-1659904386249
GPR[SSUN]-1659904386249
1299274573
GPR[SPVATF]-1659904386464
GPR[EPVATF]-1659904388213
GPR[SPS]-1659904388213
[1824249] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:223.
GPR[EPS]-1659904389121
GPR[SPVATF]-1659904389121
GPR[EPVATF]-1659904390197
GPR[SPS]-1659904390197
[1825980] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:223.
GPR[EPS]-1659904390852
GPR[ESUN]-1659904390852
GPR[SSUN]-1659904390852
1299274573
GPR[SPVATF]-1659904391073
GPR[EPVATF]-1659904391644
GPR[SPS]-1659904391645
[1827311] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:182.
GPR[EPS]-1659904392183
GPR[SPVATF]-1659904392184
GPR[EPVATF]-1659904392743
GPR[SPS]-1659904392743
[1828420] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionInjector:182.
GPR[EPS]-1659904393292
GPR[ESUN]-1659904393292
GPR[SSUN]-1659904393292
-1345859678
GPR[SPVATF]-1659904393540
GPR[EPVATF]-1659904394175
GPR[SPS]-1659904394175
[1829896] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:224.
GPR[EPS]-1659904394768
GPR[SPVATF]-1659904394768
GPR[EPVATF]-1659904395379
GPR[SPS]-1659904395379
[1831134] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:224.
GPR[EPS]-1659904396006
GPR[ESUN]-1659904396006
GPR[SSUN]-1659904396006
GPR[ESUN]-1659904396006
GPR[SSUN]-1659904396006
1187751237
GPR[ESUN]-1659904396314
GPR[SSUN]-1659904396314
1187751237
GPR[ESUN]-1659904396583
GPR[SSUN]-1659904396583
507083050
GPR[ESUN]-1659904396796
GPR[SSUN]-1659904396796
507083050
GPR[SPVATF]-1659904397011
GPR[EPVATF]-1659904397606
GPR[SPS]-1659904397606
[1833268] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:215.
GPR[EPS]-1659904398140
GPR[ESUN]-1659904398140
GPR[SSUN]-1659904398140
2013302092
GPR[SPVATF]-1659904398368
GPR[EPVATF]-1659904398916
GPR[SPS]-1659904398916
[1834575] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder:141.
GPR[EPS]-1659904399447
GPR[ESUN]-1659904399447
GPR[SSUN]-1659904399447
-718432441
GPR[SPVATF]-1659904399676
GPR[EPVATF]-1659904400225
GPR[SPS]-1659904400225
[1836031] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:839.
GPR[EPS]-1659904400904
GPR[SPVATF]-1659904400904
GPR[EPVATF]-1659904401505
GPR[SPS]-1659904401505
[1837382] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:839.
GPR[EPS]-1659904402254
GPR[ESUN]-1659904402254
GPR[SSUN]-1659904402254
1187751237
GPR[ESUN]-1659904402526
GPR[SSUN]-1659904402526
1187751237
GPR[ESUN]-1659904402792
GPR[SSUN]-1659904402792
1852376448
GPR[ESUN]-1659904403003
GPR[SSUN]-1659904403003
-1345859678
GPR[SPVATF]-1659904403291
GPR[EPVATF]-1659904403853
GPR[SPS]-1659904403853
[1839578] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:900.
GPR[EPS]-1659904404450
GPR[ESUN]-1659904404450
GPR[SSUN]-1659904404450
GPR[ESUN]-1659904404450
GPR[SSUN]-1659904404450
GPR[ESUN]-1659904404451
GPR[SSUN]-1659904404451
GPR[ESUN]-1659904404451
GPR[SSUN]-1659904404451
1852376448
GPR[ESUN]-1659904404665
GPR[SSUN]-1659904404665
-718432441
GPR[SPVATF]-1659904404890
GPR[EPVATF]-1659904405443
GPR[SPS]-1659904405443
[1841270] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1138.
GPR[EPS]-1659904406142
GPR[ESUN]-1659904406142
GPR[SSUN]-1659904406142
-718432441
GPR[SPVATF]-1659904406360
GPR[EPVATF]-1659904406912
GPR[SPS]-1659904406912
[1842723] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1137.
GPR[EPS]-1659904407595
GPR[SPVATF]-1659904407596
GPR[EPVATF]-1659904408154
GPR[SPS]-1659904408154
[1843982] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1137.
GPR[EPS]-1659904408854
GPR[ESUN]-1659904408854
GPR[SSUN]-1659904408854
-718432441
GPR[SPVATF]-1659904409071
GPR[EPVATF]-1659904409650
GPR[SPS]-1659904409650
[1845520] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1135.
GPR[EPS]-1659904410392
GPR[SPVATF]-1659904410392
GPR[EPVATF]-1659904411007
GPR[SPS]-1659904411007
[1846811] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1135.
GPR[EPS]-1659904411683
GPR[ESUN]-1659904411683
GPR[SSUN]-1659904411683
-718432441
GPR[SPVATF]-1659904411903
GPR[EPVATF]-1659904412478
GPR[SPS]-1659904412478
[1848284] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:821.
GPR[EPS]-1659904413156
GPR[SPVATF]-1659904413156
GPR[EPVATF]-1659904413755
GPR[SPS]-1659904413755
[1849567] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:821.
GPR[EPS]-1659904414439
GPR[ESUN]-1659904414439
GPR[SSUN]-1659904414439
1187751237
GPR[SPVATF]-1659904414711
GPR[EPVATF]-1659904415355
GPR[SPS]-1659904415355
[1851156] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1939.
GPR[EPS]-1659904416028
GPR[SPVATF]-1659904416029
GPR[EPVATF]-1659904416631
GPR[SPS]-1659904416631
[1852521] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1939.
GPR[EPS]-1659904417393
GPR[ESUN]-1659904417393
GPR[SSUN]-1659904417393
1187751237
GPR[ESUN]-1659904417667
GPR[SSUN]-1659904417667
-1117079791
GPR[SPVATF]-1659904417861
GPR[EPVATF]-1659904418469
GPR[SPS]-1659904418469
[1854074] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:795.
GPR[EPS]-1659904418946
GPR[ESUN]-1659904418946
GPR[SSUN]-1659904418947
1852376448
GPR[SPVATF]-1659904419169
GPR[EPVATF]-1659904419802
GPR[SPS]-1659904419802
[1855431] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:192.
GPR[EPS]-1659904420303
GPR[ESUN]-1659904420303
GPR[SSUN]-1659904420303
-718432441
GPR[ESUN]-1659904420520
GPR[SSUN]-1659904420520
-718432441
GPR[SPVATF]-1659904420727
GPR[EPVATF]-1659904421367
GPR[SPS]-1659904421367
[1857163] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:851.
GPR[EPS]-1659904422035
GPR[SPVATF]-1659904422035
GPR[EPVATF]-1659904422679
GPR[SPS]-1659904422679
[1858498] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:851.
GPR[EPS]-1659904423370
GPR[ESUN]-1659904423370
GPR[SSUN]-1659904423370
-718432441
GPR[SPVATF]-1659904423583
GPR[EPVATF]-1659904424235
GPR[SPS]-1659904424235
[1860059] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:847.
GPR[EPS]-1659904424931
GPR[ESUN]-1659904424931
GPR[SSUN]-1659904424931
-718432441
GPR[SPVATF]-1659904425223
GPR[EPVATF]-1659904425901
GPR[SPS]-1659904425901
[1861714] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:844.
GPR[EPS]-1659904426587
GPR[SPVATF]-1659904426587
GPR[EPVATF]-1659904427271
GPR[SPS]-1659904427271
[1863072] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:844.
GPR[EPS]-1659904427944
GPR[ESUN]-1659904427944
GPR[SSUN]-1659904427944
1187751237
GPR[SPVATF]-1659904428213
GPR[EPVATF]-1659904428891
GPR[SPS]-1659904428891
[1864754] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1937.
GPR[EPS]-1659904429626
GPR[SPVATF]-1659904429627
GPR[EPVATF]-1659904430335
GPR[SPS]-1659904430335
[1866144] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1937.
GPR[EPS]-1659904431016
GPR[ESUN]-1659904431016
GPR[SSUN]-1659904431016
1852376448
GPR[ESUN]-1659904432169
GPR[SSUN]-1659904432169
1852376448
GPR[SPVATF]-1659904432385
GPR[EPVATF]-1659904433236
GPR[SPS]-1659904433236
[1869166] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls:79.
GPR[EPS]-1659904434038
GPR[SPVATF]-1659904434038
GPR[EPVATF]-1659904434957
GPR[SPS]-1659904434957
[1870599] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls:79.
GPR[EPS]-1659904435471
GPR[ESUN]-1659904435471
GPR[SSUN]-1659904435471
1852376448
GPR[ESUN]-1659904435691
GPR[SSUN]-1659904435691
507083050
GPR[ESUN]-1659904435913
GPR[SSUN]-1659904435913
507083050
GPR[SPVATF]-1659904436129
GPR[EPVATF]-1659904436705
GPR[SPS]-1659904436705
[1872375] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:497.
GPR[EPS]-1659904437247
GPR[ESUN]-1659904437247
GPR[SSUN]-1659904437247
507083050
GPR[ESUN]-1659904437462
GPR[SSUN]-1659904437462
507083050
GPR[ESUN]-1659904437680
GPR[SSUN]-1659904437680
507083050
GPR[SPVATF]-1659904437897
GPR[EPVATF]-1659904438457
GPR[SPS]-1659904438457
[1874131] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:214.
GPR[EPS]-1659904439003
GPR[ESUN]-1659904439003
GPR[SSUN]-1659904439003
507083050
GPR[SPVATF]-1659904439228
GPR[EPVATF]-1659904439856
GPR[SPS]-1659904439856
[1875539] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:205.
GPR[EPS]-1659904440411
GPR[SPVATF]-1659904440411
GPR[EPVATF]-1659904440982
GPR[SPS]-1659904440982
[1876637] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:205.
GPR[EPS]-1659904441510
GPR[ESUN]-1659904441510
GPR[SSUN]-1659904441510
507083050
GPR[SPVATF]-1659904441730
GPR[EPVATF]-1659904442281
GPR[SPS]-1659904442281
[1877933] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:199.
GPR[EPS]-1659904442805
GPR[SPVATF]-1659904442805
GPR[EPVATF]-1659904443354
GPR[SPS]-1659904443354
[1879010] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:199.
GPR[EPS]-1659904443882
GPR[ESUN]-1659904443882
GPR[SSUN]-1659904443882
507083050
GPR[SPVATF]-1659904444100
GPR[EPVATF]-1659904444685
GPR[SPS]-1659904444685
[1880335] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionArgumentInjector:198.
GPR[EPS]-1659904445207
GPR[ESUN]-1659904445207
GPR[SSUN]-1659904445207
507083050
GPR[ESUN]-1659904445424
GPR[SSUN]-1659904445424
507083050
GPR[ESUN]-1659904445638
GPR[SSUN]-1659904445638
507083050
GPR[ESUN]-1659904445852
GPR[SSUN]-1659904445852
GPR[ESUN]-1659904445852
GPR[SSUN]-1659904445852
1537627151
GPR[ESUN]-1659904446052
GPR[SSUN]-1659904446052
-1345859678
GPR[ESUN]-1659904446294
GPR[SSUN]-1659904446294
-1345859678
GPR[SPVATF]-1659904446533
GPR[EPVATF]-1659904447111
GPR[SPS]-1659904447111
[1882897] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:899.
GPR[EPS]-1659904447769
GPR[SPVATF]-1659904447769
GPR[EPVATF]-1659904448352
GPR[SPS]-1659904448353
[1884148] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:899.
GPR[EPS]-1659904449020
GPR[ESUN]-1659904449020
GPR[SSUN]-1659904449020
-1345859678
GPR[ESUN]-1659904449261
GPR[SSUN]-1659904449262
GPR[ESUN]-1659904449262
GPR[SSUN]-1659904449262
GPR[ESUN]-1659904449262
GPR[SSUN]-1659904449262
GPR[ESUN]-1659904449262
GPR[SSUN]-1659904449262
GPR[ESUN]-1659904449262
GPR[SSUN]-1659904449262
GPR[ESUN]-1659904449262
GPR[SSUN]-1659904449262
GPR[ESUN]-1659904449262
GPR[SSUN]-1659904449262
GPR[ESUN]-1659904449262
GPR[SSUN]-1659904449262
GPR[ESUN]-1659904449262
GPR[SSUN]-1659904449262
GPR[ESUN]-1659904449262
GPR[SSUN]-1659904449262
GPR[ESUN]-1659904449262
GPR[SSUN]-1659904449262
GPR[ESUN]-1659904449262
GPR[SSUN]-1659904449262
GPR[ESUN]-1659904449262
GPR[SSUN]-1659904449262
GPR[ESUN]-1659904449262
GPR[SSUN]-1659904449262
GPR[ESUN]-1659904449262
GPR[SSUN]-1659904449262
GPR[ESUN]-1659904449262
GPR[SSUN]-1659904449262
GPR[ESUN]-1659904449262
GPR[SSUN]-1659904449262
GPR[ESUN]-1659904449262
GPR[SSUN]-1659904449262
GPR[ESUN]-1659904449262
GPR[SSUN]-1659904449262
GPR[ESUN]-1659904449262
GPR[SSUN]-1659904449262
1852376448
GPR[SPVATF]-1659904449477
GPR[EPVATF]-1659904450039
GPR[SPS]-1659904450039
[1885815] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:190.
GPR[EPS]-1659904450687
GPR[SPVATF]-1659904450687
GPR[EPVATF]-1659904451259
GPR[SPS]-1659904451259
[1886926] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:190.
GPR[EPS]-1659904451798
GPR[ESUN]-1659904451798
GPR[SSUN]-1659904451798
1852376448
GPR[SPVATF]-1659904452018
GPR[EPVATF]-1659904452608
GPR[SPS]-1659904452609
[1888241] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:189.
GPR[EPS]-1659904453113
GPR[ESUN]-1659904453113
GPR[SSUN]-1659904453113
1852376448
GPR[ESUN]-1659904453333
GPR[SSUN]-1659904453333
1852376448
GPR[SPVATF]-1659904453552
GPR[EPVATF]-1659904454135
GPR[SPS]-1659904454135
[1889773] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:187.
GPR[EPS]-1659904454645
GPR[ESUN]-1659904454645
GPR[SSUN]-1659904454645
1187751237
GPR[ESUN]-1659904454915
GPR[SSUN]-1659904454915
1187751237
GPR[SPVATF]-1659904455186
GPR[EPVATF]-1659904455849
GPR[SPS]-1659904455849
[1891672] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1851.
GPR[EPS]-1659904456544
GPR[ESUN]-1659904456544
GPR[SSUN]-1659904456544
1187751237
GPR[SPVATF]-1659904456818
GPR[EPVATF]-1659904457453
GPR[SPS]-1659904457453
[1893246] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2823.
GPR[EPS]-1659904458118
GPR[SPVATF]-1659904458118
GPR[EPVATF]-1659904458744
GPR[SPS]-1659904458744
[1894533] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2823.
GPR[EPS]-1659904459405
GPR[ESUN]-1659904459405
GPR[SSUN]-1659904459405
-534884160
GPR[ESUN]-1659904459746
GPR[SSUN]-1659904459746
-534884160
GPR[SPVATF]-1659904460076
GPR[EPVATF]-1659904460698
GPR[SPS]-1659904460698
[1896694] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:965.
GPR[EPS]-1659904461566
GPR[ESUN]-1659904461566
GPR[SSUN]-1659904461566
1616555300
GPR[ESUN]-1659904461765
GPR[SSUN]-1659904461765
80988634
GPR[ESUN]-1659904461939
GPR[SSUN]-1659904461939
-1117079791
GPR[ESUN]-1659904462195
GPR[SSUN]-1659904462195
-1117079791
GPR[SPVATF]-1659904462391
GPR[EPVATF]-1659904463001
GPR[SPS]-1659904463001
[1898622] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:268.
GPR[EPS]-1659904463494
GPR[ESUN]-1659904463494
GPR[SSUN]-1659904463494
-1117079791
GPR[ESUN]-1659904463693
GPR[SSUN]-1659904463693
-1117079791
GPR[SPVATF]-1659904463884
GPR[EPVATF]-1659904464536
GPR[SPS]-1659904464536
[1900224] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:363.
GPR[EPS]-1659904465096
GPR[ESUN]-1659904465096
GPR[SSUN]-1659904465096
-1117079791
GPR[SPVATF]-1659904465290
GPR[EPVATF]-1659904465945
GPR[SPS]-1659904465945
[1901551] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:362.
GPR[EPS]-1659904466423
GPR[ESUN]-1659904466423
GPR[SSUN]-1659904466424
-1117079791
GPR[SPVATF]-1659904466617
GPR[EPVATF]-1659904467288
GPR[SPS]-1659904467288
[1902907] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:361.
GPR[EPS]-1659904467779
GPR[ESUN]-1659904467779
GPR[SSUN]-1659904467779
-1117079791
GPR[SPVATF]-1659904467975
GPR[EPVATF]-1659904468663
GPR[SPS]-1659904468663
[1904279] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:360.
GPR[EPS]-1659904469151
GPR[ESUN]-1659904469151
GPR[SSUN]-1659904469151
-1117079791
GPR[SPVATF]-1659904469352
GPR[EPVATF]-1659904470085
GPR[SPS]-1659904470085
[1905701] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:359.
GPR[EPS]-1659904470573
GPR[ESUN]-1659904470573
GPR[SSUN]-1659904470573
-1117079791
GPR[ESUN]-1659904470767
GPR[SSUN]-1659904470767
-1117079791
GPR[SPVATF]-1659904470959
GPR[EPVATF]-1659904472627
GPR[SPS]-1659904472627
[1908571] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:347.
GPR[EPS]-1659904473444
GPR[ESUN]-1659904473444
GPR[SSUN]-1659904473444
-1117079791
GPR[SPVATF]-1659904473638
GPR[EPVATF]-1659904474407
GPR[SPS]-1659904474407
[1910016] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:346.
GPR[EPS]-1659904474888
GPR[ESUN]-1659904474888
GPR[SSUN]-1659904474888
-1117079791
GPR[SPVATF]-1659904475082
GPR[EPVATF]-1659904475694
GPR[SPS]-1659904475694
[1911313] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:345.
GPR[EPS]-1659904476185
GPR[ESUN]-1659904476185
GPR[SSUN]-1659904476185
-2054390034
GPR[SPVATF]-1659904476427
GPR[EPVATF]-1659904477017
GPR[SPS]-1659904477017
[1912718] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Normalize$VerifyConstants:300.
GPR[EPS]-1659904477590
GPR[ESUN]-1659904477590
GPR[SSUN]-1659904477590
1187751237
GPR[ESUN]-1659904477862
GPR[SSUN]-1659904477862
-534884160
GPR[SPVATF]-1659904478186
GPR[EPVATF]-1659904478297
GPR[SPS]-1659904478297
[1914127] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1524.
GPR[EPS]-1659904478999
GPR[ESUN]-1659904478999
GPR[SSUN]-1659904478999
1187751237
GPR[ESUN]-1659904479273
GPR[SSUN]-1659904479273
-534884160
GPR[ESUN]-1659904479624
GPR[SSUN]-1659904479624
-1345859678
GPR[ESUN]-1659904479869
GPR[SSUN]-1659904479869
-718432441
GPR[ESUN]-1659904480077
GPR[SSUN]-1659904480078
-718432441
GPR[SPVATF]-1659904480283
GPR[EPVATF]-1659904480858
GPR[SPS]-1659904480858
[1916674] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1134.
GPR[EPS]-1659904481546
GPR[ESUN]-1659904481546
GPR[SSUN]-1659904481546
-718432441
GPR[ESUN]-1659904481757
GPR[SSUN]-1659904481757
-718432441
GPR[ESUN]-1659904481970
GPR[SSUN]-1659904481970
-718432441
GPR[SPVATF]-1659904482184
GPR[EPVATF]-1659904482811
GPR[SPS]-1659904482811
[1918633] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:811.
GPR[EPS]-1659904483505
GPR[SPVATF]-1659904483505
GPR[EPVATF]-1659904484071
GPR[SPS]-1659904484072
[1919884] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:811.
GPR[EPS]-1659904484756
GPR[ESUN]-1659904484756
GPR[SSUN]-1659904484756
-718432441
GPR[ESUN]-1659904484969
GPR[SSUN]-1659904484970
-1117079791
GPR[SPVATF]-1659904485163
GPR[EPVATF]-1659904485823
GPR[SPS]-1659904485823
[1921439] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:280.
GPR[EPS]-1659904486311
GPR[ESUN]-1659904486311
GPR[SSUN]-1659904486311
-1117079791
GPR[SPVATF]-1659904486509
GPR[EPVATF]-1659904487083
GPR[SPS]-1659904487083
[1922726] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:794.
GPR[EPS]-1659904487598
GPR[SPVATF]-1659904487598
GPR[EPVATF]-1659904488167
GPR[SPS]-1659904488167
[1923784] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:794.
GPR[EPS]-1659904488656
GPR[ESUN]-1659904488656
GPR[SSUN]-1659904488656
1616555300
GPR[ESUN]-1659904488848
GPR[SSUN]-1659904488848
1616555300
GPR[SPVATF]-1659904489037
GPR[EPVATF]-1659904489619
GPR[SPS]-1659904489619
[1925251] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:270.
GPR[EPS]-1659904490123
GPR[ESUN]-1659904490123
GPR[SSUN]-1659904490123
-718432441
GPR[SPVATF]-1659904490352
GPR[EPVATF]-1659904490927
GPR[SPS]-1659904490927
[1926744] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:809.
GPR[EPS]-1659904491616
GPR[SPVATF]-1659904491617
GPR[EPVATF]-1659904492212
GPR[SPS]-1659904492212
[1928016] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:809.
GPR[EPS]-1659904492888
GPR[ESUN]-1659904492888
GPR[SSUN]-1659904492888
-718432441
GPR[SPVATF]-1659904493104
GPR[EPVATF]-1659904493694
GPR[SPS]-1659904493694
[1929500] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:803.
GPR[EPS]-1659904494372
GPR[SPVATF]-1659904494373
GPR[EPVATF]-1659904494984
GPR[SPS]-1659904494984
[1930848] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:803.
GPR[EPS]-1659904495720
GPR[ESUN]-1659904495720
GPR[SSUN]-1659904495721
-718432441
GPR[ESUN]-1659904495936
GPR[SSUN]-1659904495936
-1117079791
GPR[ESUN]-1659904496135
GPR[SSUN]-1659904496135
-1117079791
GPR[SPVATF]-1659904496333
GPR[EPVATF]-1659904496532
[1931660] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659904496532
GPR[SSUN]-1659904496532
-1117079791
GPR[SPVATF]-1659904496729
GPR[EPVATF]-1659904496915
[1932043] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659904496915
GPR[SSUN]-1659904496915
-1117079791
GPR[SPVATF]-1659904497114
GPR[EPVATF]-1659904497303
[1932431] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659904497303
GPR[SSUN]-1659904497303
-1117079791
GPR[SPVATF]-1659904497508
GPR[EPVATF]-1659904497697
[1932826] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659904497698
GPR[SSUN]-1659904497698
-1117079791
GPR[ESUN]-1659904497899
GPR[SSUN]-1659904497899
-1117079791
GPR[SPVATF]-1659904498095
GPR[EPVATF]-1659904498283
[1933411] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659904498283
GPR[SSUN]-1659904498283
-1117079791
GPR[SPVATF]-1659904498480
GPR[EPVATF]-1659904498662
[1933790] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659904498662
GPR[SSUN]-1659904498663
2433571
GPR[ESUN]-1659904498890
GPR[SSUN]-1659904498890
-1117079791
GPR[SPVATF]-1659904499085
GPR[EPVATF]-1659904499698
GPR[SPS]-1659904499698
[1935290] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:812.
GPR[EPS]-1659904500162
GPR[ESUN]-1659904500162
GPR[SSUN]-1659904500162
-1345859678
GPR[SPVATF]-1659904500414
GPR[EPVATF]-1659904501033
GPR[SPS]-1659904501033
[1936593] ERROR ConstraintModelBuilder - Unable to compile the change: 
class IRFactory {
    static final java.lang.String GETTER_ERROR_MESSAGE = "getters are not supported in older versions of JS. " + ("If you are targeting newer versions of JS, " + "set the appropriate language_in option.");

    static final java.lang.String SETTER_ERROR_MESSAGE = "setters are not supported in older versions of JS. " + ("If you are targeting newer versions of JS, " + "set the appropriate language_in option.");

    static final java.lang.String SUSPICIOUS_COMMENT_WARNING = "Non-JSDoc comment has annotations. " + "Did you mean to start it with '/**'?";

    private final java.lang.String sourceString;

    private final com.google.javascript.rhino.jstype.StaticSourceFile sourceFile;

    private final java.lang.String sourceName;

    private final com.google.javascript.jscomp.parsing.Config config;

    private final com.google.javascript.rhino.head.ErrorReporter errorReporter;

    private final com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher transformDispatcher;

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ALLOWED_DIRECTIVES = com.google.common.collect.ImmutableSet.of("use strict");

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ES5_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super");

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ES5_STRICT_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield");

    private final java.util.Set<java.lang.String> reservedKeywords;

    private final java.util.Set<com.google.javascript.rhino.head.ast.Comment> parsedComments = com.google.common.collect.Sets.newHashSet();

    com.google.javascript.rhino.Node rootNodeJsDocHolder = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);

    com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder = rootNodeJsDocHolder.getJsDocBuilderForNode();

    com.google.javascript.rhino.JSDocInfo fileOverviewInfo = null;

    private com.google.javascript.rhino.Node templateNode;

    private IRFactory(java.lang.String sourceString, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        this.sourceString = sourceString;
        this.sourceFile = sourceFile;
        this.sourceName = (sourceFile == null) ? null : sourceFile.getName();
        this.config = config;
        this.errorReporter = errorReporter;
        this.transformDispatcher = new com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher();
        this.templateNode = createTemplateNode();
        switch (config.languageMode) {
            case ECMASCRIPT3 :
                reservedKeywords = null;
                break;
            case ECMASCRIPT5 :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS;
                break;
            case ECMASCRIPT5_STRICT :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS;
                break;
            default :
                throw new java.lang.IllegalStateException("unknown language mode");
        }
    }

    private com.google.javascript.rhino.Node createTemplateNode() {
        com.google.javascript.rhino.Node templateNode = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);
        templateNode.setStaticSourceFile(sourceFile);
        return templateNode;
    }

    public static com.google.javascript.rhino.Node transformTree(com.google.javascript.rhino.head.ast.AstRoot node, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, java.lang.String sourceString, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        com.google.javascript.jscomp.parsing.IRFactory irFactory = new com.google.javascript.jscomp.parsing.IRFactory(sourceString, sourceFile, config, errorReporter);
        com.google.javascript.rhino.Node irNode = irFactory.transform(node);
        if (node.getComments() != null) {
            for (com.google.javascript.rhino.head.ast.Comment comment : node.getComments()) {
                if ((comment.getCommentType() == com.google.javascript.rhino.head.Token.CommentType.JSDOC) && (!irFactory.parsedComments.contains(comment))) {
                    irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
                } else if (comment.getCommentType() == com.google.javascript.rhino.head.Token.CommentType.BLOCK_COMMENT) {
                    irFactory.handleBlockComment(comment);
                }
            }
        }
        irFactory.setFileOverviewJsDoc(irNode);
        return irNode;
    }

    private void setFileOverviewJsDoc(com.google.javascript.rhino.Node irNode) {
        com.google.javascript.rhino.JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();
        if (rootNodeJsDoc != null) {
            irNode.setJSDocInfo(rootNodeJsDoc);
            rootNodeJsDoc.setAssociatedNode(irNode);
        }
        if (fileOverviewInfo != null) {
            if ((irNode.getJSDocInfo() != null) && (irNode.getJSDocInfo().getLicense() != null)) {
                fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());
            }
            irNode.setJSDocInfo(fileOverviewInfo);
            fileOverviewInfo.setAssociatedNode(irNode);
        }
    }

    private com.google.javascript.rhino.Node transformBlock(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = transform(node);
        if (!irNode.isBlock()) {
            if (irNode.isEmpty()) {
                irNode.setType(com.google.javascript.rhino.Token.BLOCK);
                irNode.setWasEmptyNode(true);
            } else {
                com.google.javascript.rhino.Node newBlock = newNode(com.google.javascript.rhino.Token.BLOCK, irNode);
                newBlock.setLineno(irNode.getLineno());
                newBlock.setCharno(irNode.getCharno());
                maybeSetLengthFrom(newBlock, node);
                irNode = newBlock;
            }
        }
        return irNode;
    }

    private void handleBlockComment(com.google.javascript.rhino.head.ast.Comment comment) {
        java.lang.String value = comment.getValue();
        if ((value.indexOf("/* @") != (-1)) || (value.indexOf("\n * @") != (-1))) {
            errorReporter.warning(com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), "", 0);
        }
    }

    private boolean handlePossibleFileOverviewJsDoc(com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser) {
        if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo) {
            fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();
            return true;
        }
        return false;
    }

    private void handlePossibleFileOverviewJsDoc(com.google.javascript.rhino.head.ast.Comment comment, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
        parsedComments.add(comment);
        handlePossibleFileOverviewJsDoc(jsDocParser);
    }

    private com.google.javascript.rhino.JSDocInfo handleJsDoc(com.google.javascript.rhino.head.ast.AstNode node, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.rhino.head.ast.Comment comment = node.getJsDocNode();
        if (comment != null) {
            com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
            parsedComments.add(comment);
            if (!handlePossibleFileOverviewJsDoc(jsDocParser)) {
                return jsDocParser.retrieveAndResetParsedJSDocInfo();
            }
        }
        return null;
    }

    private com.google.javascript.rhino.Node transform(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = justTransform(node);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNameAsString(com.google.javascript.rhino.head.ast.Name node) {
        com.google.javascript.rhino.Node irNode = transformDispatcher.processName(node, true);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNumberAsString(com.google.javascript.rhino.head.ast.NumberLiteral literalNode) {
        com.google.javascript.rhino.Node irNode = newStringNode(com.google.javascript.jscomp.parsing.IRFactory.getStringValue(literalNode.getNumber()));
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(literalNode, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, literalNode);
        return irNode;
    }

    private static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    private void setSourceInfo(com.google.javascript.rhino.Node irNode, com.google.javascript.rhino.head.ast.AstNode node) {
        if (irNode.getLineno() == (-1)) {
            int lineno = node.getLineno();
            irNode.setLineno(lineno);
            int charno = position2charno(node.getAbsolutePosition());
            irNode.setCharno(charno);
            maybeSetLengthFrom(irNode, node);
        }
    }

    private com.google.javascript.jscomp.parsing.JsDocInfoParser createJsDocInfoParser(com.google.javascript.rhino.head.ast.Comment node, com.google.javascript.rhino.Node irNode) {
        java.lang.String comment = node.getValue();
        int lineno = node.getLineno();
        int position = node.getAbsolutePosition();
        int numOpeningChars = 3;
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsdocParser = new com.google.javascript.jscomp.parsing.JsDocInfoParser(new com.google.javascript.jscomp.parsing.JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, irNode, config, errorReporter);
        jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);
        jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);
        jsdocParser.parse();
        return jsdocParser;
    }

    private void maybeSetLengthFrom(com.google.javascript.rhino.Node node, com.google.javascript.rhino.head.ast.AstNode source) {
        if (config.isIdeMode) {
            node.setLength(source.getLength());
        }
    }

    private int position2charno(int position) {
        int lineIndex = sourceString.lastIndexOf('\n', position);
        if (lineIndex == (-1)) {
            return position;
        } else {
            return (position - lineIndex) - 1;
        }
    }

    private com.google.javascript.rhino.Node justTransform(com.google.javascript.rhino.head.ast.AstNode node) {
        return transformDispatcher.process(node);
    }

    private class TransformDispatcher extends com.google.javascript.jscomp.parsing.TypeSafeDispatcher<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node processGeneric(com.google.javascript.rhino.head.Node n) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(n.getType()));
            for (com.google.javascript.rhino.head.Node child : n) {
                node.addChildToBack(transform(((com.google.javascript.rhino.head.ast.AstNode) (child))));
            }
            return node;
        }

        private com.google.javascript.rhino.Node transformAsString(com.google.javascript.rhino.head.ast.AstNode n) {
            com.google.javascript.rhino.Node ret;
            if (n instanceof com.google.javascript.rhino.head.ast.Name) {
                ret = transformNameAsString(((com.google.javascript.rhino.head.ast.Name) (n)));
            } else if (n instanceof com.google.javascript.rhino.head.ast.NumberLiteral) {
                ret = transformNumberAsString(((com.google.javascript.rhino.head.ast.NumberLiteral) (n)));
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            } else {
                ret = transform(n);
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            }
            com.google.common.base.Preconditions.checkState(ret.isString());
            return ret;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processArrayLiteral(com.google.javascript.rhino.head.ast.ArrayLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.ARRAYLIT);
            for (com.google.javascript.rhino.head.ast.AstNode child : literalNode.getElements()) {
                com.google.javascript.rhino.Node c = transform(child);
                node.addChildToBack(c);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAssignment(com.google.javascript.rhino.head.ast.Assignment assignmentNode) {
            com.google.javascript.rhino.Node assign = processInfixExpression(assignmentNode);
            com.google.javascript.rhino.Node target = assign.getFirstChild();
            if (!validAssignmentTarget(target)) {
                errorReporter.error("invalid assignment target", sourceName, target.getLineno(), "", 0);
            }
            return assign;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAstRoot(com.google.javascript.rhino.head.ast.AstRoot rootNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SCRIPT);
            for (com.google.javascript.rhino.head.Node child : rootNode) {
                node.addChildToBack(transform(((com.google.javascript.rhino.head.ast.AstNode) (child))));
            }
            parseDirectives(node);
            return node;
        }

        private void parseDirectives(com.google.javascript.rhino.Node node) {
            java.util.Set<java.lang.String> directives = null;
            while (isDirective(node.getFirstChild())) {
                java.lang.String directive = node.removeFirstChild().getFirstChild().getString();
                if (directives == null) {
                    directives = com.google.common.collect.Sets.newHashSet(directive);
                } else {
                    directives.add(directive);
                }
            } 
            if (directives != null) {
                node.setDirectives(directives);
            }
        }

        private boolean isDirective(com.google.javascript.rhino.Node n) {
            if (n == null) {
                return false;
            }
            int nType = n.getType();
            return ((nType == com.google.javascript.rhino.Token.EXPR_RESULT) && n.getFirstChild().isString()) && com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBlock(com.google.javascript.rhino.head.ast.Block blockNode) {
            return processGeneric(blockNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBreakStatement(com.google.javascript.rhino.head.ast.BreakStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.BREAK);
            if (statementNode.getBreakLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getBreakLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processCatchClause(com.google.javascript.rhino.head.ast.CatchClause clauseNode) {
            com.google.javascript.rhino.head.ast.AstNode catchVar = clauseNode.getVarName();
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CATCH, transform(catchVar));
            if (clauseNode.getCatchCondition() != null) {
                errorReporter.error("Catch clauses are not supported", sourceName, clauseNode.getCatchCondition().getLineno(), "", 0);
            }
            node.addChildToBack(transformBlock(clauseNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processConditionalExpression(com.google.javascript.rhino.head.ast.ConditionalExpression exprNode) {
            return newNode(com.google.javascript.rhino.Token.HOOK, transform(exprNode.getTestExpression()), transform(exprNode.getTrueExpression()), transform(exprNode.getFalseExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processContinueStatement(com.google.javascript.rhino.head.ast.ContinueStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CONTINUE);
            if (statementNode.getLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processDoLoop(com.google.javascript.rhino.head.ast.DoLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.DO, transformBlock(loopNode.getBody()), transform(loopNode.getCondition()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processElementGet(com.google.javascript.rhino.head.ast.ElementGet getNode) {
            return newNode(com.google.javascript.rhino.Token.GETELEM, transform(getNode.getTarget()), transform(getNode.getElement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processEmptyExpression(com.google.javascript.rhino.head.ast.EmptyExpression exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.EMPTY);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processEmptyStatement(com.google.javascript.rhino.head.ast.EmptyStatement exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.EMPTY);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processExpressionStatement(com.google.javascript.rhino.head.ast.ExpressionStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(statementNode.getType()));
            node.addChildToBack(transform(statementNode.getExpression()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForInLoop(com.google.javascript.rhino.head.ast.ForInLoop loopNode) {
            if (loopNode.isForEach()) {
                errorReporter.error("unsupported language extension: for each", sourceName, loopNode.getLineno(), "", 0);
                return newNode(com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Node.newNumber(0));
            }
            return newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getIterator()), transform(loopNode.getIteratedObject()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForLoop(com.google.javascript.rhino.head.ast.ForLoop loopNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getInitializer()), transform(loopNode.getCondition()), transform(loopNode.getIncrement()));
            node.addChildToBack(transformBlock(loopNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionCall(com.google.javascript.rhino.head.ast.FunctionCall callNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(callNode.getType()), transform(callNode.getTarget()));
            for (com.google.javascript.rhino.head.ast.AstNode child : callNode.getArguments()) {
                node.addChildToBack(transform(child));
            }
            node.setLineno(node.getFirstChild().getLineno());
            node.setCharno(node.getFirstChild().getCharno());
            maybeSetLengthFrom(node, callNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionNode(com.google.javascript.rhino.head.ast.FunctionNode functionNode) {
            com.google.javascript.rhino.head.ast.Name name = functionNode.getFunctionName();
            java.lang.Boolean isUnnamedFunction = false;
            if (name == null) {
                int functionType = functionNode.getFunctionType();
                if (functionType != com.google.javascript.rhino.head.ast.FunctionNode.FUNCTION_EXPRESSION) {
                    errorReporter.error("unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
                    return newNode(com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Node.newNumber(0));
                }
                name = new com.google.javascript.rhino.head.ast.Name();
                name.setIdentifier("");
                isUnnamedFunction = true;
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FUNCTION);
            com.google.javascript.rhino.Node newName = transform(name);
            if (isUnnamedFunction) {
                newName.setLineno(functionNode.getLineno());
                int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
                newName.setCharno(position2charno(lpColumn));
                maybeSetLengthFrom(newName, name);
            }
            node.addChildToBack(newName);
            com.google.javascript.rhino.Node lp = newNode(com.google.javascript.rhino.Token.PARAM_LIST);
            com.google.javascript.rhino.head.ast.Name fnName = functionNode.getFunctionName();
            if (fnName != null) {
                lp.setLineno(fnName.getLineno());
            } else {
                lp.setLineno(functionNode.getLineno());
            }
            int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
            lp.setCharno(position2charno(lparenCharno));
            for (com.google.javascript.rhino.head.ast.AstNode param : functionNode.getParams()) {
                com.google.javascript.rhino.Node paramNode = transform(param);
                if (paramNode.isName()) {
                    lp.addChildToBack(paramNode);
                } else {
                    com.google.common.base.Preconditions.checkState((config.isIdeMode || paramNode.isObjectLit()) || paramNode.isArrayLit());
                }
            }
            node.addChildToBack(lp);
            com.google.javascript.rhino.Node bodyNode = transform(functionNode.getBody());
            if (!bodyNode.isBlock()) {
                com.google.common.base.Preconditions.checkState(config.isIdeMode);
                bodyNode = com.google.javascript.rhino.IR.block();
            }
            parseDirectives(bodyNode);
            node.addChildToBack(bodyNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIfStatement(com.google.javascript.rhino.head.ast.IfStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.IF);
            node.addChildToBack(transform(statementNode.getCondition()));
            node.addChildToBack(transformBlock(statementNode.getThenPart()));
            if (statementNode.getElsePart() != null) {
                node.addChildToBack(transformBlock(statementNode.getElsePart()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processInfixExpression(com.google.javascript.rhino.head.ast.InfixExpression exprNode) {
            com.google.javascript.rhino.Node n = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType()), transform(exprNode.getLeft()), transform(exprNode.getRight()));
            n.setLineno(exprNode.getLineno());
            n.setCharno(position2charno(exprNode.getAbsolutePosition()));
            maybeSetLengthFrom(n, exprNode);
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processKeywordLiteral(com.google.javascript.rhino.head.ast.KeywordLiteral literalNode) {
            return newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(literalNode.getType()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabel(com.google.javascript.rhino.head.ast.Label labelNode) {
            return newStringNode(com.google.javascript.rhino.Token.LABEL_NAME, labelNode.getName());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabeledStatement(com.google.javascript.rhino.head.ast.LabeledStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.LABEL);
            com.google.javascript.rhino.Node prev = null;
            com.google.javascript.rhino.Node cur = node;
            for (com.google.javascript.rhino.head.ast.Label label : statementNode.getLabels()) {
                if (prev != null) {
                    prev.addChildToBack(cur);
                }
                cur.addChildToBack(transform(label));
                cur.setLineno(label.getLineno());
                maybeSetLengthFrom(cur, label);
                int clauseAbsolutePosition = position2charno(label.getAbsolutePosition());
                cur.setCharno(clauseAbsolutePosition);
                prev = cur;
                cur = newNode(com.google.javascript.rhino.Token.LABEL);
            }
            prev.addChildToBack(transform(statementNode.getStatement()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processName(com.google.javascript.rhino.head.ast.Name nameNode) {
            return processName(nameNode, false);
        }

        com.google.javascript.rhino.Node processName(com.google.javascript.rhino.head.ast.Name nameNode, boolean asString) {
            if (asString) {
                return newStringNode(com.google.javascript.rhino.Token.STRING, nameNode.getIdentifier());
            } else {
                if (isReservedKeyword(nameNode.getIdentifier())) {
                    errorReporter.error("identifier is a reserved word", sourceName, nameNode.getLineno(), "", 0);
                }
                return newStringNode(com.google.javascript.rhino.Token.NAME, nameNode.getIdentifier());
            }
        }

        private boolean isReservedKeyword(java.lang.String identifier) {
            return (reservedKeywords != null) && reservedKeywords.contains(identifier);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNewExpression(com.google.javascript.rhino.head.ast.NewExpression exprNode) {
            return processFunctionCall(exprNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNumberLiteral(com.google.javascript.rhino.head.ast.NumberLiteral literalNode) {
            return newNumberNode(literalNode.getNumber());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectLiteral(com.google.javascript.rhino.head.ast.ObjectLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.OBJECTLIT);
            for (com.google.javascript.rhino.head.ast.ObjectProperty el : literalNode.getElements()) {
                if (config.languageMode == com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT3) {
                    if (el.isGetter()) {
                        reportGetter(el);
                        continue;
                    } else if (el.isSetter()) {
                        reportSetter(el);
                        continue;
                    }
                }
                com.google.javascript.rhino.Node key = transformAsString(el.getLeft());
                key.setType(com.google.javascript.rhino.Token.STRING_KEY);
                com.google.javascript.rhino.Node value = transform(el.getRight());
                if (el.isGetter()) {
                    key.setType(com.google.javascript.rhino.Token.GETTER_DEF);
                    com.google.common.base.Preconditions.checkState(value.isFunction());
                    if (getFnParamNode(value).hasChildren()) {
                        reportGetterParam(el.getLeft());
                    }
                } else if (el.isSetter()) {
                    key.setType(com.google.javascript.rhino.Token.SETTER_DEF);
                    com.google.common.base.Preconditions.checkState(value.isFunction());
                    if (!getFnParamNode(value).hasOneChild()) {
                        reportSetterParam(el.getLeft());
                    }
                }
                key.addChildToFront(value);
                node.addChildToBack(key);
            }
            return node;
        }

        com.google.javascript.rhino.Node getFnParamNode(com.google.javascript.rhino.Node fnNode) {
            com.google.common.base.Preconditions.checkArgument(fnNode.isFunction());
            return fnNode.getFirstChild().getNext();
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectProperty(com.google.javascript.rhino.head.ast.ObjectProperty propertyNode) {
            return processInfixExpression(propertyNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processParenthesizedExpression(com.google.javascript.rhino.head.ast.ParenthesizedExpression exprNode) {
            com.google.javascript.rhino.Node node = transform(exprNode.getExpression());
            node.putProp(com.google.javascript.rhino.Node.PARENTHESIZED_PROP, java.lang.Boolean.TRUE);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processPropertyGet(com.google.javascript.rhino.head.ast.PropertyGet getNode) {
            com.google.javascript.rhino.Node leftChild = transform(getNode.getTarget());
            com.google.javascript.rhino.Node newNode = newNode(com.google.javascript.rhino.Token.GETPROP, leftChild, transformAsString(getNode.getProperty()));
            newNode.setLineno(leftChild.getLineno());
            newNode.setCharno(leftChild.getCharno());
            maybeSetLengthFrom(newNode, getNode);
            return newNode;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processRegExpLiteral(com.google.javascript.rhino.head.ast.RegExpLiteral literalNode) {
            com.google.javascript.rhino.Node literalStringNode = newStringNode(literalNode.getValue());
            literalStringNode.setLineno(literalNode.getLineno());
            maybeSetLengthFrom(literalStringNode, literalNode);
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.REGEXP, literalStringNode);
            java.lang.String flags = literalNode.getFlags();
            if ((flags != null) && (!flags.isEmpty())) {
                com.google.javascript.rhino.Node flagsNode = newStringNode(flags);
                flagsNode.setLineno(literalNode.getLineno());
                maybeSetLengthFrom(flagsNode, literalNode);
                node.addChildToBack(flagsNode);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processReturnStatement(com.google.javascript.rhino.head.ast.ReturnStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.RETURN);
            if (statementNode.getReturnValue() != null) {
                node.addChildToBack(transform(statementNode.getReturnValue()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processScope(com.google.javascript.rhino.head.ast.Scope scopeNode) {
            return processGeneric(scopeNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processStringLiteral(com.google.javascript.rhino.head.ast.StringLiteral literalNode) {
            java.lang.String value = literalNode.getValue();
            com.google.javascript.rhino.Node n = newStringNode(value);
            if (value.indexOf('\u000b') != (-1)) {
                int start = literalNode.getAbsolutePosition();
                int end = start + literalNode.getLength();
                if ((start < sourceString.length()) && (sourceString.substring(start, java.lang.Math.min(sourceString.length(), end)).indexOf("\\v") != (-1))) {
                    n.putBooleanProp(com.google.javascript.rhino.Node.SLASH_V, true);
                }
            }
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchCase(com.google.javascript.rhino.head.ast.SwitchCase caseNode) {
            com.google.javascript.rhino.Node node;
            if (caseNode.isDefault()) {
                node = newNode(com.google.javascript.rhino.Token.DEFAULT_CASE);
            } else {
                com.google.javascript.rhino.head.ast.AstNode expr = caseNode.getExpression();
                node = newNode(com.google.javascript.rhino.Token.CASE, transform(expr));
            }
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            block.putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, true);
            block.setLineno(caseNode.getLineno());
            block.setCharno(position2charno(caseNode.getAbsolutePosition()));
            maybeSetLengthFrom(block, caseNode);
            if (caseNode.getStatements() != null) {
                for (com.google.javascript.rhino.head.ast.AstNode child : caseNode.getStatements()) {
                    block.addChildToBack(transform(child));
                }
            }
            node.addChildToBack(block);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchStatement(com.google.javascript.rhino.head.ast.SwitchStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SWITCH, transform(statementNode.getExpression()));
            for (com.google.javascript.rhino.head.ast.AstNode child : statementNode.getCases()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processThrowStatement(com.google.javascript.rhino.head.ast.ThrowStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.THROW, transform(statementNode.getExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processTryStatement(com.google.javascript.rhino.head.ast.TryStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.TRY, transformBlock(statementNode.getTryBlock()));
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            boolean lineSet = false;
            for (com.google.javascript.rhino.head.ast.CatchClause cc : statementNode.getCatchClauses()) {
                if (lineSet == false) {
                    block.setLineno(cc.getLineno());
                    maybeSetLengthFrom(block, cc);
                    lineSet = true;
                }
                block.addChildToBack(transform(cc));
            }
            node.addChildToBack(block);
            com.google.javascript.rhino.head.ast.AstNode finallyBlock = statementNode.getFinallyBlock();
            if (finallyBlock != null) {
                node.addChildToBack(transformBlock(finallyBlock));
            }
            if ((lineSet == false) && (finallyBlock != null)) {
                block.setLineno(finallyBlock.getLineno());
                maybeSetLengthFrom(block, finallyBlock);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processUnaryExpression(com.google.javascript.rhino.head.ast.UnaryExpression exprNode) {
            int type = com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType());
            com.google.javascript.rhino.Node operand = transform(exprNode.getOperand());
            if ((type == com.google.javascript.rhino.Token.NEG) && operand.isNumber()) {
                operand.setDouble(-operand.getDouble());
                return operand;
            } else {
                if ((type == com.google.javascript.rhino.Token.DELPROP) && (!((operand.isGetProp() || operand.isGetElem()) || operand.isName()))) {
                    java.lang.String msg = "Invalid delete operand. Only properties can be deleted.";
                    errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                } else if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
                    if (!validAssignmentTarget(operand)) {
                        java.lang.String msg = (type == com.google.javascript.rhino.Token.INC) ? "invalid increment target" : "invalid decrement target";
                        errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                    }
                }
                com.google.javascript.rhino.Node node = newNode(type, operand);
                if (exprNode.isPostfix()) {
                    node.putBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP, true);
                }
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(387).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(387).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(387).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES",com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(387).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceString",com.google.javascript.jscomp.parsing.IRFactory.this.sourceString);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(387).collectInput("com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING",com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(387).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher",com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(387).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo",com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(387).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(387).collectInput("com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE",com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(387).collectInput("node",node);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(387).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile",com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(387).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(387).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter",com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(387).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(387).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder",com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(387).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords",com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(387).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.templateNode",com.google.javascript.jscomp.parsing.IRFactory.this.templateNode);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(387).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.config",com.google.javascript.jscomp.parsing.IRFactory.this.config);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(387).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.parsedComments",com.google.javascript.jscomp.parsing.IRFactory.this.parsedComments);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(387).collectInput("exprNode",exprNode);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(387).collectInput("com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE",com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(387).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceName",com.google.javascript.jscomp.parsing.IRFactory.this.sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(387).collectInput("operand",operand);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(387).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder",com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(387).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(387).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return node;

            }
        }

        private boolean validAssignmentTarget(com.google.javascript.rhino.Node target) {
            switch (target.getType()) {
                case com.google.javascript.rhino.Token.NAME :
                case com.google.javascript.rhino.Token.GETPROP :
                case com.google.javascript.rhino.Token.GETELEM :
                    return true;
            }
            return false;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableDeclaration(com.google.javascript.rhino.head.ast.VariableDeclaration declarationNode) {
            if ((!config.acceptConstKeyword) && (declarationNode.getType() == com.google.javascript.rhino.head.Token.CONST)) {
                processIllegalToken(declarationNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.VAR);
            for (com.google.javascript.rhino.head.ast.VariableInitializer child : declarationNode.getVariables()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableInitializer(com.google.javascript.rhino.head.ast.VariableInitializer initializerNode) {
            com.google.javascript.rhino.Node node = transform(initializerNode.getTarget());
            if (initializerNode.getInitializer() != null) {
                com.google.javascript.rhino.Node initalizer = transform(initializerNode.getInitializer());
                node.addChildToBack(initalizer);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWhileLoop(com.google.javascript.rhino.head.ast.WhileLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.WHILE, transform(loopNode.getCondition()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWithStatement(com.google.javascript.rhino.head.ast.WithStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.WITH, transform(statementNode.getExpression()), transformBlock(statementNode.getStatement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIllegalToken(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("Unsupported syntax: " + com.google.javascript.rhino.head.Token.typeToName(node.getType()), sourceName, node.getLineno(), "", 0);
            return newNode(com.google.javascript.rhino.Token.EMPTY);
        }

        void reportDestructuringAssign(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("destructuring assignment forbidden", sourceName, node.getLineno(), "", 0);
        }

        void reportGetter(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error(com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE, sourceName, node.getLineno(), "", 0);
        }

        void reportSetter(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error(com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE, sourceName, node.getLineno(), "", 0);
        }

        void reportGetterParam(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("getters may not have parameters", sourceName, node.getLineno(), "", 0);
        }

        void reportSetterParam(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("setters must have exactly one parameter", sourceName, node.getLineno(), "", 0);
        }
    }

    private static int transformTokenType(int token) {
        switch (token) {
            case com.google.javascript.rhino.head.Token.RETURN :
                return com.google.javascript.rhino.Token.RETURN;
            case com.google.javascript.rhino.head.Token.BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.rhino.head.Token.BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.rhino.head.Token.BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.rhino.head.Token.EQ :
                return com.google.javascript.rhino.Token.EQ;
            case com.google.javascript.rhino.head.Token.NE :
                return com.google.javascript.rhino.Token.NE;
            case com.google.javascript.rhino.head.Token.LT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.rhino.head.Token.LE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.rhino.head.Token.GT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.rhino.head.Token.GE :
                return com.google.javascript.rhino.Token.GE;
            case com.google.javascript.rhino.head.Token.LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.rhino.head.Token.RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.rhino.head.Token.URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.rhino.head.Token.ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.rhino.head.Token.SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.rhino.head.Token.MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.rhino.head.Token.DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.rhino.head.Token.MOD :
                return com.google.javascript.rhino.Token.MOD;
            case com.google.javascript.rhino.head.Token.NOT :
                return com.google.javascript.rhino.Token.NOT;
            case com.google.javascript.rhino.head.Token.BITNOT :
                return com.google.javascript.rhino.Token.BITNOT;
            case com.google.javascript.rhino.head.Token.POS :
                return com.google.javascript.rhino.Token.POS;
            case com.google.javascript.rhino.head.Token.NEG :
                return com.google.javascript.rhino.Token.NEG;
            case com.google.javascript.rhino.head.Token.NEW :
                return com.google.javascript.rhino.Token.NEW;
            case com.google.javascript.rhino.head.Token.DELPROP :
                return com.google.javascript.rhino.Token.DELPROP;
            case com.google.javascript.rhino.head.Token.TYPEOF :
                return com.google.javascript.rhino.Token.TYPEOF;
            case com.google.javascript.rhino.head.Token.GETPROP :
                return com.google.javascript.rhino.Token.GETPROP;
            case com.google.javascript.rhino.head.Token.GETELEM :
                return com.google.javascript.rhino.Token.GETELEM;
            case com.google.javascript.rhino.head.Token.CALL :
                return com.google.javascript.rhino.Token.CALL;
            case com.google.javascript.rhino.head.Token.NAME :
                return com.google.javascript.rhino.Token.NAME;
            case com.google.javascript.rhino.head.Token.NUMBER :
                return com.google.javascript.rhino.Token.NUMBER;
            case com.google.javascript.rhino.head.Token.STRING :
                return com.google.javascript.rhino.Token.STRING;
            case com.google.javascript.rhino.head.Token.NULL :
                return com.google.javascript.rhino.Token.NULL;
            case com.google.javascript.rhino.head.Token.THIS :
                return com.google.javascript.rhino.Token.THIS;
            case com.google.javascript.rhino.head.Token.FALSE :
                return com.google.javascript.rhino.Token.FALSE;
            case com.google.javascript.rhino.head.Token.TRUE :
                return com.google.javascript.rhino.Token.TRUE;
            case com.google.javascript.rhino.head.Token.SHEQ :
                return com.google.javascript.rhino.Token.SHEQ;
            case com.google.javascript.rhino.head.Token.SHNE :
                return com.google.javascript.rhino.Token.SHNE;
            case com.google.javascript.rhino.head.Token.REGEXP :
                return com.google.javascript.rhino.Token.REGEXP;
            case com.google.javascript.rhino.head.Token.THROW :
                return com.google.javascript.rhino.Token.THROW;
            case com.google.javascript.rhino.head.Token.IN :
                return com.google.javascript.rhino.Token.IN;
            case com.google.javascript.rhino.head.Token.INSTANCEOF :
                return com.google.javascript.rhino.Token.INSTANCEOF;
            case com.google.javascript.rhino.head.Token.ARRAYLIT :
                return com.google.javascript.rhino.Token.ARRAYLIT;
            case com.google.javascript.rhino.head.Token.OBJECTLIT :
                return com.google.javascript.rhino.Token.OBJECTLIT;
            case com.google.javascript.rhino.head.Token.TRY :
                return com.google.javascript.rhino.Token.TRY;
            case com.google.javascript.rhino.head.Token.LP :
                return com.google.javascript.rhino.Token.PARAM_LIST;
            case com.google.javascript.rhino.head.Token.COMMA :
                return com.google.javascript.rhino.Token.COMMA;
            case com.google.javascript.rhino.head.Token.ASSIGN :
                return com.google.javascript.rhino.Token.ASSIGN;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITOR;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITXOR;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.ASSIGN_BITAND;
            case com.google.javascript.rhino.head.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.ASSIGN_LSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.ASSIGN_RSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.ASSIGN_URSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ASSIGN_ADD;
            case com.google.javascript.rhino.head.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.ASSIGN_SUB;
            case com.google.javascript.rhino.head.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.ASSIGN_MUL;
            case com.google.javascript.rhino.head.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.ASSIGN_DIV;
            case com.google.javascript.rhino.head.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.ASSIGN_MOD;
            case com.google.javascript.rhino.head.Token.HOOK :
                return com.google.javascript.rhino.Token.HOOK;
            case com.google.javascript.rhino.head.Token.OR :
                return com.google.javascript.rhino.Token.OR;
            case com.google.javascript.rhino.head.Token.AND :
                return com.google.javascript.rhino.Token.AND;
            case com.google.javascript.rhino.head.Token.INC :
                return com.google.javascript.rhino.Token.INC;
            case com.google.javascript.rhino.head.Token.DEC :
                return com.google.javascript.rhino.Token.DEC;
            case com.google.javascript.rhino.head.Token.FUNCTION :
                return com.google.javascript.rhino.Token.FUNCTION;
            case com.google.javascript.rhino.head.Token.IF :
                return com.google.javascript.rhino.Token.IF;
            case com.google.javascript.rhino.head.Token.SWITCH :
                return com.google.javascript.rhino.Token.SWITCH;
            case com.google.javascript.rhino.head.Token.CASE :
                return com.google.javascript.rhino.Token.CASE;
            case com.google.javascript.rhino.head.Token.DEFAULT :
                return com.google.javascript.rhino.Token.DEFAULT_CASE;
            case com.google.javascript.rhino.head.Token.WHILE :
                return com.google.javascript.rhino.Token.WHILE;
            case com.google.javascript.rhino.head.Token.DO :
                return com.google.javascript.rhino.Token.DO;
            case com.google.javascript.rhino.head.Token.FOR :
                return com.google.javascript.rhino.Token.FOR;
            case com.google.javascript.rhino.head.Token.BREAK :
                return com.google.javascript.rhino.Token.BREAK;
            case com.google.javascript.rhino.head.Token.CONTINUE :
                return com.google.javascript.rhino.Token.CONTINUE;
            case com.google.javascript.rhino.head.Token.VAR :
                return com.google.javascript.rhino.Token.VAR;
            case com.google.javascript.rhino.head.Token.WITH :
                return com.google.javascript.rhino.Token.WITH;
            case com.google.javascript.rhino.head.Token.CATCH :
                return com.google.javascript.rhino.Token.CATCH;
            case com.google.javascript.rhino.head.Token.VOID :
                return com.google.javascript.rhino.Token.VOID;
            case com.google.javascript.rhino.head.Token.EMPTY :
                return com.google.javascript.rhino.Token.EMPTY;
            case com.google.javascript.rhino.head.Token.BLOCK :
                return com.google.javascript.rhino.Token.BLOCK;
            case com.google.javascript.rhino.head.Token.LABEL :
                return com.google.javascript.rhino.Token.LABEL;
            case com.google.javascript.rhino.head.Token.EXPR_VOID :
            case com.google.javascript.rhino.head.Token.EXPR_RESULT :
                return com.google.javascript.rhino.Token.EXPR_RESULT;
            case com.google.javascript.rhino.head.Token.SCRIPT :
                return com.google.javascript.rhino.Token.SCRIPT;
            case com.google.javascript.rhino.head.Token.GET :
                return com.google.javascript.rhino.Token.GETTER_DEF;
            case com.google.javascript.rhino.head.Token.SET :
                return com.google.javascript.rhino.Token.SETTER_DEF;
            case com.google.javascript.rhino.head.Token.CONST :
                return com.google.javascript.rhino.Token.CONST;
            case com.google.javascript.rhino.head.Token.DEBUGGER :
                return com.google.javascript.rhino.Token.DEBUGGER;
        }
        throw new java.lang.IllegalStateException(java.lang.String.valueOf(token));
    }

    private com.google.javascript.rhino.Node newNode(int type) {
        return new com.google.javascript.rhino.Node(type).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1) {
        return new com.google.javascript.rhino.Node(type, child1).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2) {
        return new com.google.javascript.rhino.Node(type, child1, child2).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2, com.google.javascript.rhino.Node child3) {
        return new com.google.javascript.rhino.Node(type, child1, child2, child3).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(java.lang.String value) {
        return com.google.javascript.rhino.IR.string(value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(int type, java.lang.String value) {
        return com.google.javascript.rhino.Node.newString(type, value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNumberNode(java.lang.Double value) {
        return com.google.javascript.rhino.IR.number(value).clonePropsFrom(templateNode);
    }
}
[1936594] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659904501466
GPR[SSUN]-1659904501466
-1345859678
GPR[SPVATF]-1659904501720
GPR[EPVATF]-1659904502343
GPR[SPS]-1659904502343
[1938080] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1044.
GPR[EPS]-1659904502953
GPR[SPVATF]-1659904502953
GPR[EPVATF]-1659904503654
GPR[SPS]-1659904503654
[1939375] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1044.
GPR[EPS]-1659904504247
GPR[ESUN]-1659904504247
GPR[SSUN]-1659904504247
-1345859678
GPR[ESUN]-1659904504496
GPR[SSUN]-1659904504496
-1345859678
GPR[SPVATF]-1659904504743
GPR[EPVATF]-1659904505369
GPR[SPS]-1659904505369
[1941108] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1021.
GPR[EPS]-1659904505980
GPR[SPVATF]-1659904505980
GPR[EPVATF]-1659904506628
GPR[SPS]-1659904506628
[1942336] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1021.
GPR[EPS]-1659904507208
GPR[ESUN]-1659904507208
GPR[SSUN]-1659904507208
GPR[ESUN]-1659904507208
GPR[SSUN]-1659904507208
1187751237
GPR[ESUN]-1659904507477
GPR[SSUN]-1659904507477
-1117079791
GPR[ESUN]-1659904507681
GPR[SSUN]-1659904507681
-1117079791
GPR[SPVATF]-1659904507874
GPR[EPVATF]-1659904508068
[1943196] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659904508068
GPR[EPVATF]-1659904508268
[1943396] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659904508268
GPR[SSUN]-1659904508268
-1117079791
GPR[SPVATF]-1659904508466
GPR[EPVATF]-1659904508662
[1943791] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659904508663
GPR[SSUN]-1659904508663
-1117079791
GPR[SPVATF]-1659904508862
GPR[EPVATF]-1659904509060
[1944188] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659904509060
GPR[SSUN]-1659904509060
1187751237
GPR[ESUN]-1659904509334
GPR[SSUN]-1659904509334
1187751237
GPR[SPVATF]-1659904509604
GPR[EPVATF]-1659904510275
GPR[SPS]-1659904510275
[1946227] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2772.
GPR[EPS]-1659904511099
GPR[ESUN]-1659904511099
GPR[SSUN]-1659904511099
-1345859678
GPR[ESUN]-1659904511346
GPR[SSUN]-1659904511346
-1345859678
GPR[SPVATF]-1659904511613
GPR[EPVATF]-1659904521166
GPR[SPS]-1659904521166
[1957234] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:617.
GPR[EPS]-1659904522106
GPR[ESUN]-1659904522106
GPR[SSUN]-1659904522106
GPR[ESUN]-1659904522106
GPR[SSUN]-1659904522106
GPR[ESUN]-1659904522106
GPR[SSUN]-1659904522106
GPR[ESUN]-1659904522106
GPR[SSUN]-1659904522106
GPR[ESUN]-1659904522106
GPR[SSUN]-1659904522106
GPR[ESUN]-1659904522106
GPR[SSUN]-1659904522106
GPR[ESUN]-1659904522106
GPR[SSUN]-1659904522106
GPR[ESUN]-1659904522106
GPR[SSUN]-1659904522106
GPR[ESUN]-1659904522106
GPR[SSUN]-1659904522106
GPR[ESUN]-1659904522106
GPR[SSUN]-1659904522106
GPR[ESUN]-1659904522106
GPR[SSUN]-1659904522106
GPR[ESUN]-1659904522106
GPR[SSUN]-1659904522106
GPR[ESUN]-1659904522106
GPR[SSUN]-1659904522106
GPR[ESUN]-1659904522106
GPR[SSUN]-1659904522106
GPR[ESUN]-1659904522106
GPR[SSUN]-1659904522106
GPR[ESUN]-1659904522106
GPR[SSUN]-1659904522106
GPR[ESUN]-1659904522106
GPR[SSUN]-1659904522106
GPR[ESUN]-1659904522106
GPR[SSUN]-1659904522106
GPR[ESUN]-1659904522106
GPR[SSUN]-1659904522106
GPR[ESUN]-1659904522106
GPR[SSUN]-1659904522106
GPR[ESUN]-1659904522106
GPR[SSUN]-1659904522106
GPR[ESUN]-1659904522106
GPR[SSUN]-1659904522106
GPR[ESUN]-1659904522106
GPR[SSUN]-1659904522106
GPR[ESUN]-1659904522106
GPR[SSUN]-1659904522106
1537627151
GPR[ESUN]-1659904522354
GPR[SSUN]-1659904522354
-1345859678
GPR[SPVATF]-1659904522670
GPR[EPVATF]-1659904523269
GPR[SPS]-1659904523269
[1958992] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1017.
GPR[EPS]-1659904523864
GPR[ESUN]-1659904523864
GPR[SSUN]-1659904523864
-1345859678
GPR[ESUN]-1659904524109
GPR[SSUN]-1659904524109
-1345859678
GPR[ESUN]-1659904524346
GPR[SSUN]-1659904524346
GPR[ESUN]-1659904524346
GPR[SSUN]-1659904524346
GPR[ESUN]-1659904524346
GPR[SSUN]-1659904524346
GPR[ESUN]-1659904524346
GPR[SSUN]-1659904524346
GPR[ESUN]-1659904524346
GPR[SSUN]-1659904524346
GPR[ESUN]-1659904524346
GPR[SSUN]-1659904524346
GPR[ESUN]-1659904524346
GPR[SSUN]-1659904524346
GPR[ESUN]-1659904524346
GPR[SSUN]-1659904524346
GPR[ESUN]-1659904524346
GPR[SSUN]-1659904524346
2433571
GPR[ESUN]-1659904524573
GPR[SSUN]-1659904524573
1852376448
GPR[SPVATF]-1659904524784
GPR[EPVATF]-1659904525343
GPR[SPS]-1659904525343
[1960970] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:157.
GPR[EPS]-1659904525842
GPR[SPVATF]-1659904525843
GPR[EPVATF]-1659904526404
GPR[SPS]-1659904526404
[1962040] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:157.
GPR[EPS]-1659904526912
GPR[ESUN]-1659904526912
GPR[SSUN]-1659904526912
1852376448
GPR[SPVATF]-1659904527131
GPR[EPVATF]-1659904527690
GPR[SPS]-1659904527690
[1963344] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:140.
GPR[EPS]-1659904528216
GPR[SPVATF]-1659904528216
GPR[EPVATF]-1659904528774
GPR[SPS]-1659904528775
[1964427] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:140.
GPR[EPS]-1659904529300
GPR[ESUN]-1659904529300
GPR[SSUN]-1659904529300
1852376448
GPR[ESUN]-1659904529512
GPR[SSUN]-1659904529512
1852376448
GPR[SPVATF]-1659904529722
GPR[EPVATF]-1659904530275
GPR[SPS]-1659904530275
[1965901] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:136.
GPR[EPS]-1659904530773
GPR[ESUN]-1659904530773
GPR[SSUN]-1659904530773
1852376448
GPR[ESUN]-1659904530989
GPR[SSUN]-1659904530989
1852376448
GPR[ESUN]-1659904531203
GPR[SSUN]-1659904531203
-718432441
GPR[SPVATF]-1659904531409
GPR[EPVATF]-1659904531956
GPR[SPS]-1659904531956
[1967763] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:641.
GPR[EPS]-1659904532635
GPR[ESUN]-1659904532635
GPR[SSUN]-1659904532636
-718432441
GPR[SPVATF]-1659904532846
GPR[EPVATF]-1659904533400
GPR[SPS]-1659904533400
[1969211] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:640.
GPR[EPS]-1659904534083
GPR[ESUN]-1659904534083
GPR[SSUN]-1659904534083
-718432441
GPR[SPVATF]-1659904534303
GPR[EPVATF]-1659904534855
GPR[SPS]-1659904534855
[1970665] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:638.
GPR[EPS]-1659904535537
GPR[ESUN]-1659904535537
GPR[SSUN]-1659904535537
1852376448
GPR[SPVATF]-1659904535754
GPR[EPVATF]-1659904536304
GPR[SPS]-1659904536304
[1971968] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:183.
GPR[EPS]-1659904536840
GPR[SPVATF]-1659904536840
GPR[EPVATF]-1659904537401
GPR[SPS]-1659904537401
[1973026] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:183.
GPR[EPS]-1659904537898
GPR[ESUN]-1659904537898
GPR[SSUN]-1659904537898
1852376448
GPR[ESUN]-1659904538114
GPR[SSUN]-1659904538114
-718432441
GPR[SPVATF]-1659904538322
GPR[EPVATF]-1659904538916
GPR[SPS]-1659904538917
[1974725] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:972.
GPR[EPS]-1659904539597
GPR[ESUN]-1659904539597
GPR[SSUN]-1659904539597
-1117079791
GPR[ESUN]-1659904539797
GPR[SSUN]-1659904539797
-1117079791
GPR[SPVATF]-1659904539991
GPR[EPVATF]-1659904540588
GPR[SPS]-1659904540588
[1976202] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:377.
GPR[EPS]-1659904541074
GPR[ESUN]-1659904541074
GPR[SSUN]-1659904541074
-1117079791
GPR[SPVATF]-1659904541269
GPR[EPVATF]-1659904541864
GPR[SPS]-1659904541864
[1977474] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:376.
GPR[EPS]-1659904542346
GPR[ESUN]-1659904542346
GPR[SSUN]-1659904542346
-1117079791
GPR[SPVATF]-1659904542541
GPR[EPVATF]-1659904543131
GPR[SPS]-1659904543131
[1978740] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:375.
GPR[EPS]-1659904543612
GPR[ESUN]-1659904543612
GPR[SSUN]-1659904543612
-1117079791
GPR[SPVATF]-1659904543809
GPR[EPVATF]-1659904544429
GPR[SPS]-1659904544429
[1980046] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:374.
GPR[EPS]-1659904544918
GPR[ESUN]-1659904544918
GPR[SSUN]-1659904544919
-1117079791
GPR[ESUN]-1659904545183
GPR[SSUN]-1659904545183
-1117079791
GPR[SPVATF]-1659904545375
GPR[EPVATF]-1659904546038
GPR[SPS]-1659904546038
[1981657] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:260.
GPR[EPS]-1659904546529
GPR[ESUN]-1659904546529
GPR[SSUN]-1659904546529
704176156
GPR[SPVATF]-1659904546740
GPR[EPVATF]-1659904547368
GPR[SPS]-1659904547368
[1983001] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:171.
GPR[EPS]-1659904547873
GPR[ESUN]-1659904547873
GPR[SSUN]-1659904547873
1187751237
GPR[SPVATF]-1659904548142
GPR[EPVATF]-1659904548759
GPR[SPS]-1659904548759
[1984562] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2671.
GPR[EPS]-1659904549435
GPR[SPVATF]-1659904549435
GPR[EPVATF]-1659904550040
GPR[SPS]-1659904550040
[1985878] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2671.
GPR[EPS]-1659904550750
GPR[ESUN]-1659904550750
GPR[SSUN]-1659904550750
-534884160
GPR[ESUN]-1659904551083
GPR[SSUN]-1659904551083
-534884160
GPR[ESUN]-1659904551427
GPR[SSUN]-1659904551427
-718432441
GPR[SPVATF]-1659904551666
GPR[EPVATF]-1659904552304
GPR[SPS]-1659904552304
[1988167] ERROR ConstraintModelBuilder - Unable to compile the change: 
class CodeGenerator {
    private final java.util.Map<java.lang.String, java.lang.String> ESCAPED_JS_STRINGS = com.google.common.collect.Maps.newHashMap();

    private static final char[] HEX_CHARS = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };

    private final com.google.javascript.jscomp.CodeConsumer cc;

    private final java.nio.charset.CharsetEncoder outputCharsetEncoder;

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer, java.nio.charset.Charset outputCharset) {
        cc = consumer;
        if ((outputCharset == null) || (outputCharset == com.google.common.base.Charsets.US_ASCII)) {
            this.outputCharsetEncoder = null;
        } else {
            this.outputCharsetEncoder = outputCharset.newEncoder();
        }
    }

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer) {
        this(consumer, null);
    }

    public void tagAsStrict() {
        add("'use strict';");
    }

    void add(java.lang.String str) {
        cc.add(str);
    }

    private void addIdentifier(java.lang.String identifier) {
        cc.addIdentifier(com.google.javascript.jscomp.CodeGenerator.identifierEscape(identifier));
    }

    void add(com.google.javascript.rhino.Node n) {
        add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void add(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if (!cc.continueProcessing()) {
            return;
        }
        int type = n.getType();
        java.lang.String opstr = com.google.javascript.jscomp.NodeUtil.opToStr(type);
        int childCount = n.getChildCount();
        com.google.javascript.rhino.Node first = n.getFirstChild();
        com.google.javascript.rhino.Node last = n.getLastChild();
        if ((opstr != null) && (first != last)) {
            com.google.common.base.Preconditions.checkState(childCount == 2, "Bad binary operator \"%s\": expected 2 arguments but got %s", opstr, childCount);
            int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
            com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);
            if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else {
                unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);
            }
            return;
        }
        cc.startSourceMapping(n);
        switch (type) {
            case com.google.javascript.rhino.Token.TRY :
                {
                    com.google.common.base.Preconditions.checkState(first.getNext().isBlock() && (!first.getNext().hasMoreThanOneChild()));
                    com.google.common.base.Preconditions.checkState((childCount >= 2) && (childCount <= 3));
                    add("try");
                    add(first, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    com.google.javascript.rhino.Node catchblock = first.getNext().getFirstChild();
                    if (catchblock != null) {
                        add(catchblock);
                    }
                    if (childCount == 3) {
                        add("finally");
                        add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CATCH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("catch(");
                add(first);
                add(")");
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.THROW :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("throw");
                add(first);
                cc.endStatement(true);
                break;
            case com.google.javascript.rhino.Token.RETURN :
                add("return");
                if (childCount == 1) {
                    add(first);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 0);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.VAR :
                if (first != null) {
                    add("var ");
                    addList(first, false, getContextForNoInOperator(context));
                }
                break;
            case com.google.javascript.rhino.Token.LABEL_NAME :
                com.google.common.base.Preconditions.checkState(!n.getString().isEmpty());
                addIdentifier(n.getString());
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ((first == null) || first.isEmpty()) {
                    addIdentifier(n.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    addIdentifier(n.getString());
                    cc.addOp("=", true);
                    if (first.isComma()) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.ASSIGN), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    } else {
                        addExpr(first, 0, getContextForNoInOperator(context));
                    }
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                add("[");
                addArrayList(first);
                add("]");
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                add("(");
                addList(first);
                add(")");
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                unrollBinaryOperator(n, com.google.javascript.rhino.Token.COMMA, ",", context, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, 0, 0);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addNumber(n.getDouble());
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.NEG :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    if (n.getFirstChild().isNumber()) {
                        cc.addNumber(-n.getFirstChild().getDouble());
                    } else {
                        cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
                    addExpr(first, p + 1, context);
                    cc.addOp("?", true);
                    addExpr(first.getNext(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    cc.addOp(":", true);
                    addExpr(last, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.REGEXP :
                if ((!first.isString()) || (!last.isString())) {
                    throw new java.lang.Error("Expected children to be strings");
                }
                java.lang.String regexp = com.google.javascript.jscomp.CodeGenerator.regexpEscape(first.getString(), outputCharsetEncoder);
                if (childCount == 2) {
                    add(regexp + last.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    add(regexp);
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                if (n.getClass() != com.google.javascript.rhino.Node.class) {
                    throw new java.lang.Error("Unexpected Node subclass.");
                }
                com.google.common.base.Preconditions.checkState(childCount == 3);
                boolean funcNeedsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                if (funcNeedsParens) {
                    add("(");
                }
                add("function");
                add(first);
                add(first.getNext());
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                cc.endFunction(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                if (funcNeedsParens) {
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                com.google.common.base.Preconditions.checkState(n.getParent().isObjectLit());
                com.google.common.base.Preconditions.checkState(childCount == 1);
                com.google.common.base.Preconditions.checkState(first.isFunction());
                com.google.common.base.Preconditions.checkState(first.getFirstChild().getString().isEmpty());
                if (type == com.google.javascript.rhino.Token.GETTER_DEF) {
                    com.google.common.base.Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());
                    add("get ");
                } else {
                    com.google.common.base.Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
                    add("set ");
                }
                java.lang.String name = n.getString();
                com.google.javascript.rhino.Node fn = first;
                com.google.javascript.rhino.Node parameters = fn.getChildAtIndex(1);
                com.google.javascript.rhino.Node body = fn.getLastChild();
                if (((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {
                    add(name);
                } else {
                    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);
                    if (!java.lang.Double.isNaN(d)) {
                        cc.addNumber(d);
                    } else {
                        addJsString(n);
                    }
                }
                add(parameters);
                add(body, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                {
                    if (n.getClass() != com.google.javascript.rhino.Node.class) {
                        throw new java.lang.Error("Unexpected Node subclass.");
                    }
                    boolean preserveBlock = context == com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
                    if (preserveBlock) {
                        cc.beginBlock();
                    }
                    boolean preferLineBreaks = (type == com.google.javascript.rhino.Token.SCRIPT) || ((((type == com.google.javascript.rhino.Token.BLOCK) && (!preserveBlock)) && (n.getParent() != null)) && n.getParent().isScript());
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        add(c, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                        if (c.isVar()) {
                            cc.endStatement();
                        }
                        if (c.isFunction()) {
                            cc.maybeLineBreak();
                        }
                        if (preferLineBreaks) {
                            cc.notePreferredLineBreak();
                        }
                    }
                    if (preserveBlock) {
                        cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.FOR :
                if (childCount == 4) {
                    add("for(");
                    if (first.isVar()) {
                        add(first, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    } else {
                        addExpr(first, 0, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    }
                    add(";");
                    add(first.getNext());
                    add(";");
                    add(first.getNext().getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    add("for(");
                    add(first);
                    add("in");
                    add(first.getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                }
                break;
            case com.google.javascript.rhino.Token.DO :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("do");
                addNonEmptyStatement(first, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                add("while(");
                add(last);
                add(")");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.WHILE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("while(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.EMPTY :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETPROP: expected 2 children, but got %s", childCount);
                    com.google.common.base.Preconditions.checkState(last.isString(), "Bad GETPROP: RHS should be STRING");
                    boolean needsParens = first.isNumber();
                    if (needsParens) {
                        add("(");
                    }
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                    if (needsParens) {
                        add(")");
                    }
                    add(".");
                    addIdentifier(last.getString());
                    break;
                }
            case com.google.javascript.rhino.Token.GETELEM :
                com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETELEM: expected 2 children but got %s", childCount);
                addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                add("[");
                add(first.getNext());
                add("]");
                break;
            case com.google.javascript.rhino.Token.WITH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("with(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    java.lang.String o = (type == com.google.javascript.rhino.Token.INC) ? "++" : "--";
                    int postProp = n.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
                    if (postProp != 0) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                        cc.addOp(o, false);
                    } else {
                        cc.addOp(o, false);
                        add(first);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CALL :
                if (isIndirectEval(first) || (n.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) && com.google.javascript.jscomp.NodeUtil.isGet(first))) {
                    add("(0,");
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.COMMA), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    add(")");
                } else {
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                }
                add("(");
                addList(first.getNext());
                add(")");
                break;
            case com.google.javascript.rhino.Token.IF :
                boolean hasElse = childCount == 3;
                boolean ambiguousElseClause = (context == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE) && (!hasElse);
                if (ambiguousElseClause) {
                    cc.beginBlock();
                }
                add("if(");
                add(first);
                add(")");
                if (hasElse) {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE, false);
                    add("else");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                    com.google.common.base.Preconditions.checkState(childCount == 2);
                }
                if (ambiguousElseClause) {
                    cc.endBlock();
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("null");
                break;
            case com.google.javascript.rhino.Token.THIS :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("this");
                break;
            case com.google.javascript.rhino.Token.FALSE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("false");
                break;
            case com.google.javascript.rhino.Token.TRUE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("true");
                break;
            case com.google.javascript.rhino.Token.CONTINUE :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("continue");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.DEBUGGER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("debugger");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.BREAK :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("break");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first, com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR);
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.NEW :
                add("new ");
                int precedence = com.google.javascript.jscomp.NodeUtil.precedence(type);
                if (com.google.javascript.jscomp.NodeUtil.containsType(first, com.google.javascript.rhino.Token.CALL, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION)) {
                    precedence = com.google.javascript.jscomp.NodeUtil.precedence(first.getType()) + 1;
                }
                addExpr(first, precedence, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                com.google.javascript.rhino.Node next = first.getNext();
                if (next != null) {
                    add("(");
                    addList(next);
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.STRING_KEY :
                com.google.common.base.Preconditions.checkState(childCount == 1, "Object lit key must have 1 child");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.STRING :
                com.google.common.base.Preconditions.checkState(childCount == 0, "A string may not have children");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("delete ");
                add(first);
                break;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                {
                    boolean needsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                    if (needsParens) {
                        add("(");
                    }
                    add("{");
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        if (c != first) {
                            cc.listSeparator();
                        }
                        if (c.isGetterDef() || c.isSetterDef()) {
                            add(c);
                        } else {
                            com.google.common.base.Preconditions.checkState(c.isStringKey());
                            java.lang.String key = c.getString();
                            if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {
                                add(key);
                            } else {
                                double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);
                                if (!java.lang.Double.isNaN(d)) {
                                    cc.addNumber(d);
                                } else {
                                    addExpr(c, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                                }
                            }
                            add(":");
                            addExpr(c.getFirstChild(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                        }
                    }
                    add("}");
                    if (needsParens) {
                        add(")");
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.SWITCH :
                add("switch(");
                add(first);
                add(")");
                cc.beginBlock();
                addAllSiblings(first.getNext());
                cc.endBlock(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("case ");
                add(first);
                addCaseBody(last);
                break;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("default");
                addCaseBody(first);
                break;
            case com.google.javascript.rhino.Token.LABEL :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                if (!first.isLabelName()) {
                    throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                }
                add(first);
                add(":");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), true);
                break;
            default :
                throw new java.lang.Error((("Unknown type " + type) + "\n") + n.toStringTree());
        }
        cc.endSourceMapping(n);
    }

    private void unrollBinaryOperator(com.google.javascript.rhino.Node n, int op, java.lang.String opStr, com.google.javascript.jscomp.CodeGenerator.Context context, com.google.javascript.jscomp.CodeGenerator.Context rhsContext, int leftPrecedence, int rightPrecedence) {
        com.google.javascript.rhino.Node firstNonOperator = n.getFirstChild();
        while (firstNonOperator.getType() == op) {
            firstNonOperator = firstNonOperator.getFirstChild();
        } 
        addExpr(firstNonOperator, leftPrecedence, context);
        com.google.javascript.rhino.Node current = firstNonOperator;
        do {
            current = current.getParent();
            cc.addOp(opStr, true);
            addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);
        } while (current != n );
    }

    static boolean isSimpleNumber(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if ((c < '0') || (c > '9')) {
                return false;
            }
        }
        return (len > 0) && (s.charAt(0) != '0');
    }

    static double getSimpleNumber(java.lang.String s) {
        if (com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(s)) {
            try {
                long l = java.lang.Long.parseLong(s);
                if (l < com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                    return l;
                }
            } catch (java.lang.NumberFormatException e) {
            }
        }
        return java.lang.Double.NaN;
    }

    private boolean isIndirectEval(com.google.javascript.rhino.Node n) {
        return (n.isName() && "eval".equals(n.getString())) && (!n.getBooleanProp(com.google.javascript.rhino.Node.DIRECT_EVAL));
    }

    private void addNonEmptyStatement(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context, boolean allowNonBlockChild) {
        com.google.javascript.rhino.Node nodeToProcess = n;
        if ((!allowNonBlockChild) && (!n.isBlock())) {
            throw new java.lang.Error("Missing BLOCK child.");
        }
        if (n.isBlock()) {
            int count = com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2);
            if (count == 0) {
                if (cc.shouldPreserveExtraBlocks()) {
                    cc.beginBlock();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                } else {
                    cc.endStatement(true);
                }
                return;
            }
            if (count == 1) {
                com.google.javascript.rhino.Node firstAndOnlyChild = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n);
                boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();
                if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {
                    cc.beginBlock();
                    add(firstAndOnlyChild, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                    cc.maybeLineBreak();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    return;
                } else {
                    nodeToProcess = firstAndOnlyChild;
                }
            }
            if (count > 1) {
                context = com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
            }
        }
        if (nodeToProcess.isEmpty()) {
            cc.endStatement(true);
        } else {
            add(nodeToProcess, context);
            if (nodeToProcess.isVar()) {
                cc.endStatement();
            }
        }
    }

    private boolean isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node n) {
        if (n.isLabel()) {
            com.google.javascript.rhino.Node labeledStatement = n.getLastChild();
            if (!labeledStatement.isBlock()) {
                return isOneExactlyFunctionOrDo(labeledStatement);
            } else if (com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2) == 1) {
                return isOneExactlyFunctionOrDo(com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n));
            } else {
                return false;
            }
        } else {
            return n.isFunction() || n.isDo();
        }
    }

    private void addExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if ((com.google.javascript.jscomp.NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE) && n.isIn())) {
            add("(");
            add(n, clearContextForNoInOperator(context));
            add(")");
        } else {
            add(n, context);
        }
    }

    void addList(com.google.javascript.rhino.Node firstInList) {
        addList(firstInList, true, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument) {
        addList(firstInList, isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context lhsContext) {
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            boolean isFirst = n == firstInList;
            if (isFirst) {
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
            } else {
                cc.listSeparator();
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            }
        }
    }

    void addArrayList(com.google.javascript.rhino.Node firstInList) {
        boolean lastWasEmpty = false;
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            if (n != firstInList) {
                cc.listSeparator();
            }
            addExpr(n, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            lastWasEmpty = n.isEmpty();
        }
        if (lastWasEmpty) {
            cc.listSeparator();
        }
    }

    void addCaseBody(com.google.javascript.rhino.Node caseBody) {
        cc.beginCaseBody();
        add(caseBody);
        cc.endCaseBody();
    }

    void addAllSiblings(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n; c != null; c = c.getNext()) {
            add(c);
        }
    }

    private void addJsString(com.google.javascript.rhino.Node n) {
        java.lang.String s = n.getString();
        boolean useSlashV = n.getBooleanProp(com.google.javascript.rhino.Node.SLASH_V);
        if (useSlashV) {
            add(jsString(n.getString(), useSlashV));
        } else {
            java.lang.String cached = ESCAPED_JS_STRINGS.get(s);
            if (cached == null) {
                cached = jsString(n.getString(), useSlashV);
                ESCAPED_JS_STRINGS.put(s, cached);
            }
            add(cached);
        }
    }

    private java.lang.String jsString(java.lang.String s, boolean useSlashV) {
        int singleq = 0;
        int doubleq = 0;
        for (int i = 0; i < s.length(); i++) {
            switch (s.charAt(i)) {
                case '"' :
                    doubleq++;
                    break;
                case '\'' :
                    singleq++;
                    break;
            }
        }
        java.lang.String doublequote;
        java.lang.String singlequote;
        char quote;
        if (singleq < doubleq) {
            quote = '\'';
            doublequote = "\"";
            singlequote = "\\\'";
        } else {
            quote = '\"';
            doublequote = "\\\"";
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(414).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(414).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(414).collectInput("singleq",singleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(414).collectInput("com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",com.google.javascript.jscomp.CodeGenerator.HEX_CHARS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(414).collectInput("com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS",com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(414).collectInput("s",s);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(414).collectInput("useSlashV",useSlashV);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(414).collectInput("doubleq",doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(414).collectInput("com.google.javascript.jscomp.CodeGenerator.this.cc",com.google.javascript.jscomp.CodeGenerator.this.cc);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(414).collectInput("com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder",com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(414).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(414).collectionEnds();
            }
            if (runtimeAngelicValue)
                singlequote = "\'";

        }
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder, useSlashV);
    }

    static java.lang.String regexpEscape(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '/', "\"", "'", "\\", outputCharsetEncoder, false);
    }

    static java.lang.String escapeToDoubleQuotedJsString(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '"', "\\\"", "\'", "\\\\", null, false);
    }

    static java.lang.String regexpEscape(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.regexpEscape(s, null);
    }

    private static java.lang.String strEscape(java.lang.String s, char quote, java.lang.String doublequoteEscape, java.lang.String singlequoteEscape, java.lang.String backslashEscape, java.nio.charset.CharsetEncoder outputCharsetEncoder, boolean useSlashV) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder(s.length() + 2);
        sb.append(quote);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch (c) {
                case '\u0000' :
                    sb.append("\\x00");
                    break;
                case '\u000b' :
                    if (useSlashV) {
                        sb.append("\\v");
                    } else {
                        sb.append("\\x0B");
                    }
                    break;
                case '\b' :
                    sb.append("\\b");
                    break;
                case '\f' :
                    sb.append("\\f");
                    break;
                case '\n' :
                    sb.append("\\n");
                    break;
                case '\r' :
                    sb.append("\\r");
                    break;
                case '\t' :
                    sb.append("\\t");
                    break;
                case '\\' :
                    sb.append(backslashEscape);
                    break;
                case '\"' :
                    sb.append(doublequoteEscape);
                    break;
                case '\'' :
                    sb.append(singlequoteEscape);
                    break;
                case ' ' :
                    sb.append("\\u2028");
                    break;
                case ' ' :
                    sb.append("\\u2029");
                    break;
                case '>' :
                    if ((i >= 2) && (((s.charAt(i - 1) == '-') && (s.charAt(i - 2) == '-')) || ((s.charAt(i - 1) == ']') && (s.charAt(i - 2) == ']')))) {
                        sb.append("\\>");
                    } else {
                        sb.append(c);
                    }
                    break;
                case '<' :
                    final java.lang.String END_SCRIPT = "/script";
                    final java.lang.String START_COMMENT = "!--";
                    if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {
                        sb.append("<\\");
                    } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {
                        sb.append("<\\");
                    } else {
                        sb.append(c);
                    }
                    break;
                default :
                    if (outputCharsetEncoder != null) {
                        if (outputCharsetEncoder.canEncode(c)) {
                            sb.append(c);
                        } else {
                            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                        }
                    } else if ((c > 0x1f) && (c < 0x7f)) {
                        sb.append(c);
                    } else {
                        com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                    }
            }
        }
        sb.append(quote);
        return sb.toString();
    }

    static java.lang.String identifierEscape(java.lang.String s) {
        if (com.google.javascript.jscomp.NodeUtil.isLatin(s)) {
            return s;
        }
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if ((c > 0x1f) && (c < 0x7f)) {
                sb.append(c);
            } else {
                com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
            }
        }
        return sb.toString();
    }

    private static int getNonEmptyChildCount(com.google.javascript.rhino.Node n, int maxCount) {
        int i = 0;
        com.google.javascript.rhino.Node c = n.getFirstChild();
        for (; (c != null) && (i < maxCount); c = c.getNext()) {
            if (c.isBlock()) {
                i += com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(c, maxCount - i);
            } else if (!c.isEmpty()) {
                i++;
            }
        }
        return i;
    }

    private static com.google.javascript.rhino.Node getFirstNonEmptyChild(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.isBlock()) {
                com.google.javascript.rhino.Node result = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(c);
                if (result != null) {
                    return result;
                }
            } else if (!c.isEmpty()) {
                return c;
            }
        }
        return null;
    }

    enum Context {

        STATEMENT,
        BEFORE_DANGLING_ELSE,
        START_OF_EXPR,
        PRESERVE_BLOCK,
        IN_FOR_INIT_CLAUSE,
        OTHER;}

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNonEmptyExpression(com.google.javascript.jscomp.CodeGenerator.Context currentContext) {
        return currentContext == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE ? com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context clearContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.OTHER : context;
    }

    private static void appendHexJavaScriptRepresentation(java.lang.StringBuilder sb, char c) {
        try {
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(c, sb);
        } catch (java.io.IOException ex) {
            throw new java.lang.RuntimeException(ex);
        }
    }

    private static void appendHexJavaScriptRepresentation(int codePoint, java.lang.Appendable out) throws java.io.IOException {
        if (java.lang.Character.isSupplementaryCodePoint(codePoint)) {
            char[] surrogates = java.lang.Character.toChars(codePoint);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[0], out);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[1], out);
            return;
        }
        out.append("\\u").append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 12) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 8) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 4) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[codePoint & 0xf]);
    }
}
[1988167] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659904553039
GPR[SSUN]-1659904553039
-718432441
GPR[SPVATF]-1659904553259
GPR[EPVATF]-1659904553892
GPR[SPS]-1659904553892
[1989685] ERROR ConstraintModelBuilder - Unable to compile the change: 
class CodeGenerator {
    private final java.util.Map<java.lang.String, java.lang.String> ESCAPED_JS_STRINGS = com.google.common.collect.Maps.newHashMap();

    private static final char[] HEX_CHARS = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };

    private final com.google.javascript.jscomp.CodeConsumer cc;

    private final java.nio.charset.CharsetEncoder outputCharsetEncoder;

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer, java.nio.charset.Charset outputCharset) {
        cc = consumer;
        if ((outputCharset == null) || (outputCharset == com.google.common.base.Charsets.US_ASCII)) {
            this.outputCharsetEncoder = null;
        } else {
            this.outputCharsetEncoder = outputCharset.newEncoder();
        }
    }

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer) {
        this(consumer, null);
    }

    public void tagAsStrict() {
        add("'use strict';");
    }

    void add(java.lang.String str) {
        cc.add(str);
    }

    private void addIdentifier(java.lang.String identifier) {
        cc.addIdentifier(com.google.javascript.jscomp.CodeGenerator.identifierEscape(identifier));
    }

    void add(com.google.javascript.rhino.Node n) {
        add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void add(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if (!cc.continueProcessing()) {
            return;
        }
        int type = n.getType();
        java.lang.String opstr = com.google.javascript.jscomp.NodeUtil.opToStr(type);
        int childCount = n.getChildCount();
        com.google.javascript.rhino.Node first = n.getFirstChild();
        com.google.javascript.rhino.Node last = n.getLastChild();
        if ((opstr != null) && (first != last)) {
            com.google.common.base.Preconditions.checkState(childCount == 2, "Bad binary operator \"%s\": expected 2 arguments but got %s", opstr, childCount);
            int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
            com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);
            if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else {
                unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);
            }
            return;
        }
        cc.startSourceMapping(n);
        switch (type) {
            case com.google.javascript.rhino.Token.TRY :
                {
                    com.google.common.base.Preconditions.checkState(first.getNext().isBlock() && (!first.getNext().hasMoreThanOneChild()));
                    com.google.common.base.Preconditions.checkState((childCount >= 2) && (childCount <= 3));
                    add("try");
                    add(first, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    com.google.javascript.rhino.Node catchblock = first.getNext().getFirstChild();
                    if (catchblock != null) {
                        add(catchblock);
                    }
                    if (childCount == 3) {
                        add("finally");
                        add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CATCH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("catch(");
                add(first);
                add(")");
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.THROW :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("throw");
                add(first);
                cc.endStatement(true);
                break;
            case com.google.javascript.rhino.Token.RETURN :
                add("return");
                if (childCount == 1) {
                    add(first);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 0);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.VAR :
                if (first != null) {
                    add("var ");
                    addList(first, false, getContextForNoInOperator(context));
                }
                break;
            case com.google.javascript.rhino.Token.LABEL_NAME :
                com.google.common.base.Preconditions.checkState(!n.getString().isEmpty());
                addIdentifier(n.getString());
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ((first == null) || first.isEmpty()) {
                    addIdentifier(n.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    addIdentifier(n.getString());
                    cc.addOp("=", true);
                    if (first.isComma()) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.ASSIGN), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    } else {
                        addExpr(first, 0, getContextForNoInOperator(context));
                    }
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                add("[");
                addArrayList(first);
                add("]");
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                add("(");
                addList(first);
                add(")");
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                unrollBinaryOperator(n, com.google.javascript.rhino.Token.COMMA, ",", context, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, 0, 0);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addNumber(n.getDouble());
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.NEG :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    if (n.getFirstChild().isNumber()) {
                        cc.addNumber(-n.getFirstChild().getDouble());
                    } else {
                        cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
                    addExpr(first, p + 1, context);
                    cc.addOp("?", true);
                    addExpr(first.getNext(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    cc.addOp(":", true);
                    addExpr(last, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.REGEXP :
                if ((!first.isString()) || (!last.isString())) {
                    throw new java.lang.Error("Expected children to be strings");
                }
                java.lang.String regexp = com.google.javascript.jscomp.CodeGenerator.regexpEscape(first.getString(), outputCharsetEncoder);
                if (childCount == 2) {
                    add(regexp + last.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    add(regexp);
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                if (n.getClass() != com.google.javascript.rhino.Node.class) {
                    throw new java.lang.Error("Unexpected Node subclass.");
                }
                com.google.common.base.Preconditions.checkState(childCount == 3);
                boolean funcNeedsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                if (funcNeedsParens) {
                    add("(");
                }
                add("function");
                add(first);
                add(first.getNext());
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                cc.endFunction(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                if (funcNeedsParens) {
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                com.google.common.base.Preconditions.checkState(n.getParent().isObjectLit());
                com.google.common.base.Preconditions.checkState(childCount == 1);
                com.google.common.base.Preconditions.checkState(first.isFunction());
                com.google.common.base.Preconditions.checkState(first.getFirstChild().getString().isEmpty());
                if (type == com.google.javascript.rhino.Token.GETTER_DEF) {
                    com.google.common.base.Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());
                    add("get ");
                } else {
                    com.google.common.base.Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
                    add("set ");
                }
                java.lang.String name = n.getString();
                com.google.javascript.rhino.Node fn = first;
                com.google.javascript.rhino.Node parameters = fn.getChildAtIndex(1);
                com.google.javascript.rhino.Node body = fn.getLastChild();
                if (((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {
                    add(name);
                } else {
                    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);
                    if (!java.lang.Double.isNaN(d)) {
                        cc.addNumber(d);
                    } else {
                        addJsString(n);
                    }
                }
                add(parameters);
                add(body, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                {
                    if (n.getClass() != com.google.javascript.rhino.Node.class) {
                        throw new java.lang.Error("Unexpected Node subclass.");
                    }
                    boolean preserveBlock = context == com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
                    if (preserveBlock) {
                        cc.beginBlock();
                    }
                    boolean preferLineBreaks = (type == com.google.javascript.rhino.Token.SCRIPT) || ((((type == com.google.javascript.rhino.Token.BLOCK) && (!preserveBlock)) && (n.getParent() != null)) && n.getParent().isScript());
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        add(c, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                        if (c.isVar()) {
                            cc.endStatement();
                        }
                        if (c.isFunction()) {
                            cc.maybeLineBreak();
                        }
                        if (preferLineBreaks) {
                            cc.notePreferredLineBreak();
                        }
                    }
                    if (preserveBlock) {
                        cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.FOR :
                if (childCount == 4) {
                    add("for(");
                    if (first.isVar()) {
                        add(first, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    } else {
                        addExpr(first, 0, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    }
                    add(";");
                    add(first.getNext());
                    add(";");
                    add(first.getNext().getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    add("for(");
                    add(first);
                    add("in");
                    add(first.getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                }
                break;
            case com.google.javascript.rhino.Token.DO :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("do");
                addNonEmptyStatement(first, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                add("while(");
                add(last);
                add(")");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.WHILE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("while(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.EMPTY :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETPROP: expected 2 children, but got %s", childCount);
                    com.google.common.base.Preconditions.checkState(last.isString(), "Bad GETPROP: RHS should be STRING");
                    boolean needsParens = first.isNumber();
                    if (needsParens) {
                        add("(");
                    }
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                    if (needsParens) {
                        add(")");
                    }
                    add(".");
                    addIdentifier(last.getString());
                    break;
                }
            case com.google.javascript.rhino.Token.GETELEM :
                com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETELEM: expected 2 children but got %s", childCount);
                addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                add("[");
                add(first.getNext());
                add("]");
                break;
            case com.google.javascript.rhino.Token.WITH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("with(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    java.lang.String o = (type == com.google.javascript.rhino.Token.INC) ? "++" : "--";
                    int postProp = n.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
                    if (postProp != 0) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                        cc.addOp(o, false);
                    } else {
                        cc.addOp(o, false);
                        add(first);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CALL :
                if (isIndirectEval(first) || (n.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) && com.google.javascript.jscomp.NodeUtil.isGet(first))) {
                    add("(0,");
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.COMMA), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    add(")");
                } else {
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                }
                add("(");
                addList(first.getNext());
                add(")");
                break;
            case com.google.javascript.rhino.Token.IF :
                boolean hasElse = childCount == 3;
                boolean ambiguousElseClause = (context == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE) && (!hasElse);
                if (ambiguousElseClause) {
                    cc.beginBlock();
                }
                add("if(");
                add(first);
                add(")");
                if (hasElse) {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE, false);
                    add("else");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                    com.google.common.base.Preconditions.checkState(childCount == 2);
                }
                if (ambiguousElseClause) {
                    cc.endBlock();
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("null");
                break;
            case com.google.javascript.rhino.Token.THIS :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("this");
                break;
            case com.google.javascript.rhino.Token.FALSE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("false");
                break;
            case com.google.javascript.rhino.Token.TRUE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("true");
                break;
            case com.google.javascript.rhino.Token.CONTINUE :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("continue");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.DEBUGGER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("debugger");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.BREAK :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("break");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first, com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR);
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.NEW :
                add("new ");
                int precedence = com.google.javascript.jscomp.NodeUtil.precedence(type);
                if (com.google.javascript.jscomp.NodeUtil.containsType(first, com.google.javascript.rhino.Token.CALL, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION)) {
                    precedence = com.google.javascript.jscomp.NodeUtil.precedence(first.getType()) + 1;
                }
                addExpr(first, precedence, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                com.google.javascript.rhino.Node next = first.getNext();
                if (next != null) {
                    add("(");
                    addList(next);
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.STRING_KEY :
                com.google.common.base.Preconditions.checkState(childCount == 1, "Object lit key must have 1 child");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.STRING :
                com.google.common.base.Preconditions.checkState(childCount == 0, "A string may not have children");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("delete ");
                add(first);
                break;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                {
                    boolean needsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                    if (needsParens) {
                        add("(");
                    }
                    add("{");
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        if (c != first) {
                            cc.listSeparator();
                        }
                        if (c.isGetterDef() || c.isSetterDef()) {
                            add(c);
                        } else {
                            com.google.common.base.Preconditions.checkState(c.isStringKey());
                            java.lang.String key = c.getString();
                            if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {
                                add(key);
                            } else {
                                double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);
                                if (!java.lang.Double.isNaN(d)) {
                                    cc.addNumber(d);
                                } else {
                                    addExpr(c, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                                }
                            }
                            add(":");
                            addExpr(c.getFirstChild(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                        }
                    }
                    add("}");
                    if (needsParens) {
                        add(")");
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.SWITCH :
                add("switch(");
                add(first);
                add(")");
                cc.beginBlock();
                addAllSiblings(first.getNext());
                cc.endBlock(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("case ");
                add(first);
                addCaseBody(last);
                break;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("default");
                addCaseBody(first);
                break;
            case com.google.javascript.rhino.Token.LABEL :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                if (!first.isLabelName()) {
                    throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                }
                add(first);
                add(":");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), true);
                break;
            default :
                throw new java.lang.Error((("Unknown type " + type) + "\n") + n.toStringTree());
        }
        cc.endSourceMapping(n);
    }

    private void unrollBinaryOperator(com.google.javascript.rhino.Node n, int op, java.lang.String opStr, com.google.javascript.jscomp.CodeGenerator.Context context, com.google.javascript.jscomp.CodeGenerator.Context rhsContext, int leftPrecedence, int rightPrecedence) {
        com.google.javascript.rhino.Node firstNonOperator = n.getFirstChild();
        while (firstNonOperator.getType() == op) {
            firstNonOperator = firstNonOperator.getFirstChild();
        } 
        addExpr(firstNonOperator, leftPrecedence, context);
        com.google.javascript.rhino.Node current = firstNonOperator;
        do {
            current = current.getParent();
            cc.addOp(opStr, true);
            addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);
        } while (current != n );
    }

    static boolean isSimpleNumber(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if ((c < '0') || (c > '9')) {
                return false;
            }
        }
        return (len > 0) && (s.charAt(0) != '0');
    }

    static double getSimpleNumber(java.lang.String s) {
        if (com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(s)) {
            try {
                long l = java.lang.Long.parseLong(s);
                if (l < com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                    return l;
                }
            } catch (java.lang.NumberFormatException e) {
            }
        }
        return java.lang.Double.NaN;
    }

    private boolean isIndirectEval(com.google.javascript.rhino.Node n) {
        return (n.isName() && "eval".equals(n.getString())) && (!n.getBooleanProp(com.google.javascript.rhino.Node.DIRECT_EVAL));
    }

    private void addNonEmptyStatement(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context, boolean allowNonBlockChild) {
        com.google.javascript.rhino.Node nodeToProcess = n;
        if ((!allowNonBlockChild) && (!n.isBlock())) {
            throw new java.lang.Error("Missing BLOCK child.");
        }
        if (n.isBlock()) {
            int count = com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2);
            if (count == 0) {
                if (cc.shouldPreserveExtraBlocks()) {
                    cc.beginBlock();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                } else {
                    cc.endStatement(true);
                }
                return;
            }
            if (count == 1) {
                com.google.javascript.rhino.Node firstAndOnlyChild = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n);
                boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();
                if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {
                    cc.beginBlock();
                    add(firstAndOnlyChild, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                    cc.maybeLineBreak();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    return;
                } else {
                    nodeToProcess = firstAndOnlyChild;
                }
            }
            if (count > 1) {
                context = com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
            }
        }
        if (nodeToProcess.isEmpty()) {
            cc.endStatement(true);
        } else {
            add(nodeToProcess, context);
            if (nodeToProcess.isVar()) {
                cc.endStatement();
            }
        }
    }

    private boolean isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node n) {
        if (n.isLabel()) {
            com.google.javascript.rhino.Node labeledStatement = n.getLastChild();
            if (!labeledStatement.isBlock()) {
                return isOneExactlyFunctionOrDo(labeledStatement);
            } else if (com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2) == 1) {
                return isOneExactlyFunctionOrDo(com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n));
            } else {
                return false;
            }
        } else {
            return n.isFunction() || n.isDo();
        }
    }

    private void addExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if ((com.google.javascript.jscomp.NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE) && n.isIn())) {
            add("(");
            add(n, clearContextForNoInOperator(context));
            add(")");
        } else {
            add(n, context);
        }
    }

    void addList(com.google.javascript.rhino.Node firstInList) {
        addList(firstInList, true, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument) {
        addList(firstInList, isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context lhsContext) {
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            boolean isFirst = n == firstInList;
            if (isFirst) {
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
            } else {
                cc.listSeparator();
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            }
        }
    }

    void addArrayList(com.google.javascript.rhino.Node firstInList) {
        boolean lastWasEmpty = false;
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            if (n != firstInList) {
                cc.listSeparator();
            }
            addExpr(n, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            lastWasEmpty = n.isEmpty();
        }
        if (lastWasEmpty) {
            cc.listSeparator();
        }
    }

    void addCaseBody(com.google.javascript.rhino.Node caseBody) {
        cc.beginCaseBody();
        add(caseBody);
        cc.endCaseBody();
    }

    void addAllSiblings(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n; c != null; c = c.getNext()) {
            add(c);
        }
    }

    private void addJsString(com.google.javascript.rhino.Node n) {
        java.lang.String s = n.getString();
        boolean useSlashV = n.getBooleanProp(com.google.javascript.rhino.Node.SLASH_V);
        if (useSlashV) {
            add(jsString(n.getString(), useSlashV));
        } else {
            java.lang.String cached = ESCAPED_JS_STRINGS.get(s);
            if (cached == null) {
                cached = jsString(n.getString(), useSlashV);
                ESCAPED_JS_STRINGS.put(s, cached);
            }
            add(cached);
        }
    }

    private java.lang.String jsString(java.lang.String s, boolean useSlashV) {
        int singleq = 0;
        int doubleq = 0;
        for (int i = 0; i < s.length(); i++) {
            switch (s.charAt(i)) {
                case '"' :
                    doubleq++;
                    break;
                case '\'' :
                    singleq++;
                    break;
            }
        }
        java.lang.String doublequote;
        java.lang.String singlequote;
        char quote;
        if (singleq < doubleq) {
            quote = '\'';
            doublequote = "\"";
            singlequote = "\\\'";
        } else {
            quote = '\"';
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(415).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(415).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(415).collectInput("singleq",singleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(415).collectInput("com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",com.google.javascript.jscomp.CodeGenerator.HEX_CHARS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(415).collectInput("com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS",com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(415).collectInput("s",s);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(415).collectInput("useSlashV",useSlashV);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(415).collectInput("doubleq",doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(415).collectInput("com.google.javascript.jscomp.CodeGenerator.this.cc",com.google.javascript.jscomp.CodeGenerator.this.cc);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(415).collectInput("com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder",com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(415).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(415).collectionEnds();
            }
            if (runtimeAngelicValue)
                doublequote = "\\\"";

            singlequote = "\'";
        }
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder, useSlashV);
    }

    static java.lang.String regexpEscape(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '/', "\"", "'", "\\", outputCharsetEncoder, false);
    }

    static java.lang.String escapeToDoubleQuotedJsString(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '"', "\\\"", "\'", "\\\\", null, false);
    }

    static java.lang.String regexpEscape(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.regexpEscape(s, null);
    }

    private static java.lang.String strEscape(java.lang.String s, char quote, java.lang.String doublequoteEscape, java.lang.String singlequoteEscape, java.lang.String backslashEscape, java.nio.charset.CharsetEncoder outputCharsetEncoder, boolean useSlashV) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder(s.length() + 2);
        sb.append(quote);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch (c) {
                case '\u0000' :
                    sb.append("\\x00");
                    break;
                case '\u000b' :
                    if (useSlashV) {
                        sb.append("\\v");
                    } else {
                        sb.append("\\x0B");
                    }
                    break;
                case '\b' :
                    sb.append("\\b");
                    break;
                case '\f' :
                    sb.append("\\f");
                    break;
                case '\n' :
                    sb.append("\\n");
                    break;
                case '\r' :
                    sb.append("\\r");
                    break;
                case '\t' :
                    sb.append("\\t");
                    break;
                case '\\' :
                    sb.append(backslashEscape);
                    break;
                case '\"' :
                    sb.append(doublequoteEscape);
                    break;
                case '\'' :
                    sb.append(singlequoteEscape);
                    break;
                case ' ' :
                    sb.append("\\u2028");
                    break;
                case ' ' :
                    sb.append("\\u2029");
                    break;
                case '>' :
                    if ((i >= 2) && (((s.charAt(i - 1) == '-') && (s.charAt(i - 2) == '-')) || ((s.charAt(i - 1) == ']') && (s.charAt(i - 2) == ']')))) {
                        sb.append("\\>");
                    } else {
                        sb.append(c);
                    }
                    break;
                case '<' :
                    final java.lang.String END_SCRIPT = "/script";
                    final java.lang.String START_COMMENT = "!--";
                    if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {
                        sb.append("<\\");
                    } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {
                        sb.append("<\\");
                    } else {
                        sb.append(c);
                    }
                    break;
                default :
                    if (outputCharsetEncoder != null) {
                        if (outputCharsetEncoder.canEncode(c)) {
                            sb.append(c);
                        } else {
                            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                        }
                    } else if ((c > 0x1f) && (c < 0x7f)) {
                        sb.append(c);
                    } else {
                        com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                    }
            }
        }
        sb.append(quote);
        return sb.toString();
    }

    static java.lang.String identifierEscape(java.lang.String s) {
        if (com.google.javascript.jscomp.NodeUtil.isLatin(s)) {
            return s;
        }
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if ((c > 0x1f) && (c < 0x7f)) {
                sb.append(c);
            } else {
                com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
            }
        }
        return sb.toString();
    }

    private static int getNonEmptyChildCount(com.google.javascript.rhino.Node n, int maxCount) {
        int i = 0;
        com.google.javascript.rhino.Node c = n.getFirstChild();
        for (; (c != null) && (i < maxCount); c = c.getNext()) {
            if (c.isBlock()) {
                i += com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(c, maxCount - i);
            } else if (!c.isEmpty()) {
                i++;
            }
        }
        return i;
    }

    private static com.google.javascript.rhino.Node getFirstNonEmptyChild(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.isBlock()) {
                com.google.javascript.rhino.Node result = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(c);
                if (result != null) {
                    return result;
                }
            } else if (!c.isEmpty()) {
                return c;
            }
        }
        return null;
    }

    enum Context {

        STATEMENT,
        BEFORE_DANGLING_ELSE,
        START_OF_EXPR,
        PRESERVE_BLOCK,
        IN_FOR_INIT_CLAUSE,
        OTHER;}

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNonEmptyExpression(com.google.javascript.jscomp.CodeGenerator.Context currentContext) {
        return currentContext == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE ? com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context clearContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.OTHER : context;
    }

    private static void appendHexJavaScriptRepresentation(java.lang.StringBuilder sb, char c) {
        try {
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(c, sb);
        } catch (java.io.IOException ex) {
            throw new java.lang.RuntimeException(ex);
        }
    }

    private static void appendHexJavaScriptRepresentation(int codePoint, java.lang.Appendable out) throws java.io.IOException {
        if (java.lang.Character.isSupplementaryCodePoint(codePoint)) {
            char[] surrogates = java.lang.Character.toChars(codePoint);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[0], out);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[1], out);
            return;
        }
        out.append("\\u").append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 12) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 8) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 4) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[codePoint & 0xf]);
    }
}
[1989685] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659904554557
GPR[SSUN]-1659904554557
-718432441
GPR[SPVATF]-1659904554785
GPR[EPVATF]-1659904555428
GPR[SPS]-1659904555428
[1991284] ERROR ConstraintModelBuilder - Unable to compile the change: 
class CodeGenerator {
    private final java.util.Map<java.lang.String, java.lang.String> ESCAPED_JS_STRINGS = com.google.common.collect.Maps.newHashMap();

    private static final char[] HEX_CHARS = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };

    private final com.google.javascript.jscomp.CodeConsumer cc;

    private final java.nio.charset.CharsetEncoder outputCharsetEncoder;

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer, java.nio.charset.Charset outputCharset) {
        cc = consumer;
        if ((outputCharset == null) || (outputCharset == com.google.common.base.Charsets.US_ASCII)) {
            this.outputCharsetEncoder = null;
        } else {
            this.outputCharsetEncoder = outputCharset.newEncoder();
        }
    }

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer) {
        this(consumer, null);
    }

    public void tagAsStrict() {
        add("'use strict';");
    }

    void add(java.lang.String str) {
        cc.add(str);
    }

    private void addIdentifier(java.lang.String identifier) {
        cc.addIdentifier(com.google.javascript.jscomp.CodeGenerator.identifierEscape(identifier));
    }

    void add(com.google.javascript.rhino.Node n) {
        add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void add(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if (!cc.continueProcessing()) {
            return;
        }
        int type = n.getType();
        java.lang.String opstr = com.google.javascript.jscomp.NodeUtil.opToStr(type);
        int childCount = n.getChildCount();
        com.google.javascript.rhino.Node first = n.getFirstChild();
        com.google.javascript.rhino.Node last = n.getLastChild();
        if ((opstr != null) && (first != last)) {
            com.google.common.base.Preconditions.checkState(childCount == 2, "Bad binary operator \"%s\": expected 2 arguments but got %s", opstr, childCount);
            int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
            com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);
            if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else {
                unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);
            }
            return;
        }
        cc.startSourceMapping(n);
        switch (type) {
            case com.google.javascript.rhino.Token.TRY :
                {
                    com.google.common.base.Preconditions.checkState(first.getNext().isBlock() && (!first.getNext().hasMoreThanOneChild()));
                    com.google.common.base.Preconditions.checkState((childCount >= 2) && (childCount <= 3));
                    add("try");
                    add(first, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    com.google.javascript.rhino.Node catchblock = first.getNext().getFirstChild();
                    if (catchblock != null) {
                        add(catchblock);
                    }
                    if (childCount == 3) {
                        add("finally");
                        add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CATCH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("catch(");
                add(first);
                add(")");
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.THROW :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("throw");
                add(first);
                cc.endStatement(true);
                break;
            case com.google.javascript.rhino.Token.RETURN :
                add("return");
                if (childCount == 1) {
                    add(first);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 0);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.VAR :
                if (first != null) {
                    add("var ");
                    addList(first, false, getContextForNoInOperator(context));
                }
                break;
            case com.google.javascript.rhino.Token.LABEL_NAME :
                com.google.common.base.Preconditions.checkState(!n.getString().isEmpty());
                addIdentifier(n.getString());
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ((first == null) || first.isEmpty()) {
                    addIdentifier(n.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    addIdentifier(n.getString());
                    cc.addOp("=", true);
                    if (first.isComma()) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.ASSIGN), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    } else {
                        addExpr(first, 0, getContextForNoInOperator(context));
                    }
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                add("[");
                addArrayList(first);
                add("]");
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                add("(");
                addList(first);
                add(")");
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                unrollBinaryOperator(n, com.google.javascript.rhino.Token.COMMA, ",", context, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, 0, 0);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addNumber(n.getDouble());
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.NEG :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    if (n.getFirstChild().isNumber()) {
                        cc.addNumber(-n.getFirstChild().getDouble());
                    } else {
                        cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
                    addExpr(first, p + 1, context);
                    cc.addOp("?", true);
                    addExpr(first.getNext(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    cc.addOp(":", true);
                    addExpr(last, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.REGEXP :
                if ((!first.isString()) || (!last.isString())) {
                    throw new java.lang.Error("Expected children to be strings");
                }
                java.lang.String regexp = com.google.javascript.jscomp.CodeGenerator.regexpEscape(first.getString(), outputCharsetEncoder);
                if (childCount == 2) {
                    add(regexp + last.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    add(regexp);
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                if (n.getClass() != com.google.javascript.rhino.Node.class) {
                    throw new java.lang.Error("Unexpected Node subclass.");
                }
                com.google.common.base.Preconditions.checkState(childCount == 3);
                boolean funcNeedsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                if (funcNeedsParens) {
                    add("(");
                }
                add("function");
                add(first);
                add(first.getNext());
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                cc.endFunction(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                if (funcNeedsParens) {
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                com.google.common.base.Preconditions.checkState(n.getParent().isObjectLit());
                com.google.common.base.Preconditions.checkState(childCount == 1);
                com.google.common.base.Preconditions.checkState(first.isFunction());
                com.google.common.base.Preconditions.checkState(first.getFirstChild().getString().isEmpty());
                if (type == com.google.javascript.rhino.Token.GETTER_DEF) {
                    com.google.common.base.Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());
                    add("get ");
                } else {
                    com.google.common.base.Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
                    add("set ");
                }
                java.lang.String name = n.getString();
                com.google.javascript.rhino.Node fn = first;
                com.google.javascript.rhino.Node parameters = fn.getChildAtIndex(1);
                com.google.javascript.rhino.Node body = fn.getLastChild();
                if (((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {
                    add(name);
                } else {
                    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);
                    if (!java.lang.Double.isNaN(d)) {
                        cc.addNumber(d);
                    } else {
                        addJsString(n);
                    }
                }
                add(parameters);
                add(body, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                {
                    if (n.getClass() != com.google.javascript.rhino.Node.class) {
                        throw new java.lang.Error("Unexpected Node subclass.");
                    }
                    boolean preserveBlock = context == com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
                    if (preserveBlock) {
                        cc.beginBlock();
                    }
                    boolean preferLineBreaks = (type == com.google.javascript.rhino.Token.SCRIPT) || ((((type == com.google.javascript.rhino.Token.BLOCK) && (!preserveBlock)) && (n.getParent() != null)) && n.getParent().isScript());
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        add(c, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                        if (c.isVar()) {
                            cc.endStatement();
                        }
                        if (c.isFunction()) {
                            cc.maybeLineBreak();
                        }
                        if (preferLineBreaks) {
                            cc.notePreferredLineBreak();
                        }
                    }
                    if (preserveBlock) {
                        cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.FOR :
                if (childCount == 4) {
                    add("for(");
                    if (first.isVar()) {
                        add(first, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    } else {
                        addExpr(first, 0, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    }
                    add(";");
                    add(first.getNext());
                    add(";");
                    add(first.getNext().getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    add("for(");
                    add(first);
                    add("in");
                    add(first.getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                }
                break;
            case com.google.javascript.rhino.Token.DO :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("do");
                addNonEmptyStatement(first, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                add("while(");
                add(last);
                add(")");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.WHILE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("while(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.EMPTY :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETPROP: expected 2 children, but got %s", childCount);
                    com.google.common.base.Preconditions.checkState(last.isString(), "Bad GETPROP: RHS should be STRING");
                    boolean needsParens = first.isNumber();
                    if (needsParens) {
                        add("(");
                    }
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                    if (needsParens) {
                        add(")");
                    }
                    add(".");
                    addIdentifier(last.getString());
                    break;
                }
            case com.google.javascript.rhino.Token.GETELEM :
                com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETELEM: expected 2 children but got %s", childCount);
                addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                add("[");
                add(first.getNext());
                add("]");
                break;
            case com.google.javascript.rhino.Token.WITH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("with(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    java.lang.String o = (type == com.google.javascript.rhino.Token.INC) ? "++" : "--";
                    int postProp = n.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
                    if (postProp != 0) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                        cc.addOp(o, false);
                    } else {
                        cc.addOp(o, false);
                        add(first);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CALL :
                if (isIndirectEval(first) || (n.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) && com.google.javascript.jscomp.NodeUtil.isGet(first))) {
                    add("(0,");
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.COMMA), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    add(")");
                } else {
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                }
                add("(");
                addList(first.getNext());
                add(")");
                break;
            case com.google.javascript.rhino.Token.IF :
                boolean hasElse = childCount == 3;
                boolean ambiguousElseClause = (context == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE) && (!hasElse);
                if (ambiguousElseClause) {
                    cc.beginBlock();
                }
                add("if(");
                add(first);
                add(")");
                if (hasElse) {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE, false);
                    add("else");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                    com.google.common.base.Preconditions.checkState(childCount == 2);
                }
                if (ambiguousElseClause) {
                    cc.endBlock();
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("null");
                break;
            case com.google.javascript.rhino.Token.THIS :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("this");
                break;
            case com.google.javascript.rhino.Token.FALSE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("false");
                break;
            case com.google.javascript.rhino.Token.TRUE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("true");
                break;
            case com.google.javascript.rhino.Token.CONTINUE :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("continue");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.DEBUGGER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("debugger");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.BREAK :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("break");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first, com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR);
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.NEW :
                add("new ");
                int precedence = com.google.javascript.jscomp.NodeUtil.precedence(type);
                if (com.google.javascript.jscomp.NodeUtil.containsType(first, com.google.javascript.rhino.Token.CALL, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION)) {
                    precedence = com.google.javascript.jscomp.NodeUtil.precedence(first.getType()) + 1;
                }
                addExpr(first, precedence, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                com.google.javascript.rhino.Node next = first.getNext();
                if (next != null) {
                    add("(");
                    addList(next);
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.STRING_KEY :
                com.google.common.base.Preconditions.checkState(childCount == 1, "Object lit key must have 1 child");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.STRING :
                com.google.common.base.Preconditions.checkState(childCount == 0, "A string may not have children");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("delete ");
                add(first);
                break;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                {
                    boolean needsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                    if (needsParens) {
                        add("(");
                    }
                    add("{");
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        if (c != first) {
                            cc.listSeparator();
                        }
                        if (c.isGetterDef() || c.isSetterDef()) {
                            add(c);
                        } else {
                            com.google.common.base.Preconditions.checkState(c.isStringKey());
                            java.lang.String key = c.getString();
                            if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {
                                add(key);
                            } else {
                                double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);
                                if (!java.lang.Double.isNaN(d)) {
                                    cc.addNumber(d);
                                } else {
                                    addExpr(c, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                                }
                            }
                            add(":");
                            addExpr(c.getFirstChild(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                        }
                    }
                    add("}");
                    if (needsParens) {
                        add(")");
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.SWITCH :
                add("switch(");
                add(first);
                add(")");
                cc.beginBlock();
                addAllSiblings(first.getNext());
                cc.endBlock(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("case ");
                add(first);
                addCaseBody(last);
                break;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("default");
                addCaseBody(first);
                break;
            case com.google.javascript.rhino.Token.LABEL :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                if (!first.isLabelName()) {
                    throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                }
                add(first);
                add(":");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), true);
                break;
            default :
                throw new java.lang.Error((("Unknown type " + type) + "\n") + n.toStringTree());
        }
        cc.endSourceMapping(n);
    }

    private void unrollBinaryOperator(com.google.javascript.rhino.Node n, int op, java.lang.String opStr, com.google.javascript.jscomp.CodeGenerator.Context context, com.google.javascript.jscomp.CodeGenerator.Context rhsContext, int leftPrecedence, int rightPrecedence) {
        com.google.javascript.rhino.Node firstNonOperator = n.getFirstChild();
        while (firstNonOperator.getType() == op) {
            firstNonOperator = firstNonOperator.getFirstChild();
        } 
        addExpr(firstNonOperator, leftPrecedence, context);
        com.google.javascript.rhino.Node current = firstNonOperator;
        do {
            current = current.getParent();
            cc.addOp(opStr, true);
            addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);
        } while (current != n );
    }

    static boolean isSimpleNumber(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if ((c < '0') || (c > '9')) {
                return false;
            }
        }
        return (len > 0) && (s.charAt(0) != '0');
    }

    static double getSimpleNumber(java.lang.String s) {
        if (com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(s)) {
            try {
                long l = java.lang.Long.parseLong(s);
                if (l < com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                    return l;
                }
            } catch (java.lang.NumberFormatException e) {
            }
        }
        return java.lang.Double.NaN;
    }

    private boolean isIndirectEval(com.google.javascript.rhino.Node n) {
        return (n.isName() && "eval".equals(n.getString())) && (!n.getBooleanProp(com.google.javascript.rhino.Node.DIRECT_EVAL));
    }

    private void addNonEmptyStatement(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context, boolean allowNonBlockChild) {
        com.google.javascript.rhino.Node nodeToProcess = n;
        if ((!allowNonBlockChild) && (!n.isBlock())) {
            throw new java.lang.Error("Missing BLOCK child.");
        }
        if (n.isBlock()) {
            int count = com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2);
            if (count == 0) {
                if (cc.shouldPreserveExtraBlocks()) {
                    cc.beginBlock();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                } else {
                    cc.endStatement(true);
                }
                return;
            }
            if (count == 1) {
                com.google.javascript.rhino.Node firstAndOnlyChild = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n);
                boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();
                if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {
                    cc.beginBlock();
                    add(firstAndOnlyChild, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                    cc.maybeLineBreak();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    return;
                } else {
                    nodeToProcess = firstAndOnlyChild;
                }
            }
            if (count > 1) {
                context = com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
            }
        }
        if (nodeToProcess.isEmpty()) {
            cc.endStatement(true);
        } else {
            add(nodeToProcess, context);
            if (nodeToProcess.isVar()) {
                cc.endStatement();
            }
        }
    }

    private boolean isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node n) {
        if (n.isLabel()) {
            com.google.javascript.rhino.Node labeledStatement = n.getLastChild();
            if (!labeledStatement.isBlock()) {
                return isOneExactlyFunctionOrDo(labeledStatement);
            } else if (com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2) == 1) {
                return isOneExactlyFunctionOrDo(com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n));
            } else {
                return false;
            }
        } else {
            return n.isFunction() || n.isDo();
        }
    }

    private void addExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if ((com.google.javascript.jscomp.NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE) && n.isIn())) {
            add("(");
            add(n, clearContextForNoInOperator(context));
            add(")");
        } else {
            add(n, context);
        }
    }

    void addList(com.google.javascript.rhino.Node firstInList) {
        addList(firstInList, true, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument) {
        addList(firstInList, isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context lhsContext) {
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            boolean isFirst = n == firstInList;
            if (isFirst) {
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
            } else {
                cc.listSeparator();
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            }
        }
    }

    void addArrayList(com.google.javascript.rhino.Node firstInList) {
        boolean lastWasEmpty = false;
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            if (n != firstInList) {
                cc.listSeparator();
            }
            addExpr(n, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            lastWasEmpty = n.isEmpty();
        }
        if (lastWasEmpty) {
            cc.listSeparator();
        }
    }

    void addCaseBody(com.google.javascript.rhino.Node caseBody) {
        cc.beginCaseBody();
        add(caseBody);
        cc.endCaseBody();
    }

    void addAllSiblings(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n; c != null; c = c.getNext()) {
            add(c);
        }
    }

    private void addJsString(com.google.javascript.rhino.Node n) {
        java.lang.String s = n.getString();
        boolean useSlashV = n.getBooleanProp(com.google.javascript.rhino.Node.SLASH_V);
        if (useSlashV) {
            add(jsString(n.getString(), useSlashV));
        } else {
            java.lang.String cached = ESCAPED_JS_STRINGS.get(s);
            if (cached == null) {
                cached = jsString(n.getString(), useSlashV);
                ESCAPED_JS_STRINGS.put(s, cached);
            }
            add(cached);
        }
    }

    private java.lang.String jsString(java.lang.String s, boolean useSlashV) {
        int singleq = 0;
        int doubleq = 0;
        for (int i = 0; i < s.length(); i++) {
            switch (s.charAt(i)) {
                case '"' :
                    doubleq++;
                    break;
                case '\'' :
                    singleq++;
                    break;
            }
        }
        java.lang.String doublequote;
        java.lang.String singlequote;
        char quote;
        if (singleq < doubleq) {
            quote = '\'';
            doublequote = "\"";
            singlequote = "\\\'";
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(416).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(416).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(416).collectInput("singleq",singleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(416).collectInput("com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",com.google.javascript.jscomp.CodeGenerator.HEX_CHARS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(416).collectInput("com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS",com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(416).collectInput("s",s);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(416).collectInput("useSlashV",useSlashV);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(416).collectInput("doubleq",doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(416).collectInput("com.google.javascript.jscomp.CodeGenerator.this.cc",com.google.javascript.jscomp.CodeGenerator.this.cc);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(416).collectInput("com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder",com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(416).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(416).collectionEnds();
            }
            if (runtimeAngelicValue)
                quote = '\"';

            doublequote = "\\\"";
            singlequote = "\'";
        }
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder, useSlashV);
    }

    static java.lang.String regexpEscape(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '/', "\"", "'", "\\", outputCharsetEncoder, false);
    }

    static java.lang.String escapeToDoubleQuotedJsString(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '"', "\\\"", "\'", "\\\\", null, false);
    }

    static java.lang.String regexpEscape(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.regexpEscape(s, null);
    }

    private static java.lang.String strEscape(java.lang.String s, char quote, java.lang.String doublequoteEscape, java.lang.String singlequoteEscape, java.lang.String backslashEscape, java.nio.charset.CharsetEncoder outputCharsetEncoder, boolean useSlashV) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder(s.length() + 2);
        sb.append(quote);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch (c) {
                case '\u0000' :
                    sb.append("\\x00");
                    break;
                case '\u000b' :
                    if (useSlashV) {
                        sb.append("\\v");
                    } else {
                        sb.append("\\x0B");
                    }
                    break;
                case '\b' :
                    sb.append("\\b");
                    break;
                case '\f' :
                    sb.append("\\f");
                    break;
                case '\n' :
                    sb.append("\\n");
                    break;
                case '\r' :
                    sb.append("\\r");
                    break;
                case '\t' :
                    sb.append("\\t");
                    break;
                case '\\' :
                    sb.append(backslashEscape);
                    break;
                case '\"' :
                    sb.append(doublequoteEscape);
                    break;
                case '\'' :
                    sb.append(singlequoteEscape);
                    break;
                case ' ' :
                    sb.append("\\u2028");
                    break;
                case ' ' :
                    sb.append("\\u2029");
                    break;
                case '>' :
                    if ((i >= 2) && (((s.charAt(i - 1) == '-') && (s.charAt(i - 2) == '-')) || ((s.charAt(i - 1) == ']') && (s.charAt(i - 2) == ']')))) {
                        sb.append("\\>");
                    } else {
                        sb.append(c);
                    }
                    break;
                case '<' :
                    final java.lang.String END_SCRIPT = "/script";
                    final java.lang.String START_COMMENT = "!--";
                    if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {
                        sb.append("<\\");
                    } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {
                        sb.append("<\\");
                    } else {
                        sb.append(c);
                    }
                    break;
                default :
                    if (outputCharsetEncoder != null) {
                        if (outputCharsetEncoder.canEncode(c)) {
                            sb.append(c);
                        } else {
                            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                        }
                    } else if ((c > 0x1f) && (c < 0x7f)) {
                        sb.append(c);
                    } else {
                        com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                    }
            }
        }
        sb.append(quote);
        return sb.toString();
    }

    static java.lang.String identifierEscape(java.lang.String s) {
        if (com.google.javascript.jscomp.NodeUtil.isLatin(s)) {
            return s;
        }
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if ((c > 0x1f) && (c < 0x7f)) {
                sb.append(c);
            } else {
                com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
            }
        }
        return sb.toString();
    }

    private static int getNonEmptyChildCount(com.google.javascript.rhino.Node n, int maxCount) {
        int i = 0;
        com.google.javascript.rhino.Node c = n.getFirstChild();
        for (; (c != null) && (i < maxCount); c = c.getNext()) {
            if (c.isBlock()) {
                i += com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(c, maxCount - i);
            } else if (!c.isEmpty()) {
                i++;
            }
        }
        return i;
    }

    private static com.google.javascript.rhino.Node getFirstNonEmptyChild(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.isBlock()) {
                com.google.javascript.rhino.Node result = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(c);
                if (result != null) {
                    return result;
                }
            } else if (!c.isEmpty()) {
                return c;
            }
        }
        return null;
    }

    enum Context {

        STATEMENT,
        BEFORE_DANGLING_ELSE,
        START_OF_EXPR,
        PRESERVE_BLOCK,
        IN_FOR_INIT_CLAUSE,
        OTHER;}

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNonEmptyExpression(com.google.javascript.jscomp.CodeGenerator.Context currentContext) {
        return currentContext == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE ? com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context clearContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.OTHER : context;
    }

    private static void appendHexJavaScriptRepresentation(java.lang.StringBuilder sb, char c) {
        try {
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(c, sb);
        } catch (java.io.IOException ex) {
            throw new java.lang.RuntimeException(ex);
        }
    }

    private static void appendHexJavaScriptRepresentation(int codePoint, java.lang.Appendable out) throws java.io.IOException {
        if (java.lang.Character.isSupplementaryCodePoint(codePoint)) {
            char[] surrogates = java.lang.Character.toChars(codePoint);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[0], out);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[1], out);
            return;
        }
        out.append("\\u").append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 12) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 8) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 4) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[codePoint & 0xf]);
    }
}
[1991284] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659904556157
GPR[SSUN]-1659904556157
-718432441
GPR[SPVATF]-1659904556382
GPR[EPVATF]-1659904557031
GPR[SPS]-1659904557031
[1992890] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:963.
GPR[EPS]-1659904557762
GPR[ESUN]-1659904557762
GPR[SSUN]-1659904557762
-718432441
GPR[SPVATF]-1659904557986
GPR[EPVATF]-1659904558631
GPR[SPS]-1659904558631
[1994531] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:961.
GPR[EPS]-1659904559403
GPR[ESUN]-1659904559403
GPR[SSUN]-1659904559403
-718432441
GPR[SPVATF]-1659904559620
GPR[EPVATF]-1659904560270
GPR[SPS]-1659904560270
[1996074] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:960.
GPR[EPS]-1659904560946
GPR[ESUN]-1659904560946
GPR[SSUN]-1659904560946
-718432441
GPR[SPVATF]-1659904561178
GPR[EPVATF]-1659904561850
GPR[SPS]-1659904561850
[1997694] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:959.
GPR[EPS]-1659904562566
GPR[SPVATF]-1659904562566
GPR[EPVATF]-1659904563239
GPR[SPS]-1659904563239
[1999066] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:959.
GPR[EPS]-1659904563938
GPR[ESUN]-1659904563938
GPR[SSUN]-1659904563938
-718432441
GPR[ESUN]-1659904564171
GPR[SSUN]-1659904564171
-718432441
GPR[ESUN]-1659904564401
GPR[SSUN]-1659904564401
-718432441
GPR[SPVATF]-1659904564619
GPR[EPVATF]-1659904565307
GPR[SPS]-1659904565307
[2001113] ERROR ConstraintModelBuilder - Unable to compile the change: 
class CodeGenerator {
    private final java.util.Map<java.lang.String, java.lang.String> ESCAPED_JS_STRINGS = com.google.common.collect.Maps.newHashMap();

    private static final char[] HEX_CHARS = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };

    private final com.google.javascript.jscomp.CodeConsumer cc;

    private final java.nio.charset.CharsetEncoder outputCharsetEncoder;

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer, java.nio.charset.Charset outputCharset) {
        cc = consumer;
        if ((outputCharset == null) || (outputCharset == com.google.common.base.Charsets.US_ASCII)) {
            this.outputCharsetEncoder = null;
        } else {
            this.outputCharsetEncoder = outputCharset.newEncoder();
        }
    }

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer) {
        this(consumer, null);
    }

    public void tagAsStrict() {
        add("'use strict';");
    }

    void add(java.lang.String str) {
        cc.add(str);
    }

    private void addIdentifier(java.lang.String identifier) {
        cc.addIdentifier(com.google.javascript.jscomp.CodeGenerator.identifierEscape(identifier));
    }

    void add(com.google.javascript.rhino.Node n) {
        add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void add(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if (!cc.continueProcessing()) {
            return;
        }
        int type = n.getType();
        java.lang.String opstr = com.google.javascript.jscomp.NodeUtil.opToStr(type);
        int childCount = n.getChildCount();
        com.google.javascript.rhino.Node first = n.getFirstChild();
        com.google.javascript.rhino.Node last = n.getLastChild();
        if ((opstr != null) && (first != last)) {
            com.google.common.base.Preconditions.checkState(childCount == 2, "Bad binary operator \"%s\": expected 2 arguments but got %s", opstr, childCount);
            int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
            com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);
            if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else {
                unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);
            }
            return;
        }
        cc.startSourceMapping(n);
        switch (type) {
            case com.google.javascript.rhino.Token.TRY :
                {
                    com.google.common.base.Preconditions.checkState(first.getNext().isBlock() && (!first.getNext().hasMoreThanOneChild()));
                    com.google.common.base.Preconditions.checkState((childCount >= 2) && (childCount <= 3));
                    add("try");
                    add(first, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    com.google.javascript.rhino.Node catchblock = first.getNext().getFirstChild();
                    if (catchblock != null) {
                        add(catchblock);
                    }
                    if (childCount == 3) {
                        add("finally");
                        add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CATCH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("catch(");
                add(first);
                add(")");
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.THROW :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("throw");
                add(first);
                cc.endStatement(true);
                break;
            case com.google.javascript.rhino.Token.RETURN :
                add("return");
                if (childCount == 1) {
                    add(first);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 0);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.VAR :
                if (first != null) {
                    add("var ");
                    addList(first, false, getContextForNoInOperator(context));
                }
                break;
            case com.google.javascript.rhino.Token.LABEL_NAME :
                com.google.common.base.Preconditions.checkState(!n.getString().isEmpty());
                addIdentifier(n.getString());
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ((first == null) || first.isEmpty()) {
                    addIdentifier(n.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    addIdentifier(n.getString());
                    cc.addOp("=", true);
                    if (first.isComma()) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.ASSIGN), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    } else {
                        addExpr(first, 0, getContextForNoInOperator(context));
                    }
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                add("[");
                addArrayList(first);
                add("]");
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                add("(");
                addList(first);
                add(")");
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                unrollBinaryOperator(n, com.google.javascript.rhino.Token.COMMA, ",", context, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, 0, 0);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addNumber(n.getDouble());
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.NEG :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    if (n.getFirstChild().isNumber()) {
                        cc.addNumber(-n.getFirstChild().getDouble());
                    } else {
                        cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
                    addExpr(first, p + 1, context);
                    cc.addOp("?", true);
                    addExpr(first.getNext(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    cc.addOp(":", true);
                    addExpr(last, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.REGEXP :
                if ((!first.isString()) || (!last.isString())) {
                    throw new java.lang.Error("Expected children to be strings");
                }
                java.lang.String regexp = com.google.javascript.jscomp.CodeGenerator.regexpEscape(first.getString(), outputCharsetEncoder);
                if (childCount == 2) {
                    add(regexp + last.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    add(regexp);
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                if (n.getClass() != com.google.javascript.rhino.Node.class) {
                    throw new java.lang.Error("Unexpected Node subclass.");
                }
                com.google.common.base.Preconditions.checkState(childCount == 3);
                boolean funcNeedsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                if (funcNeedsParens) {
                    add("(");
                }
                add("function");
                add(first);
                add(first.getNext());
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                cc.endFunction(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                if (funcNeedsParens) {
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                com.google.common.base.Preconditions.checkState(n.getParent().isObjectLit());
                com.google.common.base.Preconditions.checkState(childCount == 1);
                com.google.common.base.Preconditions.checkState(first.isFunction());
                com.google.common.base.Preconditions.checkState(first.getFirstChild().getString().isEmpty());
                if (type == com.google.javascript.rhino.Token.GETTER_DEF) {
                    com.google.common.base.Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());
                    add("get ");
                } else {
                    com.google.common.base.Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
                    add("set ");
                }
                java.lang.String name = n.getString();
                com.google.javascript.rhino.Node fn = first;
                com.google.javascript.rhino.Node parameters = fn.getChildAtIndex(1);
                com.google.javascript.rhino.Node body = fn.getLastChild();
                if (((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {
                    add(name);
                } else {
                    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);
                    if (!java.lang.Double.isNaN(d)) {
                        cc.addNumber(d);
                    } else {
                        addJsString(n);
                    }
                }
                add(parameters);
                add(body, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                {
                    if (n.getClass() != com.google.javascript.rhino.Node.class) {
                        throw new java.lang.Error("Unexpected Node subclass.");
                    }
                    boolean preserveBlock = context == com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
                    if (preserveBlock) {
                        cc.beginBlock();
                    }
                    boolean preferLineBreaks = (type == com.google.javascript.rhino.Token.SCRIPT) || ((((type == com.google.javascript.rhino.Token.BLOCK) && (!preserveBlock)) && (n.getParent() != null)) && n.getParent().isScript());
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        add(c, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                        if (c.isVar()) {
                            cc.endStatement();
                        }
                        if (c.isFunction()) {
                            cc.maybeLineBreak();
                        }
                        if (preferLineBreaks) {
                            cc.notePreferredLineBreak();
                        }
                    }
                    if (preserveBlock) {
                        cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.FOR :
                if (childCount == 4) {
                    add("for(");
                    if (first.isVar()) {
                        add(first, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    } else {
                        addExpr(first, 0, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    }
                    add(";");
                    add(first.getNext());
                    add(";");
                    add(first.getNext().getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    add("for(");
                    add(first);
                    add("in");
                    add(first.getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                }
                break;
            case com.google.javascript.rhino.Token.DO :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("do");
                addNonEmptyStatement(first, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                add("while(");
                add(last);
                add(")");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.WHILE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("while(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.EMPTY :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETPROP: expected 2 children, but got %s", childCount);
                    com.google.common.base.Preconditions.checkState(last.isString(), "Bad GETPROP: RHS should be STRING");
                    boolean needsParens = first.isNumber();
                    if (needsParens) {
                        add("(");
                    }
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                    if (needsParens) {
                        add(")");
                    }
                    add(".");
                    addIdentifier(last.getString());
                    break;
                }
            case com.google.javascript.rhino.Token.GETELEM :
                com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETELEM: expected 2 children but got %s", childCount);
                addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                add("[");
                add(first.getNext());
                add("]");
                break;
            case com.google.javascript.rhino.Token.WITH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("with(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    java.lang.String o = (type == com.google.javascript.rhino.Token.INC) ? "++" : "--";
                    int postProp = n.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
                    if (postProp != 0) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                        cc.addOp(o, false);
                    } else {
                        cc.addOp(o, false);
                        add(first);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CALL :
                if (isIndirectEval(first) || (n.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) && com.google.javascript.jscomp.NodeUtil.isGet(first))) {
                    add("(0,");
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.COMMA), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    add(")");
                } else {
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                }
                add("(");
                addList(first.getNext());
                add(")");
                break;
            case com.google.javascript.rhino.Token.IF :
                boolean hasElse = childCount == 3;
                boolean ambiguousElseClause = (context == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE) && (!hasElse);
                if (ambiguousElseClause) {
                    cc.beginBlock();
                }
                add("if(");
                add(first);
                add(")");
                if (hasElse) {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE, false);
                    add("else");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                    com.google.common.base.Preconditions.checkState(childCount == 2);
                }
                if (ambiguousElseClause) {
                    cc.endBlock();
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("null");
                break;
            case com.google.javascript.rhino.Token.THIS :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("this");
                break;
            case com.google.javascript.rhino.Token.FALSE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("false");
                break;
            case com.google.javascript.rhino.Token.TRUE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("true");
                break;
            case com.google.javascript.rhino.Token.CONTINUE :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("continue");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.DEBUGGER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("debugger");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.BREAK :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("break");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first, com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR);
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.NEW :
                add("new ");
                int precedence = com.google.javascript.jscomp.NodeUtil.precedence(type);
                if (com.google.javascript.jscomp.NodeUtil.containsType(first, com.google.javascript.rhino.Token.CALL, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION)) {
                    precedence = com.google.javascript.jscomp.NodeUtil.precedence(first.getType()) + 1;
                }
                addExpr(first, precedence, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                com.google.javascript.rhino.Node next = first.getNext();
                if (next != null) {
                    add("(");
                    addList(next);
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.STRING_KEY :
                com.google.common.base.Preconditions.checkState(childCount == 1, "Object lit key must have 1 child");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.STRING :
                com.google.common.base.Preconditions.checkState(childCount == 0, "A string may not have children");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("delete ");
                add(first);
                break;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                {
                    boolean needsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                    if (needsParens) {
                        add("(");
                    }
                    add("{");
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        if (c != first) {
                            cc.listSeparator();
                        }
                        if (c.isGetterDef() || c.isSetterDef()) {
                            add(c);
                        } else {
                            com.google.common.base.Preconditions.checkState(c.isStringKey());
                            java.lang.String key = c.getString();
                            if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {
                                add(key);
                            } else {
                                double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);
                                if (!java.lang.Double.isNaN(d)) {
                                    cc.addNumber(d);
                                } else {
                                    addExpr(c, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                                }
                            }
                            add(":");
                            addExpr(c.getFirstChild(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                        }
                    }
                    add("}");
                    if (needsParens) {
                        add(")");
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.SWITCH :
                add("switch(");
                add(first);
                add(")");
                cc.beginBlock();
                addAllSiblings(first.getNext());
                cc.endBlock(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("case ");
                add(first);
                addCaseBody(last);
                break;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("default");
                addCaseBody(first);
                break;
            case com.google.javascript.rhino.Token.LABEL :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                if (!first.isLabelName()) {
                    throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                }
                add(first);
                add(":");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), true);
                break;
            default :
                throw new java.lang.Error((("Unknown type " + type) + "\n") + n.toStringTree());
        }
        cc.endSourceMapping(n);
    }

    private void unrollBinaryOperator(com.google.javascript.rhino.Node n, int op, java.lang.String opStr, com.google.javascript.jscomp.CodeGenerator.Context context, com.google.javascript.jscomp.CodeGenerator.Context rhsContext, int leftPrecedence, int rightPrecedence) {
        com.google.javascript.rhino.Node firstNonOperator = n.getFirstChild();
        while (firstNonOperator.getType() == op) {
            firstNonOperator = firstNonOperator.getFirstChild();
        } 
        addExpr(firstNonOperator, leftPrecedence, context);
        com.google.javascript.rhino.Node current = firstNonOperator;
        do {
            current = current.getParent();
            cc.addOp(opStr, true);
            addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);
        } while (current != n );
    }

    static boolean isSimpleNumber(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if ((c < '0') || (c > '9')) {
                return false;
            }
        }
        return (len > 0) && (s.charAt(0) != '0');
    }

    static double getSimpleNumber(java.lang.String s) {
        if (com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(s)) {
            try {
                long l = java.lang.Long.parseLong(s);
                if (l < com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                    return l;
                }
            } catch (java.lang.NumberFormatException e) {
            }
        }
        return java.lang.Double.NaN;
    }

    private boolean isIndirectEval(com.google.javascript.rhino.Node n) {
        return (n.isName() && "eval".equals(n.getString())) && (!n.getBooleanProp(com.google.javascript.rhino.Node.DIRECT_EVAL));
    }

    private void addNonEmptyStatement(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context, boolean allowNonBlockChild) {
        com.google.javascript.rhino.Node nodeToProcess = n;
        if ((!allowNonBlockChild) && (!n.isBlock())) {
            throw new java.lang.Error("Missing BLOCK child.");
        }
        if (n.isBlock()) {
            int count = com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2);
            if (count == 0) {
                if (cc.shouldPreserveExtraBlocks()) {
                    cc.beginBlock();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                } else {
                    cc.endStatement(true);
                }
                return;
            }
            if (count == 1) {
                com.google.javascript.rhino.Node firstAndOnlyChild = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n);
                boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();
                if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {
                    cc.beginBlock();
                    add(firstAndOnlyChild, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                    cc.maybeLineBreak();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    return;
                } else {
                    nodeToProcess = firstAndOnlyChild;
                }
            }
            if (count > 1) {
                context = com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
            }
        }
        if (nodeToProcess.isEmpty()) {
            cc.endStatement(true);
        } else {
            add(nodeToProcess, context);
            if (nodeToProcess.isVar()) {
                cc.endStatement();
            }
        }
    }

    private boolean isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node n) {
        if (n.isLabel()) {
            com.google.javascript.rhino.Node labeledStatement = n.getLastChild();
            if (!labeledStatement.isBlock()) {
                return isOneExactlyFunctionOrDo(labeledStatement);
            } else if (com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2) == 1) {
                return isOneExactlyFunctionOrDo(com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n));
            } else {
                return false;
            }
        } else {
            return n.isFunction() || n.isDo();
        }
    }

    private void addExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if ((com.google.javascript.jscomp.NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE) && n.isIn())) {
            add("(");
            add(n, clearContextForNoInOperator(context));
            add(")");
        } else {
            add(n, context);
        }
    }

    void addList(com.google.javascript.rhino.Node firstInList) {
        addList(firstInList, true, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument) {
        addList(firstInList, isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context lhsContext) {
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            boolean isFirst = n == firstInList;
            if (isFirst) {
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
            } else {
                cc.listSeparator();
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            }
        }
    }

    void addArrayList(com.google.javascript.rhino.Node firstInList) {
        boolean lastWasEmpty = false;
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            if (n != firstInList) {
                cc.listSeparator();
            }
            addExpr(n, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            lastWasEmpty = n.isEmpty();
        }
        if (lastWasEmpty) {
            cc.listSeparator();
        }
    }

    void addCaseBody(com.google.javascript.rhino.Node caseBody) {
        cc.beginCaseBody();
        add(caseBody);
        cc.endCaseBody();
    }

    void addAllSiblings(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n; c != null; c = c.getNext()) {
            add(c);
        }
    }

    private void addJsString(com.google.javascript.rhino.Node n) {
        java.lang.String s = n.getString();
        boolean useSlashV = n.getBooleanProp(com.google.javascript.rhino.Node.SLASH_V);
        if (useSlashV) {
            add(jsString(n.getString(), useSlashV));
        } else {
            java.lang.String cached = ESCAPED_JS_STRINGS.get(s);
            if (cached == null) {
                cached = jsString(n.getString(), useSlashV);
                ESCAPED_JS_STRINGS.put(s, cached);
            }
            add(cached);
        }
    }

    private java.lang.String jsString(java.lang.String s, boolean useSlashV) {
        int singleq = 0;
        int doubleq = 0;
        for (int i = 0; i < s.length(); i++) {
            switch (s.charAt(i)) {
                case '"' :
                    doubleq++;
                    break;
                case '\'' :
                    singleq++;
                    break;
            }
        }
        java.lang.String doublequote;
        java.lang.String singlequote;
        char quote;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(422).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(422).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(422).collectInput("singleq",singleq);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(422).collectInput("com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",com.google.javascript.jscomp.CodeGenerator.HEX_CHARS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(422).collectInput("com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS",com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(422).collectInput("s",s);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(422).collectInput("useSlashV",useSlashV);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(422).collectInput("doubleq",doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(422).collectInput("singleq < doubleq",singleq < doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(422).collectInput("com.google.javascript.jscomp.CodeGenerator.this.cc",com.google.javascript.jscomp.CodeGenerator.this.cc);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(422).collectInput("com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder",com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(422).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(422).collectionEnds();
        }
        if (runtimeAngelicValue) if (singleq < doubleq) {
            quote = '\'';
            doublequote = "\"";
            singlequote = "\\\'";
        } else {
            quote = '\"';
            doublequote = "\\\"";
            singlequote = "\'";
        }
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder, useSlashV);
    }

    static java.lang.String regexpEscape(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '/', "\"", "'", "\\", outputCharsetEncoder, false);
    }

    static java.lang.String escapeToDoubleQuotedJsString(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '"', "\\\"", "\'", "\\\\", null, false);
    }

    static java.lang.String regexpEscape(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.regexpEscape(s, null);
    }

    private static java.lang.String strEscape(java.lang.String s, char quote, java.lang.String doublequoteEscape, java.lang.String singlequoteEscape, java.lang.String backslashEscape, java.nio.charset.CharsetEncoder outputCharsetEncoder, boolean useSlashV) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder(s.length() + 2);
        sb.append(quote);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch (c) {
                case '\u0000' :
                    sb.append("\\x00");
                    break;
                case '\u000b' :
                    if (useSlashV) {
                        sb.append("\\v");
                    } else {
                        sb.append("\\x0B");
                    }
                    break;
                case '\b' :
                    sb.append("\\b");
                    break;
                case '\f' :
                    sb.append("\\f");
                    break;
                case '\n' :
                    sb.append("\\n");
                    break;
                case '\r' :
                    sb.append("\\r");
                    break;
                case '\t' :
                    sb.append("\\t");
                    break;
                case '\\' :
                    sb.append(backslashEscape);
                    break;
                case '\"' :
                    sb.append(doublequoteEscape);
                    break;
                case '\'' :
                    sb.append(singlequoteEscape);
                    break;
                case ' ' :
                    sb.append("\\u2028");
                    break;
                case ' ' :
                    sb.append("\\u2029");
                    break;
                case '>' :
                    if ((i >= 2) && (((s.charAt(i - 1) == '-') && (s.charAt(i - 2) == '-')) || ((s.charAt(i - 1) == ']') && (s.charAt(i - 2) == ']')))) {
                        sb.append("\\>");
                    } else {
                        sb.append(c);
                    }
                    break;
                case '<' :
                    final java.lang.String END_SCRIPT = "/script";
                    final java.lang.String START_COMMENT = "!--";
                    if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {
                        sb.append("<\\");
                    } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {
                        sb.append("<\\");
                    } else {
                        sb.append(c);
                    }
                    break;
                default :
                    if (outputCharsetEncoder != null) {
                        if (outputCharsetEncoder.canEncode(c)) {
                            sb.append(c);
                        } else {
                            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                        }
                    } else if ((c > 0x1f) && (c < 0x7f)) {
                        sb.append(c);
                    } else {
                        com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                    }
            }
        }
        sb.append(quote);
        return sb.toString();
    }

    static java.lang.String identifierEscape(java.lang.String s) {
        if (com.google.javascript.jscomp.NodeUtil.isLatin(s)) {
            return s;
        }
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if ((c > 0x1f) && (c < 0x7f)) {
                sb.append(c);
            } else {
                com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
            }
        }
        return sb.toString();
    }

    private static int getNonEmptyChildCount(com.google.javascript.rhino.Node n, int maxCount) {
        int i = 0;
        com.google.javascript.rhino.Node c = n.getFirstChild();
        for (; (c != null) && (i < maxCount); c = c.getNext()) {
            if (c.isBlock()) {
                i += com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(c, maxCount - i);
            } else if (!c.isEmpty()) {
                i++;
            }
        }
        return i;
    }

    private static com.google.javascript.rhino.Node getFirstNonEmptyChild(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.isBlock()) {
                com.google.javascript.rhino.Node result = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(c);
                if (result != null) {
                    return result;
                }
            } else if (!c.isEmpty()) {
                return c;
            }
        }
        return null;
    }

    enum Context {

        STATEMENT,
        BEFORE_DANGLING_ELSE,
        START_OF_EXPR,
        PRESERVE_BLOCK,
        IN_FOR_INIT_CLAUSE,
        OTHER;}

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNonEmptyExpression(com.google.javascript.jscomp.CodeGenerator.Context currentContext) {
        return currentContext == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE ? com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context clearContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.OTHER : context;
    }

    private static void appendHexJavaScriptRepresentation(java.lang.StringBuilder sb, char c) {
        try {
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(c, sb);
        } catch (java.io.IOException ex) {
            throw new java.lang.RuntimeException(ex);
        }
    }

    private static void appendHexJavaScriptRepresentation(int codePoint, java.lang.Appendable out) throws java.io.IOException {
        if (java.lang.Character.isSupplementaryCodePoint(codePoint)) {
            char[] surrogates = java.lang.Character.toChars(codePoint);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[0], out);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[1], out);
            return;
        }
        out.append("\\u").append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 12) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 8) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 4) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[codePoint & 0xf]);
    }
}
[2001113] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659904565985
GPR[EPVATF]-1659904566733
GPR[SPS]-1659904566734
[2002642] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:980.
GPR[EPS]-1659904567514
GPR[ESUN]-1659904567514
GPR[SSUN]-1659904567514
-718432441
GPR[SPVATF]-1659904567746
GPR[EPVATF]-1659904568451
GPR[SPS]-1659904568451
[2004286] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:971.
GPR[EPS]-1659904569158
GPR[ESUN]-1659904569158
GPR[SSUN]-1659904569158
-718432441
GPR[ESUN]-1659904569374
GPR[SSUN]-1659904569374
-718432441
GPR[ESUN]-1659904569587
GPR[SSUN]-1659904569587
-718432441
GPR[SPVATF]-1659904569810
GPR[EPVATF]-1659904570518
GPR[SPS]-1659904570518
[2006437] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:955.
GPR[EPS]-1659904571309
GPR[SPVATF]-1659904571309
GPR[EPVATF]-1659904573050
GPR[SPS]-1659904573050
[2009647] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:955.
GPR[EPS]-1659904574519
GPR[ESUN]-1659904574519
GPR[SSUN]-1659904574519
-718432441
GPR[ESUN]-1659904574741
GPR[SSUN]-1659904574741
-718432441
GPR[ESUN]-1659904574957
GPR[SSUN]-1659904574957
-718432441
GPR[SPVATF]-1659904575172
GPR[EPVATF]-1659904575804
GPR[SPS]-1659904575804
[2011620] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1091.
GPR[EPS]-1659904576492
GPR[ESUN]-1659904576492
GPR[SSUN]-1659904576492
-718432441
GPR[SPVATF]-1659904576712
GPR[EPVATF]-1659904577295
GPR[SPS]-1659904577295
[2013115] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1090.
GPR[EPS]-1659904577987
GPR[SPVATF]-1659904577988
GPR[EPVATF]-1659904578576
GPR[SPS]-1659904578576
[2014387] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1090.
GPR[EPS]-1659904579259
GPR[ESUN]-1659904579259
GPR[SSUN]-1659904579259
-718432441
GPR[SPVATF]-1659904579474
GPR[EPVATF]-1659904580065
GPR[SPS]-1659904580065
[2015920] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1079.
GPR[EPS]-1659904580792
GPR[SPVATF]-1659904580792
GPR[EPVATF]-1659904581363
GPR[SPS]-1659904581363
[2017187] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1079.
GPR[EPS]-1659904582059
GPR[ESUN]-1659904582059
GPR[SSUN]-1659904582059
-718432441
GPR[SPVATF]-1659904582273
GPR[EPVATF]-1659904582848
GPR[SPS]-1659904582848
[2018663] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1027.
GPR[EPS]-1659904583535
GPR[ESUN]-1659904583535
GPR[SSUN]-1659904583535
-718432441
GPR[ESUN]-1659904583750
GPR[SSUN]-1659904583750
2433571
GPR[SPVATF]-1659904584006
GPR[EPVATF]-1659904584597
GPR[SPS]-1659904584597
[2020339] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int LAST_PROP = 54;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private abstract static class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        value = x.toString();
                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(433).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                if (com.google.javascript.rhino.Node.this.last!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.rhino.Node.this.parent!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.rhino.Node.this.next!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.rhino.Node.this.first!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(433).collectionEnds();
            }
            if (runtimeAngelicValue)
                return java.util.Collections.emptySet();

        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[2020339] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659904585211
GPR[SSUN]-1659904585211
GPR[ESUN]-1659904585211
GPR[SSUN]-1659904585211
GPR[ESUN]-1659904585211
GPR[SSUN]-1659904585211
GPR[ESUN]-1659904585211
GPR[SSUN]-1659904585211
1537627151
GPR[ESUN]-1659904585421
GPR[SSUN]-1659904585421
-1345859678
GPR[ESUN]-1659904585671
GPR[SSUN]-1659904585671
-1345859678
GPR[SPVATF]-1659904585916
GPR[EPVATF]-1659904586532
GPR[SPS]-1659904586532
[2022264] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:715.
GPR[EPS]-1659904587136
GPR[SPVATF]-1659904587136
GPR[EPVATF]-1659904587721
GPR[SPS]-1659904587721
[2023479] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:715.
GPR[EPS]-1659904588351
GPR[ESUN]-1659904588351
GPR[SSUN]-1659904588351
-1345859678
GPR[SPVATF]-1659904588596
GPR[EPVATF]-1659904589190
GPR[SPS]-1659904589190
[2024918] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:714.
GPR[EPS]-1659904589790
GPR[ESUN]-1659904589790
GPR[SSUN]-1659904589790
-1345859678
GPR[SPVATF]-1659904590035
GPR[EPVATF]-1659904590596
GPR[SPS]-1659904590596
[2026317] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:713.
GPR[EPS]-1659904591189
GPR[ESUN]-1659904591190
GPR[SSUN]-1659904591190
-1345859678
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
GPR[ESUN]-1659904591435
GPR[SSUN]-1659904591435
602654447
GPR[SPVATF]-1659904591641
GPR[EPVATF]-1659904592203
GPR[SPS]-1659904592203
[2027832] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DefinitionsRemover:52.
GPR[EPS]-1659904592704
GPR[SPVATF]-1659904592705
GPR[EPVATF]-1659904593267
GPR[SPS]-1659904593267
[2028893] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DefinitionsRemover:52.
GPR[EPS]-1659904593765
GPR[ESUN]-1659904593765
GPR[SSUN]-1659904593766
2433571
GPR[ESUN]-1659904594006
GPR[SSUN]-1659904594006
-718432441
GPR[ESUN]-1659904594217
GPR[SSUN]-1659904594217
-718432441
GPR[SPVATF]-1659904594427
GPR[EPVATF]-1659904595008
GPR[SPS]-1659904595008
[2030908] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1101.
GPR[EPS]-1659904595780
GPR[ESUN]-1659904595780
GPR[SSUN]-1659904595780
-718432441
GPR[SPVATF]-1659904596005
GPR[EPVATF]-1659904596580
GPR[SPS]-1659904596580
[2032395] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1025.
GPR[EPS]-1659904597267
GPR[ESUN]-1659904597267
GPR[SSUN]-1659904597267
-718432441
GPR[SPVATF]-1659904597478
GPR[EPVATF]-1659904598051
GPR[SPS]-1659904598051
[2033925] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1024.
GPR[EPS]-1659904598797
GPR[ESUN]-1659904598797
GPR[SSUN]-1659904598797
-718432441
GPR[ESUN]-1659904599010
GPR[SSUN]-1659904599010
2433571
GPR[ESUN]-1659904599249
GPR[SSUN]-1659904599249
-718432441
GPR[SPVATF]-1659904599457
GPR[EPVATF]-1659904600048
GPR[SPS]-1659904600048
GPR[EPS]-1659904614993
GPR[ESUN]-1659904614993
GPR[SSUN]-1659904614994
2013302092
GPR[SPVATF]-1659904615243
GPR[EPVATF]-1659904615856
GPR[SPS]-1659904615856
[2051357] ERROR ConstraintModelBuilder - Unable to compile the change: 
class SimpleDefinitionFinder implements com.google.javascript.jscomp.CompilerPass , com.google.javascript.jscomp.DefinitionProvider {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final java.util.Map<com.google.javascript.rhino.Node, com.google.javascript.jscomp.DefinitionSite> definitionSiteMap;

    private final com.google.common.collect.Multimap<java.lang.String, com.google.javascript.jscomp.DefinitionsRemover.Definition> nameDefinitionMultimap;

    private final com.google.common.collect.Multimap<java.lang.String, com.google.javascript.jscomp.UseSite> nameUseSiteMultimap;

    public SimpleDefinitionFinder(com.google.javascript.jscomp.AbstractCompiler compiler) {
        this.compiler = compiler;
        this.definitionSiteMap = com.google.common.collect.Maps.newLinkedHashMap();
        this.nameDefinitionMultimap = com.google.common.collect.LinkedHashMultimap.create();
        this.nameUseSiteMultimap = com.google.common.collect.LinkedHashMultimap.create();
    }

    public java.util.Collection<com.google.javascript.jscomp.DefinitionSite> getDefinitionSites() {
        return definitionSiteMap.values();
    }

    private com.google.javascript.jscomp.DefinitionSite getDefinitionAt(com.google.javascript.rhino.Node node) {
        return definitionSiteMap.get(node);
    }

    com.google.javascript.jscomp.DefinitionSite getDefinitionForFunction(com.google.javascript.rhino.Node function) {
        com.google.common.base.Preconditions.checkState(function.isFunction());
        return getDefinitionAt(com.google.javascript.jscomp.SimpleDefinitionFinder.getNameNodeFromFunctionNode(function));
    }

    @java.lang.Override
    public java.util.Collection<com.google.javascript.jscomp.DefinitionsRemover.Definition> getDefinitionsReferencedAt(com.google.javascript.rhino.Node useSite) {
        if (definitionSiteMap.containsKey(useSite)) {
            return null;
        }
        if (useSite.isGetProp()) {
            java.lang.String propName = useSite.getLastChild().getString();
            if (propName.equals("apply") || propName.equals("call")) {
                useSite = useSite.getFirstChild();
            }
        }
        java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(useSite);
        if (name != null) {
            java.util.Collection<com.google.javascript.jscomp.DefinitionsRemover.Definition> defs = nameDefinitionMultimap.get(name);
            if (!defs.isEmpty()) {
                return defs;
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(444).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(444).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(444).collectInput("defs",defs);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(444).collectInput("com.google.javascript.jscomp.SimpleDefinitionFinder.this.compiler",com.google.javascript.jscomp.SimpleDefinitionFinder.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(444).collectInput("useSite",useSite);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(444).collectInput("com.google.javascript.jscomp.SimpleDefinitionFinder.this.nameDefinitionMultimap",com.google.javascript.jscomp.SimpleDefinitionFinder.this.nameDefinitionMultimap);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(444).collectInput("com.google.javascript.jscomp.SimpleDefinitionFinder.this.nameUseSiteMultimap",com.google.javascript.jscomp.SimpleDefinitionFinder.this.nameUseSiteMultimap);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(444).collectInput("name",name);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(444).collectInput("com.google.javascript.jscomp.SimpleDefinitionFinder.this.definitionSiteMap",com.google.javascript.jscomp.SimpleDefinitionFinder.this.definitionSiteMap);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(444).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(444).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return null;

            }
        } else {
            return null;
        }
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node source) {
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, externs, new com.google.javascript.jscomp.SimpleDefinitionFinder.DefinitionGatheringCallback(true));
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, source, new com.google.javascript.jscomp.SimpleDefinitionFinder.DefinitionGatheringCallback(false));
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, source, new com.google.javascript.jscomp.SimpleDefinitionFinder.UseSiteGatheringCallback());
    }

    java.util.Collection<com.google.javascript.jscomp.UseSite> getUseSites(com.google.javascript.jscomp.DefinitionsRemover.Definition definition) {
        java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(definition.getLValue());
        return nameUseSiteMultimap.get(name);
    }

    private static java.lang.String getSimplifiedName(com.google.javascript.rhino.Node node) {
        if (node.isName()) {
            java.lang.String name = node.getString();
            if ((name != null) && (!name.isEmpty())) {
                return name;
            } else {
                return null;
            }
        } else if (node.isGetProp()) {
            return "this." + node.getLastChild().getString();
        }
        return null;
    }

    private class DefinitionGatheringCallback extends com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback {
        private boolean inExterns;

        DefinitionGatheringCallback(boolean inExterns) {
            this.inExterns = inExterns;
        }

        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal traversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
            if ((inExterns && node.isName()) && parent.isParamList()) {
                return;
            }
            com.google.javascript.jscomp.DefinitionsRemover.Definition def = com.google.javascript.jscomp.DefinitionsRemover.getDefinition(node, inExterns);
            if (def != null) {
                java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(def.getLValue());
                if (name != null) {
                    com.google.javascript.rhino.Node rValue = def.getRValue();
                    if (((rValue != null) && (!com.google.javascript.jscomp.NodeUtil.isImmutableValue(rValue))) && (!rValue.isFunction())) {
                        com.google.javascript.jscomp.DefinitionsRemover.Definition unknownDef = new com.google.javascript.jscomp.DefinitionsRemover.UnknownDefinition(def.getLValue(), inExterns);
                        def = unknownDef;
                    }
                    if (inExterns) {
                        java.util.List<com.google.javascript.jscomp.DefinitionsRemover.Definition> stubsToRemove = com.google.common.collect.Lists.newArrayList();
                        java.lang.String qualifiedName = node.getQualifiedName();
                        if (qualifiedName != null) {
                            for (com.google.javascript.jscomp.DefinitionsRemover.Definition prevDef : nameDefinitionMultimap.get(name)) {
                                if ((prevDef instanceof com.google.javascript.jscomp.DefinitionsRemover.ExternalNameOnlyDefinition) && (!jsdocContainsDeclarations(node))) {
                                    java.lang.String prevName = prevDef.getLValue().getQualifiedName();
                                    if (qualifiedName.equals(prevName)) {
                                        stubsToRemove.add(prevDef);
                                    }
                                }
                            }
                            for (com.google.javascript.jscomp.DefinitionsRemover.Definition prevDef : stubsToRemove) {
                                nameDefinitionMultimap.remove(name, prevDef);
                            }
                        }
                    }
                    nameDefinitionMultimap.put(name, def);
                    definitionSiteMap.put(node, new com.google.javascript.jscomp.DefinitionSite(node, def, traversal.getModule(), traversal.inGlobalScope(), inExterns));
                }
            }
            if ((inExterns && (parent != null)) && parent.isExprResult()) {
                java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(node);
                if (name != null) {
                    boolean dropStub = false;
                    if (!jsdocContainsDeclarations(node)) {
                        java.lang.String qualifiedName = node.getQualifiedName();
                        if (qualifiedName != null) {
                            for (com.google.javascript.jscomp.DefinitionsRemover.Definition prevDef : nameDefinitionMultimap.get(name)) {
                                java.lang.String prevName = prevDef.getLValue().getQualifiedName();
                                if (qualifiedName.equals(prevName)) {
                                    dropStub = true;
                                    break;
                                }
                            }
                        }
                    }
                    if (!dropStub) {
                        com.google.javascript.jscomp.DefinitionsRemover.Definition definition = new com.google.javascript.jscomp.DefinitionsRemover.ExternalNameOnlyDefinition(node);
                        nameDefinitionMultimap.put(name, definition);
                        definitionSiteMap.put(node, new com.google.javascript.jscomp.DefinitionSite(node, definition, traversal.getModule(), traversal.inGlobalScope(), inExterns));
                    }
                }
            }
        }

        private boolean jsdocContainsDeclarations(com.google.javascript.rhino.Node node) {
            com.google.javascript.rhino.JSDocInfo info = node.getJSDocInfo();
            return (info != null) && info.containsDeclaration();
        }
    }

    private class UseSiteGatheringCallback extends com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback {
        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal traversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
            java.util.Collection<com.google.javascript.jscomp.DefinitionsRemover.Definition> defs = getDefinitionsReferencedAt(node);
            if (defs == null) {
                return;
            }
            com.google.javascript.jscomp.DefinitionsRemover.Definition first = defs.iterator().next();
            java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(first.getLValue());
            com.google.common.base.Preconditions.checkNotNull(name);
            nameUseSiteMultimap.put(name, new com.google.javascript.jscomp.UseSite(node, traversal.getScope(), traversal.getModule()));
        }
    }

    static boolean isCallOrNewSite(com.google.javascript.jscomp.UseSite use) {
        com.google.javascript.rhino.Node call = use.node.getParent();
        if (call == null) {
            return false;
        }
        return com.google.javascript.jscomp.NodeUtil.isCallOrNew(call) && (call.getFirstChild() == use.node);
    }

    boolean canModifyDefinition(com.google.javascript.jscomp.DefinitionsRemover.Definition definition) {
        if (isExported(definition)) {
            return false;
        }
        java.util.Collection<com.google.javascript.jscomp.UseSite> useSites = getUseSites(definition);
        if (useSites.isEmpty()) {
            return false;
        }
        for (com.google.javascript.jscomp.UseSite site : useSites) {
            com.google.javascript.rhino.Node nameNode = site.node;
            java.util.Collection<com.google.javascript.jscomp.DefinitionsRemover.Definition> singleSiteDefinitions = getDefinitionsReferencedAt(nameNode);
            if (singleSiteDefinitions.size() > 1) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(!singleSiteDefinitions.isEmpty());
            com.google.common.base.Preconditions.checkState(singleSiteDefinitions.contains(definition));
        }
        return true;
    }

    private boolean isExported(com.google.javascript.jscomp.DefinitionsRemover.Definition definition) {
        com.google.javascript.rhino.Node lValue = definition.getLValue();
        if (lValue == null) {
            return true;
        }
        java.lang.String partialName;
        if (lValue.isGetProp()) {
            partialName = lValue.getLastChild().getString();
        } else if (lValue.isName()) {
            partialName = lValue.getString();
        } else {
            return true;
        }
        com.google.javascript.jscomp.CodingConvention codingConvention = compiler.getCodingConvention();
        if (codingConvention.isExported(partialName)) {
            return true;
        }
        return false;
    }

    static boolean isSimpleFunctionDeclaration(com.google.javascript.rhino.Node fn) {
        com.google.javascript.rhino.Node parent = fn.getParent();
        com.google.javascript.rhino.Node gramps = parent.getParent();
        com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.SimpleDefinitionFinder.getNameNodeFromFunctionNode(fn);
        if ((nameNode != null) && nameNode.isName()) {
            java.lang.String name = nameNode.getString();
            if (name.equals(com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN) || name.equals(com.google.javascript.jscomp.ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)) {
                return false;
            }
        }
        if (com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(fn)) {
            return true;
        }
        if (fn.getFirstChild().getString().isEmpty() && (com.google.javascript.jscomp.NodeUtil.isExprAssign(gramps) || parent.isName())) {
            return true;
        }
        return false;
    }

    static com.google.javascript.rhino.Node getNameNodeFromFunctionNode(com.google.javascript.rhino.Node function) {
        com.google.common.base.Preconditions.checkState(function.isFunction());
        if (com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(function)) {
            return function.getFirstChild();
        } else {
            com.google.javascript.rhino.Node parent = function.getParent();
            if (com.google.javascript.jscomp.NodeUtil.isVarDeclaration(parent)) {
                return parent;
            } else if (parent.isAssign()) {
                return parent.getFirstChild();
            } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
                return parent;
            }
        }
        return null;
    }

    void removeReferences(com.google.javascript.rhino.Node node) {
        if (com.google.javascript.jscomp.DefinitionsRemover.isDefinitionNode(node)) {
            com.google.javascript.jscomp.DefinitionSite defSite = definitionSiteMap.get(node);
            if (defSite != null) {
                com.google.javascript.jscomp.DefinitionsRemover.Definition def = defSite.definition;
                java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(def.getLValue());
                if (name != null) {
                    this.definitionSiteMap.remove(node);
                    this.nameDefinitionMultimap.remove(name, node);
                }
            }
        } else {
            com.google.javascript.rhino.Node useSite = node;
            if (useSite.isGetProp()) {
                java.lang.String propName = useSite.getLastChild().getString();
                if (propName.equals("apply") || propName.equals("call")) {
                    useSite = useSite.getFirstChild();
                }
            }
            java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(useSite);
            if (name != null) {
                this.nameUseSiteMultimap.remove(name, new com.google.javascript.jscomp.UseSite(useSite, null, null));
            }
        }
        for (com.google.javascript.rhino.Node child : node.children()) {
            removeReferences(child);
        }
    }
}
[2051357] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659904616229
GPR[SSUN]-1659904616229
GPR[ESUN]-1659904616229
GPR[SSUN]-1659904616229
GPR[ESUN]-1659904616229
GPR[SSUN]-1659904616229
-718432441
GPR[SPVATF]-1659904616447
GPR[EPVATF]-1659904617059
GPR[SPS]-1659904617059
[2052974] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:178.
GPR[EPS]-1659904617846
GPR[ESUN]-1659904617846
GPR[SSUN]-1659904617846
-718432441
GPR[SPVATF]-1659904618062
GPR[EPVATF]-1659904618680
GPR[SPS]-1659904618680
[2054499] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:177.
GPR[EPS]-1659904619371
GPR[ESUN]-1659904619371
GPR[SSUN]-1659904619371
-718432441
GPR[SPVATF]-1659904619587
GPR[EPVATF]-1659904620231
GPR[SPS]-1659904620231
GPR[EPS]-1659904641133
GPR[SPVATF]-1659904641133
GPR[EPVATF]-1659904641842
GPR[SPS]-1659904641842
[2077741] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:172.
GPR[EPS]-1659904642613
GPR[ESUN]-1659904642613
GPR[SSUN]-1659904642613
-718432441
GPR[SPVATF]-1659904642829
GPR[EPVATF]-1659904643525
GPR[SPS]-1659904643525
GPR[EPS]-1659904664646
GPR[ESUN]-1659904664646
GPR[SSUN]-1659904664646
GPR[ESUN]-1659904664646
GPR[SSUN]-1659904664646
GPR[ESUN]-1659904664646
GPR[SSUN]-1659904664646
GPR[ESUN]-1659904664646
GPR[SSUN]-1659904664646
GPR[ESUN]-1659904664646
GPR[SSUN]-1659904664646
-1345859678
GPR[ESUN]-1659904664912
GPR[SSUN]-1659904664913
1537627151
GPR[SPVATF]-1659904665123
GPR[EPVATF]-1659904665904
GPR[SPS]-1659904665904
[2101539] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:205.
GPR[EPS]-1659904666411
GPR[ESUN]-1659904666411
GPR[SSUN]-1659904666411
-1345859678
GPR[ESUN]-1659904666665
GPR[SSUN]-1659904666665
-1345859678
GPR[SPVATF]-1659904666914
GPR[EPVATF]-1659904667705
GPR[SPS]-1659904667705
[2103451] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:579.
GPR[EPS]-1659904668323
GPR[ESUN]-1659904668323
GPR[SSUN]-1659904668323
-1345859678
GPR[ESUN]-1659904668579
GPR[SSUN]-1659904668579
GPR[ESUN]-1659904668579
GPR[SSUN]-1659904668579
GPR[ESUN]-1659904668579
GPR[SSUN]-1659904668580
GPR[ESUN]-1659904668580
GPR[SSUN]-1659904668580
GPR[ESUN]-1659904668580
GPR[SSUN]-1659904668580
GPR[ESUN]-1659904668580
GPR[SSUN]-1659904668580
1537627151
GPR[SPVATF]-1659904668789
GPR[EPVATF]-1659904669639
GPR[SPS]-1659904669639
[2105263] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:204.
GPR[EPS]-1659904670135
GPR[SPVATF]-1659904670135
GPR[EPVATF]-1659904670932
GPR[SPS]-1659904670932
[2107479] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:204.
GPR[EPS]-1659904672351
GPR[ESUN]-1659904672351
GPR[SSUN]-1659904672351
GPR[ESUN]-1659904672351
GPR[SSUN]-1659904672351
GPR[ESUN]-1659904672351
GPR[SSUN]-1659904672351
GPR[ESUN]-1659904672351
GPR[SSUN]-1659904672351
GPR[ESUN]-1659904672351
GPR[SSUN]-1659904672351
GPR[ESUN]-1659904672351
GPR[SSUN]-1659904672351
GPR[ESUN]-1659904672351
GPR[SSUN]-1659904672351
GPR[ESUN]-1659904672351
GPR[SSUN]-1659904672351
GPR[ESUN]-1659904672351
GPR[SSUN]-1659904672351
1852376448
GPR[ESUN]-1659904672619
GPR[SSUN]-1659904672619
1852376448
GPR[ESUN]-1659904672835
GPR[SSUN]-1659904672835
1852376448
GPR[ESUN]-1659904673047
GPR[SSUN]-1659904673047
1852376448
GPR[SPVATF]-1659904673260
GPR[EPVATF]-1659904674103
GPR[SPS]-1659904674103
[2110017] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls:69.
GPR[EPS]-1659904674889
GPR[ESUN]-1659904674889
GPR[SSUN]-1659904674889
1852376448
GPR[SPVATF]-1659904675166
GPR[EPVATF]-1659904676029
GPR[SPS]-1659904676029
[2111704] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls:66.
GPR[EPS]-1659904676576
GPR[ESUN]-1659904676576
GPR[SSUN]-1659904676576
1852376448
GPR[SPVATF]-1659904676790
GPR[EPVATF]-1659904677419
GPR[SPS]-1659904677419
[2113079] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls:64.
GPR[EPS]-1659904677951
GPR[ESUN]-1659904677951
GPR[SSUN]-1659904677951
1852376448
GPR[SPVATF]-1659904678170
GPR[EPVATF]-1659904678783
GPR[SPS]-1659904678783
[2114433] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls:60.
GPR[EPS]-1659904679306
GPR[ESUN]-1659904679306
GPR[SSUN]-1659904679306
1852376448
GPR[ESUN]-1659904679521
GPR[SSUN]-1659904679521
1852376448
GPR[ESUN]-1659904679735
GPR[SSUN]-1659904679735
1852376448
GPR[SPVATF]-1659904679951
GPR[EPVATF]-1659904680548
GPR[SPS]-1659904680548
[2116202] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:130.
GPR[EPS]-1659904681074
GPR[SPVATF]-1659904681075
GPR[EPVATF]-1659904681725
GPR[SPS]-1659904681725
[2117413] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:130.
GPR[EPS]-1659904682285
GPR[ESUN]-1659904682285
GPR[SSUN]-1659904682285
1852376448
GPR[SPVATF]-1659904682506
GPR[EPVATF]-1659904683095
GPR[SPS]-1659904683095
[2118741] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:125.
GPR[EPS]-1659904683613
GPR[SPVATF]-1659904683613
GPR[EPVATF]-1659904684217
GPR[SPS]-1659904684217
[2119862] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:125.
GPR[EPS]-1659904684734
GPR[ESUN]-1659904684734
GPR[SSUN]-1659904684734
1852376448
GPR[SPVATF]-1659904684951
GPR[EPVATF]-1659904685532
GPR[SPS]-1659904685532
[2121192] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:121.
GPR[EPS]-1659904686065
GPR[SPVATF]-1659904686065
GPR[EPVATF]-1659904686647
GPR[SPS]-1659904686647
[2122285] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:121.
GPR[EPS]-1659904687157
GPR[ESUN]-1659904687157
GPR[SSUN]-1659904687157
1852376448
GPR[SPVATF]-1659904687374
GPR[EPVATF]-1659904687961
GPR[SPS]-1659904687961
[2123605] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:178.
GPR[EPS]-1659904688477
GPR[ESUN]-1659904688477
GPR[SSUN]-1659904688477
1852376448
GPR[SPVATF]-1659904688695
GPR[EPVATF]-1659904689304
GPR[SPS]-1659904689304
[2124958] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:177.
GPR[EPS]-1659904689830
GPR[SPVATF]-1659904689830
GPR[EPVATF]-1659904690453
GPR[SPS]-1659904690453
[2126142] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:177.
GPR[EPS]-1659904691014
GPR[ESUN]-1659904691014
GPR[SSUN]-1659904691014
GPR[ESUN]-1659904691014
GPR[SSUN]-1659904691014
GPR[ESUN]-1659904691014
GPR[SSUN]-1659904691014
GPR[ESUN]-1659904691014
GPR[SSUN]-1659904691014
GPR[ESUN]-1659904691014
GPR[SSUN]-1659904691014
GPR[ESUN]-1659904691014
GPR[SSUN]-1659904691014
GPR[ESUN]-1659904691014
GPR[SSUN]-1659904691014
GPR[ESUN]-1659904691014
GPR[SSUN]-1659904691014
GPR[ESUN]-1659904691014
GPR[SSUN]-1659904691014
GPR[ESUN]-1659904691014
GPR[SSUN]-1659904691014
GPR[ESUN]-1659904691014
GPR[SSUN]-1659904691015
GPR[ESUN]-1659904691015
GPR[SSUN]-1659904691015
GPR[ESUN]-1659904691015
GPR[SSUN]-1659904691015
GPR[ESUN]-1659904691015
GPR[SSUN]-1659904691015
GPR[ESUN]-1659904691015
GPR[SSUN]-1659904691015
GPR[ESUN]-1659904691015
GPR[SSUN]-1659904691015
GPR[ESUN]-1659904691015
GPR[SSUN]-1659904691015
GPR[ESUN]-1659904691015
GPR[SSUN]-1659904691015
GPR[ESUN]-1659904691015
GPR[SSUN]-1659904691015
2433571
GPR[ESUN]-1659904691255
GPR[SSUN]-1659904691255
-534884160
GPR[ESUN]-1659904691596
GPR[SSUN]-1659904691596
GPR[ESUN]-1659904691596
GPR[SSUN]-1659904691596
GPR[ESUN]-1659904691596
GPR[SSUN]-1659904691596
GPR[ESUN]-1659904691596
GPR[SSUN]-1659904691596
GPR[ESUN]-1659904691596
GPR[SSUN]-1659904691596
GPR[ESUN]-1659904691596
GPR[SSUN]-1659904691597
GPR[ESUN]-1659904691597
GPR[SSUN]-1659904691597
2433571
GPR[SPVATF]-1659904691830
GPR[EPVATF]-1659904692474
GPR[SPS]-1659904692474
[2128298] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1408.
GPR[EPS]-1659904693170
GPR[ESUN]-1659904693170
GPR[SSUN]-1659904693170
1350153804
GPR[ESUN]-1659904693386
GPR[SSUN]-1659904693386
1350153804
GPR[SPVATF]-1659904693602
GPR[EPVATF]-1659904694223
GPR[SPS]-1659904694223
[2129903] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilerInput:120.
GPR[EPS]-1659904694775
GPR[ESUN]-1659904694775
GPR[SSUN]-1659904694775
1350153804
GPR[SPVATF]-1659904694992
GPR[EPVATF]-1659904695610
GPR[SPS]-1659904695610
[2131295] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilerInput:119.
GPR[EPS]-1659904696167
GPR[ESUN]-1659904696167
GPR[SSUN]-1659904696168
1350153804
GPR[SPVATF]-1659904696387
GPR[EPVATF]-1659904697015
GPR[SPS]-1659904697015
[2132682] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilerInput:118.
GPR[EPS]-1659904697554
GPR[SPVATF]-1659904697555
GPR[EPVATF]-1659904698189
GPR[SPS]-1659904698189
[2133937] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilerInput:118.
GPR[EPS]-1659904698809
GPR[ESUN]-1659904698809
GPR[SSUN]-1659904698810
1350153804
GPR[ESUN]-1659904699029
GPR[SSUN]-1659904699029
-534884160
GPR[ESUN]-1659904699367
GPR[SSUN]-1659904699367
-534884160
GPR[SPVATF]-1659904699700
GPR[EPVATF]-1659904700338
GPR[SPS]-1659904700338
[2136270] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1035.
GPR[EPS]-1659904701142
GPR[ESUN]-1659904701142
GPR[SSUN]-1659904701142
-675467674
GPR[ESUN]-1659904701315
GPR[SSUN]-1659904701315
2433571
GPR[ESUN]-1659904701553
GPR[SSUN]-1659904701553
2433571
GPR[SPVATF]-1659904701782
GPR[EPVATF]-1659904702413
GPR[SPS]-1659904702413
[2138290] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1407.
GPR[EPS]-1659904703162
GPR[ESUN]-1659904703162
GPR[SSUN]-1659904703162
2433571
GPR[ESUN]-1659904703399
GPR[SSUN]-1659904703399
1350153804
GPR[ESUN]-1659904703613
GPR[SSUN]-1659904703613
1350153804
GPR[SPVATF]-1659904703830
GPR[EPVATF]-1659904704493
GPR[SPS]-1659904704493
[2140159] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilerInput:147.
GPR[EPS]-1659904705031
GPR[ESUN]-1659904705031
GPR[SSUN]-1659904705031
1350153804
GPR[ESUN]-1659904705251
GPR[SSUN]-1659904705252
881600600
GPR[ESUN]-1659904705526
GPR[SSUN]-1659904705526
881600600
GPR[SPVATF]-1659904705729
GPR[EPVATF]-1659904706375
GPR[SPS]-1659904706375
[2142038] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SourceFile:186.
GPR[EPS]-1659904706910
GPR[ESUN]-1659904706910
GPR[SSUN]-1659904706910
71832666
GPR[ESUN]-1659904707114
GPR[SSUN]-1659904707114
71832666
GPR[ESUN]-1659904707310
GPR[SSUN]-1659904707310
-1345859678
GPR[ESUN]-1659904707564
GPR[SSUN]-1659904707564
-1345859678
GPR[SPVATF]-1659904707818
GPR[EPVATF]-1659904708491
GPR[SPS]-1659904708491
[2144195] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:1149.
GPR[EPS]-1659904709067
GPR[ESUN]-1659904709067
GPR[SSUN]-1659904709067
-534884160
GPR[ESUN]-1659904709398
GPR[SSUN]-1659904709398
-534884160
GPR[SPVATF]-1659904709735
GPR[EPVATF]-1659904710379
GPR[SPS]-1659904710379
[2146303] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1902.
GPR[EPS]-1659904711175
GPR[ESUN]-1659904711175
GPR[SSUN]-1659904711175
-534884160
GPR[ESUN]-1659904711514
GPR[SSUN]-1659904711514
704176156
GPR[ESUN]-1659904711718
GPR[SSUN]-1659904711718
704176156
GPR[SPVATF]-1659904711923
GPR[EPVATF]-1659904712665
GPR[SPS]-1659904712665
[2148289] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst:70.
GPR[EPS]-1659904713161
GPR[ESUN]-1659904713161
GPR[SSUN]-1659904713161
704176156
GPR[SPVATF]-1659904713362
GPR[EPVATF]-1659904714066
GPR[SPS]-1659904714066
[2149713] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst:69.
GPR[EPS]-1659904714585
GPR[SPVATF]-1659904714586
GPR[EPVATF]-1659904715310
GPR[SPS]-1659904715310
[2150941] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst:69.
GPR[EPS]-1659904715813
GPR[ESUN]-1659904715813
GPR[SSUN]-1659904715814
704176156
GPR[SPVATF]-1659904716018
GPR[EPVATF]-1659904716743
GPR[SPS]-1659904716743
[2153360] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst:65.
GPR[EPS]-1659904718232
GPR[SPVATF]-1659904718233
GPR[EPVATF]-1659904719006
GPR[SPS]-1659904719006
[2154866] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst:65.
GPR[EPS]-1659904719738
GPR[ESUN]-1659904719738
GPR[SSUN]-1659904719738
704176156
GPR[SPVATF]-1659904719966
GPR[EPVATF]-1659904720787
GPR[SPS]-1659904720787
[2156441] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst:58.
GPR[EPS]-1659904721313
GPR[SPVATF]-1659904721313
GPR[EPVATF]-1659904721957
GPR[SPS]-1659904721957
[2157604] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst:58.
GPR[EPS]-1659904722476
GPR[ESUN]-1659904722476
GPR[SSUN]-1659904722476
71832666
GPR[SPVATF]-1659904722681
GPR[EPVATF]-1659904723343
GPR[SPS]-1659904723344
[2158987] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JsAst:99.
GPR[EPS]-1659904723859
GPR[ESUN]-1659904723859
GPR[SSUN]-1659904723859
2433571
GPR[ESUN]-1659904724102
GPR[SSUN]-1659904724102
704176156
GPR[ESUN]-1659904724300
GPR[SSUN]-1659904724301
704176156
GPR[SPVATF]-1659904724506
GPR[EPVATF]-1659904725132
GPR[SPS]-1659904725132
[2160771] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:139.
GPR[EPS]-1659904725643
GPR[ESUN]-1659904725643
GPR[SSUN]-1659904725643
704176156
GPR[ESUN]-1659904725847
GPR[SSUN]-1659904725847
704176156
GPR[SPVATF]-1659904726049
GPR[EPVATF]-1659904726660
GPR[SPS]-1659904726660
[2162344] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:131.
GPR[EPS]-1659904727216
GPR[SPVATF]-1659904727216
GPR[EPVATF]-1659904727831
GPR[SPS]-1659904727831
[2163453] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:131.
GPR[EPS]-1659904728325
GPR[ESUN]-1659904728325
GPR[SSUN]-1659904728325
2433571
GPR[SPVATF]-1659904728559
GPR[EPVATF]-1659904729178
GPR[SPS]-1659904729178
[2164911] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int LAST_PROP = 54;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private abstract static class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(489).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("item",item);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("result",result);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("propType",propType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    if (com.google.javascript.rhino.Node.this.last!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.parent!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.next!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.first!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return item.chain(result);

            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        value = x.toString();
                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[2164911] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659904729783
GPR[SSUN]-1659904729784
2433571
GPR[ESUN]-1659904730014
GPR[SSUN]-1659904730015
-534884160
GPR[SPVATF]-1659904730342
GPR[EPVATF]-1659904730953
GPR[SPS]-1659904730953
[2166859] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:246.
GPR[EPS]-1659904731731
GPR[ESUN]-1659904731731
GPR[SSUN]-1659904731731
2433571
GPR[SPVATF]-1659904731966
GPR[EPVATF]-1659904732571
GPR[SPS]-1659904732571
[2168290] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int LAST_PROP = 54;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private abstract static class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(491).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("item",item);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("propType",propType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                if (com.google.javascript.rhino.Node.this.last!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.rhino.Node.this.parent!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.rhino.Node.this.next!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.rhino.Node.this.first!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(491).collectionEnds();
            }
            if (runtimeAngelicValue)
                return item.getNext();

        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        value = x.toString();
                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[2168290] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659904733162
GPR[SSUN]-1659904733162
2433571
GPR[SPVATF]-1659904733439
GPR[EPVATF]-1659904734041
GPR[SPS]-1659904734041
[2169809] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:784.
GPR[EPS]-1659904734681
GPR[ESUN]-1659904734681
GPR[SSUN]-1659904734682
-534884160
GPR[ESUN]-1659904735011
GPR[SSUN]-1659904735011
-534884160
GPR[SPVATF]-1659904735336
GPR[EPVATF]-1659904735936
GPR[SPS]-1659904735936
[2171848] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1997.
GPR[EPS]-1659904736720
GPR[ESUN]-1659904736720
GPR[SSUN]-1659904736720
-534884160
GPR[SPVATF]-1659904737062
GPR[EPVATF]-1659904737688
GPR[SPS]-1659904737688
[2173602] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Compiler extends com.google.javascript.jscomp.AbstractCompiler {
    static final java.lang.String SINGLETON_MODULE_NAME = "[singleton]";

    static final com.google.javascript.jscomp.DiagnosticType MODULE_DEPENDENCY_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_MODULE_DEPENDENCY_ERROR", "Bad dependency: {0} -> {1}. " + "Modules must be listed in dependency order.");

    static final com.google.javascript.jscomp.DiagnosticType MISSING_ENTRY_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_MISSING_ENTRY_ERROR", "required entry point \"{0}\" never provided");

    com.google.javascript.jscomp.CompilerOptions options = null;

    private com.google.javascript.jscomp.PassConfig passes = null;

    private java.util.List<com.google.javascript.jscomp.CompilerInput> externs;

    private java.util.List<com.google.javascript.jscomp.JSModule> modules;

    private com.google.javascript.jscomp.JSModuleGraph moduleGraph;

    private java.util.List<com.google.javascript.jscomp.CompilerInput> inputs;

    private com.google.javascript.jscomp.ErrorManager errorManager;

    private com.google.javascript.jscomp.WarningsGuard warningsGuard;

    private final java.util.Map<java.lang.String, com.google.javascript.rhino.Node> injectedLibraries = com.google.common.collect.Maps.newLinkedHashMap();

    com.google.javascript.rhino.Node externsRoot;

    com.google.javascript.rhino.Node jsRoot;

    com.google.javascript.rhino.Node externAndJsRoot;

    private java.util.Map<com.google.javascript.rhino.InputId, com.google.javascript.jscomp.CompilerInput> inputsById;

    private com.google.javascript.jscomp.SourceMap sourceMap;

    private java.lang.String externExports = null;

    private int uniqueNameId = 0;

    private boolean useThreads = true;

    private boolean hasRegExpGlobalReferences = true;

    private com.google.javascript.jscomp.FunctionInformationMap functionInformationMap;

    private final java.lang.StringBuilder debugLog = new java.lang.StringBuilder();

    com.google.javascript.jscomp.CodingConvention defaultCodingConvention = new com.google.javascript.jscomp.ClosureCodingConvention();

    private com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private com.google.javascript.jscomp.parsing.Config parserConfig = null;

    private com.google.javascript.jscomp.type.ReverseAbstractInterpreter abstractInterpreter;

    private com.google.javascript.jscomp.TypeValidator typeValidator;

    public com.google.javascript.jscomp.PerformanceTracker tracker;

    private final com.google.javascript.rhino.ErrorReporter oldErrorReporter = com.google.javascript.jscomp.RhinoErrorReporter.forOldRhino(this);

    private final com.google.javascript.rhino.head.ErrorReporter defaultErrorReporter = com.google.javascript.jscomp.RhinoErrorReporter.forNewRhino(this);

    public static final com.google.javascript.jscomp.DiagnosticType OPTIMIZE_LOOP_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_OPTIMIZE_LOOP_ERROR", "Exceeded max number of optimization iterations: {0}");

    public static final com.google.javascript.jscomp.DiagnosticType MOTION_ITERATIONS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_OPTIMIZE_LOOP_ERROR", "Exceeded max number of code motion iterations: {0}");

    private static final long COMPILER_STACK_SIZE = 1048576L;

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger("com.google.javascript.jscomp");

    private final java.io.PrintStream outStream;

    private com.google.javascript.jscomp.GlobalVarReferenceMap globalRefMap = null;

    private volatile double progress = 0.0;

    public Compiler() {
        this(((java.io.PrintStream) (null)));
    }

    public Compiler(java.io.PrintStream stream) {
        addChangeHandler(recentChange);
        outStream = stream;
    }

    public Compiler(com.google.javascript.jscomp.ErrorManager errorManager) {
        this();
        setErrorManager(errorManager);
    }

    public void setErrorManager(com.google.javascript.jscomp.ErrorManager errorManager) {
        com.google.common.base.Preconditions.checkNotNull(errorManager, "the error manager cannot be null");
        this.errorManager = errorManager;
    }

    private com.google.javascript.jscomp.MessageFormatter createMessageFormatter() {
        boolean colorize = options.shouldColorizeErrorOutput();
        return options.errorFormat.toFormatter(this, colorize);
    }

    public void initOptions(com.google.javascript.jscomp.CompilerOptions options) {
        this.options = options;
        if (errorManager == null) {
            if (outStream == null) {
                setErrorManager(new com.google.javascript.jscomp.LoggerErrorManager(createMessageFormatter(), com.google.javascript.jscomp.Compiler.logger));
            } else {
                com.google.javascript.jscomp.PrintStreamErrorManager printer = new com.google.javascript.jscomp.PrintStreamErrorManager(createMessageFormatter(), outStream);
                printer.setSummaryDetailLevel(options.summaryDetailLevel);
                setErrorManager(printer);
            }
        }
        if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES)) {
            options.checkTypes = true;
        } else if (options.disables(com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES)) {
            options.checkTypes = false;
        } else if (!options.checkTypes) {
            options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroup.forType(com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR), com.google.javascript.jscomp.CheckLevel.OFF);
        }
        if (options.checkGlobalThisLevel.isOn() && (!options.disables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS))) {
            options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);
        }
        if (options.getLanguageIn() == com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT) {
            options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT, com.google.javascript.jscomp.CheckLevel.ERROR);
        }
        java.util.List<com.google.javascript.jscomp.WarningsGuard> guards = com.google.common.collect.Lists.newArrayList();
        guards.add(new com.google.javascript.jscomp.SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));
        guards.add(options.getWarningsGuard());
        com.google.javascript.jscomp.ComposeWarningsGuard composedGuards = new com.google.javascript.jscomp.ComposeWarningsGuard(guards);
        if ((!options.checkSymbols) && (!composedGuards.enables(com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES))) {
            composedGuards.addGuard(new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES, com.google.javascript.jscomp.CheckLevel.OFF));
        }
        this.warningsGuard = composedGuards;
    }

    public void init(com.google.javascript.jscomp.JSSourceFile[] externs, com.google.javascript.jscomp.JSSourceFile[] inputs, com.google.javascript.jscomp.CompilerOptions options) {
        init(com.google.common.collect.Lists.<com.google.javascript.jscomp.JSSourceFile>newArrayList(externs), com.google.common.collect.Lists.<com.google.javascript.jscomp.JSSourceFile>newArrayList(inputs), options);
    }

    public <T1 extends com.google.javascript.jscomp.SourceFile, T2 extends com.google.javascript.jscomp.SourceFile> void init(java.util.List<T1> externs, java.util.List<T2> inputs, com.google.javascript.jscomp.CompilerOptions options) {
        com.google.javascript.jscomp.JSModule module = new com.google.javascript.jscomp.JSModule(com.google.javascript.jscomp.Compiler.SINGLETON_MODULE_NAME);
        for (com.google.javascript.jscomp.SourceFile input : inputs) {
            module.add(input);
        }
        initModules(externs, com.google.common.collect.Lists.newArrayList(module), options);
    }

    public void init(com.google.javascript.jscomp.JSSourceFile[] externs, com.google.javascript.jscomp.JSModule[] modules, com.google.javascript.jscomp.CompilerOptions options) {
        initModules(com.google.common.collect.Lists.<com.google.javascript.jscomp.SourceFile>newArrayList(externs), com.google.common.collect.Lists.<com.google.javascript.jscomp.JSModule>newArrayList(modules), options);
    }

    public <T extends com.google.javascript.jscomp.SourceFile> void initModules(java.util.List<T> externs, java.util.List<com.google.javascript.jscomp.JSModule> modules, com.google.javascript.jscomp.CompilerOptions options) {
        initOptions(options);
        checkFirstModule(modules);
        com.google.javascript.jscomp.Compiler.fillEmptyModules(modules);
        this.externs = makeCompilerInput(externs, true);
        this.modules = modules;
        if (modules.size() > 1) {
            try {
                this.moduleGraph = new com.google.javascript.jscomp.JSModuleGraph(modules);
            } catch (com.google.javascript.jscomp.JSModuleGraph.ModuleDependenceException e) {
                report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.MODULE_DEPENDENCY_ERROR, e.getModule().getName(), e.getDependentModule().getName()));
                return;
            }
        } else {
            this.moduleGraph = null;
        }
        this.inputs = com.google.javascript.jscomp.Compiler.getAllInputsFromModules(modules);
        initBasedOnOptions();
        initInputsByIdMap();
    }

    private void initBasedOnOptions() {
        if (options.sourceMapOutputPath != null) {
            sourceMap = options.sourceMapFormat.getInstance();
            sourceMap.setPrefixMappings(options.sourceMapLocationMappings);
        }
    }

    private <T extends com.google.javascript.jscomp.SourceFile> java.util.List<com.google.javascript.jscomp.CompilerInput> makeCompilerInput(java.util.List<T> files, boolean isExtern) {
        java.util.List<com.google.javascript.jscomp.CompilerInput> inputs = com.google.common.collect.Lists.newArrayList();
        for (T file : files) {
            inputs.add(new com.google.javascript.jscomp.CompilerInput(file, isExtern));
        }
        return inputs;
    }

    private static final com.google.javascript.jscomp.DiagnosticType EMPTY_MODULE_LIST_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_EMPTY_MODULE_LIST_ERROR", "At least one module must be provided");

    private static final com.google.javascript.jscomp.DiagnosticType EMPTY_ROOT_MODULE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_EMPTY_ROOT_MODULE_ERROR", "Root module '{0}' must contain at least one source code input");

    private void checkFirstModule(java.util.List<com.google.javascript.jscomp.JSModule> modules) {
        if (modules.isEmpty()) {
            report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.EMPTY_MODULE_LIST_ERROR));
        } else if (modules.get(0).getInputs().isEmpty() && (modules.size() > 1)) {
            report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.EMPTY_ROOT_MODULE_ERROR, modules.get(0).getName()));
        }
    }

    static java.lang.String createFillFileName(java.lang.String moduleName) {
        return ("[" + moduleName) + "]";
    }

    private static void fillEmptyModules(java.util.List<com.google.javascript.jscomp.JSModule> modules) {
        for (com.google.javascript.jscomp.JSModule module : modules) {
            if (module.getInputs().isEmpty()) {
                module.add(com.google.javascript.jscomp.SourceFile.fromCode(com.google.javascript.jscomp.Compiler.createFillFileName(module.getName()), ""));
            }
        }
    }

    public void rebuildInputsFromModules() {
        inputs = com.google.javascript.jscomp.Compiler.getAllInputsFromModules(modules);
        initInputsByIdMap();
    }

    private static java.util.List<com.google.javascript.jscomp.CompilerInput> getAllInputsFromModules(java.util.List<com.google.javascript.jscomp.JSModule> modules) {
        java.util.List<com.google.javascript.jscomp.CompilerInput> inputs = com.google.common.collect.Lists.newArrayList();
        java.util.Map<java.lang.String, com.google.javascript.jscomp.JSModule> inputMap = com.google.common.collect.Maps.newHashMap();
        for (com.google.javascript.jscomp.JSModule module : modules) {
            for (com.google.javascript.jscomp.CompilerInput input : module.getInputs()) {
                java.lang.String inputName = input.getName();
                inputs.add(input);
                inputMap.put(inputName, module);
            }
        }
        return inputs;
    }

    static final com.google.javascript.jscomp.DiagnosticType DUPLICATE_INPUT = com.google.javascript.jscomp.DiagnosticType.error("JSC_DUPLICATE_INPUT", "Duplicate input: {0}");

    static final com.google.javascript.jscomp.DiagnosticType DUPLICATE_EXTERN_INPUT = com.google.javascript.jscomp.DiagnosticType.error("JSC_DUPLICATE_EXTERN_INPUT", "Duplicate extern input: {0}");

    void initInputsByIdMap() {
        inputsById = new java.util.HashMap<com.google.javascript.rhino.InputId, com.google.javascript.jscomp.CompilerInput>();
        for (com.google.javascript.jscomp.CompilerInput input : externs) {
            com.google.javascript.rhino.InputId id = input.getInputId();
            com.google.javascript.jscomp.CompilerInput previous = putCompilerInput(id, input);
            if (previous != null) {
                report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.DUPLICATE_EXTERN_INPUT, input.getName()));
            }
        }
        for (com.google.javascript.jscomp.CompilerInput input : inputs) {
            com.google.javascript.rhino.InputId id = input.getInputId();
            com.google.javascript.jscomp.CompilerInput previous = putCompilerInput(id, input);
            if (previous != null) {
                report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT, input.getName()));
            }
        }
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.SourceFile extern, com.google.javascript.jscomp.SourceFile input, com.google.javascript.jscomp.CompilerOptions options) {
        return compile(com.google.common.collect.Lists.newArrayList(extern), com.google.common.collect.Lists.newArrayList(input), options);
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.SourceFile extern, com.google.javascript.jscomp.JSSourceFile[] input, com.google.javascript.jscomp.CompilerOptions options) {
        return compile(com.google.common.collect.Lists.newArrayList(extern), com.google.common.collect.Lists.newArrayList(input), options);
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.JSSourceFile extern, com.google.javascript.jscomp.JSModule[] modules, com.google.javascript.jscomp.CompilerOptions options) {
        return compileModules(com.google.common.collect.Lists.newArrayList(extern), com.google.common.collect.Lists.newArrayList(modules), options);
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.JSSourceFile[] externs, com.google.javascript.jscomp.JSSourceFile[] inputs, com.google.javascript.jscomp.CompilerOptions options) {
        return compile(com.google.common.collect.Lists.<com.google.javascript.jscomp.SourceFile>newArrayList(externs), com.google.common.collect.Lists.<com.google.javascript.jscomp.SourceFile>newArrayList(inputs), options);
    }

    public <T1 extends com.google.javascript.jscomp.SourceFile, T2 extends com.google.javascript.jscomp.SourceFile> com.google.javascript.jscomp.Result compile(java.util.List<T1> externs, java.util.List<T2> inputs, com.google.javascript.jscomp.CompilerOptions options) {
        com.google.common.base.Preconditions.checkState(jsRoot == null);
        try {
            init(externs, inputs, options);
            if (hasErrors()) {
                return getResult();
            }
            return compile();
        } finally {
            com.google.javascript.jscomp.Tracer t = newTracer("generateReport");
            errorManager.generateReport();
            stopTracer(t, "generateReport");
        }
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.JSSourceFile[] externs, com.google.javascript.jscomp.JSModule[] modules, com.google.javascript.jscomp.CompilerOptions options) {
        return compileModules(com.google.common.collect.Lists.<com.google.javascript.jscomp.SourceFile>newArrayList(externs), com.google.common.collect.Lists.<com.google.javascript.jscomp.JSModule>newArrayList(modules), options);
    }

    public <T extends com.google.javascript.jscomp.SourceFile> com.google.javascript.jscomp.Result compileModules(java.util.List<T> externs, java.util.List<com.google.javascript.jscomp.JSModule> modules, com.google.javascript.jscomp.CompilerOptions options) {
        com.google.common.base.Preconditions.checkState(jsRoot == null);
        try {
            initModules(externs, modules, options);
            if (hasErrors()) {
                return getResult();
            }
            return compile();
        } finally {
            com.google.javascript.jscomp.Tracer t = newTracer("generateReport");
            errorManager.generateReport();
            stopTracer(t, "generateReport");
        }
    }

    private com.google.javascript.jscomp.Result compile() {
        return runInCompilerThread(new java.util.concurrent.Callable<com.google.javascript.jscomp.Result>() {
            @java.lang.Override
            public com.google.javascript.jscomp.Result call() throws java.lang.Exception {
                compileInternal();
                return getResult();
            }
        });
    }

    public void disableThreads() {
        useThreads = false;
    }

    private <T> T runInCompilerThread(final java.util.concurrent.Callable<T> callable) {
        return com.google.javascript.jscomp.Compiler.runCallable(callable, useThreads, options.tracer.isOn());
    }

    static <T> T runCallableWithLargeStack(final java.util.concurrent.Callable<T> callable) {
        return com.google.javascript.jscomp.Compiler.runCallable(callable, true, false);
    }

    @java.lang.SuppressWarnings("unchecked")
    static <T> T runCallable(final java.util.concurrent.Callable<T> callable, boolean useLargeStackThread, boolean trace) {
        final boolean dumpTraceReport = trace;
        final java.lang.Object[] result = new java.lang.Object[1];
        final java.lang.Throwable[] exception = new java.lang.Throwable[1];
        java.lang.Runnable runnable = new java.lang.Runnable() {
            @java.lang.Override
            public void run() {
                try {
                    if (dumpTraceReport) {
                        com.google.javascript.jscomp.Tracer.initCurrentThreadTrace();
                    }
                    result[0] = callable.call();
                } catch (java.lang.Throwable e) {
                    exception[0] = e;
                } finally {
                    if (dumpTraceReport) {
                        com.google.javascript.jscomp.Tracer.logAndClearCurrentThreadTrace();
                    }
                }
            }
        };
        if (useLargeStackThread) {
            java.lang.Thread th = new java.lang.Thread(null, runnable, "jscompiler", com.google.javascript.jscomp.Compiler.COMPILER_STACK_SIZE);
            th.start();
            while (true) {
                try {
                    th.join();
                    break;
                } catch (java.lang.InterruptedException ignore) {
                }
            } 
        } else {
            runnable.run();
        }
        if (exception[0] != null) {
            throw new java.lang.RuntimeException(exception[0]);
        }
        return ((T) (result[0]));
    }

    private void compileInternal() {
        setProgress(0.0);
        parse();
        setProgress(0.15);
        if (hasErrors()) {
            return;
        }
        if (!precheck()) {
            return;
        }
        if (options.nameAnonymousFunctionsOnly) {
            check();
            return;
        }
        if (!options.skipAllPasses) {
            check();
            if (hasErrors()) {
                return;
            }
            if (options.isExternExportsEnabled() || (options.externExportsPath != null)) {
                externExports();
            }
            if (!options.ideMode) {
                optimize();
            }
        }
        if (options.recordFunctionInformation) {
            recordFunctionInformation();
        }
        if (options.devMode == com.google.javascript.jscomp.CompilerOptions.DevMode.START_AND_END) {
            runSanityCheck();
        }
        setProgress(1.0);
    }

    public void parse() {
        parseInputs();
    }

    com.google.javascript.jscomp.PassConfig getPassConfig() {
        if (passes == null) {
            passes = createPassConfigInternal();
        }
        return passes;
    }

    com.google.javascript.jscomp.PassConfig createPassConfigInternal() {
        return new com.google.javascript.jscomp.DefaultPassConfig(options);
    }

    public void setPassConfig(com.google.javascript.jscomp.PassConfig passes) {
        com.google.common.base.Preconditions.checkNotNull(passes);
        if (this.passes != null) {
            throw new java.lang.IllegalStateException("this.passes has already been assigned");
        }
        this.passes = passes;
    }

    boolean precheck() {
        return true;
    }

    public void check() {
        runCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.BEFORE_CHECKS);
        com.google.javascript.jscomp.PhaseOptimizer phaseOptimizer = new com.google.javascript.jscomp.PhaseOptimizer(this, tracker, new com.google.javascript.jscomp.PhaseOptimizer.ProgressRange(getProgress(), 1.0));
        if (options.devMode == com.google.javascript.jscomp.CompilerOptions.DevMode.EVERY_PASS) {
            phaseOptimizer.setSanityCheck(sanityCheck);
        }
        phaseOptimizer.consume(getPassConfig().getChecks());
        phaseOptimizer.process(externsRoot, jsRoot);
        if (hasErrors()) {
            return;
        }
        if (options.nameAnonymousFunctionsOnly) {
            return;
        }
        if (options.removeTryCatchFinally) {
            removeTryCatchFinally();
        }
        if ((((options.getTweakProcessing().shouldStrip() || (!options.stripTypes.isEmpty())) || (!options.stripNameSuffixes.isEmpty())) || (!options.stripTypePrefixes.isEmpty())) || (!options.stripNamePrefixes.isEmpty())) {
            stripCode(options.stripTypes, options.stripNameSuffixes, options.stripTypePrefixes, options.stripNamePrefixes);
        }
        runCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);
    }

    private void externExports() {
        com.google.javascript.jscomp.Compiler.logger.fine("Creating extern file for exports");
        startPass("externExports");
        com.google.javascript.jscomp.ExternExportsPass pass = new com.google.javascript.jscomp.ExternExportsPass(this);
        process(pass);
        externExports = pass.getGeneratedExterns();
        endPass();
    }

    @java.lang.Override
    void process(com.google.javascript.jscomp.CompilerPass p) {
        p.process(externsRoot, jsRoot);
    }

    private final com.google.javascript.jscomp.PassFactory sanityCheck = new com.google.javascript.jscomp.PassFactory("sanityCheck", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.SanityCheck(compiler);
        }
    };

    private void maybeSanityCheck() {
        if (options.devMode == com.google.javascript.jscomp.CompilerOptions.DevMode.EVERY_PASS) {
            runSanityCheck();
        }
    }

    private void runSanityCheck() {
        sanityCheck.create(this).process(externsRoot, jsRoot);
    }

    void removeTryCatchFinally() {
        com.google.javascript.jscomp.Compiler.logger.fine("Remove try/catch/finally");
        startPass("removeTryCatchFinally");
        com.google.javascript.jscomp.RemoveTryCatch r = new com.google.javascript.jscomp.RemoveTryCatch(this);
        process(r);
        endPass();
    }

    void stripCode(java.util.Set<java.lang.String> stripTypes, java.util.Set<java.lang.String> stripNameSuffixes, java.util.Set<java.lang.String> stripTypePrefixes, java.util.Set<java.lang.String> stripNamePrefixes) {
        com.google.javascript.jscomp.Compiler.logger.fine("Strip code");
        startPass("stripCode");
        com.google.javascript.jscomp.StripCode r = new com.google.javascript.jscomp.StripCode(this, stripTypes, stripNameSuffixes, stripTypePrefixes, stripNamePrefixes);
        if (options.getTweakProcessing().shouldStrip()) {
            r.enableTweakStripping();
        }
        process(r);
        endPass();
    }

    private void runCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime executionTime) {
        if (options.customPasses != null) {
            com.google.javascript.jscomp.Tracer t = newTracer("runCustomPasses");
            try {
                for (com.google.javascript.jscomp.CompilerPass p : options.customPasses.get(executionTime)) {
                    process(p);
                }
            } finally {
                stopTracer(t, "runCustomPasses");
            }
        }
    }

    private com.google.javascript.jscomp.Tracer currentTracer = null;

    private java.lang.String currentPassName = null;

    void startPass(java.lang.String passName) {
        com.google.common.base.Preconditions.checkState(currentTracer == null);
        currentPassName = passName;
        currentTracer = newTracer(passName);
    }

    void endPass() {
        com.google.common.base.Preconditions.checkState(currentTracer != null, "Tracer should not be null at the end of a pass.");
        stopTracer(currentTracer, currentPassName);
        java.lang.String passToCheck = currentPassName;
        currentPassName = null;
        currentTracer = null;
        maybeSanityCheck();
    }

    com.google.javascript.jscomp.Tracer newTracer(java.lang.String passName) {
        java.lang.String comment = passName + (recentChange.hasCodeChanged() ? " on recently changed AST" : "");
        if (options.tracer.isOn()) {
            tracker.recordPassStart(passName);
        }
        return new com.google.javascript.jscomp.Tracer("Compiler", comment);
    }

    void stopTracer(com.google.javascript.jscomp.Tracer t, java.lang.String passName) {
        long result = t.stop();
        if (options.tracer.isOn()) {
            tracker.recordPassStop(passName, result);
        }
    }

    public com.google.javascript.jscomp.Result getResult() {
        com.google.javascript.jscomp.PassConfig.State state = getPassConfig().getIntermediateState();
        return new com.google.javascript.jscomp.Result(getErrors(), getWarnings(), debugLog.toString(), state.variableMap, state.propertyMap, state.anonymousFunctionNameMap, state.stringMap, functionInformationMap, sourceMap, externExports, state.cssNames, state.idGeneratorMap);
    }

    public com.google.javascript.jscomp.JSError[] getMessages() {
        return getErrors();
    }

    public com.google.javascript.jscomp.JSError[] getErrors() {
        return errorManager.getErrors();
    }

    public com.google.javascript.jscomp.JSError[] getWarnings() {
        return errorManager.getWarnings();
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getRoot() {
        return externAndJsRoot;
    }

    private int nextUniqueNameId() {
        return uniqueNameId++;
    }

    @com.google.common.annotations.VisibleForTesting
    void resetUniqueNameId() {
        uniqueNameId = 0;
    }

    @java.lang.Override
    com.google.common.base.Supplier<java.lang.String> getUniqueNameIdSupplier() {
        final com.google.javascript.jscomp.Compiler self = this;
        return new com.google.common.base.Supplier<java.lang.String>() {
            @java.lang.Override
            public java.lang.String get() {
                return java.lang.String.valueOf(self.nextUniqueNameId());
            }
        };
    }

    @java.lang.Override
    boolean areNodesEqualForInlining(com.google.javascript.rhino.Node n1, com.google.javascript.rhino.Node n2) {
        if (options.ambiguateProperties || options.disambiguateProperties) {
            return n1.isEquivalentToTyped(n2);
        } else {
            return n1.isEquivalentTo(n2);
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.CompilerInput getInput(com.google.javascript.rhino.InputId id) {
        return inputsById.get(id);
    }

    protected void removeExternInput(com.google.javascript.rhino.InputId id) {
        com.google.javascript.jscomp.CompilerInput input = getInput(id);
        if (input == null) {
            return;
        }
        com.google.common.base.Preconditions.checkState(input.isExtern(), "Not an extern input: %s", input.getName());
        inputsById.remove(id);
        externs.remove(input);
        com.google.javascript.rhino.Node root = input.getAstRoot(this);
        if (root != null) {
            root.detachFromParent();
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.CompilerInput newExternInput(java.lang.String name) {
        com.google.javascript.jscomp.SourceAst ast = new com.google.javascript.jscomp.SyntheticAst(name);
        if (inputsById.containsKey(ast.getInputId())) {
            throw new java.lang.IllegalArgumentException("Conflicting externs name: " + name);
        }
        com.google.javascript.jscomp.CompilerInput input = new com.google.javascript.jscomp.CompilerInput(ast, true);
        putCompilerInput(input.getInputId(), input);
        externsRoot.addChildToFront(ast.getAstRoot(this));
        externs.add(0, input);
        return input;
    }

    private com.google.javascript.jscomp.CompilerInput putCompilerInput(com.google.javascript.rhino.InputId id, com.google.javascript.jscomp.CompilerInput input) {
        input.setCompiler(this);
        return inputsById.put(id, input);
    }

    void addIncrementalSourceAst(com.google.javascript.jscomp.JsAst ast) {
        com.google.javascript.rhino.InputId id = ast.getInputId();
        com.google.common.base.Preconditions.checkState(getInput(id) == null, "Duplicate input %s", id.getIdName());
        putCompilerInput(id, new com.google.javascript.jscomp.CompilerInput(ast));
    }

    boolean replaceIncrementalSourceAst(com.google.javascript.jscomp.JsAst ast) {
        com.google.javascript.jscomp.CompilerInput oldInput = getInput(ast.getInputId());
        com.google.common.base.Preconditions.checkNotNull(oldInput, "No input to replace: %s", ast.getInputId().getIdName());
        com.google.javascript.rhino.Node newRoot = ast.getAstRoot(this);
        if (newRoot == null) {
            return false;
        }
        com.google.javascript.rhino.Node oldRoot = oldInput.getAstRoot(this);
        if (oldRoot != null) {
            oldRoot.getParent().replaceChild(oldRoot, newRoot);
        } else {
            getRoot().getLastChild().addChildToBack(newRoot);
        }
        com.google.javascript.jscomp.CompilerInput newInput = new com.google.javascript.jscomp.CompilerInput(ast);
        putCompilerInput(ast.getInputId(), newInput);
        com.google.javascript.jscomp.JSModule module = oldInput.getModule();
        if (module != null) {
            module.addAfter(newInput, oldInput);
            module.remove(oldInput);
        }
        com.google.common.base.Preconditions.checkState(newInput.getInputId().equals(oldInput.getInputId()));
        com.google.javascript.rhino.InputId inputIdOnAst = newInput.getAstRoot(this).getInputId();
        com.google.common.base.Preconditions.checkState(newInput.getInputId().equals(inputIdOnAst));
        inputs.remove(oldInput);
        return true;
    }

    boolean addNewSourceAst(com.google.javascript.jscomp.JsAst ast) {
        com.google.javascript.jscomp.CompilerInput oldInput = getInput(ast.getInputId());
        if (oldInput != null) {
            throw new java.lang.IllegalStateException("Input already exists: " + ast.getInputId().getIdName());
        }
        com.google.javascript.rhino.Node newRoot = ast.getAstRoot(this);
        if (newRoot == null) {
            return false;
        }
        getRoot().getLastChild().addChildToBack(newRoot);
        com.google.javascript.jscomp.CompilerInput newInput = new com.google.javascript.jscomp.CompilerInput(ast);
        if ((moduleGraph == null) && (!modules.isEmpty())) {
            modules.get(0).add(newInput);
        }
        putCompilerInput(ast.getInputId(), newInput);
        return true;
    }

    @java.lang.Override
    com.google.javascript.jscomp.JSModuleGraph getModuleGraph() {
        return moduleGraph;
    }

    com.google.javascript.jscomp.JSModuleGraph getDegenerateModuleGraph() {
        return moduleGraph == null ? new com.google.javascript.jscomp.JSModuleGraph(modules) : moduleGraph;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSTypeRegistry getTypeRegistry() {
        if (typeRegistry == null) {
            typeRegistry = new com.google.javascript.rhino.jstype.JSTypeRegistry(oldErrorReporter, options.looseTypes);
        }
        return typeRegistry;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.MemoizedScopeCreator getTypedScopeCreator() {
        return getPassConfig().getTypedScopeCreator();
    }

    @java.lang.SuppressWarnings("unchecked")
    com.google.javascript.jscomp.DefaultPassConfig ensureDefaultPassConfig() {
        com.google.javascript.jscomp.PassConfig passes = getPassConfig().getBasePassConfig();
        com.google.common.base.Preconditions.checkState(passes instanceof com.google.javascript.jscomp.DefaultPassConfig, "PassConfigs must eventually delegate to the DefaultPassConfig");
        return ((com.google.javascript.jscomp.DefaultPassConfig) (passes));
    }

    public com.google.javascript.jscomp.SymbolTable buildKnownSymbolTable() {
        com.google.javascript.jscomp.SymbolTable symbolTable = new com.google.javascript.jscomp.SymbolTable(getTypeRegistry());
        com.google.javascript.jscomp.MemoizedScopeCreator typedScopeCreator = getTypedScopeCreator();
        if (typedScopeCreator != null) {
            symbolTable.addScopes(typedScopeCreator.getAllMemoizedScopes());
            symbolTable.addSymbolsFrom(typedScopeCreator);
        } else {
            symbolTable.findScopes(this, externsRoot, jsRoot);
        }
        com.google.javascript.jscomp.GlobalNamespace globalNamespace = ensureDefaultPassConfig().getGlobalNamespace();
        if (globalNamespace != null) {
            symbolTable.addSymbolsFrom(globalNamespace);
        }
        com.google.javascript.jscomp.ReferenceCollectingCallback refCollector = new com.google.javascript.jscomp.ReferenceCollectingCallback(this, com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR);
        com.google.javascript.jscomp.NodeTraversal.traverse(this, getRoot(), refCollector);
        symbolTable.addSymbolsFrom(refCollector);
        com.google.javascript.jscomp.PreprocessorSymbolTable preprocessorSymbolTable = ensureDefaultPassConfig().getPreprocessorSymbolTable();
        if (preprocessorSymbolTable != null) {
            symbolTable.addSymbolsFrom(preprocessorSymbolTable);
        }
        symbolTable.fillNamespaceReferences();
        symbolTable.fillPropertyScopes();
        symbolTable.fillThisReferences(this, externsRoot, jsRoot);
        symbolTable.fillPropertySymbols(this, externsRoot, jsRoot);
        symbolTable.fillJSDocInfo(this, externsRoot, jsRoot);
        return symbolTable;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Scope getTopScope() {
        return getPassConfig().getTopScope();
    }

    @java.lang.Override
    public com.google.javascript.jscomp.type.ReverseAbstractInterpreter getReverseAbstractInterpreter() {
        if (abstractInterpreter == null) {
            com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter interpreter = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter(getCodingConvention(), getTypeRegistry());
            if (options.closurePass) {
                interpreter = new com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter(getCodingConvention(), getTypeRegistry()).append(interpreter).getFirst();
            }
            abstractInterpreter = interpreter;
        }
        return abstractInterpreter;
    }

    @java.lang.Override
    com.google.javascript.jscomp.TypeValidator getTypeValidator() {
        if (typeValidator == null) {
            typeValidator = new com.google.javascript.jscomp.TypeValidator(this);
        }
        return typeValidator;
    }

    com.google.javascript.rhino.Node parseInputs() {
        boolean devMode = options.devMode != com.google.javascript.jscomp.CompilerOptions.DevMode.OFF;
        if (externsRoot != null) {
            externsRoot.detachChildren();
        }
        if (jsRoot != null) {
            jsRoot.detachChildren();
        }
        jsRoot = com.google.javascript.rhino.IR.block();
        jsRoot.setIsSyntheticBlock(true);
        externsRoot = com.google.javascript.rhino.IR.block();
        externsRoot.setIsSyntheticBlock(true);
        externAndJsRoot = com.google.javascript.rhino.IR.block(externsRoot, jsRoot);
        externAndJsRoot.setIsSyntheticBlock(true);
        if (options.tracer.isOn()) {
            tracker = new com.google.javascript.jscomp.PerformanceTracker(jsRoot, options.tracer);
            addChangeHandler(tracker.getCodeChangeHandler());
        }
        com.google.javascript.jscomp.Tracer tracer = newTracer("parseInputs");
        try {
            for (com.google.javascript.jscomp.CompilerInput input : externs) {
                com.google.javascript.rhino.Node n = input.getAstRoot(this);
                if (hasErrors()) {
                    return null;
                }
                externsRoot.addChildToBack(n);
            }
            if (options.transformAMDToCJSModules || options.processCommonJSModules) {
                processAMDAndCommonJSModules();
            }
            hoistExterns(externsRoot);
            boolean staleInputs = false;
            if (options.dependencyOptions.needsManagement() && options.closurePass) {
                for (com.google.javascript.jscomp.CompilerInput input : inputs) {
                    for (java.lang.String provide : input.getProvides()) {
                        getTypeRegistry().forwardDeclareType(provide);
                    }
                }
                try {
                    inputs = (moduleGraph == null ? new com.google.javascript.jscomp.JSModuleGraph(modules) : moduleGraph).manageDependencies(options.dependencyOptions, inputs);
                    staleInputs = true;
                } catch (com.google.javascript.jscomp.deps.SortedDependencies.CircularDependencyException e) {
                    report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
                    if (hasErrors()) {
                        return null;
                    }
                } catch (com.google.javascript.jscomp.deps.SortedDependencies.MissingProvideException e) {
                    report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR, e.getMessage()));
                    if (hasErrors()) {
                        return null;
                    }
                }
            }
            hoistNoCompileFiles();
            if (staleInputs) {
                repartitionInputs();
            }
            for (com.google.javascript.jscomp.CompilerInput input : inputs) {
                com.google.javascript.rhino.Node n = input.getAstRoot(this);
                if (n == null) {
                    continue;
                }
                if (devMode) {
                    runSanityCheck();
                    if (hasErrors()) {
                        return null;
                    }
                }
                if ((options.sourceMapOutputPath != null) || (options.nameReferenceReportPath != null)) {
                    com.google.javascript.jscomp.SourceInformationAnnotator sia = new com.google.javascript.jscomp.SourceInformationAnnotator(input.getName(), options.devMode != com.google.javascript.jscomp.CompilerOptions.DevMode.OFF);
                    com.google.javascript.jscomp.NodeTraversal.traverse(this, n, sia);
                }
                jsRoot.addChildToBack(n);
            }
            if (hasErrors()) {
                return null;
            }
            return externAndJsRoot;
        } finally {
            stopTracer(tracer, "parseInputs");
        }
    }

    private void hoistExterns(com.google.javascript.rhino.Node externsRoot) {
        boolean staleInputs = false;
        for (com.google.javascript.jscomp.CompilerInput input : inputs) {
            if (options.dependencyOptions.needsManagement() && options.closurePass) {
                if ((!input.getProvides().isEmpty()) || (!input.getRequires().isEmpty())) {
                    continue;
                }
            }
            com.google.javascript.rhino.Node n = input.getAstRoot(this);
            if (n == null) {
                continue;
            }
            com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
            if ((info != null) && info.isExterns()) {
                externsRoot.addChildToBack(n);
                input.setIsExtern(true);
                input.getModule().remove(input);
                externs.add(input);
                staleInputs = true;
            }
        }
        if (staleInputs) {
            repartitionInputs();
        }
    }

    private void hoistNoCompileFiles() {
        boolean staleInputs = false;
        for (com.google.javascript.jscomp.CompilerInput input : inputs) {
            com.google.javascript.rhino.Node n = input.getAstRoot(this);
            if (n == null) {
                continue;
            }
            com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
            if ((info != null) && info.isNoCompile()) {
                input.getModule().remove(input);
                staleInputs = true;
            }
        }
        if (staleInputs) {
            repartitionInputs();
        }
    }

    private void repartitionInputs() {
        com.google.javascript.jscomp.Compiler.fillEmptyModules(modules);
        rebuildInputsFromModules();
    }

    void processAMDAndCommonJSModules() {
        java.util.Map<java.lang.String, com.google.javascript.jscomp.JSModule> modulesByName = com.google.common.collect.Maps.newLinkedHashMap();
        java.util.Map<com.google.javascript.jscomp.CompilerInput, com.google.javascript.jscomp.JSModule> modulesByInput = com.google.common.collect.Maps.newLinkedHashMap();
        for (com.google.javascript.jscomp.CompilerInput input : inputs) {
            input.setCompiler(this);
            com.google.javascript.rhino.Node root = input.getAstRoot(this);
            if (root == null) {
                continue;
            }
            if (options.transformAMDToCJSModules) {
                new com.google.javascript.jscomp.TransformAMDToCJSModule(this).process(null, root);
            }
            if (options.processCommonJSModules) {
                com.google.javascript.jscomp.ProcessCommonJSModules cjs = new com.google.javascript.jscomp.ProcessCommonJSModules(this, options.commonJSModulePathPrefix);
                cjs.process(null, root);
                com.google.javascript.jscomp.JSModule m = cjs.getModule();
                if (m != null) {
                    modulesByName.put(m.getName(), m);
                    modulesByInput.put(input, m);
                }
            }
        }
        if (options.processCommonJSModules) {
            java.util.List<com.google.javascript.jscomp.JSModule> modules = com.google.common.collect.Lists.newArrayList(modulesByName.values());
            if (!modules.isEmpty()) {
                this.modules = modules;
                this.moduleGraph = new com.google.javascript.jscomp.JSModuleGraph(this.modules);
            }
            for (com.google.javascript.jscomp.JSModule module : modules) {
                for (com.google.javascript.jscomp.CompilerInput input : module.getInputs()) {
                    for (java.lang.String require : input.getRequires()) {
                        com.google.javascript.jscomp.JSModule dependency = modulesByName.get(require);
                        if (dependency == null) {
                            report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR, require));
                        } else {
                            module.addDependency(dependency);
                        }
                    }
                }
            }
            try {
                modules = com.google.common.collect.Lists.newArrayList();
                for (com.google.javascript.jscomp.CompilerInput input : this.moduleGraph.manageDependencies(options.dependencyOptions, inputs)) {
                    modules.add(modulesByInput.get(input));
                }
                this.modules = modules;
                this.moduleGraph = new com.google.javascript.jscomp.JSModuleGraph(modules);
            } catch (java.lang.Exception e) {
                com.google.common.base.Throwables.propagate(e);
            }
        }
    }

    public com.google.javascript.rhino.Node parse(com.google.javascript.jscomp.SourceFile file) {
        initCompilerOptionsIfTesting();
        addToDebugLog("Parsing: " + file.getName());
        return new com.google.javascript.jscomp.JsAst(file).getAstRoot(this);
    }

    private int syntheticCodeId = 0;

    @java.lang.Override
    com.google.javascript.rhino.Node parseSyntheticCode(java.lang.String js) {
        com.google.javascript.jscomp.CompilerInput input = new com.google.javascript.jscomp.CompilerInput(com.google.javascript.jscomp.SourceFile.fromCode((" [synthetic:" + (++syntheticCodeId)) + "] ", js));
        putCompilerInput(input.getInputId(), input);
        return input.getAstRoot(this);
    }

    protected com.google.javascript.jscomp.CompilerOptions newCompilerOptions() {
        return new com.google.javascript.jscomp.CompilerOptions();
    }

    void initCompilerOptionsIfTesting() {
        if (options == null) {
            initOptions(newCompilerOptions());
        }
    }

    @java.lang.Override
    com.google.javascript.rhino.Node parseSyntheticCode(java.lang.String fileName, java.lang.String js) {
        initCompilerOptionsIfTesting();
        return parse(com.google.javascript.jscomp.SourceFile.fromCode(fileName, js));
    }

    @java.lang.Override
    com.google.javascript.rhino.Node parseTestCode(java.lang.String js) {
        initCompilerOptionsIfTesting();
        com.google.javascript.jscomp.CompilerInput input = new com.google.javascript.jscomp.CompilerInput(com.google.javascript.jscomp.SourceFile.fromCode("[testcode]", js));
        if (inputsById == null) {
            inputsById = com.google.common.collect.Maps.newHashMap();
        }
        putCompilerInput(input.getInputId(), input);
        return input.getAstRoot(this);
    }

    @java.lang.Override
    com.google.javascript.rhino.head.ErrorReporter getDefaultErrorReporter() {
        return defaultErrorReporter;
    }

    public java.lang.String toSource() {
        return runInCompilerThread(new java.util.concurrent.Callable<java.lang.String>() {
            @java.lang.Override
            public java.lang.String call() throws java.lang.Exception {
                com.google.javascript.jscomp.Tracer tracer = newTracer("toSource");
                try {
                    com.google.javascript.jscomp.Compiler.CodeBuilder cb = new com.google.javascript.jscomp.Compiler.CodeBuilder();
                    if (jsRoot != null) {
                        int i = 0;
                        for (com.google.javascript.rhino.Node scriptNode = jsRoot.getFirstChild(); scriptNode != null; scriptNode = scriptNode.getNext()) {
                            toSource(cb, i++, scriptNode);
                        }
                    }
                    return cb.toString();
                } finally {
                    stopTracer(tracer, "toSource");
                }
            }
        });
    }

    public java.lang.String[] toSourceArray() {
        return runInCompilerThread(new java.util.concurrent.Callable<java.lang.String[]>() {
            @java.lang.Override
            public java.lang.String[] call() throws java.lang.Exception {
                com.google.javascript.jscomp.Tracer tracer = newTracer("toSourceArray");
                try {
                    int numInputs = inputs.size();
                    java.lang.String[] sources = new java.lang.String[numInputs];
                    com.google.javascript.jscomp.Compiler.CodeBuilder cb = new com.google.javascript.jscomp.Compiler.CodeBuilder();
                    for (int i = 0; i < numInputs; i++) {
                        com.google.javascript.rhino.Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
                        cb.reset();
                        toSource(cb, i, scriptNode);
                        sources[i] = cb.toString();
                    }
                    return sources;
                } finally {
                    stopTracer(tracer, "toSourceArray");
                }
            }
        });
    }

    public java.lang.String toSource(final com.google.javascript.jscomp.JSModule module) {
        return runInCompilerThread(new java.util.concurrent.Callable<java.lang.String>() {
            @java.lang.Override
            public java.lang.String call() throws java.lang.Exception {
                java.util.List<com.google.javascript.jscomp.CompilerInput> inputs = module.getInputs();
                int numInputs = inputs.size();
                if (numInputs == 0) {
                    return "";
                }
                com.google.javascript.jscomp.Compiler.CodeBuilder cb = new com.google.javascript.jscomp.Compiler.CodeBuilder();
                for (int i = 0; i < numInputs; i++) {
                    com.google.javascript.rhino.Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
                    if (scriptNode == null) {
                        throw new java.lang.IllegalArgumentException("Bad module: " + module.getName());
                    }
                    toSource(cb, i, scriptNode);
                }
                return cb.toString();
            }
        });
    }

    public java.lang.String[] toSourceArray(final com.google.javascript.jscomp.JSModule module) {
        return runInCompilerThread(new java.util.concurrent.Callable<java.lang.String[]>() {
            @java.lang.Override
            public java.lang.String[] call() throws java.lang.Exception {
                java.util.List<com.google.javascript.jscomp.CompilerInput> inputs = module.getInputs();
                int numInputs = inputs.size();
                if (numInputs == 0) {
                    return new java.lang.String[0];
                }
                java.lang.String[] sources = new java.lang.String[numInputs];
                com.google.javascript.jscomp.Compiler.CodeBuilder cb = new com.google.javascript.jscomp.Compiler.CodeBuilder();
                for (int i = 0; i < numInputs; i++) {
                    com.google.javascript.rhino.Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
                    if (scriptNode == null) {
                        throw new java.lang.IllegalArgumentException("Bad module input: " + inputs.get(i).getName());
                    }
                    cb.reset();
                    toSource(cb, i, scriptNode);
                    sources[i] = cb.toString();
                }
                return sources;
            }
        });
    }

    public void toSource(final com.google.javascript.jscomp.Compiler.CodeBuilder cb, final int inputSeqNum, final com.google.javascript.rhino.Node root) {
        runInCompilerThread(new java.util.concurrent.Callable<java.lang.Void>() {
            @java.lang.Override
            public java.lang.Void call() throws java.lang.Exception {
                if (options.printInputDelimiter) {
                    if ((cb.getLength() > 0) && (!cb.endsWith("\n"))) {
                        cb.append("\n");
                    }
                    com.google.common.base.Preconditions.checkState(root.isScript());
                    java.lang.String delimiter = options.inputDelimiter;
                    java.lang.String inputName = root.getInputId().getIdName();
                    java.lang.String sourceName = root.getSourceFileName();
                    com.google.common.base.Preconditions.checkState(sourceName != null);
                    com.google.common.base.Preconditions.checkState(!sourceName.isEmpty());
                    delimiter = delimiter.replaceAll("%name%", java.util.regex.Matcher.quoteReplacement(inputName)).replaceAll("%num%", java.lang.String.valueOf(inputSeqNum));
                    cb.append(delimiter).append("\n");
                }
                if ((root.getJSDocInfo() != null) && (root.getJSDocInfo().getLicense() != null)) {
                    cb.append("/*\n").append(root.getJSDocInfo().getLicense()).append("*/\n");
                }
                if (options.sourceMapOutputPath != null) {
                    sourceMap.setStartingPosition(cb.getLineIndex(), cb.getColumnIndex());
                }
                java.lang.String code = toSource(root, sourceMap, inputSeqNum == 0);
                if (!code.isEmpty()) {
                    cb.append(code);
                    int length = code.length();
                    char lastChar = code.charAt(length - 1);
                    char secondLastChar = (length >= 2) ? code.charAt(length - 2) : '\u0000';
                    boolean hasSemiColon = (lastChar == ';') || ((lastChar == '\n') && (secondLastChar == ';'));
                    if (!hasSemiColon) {
                        cb.append(";");
                    }
                }
                return null;
            }
        });
    }

    @java.lang.Override
    java.lang.String toSource(com.google.javascript.rhino.Node n) {
        initCompilerOptionsIfTesting();
        return toSource(n, null, true);
    }

    private java.lang.String toSource(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.SourceMap sourceMap, boolean firstOutput) {
        com.google.javascript.jscomp.CodePrinter.Builder builder = new com.google.javascript.jscomp.CodePrinter.Builder(n);
        builder.setPrettyPrint(options.prettyPrint);
        builder.setLineBreak(options.lineBreak);
        builder.setPreferLineBreakAtEndOfFile(options.preferLineBreakAtEndOfFile);
        builder.setSourceMap(sourceMap);
        builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);
        builder.setTagAsStrict(firstOutput && (options.getLanguageOut() == com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
        builder.setLineLengthThreshold(options.lineLengthThreshold);
        java.nio.charset.Charset charset = (options.outputCharset != null) ? java.nio.charset.Charset.forName(options.outputCharset) : null;
        builder.setOutputCharset(charset);
        return builder.build();
    }

    public static class CodeBuilder {
        private final java.lang.StringBuilder sb = new java.lang.StringBuilder();

        private int lineCount = 0;

        private int colCount = 0;

        void reset() {
            sb.setLength(0);
        }

        com.google.javascript.jscomp.Compiler.CodeBuilder append(java.lang.String str) {
            sb.append(str);
            int index = -1;
            int lastIndex = index;
            while ((index = str.indexOf('\n', index + 1)) >= 0) {
                ++lineCount;
                lastIndex = index;
            } 
            if (lastIndex == (-1)) {
                colCount += str.length();
            } else {
                colCount = str.length() - (lastIndex + 1);
            }
            return this;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return sb.toString();
        }

        public int getLength() {
            return sb.length();
        }

        int getLineIndex() {
            return lineCount;
        }

        int getColumnIndex() {
            return colCount;
        }

        boolean endsWith(java.lang.String suffix) {
            return (sb.length() > suffix.length()) && suffix.equals(sb.substring(sb.length() - suffix.length()));
        }
    }

    public void optimize() {
        normalize();
        com.google.javascript.jscomp.PhaseOptimizer phaseOptimizer = new com.google.javascript.jscomp.PhaseOptimizer(this, tracker, null);
        if (options.devMode == com.google.javascript.jscomp.CompilerOptions.DevMode.EVERY_PASS) {
            phaseOptimizer.setSanityCheck(sanityCheck);
        }
        phaseOptimizer.consume(getPassConfig().getOptimizations());
        phaseOptimizer.process(externsRoot, jsRoot);
        if (hasErrors()) {
            return;
        }
    }

    @java.lang.Override
    void setCssRenamingMap(com.google.javascript.jscomp.CssRenamingMap map) {
        options.cssRenamingMap = map;
    }

    @java.lang.Override
    com.google.javascript.jscomp.CssRenamingMap getCssRenamingMap() {
        return options.cssRenamingMap;
    }

    public void processDefines() {
        new com.google.javascript.jscomp.DefaultPassConfig(options).processDefines.create(this).process(externsRoot, jsRoot);
    }

    boolean isInliningForbidden() {
        return (options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) || (options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC);
    }

    com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> computeCFG() {
        com.google.javascript.jscomp.Compiler.logger.fine("Computing Control Flow Graph");
        com.google.javascript.jscomp.Tracer tracer = newTracer("computeCFG");
        com.google.javascript.jscomp.ControlFlowAnalysis cfa = new com.google.javascript.jscomp.ControlFlowAnalysis(this, true, false);
        process(cfa);
        stopTracer(tracer, "computeCFG");
        return cfa.getCfg();
    }

    public void normalize() {
        com.google.javascript.jscomp.Compiler.logger.fine("Normalizing");
        startPass("normalize");
        process(new com.google.javascript.jscomp.Normalize(this, false));
        endPass();
    }

    @java.lang.Override
    void prepareAst(com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.CompilerPass pass = new com.google.javascript.jscomp.PrepareAst(this);
        pass.process(null, root);
    }

    void recordFunctionInformation() {
        com.google.javascript.jscomp.Compiler.logger.fine("Recording function information");
        startPass("recordFunctionInformation");
        com.google.javascript.jscomp.RecordFunctionInformation recordFunctionInfoPass = new com.google.javascript.jscomp.RecordFunctionInformation(this, getPassConfig().getIntermediateState().functionNames);
        process(recordFunctionInfoPass);
        functionInformationMap = recordFunctionInfoPass.getMap();
        endPass();
    }

    protected final com.google.javascript.jscomp.CodeChangeHandler.RecentChange recentChange = new com.google.javascript.jscomp.CodeChangeHandler.RecentChange();

    private final java.util.List<com.google.javascript.jscomp.CodeChangeHandler> codeChangeHandlers = com.google.common.collect.Lists.<com.google.javascript.jscomp.CodeChangeHandler>newArrayList();

    static final java.lang.String SYNTHETIC_EXTERNS = "{SyntheticVarsDeclar}";

    private com.google.javascript.jscomp.CompilerInput synthesizedExternsInput = null;

    @java.lang.Override
    void addChangeHandler(com.google.javascript.jscomp.CodeChangeHandler handler) {
        codeChangeHandlers.add(handler);
    }

    @java.lang.Override
    void removeChangeHandler(com.google.javascript.jscomp.CodeChangeHandler handler) {
        codeChangeHandlers.remove(handler);
    }

    @java.lang.Override
    public void reportCodeChange() {
        for (com.google.javascript.jscomp.CodeChangeHandler handler : codeChangeHandlers) {
            handler.reportChange();
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.CodingConvention getCodingConvention() {
        com.google.javascript.jscomp.CodingConvention convention = options.getCodingConvention();
        convention = (convention != null) ? convention : defaultCodingConvention;
        return convention;
    }

    @java.lang.Override
    public boolean isIdeMode() {
        return options.ideMode;
    }

    @java.lang.Override
    public boolean acceptEcmaScript5() {
        switch (options.getLanguageIn()) {
            case ECMASCRIPT5 :
            case ECMASCRIPT5_STRICT :
                return true;
        }
        return false;
    }

    public com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode() {
        return options.getLanguageIn();
    }

    @java.lang.Override
    public boolean acceptConstKeyword() {
        return options.acceptConstKeyword;
    }

    @java.lang.Override
    com.google.javascript.jscomp.parsing.Config getParserConfig() {
        if (parserConfig == null) {
            com.google.javascript.jscomp.parsing.Config.LanguageMode mode;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(494).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.MODULE_DEPENDENCY_ERROR",com.google.javascript.jscomp.Compiler.MODULE_DEPENDENCY_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.OPTIMIZE_LOOP_ERROR",com.google.javascript.jscomp.Compiler.OPTIMIZE_LOOP_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.EMPTY_ROOT_MODULE_ERROR",com.google.javascript.jscomp.Compiler.EMPTY_ROOT_MODULE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.oldErrorReporter",com.google.javascript.jscomp.Compiler.this.oldErrorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.DUPLICATE_EXTERN_INPUT",com.google.javascript.jscomp.Compiler.DUPLICATE_EXTERN_INPUT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.abstractInterpreter",com.google.javascript.jscomp.Compiler.this.abstractInterpreter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.errorManager",com.google.javascript.jscomp.Compiler.this.errorManager);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.uniqueNameId",com.google.javascript.jscomp.Compiler.this.uniqueNameId);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.sourceMap",com.google.javascript.jscomp.Compiler.this.sourceMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.tracker",com.google.javascript.jscomp.Compiler.this.tracker);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.recentChange",com.google.javascript.jscomp.Compiler.this.recentChange);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.progress",com.google.javascript.jscomp.Compiler.this.progress);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.sanityCheck",com.google.javascript.jscomp.Compiler.this.sanityCheck);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.defaultCodingConvention",com.google.javascript.jscomp.Compiler.this.defaultCodingConvention);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.SINGLETON_MODULE_NAME",com.google.javascript.jscomp.Compiler.SINGLETON_MODULE_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.codeChangeHandlers",com.google.javascript.jscomp.Compiler.this.codeChangeHandlers);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.syntheticCodeId",com.google.javascript.jscomp.Compiler.this.syntheticCodeId);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.injectedLibraries",com.google.javascript.jscomp.Compiler.this.injectedLibraries);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.moduleGraph",com.google.javascript.jscomp.Compiler.this.moduleGraph);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS",com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.parserConfig",com.google.javascript.jscomp.Compiler.this.parserConfig);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.synthesizedExternsInput",com.google.javascript.jscomp.Compiler.this.synthesizedExternsInput);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.hasRegExpGlobalReferences",com.google.javascript.jscomp.Compiler.this.hasRegExpGlobalReferences);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.externs",com.google.javascript.jscomp.Compiler.this.externs);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.COMPILER_STACK_SIZE",com.google.javascript.jscomp.Compiler.COMPILER_STACK_SIZE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.passes",com.google.javascript.jscomp.Compiler.this.passes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.typeRegistry",com.google.javascript.jscomp.Compiler.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.logger",com.google.javascript.jscomp.Compiler.logger);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.jsRoot",com.google.javascript.jscomp.Compiler.this.jsRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.currentPassName",com.google.javascript.jscomp.Compiler.this.currentPassName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.externAndJsRoot",com.google.javascript.jscomp.Compiler.this.externAndJsRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.functionInformationMap",com.google.javascript.jscomp.Compiler.this.functionInformationMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR",com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.externExports",com.google.javascript.jscomp.Compiler.this.externExports);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.typeValidator",com.google.javascript.jscomp.Compiler.this.typeValidator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.outStream",com.google.javascript.jscomp.Compiler.this.outStream);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.debugLog",com.google.javascript.jscomp.Compiler.this.debugLog);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.defaultErrorReporter",com.google.javascript.jscomp.Compiler.this.defaultErrorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.EMPTY_MODULE_LIST_ERROR",com.google.javascript.jscomp.Compiler.EMPTY_MODULE_LIST_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.globalRefMap",com.google.javascript.jscomp.Compiler.this.globalRefMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT",com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.useThreads",com.google.javascript.jscomp.Compiler.this.useThreads);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.inputsById",com.google.javascript.jscomp.Compiler.this.inputsById);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR",com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.options",com.google.javascript.jscomp.Compiler.this.options);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.modules",com.google.javascript.jscomp.Compiler.this.modules);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.warningsGuard",com.google.javascript.jscomp.Compiler.this.warningsGuard);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.inputs",com.google.javascript.jscomp.Compiler.this.inputs);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.externsRoot",com.google.javascript.jscomp.Compiler.this.externsRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectInput("com.google.javascript.jscomp.Compiler.this.currentTracer",com.google.javascript.jscomp.Compiler.this.currentTracer);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(494).collectionEnds();
            }
            if (runtimeAngelicValue)
                switch (options.getLanguageIn()) {
                    case ECMASCRIPT3 :
                        mode = com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT3;
                        break;
                    case ECMASCRIPT5 :
                        mode = com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT5;
                        break;
                    case ECMASCRIPT5_STRICT :
                        mode = com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT5_STRICT;
                        break;
                    default :
                        throw new java.lang.IllegalStateException("unexpected language mode");
                }

            parserConfig = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(isIdeMode(), mode, acceptConstKeyword(), options.extraAnnotationNames);
        }
        return parserConfig;
    }

    @java.lang.Override
    public boolean isTypeCheckingEnabled() {
        return options.checkTypes;
    }

    protected com.google.javascript.jscomp.DiagnosticGroups getDiagnosticGroups() {
        return new com.google.javascript.jscomp.DiagnosticGroups();
    }

    @java.lang.Override
    public void report(com.google.javascript.jscomp.JSError error) {
        com.google.javascript.jscomp.CheckLevel level = error.getDefaultLevel();
        if (warningsGuard != null) {
            com.google.javascript.jscomp.CheckLevel newLevel = warningsGuard.level(error);
            if (newLevel != null) {
                level = newLevel;
            }
        }
        if (level.isOn()) {
            if (getOptions().errorHandler != null) {
                getOptions().errorHandler.report(level, error);
            }
            errorManager.report(level, error);
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.CheckLevel getErrorLevel(com.google.javascript.jscomp.JSError error) {
        com.google.common.base.Preconditions.checkNotNull(options);
        return warningsGuard.level(error);
    }

    @java.lang.Override
    void throwInternalError(java.lang.String message, java.lang.Exception cause) {
        java.lang.String finalMessage = ("INTERNAL COMPILER ERROR.\n" + "Please report this problem.\n") + message;
        java.lang.RuntimeException e = new java.lang.RuntimeException(finalMessage, cause);
        if (cause != null) {
            e.setStackTrace(cause.getStackTrace());
        }
        throw e;
    }

    public int getErrorCount() {
        return errorManager.getErrorCount();
    }

    public int getWarningCount() {
        return errorManager.getWarningCount();
    }

    @java.lang.Override
    boolean hasHaltingErrors() {
        return (!isIdeMode()) && (getErrorCount() > 0);
    }

    public boolean hasErrors() {
        return hasHaltingErrors();
    }

    @java.lang.Override
    void addToDebugLog(java.lang.String str) {
        debugLog.append(str);
        debugLog.append('\n');
        com.google.javascript.jscomp.Compiler.logger.fine(str);
    }

    @java.lang.Override
    com.google.javascript.jscomp.SourceFile getSourceFileByName(java.lang.String sourceName) {
        if (sourceName != null) {
            com.google.javascript.jscomp.CompilerInput input = inputsById.get(new com.google.javascript.rhino.InputId(sourceName));
            if (input != null) {
                return input.getSourceFile();
            }
        }
        return null;
    }

    @java.lang.Override
    public java.lang.String getSourceLine(java.lang.String sourceName, int lineNumber) {
        if (lineNumber < 1) {
            return null;
        }
        com.google.javascript.jscomp.SourceFile input = getSourceFileByName(sourceName);
        if (input != null) {
            return input.getLine(lineNumber);
        }
        return null;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Region getSourceRegion(java.lang.String sourceName, int lineNumber) {
        if (lineNumber < 1) {
            return null;
        }
        com.google.javascript.jscomp.SourceFile input = getSourceFileByName(sourceName);
        if (input != null) {
            return input.getRegion(lineNumber);
        }
        return null;
    }

    @java.lang.Override
    com.google.javascript.rhino.Node getNodeForCodeInsertion(com.google.javascript.jscomp.JSModule module) {
        if (module == null) {
            if (inputs.isEmpty()) {
                throw new java.lang.IllegalStateException("No inputs");
            }
            return inputs.get(0).getAstRoot(this);
        }
        java.util.List<com.google.javascript.jscomp.CompilerInput> moduleInputs = module.getInputs();
        if (moduleInputs.size() > 0) {
            return moduleInputs.get(0).getAstRoot(this);
        }
        throw new java.lang.IllegalStateException("Root module has no inputs");
    }

    public com.google.javascript.jscomp.SourceMap getSourceMap() {
        return sourceMap;
    }

    com.google.javascript.jscomp.VariableMap getVariableMap() {
        return getPassConfig().getIntermediateState().variableMap;
    }

    com.google.javascript.jscomp.VariableMap getPropertyMap() {
        return getPassConfig().getIntermediateState().propertyMap;
    }

    com.google.javascript.jscomp.CompilerOptions getOptions() {
        return options;
    }

    com.google.javascript.jscomp.FunctionInformationMap getFunctionalInformationMap() {
        return functionInformationMap;
    }

    public static void setLoggingLevel(java.util.logging.Level level) {
        com.google.javascript.jscomp.Compiler.logger.setLevel(level);
    }

    public java.lang.String getAstDotGraph() throws java.io.IOException {
        if (jsRoot != null) {
            com.google.javascript.jscomp.ControlFlowAnalysis cfa = new com.google.javascript.jscomp.ControlFlowAnalysis(this, true, false);
            cfa.process(null, jsRoot);
            return com.google.javascript.jscomp.DotFormatter.toDot(jsRoot, cfa.getCfg());
        } else {
            return "";
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.ErrorManager getErrorManager() {
        if (options == null) {
            initOptions(newCompilerOptions());
        }
        return errorManager;
    }

    @java.lang.Override
    java.util.List<com.google.javascript.jscomp.CompilerInput> getInputsInOrder() {
        return java.util.Collections.<com.google.javascript.jscomp.CompilerInput>unmodifiableList(inputs);
    }

    public java.util.Map<com.google.javascript.rhino.InputId, com.google.javascript.jscomp.CompilerInput> getInputsById() {
        return java.util.Collections.unmodifiableMap(inputsById);
    }

    java.util.List<com.google.javascript.jscomp.CompilerInput> getExternsInOrder() {
        return java.util.Collections.<com.google.javascript.jscomp.CompilerInput>unmodifiableList(externs);
    }

    public static class IntermediateState implements java.io.Serializable {
        private static final long serialVersionUID = 1L;

        com.google.javascript.rhino.Node externsRoot;

        private com.google.javascript.rhino.Node jsRoot;

        private java.util.List<com.google.javascript.jscomp.CompilerInput> externs;

        private java.util.List<com.google.javascript.jscomp.CompilerInput> inputs;

        private java.util.List<com.google.javascript.jscomp.JSModule> modules;

        private com.google.javascript.jscomp.PassConfig.State passConfigState;

        private com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

        private com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage lifeCycleStage;

        private java.util.Map<java.lang.String, com.google.javascript.rhino.Node> injectedLibraries;

        private IntermediateState() {
        }
    }

    public com.google.javascript.jscomp.Compiler.IntermediateState getState() {
        com.google.javascript.jscomp.Compiler.IntermediateState state = new com.google.javascript.jscomp.Compiler.IntermediateState();
        state.externsRoot = externsRoot;
        state.jsRoot = jsRoot;
        state.externs = externs;
        state.inputs = inputs;
        state.modules = modules;
        state.passConfigState = getPassConfig().getIntermediateState();
        state.typeRegistry = typeRegistry;
        state.lifeCycleStage = getLifeCycleStage();
        state.injectedLibraries = com.google.common.collect.Maps.newLinkedHashMap(injectedLibraries);
        return state;
    }

    public void setState(com.google.javascript.jscomp.Compiler.IntermediateState state) {
        externsRoot = state.externsRoot;
        jsRoot = state.jsRoot;
        externs = state.externs;
        inputs = state.inputs;
        modules = state.modules;
        passes = createPassConfigInternal();
        getPassConfig().setIntermediateState(state.passConfigState);
        typeRegistry = state.typeRegistry;
        setLifeCycleStage(state.lifeCycleStage);
        injectedLibraries.clear();
        injectedLibraries.putAll(state.injectedLibraries);
    }

    @com.google.common.annotations.VisibleForTesting
    java.util.List<com.google.javascript.jscomp.CompilerInput> getInputsForTesting() {
        return inputs;
    }

    @com.google.common.annotations.VisibleForTesting
    java.util.List<com.google.javascript.jscomp.CompilerInput> getExternsForTesting() {
        return externs;
    }

    @java.lang.Override
    boolean hasRegExpGlobalReferences() {
        return hasRegExpGlobalReferences;
    }

    @java.lang.Override
    void setHasRegExpGlobalReferences(boolean references) {
        hasRegExpGlobalReferences = references;
    }

    @java.lang.Override
    void updateGlobalVarReferences(java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> refMapPatch, com.google.javascript.rhino.Node collectionRoot) {
        com.google.common.base.Preconditions.checkState(collectionRoot.isScript() || collectionRoot.isBlock());
        if (globalRefMap == null) {
            globalRefMap = new com.google.javascript.jscomp.GlobalVarReferenceMap(getInputsInOrder(), getExternsInOrder());
        }
        globalRefMap.updateGlobalVarReferences(refMapPatch, collectionRoot);
    }

    @java.lang.Override
    com.google.javascript.jscomp.GlobalVarReferenceMap getGlobalVarReferences() {
        return globalRefMap;
    }

    @java.lang.Override
    com.google.javascript.jscomp.CompilerInput getSynthesizedExternsInput() {
        if (synthesizedExternsInput == null) {
            synthesizedExternsInput = newExternInput(com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS);
        }
        return synthesizedExternsInput;
    }

    @java.lang.Override
    public double getProgress() {
        return progress;
    }

    @java.lang.Override
    void setProgress(double newProgress) {
        if (newProgress > 1.0) {
            progress = 1.0;
        } else if (newProgress < 0.0) {
            progress = 0.0;
        } else {
            progress = newProgress;
        }
    }

    public void replaceScript(com.google.javascript.jscomp.JsAst ast) {
        com.google.javascript.jscomp.CompilerInput input = this.getInput(ast.getInputId());
        if (!replaceIncrementalSourceAst(ast)) {
            return;
        }
        com.google.javascript.rhino.Node originalRoot = input.getAstRoot(this);
        processNewScript(ast, originalRoot);
    }

    public void addNewScript(com.google.javascript.jscomp.JsAst ast) {
        if (!addNewSourceAst(ast)) {
            return;
        }
        com.google.javascript.rhino.Node emptyScript = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);
        com.google.javascript.rhino.InputId inputId = ast.getInputId();
        emptyScript.setInputId(inputId);
        emptyScript.setStaticSourceFile(com.google.javascript.jscomp.SourceFile.fromCode(inputId.getIdName(), ""));
        processNewScript(ast, emptyScript);
    }

    private void processNewScript(com.google.javascript.jscomp.JsAst ast, com.google.javascript.rhino.Node originalRoot) {
        com.google.javascript.rhino.Node js = ast.getAstRoot(this);
        com.google.common.base.Preconditions.checkNotNull(js);
        runHotSwap(originalRoot, js, this.getCleanupPassConfig());
        runHotSwapPass(null, null, ensureDefaultPassConfig().garbageCollectChecks);
        this.getTypeRegistry().clearNamedTypes();
        this.removeSyntheticVarsInput();
        runHotSwap(originalRoot, js, this.ensureDefaultPassConfig());
    }

    private void runHotSwap(com.google.javascript.rhino.Node originalRoot, com.google.javascript.rhino.Node js, com.google.javascript.jscomp.PassConfig passConfig) {
        for (com.google.javascript.jscomp.PassFactory passFactory : passConfig.getChecks()) {
            runHotSwapPass(originalRoot, js, passFactory);
        }
    }

    private void runHotSwapPass(com.google.javascript.rhino.Node originalRoot, com.google.javascript.rhino.Node js, com.google.javascript.jscomp.PassFactory passFactory) {
        com.google.javascript.jscomp.HotSwapCompilerPass pass = passFactory.getHotSwapPass(this);
        if (pass != null) {
            com.google.javascript.jscomp.Compiler.logger.info("Performing HotSwap for pass " + passFactory.getName());
            pass.hotSwapScript(js, originalRoot);
        }
    }

    private com.google.javascript.jscomp.PassConfig getCleanupPassConfig() {
        return new com.google.javascript.jscomp.CleanupPasses(getOptions());
    }

    private void removeSyntheticVarsInput() {
        java.lang.String sourceName = com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS;
        removeExternInput(new com.google.javascript.rhino.InputId(sourceName));
    }

    @java.lang.Override
    com.google.javascript.rhino.Node ensureLibraryInjected(java.lang.String resourceName) {
        if (injectedLibraries.containsKey(resourceName)) {
            return null;
        }
        boolean isBase = "base".equals(resourceName);
        if (!isBase) {
            ensureLibraryInjected("base");
        }
        com.google.javascript.rhino.Node firstChild = loadLibraryCode(resourceName).removeChildren();
        com.google.javascript.rhino.Node lastChild = firstChild.getLastSibling();
        com.google.javascript.rhino.Node parent = getNodeForCodeInsertion(null);
        if (isBase) {
            parent.addChildrenToFront(firstChild);
        } else {
            parent.addChildrenAfter(firstChild, injectedLibraries.get("base"));
        }
        reportCodeChange();
        injectedLibraries.put(resourceName, lastChild);
        return lastChild;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node loadLibraryCode(java.lang.String resourceName) {
        java.lang.String originalCode;
        try {
            originalCode = com.google.common.io.CharStreams.toString(new java.io.InputStreamReader(com.google.javascript.jscomp.Compiler.class.getResourceAsStream(java.lang.String.format("js/%s.js", resourceName)), com.google.common.base.Charsets.UTF_8));
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException(e);
        }
        return com.google.javascript.jscomp.Normalize.parseAndNormalizeSyntheticCode(this, originalCode, java.lang.String.format("jscomp_%s_", resourceName));
    }
}
[2173602] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659904738474
GPR[SSUN]-1659904738474
-534884160
GPR[SPVATF]-1659904738825
GPR[EPVATF]-1659904739432
GPR[SPS]-1659904739432
[2175384] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1981.
GPR[EPS]-1659904740257
GPR[SPVATF]-1659904740258
GPR[EPVATF]-1659904740897
GPR[SPS]-1659904740897
[2176826] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1981.
GPR[EPS]-1659904741698
GPR[ESUN]-1659904741698
GPR[SSUN]-1659904741699
-534884160
GPR[ESUN]-1659904742038
GPR[SSUN]-1659904742038
-534884160
GPR[ESUN]-1659904742368
GPR[SSUN]-1659904742368
71832666
GPR[ESUN]-1659904742582
GPR[SSUN]-1659904742582
71832666
GPR[SPVATF]-1659904742786
GPR[EPVATF]-1659904743429
GPR[SPS]-1659904743429
[2179107] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JsAst:104.
GPR[EPS]-1659904743979
GPR[ESUN]-1659904743979
GPR[SSUN]-1659904743979
71832666
GPR[SPVATF]-1659904744180
GPR[EPVATF]-1659904744802
GPR[SPS]-1659904744802
[2180438] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JsAst:95.
GPR[EPS]-1659904745310
GPR[SPVATF]-1659904745310
GPR[EPVATF]-1659904745935
GPR[SPS]-1659904745935
[2181713] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JsAst:95.
GPR[EPS]-1659904746585
GPR[ESUN]-1659904746586
GPR[SSUN]-1659904746586
71832666
GPR[ESUN]-1659904746789
GPR[SSUN]-1659904746789
71832666
GPR[SPVATF]-1659904746989
GPR[EPVATF]-1659904747682
GPR[SPS]-1659904747682
[2183293] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JsAst:86.
GPR[EPS]-1659904748165
GPR[ESUN]-1659904748165
GPR[SSUN]-1659904748165
71832666
GPR[SPVATF]-1659904748365
GPR[EPVATF]-1659904749004
GPR[SPS]-1659904749004
[2184647] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JsAst:85.
GPR[EPS]-1659904749519
GPR[ESUN]-1659904749519
GPR[SSUN]-1659904749519
71832666
GPR[ESUN]-1659904749725
GPR[SSUN]-1659904749725
71832666
GPR[SPVATF]-1659904749925
GPR[EPVATF]-1659904750580
GPR[SPS]-1659904750580
[2186213] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JsAst:53.
GPR[EPS]-1659904751085
GPR[ESUN]-1659904751085
GPR[SSUN]-1659904751085
71832666
GPR[SPVATF]-1659904751288
GPR[EPVATF]-1659904751935
GPR[SPS]-1659904751935
[2187558] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JsAst:52.
GPR[EPS]-1659904752430
GPR[ESUN]-1659904752430
GPR[SSUN]-1659904752430
71832666
GPR[SPVATF]-1659904752638
GPR[EPVATF]-1659904753333
GPR[SPS]-1659904753333
[2188953] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JsAst:51.
GPR[EPS]-1659904753825
GPR[SPVATF]-1659904753825
GPR[EPVATF]-1659904754499
GPR[SPS]-1659904754499
[2190213] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JsAst:51.
GPR[EPS]-1659904755085
GPR[ESUN]-1659904755085
GPR[SSUN]-1659904755085
1331276989
GPR[ESUN]-1659904755294
GPR[SSUN]-1659904755294
1331276989
GPR[ESUN]-1659904755499
GPR[SSUN]-1659904755499
1331276989
GPR[SPVATF]-1659904755703
GPR[EPVATF]-1659904756379
GPR[SPS]-1659904756379
[2192038] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:481.
GPR[EPS]-1659904756910
GPR[ESUN]-1659904756910
GPR[SSUN]-1659904756910
1331276989
GPR[SPVATF]-1659904757117
GPR[EPVATF]-1659904757834
GPR[SPS]-1659904757834
[2193483] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:480.
GPR[EPS]-1659904758355
GPR[ESUN]-1659904758355
GPR[SSUN]-1659904758356
-534884160
GPR[ESUN]-1659904758696
GPR[SSUN]-1659904758696
-534884160
GPR[ESUN]-1659904759033
GPR[SSUN]-1659904759033
-534884160
GPR[SPVATF]-1659904759364
GPR[EPVATF]-1659904760046
GPR[SPS]-1659904760046
[2195993] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1951.
GPR[EPS]-1659904760866
GPR[ESUN]-1659904760866
GPR[SSUN]-1659904760866
-534884160
GPR[ESUN]-1659904761202
GPR[SSUN]-1659904761203
881600600
GPR[ESUN]-1659904761472
GPR[SSUN]-1659904761473
1508329696
GPR[ESUN]-1659904761713
GPR[SSUN]-1659904761713
1187751237
GPR[ESUN]-1659904761987
GPR[SSUN]-1659904761987
1331276989
GPR[ESUN]-1659904762197
GPR[SSUN]-1659904762198
1331276989
GPR[SPVATF]-1659904762405
GPR[EPVATF]-1659904763088
GPR[SPS]-1659904763088
[2540369] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659905114086
GPR[SSUN]-1659905118966
1331276989
GPR[SPVATF]-1659905394943
[3138875] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659905731993
GPR[SSUN]-1659905731993
\n\nNode: host-50\n
\n\nDate: Sun 07 Aug 2022 02:17:54 PM PDT\n
End running Nopol Closure/28 results at /experiment_home///results/Nopol/Closure/28/seed_264/
Removing checked out dir script/workingdir/Nopol/Closure_28
GPR[SSLE]-1659907075538
GPR[ESLE]-1659907135541
