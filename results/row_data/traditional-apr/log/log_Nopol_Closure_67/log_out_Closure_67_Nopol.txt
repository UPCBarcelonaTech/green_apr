Sleep 1m start
GPR[SSLI]-1659899996789
GPR[ESLI]-1659900056792
Running Nopol Closure 67b with approach: smt
Timezone: America/Los_Angeles
Seed 261
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/67/seed_261/
The file script/workingdir/Nopol/Closure_67 does not exist!
script/workingdir/Nopol/Closure_67
script/workingdir/Nopol/Closure_67
classpath:  script/workingdir/Nopol/Closure_67/build/classes:script/workingdir/Nopol/Closure_67/lib/args4j.jar:script/workingdir/Nopol/Closure_67/lib/guava.jar:script/workingdir/Nopol/Closure_67/lib/json.jar:script/workingdir/Nopol/Closure_67/lib/jsr305.jar:script/workingdir/Nopol/Closure_67/lib/libtrunk_rhino_parser_jarjared.jar:script/workingdir/Nopol/Closure_67/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_67/lib/ant.jar:script/workingdir/Nopol/Closure_67/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_67/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_67/lib/junit.jar:script/workingdir/Nopol/Closure_67/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659900072473
GPR[ESLB]-1659900132478
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_67//build/classes:script/workingdir/Nopol/Closure_67//build/test:script/workingdir/Nopol/Closure_67/build/classes:script/workingdir/Nopol/Closure_67/lib/args4j.jar:script/workingdir/Nopol/Closure_67/lib/guava.jar:script/workingdir/Nopol/Closure_67/lib/json.jar:script/workingdir/Nopol/Closure_67/lib/jsr305.jar:script/workingdir/Nopol/Closure_67/lib/libtrunk_rhino_parser_jarjared.jar:script/workingdir/Nopol/Closure_67/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_67/lib/ant.jar:script/workingdir/Nopol/Closure_67/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_67/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_67/lib/junit.jar:script/workingdir/Nopol/Closure_67/build/test
Node: host-55
Date init: Sun 07 Aug 2022 12:22:12 PM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_67/src]
[0] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_67/build/classes/, file:script/workingdir/Nopol/Closure_67/build/test/, file:script/workingdir/Nopol/Closure_67/build/classes/, file:script/workingdir/Nopol/Closure_67/lib/args4j.jar, file:script/workingdir/Nopol/Closure_67/lib/guava.jar, file:script/workingdir/Nopol/Closure_67/lib/json.jar, file:script/workingdir/Nopol/Closure_67/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_67/lib/libtrunk_rhino_parser_jarjared.jar, file:script/workingdir/Nopol/Closure_67/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_67/lib/ant.jar, file:script/workingdir/Nopol/Closure_67/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_67/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_67/lib/junit.jar, file:script/workingdir/Nopol/Closure_67/build/test/]
[0] INFO NoPol - Statement type: PRE_THEN_COND
[1] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPropertyOrderTest, com.google.javascript.jscomp.CheckPropertyOrderTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OperaCompoundAssignFixTest, com.google.javascript.jscomp.OperaCompoundAssignFixTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SuspiciousPropertiesCheckTest, com.google.javascript.jscomp.SuspiciousPropertiesCheckTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnfoldCompoundAssignmentsTest, com.google.javascript.jscomp.UnfoldCompoundAssignmentsTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableShadowDeclarationCheckTest, com.google.javascript.jscomp.VariableShadowDeclarationCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.ParserTest, com.google.javascript.rhino.ParserTest, com.google.javascript.rhino.TokenStreamTest, com.google.javascript.rhino.TokenStreamTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_67/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPropertyOrderTest, com.google.javascript.jscomp.CheckPropertyOrderTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OperaCompoundAssignFixTest, com.google.javascript.jscomp.OperaCompoundAssignFixTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SuspiciousPropertiesCheckTest, com.google.javascript.jscomp.SuspiciousPropertiesCheckTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnfoldCompoundAssignmentsTest, com.google.javascript.jscomp.UnfoldCompoundAssignmentsTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableShadowDeclarationCheckTest, com.google.javascript.jscomp.VariableShadowDeclarationCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.ParserTest, com.google.javascript.rhino.ParserTest, com.google.javascript.rhino.TokenStreamTest, com.google.javascript.rhino.TokenStreamTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/67/seed_261/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[6] INFO NoPol - Free memory: 1 GB
[7] INFO NoPol - Maximum memory: 7 GB
[7] INFO NoPol - Total memory available to JVM: 1 GB
[8] INFO NoPol - Java version: 1.8.0_45
[9] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[9] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659900137824
GPR[ESUP]-1659900137824
GPR[SFL]-1659900137824
GPR[EFL]-1659900173466
GPR[SFP]-1659900173466
GPR[SSUN]-1659900175119
-283827935
GPR[SPVATF]-1659900175586
GPR[EPVATF]-1659900175623
[42413] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900175623
GPR[SSUN]-1659900175623
80988634
GPR[ESUN]-1659900175799
GPR[SSUN]-1659900175799
-1966087783
GPR[ESUN]-1659900175994
GPR[SSUN]-1659900175994
-1966087783
GPR[SPVATF]-1659900176185
GPR[EPVATF]-1659900176216
[43006] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900176216
GPR[SSUN]-1659900176216
2433571
GPR[SPVATF]-1659900176464
GPR[EPVATF]-1659900176805
GPR[SPS]-1659900176805
[44752] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1427.
GPR[EPS]-1659900177962
GPR[ESUN]-1659900177962
GPR[SSUN]-1659900177963
2433571
GPR[SPVATF]-1659900178196
GPR[EPVATF]-1659900178435
GPR[SPS]-1659900178435
GPR[EPS]-1659900181899
GPR[SPVATR]-1659900181899
[48689] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1385: PRECONDITION com.google.javascript.rhino.Node.this.type <= 45
[49113] INFO TestPatch - Running test suite to check the patch "com.google.javascript.rhino.Node.this.type <= 45" is working
GPR[EPVATR]-1659900182463
[49253] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659900182463
[49275] INFO NoPol - --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1384,7 +1384,9 @@
       if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        if (com.google.javascript.rhino.Node.this.type <= 45) {
+          return "Node tree inequality:" +
+          "\nTree1:\n" + toStringTree() +
+          "\n\nTree2:\n" + node2.toStringTree() +
+          "\n\nSubtree1: " + diff.nodeA.toStringTree() +
+          "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/67/seed_261/patch_44661_1ts_1659900182485.diff
GPR[ESUN]-1659900182486
GPR[SSUN]-1659900182486
-1966087783
GPR[SPVATF]-1659900182672
GPR[EPVATF]-1659900182692
[49482] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900182692
GPR[SSUN]-1659900182692
-1966087783
GPR[SPVATF]-1659900182875
GPR[EPVATF]-1659900182896
[49686] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900182896
GPR[SSUN]-1659900182896
-1659631726
GPR[ESUN]-1659900183073
GPR[SSUN]-1659900183073
130004992
GPR[ESUN]-1659900183241
GPR[SSUN]-1659900183241
130004992
GPR[SPVATF]-1659900183406
GPR[EPVATF]-1659900183429
[50220] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900183430
GPR[SSUN]-1659900183430
130004992
GPR[ESUN]-1659900183599
GPR[SSUN]-1659900183599
890942016
GPR[ESUN]-1659900183786
GPR[SSUN]-1659900183786
890942016
GPR[SPVATF]-1659900183966
GPR[EPVATF]-1659900183992
[50782] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900183992
GPR[SSUN]-1659900183992
890942016
GPR[SPVATF]-1659900184175
GPR[EPVATF]-1659900184195
[50985] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900184195
GPR[EPVATF]-1659900184213
[51003] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900184213
GPR[SSUN]-1659900184213
890942016
GPR[ESUN]-1659900184398
GPR[SSUN]-1659900184398
890942016
GPR[ESUN]-1659900184576
GPR[SSUN]-1659900184576
-1966087783
GPR[ESUN]-1659900184759
GPR[SSUN]-1659900184759
-1966087783
GPR[SPVATF]-1659900184940
GPR[EPVATF]-1659900184959
[51749] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900184959
GPR[EPVATF]-1659900184978
[51769] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900184979
GPR[SSUN]-1659900184979
-1966087783
GPR[ESUN]-1659900185162
GPR[SSUN]-1659900185162
-1966087783
GPR[SPVATF]-1659900185347
GPR[EPVATF]-1659900185367
[52157] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900185368
GPR[EPVATF]-1659900185387
[52177] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900185387
GPR[SSUN]-1659900185387
-1966087783
GPR[ESUN]-1659900185568
GPR[SSUN]-1659900185568
-1966087783
GPR[ESUN]-1659900185749
GPR[SSUN]-1659900185749
-1966087783
GPR[ESUN]-1659900185932
GPR[SSUN]-1659900185932
80988634
GPR[ESUN]-1659900186106
GPR[SSUN]-1659900186106
80988634
GPR[ESUN]-1659900186272
GPR[SSUN]-1659900186272
-1966087783
GPR[SPVATF]-1659900186457
GPR[EPVATF]-1659900186480
[53270] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900186480
GPR[EPVATF]-1659900186502
[53292] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900186502
GPR[SSUN]-1659900186502
-1966087783
GPR[SPVATF]-1659900186681
GPR[EPVATF]-1659900186705
[53495] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900186706
GPR[EPVATF]-1659900186726
[53516] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900186726
GPR[SSUN]-1659900186726
-1966087783
GPR[SPVATF]-1659900186914
GPR[EPVATF]-1659900186935
[53725] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900186936
GPR[EPVATF]-1659900186957
[53748] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900186958
GPR[SSUN]-1659900186958
-1966087783
GPR[ESUN]-1659900187137
GPR[SSUN]-1659900187137
-1966087783
GPR[ESUN]-1659900187313
GPR[SSUN]-1659900187313
-1966087783
GPR[SPVATF]-1659900187494
GPR[EPVATF]-1659900187517
[54307] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900187517
GPR[EPVATF]-1659900187538
[54328] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900187538
GPR[SSUN]-1659900187538
-1966087783
GPR[SPVATF]-1659900187721
GPR[EPVATF]-1659900187742
[54532] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900187742
GPR[EPVATF]-1659900187763
[54553] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900187763
GPR[SSUN]-1659900187763
-1966087783
GPR[ESUN]-1659900187943
GPR[SSUN]-1659900187943
-1966087783
GPR[SPVATF]-1659900188118
GPR[EPVATF]-1659900188139
[54929] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900188139
GPR[SSUN]-1659900188139
-1966087783
GPR[SPVATF]-1659900188319
GPR[EPVATF]-1659900188340
[55130] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900188340
GPR[SSUN]-1659900188340
-1966087783
GPR[ESUN]-1659900188518
GPR[SSUN]-1659900188518
-1966087783
GPR[SPVATF]-1659900188695
GPR[EPVATF]-1659900188716
[55506] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900188716
GPR[SSUN]-1659900188716
-1966087783
GPR[ESUN]-1659900188894
GPR[SSUN]-1659900188894
-1966087783
GPR[ESUN]-1659900189072
GPR[SSUN]-1659900189072
-1966087783
GPR[SPVATF]-1659900189251
GPR[EPVATF]-1659900189272
[56062] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900189272
GPR[SSUN]-1659900189272
-1966087783
GPR[SPVATF]-1659900189448
GPR[EPVATF]-1659900189468
[56258] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900189468
GPR[SSUN]-1659900189468
234947553
GPR[ESUN]-1659900189652
GPR[SSUN]-1659900189652
234947553
GPR[SPVATF]-1659900189840
GPR[EPVATF]-1659900189857
[56647] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900189857
GPR[EPVATF]-1659900189872
[56662] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900189872
GPR[SSUN]-1659900189872
234947553
GPR[ESUN]-1659900190055
GPR[SSUN]-1659900190055
234947553
GPR[SPVATF]-1659900190234
GPR[EPVATF]-1659900190250
[57040] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900190250
GPR[EPVATF]-1659900190266
[57056] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900190266
GPR[SSUN]-1659900190266
234947553
GPR[SPVATF]-1659900190448
GPR[EPVATF]-1659900190464
[57254] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900190464
GPR[SSUN]-1659900190464
234947553
GPR[ESUN]-1659900190643
GPR[SSUN]-1659900190643
234947553
GPR[ESUN]-1659900190825
GPR[SSUN]-1659900190825
234947553
GPR[SPVATF]-1659900191006
GPR[EPVATF]-1659900191022
[57812] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900191022
GPR[SSUN]-1659900191022
234947553
GPR[SPVATF]-1659900191199
GPR[EPVATF]-1659900191215
[58005] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900191215
GPR[SSUN]-1659900191215
234947553
GPR[SPVATF]-1659900191394
GPR[EPVATF]-1659900191410
[58201] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900191411
GPR[SSUN]-1659900191411
234947553
GPR[ESUN]-1659900191588
GPR[SSUN]-1659900191588
234947553
GPR[ESUN]-1659900191768
GPR[SSUN]-1659900191768
234947553
GPR[SPVATF]-1659900191944
GPR[EPVATF]-1659900191959
[58749] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900191959
GPR[SSUN]-1659900191959
234947553
GPR[SPVATF]-1659900192139
GPR[EPVATF]-1659900192155
[58946] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900192156
GPR[SSUN]-1659900192156
234947553
GPR[ESUN]-1659900192338
GPR[SSUN]-1659900192338
234947553
GPR[SPVATF]-1659900192520
GPR[EPVATF]-1659900192537
[59327] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900192537
GPR[SSUN]-1659900192537
234947553
GPR[SPVATF]-1659900192714
GPR[EPVATF]-1659900192730
[59520] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900192730
GPR[SSUN]-1659900192730
234947553
GPR[ESUN]-1659900192908
GPR[SSUN]-1659900192908
890942016
GPR[SPVATF]-1659900193082
GPR[EPVATF]-1659900193101
[59891] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900193101
GPR[EPVATF]-1659900193119
[59909] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900193119
GPR[SSUN]-1659900193119
890942016
GPR[SPVATF]-1659900193299
GPR[EPVATF]-1659900193317
[60107] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900193317
GPR[SSUN]-1659900193317
890942016
GPR[ESUN]-1659900193496
GPR[SSUN]-1659900193496
890942016
GPR[SPVATF]-1659900193673
GPR[EPVATF]-1659900193690
[60481] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900193691
GPR[SSUN]-1659900193691
890942016
GPR[SPVATF]-1659900193871
GPR[EPVATF]-1659900193891
[60681] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900193891
GPR[EPVATF]-1659900193909
[60699] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900193909
GPR[SSUN]-1659900193909
890942016
GPR[SPVATF]-1659900194087
GPR[EPVATF]-1659900194107
[60897] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900194107
GPR[SSUN]-1659900194107
890942016
GPR[SPVATF]-1659900194283
GPR[EPVATF]-1659900194301
[61091] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900194301
GPR[EPVATF]-1659900194318
[61108] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900194318
GPR[SSUN]-1659900194318
890942016
GPR[ESUN]-1659900194497
GPR[SSUN]-1659900194497
890942016
GPR[SPVATF]-1659900194671
GPR[EPVATF]-1659900194690
[61481] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900194691
GPR[SSUN]-1659900194691
890942016
GPR[SPVATF]-1659900194872
GPR[EPVATF]-1659900194891
[61681] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900194891
GPR[SSUN]-1659900194891
890942016
GPR[SPVATF]-1659900195070
GPR[EPVATF]-1659900195089
[61879] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900195089
GPR[SSUN]-1659900195089
890942016
GPR[ESUN]-1659900195263
GPR[SSUN]-1659900195263
2433571
GPR[SPVATF]-1659900195483
GPR[EPVATF]-1659900195711
GPR[SPS]-1659900195711
[63088] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1414.
GPR[EPS]-1659900196298
GPR[ESUN]-1659900196298
GPR[SSUN]-1659900196298
1803458346
GPR[ESUN]-1659900196523
GPR[SSUN]-1659900196524
1803458346
GPR[SPVATF]-1659900196747
GPR[EPVATF]-1659900197734
GPR[SPS]-1659900197734
[65101] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$AssignmentProperty:535.
GPR[EPS]-1659900198311
GPR[ESUN]-1659900198311
GPR[SSUN]-1659900198311
2433571
GPR[SPVATF]-1659900198538
GPR[EPVATF]-1659900198769
GPR[SPS]-1659900198769
[66139] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:946.
GPR[EPS]-1659900199349
GPR[ESUN]-1659900199349
GPR[SSUN]-1659900199349
80988634
GPR[ESUN]-1659900199661
GPR[SSUN]-1659900199661
2039291388
GPR[SPVATF]-1659900199853
GPR[EPVATF]-1659900200079
GPR[SPS]-1659900200079
GPR[EPS]-1659900211341
GPR[ESUN]-1659900211341
GPR[SSUN]-1659900211341
-132053243
GPR[ESUN]-1659900211526
GPR[SSUN]-1659900211526
-132053243
GPR[SPVATF]-1659900211707
GPR[EPVATF]-1659900211724
[78514] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900211724
GPR[EPVATF]-1659900211741
[78531] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900211741
GPR[SSUN]-1659900211741
-132053243
GPR[ESUN]-1659900211921
GPR[SSUN]-1659900211921
-132053243
GPR[SPVATF]-1659900212103
GPR[EPVATF]-1659900212119
[78909] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900212119
GPR[SSUN]-1659900212119
-132053243
GPR[SPVATF]-1659900212301
GPR[EPVATF]-1659900212318
[79109] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900212319
GPR[SSUN]-1659900212319
-132053243
GPR[SPVATF]-1659900212495
GPR[EPVATF]-1659900212511
[79301] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900212511
GPR[SSUN]-1659900212511
-132053243
GPR[SPVATF]-1659900212699
GPR[EPVATF]-1659900212716
[79506] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900212716
GPR[SSUN]-1659900212716
-132053243
GPR[ESUN]-1659900212908
GPR[SSUN]-1659900212908
2433571
GPR[SPVATF]-1659900213128
GPR[EPVATF]-1659900213359
GPR[SPS]-1659900213359
[80709] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:943.
GPR[EPS]-1659900213919
GPR[SPVATF]-1659900213919
GPR[EPVATF]-1659900214145
GPR[SPS]-1659900214145
[81482] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:943.
GPR[EPS]-1659900214692
GPR[ESUN]-1659900214692
GPR[SSUN]-1659900214692
2433571
GPR[SPVATF]-1659900214918
GPR[EPVATF]-1659900215140
GPR[SPS]-1659900215140
[82495] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:939.
GPR[EPS]-1659900215705
GPR[ESUN]-1659900215705
GPR[SSUN]-1659900215705
2433571
GPR[ESUN]-1659900215924
GPR[SSUN]-1659900215924
2039291388
GPR[SPVATF]-1659900216119
GPR[EPVATF]-1659900216343
GPR[SPS]-1659900216343
[83567] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedPrototypeProperties:111.
GPR[EPS]-1659900216777
GPR[ESUN]-1659900216777
GPR[SSUN]-1659900216777
2039291388
GPR[ESUN]-1659900216974
GPR[SSUN]-1659900216974
2039291388
GPR[SPVATF]-1659900217167
GPR[EPVATF]-1659900217398
GPR[SPS]-1659900217398
[84604] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedPrototypeProperties:102.
GPR[EPS]-1659900217814
GPR[ESUN]-1659900217814
GPR[SSUN]-1659900217814
2039291388
GPR[SPVATF]-1659900218004
GPR[EPVATF]-1659900218234
GPR[SPS]-1659900218234
[86596] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedPrototypeProperties:101.
GPR[EPS]-1659900219807
GPR[ESUN]-1659900219807
GPR[SSUN]-1659900219807
2039291388
GPR[SPVATF]-1659900220011
GPR[EPVATF]-1659900220252
GPR[SPS]-1659900220252
GPR[EPS]-1659900227569
GPR[SPVATF]-1659900227570
GPR[EPVATF]-1659900227802
GPR[SPS]-1659900227802
GPR[EPS]-1659900235062
GPR[ESUN]-1659900235062
GPR[SSUN]-1659900235062
2039291388
GPR[SPVATF]-1659900235266
GPR[EPVATF]-1659900235523
GPR[SPS]-1659900235523
GPR[EPS]-1659900244928
GPR[SPVATF]-1659900244929
GPR[EPVATF]-1659900245160
GPR[SPS]-1659900245160
[112371] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedPrototypeProperties:87.
GPR[EPS]-1659900245581
GPR[ESUN]-1659900245581
GPR[SSUN]-1659900245581
2039291388
GPR[ESUN]-1659900245770
GPR[SSUN]-1659900245770
2433571
GPR[SPVATF]-1659900246009
GPR[EPVATF]-1659900246227
GPR[SPS]-1659900246227
[113598] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int LOCAL_BLOCK_PROP = -3;

    public static final int OBJECT_IDS_PROP = -2;

    public static final int CATCH_SCOPE_PROP = -1;

    public static final int LABEL_ID_PROP = 0;

    public static final int TARGET_PROP = 1;

    public static final int BREAK_PROP = 2;

    public static final int CONTINUE_PROP = 3;

    public static final int ENUM_PROP = 4;

    public static final int FUNCTION_PROP = 5;

    public static final int TEMP_PROP = 6;

    public static final int LOCAL_PROP = 7;

    public static final int CODEOFFSET_PROP = 8;

    public static final int FIXUPS_PROP = 9;

    public static final int VARS_PROP = 10;

    public static final int USES_PROP = 11;

    public static final int REGEXP_PROP = 12;

    public static final int CASES_PROP = 13;

    public static final int DEFAULT_PROP = 14;

    public static final int CASEARRAY_PROP = 15;

    public static final int SOURCENAME_PROP = 16;

    public static final int TYPE_PROP = 17;

    public static final int SPECIAL_PROP_PROP = 18;

    public static final int LABEL_PROP = 19;

    public static final int FINALLY_PROP = 20;

    public static final int LOCALCOUNT_PROP = 21;

    public static final int TARGETBLOCK_PROP = 22;

    public static final int VARIABLE_PROP = 23;

    public static final int LASTUSE_PROP = 24;

    public static final int ISNUMBER_PROP = 25;

    public static final int DIRECTCALL_PROP = 26;

    public static final int SPECIALCALL_PROP = 27;

    public static final int DEBUGSOURCE_PROP = 28;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int SKIP_INDEXES_PROP = 31;

    public static final int INCRDECR_PROP = 32;

    public static final int MEMBER_TYPE_PROP = 33;

    public static final int NAME_PROP = 34;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int LAST_PROP = 50;

    public static final int BOTH = 0;

    public static final int LEFT = 1;

    public static final int RIGHT = 2;

    public static final int NON_SPECIALCALL = 0;

    public static final int SPECIALCALL_EVAL = 1;

    public static final int SPECIALCALL_WITH = 2;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    public static final int PROPERTY_FLAG = 0x1;

    public static final int ATTRIBUTE_FLAG = 0x2;

    public static final int DESCENDANTS_FLAG = 0x4;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP :
                return "local_block";
            case com.google.javascript.rhino.Node.OBJECT_IDS_PROP :
                return "object_ids_prop";
            case com.google.javascript.rhino.Node.CATCH_SCOPE_PROP :
                return "catch_scope_prop";
            case com.google.javascript.rhino.Node.LABEL_ID_PROP :
                return "label_id_prop";
            case com.google.javascript.rhino.Node.TARGET_PROP :
                return "target";
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.BREAK_PROP :
                return "break";
            case com.google.javascript.rhino.Node.CONTINUE_PROP :
                return "continue";
            case com.google.javascript.rhino.Node.ENUM_PROP :
                return "enum";
            case com.google.javascript.rhino.Node.FUNCTION_PROP :
                return "function";
            case com.google.javascript.rhino.Node.TEMP_PROP :
                return "temp";
            case com.google.javascript.rhino.Node.LOCAL_PROP :
                return "local";
            case com.google.javascript.rhino.Node.CODEOFFSET_PROP :
                return "codeoffset";
            case com.google.javascript.rhino.Node.FIXUPS_PROP :
                return "fixups";
            case com.google.javascript.rhino.Node.VARS_PROP :
                return "vars";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.USES_PROP :
                return "uses";
            case com.google.javascript.rhino.Node.REGEXP_PROP :
                return "regexp";
            case com.google.javascript.rhino.Node.CASES_PROP :
                return "cases";
            case com.google.javascript.rhino.Node.DEFAULT_PROP :
                return "default";
            case com.google.javascript.rhino.Node.CASEARRAY_PROP :
                return "casearray";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.TYPE_PROP :
                return "type";
            case com.google.javascript.rhino.Node.SPECIAL_PROP_PROP :
                return "special_prop";
            case com.google.javascript.rhino.Node.LABEL_PROP :
                return "label";
            case com.google.javascript.rhino.Node.FINALLY_PROP :
                return "finally";
            case com.google.javascript.rhino.Node.LOCALCOUNT_PROP :
                return "localcount";
            case com.google.javascript.rhino.Node.TARGETBLOCK_PROP :
                return "targetblock";
            case com.google.javascript.rhino.Node.VARIABLE_PROP :
                return "variable";
            case com.google.javascript.rhino.Node.LASTUSE_PROP :
                return "lastuse";
            case com.google.javascript.rhino.Node.ISNUMBER_PROP :
                return "isnumber";
            case com.google.javascript.rhino.Node.DIRECTCALL_PROP :
                return "directcall";
            case com.google.javascript.rhino.Node.SPECIALCALL_PROP :
                return "specialcall";
            case com.google.javascript.rhino.Node.DEBUGSOURCE_PROP :
                return "debugsource";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.SKIP_INDEXES_PROP :
                return "skip_indexes";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.MEMBER_TYPE_PROP :
                return "member_type";
            case com.google.javascript.rhino.Node.NAME_PROP :
                return "name";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            default :
                com.google.javascript.rhino.Kit.codeBug();
        }
        return null;
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && (getDouble() == ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble());
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private static class PropListItem implements java.io.Serializable {
        private static final long serialVersionUID = 1L;

        final com.google.javascript.rhino.Node.PropListItem next;

        final int type;

        final int intValue;

        final java.lang.Object objectValue;

        PropListItem(int type, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            this(type, intValue, null, next);
        }

        PropListItem(int type, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            this(type, 0, objectValue, next);
        }

        PropListItem(int type, int intValue, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            this.type = type;
            this.intValue = intValue;
            this.objectValue = objectValue;
            this.next = next;
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        if (last != null) {
            last.next = children;
        }
        last = children.getLastSibling();
        if (first == null) {
            first = children;
        }
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node != null, "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.parent = this;
        newChild.next = node.next;
        node.next = newChild;
        if (last == node) {
            last = newChild;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.type)) {
            x = x.next;
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.type == propType) {
            return item.next;
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.next, propType);
            if (result != item.next) {
                return new com.google.javascript.rhino.Node.PropListItem(item.type, item.intValue, item.objectValue, result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.objectValue;
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.intValue;
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            com.google.javascript.rhino.Kit.codeBug();
        }
        return item.intValue;
    }

    public void putProp(int propType, java.lang.Object value) {
        removeProp(propType);
        if (value != null) {
            propListHead = new com.google.javascript.rhino.Node.PropListItem(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = new com.google.javascript.rhino.Node.PropListItem(propType, value, propListHead);
        }
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.next) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.next) {
            count--;
            keys[count] = x.type;
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        if (com.google.javascript.rhino.Token.printTrees) {
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            toString(sb, printSource, printAnnotations, printType);
            return sb.toString();
        }
        return java.lang.String.valueOf(type);
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        if (com.google.javascript.rhino.Token.printTrees) {
            sb.append(com.google.javascript.rhino.Token.name(type));
            if (this instanceof com.google.javascript.rhino.Node.StringNode) {
                sb.append(' ');
                sb.append(getString());
            } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
                sb.append(' ');
                if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                    sb.append("<invalid>");
                } else {
                    sb.append(first.getString());
                }
            } else if (this instanceof com.google.javascript.rhino.ScriptOrFnNode) {
                com.google.javascript.rhino.ScriptOrFnNode sof = ((com.google.javascript.rhino.ScriptOrFnNode) (this));
                if (this instanceof com.google.javascript.rhino.FunctionNode) {
                    com.google.javascript.rhino.FunctionNode fn = ((com.google.javascript.rhino.FunctionNode) (this));
                    sb.append(' ');
                    sb.append(fn.getFunctionName());
                }
                if (printSource) {
                    sb.append(" [source name: ");
                    sb.append(sof.getSourceName());
                    sb.append("] [encoded source length: ");
                    sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());
                    sb.append("] [base line: ");
                    sb.append(sof.getBaseLineno());
                    sb.append("] [end line: ");
                    sb.append(sof.getEndLineno());
                    sb.append(']');
                }
            } else if (type == com.google.javascript.rhino.Token.NUMBER) {
                sb.append(' ');
                sb.append(getDouble());
            }
            if (printSource) {
                int lineno = getLineno();
                if (lineno != (-1)) {
                    sb.append(' ');
                    sb.append(lineno);
                }
            }
            if (printAnnotations) {
                int[] keys = getSortedPropTypes();
                for (int i = 0; i < keys.length; i++) {
                    int type = keys[i];
                    com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                    sb.append(" [");
                    sb.append(com.google.javascript.rhino.Node.propToString(type));
                    sb.append(": ");
                    java.lang.String value;
                    switch (type) {
                        case com.google.javascript.rhino.Node.TARGETBLOCK_PROP :
                            value = "target block property";
                            break;
                        case com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP :
                            value = "last local block";
                            break;
                        case com.google.javascript.rhino.Node.ISNUMBER_PROP :
                            switch (x.intValue) {
                                case com.google.javascript.rhino.Node.BOTH :
                                    value = "both";
                                    break;
                                case com.google.javascript.rhino.Node.RIGHT :
                                    value = "right";
                                    break;
                                case com.google.javascript.rhino.Node.LEFT :
                                    value = "left";
                                    break;
                                default :
                                    throw com.google.javascript.rhino.Kit.codeBug();
                            }
                            break;
                        case com.google.javascript.rhino.Node.SPECIALCALL_PROP :
                            switch (x.intValue) {
                                case com.google.javascript.rhino.Node.SPECIALCALL_EVAL :
                                    value = "eval";
                                    break;
                                case com.google.javascript.rhino.Node.SPECIALCALL_WITH :
                                    value = "with";
                                    break;
                                default :
                                    throw com.google.javascript.rhino.Kit.codeBug();
                            }
                            break;
                        default :
                            java.lang.Object obj = x.objectValue;
                            if (obj != null) {
                                value = obj.toString();
                            } else {
                                boolean spoonDefaultValue = false;
                                try {
                                    spoonDefaultValue = true;
                                } catch (java.lang.Exception __NopolProcessorException) {
                                }
                                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                if (fr.inria.lille.commons.trace.RuntimeValues.instance(16).isEnabled()) {
                                    fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectionStarts();
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.FIXUPS_PROP",com.google.javascript.rhino.Node.FIXUPS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.ISNUMBER_PROP",com.google.javascript.rhino.Node.ISNUMBER_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.CODEOFFSET_PROP",com.google.javascript.rhino.Node.CODEOFFSET_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.LOCAL_PROP",com.google.javascript.rhino.Node.LOCAL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_PROP",com.google.javascript.rhino.Node.SPECIALCALL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.TARGET_PROP",com.google.javascript.rhino.Node.TARGET_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.OBJECT_IDS_PROP",com.google.javascript.rhino.Node.OBJECT_IDS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.LOCALCOUNT_PROP",com.google.javascript.rhino.Node.LOCALCOUNT_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.FUNCTION_PROP",com.google.javascript.rhino.Node.FUNCTION_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.LABEL_PROP",com.google.javascript.rhino.Node.LABEL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.BOTH",com.google.javascript.rhino.Node.BOTH);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.MEMBER_TYPE_PROP",com.google.javascript.rhino.Node.MEMBER_TYPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_WITH",com.google.javascript.rhino.Node.SPECIALCALL_WITH);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.TYPE_PROP",com.google.javascript.rhino.Node.TYPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.PROPERTY_FLAG",com.google.javascript.rhino.Node.PROPERTY_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.DEFAULT_PROP",com.google.javascript.rhino.Node.DEFAULT_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.SPECIAL_PROP_PROP",com.google.javascript.rhino.Node.SPECIAL_PROP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.CONTINUE_PROP",com.google.javascript.rhino.Node.CONTINUE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.DIRECTCALL_PROP",com.google.javascript.rhino.Node.DIRECTCALL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.LABEL_ID_PROP",com.google.javascript.rhino.Node.LABEL_ID_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.ENUM_PROP",com.google.javascript.rhino.Node.ENUM_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.TARGETBLOCK_PROP",com.google.javascript.rhino.Node.TARGETBLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.TEMP_PROP",com.google.javascript.rhino.Node.TEMP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.USES_PROP",com.google.javascript.rhino.Node.USES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.VARS_PROP",com.google.javascript.rhino.Node.VARS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.REGEXP_PROP",com.google.javascript.rhino.Node.REGEXP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.LASTUSE_PROP",com.google.javascript.rhino.Node.LASTUSE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.NAME_PROP",com.google.javascript.rhino.Node.NAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.LEFT",com.google.javascript.rhino.Node.LEFT);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.ATTRIBUTE_FLAG",com.google.javascript.rhino.Node.ATTRIBUTE_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.FINALLY_PROP",com.google.javascript.rhino.Node.FINALLY_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.NON_SPECIALCALL",com.google.javascript.rhino.Node.NON_SPECIALCALL);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.CASEARRAY_PROP",com.google.javascript.rhino.Node.CASEARRAY_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.DESCENDANTS_FLAG",com.google.javascript.rhino.Node.DESCENDANTS_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.CATCH_SCOPE_PROP",com.google.javascript.rhino.Node.CATCH_SCOPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP",com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.CASES_PROP",com.google.javascript.rhino.Node.CASES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.VARIABLE_PROP",com.google.javascript.rhino.Node.VARIABLE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.SKIP_INDEXES_PROP",com.google.javascript.rhino.Node.SKIP_INDEXES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.RIGHT",com.google.javascript.rhino.Node.RIGHT);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_EVAL",com.google.javascript.rhino.Node.SPECIALCALL_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.DEBUGSOURCE_PROP",com.google.javascript.rhino.Node.DEBUGSOURCE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.BREAK_PROP",com.google.javascript.rhino.Node.BREAK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    if (com.google.javascript.rhino.Node.this.last!=null) {
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                    }
                                    if (com.google.javascript.rhino.Node.this.parent!=null) {
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                    }
                                    if (com.google.javascript.rhino.Node.this.next!=null) {
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                    }
                                    if (com.google.javascript.rhino.Node.this.first!=null) {
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                    }
                                    fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectOutput(runtimeAngelicValue);
                                    fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectionEnds();
                                }
                                if (runtimeAngelicValue)
                                    value = java.lang.String.valueOf(x.intValue);

                            }
                            break;
                    }
                    sb.append(value);
                    sb.append(']');
                }
            }
            if (printType) {
                if (jsType != null) {
                    java.lang.String jsTypeString = jsType.toString();
                    if (jsTypeString != null) {
                        sb.append(" : ");
                        sb.append(jsTypeString);
                    }
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        if (com.google.javascript.rhino.Token.printTrees) {
            for (int i = 0; i != level; ++i) {
                sb.append("    ");
            }
            sb.append(n.toString());
            sb.append('\n');
            for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
                com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
            }
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourcePositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourcePositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        public boolean hasNext() {
            return current != null;
        }

        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                public boolean hasNext() {
                    return cur != null;
                }

                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Class getNodeClass(com.google.javascript.rhino.Node n) {
        java.lang.Class c = n.getClass();
        if ((c == com.google.javascript.rhino.FunctionNode.class) || (c == com.google.javascript.rhino.ScriptOrFnNode.class)) {
            return com.google.javascript.rhino.Node.class;
        }
        return c;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public static java.lang.String tokenToName(int token) {
        switch (token) {
            case com.google.javascript.rhino.Token.ERROR :
                return "error";
            case com.google.javascript.rhino.Token.EOF :
                return "eof";
            case com.google.javascript.rhino.Token.EOL :
                return "eol";
            case com.google.javascript.rhino.Token.ENTERWITH :
                return "enterwith";
            case com.google.javascript.rhino.Token.LEAVEWITH :
                return "leavewith";
            case com.google.javascript.rhino.Token.RETURN :
                return "return";
            case com.google.javascript.rhino.Token.GOTO :
                return "goto";
            case com.google.javascript.rhino.Token.IFEQ :
                return "ifeq";
            case com.google.javascript.rhino.Token.IFNE :
                return "ifne";
            case com.google.javascript.rhino.Token.SETNAME :
                return "setname";
            case com.google.javascript.rhino.Token.BITOR :
                return "bitor";
            case com.google.javascript.rhino.Token.BITXOR :
                return "bitxor";
            case com.google.javascript.rhino.Token.BITAND :
                return "bitand";
            case com.google.javascript.rhino.Token.EQ :
                return "eq";
            case com.google.javascript.rhino.Token.NE :
                return "ne";
            case com.google.javascript.rhino.Token.LT :
                return "lt";
            case com.google.javascript.rhino.Token.LE :
                return "le";
            case com.google.javascript.rhino.Token.GT :
                return "gt";
            case com.google.javascript.rhino.Token.GE :
                return "ge";
            case com.google.javascript.rhino.Token.LSH :
                return "lsh";
            case com.google.javascript.rhino.Token.RSH :
                return "rsh";
            case com.google.javascript.rhino.Token.URSH :
                return "ursh";
            case com.google.javascript.rhino.Token.ADD :
                return "add";
            case com.google.javascript.rhino.Token.SUB :
                return "sub";
            case com.google.javascript.rhino.Token.MUL :
                return "mul";
            case com.google.javascript.rhino.Token.DIV :
                return "div";
            case com.google.javascript.rhino.Token.MOD :
                return "mod";
            case com.google.javascript.rhino.Token.BITNOT :
                return "bitnot";
            case com.google.javascript.rhino.Token.NEG :
                return "neg";
            case com.google.javascript.rhino.Token.NEW :
                return "new";
            case com.google.javascript.rhino.Token.DELPROP :
                return "delprop";
            case com.google.javascript.rhino.Token.TYPEOF :
                return "typeof";
            case com.google.javascript.rhino.Token.GETPROP :
                return "getprop";
            case com.google.javascript.rhino.Token.SETPROP :
                return "setprop";
            case com.google.javascript.rhino.Token.GETELEM :
                return "getelem";
            case com.google.javascript.rhino.Token.SETELEM :
                return "setelem";
            case com.google.javascript.rhino.Token.CALL :
                return "call";
            case com.google.javascript.rhino.Token.NAME :
                return "name";
            case com.google.javascript.rhino.Token.NUMBER :
                return "number";
            case com.google.javascript.rhino.Token.STRING :
                return "string";
            case com.google.javascript.rhino.Token.NULL :
                return "null";
            case com.google.javascript.rhino.Token.THIS :
                return "this";
            case com.google.javascript.rhino.Token.FALSE :
                return "false";
            case com.google.javascript.rhino.Token.TRUE :
                return "true";
            case com.google.javascript.rhino.Token.SHEQ :
                return "sheq";
            case com.google.javascript.rhino.Token.SHNE :
                return "shne";
            case com.google.javascript.rhino.Token.REGEXP :
                return "regexp";
            case com.google.javascript.rhino.Token.POS :
                return "pos";
            case com.google.javascript.rhino.Token.BINDNAME :
                return "bindname";
            case com.google.javascript.rhino.Token.THROW :
                return "throw";
            case com.google.javascript.rhino.Token.IN :
                return "in";
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return "instanceof";
            case com.google.javascript.rhino.Token.GETVAR :
                return "getvar";
            case com.google.javascript.rhino.Token.SETVAR :
                return "setvar";
            case com.google.javascript.rhino.Token.TRY :
                return "try";
            case com.google.javascript.rhino.Token.TYPEOFNAME :
                return "typeofname";
            case com.google.javascript.rhino.Token.THISFN :
                return "thisfn";
            case com.google.javascript.rhino.Token.SEMI :
                return "semi";
            case com.google.javascript.rhino.Token.LB :
                return "lb";
            case com.google.javascript.rhino.Token.RB :
                return "rb";
            case com.google.javascript.rhino.Token.LC :
                return "lc";
            case com.google.javascript.rhino.Token.RC :
                return "rc";
            case com.google.javascript.rhino.Token.LP :
                return "lp";
            case com.google.javascript.rhino.Token.RP :
                return "rp";
            case com.google.javascript.rhino.Token.COMMA :
                return "comma";
            case com.google.javascript.rhino.Token.ASSIGN :
                return "assign";
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return "assign_bitor";
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return "assign_bitxor";
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return "assign_bitand";
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return "assign_lsh";
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return "assign_rsh";
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return "assign_ursh";
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return "assign_add";
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return "assign_sub";
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return "assign_mul";
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return "assign_div";
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return "assign_mod";
            case com.google.javascript.rhino.Token.HOOK :
                return "hook";
            case com.google.javascript.rhino.Token.COLON :
                return "colon";
            case com.google.javascript.rhino.Token.OR :
                return "or";
            case com.google.javascript.rhino.Token.AND :
                return "and";
            case com.google.javascript.rhino.Token.INC :
                return "inc";
            case com.google.javascript.rhino.Token.DEC :
                return "dec";
            case com.google.javascript.rhino.Token.DOT :
                return "dot";
            case com.google.javascript.rhino.Token.FUNCTION :
                return "function";
            case com.google.javascript.rhino.Token.EXPORT :
                return "export";
            case com.google.javascript.rhino.Token.IMPORT :
                return "import";
            case com.google.javascript.rhino.Token.IF :
                return "if";
            case com.google.javascript.rhino.Token.ELSE :
                return "else";
            case com.google.javascript.rhino.Token.SWITCH :
                return "switch";
            case com.google.javascript.rhino.Token.CASE :
                return "case";
            case com.google.javascript.rhino.Token.DEFAULT :
                return "default";
            case com.google.javascript.rhino.Token.WHILE :
                return "while";
            case com.google.javascript.rhino.Token.DO :
                return "do";
            case com.google.javascript.rhino.Token.FOR :
                return "for";
            case com.google.javascript.rhino.Token.BREAK :
                return "break";
            case com.google.javascript.rhino.Token.CONTINUE :
                return "continue";
            case com.google.javascript.rhino.Token.VAR :
                return "var";
            case com.google.javascript.rhino.Token.WITH :
                return "with";
            case com.google.javascript.rhino.Token.CATCH :
                return "catch";
            case com.google.javascript.rhino.Token.FINALLY :
                return "finally";
            case com.google.javascript.rhino.Token.RESERVED :
                return "reserved";
            case com.google.javascript.rhino.Token.NOT :
                return "not";
            case com.google.javascript.rhino.Token.VOID :
                return "void";
            case com.google.javascript.rhino.Token.BLOCK :
                return "block";
            case com.google.javascript.rhino.Token.ARRAYLIT :
                return "arraylit";
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return "objectlit";
            case com.google.javascript.rhino.Token.LABEL :
                return "label";
            case com.google.javascript.rhino.Token.TARGET :
                return "target";
            case com.google.javascript.rhino.Token.LOOP :
                return "loop";
            case com.google.javascript.rhino.Token.EXPR_VOID :
                return "expr_void";
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                return "expr_result";
            case com.google.javascript.rhino.Token.JSR :
                return "jsr";
            case com.google.javascript.rhino.Token.SCRIPT :
                return "script";
            case com.google.javascript.rhino.Token.EMPTY :
                return "empty";
            case com.google.javascript.rhino.Token.GET_REF :
                return "get_ref";
            case com.google.javascript.rhino.Token.REF_SPECIAL :
                return "ref_special";
        }
        return ("<unknown=" + token) + ">";
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (com.google.javascript.rhino.Node.getNodeClass(this) != com.google.javascript.rhino.Node.getNodeClass(node))) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if (type == com.google.javascript.rhino.Token.ARRAYLIT) {
            try {
                int[] indices1 = ((int[]) (getProp(com.google.javascript.rhino.Node.SKIP_INDEXES_PROP)));
                int[] indices2 = ((int[]) (node.getProp(com.google.javascript.rhino.Node.SKIP_INDEXES_PROP)));
                if (indices1 == null) {
                    if (indices2 != null) {
                        return false;
                    }
                } else if (indices2 == null) {
                    return false;
                } else if (indices1.length != indices2.length) {
                    return false;
                } else {
                    for (int i = 0; i < indices1.length; i++) {
                        if (indices1[i] != indices2[i]) {
                            return false;
                        }
                    }
                }
            } catch (java.lang.Exception e) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.STRING) {
            int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            if (quoted1 != quoted2) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean hasSideEffects() {
        switch (type) {
            case com.google.javascript.rhino.Token.EXPR_VOID :
            case com.google.javascript.rhino.Token.COMMA :
                if (last != null) {
                    return last.hasSideEffects();
                } else {
                    return true;
                }
            case com.google.javascript.rhino.Token.HOOK :
                if (((first == null) || (first.next == null)) || (first.next.next == null)) {
                    com.google.javascript.rhino.Kit.codeBug();
                }
                return first.next.hasSideEffects() && first.next.next.hasSideEffects();
            case com.google.javascript.rhino.Token.ERROR :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ENTERWITH :
            case com.google.javascript.rhino.Token.LEAVEWITH :
            case com.google.javascript.rhino.Token.RETURN :
            case com.google.javascript.rhino.Token.GOTO :
            case com.google.javascript.rhino.Token.IFEQ :
            case com.google.javascript.rhino.Token.IFNE :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.SETNAME :
            case com.google.javascript.rhino.Token.SETPROP :
            case com.google.javascript.rhino.Token.SETELEM :
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.THROW :
            case com.google.javascript.rhino.Token.RETHROW :
            case com.google.javascript.rhino.Token.SETVAR :
            case com.google.javascript.rhino.Token.CATCH_SCOPE :
            case com.google.javascript.rhino.Token.RETURN_RESULT :
            case com.google.javascript.rhino.Token.SET_REF :
            case com.google.javascript.rhino.Token.DEL_REF :
            case com.google.javascript.rhino.Token.REF_CALL :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SEMI :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.EXPORT :
            case com.google.javascript.rhino.Token.IMPORT :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.ELSE :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.CONST :
            case com.google.javascript.rhino.Token.WITH :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.FINALLY :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.TARGET :
            case com.google.javascript.rhino.Token.LOOP :
            case com.google.javascript.rhino.Token.JSR :
            case com.google.javascript.rhino.Token.SETPROP_OP :
            case com.google.javascript.rhino.Token.SETELEM_OP :
            case com.google.javascript.rhino.Token.LOCAL_BLOCK :
            case com.google.javascript.rhino.Token.SET_REF_OP :
                return true;
            default :
                return false;
        }
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        com.google.javascript.rhino.Kit.codeBug();
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }
}
[113599] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659900246809
GPR[SSUN]-1659900246809
2039291388
GPR[SPVATF]-1659900247004
GPR[EPVATF]-1659900247226
GPR[SPS]-1659900247226
[114516] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedPrototypeProperties:106.
GPR[EPS]-1659900247726
GPR[ESUN]-1659900247727
GPR[SSUN]-1659900247727
2039291388
GPR[SPVATF]-1659900247941
GPR[EPVATF]-1659900248160
GPR[SPS]-1659900248160
GPR[EPS]-1659900254289
GPR[ESUN]-1659900254289
GPR[SSUN]-1659900254289
-1966087783
GPR[ESUN]-1659900254469
GPR[SSUN]-1659900254469
-1966087783
GPR[SPVATF]-1659900254645
GPR[EPVATF]-1659900254662
[121452] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900254663
GPR[EPVATF]-1659900254679
[121469] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900254679
GPR[SSUN]-1659900254679
-1966087783
GPR[SPVATF]-1659900254858
GPR[EPVATF]-1659900254876
[121666] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900254876
GPR[SSUN]-1659900254876
80988634
GPR[ESUN]-1659900255038
GPR[SSUN]-1659900255038
-1966087783
GPR[ESUN]-1659900255211
GPR[SSUN]-1659900255211
-1966087783
GPR[SPVATF]-1659900255386
GPR[EPVATF]-1659900255404
[122194] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659900255404
GPR[EPVATF]-1659900255422
[122212] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900255422
GPR[SSUN]-1659900255422
80988634
GPR[ESUN]-1659900255592
GPR[SSUN]-1659900255592
1803458346
GPR[ESUN]-1659900255810
GPR[SSUN]-1659900255810
1803458346
GPR[SPVATF]-1659900256027
GPR[EPVATF]-1659900256256
GPR[SPS]-1659900256256
GPR[EPS]-1659900287473
GPR[ESUN]-1659900287473
GPR[SSUN]-1659900287473
1803458346
GPR[ESUN]-1659900287711
GPR[SSUN]-1659900287711
1803458346
GPR[ESUN]-1659900287927
GPR[SSUN]-1659900287927
1803458346
GPR[ESUN]-1659900288158
GPR[SSUN]-1659900288158
1803458346
GPR[SPVATF]-1659900288376
GPR[EPVATF]-1659900288615
GPR[SPS]-1659900288615
[155991] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessExternProperties:413.
GPR[EPS]-1659900289201
GPR[ESUN]-1659900289201
GPR[SSUN]-1659900289202
2433571
GPR[SPVATF]-1659900289417
GPR[EPVATF]-1659900289647
GPR[SPS]-1659900289647
[156965] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1078.
GPR[EPS]-1659900290175
GPR[ESUN]-1659900290175
GPR[SSUN]-1659900290175
2433571
GPR[SPVATF]-1659900290394
GPR[EPVATF]-1659900290626
GPR[SPS]-1659900290626
[157970] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1071.
GPR[EPS]-1659900291180
GPR[ESUN]-1659900291180
GPR[SSUN]-1659900291181
1803458346
GPR[SPVATF]-1659900291405
GPR[EPVATF]-1659900292234
GPR[SPS]-1659900292234
GPR[EPS]-1659900337250
GPR[SPVATF]-1659900337250
GPR[EPVATF]-1659900337492
GPR[SPS]-1659900337492
GPR[EPS]-1659900393475
GPR[ESUN]-1659900393475
GPR[SSUN]-1659900393475
1803458346
GPR[ESUN]-1659900393755
GPR[SSUN]-1659900393755
1803458346
GPR[ESUN]-1659900393972
GPR[SSUN]-1659900393972
1803458346
GPR[ESUN]-1659900394194
GPR[SSUN]-1659900394194
1803458346
GPR[SPVATF]-1659900394416
GPR[EPVATF]-1659900394646
GPR[SPS]-1659900394646
GPR[EPS]-1659900554992
GPR[ESUN]-1659900554992
GPR[SSUN]-1659900554992
1803458346
GPR[SPVATF]-1659900555363
GPR[EPVATF]-1659900555588
GPR[SPS]-1659900555588
GPR[EPS]-1659900629974
GPR[SPVATF]-1659900629974
GPR[EPVATF]-1659900630218
GPR[SPS]-1659900630218
GPR[EPS]-1659900704487
GPR[ESUN]-1659900704487
GPR[SSUN]-1659900704487
1803458346
GPR[ESUN]-1659900704885
GPR[SSUN]-1659900704885
1803458346
GPR[SPVATF]-1659900705107
GPR[EPVATF]-1659900705342
GPR[SPS]-1659900705342
[572671] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:207.
GPR[EPS]-1659900705881
GPR[ESUN]-1659900705881
GPR[SSUN]-1659900705881
80988634
GPR[ESUN]-1659900706054
GPR[SSUN]-1659900706054
2039291388
GPR[ESUN]-1659900706249
GPR[SSUN]-1659900706249
2039291388
GPR[SPVATF]-1659900706443
GPR[EPVATF]-1659900706673
GPR[SPS]-1659900706673
[573887] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedPrototypeProperties:110.
GPR[EPS]-1659900707097
GPR[SPVATF]-1659900707098
GPR[EPVATF]-1659900707323
GPR[SPS]-1659900707323
[574540] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RemoveUnusedPrototypeProperties:110.
GPR[EPS]-1659900707750
GPR[ESUN]-1659900707750
GPR[SSUN]-1659900707750
2039291388
GPR[ESUN]-1659900707949
GPR[SSUN]-1659900707949
2039291388
GPR[SPVATF]-1659900708176
GPR[EPVATF]-1659900708406
GPR[SPS]-1659900708406
GPR[EPS]-1659900714415
GPR[SPVATF]-1659900714415
GPR[EPVATF]-1659900714661
GPR[SPS]-1659900714661
GPR[EPS]-1659900730055
GPR[ESUN]-1659900730055
GPR[SSUN]-1659900730055
2039291388
GPR[SPVATF]-1659900730251
GPR[EPVATF]-1659900730485
GPR[SPS]-1659900730485
GPR[EPS]-1659900739280
GPR[ESUN]-1659900739280
GPR[SSUN]-1659900739280
2039291388
GPR[ESUN]-1659900739475
GPR[SSUN]-1659900739475
2039291388
GPR[ESUN]-1659900739666
GPR[SSUN]-1659900739666
2039291388
GPR[SPVATF]-1659900739861
GPR[EPVATF]-1659900740106
GPR[SPS]-1659900740106
GPR[EPS]-1659900749388
GPR[ESUN]-1659900749388
GPR[SSUN]-1659900749388
2039291388
GPR[SPVATF]-1659900749583
GPR[EPVATF]-1659900749839
GPR[SPS]-1659900749839
GPR[EPS]-1659900759134
GPR[ESUN]-1659900759134
GPR[SSUN]-1659900759134
2039291388
GPR[ESUN]-1659900759329
GPR[SSUN]-1659900759329
1803458346
GPR[ESUN]-1659900759598
GPR[SSUN]-1659900759598
1803458346
GPR[SPVATF]-1659900759831
GPR[EPVATF]-1659900760724
GPR[SPS]-1659900760725
GPR[EPS]-1659900812234
GPR[ESUN]-1659900812234
GPR[SSUN]-1659900812234
1803458346
GPR[SPVATF]-1659900812581
GPR[EPVATF]-1659900812812
GPR[SPS]-1659900812812
GPR[EPS]-1659900864265
GPR[ESUN]-1659900864265
GPR[SSUN]-1659900864265
1803458346
GPR[SPVATF]-1659900864489
GPR[EPVATF]-1659900864715
GPR[SPS]-1659900864715
GPR[EPS]-1659901110606
GPR[SPVATF]-1659901110607
GPR[EPVATF]-1659901110857
GPR[SPS]-1659901110857
GPR[EPS]-1659901231428
GPR[ESUN]-1659901231428
GPR[SSUN]-1659901231428
1803458346
GPR[ESUN]-1659901231853
GPR[SSUN]-1659901231853
2433571
GPR[ESUN]-1659901232076
GPR[SSUN]-1659901232076
2433571
GPR[ESUN]-1659901232287
GPR[SSUN]-1659901232287
2433571
GPR[SPVATF]-1659901232504
GPR[EPVATF]-1659901232733
GPR[SPS]-1659901232733
[1100030] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1075.
GPR[EPS]-1659901233240
GPR[ESUN]-1659901233240
GPR[SSUN]-1659901233240
2433571
GPR[SPVATF]-1659901233457
GPR[EPVATF]-1659901233685
GPR[SPS]-1659901233685
[1100991] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1074.
GPR[EPS]-1659901234201
GPR[ESUN]-1659901234201
GPR[SSUN]-1659901234201
2433571
GPR[SPVATF]-1659901234414
GPR[EPVATF]-1659901234648
GPR[SPS]-1659901234648
[1101950] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1073.
GPR[EPS]-1659901235160
GPR[ESUN]-1659901235160
GPR[SSUN]-1659901235160
2433571
GPR[SPVATF]-1659901235381
GPR[EPVATF]-1659901235623
GPR[SPS]-1659901235623
[1102949] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1070.
GPR[EPS]-1659901236159
GPR[ESUN]-1659901236159
GPR[SSUN]-1659901236159
2433571
GPR[ESUN]-1659901236380
GPR[SSUN]-1659901236380
2433571
GPR[SPVATF]-1659901236590
GPR[EPVATF]-1659901236824
GPR[SPS]-1659901236824
[1104135] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1064.
GPR[EPS]-1659901237345
GPR[ESUN]-1659901237345
GPR[SSUN]-1659901237345
2433571
GPR[ESUN]-1659901237558
GPR[SSUN]-1659901237558
2433571
GPR[SPVATF]-1659901237769
GPR[EPVATF]-1659901238017
GPR[SPS]-1659901238017
[1105324] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1056.
GPR[EPS]-1659901238534
GPR[ESUN]-1659901238534
GPR[SSUN]-1659901238534
2433571
GPR[ESUN]-1659901238749
GPR[SSUN]-1659901238749
2433571
GPR[ESUN]-1659901238961
GPR[SSUN]-1659901238961
1803458346
GPR[SPVATF]-1659901239188
GPR[EPVATF]-1659901239419
GPR[SPS]-1659901239419
[1106772] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:215.
GPR[EPS]-1659901239983
GPR[ESUN]-1659901239983
GPR[SSUN]-1659901239983
1803458346
GPR[SPVATF]-1659901240204
GPR[EPVATF]-1659901240452
GPR[SPS]-1659901240452
[1107786] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:299.
GPR[EPS]-1659901240996
GPR[ESUN]-1659901240996
GPR[SSUN]-1659901240996
1803458346
GPR[SPVATF]-1659901241219
GPR[EPVATF]-1659901241457
GPR[SPS]-1659901241457
[1108792] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:228.
GPR[EPS]-1659901242002
GPR[ESUN]-1659901242003
GPR[SSUN]-1659901242003
1803458346
GPR[SPVATF]-1659901242225
GPR[EPVATF]-1659901242462
GPR[SPS]-1659901242462
[1109794] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:225.
GPR[EPS]-1659901243004
GPR[SPVATF]-1659901243004
GPR[EPVATF]-1659901243238
GPR[SPS]-1659901243238
GPR[EPS]-1659901437627
GPR[ESUN]-1659901437627
GPR[SSUN]-1659901437627
80988634
GPR[ESUN]-1659901437963
GPR[SSUN]-1659901437963
1803458346
GPR[SPVATF]-1659901438187
GPR[EPVATF]-1659901438422
GPR[SPS]-1659901438422
[1305762] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:230.
GPR[EPS]-1659901438972
GPR[SPVATF]-1659901439005
GPR[EPVATF]-1659901439245
GPR[SPS]-1659901439245
[1306571] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:230.
GPR[EPS]-1659901439781
GPR[ESUN]-1659901439781
GPR[SSUN]-1659901439781
1803458346
GPR[SPVATF]-1659901440005
GPR[EPVATF]-1659901440248
GPR[SPS]-1659901440248
GPR[EPS]-1659901647613
GPR[SPVATF]-1659901647613
GPR[EPVATF]-1659901647872
GPR[SPS]-1659901647872
GPR[EPS]-1659902100246
GPR[ESUN]-1659902100246
GPR[SSUN]-1659902100246
1803458346
GPR[ESUN]-1659902100634
GPR[SSUN]-1659902100634
-718432441
GPR[SPVATF]-1659902100847
GPR[EPVATF]-1659902101768
GPR[SPS]-1659902101768
[1969279] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:119.
GPR[EPS]-1659902102489
GPR[ESUN]-1659902102489
GPR[SSUN]-1659902102489
1803458346
GPR[SPVATF]-1659902102748
GPR[EPVATF]-1659902103003
GPR[SPS]-1659902103003
[1970323] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties:147.
GPR[EPS]-1659902103533
GPR[ESUN]-1659902103533
GPR[SSUN]-1659902103533
1803458346
GPR[ESUN]-1659902103752
GPR[SSUN]-1659902103752
1803458346
GPR[SPVATF]-1659902103975
GPR[EPVATF]-1659902104220
GPR[SPS]-1659902104220
[1971535] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessExternProperties:412.
GPR[EPS]-1659902104745
GPR[SPVATF]-1659902104745
GPR[EPVATF]-1659902104978
GPR[SPS]-1659902104979
[1972301] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessExternProperties:412.
GPR[EPS]-1659902105511
GPR[ESUN]-1659902105511
GPR[SSUN]-1659902105511
1803458346
GPR[ESUN]-1659902105733
GPR[SSUN]-1659902105733
1803458346
GPR[SPVATF]-1659902105963
GPR[EPVATF]-1659902106210
GPR[SPS]-1659902106210
[1973541] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:406.
GPR[EPS]-1659902106751
GPR[ESUN]-1659902106751
GPR[SSUN]-1659902106751
1803458346
GPR[ESUN]-1659902106969
GPR[SSUN]-1659902106969
1803458346
GPR[SPVATF]-1659902107189
GPR[EPVATF]-1659902107431
GPR[SPS]-1659902107431
[1974750] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:259.
GPR[EPS]-1659902107960
GPR[ESUN]-1659902107960
GPR[SSUN]-1659902107960
1803458346
GPR[SPVATF]-1659902108186
GPR[EPVATF]-1659902108414
GPR[SPS]-1659902108414
[1975741] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:360.
GPR[EPS]-1659902108951
GPR[ESUN]-1659902108951
GPR[SSUN]-1659902108951
1803458346
GPR[SPVATF]-1659902109176
GPR[EPVATF]-1659902109404
GPR[SPS]-1659902109404
[1976734] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:355.
GPR[EPS]-1659902109944
GPR[SPVATF]-1659902109945
GPR[EPVATF]-1659902110179
GPR[SPS]-1659902110179
[1977527] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:355.
GPR[EPS]-1659902110737
GPR[ESUN]-1659902110737
GPR[SSUN]-1659902110737
1803458346
GPR[SPVATF]-1659902110958
GPR[EPVATF]-1659902111185
GPR[SPS]-1659902111185
[1978512] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:350.
GPR[EPS]-1659902111722
GPR[ESUN]-1659902111722
GPR[SSUN]-1659902111722
1803458346
GPR[ESUN]-1659902111943
GPR[SSUN]-1659902111943
1803458346
GPR[SPVATF]-1659902112160
GPR[EPVATF]-1659902112390
GPR[SPS]-1659902112390
[1979712] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:344.
GPR[EPS]-1659902112922
GPR[SPVATF]-1659902112923
GPR[EPVATF]-1659902113149
GPR[SPS]-1659902113149
[1980471] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:344.
GPR[EPS]-1659902113681
GPR[ESUN]-1659902113681
GPR[SSUN]-1659902113681
1803458346
GPR[ESUN]-1659902113915
GPR[SSUN]-1659902113915
1803458346
GPR[ESUN]-1659902114149
GPR[SSUN]-1659902114149
1803458346
GPR[SPVATF]-1659902114362
GPR[EPVATF]-1659902114591
GPR[SPS]-1659902114591
[1981969] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:298.
GPR[EPS]-1659902115179
GPR[SPVATF]-1659902115180
GPR[EPVATF]-1659902115406
GPR[SPS]-1659902115406
[1982731] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:298.
GPR[EPS]-1659902115941
GPR[ESUN]-1659902115941
GPR[SSUN]-1659902115941
1803458346
GPR[SPVATF]-1659902116159
GPR[EPVATF]-1659902116391
GPR[SPS]-1659902116391
GPR[EPS]-1659902530440
GPR[ESUN]-1659902530440
GPR[SSUN]-1659902530440
1803458346
GPR[SPVATF]-1659902530832
GPR[EPVATF]-1659902531070
GPR[SPS]-1659902531070
[4197626] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[SPVATF]-1659904330840
GPR[EPVATF]-1659904331123
GPR[SPS]-1659904331124
[5997631] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[ESUN]-1659906130841
GPR[SSUN]-1659906130841
1803458346
GPR[SPVATF]-1659906131231
GPR[EPVATF]-1659906131475
GPR[SPS]-1659906131475
[5998857] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:293.
GPR[EPS]-1659906132067
GPR[ESUN]-1659906132067
GPR[SSUN]-1659906132067
1803458346
GPR[SPVATF]-1659906132297
GPR[EPVATF]-1659906132551
GPR[SPS]-1659906132551
[5999936] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:292.
GPR[EPS]-1659906133146
GPR[ESUN]-1659906133146
GPR[SSUN]-1659906133147
1803458346
GPR[ESUN]-1659906133379
GPR[SSUN]-1659906133379
1803458346
GPR[ESUN]-1659906133608
GPR[SSUN]-1659906133608
1803458346
GPR[SPVATF]-1659906133834
GPR[EPVATF]-1659906134070
GPR[SPS]-1659906134070
[6001443] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:257.
GPR[EPS]-1659906134653
GPR[SPVATF]-1659906134654
GPR[EPVATF]-1659906134890
GPR[SPS]-1659906134890
[6002322] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:257.
GPR[EPS]-1659906135532
GPR[ESUN]-1659906135532
GPR[SSUN]-1659906135532
1803458346
GPR[SPVATF]-1659906135765
GPR[EPVATF]-1659906136005
GPR[SPS]-1659906136005
[6004118] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:256.
GPR[EPS]-1659906137328
GPR[SPVATF]-1659906137328
GPR[EPVATF]-1659906137562
GPR[SPS]-1659906137562
[6004972] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:256.
GPR[EPS]-1659906138182
GPR[ESUN]-1659906138182
GPR[SSUN]-1659906138183
1803458346
GPR[SPVATF]-1659906138413
GPR[EPVATF]-1659906138730
GPR[SPS]-1659906138730
[6006107] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:214.
GPR[EPS]-1659906139317
GPR[SPVATF]-1659906139317
GPR[EPVATF]-1659906139556
GPR[SPS]-1659906139556
[6006935] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:214.
GPR[EPS]-1659906140145
GPR[ESUN]-1659906140145
GPR[SSUN]-1659906140145
1803458346
GPR[SPVATF]-1659906140375
GPR[EPVATF]-1659906140614
GPR[SPS]-1659906140614
[6007988] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:213.
GPR[EPS]-1659906141198
GPR[ESUN]-1659906141198
GPR[SSUN]-1659906141198
1803458346
GPR[ESUN]-1659906141426
GPR[SSUN]-1659906141426
1803458346
GPR[ESUN]-1659906141657
GPR[SSUN]-1659906141657
2433571
GPR[SPVATF]-1659906141888
GPR[EPVATF]-1659906142121
GPR[SPS]-1659906142121
[6009525] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:937.
GPR[EPS]-1659906142735
GPR[ESUN]-1659906142735
GPR[SSUN]-1659906142735
2433571
GPR[SPVATF]-1659906142964
GPR[EPVATF]-1659906143199
GPR[SPS]-1659906143199
[6010591] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:936.
GPR[EPS]-1659906143801
GPR[ESUN]-1659906143801
GPR[SSUN]-1659906143801
1803458346
GPR[SPVATF]-1659906144033
GPR[EPVATF]-1659906144271
GPR[SPS]-1659906144271
[6011655] ERROR ConstraintModelBuilder - Unable to compile the change: 
class AnalyzePrototypeProperties implements com.google.javascript.jscomp.CompilerPass {
    private final com.google.javascript.jscomp.AnalyzePrototypeProperties.SymbolType PROPERTY = com.google.javascript.jscomp.AnalyzePrototypeProperties.SymbolType.PROPERTY;

    private final com.google.javascript.jscomp.AnalyzePrototypeProperties.SymbolType VAR = com.google.javascript.jscomp.AnalyzePrototypeProperties.SymbolType.VAR;

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final boolean canModifyExterns;

    private final boolean anchorUnusedVars;

    private final com.google.javascript.jscomp.JSModuleGraph moduleGraph;

    private final com.google.javascript.jscomp.JSModule firstModule;

    private static final java.util.Set<java.lang.String> IMPLICITLY_USED_PROPERTIES = com.google.common.collect.ImmutableSet.of("length", "toString", "valueOf");

    private final com.google.javascript.jscomp.graph.LinkedDirectedGraph<com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo, com.google.javascript.jscomp.JSModule> symbolGraph = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();

    private final com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo globalNode = new com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo("[global]");

    private final com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo externNode = new com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo("[extern]");

    private final com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo anonymousNode = new com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo("[anonymous]");

    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo> propertyNameInfo = com.google.common.collect.Maps.newHashMap();

    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo> varNameInfo = com.google.common.collect.Maps.newHashMap();

    AnalyzePrototypeProperties(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.JSModuleGraph moduleGraph, boolean canModifyExterns, boolean anchorUnusedVars) {
        this.compiler = compiler;
        this.moduleGraph = moduleGraph;
        this.canModifyExterns = canModifyExterns;
        this.anchorUnusedVars = anchorUnusedVars;
        if (moduleGraph != null) {
            firstModule = moduleGraph.getRootModule();
        } else {
            firstModule = null;
        }
        globalNode.markReference(null);
        externNode.markReference(null);
        symbolGraph.createNode(globalNode);
        symbolGraph.createNode(externNode);
        for (java.lang.String property : com.google.javascript.jscomp.AnalyzePrototypeProperties.IMPLICITLY_USED_PROPERTIES) {
            com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo nameInfo = getNameInfoForName(property, PROPERTY);
            if (moduleGraph == null) {
                symbolGraph.connect(externNode, null, nameInfo);
            } else {
                for (com.google.javascript.jscomp.JSModule module : moduleGraph.getAllModules()) {
                    symbolGraph.connect(externNode, module, nameInfo);
                }
            }
        }
    }

    public void process(com.google.javascript.rhino.Node externRoot, com.google.javascript.rhino.Node root) {
        if (!canModifyExterns) {
            com.google.javascript.jscomp.NodeTraversal.traverse(compiler, externRoot, new com.google.javascript.jscomp.AnalyzePrototypeProperties.ProcessExternProperties());
        }
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, new com.google.javascript.jscomp.AnalyzePrototypeProperties.ProcessProperties());
        com.google.javascript.jscomp.graph.FixedPointGraphTraversal<com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo, com.google.javascript.jscomp.JSModule> t = com.google.javascript.jscomp.graph.FixedPointGraphTraversal.newTraversal(new com.google.javascript.jscomp.AnalyzePrototypeProperties.PropagateReferences());
        t.computeFixedPoint(symbolGraph, com.google.common.collect.Sets.newHashSet(externNode, globalNode));
    }

    public java.util.Collection<com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo> getAllNameInfo() {
        java.util.List<com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo> result = com.google.common.collect.Lists.newArrayList(propertyNameInfo.values());
        result.addAll(varNameInfo.values());
        return result;
    }

    private com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo getNameInfoForName(java.lang.String name, com.google.javascript.jscomp.AnalyzePrototypeProperties.SymbolType type) {
        java.util.Map<java.lang.String, com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo> map = (type == PROPERTY) ? propertyNameInfo : varNameInfo;
        if (map.containsKey(name)) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(83).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anchorUnusedVars",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anchorUnusedVars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.symbolGraph",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.symbolGraph);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.moduleGraph",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.moduleGraph);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.IMPLICITLY_USED_PROPERTIES",com.google.javascript.jscomp.AnalyzePrototypeProperties.IMPLICITLY_USED_PROPERTIES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.firstModule",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.firstModule);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.PROPERTY",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.VAR",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.VAR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.canModifyExterns",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.canModifyExterns);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.compiler",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("name",name);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.varNameInfo",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.varNameInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.propertyNameInfo",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.propertyNameInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("map",map);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode);} catch (Exception ex1) {ex1.printStackTrace();};
                if (com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode.getDeepestCommonModuleRef()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode.getDeepestCommonModuleRef());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode.toString()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode.toString());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode.isReferenced()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode.isReferenced());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode.getDeclarations()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode.getDeclarations());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode.readsClosureVariables()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode.readsClosureVariables());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode.getDeepestCommonModuleRef()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode.getDeepestCommonModuleRef());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode.toString()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode.toString());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode.isReferenced()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode.isReferenced());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode.getDeclarations()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode.getDeclarations());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode.readsClosureVariables()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode.readsClosureVariables());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode.getDeepestCommonModuleRef()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode.getDeepestCommonModuleRef());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode.toString()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode.toString());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode.isReferenced()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode.isReferenced());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode.getDeclarations()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode.getDeclarations());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode.readsClosureVariables()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode.readsClosureVariables());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectionEnds();
            }
            if (runtimeAngelicValue)
                return map.get(name);

        } else {
            com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo nameInfo = new com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo(name);
            map.put(name, nameInfo);
            symbolGraph.createNode(nameInfo);
            return nameInfo;
        }
    }

    private class ProcessProperties implements com.google.javascript.jscomp.NodeTraversal.ScopedCallback {
        private java.util.Stack<com.google.javascript.jscomp.AnalyzePrototypeProperties.NameContext> symbolStack = new java.util.Stack<com.google.javascript.jscomp.AnalyzePrototypeProperties.NameContext>();

        private ProcessProperties() {
            symbolStack.push(new com.google.javascript.jscomp.AnalyzePrototypeProperties.NameContext(globalNode));
        }

        @java.lang.Override
        public void enterScope(com.google.javascript.jscomp.NodeTraversal t) {
            symbolStack.peek().scope = t.getScope();
        }

        @java.lang.Override
        public void exitScope(com.google.javascript.jscomp.NodeTraversal t) {
        }

        public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            if (isPrototypePropertyAssign(n)) {
                symbolStack.push(new com.google.javascript.jscomp.AnalyzePrototypeProperties.NameContext(getNameInfoForName(n.getFirstChild().getLastChild().getString(), PROPERTY)));
            } else if (isGlobalFunctionDeclaration(t, n)) {
                java.lang.String name = (parent.getType() == com.google.javascript.rhino.Token.NAME) ? parent.getString() : n.getFirstChild().getString();
                symbolStack.push(new com.google.javascript.jscomp.AnalyzePrototypeProperties.NameContext(getNameInfoForName(name, VAR)));
            } else if (com.google.javascript.jscomp.NodeUtil.isFunction(n)) {
                symbolStack.push(new com.google.javascript.jscomp.AnalyzePrototypeProperties.NameContext(anonymousNode));
            }
            return true;
        }

        public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            if (n.getType() == com.google.javascript.rhino.Token.GETPROP) {
                java.lang.String propName = n.getFirstChild().getNext().getString();
                if (propName.equals("prototype")) {
                    processPrototypeParent(t, parent);
                } else if (compiler.getCodingConvention().isExported(propName)) {
                    addGlobalUseOfSymbol(propName, t.getModule(), PROPERTY);
                } else {
                    addSymbolUse(propName, t.getModule(), PROPERTY);
                }
            } else if ((n.getType() == com.google.javascript.rhino.Token.OBJECTLIT) && (!(((parent.getType() == com.google.javascript.rhino.Token.ASSIGN) && (parent.getFirstChild().getType() == com.google.javascript.rhino.Token.GETPROP)) && parent.getFirstChild().getLastChild().getString().equals("prototype")))) {
                for (com.google.javascript.rhino.Node propNameNode = n.getFirstChild(); propNameNode != null; propNameNode = propNameNode.getNext()) {
                    if (!propNameNode.isQuotedString()) {
                        addSymbolUse(propNameNode.getString(), t.getModule(), PROPERTY);
                    }
                }
            } else if (n.getType() == com.google.javascript.rhino.Token.NAME) {
                java.lang.String name = n.getString();
                com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(name);
                if (var != null) {
                    if (var.isGlobal()) {
                        if ((var.getInitialValue() != null) && (var.getInitialValue().getType() == com.google.javascript.rhino.Token.FUNCTION)) {
                            if (t.inGlobalScope()) {
                                if (!processGlobalFunctionDeclaration(t, n, parent, parent.getParent())) {
                                    addGlobalUseOfSymbol(name, t.getModule(), VAR);
                                }
                            } else {
                                addSymbolUse(name, t.getModule(), VAR);
                            }
                        }
                    } else if (var.getScope() != t.getScope()) {
                        for (int i = symbolStack.size() - 1; i >= 0; i--) {
                            com.google.javascript.jscomp.AnalyzePrototypeProperties.NameContext context = symbolStack.get(i);
                            context.name.readClosureVariables = true;
                            if (context.scope == var.getScope()) {
                                break;
                            }
                        }
                    }
                }
            }
            if ((isPrototypePropertyAssign(n) || isGlobalFunctionDeclaration(t, n)) || com.google.javascript.jscomp.NodeUtil.isFunction(n)) {
                symbolStack.pop();
            }
        }

        private void addSymbolUse(java.lang.String name, com.google.javascript.jscomp.JSModule module, com.google.javascript.jscomp.AnalyzePrototypeProperties.SymbolType type) {
            com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo info = getNameInfoForName(name, type);
            com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo def = null;
            for (int i = symbolStack.size() - 1; i >= 0; i--) {
                def = symbolStack.get(i).name;
                if (def != anonymousNode) {
                    break;
                }
            }
            if (!def.equals(info)) {
                symbolGraph.connect(def, module, info);
            }
        }

        private boolean isGlobalFunctionDeclaration(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
            return t.inGlobalScope() && (com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) || ((n.getType() == com.google.javascript.rhino.Token.FUNCTION) && (n.getParent().getType() == com.google.javascript.rhino.Token.NAME)));
        }

        private boolean isPrototypePropertyAssign(com.google.javascript.rhino.Node assign) {
            com.google.javascript.rhino.Node n = assign.getFirstChild();
            if (((n != null) && com.google.javascript.jscomp.NodeUtil.isVarOrSimpleAssignLhs(n, assign)) && (n.getType() == com.google.javascript.rhino.Token.GETPROP)) {
                boolean isChainedProperty = n.getFirstChild().getType() == com.google.javascript.rhino.Token.GETPROP;
                if (isChainedProperty) {
                    com.google.javascript.rhino.Node child = n.getFirstChild().getFirstChild().getNext();
                    if ((child.getType() == com.google.javascript.rhino.Token.STRING) && child.getString().equals("prototype")) {
                        return true;
                    }
                }
            }
            return false;
        }

        private boolean processGlobalFunctionDeclaration(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node gramps) {
            com.google.javascript.rhino.Node firstChild = nameNode.getFirstChild();
            if (isGlobalFunctionDeclaration(t, parent) || ((firstChild != null) && isGlobalFunctionDeclaration(t, firstChild))) {
                java.lang.String name = nameNode.getString();
                getNameInfoForName(name, VAR).getDeclarations().add(new com.google.javascript.jscomp.AnalyzePrototypeProperties.GlobalFunction(nameNode, parent, gramps, t.getModule()));
                if (compiler.getCodingConvention().isExported(name) || anchorUnusedVars) {
                    addGlobalUseOfSymbol(name, t.getModule(), VAR);
                }
                return true;
            }
            return false;
        }

        private void processPrototypeParent(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
            switch (n.getType()) {
                case com.google.javascript.rhino.Token.GETPROP :
                    com.google.javascript.rhino.Node dest = n.getFirstChild().getNext();
                    com.google.javascript.rhino.Node parent = n.getParent();
                    com.google.javascript.rhino.Node grandParent = parent.getParent();
                    if (((dest.getType() == com.google.javascript.rhino.Token.STRING) && com.google.javascript.jscomp.NodeUtil.isExprAssign(grandParent)) && com.google.javascript.jscomp.NodeUtil.isVarOrSimpleAssignLhs(n, parent)) {
                        java.lang.String name = dest.getString();
                        com.google.javascript.jscomp.AnalyzePrototypeProperties.Property prop = new com.google.javascript.jscomp.AnalyzePrototypeProperties.AssignmentProperty(grandParent, t.getModule());
                        getNameInfoForName(name, PROPERTY).getDeclarations().add(prop);
                    }
                    break;
                case com.google.javascript.rhino.Token.ASSIGN :
                    com.google.javascript.rhino.Node map = n.getFirstChild().getNext();
                    if (map.getType() == com.google.javascript.rhino.Token.OBJECTLIT) {
                        for (com.google.javascript.rhino.Node key = map.getFirstChild(); key != null; key = key.getNext()) {
                            java.lang.String name = key.getString();
                            com.google.javascript.jscomp.AnalyzePrototypeProperties.Property prop = new com.google.javascript.jscomp.AnalyzePrototypeProperties.LiteralProperty(key, key.getFirstChild(), map, n, t.getModule());
                            getNameInfoForName(name, PROPERTY).getDeclarations().add(prop);
                        }
                    }
                    break;
            }
        }

        private void addGlobalUseOfSymbol(java.lang.String name, com.google.javascript.jscomp.JSModule module, com.google.javascript.jscomp.AnalyzePrototypeProperties.SymbolType type) {
            symbolGraph.connect(globalNode, module, getNameInfoForName(name, type));
        }
    }

    private class ProcessExternProperties extends com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback {
        public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            if (n.getType() == com.google.javascript.rhino.Token.GETPROP) {
                symbolGraph.connect(externNode, firstModule, getNameInfoForName(n.getLastChild().getString(), PROPERTY));
            }
        }
    }

    private class PropagateReferences implements com.google.javascript.jscomp.graph.FixedPointGraphTraversal.EdgeCallback<com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo, com.google.javascript.jscomp.JSModule> {
        public boolean traverseEdge(com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo start, com.google.javascript.jscomp.JSModule edge, com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo dest) {
            if (start.isReferenced()) {
                com.google.javascript.jscomp.JSModule startModule = start.getDeepestCommonModuleRef();
                if ((startModule != null) && moduleGraph.dependsOn(startModule, edge)) {
                    return dest.markReference(startModule);
                } else {
                    return dest.markReference(edge);
                }
            }
            return false;
        }
    }

    interface Symbol {
        public abstract void remove();

        public abstract com.google.javascript.jscomp.JSModule getModule();
    }

    private enum SymbolType {

        PROPERTY,
        VAR;}

    class GlobalFunction implements com.google.javascript.jscomp.AnalyzePrototypeProperties.Symbol {
        private final com.google.javascript.rhino.Node nameNode;

        private final com.google.javascript.jscomp.JSModule module;

        GlobalFunction(com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node gramps, com.google.javascript.jscomp.JSModule module) {
            com.google.common.base.Preconditions.checkState((parent.getType() == com.google.javascript.rhino.Token.VAR) || com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(parent));
            this.nameNode = nameNode;
            this.module = module;
        }

        @java.lang.Override
        public void remove() {
            com.google.javascript.rhino.Node parent = nameNode.getParent();
            if ((parent.getType() == com.google.javascript.rhino.Token.FUNCTION) || parent.hasOneChild()) {
                com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
            } else {
                com.google.common.base.Preconditions.checkState(parent.getType() == com.google.javascript.rhino.Token.VAR);
                parent.removeChild(nameNode);
            }
        }

        @java.lang.Override
        public com.google.javascript.jscomp.JSModule getModule() {
            return module;
        }

        public com.google.javascript.rhino.Node getFunctionNode() {
            com.google.javascript.rhino.Node parent = nameNode.getParent();
            if (com.google.javascript.jscomp.NodeUtil.isFunction(parent)) {
                return parent;
            } else {
                return nameNode.getChildAtIndex(1);
            }
        }
    }

    interface Property extends com.google.javascript.jscomp.AnalyzePrototypeProperties.Symbol {
        public abstract com.google.javascript.rhino.Node getPrototype();

        public abstract com.google.javascript.rhino.Node getValue();
    }

    static class AssignmentProperty implements com.google.javascript.jscomp.AnalyzePrototypeProperties.Property {
        private final com.google.javascript.rhino.Node exprNode;

        private final com.google.javascript.jscomp.JSModule module;

        AssignmentProperty(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.JSModule module) {
            this.exprNode = node;
            this.module = module;
        }

        @java.lang.Override
        public void remove() {
            com.google.javascript.jscomp.NodeUtil.removeChild(exprNode.getParent(), exprNode);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getPrototype() {
            return getAssignNode().getFirstChild().getFirstChild();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getValue() {
            return getAssignNode().getLastChild();
        }

        private com.google.javascript.rhino.Node getAssignNode() {
            return exprNode.getFirstChild();
        }

        @java.lang.Override
        public com.google.javascript.jscomp.JSModule getModule() {
            return module;
        }
    }

    static class LiteralProperty implements com.google.javascript.jscomp.AnalyzePrototypeProperties.Property {
        private final com.google.javascript.rhino.Node key;

        private final com.google.javascript.rhino.Node value;

        private final com.google.javascript.rhino.Node map;

        private final com.google.javascript.rhino.Node assign;

        private final com.google.javascript.jscomp.JSModule module;

        LiteralProperty(com.google.javascript.rhino.Node key, com.google.javascript.rhino.Node value, com.google.javascript.rhino.Node map, com.google.javascript.rhino.Node assign, com.google.javascript.jscomp.JSModule module) {
            this.key = key;
            this.value = value;
            this.map = map;
            this.assign = assign;
            this.module = module;
        }

        @java.lang.Override
        public void remove() {
            map.removeChild(key);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getPrototype() {
            return assign.getFirstChild();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getValue() {
            return value;
        }

        @java.lang.Override
        public com.google.javascript.jscomp.JSModule getModule() {
            return module;
        }
    }

    private class NameContext {
        final com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo name;

        com.google.javascript.jscomp.Scope scope;

        NameContext(com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo name) {
            this.name = name;
        }
    }

    class NameInfo {
        final java.lang.String name;

        private boolean referenced = false;

        private final java.util.Deque<com.google.javascript.jscomp.AnalyzePrototypeProperties.Symbol> declarations = new java.util.ArrayDeque<com.google.javascript.jscomp.AnalyzePrototypeProperties.Symbol>();

        private com.google.javascript.jscomp.JSModule deepestCommonModuleRef = null;

        private boolean readClosureVariables = false;

        NameInfo(java.lang.String name) {
            this.name = name;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return name;
        }

        boolean isReferenced() {
            return referenced;
        }

        boolean readsClosureVariables() {
            return readClosureVariables;
        }

        boolean markReference(com.google.javascript.jscomp.JSModule module) {
            boolean hasChanged = false;
            if (!referenced) {
                referenced = true;
                hasChanged = true;
            }
            if (moduleGraph != null) {
                com.google.javascript.jscomp.JSModule originalDeepestCommon = deepestCommonModuleRef;
                if (deepestCommonModuleRef == null) {
                    deepestCommonModuleRef = module;
                } else {
                    deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive(deepestCommonModuleRef, module);
                }
                if (originalDeepestCommon != deepestCommonModuleRef) {
                    hasChanged = true;
                }
            }
            return hasChanged;
        }

        com.google.javascript.jscomp.JSModule getDeepestCommonModuleRef() {
            return deepestCommonModuleRef;
        }

        java.util.Deque<com.google.javascript.jscomp.AnalyzePrototypeProperties.Symbol> getDeclarations() {
            return declarations;
        }
    }
}
[6011656] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659906144866
GPR[SSUN]-1659906144866
1803458346
GPR[SPVATF]-1659906145094
GPR[EPVATF]-1659906145329
GPR[SPS]-1659906145329
[6012705] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:254.
GPR[EPS]-1659906145916
GPR[SPVATF]-1659906145916
GPR[EPVATF]-1659906146145
GPR[SPS]-1659906146145
[6013516] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:254.
GPR[EPS]-1659906146727
GPR[ESUN]-1659906146727
GPR[SSUN]-1659906146727
1803458346
GPR[SPVATF]-1659906146957
GPR[EPVATF]-1659906147187
GPR[SPS]-1659906147187
[6014587] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:284.
GPR[EPS]-1659906147797
GPR[ESUN]-1659906147797
GPR[SSUN]-1659906147797
1803458346
GPR[SPVATF]-1659906148031
GPR[EPVATF]-1659906148266
GPR[SPS]-1659906148266
[6015641] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:253.
GPR[EPS]-1659906148851
GPR[SPVATF]-1659906148851
GPR[EPVATF]-1659906149087
GPR[SPS]-1659906149087
[6016462] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:253.
GPR[EPS]-1659906149672
GPR[ESUN]-1659906149672
GPR[SSUN]-1659906149672
1803458346
GPR[SPVATF]-1659906149900
GPR[EPVATF]-1659906150139
GPR[SPS]-1659906150139
[6017500] ERROR ConstraintModelBuilder - Unable to compile the change: 
class AnalyzePrototypeProperties implements com.google.javascript.jscomp.CompilerPass {
    private final com.google.javascript.jscomp.AnalyzePrototypeProperties.SymbolType PROPERTY = com.google.javascript.jscomp.AnalyzePrototypeProperties.SymbolType.PROPERTY;

    private final com.google.javascript.jscomp.AnalyzePrototypeProperties.SymbolType VAR = com.google.javascript.jscomp.AnalyzePrototypeProperties.SymbolType.VAR;

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final boolean canModifyExterns;

    private final boolean anchorUnusedVars;

    private final com.google.javascript.jscomp.JSModuleGraph moduleGraph;

    private final com.google.javascript.jscomp.JSModule firstModule;

    private static final java.util.Set<java.lang.String> IMPLICITLY_USED_PROPERTIES = com.google.common.collect.ImmutableSet.of("length", "toString", "valueOf");

    private final com.google.javascript.jscomp.graph.LinkedDirectedGraph<com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo, com.google.javascript.jscomp.JSModule> symbolGraph = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();

    private final com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo globalNode = new com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo("[global]");

    private final com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo externNode = new com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo("[extern]");

    private final com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo anonymousNode = new com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo("[anonymous]");

    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo> propertyNameInfo = com.google.common.collect.Maps.newHashMap();

    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo> varNameInfo = com.google.common.collect.Maps.newHashMap();

    AnalyzePrototypeProperties(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.JSModuleGraph moduleGraph, boolean canModifyExterns, boolean anchorUnusedVars) {
        this.compiler = compiler;
        this.moduleGraph = moduleGraph;
        this.canModifyExterns = canModifyExterns;
        this.anchorUnusedVars = anchorUnusedVars;
        if (moduleGraph != null) {
            firstModule = moduleGraph.getRootModule();
        } else {
            firstModule = null;
        }
        globalNode.markReference(null);
        externNode.markReference(null);
        symbolGraph.createNode(globalNode);
        symbolGraph.createNode(externNode);
        for (java.lang.String property : com.google.javascript.jscomp.AnalyzePrototypeProperties.IMPLICITLY_USED_PROPERTIES) {
            com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo nameInfo = getNameInfoForName(property, PROPERTY);
            if (moduleGraph == null) {
                symbolGraph.connect(externNode, null, nameInfo);
            } else {
                for (com.google.javascript.jscomp.JSModule module : moduleGraph.getAllModules()) {
                    symbolGraph.connect(externNode, module, nameInfo);
                }
            }
        }
    }

    public void process(com.google.javascript.rhino.Node externRoot, com.google.javascript.rhino.Node root) {
        if (!canModifyExterns) {
            com.google.javascript.jscomp.NodeTraversal.traverse(compiler, externRoot, new com.google.javascript.jscomp.AnalyzePrototypeProperties.ProcessExternProperties());
        }
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, new com.google.javascript.jscomp.AnalyzePrototypeProperties.ProcessProperties());
        com.google.javascript.jscomp.graph.FixedPointGraphTraversal<com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo, com.google.javascript.jscomp.JSModule> t = com.google.javascript.jscomp.graph.FixedPointGraphTraversal.newTraversal(new com.google.javascript.jscomp.AnalyzePrototypeProperties.PropagateReferences());
        t.computeFixedPoint(symbolGraph, com.google.common.collect.Sets.newHashSet(externNode, globalNode));
    }

    public java.util.Collection<com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo> getAllNameInfo() {
        java.util.List<com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo> result = com.google.common.collect.Lists.newArrayList(propertyNameInfo.values());
        result.addAll(varNameInfo.values());
        return result;
    }

    private com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo getNameInfoForName(java.lang.String name, com.google.javascript.jscomp.AnalyzePrototypeProperties.SymbolType type) {
        java.util.Map<java.lang.String, com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo> map = (type == PROPERTY) ? propertyNameInfo : varNameInfo;
        if (map.containsKey(name)) {
            return map.get(name);
        } else {
            com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo nameInfo = new com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo(name);
            map.put(name, nameInfo);
            symbolGraph.createNode(nameInfo);
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(89).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anchorUnusedVars",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anchorUnusedVars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("nameInfo",nameInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.symbolGraph",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.symbolGraph);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.moduleGraph",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.moduleGraph);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.IMPLICITLY_USED_PROPERTIES",com.google.javascript.jscomp.AnalyzePrototypeProperties.IMPLICITLY_USED_PROPERTIES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.firstModule",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.firstModule);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.PROPERTY",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.VAR",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.VAR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.canModifyExterns",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.canModifyExterns);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.compiler",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("name",name);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.varNameInfo",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.varNameInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.propertyNameInfo",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.propertyNameInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("map",map);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode);} catch (Exception ex1) {ex1.printStackTrace();};
                if (com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode.getDeepestCommonModuleRef()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode.getDeepestCommonModuleRef());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode.toString()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode.toString());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode.isReferenced()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode.isReferenced());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode.getDeclarations()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode.getDeclarations());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode.readsClosureVariables()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.anonymousNode.readsClosureVariables());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode.getDeepestCommonModuleRef()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode.getDeepestCommonModuleRef());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode.toString()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode.toString());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode.isReferenced()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode.isReferenced());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode.getDeclarations()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode.getDeclarations());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode.readsClosureVariables()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.globalNode.readsClosureVariables());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode.getDeepestCommonModuleRef()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode.getDeepestCommonModuleRef());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode.toString()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode.toString());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode.isReferenced()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode.isReferenced());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode.getDeclarations()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode.getDeclarations());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectInput("com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode.readsClosureVariables()",com.google.javascript.jscomp.AnalyzePrototypeProperties.this.externNode.readsClosureVariables());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectionEnds();
            }
            if (runtimeAngelicValue)
                return nameInfo;

        }
    }

    private class ProcessProperties implements com.google.javascript.jscomp.NodeTraversal.ScopedCallback {
        private java.util.Stack<com.google.javascript.jscomp.AnalyzePrototypeProperties.NameContext> symbolStack = new java.util.Stack<com.google.javascript.jscomp.AnalyzePrototypeProperties.NameContext>();

        private ProcessProperties() {
            symbolStack.push(new com.google.javascript.jscomp.AnalyzePrototypeProperties.NameContext(globalNode));
        }

        @java.lang.Override
        public void enterScope(com.google.javascript.jscomp.NodeTraversal t) {
            symbolStack.peek().scope = t.getScope();
        }

        @java.lang.Override
        public void exitScope(com.google.javascript.jscomp.NodeTraversal t) {
        }

        public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            if (isPrototypePropertyAssign(n)) {
                symbolStack.push(new com.google.javascript.jscomp.AnalyzePrototypeProperties.NameContext(getNameInfoForName(n.getFirstChild().getLastChild().getString(), PROPERTY)));
            } else if (isGlobalFunctionDeclaration(t, n)) {
                java.lang.String name = (parent.getType() == com.google.javascript.rhino.Token.NAME) ? parent.getString() : n.getFirstChild().getString();
                symbolStack.push(new com.google.javascript.jscomp.AnalyzePrototypeProperties.NameContext(getNameInfoForName(name, VAR)));
            } else if (com.google.javascript.jscomp.NodeUtil.isFunction(n)) {
                symbolStack.push(new com.google.javascript.jscomp.AnalyzePrototypeProperties.NameContext(anonymousNode));
            }
            return true;
        }

        public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            if (n.getType() == com.google.javascript.rhino.Token.GETPROP) {
                java.lang.String propName = n.getFirstChild().getNext().getString();
                if (propName.equals("prototype")) {
                    processPrototypeParent(t, parent);
                } else if (compiler.getCodingConvention().isExported(propName)) {
                    addGlobalUseOfSymbol(propName, t.getModule(), PROPERTY);
                } else {
                    addSymbolUse(propName, t.getModule(), PROPERTY);
                }
            } else if ((n.getType() == com.google.javascript.rhino.Token.OBJECTLIT) && (!(((parent.getType() == com.google.javascript.rhino.Token.ASSIGN) && (parent.getFirstChild().getType() == com.google.javascript.rhino.Token.GETPROP)) && parent.getFirstChild().getLastChild().getString().equals("prototype")))) {
                for (com.google.javascript.rhino.Node propNameNode = n.getFirstChild(); propNameNode != null; propNameNode = propNameNode.getNext()) {
                    if (!propNameNode.isQuotedString()) {
                        addSymbolUse(propNameNode.getString(), t.getModule(), PROPERTY);
                    }
                }
            } else if (n.getType() == com.google.javascript.rhino.Token.NAME) {
                java.lang.String name = n.getString();
                com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(name);
                if (var != null) {
                    if (var.isGlobal()) {
                        if ((var.getInitialValue() != null) && (var.getInitialValue().getType() == com.google.javascript.rhino.Token.FUNCTION)) {
                            if (t.inGlobalScope()) {
                                if (!processGlobalFunctionDeclaration(t, n, parent, parent.getParent())) {
                                    addGlobalUseOfSymbol(name, t.getModule(), VAR);
                                }
                            } else {
                                addSymbolUse(name, t.getModule(), VAR);
                            }
                        }
                    } else if (var.getScope() != t.getScope()) {
                        for (int i = symbolStack.size() - 1; i >= 0; i--) {
                            com.google.javascript.jscomp.AnalyzePrototypeProperties.NameContext context = symbolStack.get(i);
                            context.name.readClosureVariables = true;
                            if (context.scope == var.getScope()) {
                                break;
                            }
                        }
                    }
                }
            }
            if ((isPrototypePropertyAssign(n) || isGlobalFunctionDeclaration(t, n)) || com.google.javascript.jscomp.NodeUtil.isFunction(n)) {
                symbolStack.pop();
            }
        }

        private void addSymbolUse(java.lang.String name, com.google.javascript.jscomp.JSModule module, com.google.javascript.jscomp.AnalyzePrototypeProperties.SymbolType type) {
            com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo info = getNameInfoForName(name, type);
            com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo def = null;
            for (int i = symbolStack.size() - 1; i >= 0; i--) {
                def = symbolStack.get(i).name;
                if (def != anonymousNode) {
                    break;
                }
            }
            if (!def.equals(info)) {
                symbolGraph.connect(def, module, info);
            }
        }

        private boolean isGlobalFunctionDeclaration(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
            return t.inGlobalScope() && (com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) || ((n.getType() == com.google.javascript.rhino.Token.FUNCTION) && (n.getParent().getType() == com.google.javascript.rhino.Token.NAME)));
        }

        private boolean isPrototypePropertyAssign(com.google.javascript.rhino.Node assign) {
            com.google.javascript.rhino.Node n = assign.getFirstChild();
            if (((n != null) && com.google.javascript.jscomp.NodeUtil.isVarOrSimpleAssignLhs(n, assign)) && (n.getType() == com.google.javascript.rhino.Token.GETPROP)) {
                boolean isChainedProperty = n.getFirstChild().getType() == com.google.javascript.rhino.Token.GETPROP;
                if (isChainedProperty) {
                    com.google.javascript.rhino.Node child = n.getFirstChild().getFirstChild().getNext();
                    if ((child.getType() == com.google.javascript.rhino.Token.STRING) && child.getString().equals("prototype")) {
                        return true;
                    }
                }
            }
            return false;
        }

        private boolean processGlobalFunctionDeclaration(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node gramps) {
            com.google.javascript.rhino.Node firstChild = nameNode.getFirstChild();
            if (isGlobalFunctionDeclaration(t, parent) || ((firstChild != null) && isGlobalFunctionDeclaration(t, firstChild))) {
                java.lang.String name = nameNode.getString();
                getNameInfoForName(name, VAR).getDeclarations().add(new com.google.javascript.jscomp.AnalyzePrototypeProperties.GlobalFunction(nameNode, parent, gramps, t.getModule()));
                if (compiler.getCodingConvention().isExported(name) || anchorUnusedVars) {
                    addGlobalUseOfSymbol(name, t.getModule(), VAR);
                }
                return true;
            }
            return false;
        }

        private void processPrototypeParent(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
            switch (n.getType()) {
                case com.google.javascript.rhino.Token.GETPROP :
                    com.google.javascript.rhino.Node dest = n.getFirstChild().getNext();
                    com.google.javascript.rhino.Node parent = n.getParent();
                    com.google.javascript.rhino.Node grandParent = parent.getParent();
                    if (((dest.getType() == com.google.javascript.rhino.Token.STRING) && com.google.javascript.jscomp.NodeUtil.isExprAssign(grandParent)) && com.google.javascript.jscomp.NodeUtil.isVarOrSimpleAssignLhs(n, parent)) {
                        java.lang.String name = dest.getString();
                        com.google.javascript.jscomp.AnalyzePrototypeProperties.Property prop = new com.google.javascript.jscomp.AnalyzePrototypeProperties.AssignmentProperty(grandParent, t.getModule());
                        getNameInfoForName(name, PROPERTY).getDeclarations().add(prop);
                    }
                    break;
                case com.google.javascript.rhino.Token.ASSIGN :
                    com.google.javascript.rhino.Node map = n.getFirstChild().getNext();
                    if (map.getType() == com.google.javascript.rhino.Token.OBJECTLIT) {
                        for (com.google.javascript.rhino.Node key = map.getFirstChild(); key != null; key = key.getNext()) {
                            java.lang.String name = key.getString();
                            com.google.javascript.jscomp.AnalyzePrototypeProperties.Property prop = new com.google.javascript.jscomp.AnalyzePrototypeProperties.LiteralProperty(key, key.getFirstChild(), map, n, t.getModule());
                            getNameInfoForName(name, PROPERTY).getDeclarations().add(prop);
                        }
                    }
                    break;
            }
        }

        private void addGlobalUseOfSymbol(java.lang.String name, com.google.javascript.jscomp.JSModule module, com.google.javascript.jscomp.AnalyzePrototypeProperties.SymbolType type) {
            symbolGraph.connect(globalNode, module, getNameInfoForName(name, type));
        }
    }

    private class ProcessExternProperties extends com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback {
        public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            if (n.getType() == com.google.javascript.rhino.Token.GETPROP) {
                symbolGraph.connect(externNode, firstModule, getNameInfoForName(n.getLastChild().getString(), PROPERTY));
            }
        }
    }

    private class PropagateReferences implements com.google.javascript.jscomp.graph.FixedPointGraphTraversal.EdgeCallback<com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo, com.google.javascript.jscomp.JSModule> {
        public boolean traverseEdge(com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo start, com.google.javascript.jscomp.JSModule edge, com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo dest) {
            if (start.isReferenced()) {
                com.google.javascript.jscomp.JSModule startModule = start.getDeepestCommonModuleRef();
                if ((startModule != null) && moduleGraph.dependsOn(startModule, edge)) {
                    return dest.markReference(startModule);
                } else {
                    return dest.markReference(edge);
                }
            }
            return false;
        }
    }

    interface Symbol {
        public abstract void remove();

        public abstract com.google.javascript.jscomp.JSModule getModule();
    }

    private enum SymbolType {

        PROPERTY,
        VAR;}

    class GlobalFunction implements com.google.javascript.jscomp.AnalyzePrototypeProperties.Symbol {
        private final com.google.javascript.rhino.Node nameNode;

        private final com.google.javascript.jscomp.JSModule module;

        GlobalFunction(com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node gramps, com.google.javascript.jscomp.JSModule module) {
            com.google.common.base.Preconditions.checkState((parent.getType() == com.google.javascript.rhino.Token.VAR) || com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(parent));
            this.nameNode = nameNode;
            this.module = module;
        }

        @java.lang.Override
        public void remove() {
            com.google.javascript.rhino.Node parent = nameNode.getParent();
            if ((parent.getType() == com.google.javascript.rhino.Token.FUNCTION) || parent.hasOneChild()) {
                com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
            } else {
                com.google.common.base.Preconditions.checkState(parent.getType() == com.google.javascript.rhino.Token.VAR);
                parent.removeChild(nameNode);
            }
        }

        @java.lang.Override
        public com.google.javascript.jscomp.JSModule getModule() {
            return module;
        }

        public com.google.javascript.rhino.Node getFunctionNode() {
            com.google.javascript.rhino.Node parent = nameNode.getParent();
            if (com.google.javascript.jscomp.NodeUtil.isFunction(parent)) {
                return parent;
            } else {
                return nameNode.getChildAtIndex(1);
            }
        }
    }

    interface Property extends com.google.javascript.jscomp.AnalyzePrototypeProperties.Symbol {
        public abstract com.google.javascript.rhino.Node getPrototype();

        public abstract com.google.javascript.rhino.Node getValue();
    }

    static class AssignmentProperty implements com.google.javascript.jscomp.AnalyzePrototypeProperties.Property {
        private final com.google.javascript.rhino.Node exprNode;

        private final com.google.javascript.jscomp.JSModule module;

        AssignmentProperty(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.JSModule module) {
            this.exprNode = node;
            this.module = module;
        }

        @java.lang.Override
        public void remove() {
            com.google.javascript.jscomp.NodeUtil.removeChild(exprNode.getParent(), exprNode);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getPrototype() {
            return getAssignNode().getFirstChild().getFirstChild();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getValue() {
            return getAssignNode().getLastChild();
        }

        private com.google.javascript.rhino.Node getAssignNode() {
            return exprNode.getFirstChild();
        }

        @java.lang.Override
        public com.google.javascript.jscomp.JSModule getModule() {
            return module;
        }
    }

    static class LiteralProperty implements com.google.javascript.jscomp.AnalyzePrototypeProperties.Property {
        private final com.google.javascript.rhino.Node key;

        private final com.google.javascript.rhino.Node value;

        private final com.google.javascript.rhino.Node map;

        private final com.google.javascript.rhino.Node assign;

        private final com.google.javascript.jscomp.JSModule module;

        LiteralProperty(com.google.javascript.rhino.Node key, com.google.javascript.rhino.Node value, com.google.javascript.rhino.Node map, com.google.javascript.rhino.Node assign, com.google.javascript.jscomp.JSModule module) {
            this.key = key;
            this.value = value;
            this.map = map;
            this.assign = assign;
            this.module = module;
        }

        @java.lang.Override
        public void remove() {
            map.removeChild(key);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getPrototype() {
            return assign.getFirstChild();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getValue() {
            return value;
        }

        @java.lang.Override
        public com.google.javascript.jscomp.JSModule getModule() {
            return module;
        }
    }

    private class NameContext {
        final com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo name;

        com.google.javascript.jscomp.Scope scope;

        NameContext(com.google.javascript.jscomp.AnalyzePrototypeProperties.NameInfo name) {
            this.name = name;
        }
    }

    class NameInfo {
        final java.lang.String name;

        private boolean referenced = false;

        private final java.util.Deque<com.google.javascript.jscomp.AnalyzePrototypeProperties.Symbol> declarations = new java.util.ArrayDeque<com.google.javascript.jscomp.AnalyzePrototypeProperties.Symbol>();

        private com.google.javascript.jscomp.JSModule deepestCommonModuleRef = null;

        private boolean readClosureVariables = false;

        NameInfo(java.lang.String name) {
            this.name = name;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return name;
        }

        boolean isReferenced() {
            return referenced;
        }

        boolean readsClosureVariables() {
            return readClosureVariables;
        }

        boolean markReference(com.google.javascript.jscomp.JSModule module) {
            boolean hasChanged = false;
            if (!referenced) {
                referenced = true;
                hasChanged = true;
            }
            if (moduleGraph != null) {
                com.google.javascript.jscomp.JSModule originalDeepestCommon = deepestCommonModuleRef;
                if (deepestCommonModuleRef == null) {
                    deepestCommonModuleRef = module;
                } else {
                    deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive(deepestCommonModuleRef, module);
                }
                if (originalDeepestCommon != deepestCommonModuleRef) {
                    hasChanged = true;
                }
            }
            return hasChanged;
        }

        com.google.javascript.jscomp.JSModule getDeepestCommonModuleRef() {
            return deepestCommonModuleRef;
        }

        java.util.Deque<com.google.javascript.jscomp.AnalyzePrototypeProperties.Symbol> getDeclarations() {
            return declarations;
        }
    }
}
[6017501] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659906150711
GPR[SSUN]-1659906150711
1803458346
GPR[SPVATF]-1659906150938
GPR[EPVATF]-1659906151170
GPR[SPS]-1659906151170
[6018551] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties:183.
GPR[EPS]-1659906151762
GPR[ESUN]-1659906151762
GPR[SSUN]-1659906151762
1803458346
GPR[SPVATF]-1659906151989
GPR[EPVATF]-1659906152226
GPR[SPS]-1659906152226
GPR[EPS]-1659907134233
GPR[ESUN]-1659907134233
GPR[SSUN]-1659907134233
1803458346
GPR[ESUN]-1659907134623
GPR[SSUN]-1659907134623
1803458346
GPR[SPVATF]-1659907134874
GPR[EPVATF]-1659907135113
GPR[SPS]-1659907135113
GPR[EPS]-1659907654554
GPR[ESUN]-1659907654554
GPR[SSUN]-1659907654554
1803458346
GPR[ESUN]-1659907654935
GPR[SSUN]-1659907654935
1803458346
GPR[ESUN]-1659907655160
GPR[SSUN]-1659907655160
1803458346
GPR[SPVATF]-1659907655393
GPR[EPVATF]-1659907655629
GPR[SPS]-1659907655629
[7523003] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties:164.
GPR[EPS]-1659907656213
GPR[ESUN]-1659907656213
GPR[SSUN]-1659907656213
1803458346
GPR[ESUN]-1659907656443
GPR[SSUN]-1659907656443
1803458346
GPR[ESUN]-1659907656671
GPR[SSUN]-1659907656671
1803458346
GPR[SPVATF]-1659907656899
GPR[EPVATF]-1659907657138
GPR[SPS]-1659907657138
[7524518] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties:155.
GPR[EPS]-1659907657728
GPR[ESUN]-1659907657728
GPR[SSUN]-1659907657728
1803458346
GPR[ESUN]-1659907657961
GPR[SSUN]-1659907657961
1803458346
GPR[SPVATF]-1659907658189
GPR[EPVATF]-1659907658427
GPR[SPS]-1659907658427
GPR[EPS]-1659907667782
GPR[ESUN]-1659907667783
GPR[SSUN]-1659907667783
1803458346
GPR[SPVATF]-1659907668016
GPR[EPVATF]-1659907668276
GPR[SPS]-1659907668276
[7535649] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties:146.
GPR[EPS]-1659907668859
GPR[SPVATF]-1659907668859
GPR[EPVATF]-1659907669096
GPR[SPS]-1659907669096
[7536470] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties:146.
GPR[EPS]-1659907669680
GPR[ESUN]-1659907669680
GPR[SSUN]-1659907669680
1803458346
GPR[ESUN]-1659907669911
GPR[SSUN]-1659907669911
1803458346
GPR[SPVATF]-1659907670184
GPR[EPVATF]-1659907670430
GPR[SPS]-1659907670430
[7537822] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$PropagateReferences:428.
GPR[EPS]-1659907671032
GPR[ESUN]-1659907671032
GPR[SSUN]-1659907671032
1803458346
GPR[SPVATF]-1659907671265
GPR[EPVATF]-1659907671506
GPR[SPS]-1659907671506
[7538923] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$PropagateReferences:424.
GPR[EPS]-1659907672133
GPR[SPVATF]-1659907672133
GPR[EPVATF]-1659907672372
GPR[SPS]-1659907672372
[7539758] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$PropagateReferences:424.
GPR[EPS]-1659907672968
GPR[ESUN]-1659907672969
GPR[SSUN]-1659907672969
1803458346
GPR[ESUN]-1659907673197
GPR[SSUN]-1659907673197
1803458346
GPR[SPVATF]-1659907673424
GPR[EPVATF]-1659907673669
GPR[SPS]-1659907673669
[7541065] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$PropagateReferences:422.
GPR[EPS]-1659907674275
GPR[SPVATF]-1659907674275
GPR[EPVATF]-1659907674519
GPR[SPS]-1659907674519
[7541902] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$PropagateReferences:422.
GPR[EPS]-1659907675112
GPR[ESUN]-1659907675112
GPR[SSUN]-1659907675112
1803458346
GPR[ESUN]-1659907675339
GPR[SSUN]-1659907675339
1803458346
GPR[SPVATF]-1659907676595
GPR[EPVATF]-1659907676842
GPR[SPS]-1659907676842
[9343385] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[SPVATF]-1659909476596
GPR[EPVATF]-1659909476861
GPR[SPS]-1659909476861
[11143386] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[ESUN]-1659911276596
GPR[SSUN]-1659911276597
1803458346
GPR[ESUN]-1659911277020
GPR[SSUN]-1659911277020
1803458346
GPR[ESUN]-1659911277254
GPR[SSUN]-1659911277254
1803458346
GPR[ESUN]-1659911277489
GPR[SSUN]-1659911277489
1803458346
GPR[SPVATF]-1659911277727
GPR[EPVATF]-1659911277984
GPR[SPS]-1659911277984
[11145420] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:281.
GPR[EPS]-1659911278630
GPR[SPVATF]-1659911278631
GPR[EPVATF]-1659911278872
GPR[SPS]-1659911278872
[11146260] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:281.
GPR[EPS]-1659911279470
GPR[ESUN]-1659911279470
GPR[SSUN]-1659911279470
1803458346
GPR[SPVATF]-1659911279708
GPR[EPVATF]-1659911279957
GPR[SPS]-1659911279957
[11147401] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:251.
GPR[EPS]-1659911280611
GPR[SPVATF]-1659911280611
GPR[EPVATF]-1659911280852
GPR[SPS]-1659911280852
[11148240] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:251.
GPR[EPS]-1659911281450
GPR[ESUN]-1659911281450
GPR[SSUN]-1659911281450
1803458346
GPR[ESUN]-1659911281684
GPR[SSUN]-1659911281684
1803458346
GPR[ESUN]-1659911281918
GPR[SSUN]-1659911281918
1803458346
GPR[SPVATF]-1659911282152
GPR[EPVATF]-1659911282397
GPR[SPS]-1659911282397
[11149795] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:247.
GPR[EPS]-1659911283005
GPR[SPVATF]-1659911283005
GPR[EPVATF]-1659911283252
GPR[SPS]-1659911283252
[11150645] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:247.
GPR[EPS]-1659911283855
GPR[ESUN]-1659911283855
GPR[SSUN]-1659911283855
1803458346
GPR[SPVATF]-1659911284095
GPR[EPVATF]-1659911284334
GPR[SPS]-1659911284334
GPR[EPS]-1659911674148
GPR[SPVATF]-1659911674148
GPR[EPVATF]-1659911674423
GPR[SPS]-1659911674423
GPR[EPS]-1659912001431
GPR[ESUN]-1659912001431
GPR[SSUN]-1659912001431
1803458346
GPR[ESUN]-1659912001811
GPR[SSUN]-1659912001811
1803458346
GPR[SPVATF]-1659912002044
GPR[EPVATF]-1659912002297
GPR[SPS]-1659912002297
[11869715] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:209.
GPR[EPS]-1659912002925
GPR[SPVATF]-1659912002926
GPR[EPVATF]-1659912003170
GPR[SPS]-1659912003170
[11870568] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:209.
GPR[EPS]-1659912003778
GPR[ESUN]-1659912003778
GPR[SSUN]-1659912003778
1803458346
GPR[SPVATF]-1659912004022
GPR[EPVATF]-1659912004267
GPR[SPS]-1659912004267
[11871664] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:206.
GPR[EPS]-1659912004874
GPR[SPVATF]-1659912004874
GPR[EPVATF]-1659912005119
GPR[SPS]-1659912005119
[11872511] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:206.
GPR[EPS]-1659912005721
GPR[ESUN]-1659912005721
GPR[SSUN]-1659912005721
1803458346
GPR[ESUN]-1659912005956
GPR[SSUN]-1659912005956
1803458346
GPR[ESUN]-1659912006228
GPR[SSUN]-1659912006228
1803458346
GPR[SPVATF]-1659912006462
GPR[EPVATF]-1659912006712
GPR[SPS]-1659912006712
[11874115] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:197.
GPR[EPS]-1659912007325
GPR[ESUN]-1659912007325
GPR[SSUN]-1659912007325
1803458346
GPR[ESUN]-1659912007573
GPR[SSUN]-1659912007573
1803458346
GPR[ESUN]-1659912007810
GPR[SSUN]-1659912007810
1803458346
GPR[SPVATF]-1659912008049
GPR[EPVATF]-1659912008295
GPR[SPS]-1659912008295
[11875704] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$NameInfo:662.
GPR[EPS]-1659912008914
GPR[SPVATF]-1659912008914
GPR[EPVATF]-1659912009162
GPR[SPS]-1659912009162
[11876558] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$NameInfo:662.
GPR[EPS]-1659912009768
GPR[ESUN]-1659912009768
GPR[SSUN]-1659912009768
1803458346
GPR[SPVATF]-1659912010004
GPR[EPVATF]-1659912010256
GPR[SPS]-1659912010256
[11877650] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$NameInfo:659.
GPR[EPS]-1659912010860
GPR[ESUN]-1659912010860
GPR[SSUN]-1659912010860
1803458346
GPR[SPVATF]-1659912011096
GPR[EPVATF]-1659912011344
GPR[SPS]-1659912011344
[11878746] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$NameInfo:658.
GPR[EPS]-1659912011956
GPR[ESUN]-1659912011956
GPR[SSUN]-1659912011956
1803458346
GPR[SPVATF]-1659912012192
GPR[EPVATF]-1659912012446
GPR[SPS]-1659912012446
[11879931] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$NameInfo:657.
GPR[EPS]-1659912013141
GPR[SPVATF]-1659912013141
GPR[EPVATF]-1659912013395
GPR[SPS]-1659912013395
[11880797] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$NameInfo:657.
GPR[EPS]-1659912014007
GPR[ESUN]-1659912014007
GPR[SSUN]-1659912014007
1803458346
GPR[ESUN]-1659912014241
GPR[SSUN]-1659912014241
1803458346
GPR[ESUN]-1659912014495
GPR[SSUN]-1659912014495
1187751237
GPR[ESUN]-1659912014773
GPR[SSUN]-1659912014773
80988634
GPR[ESUN]-1659912014950
GPR[SSUN]-1659912014950
2433571
GPR[ESUN]-1659912015181
GPR[SSUN]-1659912015181
2433571
GPR[SPVATF]-1659912015414
GPR[EPVATF]-1659912015670
GPR[SPS]-1659912015670
[11883095] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1032.
GPR[EPS]-1659912016305
GPR[ESUN]-1659912016305
GPR[SSUN]-1659912016305
2433571
GPR[SPVATF]-1659912016540
GPR[EPVATF]-1659912016790
GPR[SPS]-1659912016790
[11884210] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1031.
GPR[EPS]-1659912017420
GPR[ESUN]-1659912017420
GPR[SSUN]-1659912017420
2433571
GPR[SPVATF]-1659912017656
GPR[EPVATF]-1659912017908
GPR[SPS]-1659912017908
[11885387] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int LOCAL_BLOCK_PROP = -3;

    public static final int OBJECT_IDS_PROP = -2;

    public static final int CATCH_SCOPE_PROP = -1;

    public static final int LABEL_ID_PROP = 0;

    public static final int TARGET_PROP = 1;

    public static final int BREAK_PROP = 2;

    public static final int CONTINUE_PROP = 3;

    public static final int ENUM_PROP = 4;

    public static final int FUNCTION_PROP = 5;

    public static final int TEMP_PROP = 6;

    public static final int LOCAL_PROP = 7;

    public static final int CODEOFFSET_PROP = 8;

    public static final int FIXUPS_PROP = 9;

    public static final int VARS_PROP = 10;

    public static final int USES_PROP = 11;

    public static final int REGEXP_PROP = 12;

    public static final int CASES_PROP = 13;

    public static final int DEFAULT_PROP = 14;

    public static final int CASEARRAY_PROP = 15;

    public static final int SOURCENAME_PROP = 16;

    public static final int TYPE_PROP = 17;

    public static final int SPECIAL_PROP_PROP = 18;

    public static final int LABEL_PROP = 19;

    public static final int FINALLY_PROP = 20;

    public static final int LOCALCOUNT_PROP = 21;

    public static final int TARGETBLOCK_PROP = 22;

    public static final int VARIABLE_PROP = 23;

    public static final int LASTUSE_PROP = 24;

    public static final int ISNUMBER_PROP = 25;

    public static final int DIRECTCALL_PROP = 26;

    public static final int SPECIALCALL_PROP = 27;

    public static final int DEBUGSOURCE_PROP = 28;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int SKIP_INDEXES_PROP = 31;

    public static final int INCRDECR_PROP = 32;

    public static final int MEMBER_TYPE_PROP = 33;

    public static final int NAME_PROP = 34;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int LAST_PROP = 50;

    public static final int BOTH = 0;

    public static final int LEFT = 1;

    public static final int RIGHT = 2;

    public static final int NON_SPECIALCALL = 0;

    public static final int SPECIALCALL_EVAL = 1;

    public static final int SPECIALCALL_WITH = 2;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    public static final int PROPERTY_FLAG = 0x1;

    public static final int ATTRIBUTE_FLAG = 0x2;

    public static final int DESCENDANTS_FLAG = 0x4;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP :
                return "local_block";
            case com.google.javascript.rhino.Node.OBJECT_IDS_PROP :
                return "object_ids_prop";
            case com.google.javascript.rhino.Node.CATCH_SCOPE_PROP :
                return "catch_scope_prop";
            case com.google.javascript.rhino.Node.LABEL_ID_PROP :
                return "label_id_prop";
            case com.google.javascript.rhino.Node.TARGET_PROP :
                return "target";
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.BREAK_PROP :
                return "break";
            case com.google.javascript.rhino.Node.CONTINUE_PROP :
                return "continue";
            case com.google.javascript.rhino.Node.ENUM_PROP :
                return "enum";
            case com.google.javascript.rhino.Node.FUNCTION_PROP :
                return "function";
            case com.google.javascript.rhino.Node.TEMP_PROP :
                return "temp";
            case com.google.javascript.rhino.Node.LOCAL_PROP :
                return "local";
            case com.google.javascript.rhino.Node.CODEOFFSET_PROP :
                return "codeoffset";
            case com.google.javascript.rhino.Node.FIXUPS_PROP :
                return "fixups";
            case com.google.javascript.rhino.Node.VARS_PROP :
                return "vars";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.USES_PROP :
                return "uses";
            case com.google.javascript.rhino.Node.REGEXP_PROP :
                return "regexp";
            case com.google.javascript.rhino.Node.CASES_PROP :
                return "cases";
            case com.google.javascript.rhino.Node.DEFAULT_PROP :
                return "default";
            case com.google.javascript.rhino.Node.CASEARRAY_PROP :
                return "casearray";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.TYPE_PROP :
                return "type";
            case com.google.javascript.rhino.Node.SPECIAL_PROP_PROP :
                return "special_prop";
            case com.google.javascript.rhino.Node.LABEL_PROP :
                return "label";
            case com.google.javascript.rhino.Node.FINALLY_PROP :
                return "finally";
            case com.google.javascript.rhino.Node.LOCALCOUNT_PROP :
                return "localcount";
            case com.google.javascript.rhino.Node.TARGETBLOCK_PROP :
                return "targetblock";
            case com.google.javascript.rhino.Node.VARIABLE_PROP :
                return "variable";
            case com.google.javascript.rhino.Node.LASTUSE_PROP :
                return "lastuse";
            case com.google.javascript.rhino.Node.ISNUMBER_PROP :
                return "isnumber";
            case com.google.javascript.rhino.Node.DIRECTCALL_PROP :
                return "directcall";
            case com.google.javascript.rhino.Node.SPECIALCALL_PROP :
                return "specialcall";
            case com.google.javascript.rhino.Node.DEBUGSOURCE_PROP :
                return "debugsource";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.SKIP_INDEXES_PROP :
                return "skip_indexes";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.MEMBER_TYPE_PROP :
                return "member_type";
            case com.google.javascript.rhino.Node.NAME_PROP :
                return "name";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            default :
                com.google.javascript.rhino.Kit.codeBug();
        }
        return null;
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && (getDouble() == ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble());
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private static class PropListItem implements java.io.Serializable {
        private static final long serialVersionUID = 1L;

        final com.google.javascript.rhino.Node.PropListItem next;

        final int type;

        final int intValue;

        final java.lang.Object objectValue;

        PropListItem(int type, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            this(type, intValue, null, next);
        }

        PropListItem(int type, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            this(type, 0, objectValue, next);
        }

        PropListItem(int type, int intValue, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            this.type = type;
            this.intValue = intValue;
            this.objectValue = objectValue;
            this.next = next;
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        if (last != null) {
            last.next = children;
        }
        last = children.getLastSibling();
        if (first == null) {
            first = children;
        }
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node != null, "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.parent = this;
        newChild.next = node.next;
        node.next = newChild;
        if (last == node) {
            last = newChild;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.type)) {
            x = x.next;
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.type == propType) {
            return item.next;
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.next, propType);
            if (result != item.next) {
                return new com.google.javascript.rhino.Node.PropListItem(item.type, item.intValue, item.objectValue, result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.objectValue;
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.intValue;
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            com.google.javascript.rhino.Kit.codeBug();
        }
        return item.intValue;
    }

    public void putProp(int propType, java.lang.Object value) {
        removeProp(propType);
        if (value != null) {
            propListHead = new com.google.javascript.rhino.Node.PropListItem(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = new com.google.javascript.rhino.Node.PropListItem(propType, value, propListHead);
        }
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.next) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.next) {
            count--;
            keys[count] = x.type;
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        if (com.google.javascript.rhino.Token.printTrees) {
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            toString(sb, printSource, printAnnotations, printType);
            return sb.toString();
        }
        return java.lang.String.valueOf(type);
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        if (com.google.javascript.rhino.Token.printTrees) {
            sb.append(com.google.javascript.rhino.Token.name(type));
            if (this instanceof com.google.javascript.rhino.Node.StringNode) {
                sb.append(' ');
                sb.append(getString());
            } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
                sb.append(' ');
                if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                    sb.append("<invalid>");
                } else {
                    sb.append(first.getString());
                }
            } else if (this instanceof com.google.javascript.rhino.ScriptOrFnNode) {
                com.google.javascript.rhino.ScriptOrFnNode sof = ((com.google.javascript.rhino.ScriptOrFnNode) (this));
                if (this instanceof com.google.javascript.rhino.FunctionNode) {
                    com.google.javascript.rhino.FunctionNode fn = ((com.google.javascript.rhino.FunctionNode) (this));
                    sb.append(' ');
                    sb.append(fn.getFunctionName());
                }
                if (printSource) {
                    sb.append(" [source name: ");
                    sb.append(sof.getSourceName());
                    sb.append("] [encoded source length: ");
                    sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());
                    sb.append("] [base line: ");
                    sb.append(sof.getBaseLineno());
                    sb.append("] [end line: ");
                    sb.append(sof.getEndLineno());
                    sb.append(']');
                }
            } else if (type == com.google.javascript.rhino.Token.NUMBER) {
                sb.append(' ');
                sb.append(getDouble());
            }
            if (printSource) {
                int lineno = getLineno();
                if (lineno != (-1)) {
                    sb.append(' ');
                    sb.append(lineno);
                }
            }
            if (printAnnotations) {
                int[] keys = getSortedPropTypes();
                for (int i = 0; i < keys.length; i++) {
                    int type = keys[i];
                    com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                    sb.append(" [");
                    sb.append(com.google.javascript.rhino.Node.propToString(type));
                    sb.append(": ");
                    java.lang.String value;
                    switch (type) {
                        case com.google.javascript.rhino.Node.TARGETBLOCK_PROP :
                            value = "target block property";
                            break;
                        case com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP :
                            value = "last local block";
                            break;
                        case com.google.javascript.rhino.Node.ISNUMBER_PROP :
                            switch (x.intValue) {
                                case com.google.javascript.rhino.Node.BOTH :
                                    value = "both";
                                    break;
                                case com.google.javascript.rhino.Node.RIGHT :
                                    value = "right";
                                    break;
                                case com.google.javascript.rhino.Node.LEFT :
                                    value = "left";
                                    break;
                                default :
                                    throw com.google.javascript.rhino.Kit.codeBug();
                            }
                            break;
                        case com.google.javascript.rhino.Node.SPECIALCALL_PROP :
                            switch (x.intValue) {
                                case com.google.javascript.rhino.Node.SPECIALCALL_EVAL :
                                    value = "eval";
                                    break;
                                case com.google.javascript.rhino.Node.SPECIALCALL_WITH :
                                    value = "with";
                                    break;
                                default :
                                    throw com.google.javascript.rhino.Kit.codeBug();
                            }
                            break;
                        default :
                            java.lang.Object obj = x.objectValue;
                            if (obj != null) {
                                boolean spoonDefaultValue = false;
                                try {
                                    spoonDefaultValue = true;
                                } catch (java.lang.Exception __NopolProcessorException) {
                                }
                                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                if (fr.inria.lille.commons.trace.RuntimeValues.instance(126).isEnabled()) {
                                    fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectionStarts();
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.FIXUPS_PROP",com.google.javascript.rhino.Node.FIXUPS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.ISNUMBER_PROP",com.google.javascript.rhino.Node.ISNUMBER_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.CODEOFFSET_PROP",com.google.javascript.rhino.Node.CODEOFFSET_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.LOCAL_PROP",com.google.javascript.rhino.Node.LOCAL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_PROP",com.google.javascript.rhino.Node.SPECIALCALL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.TARGET_PROP",com.google.javascript.rhino.Node.TARGET_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.OBJECT_IDS_PROP",com.google.javascript.rhino.Node.OBJECT_IDS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.LOCALCOUNT_PROP",com.google.javascript.rhino.Node.LOCALCOUNT_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.FUNCTION_PROP",com.google.javascript.rhino.Node.FUNCTION_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.LABEL_PROP",com.google.javascript.rhino.Node.LABEL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.BOTH",com.google.javascript.rhino.Node.BOTH);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.MEMBER_TYPE_PROP",com.google.javascript.rhino.Node.MEMBER_TYPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_WITH",com.google.javascript.rhino.Node.SPECIALCALL_WITH);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.TYPE_PROP",com.google.javascript.rhino.Node.TYPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.PROPERTY_FLAG",com.google.javascript.rhino.Node.PROPERTY_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.DEFAULT_PROP",com.google.javascript.rhino.Node.DEFAULT_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.SPECIAL_PROP_PROP",com.google.javascript.rhino.Node.SPECIAL_PROP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.CONTINUE_PROP",com.google.javascript.rhino.Node.CONTINUE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.DIRECTCALL_PROP",com.google.javascript.rhino.Node.DIRECTCALL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.LABEL_ID_PROP",com.google.javascript.rhino.Node.LABEL_ID_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.ENUM_PROP",com.google.javascript.rhino.Node.ENUM_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.TARGETBLOCK_PROP",com.google.javascript.rhino.Node.TARGETBLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.TEMP_PROP",com.google.javascript.rhino.Node.TEMP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.USES_PROP",com.google.javascript.rhino.Node.USES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.VARS_PROP",com.google.javascript.rhino.Node.VARS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.REGEXP_PROP",com.google.javascript.rhino.Node.REGEXP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.LASTUSE_PROP",com.google.javascript.rhino.Node.LASTUSE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.NAME_PROP",com.google.javascript.rhino.Node.NAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.LEFT",com.google.javascript.rhino.Node.LEFT);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.ATTRIBUTE_FLAG",com.google.javascript.rhino.Node.ATTRIBUTE_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.FINALLY_PROP",com.google.javascript.rhino.Node.FINALLY_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.NON_SPECIALCALL",com.google.javascript.rhino.Node.NON_SPECIALCALL);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.CASEARRAY_PROP",com.google.javascript.rhino.Node.CASEARRAY_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.DESCENDANTS_FLAG",com.google.javascript.rhino.Node.DESCENDANTS_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.CATCH_SCOPE_PROP",com.google.javascript.rhino.Node.CATCH_SCOPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP",com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.CASES_PROP",com.google.javascript.rhino.Node.CASES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.VARIABLE_PROP",com.google.javascript.rhino.Node.VARIABLE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.SKIP_INDEXES_PROP",com.google.javascript.rhino.Node.SKIP_INDEXES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.RIGHT",com.google.javascript.rhino.Node.RIGHT);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_EVAL",com.google.javascript.rhino.Node.SPECIALCALL_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.DEBUGSOURCE_PROP",com.google.javascript.rhino.Node.DEBUGSOURCE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.BREAK_PROP",com.google.javascript.rhino.Node.BREAK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    if (com.google.javascript.rhino.Node.this.last!=null) {
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                    }
                                    if (com.google.javascript.rhino.Node.this.parent!=null) {
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                    }
                                    if (com.google.javascript.rhino.Node.this.next!=null) {
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                    }
                                    if (com.google.javascript.rhino.Node.this.first!=null) {
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                    }
                                    fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectOutput(runtimeAngelicValue);
                                    fr.inria.lille.commons.trace.RuntimeValues.instance(126).collectionEnds();
                                }
                                if (runtimeAngelicValue)
                                    value = obj.toString();

                            } else {
                                value = java.lang.String.valueOf(x.intValue);
                            }
                            break;
                    }
                    sb.append(value);
                    sb.append(']');
                }
            }
            if (printType) {
                if (jsType != null) {
                    java.lang.String jsTypeString = jsType.toString();
                    if (jsTypeString != null) {
                        sb.append(" : ");
                        sb.append(jsTypeString);
                    }
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        if (com.google.javascript.rhino.Token.printTrees) {
            for (int i = 0; i != level; ++i) {
                sb.append("    ");
            }
            sb.append(n.toString());
            sb.append('\n');
            for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
                com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
            }
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourcePositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourcePositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        public boolean hasNext() {
            return current != null;
        }

        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                public boolean hasNext() {
                    return cur != null;
                }

                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Class getNodeClass(com.google.javascript.rhino.Node n) {
        java.lang.Class c = n.getClass();
        if ((c == com.google.javascript.rhino.FunctionNode.class) || (c == com.google.javascript.rhino.ScriptOrFnNode.class)) {
            return com.google.javascript.rhino.Node.class;
        }
        return c;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public static java.lang.String tokenToName(int token) {
        switch (token) {
            case com.google.javascript.rhino.Token.ERROR :
                return "error";
            case com.google.javascript.rhino.Token.EOF :
                return "eof";
            case com.google.javascript.rhino.Token.EOL :
                return "eol";
            case com.google.javascript.rhino.Token.ENTERWITH :
                return "enterwith";
            case com.google.javascript.rhino.Token.LEAVEWITH :
                return "leavewith";
            case com.google.javascript.rhino.Token.RETURN :
                return "return";
            case com.google.javascript.rhino.Token.GOTO :
                return "goto";
            case com.google.javascript.rhino.Token.IFEQ :
                return "ifeq";
            case com.google.javascript.rhino.Token.IFNE :
                return "ifne";
            case com.google.javascript.rhino.Token.SETNAME :
                return "setname";
            case com.google.javascript.rhino.Token.BITOR :
                return "bitor";
            case com.google.javascript.rhino.Token.BITXOR :
                return "bitxor";
            case com.google.javascript.rhino.Token.BITAND :
                return "bitand";
            case com.google.javascript.rhino.Token.EQ :
                return "eq";
            case com.google.javascript.rhino.Token.NE :
                return "ne";
            case com.google.javascript.rhino.Token.LT :
                return "lt";
            case com.google.javascript.rhino.Token.LE :
                return "le";
            case com.google.javascript.rhino.Token.GT :
                return "gt";
            case com.google.javascript.rhino.Token.GE :
                return "ge";
            case com.google.javascript.rhino.Token.LSH :
                return "lsh";
            case com.google.javascript.rhino.Token.RSH :
                return "rsh";
            case com.google.javascript.rhino.Token.URSH :
                return "ursh";
            case com.google.javascript.rhino.Token.ADD :
                return "add";
            case com.google.javascript.rhino.Token.SUB :
                return "sub";
            case com.google.javascript.rhino.Token.MUL :
                return "mul";
            case com.google.javascript.rhino.Token.DIV :
                return "div";
            case com.google.javascript.rhino.Token.MOD :
                return "mod";
            case com.google.javascript.rhino.Token.BITNOT :
                return "bitnot";
            case com.google.javascript.rhino.Token.NEG :
                return "neg";
            case com.google.javascript.rhino.Token.NEW :
                return "new";
            case com.google.javascript.rhino.Token.DELPROP :
                return "delprop";
            case com.google.javascript.rhino.Token.TYPEOF :
                return "typeof";
            case com.google.javascript.rhino.Token.GETPROP :
                return "getprop";
            case com.google.javascript.rhino.Token.SETPROP :
                return "setprop";
            case com.google.javascript.rhino.Token.GETELEM :
                return "getelem";
            case com.google.javascript.rhino.Token.SETELEM :
                return "setelem";
            case com.google.javascript.rhino.Token.CALL :
                return "call";
            case com.google.javascript.rhino.Token.NAME :
                return "name";
            case com.google.javascript.rhino.Token.NUMBER :
                return "number";
            case com.google.javascript.rhino.Token.STRING :
                return "string";
            case com.google.javascript.rhino.Token.NULL :
                return "null";
            case com.google.javascript.rhino.Token.THIS :
                return "this";
            case com.google.javascript.rhino.Token.FALSE :
                return "false";
            case com.google.javascript.rhino.Token.TRUE :
                return "true";
            case com.google.javascript.rhino.Token.SHEQ :
                return "sheq";
            case com.google.javascript.rhino.Token.SHNE :
                return "shne";
            case com.google.javascript.rhino.Token.REGEXP :
                return "regexp";
            case com.google.javascript.rhino.Token.POS :
                return "pos";
            case com.google.javascript.rhino.Token.BINDNAME :
                return "bindname";
            case com.google.javascript.rhino.Token.THROW :
                return "throw";
            case com.google.javascript.rhino.Token.IN :
                return "in";
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return "instanceof";
            case com.google.javascript.rhino.Token.GETVAR :
                return "getvar";
            case com.google.javascript.rhino.Token.SETVAR :
                return "setvar";
            case com.google.javascript.rhino.Token.TRY :
                return "try";
            case com.google.javascript.rhino.Token.TYPEOFNAME :
                return "typeofname";
            case com.google.javascript.rhino.Token.THISFN :
                return "thisfn";
            case com.google.javascript.rhino.Token.SEMI :
                return "semi";
            case com.google.javascript.rhino.Token.LB :
                return "lb";
            case com.google.javascript.rhino.Token.RB :
                return "rb";
            case com.google.javascript.rhino.Token.LC :
                return "lc";
            case com.google.javascript.rhino.Token.RC :
                return "rc";
            case com.google.javascript.rhino.Token.LP :
                return "lp";
            case com.google.javascript.rhino.Token.RP :
                return "rp";
            case com.google.javascript.rhino.Token.COMMA :
                return "comma";
            case com.google.javascript.rhino.Token.ASSIGN :
                return "assign";
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return "assign_bitor";
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return "assign_bitxor";
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return "assign_bitand";
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return "assign_lsh";
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return "assign_rsh";
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return "assign_ursh";
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return "assign_add";
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return "assign_sub";
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return "assign_mul";
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return "assign_div";
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return "assign_mod";
            case com.google.javascript.rhino.Token.HOOK :
                return "hook";
            case com.google.javascript.rhino.Token.COLON :
                return "colon";
            case com.google.javascript.rhino.Token.OR :
                return "or";
            case com.google.javascript.rhino.Token.AND :
                return "and";
            case com.google.javascript.rhino.Token.INC :
                return "inc";
            case com.google.javascript.rhino.Token.DEC :
                return "dec";
            case com.google.javascript.rhino.Token.DOT :
                return "dot";
            case com.google.javascript.rhino.Token.FUNCTION :
                return "function";
            case com.google.javascript.rhino.Token.EXPORT :
                return "export";
            case com.google.javascript.rhino.Token.IMPORT :
                return "import";
            case com.google.javascript.rhino.Token.IF :
                return "if";
            case com.google.javascript.rhino.Token.ELSE :
                return "else";
            case com.google.javascript.rhino.Token.SWITCH :
                return "switch";
            case com.google.javascript.rhino.Token.CASE :
                return "case";
            case com.google.javascript.rhino.Token.DEFAULT :
                return "default";
            case com.google.javascript.rhino.Token.WHILE :
                return "while";
            case com.google.javascript.rhino.Token.DO :
                return "do";
            case com.google.javascript.rhino.Token.FOR :
                return "for";
            case com.google.javascript.rhino.Token.BREAK :
                return "break";
            case com.google.javascript.rhino.Token.CONTINUE :
                return "continue";
            case com.google.javascript.rhino.Token.VAR :
                return "var";
            case com.google.javascript.rhino.Token.WITH :
                return "with";
            case com.google.javascript.rhino.Token.CATCH :
                return "catch";
            case com.google.javascript.rhino.Token.FINALLY :
                return "finally";
            case com.google.javascript.rhino.Token.RESERVED :
                return "reserved";
            case com.google.javascript.rhino.Token.NOT :
                return "not";
            case com.google.javascript.rhino.Token.VOID :
                return "void";
            case com.google.javascript.rhino.Token.BLOCK :
                return "block";
            case com.google.javascript.rhino.Token.ARRAYLIT :
                return "arraylit";
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return "objectlit";
            case com.google.javascript.rhino.Token.LABEL :
                return "label";
            case com.google.javascript.rhino.Token.TARGET :
                return "target";
            case com.google.javascript.rhino.Token.LOOP :
                return "loop";
            case com.google.javascript.rhino.Token.EXPR_VOID :
                return "expr_void";
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                return "expr_result";
            case com.google.javascript.rhino.Token.JSR :
                return "jsr";
            case com.google.javascript.rhino.Token.SCRIPT :
                return "script";
            case com.google.javascript.rhino.Token.EMPTY :
                return "empty";
            case com.google.javascript.rhino.Token.GET_REF :
                return "get_ref";
            case com.google.javascript.rhino.Token.REF_SPECIAL :
                return "ref_special";
        }
        return ("<unknown=" + token) + ">";
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (com.google.javascript.rhino.Node.getNodeClass(this) != com.google.javascript.rhino.Node.getNodeClass(node))) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if (type == com.google.javascript.rhino.Token.ARRAYLIT) {
            try {
                int[] indices1 = ((int[]) (getProp(com.google.javascript.rhino.Node.SKIP_INDEXES_PROP)));
                int[] indices2 = ((int[]) (node.getProp(com.google.javascript.rhino.Node.SKIP_INDEXES_PROP)));
                if (indices1 == null) {
                    if (indices2 != null) {
                        return false;
                    }
                } else if (indices2 == null) {
                    return false;
                } else if (indices1.length != indices2.length) {
                    return false;
                } else {
                    for (int i = 0; i < indices1.length; i++) {
                        if (indices1[i] != indices2[i]) {
                            return false;
                        }
                    }
                }
            } catch (java.lang.Exception e) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.STRING) {
            int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            if (quoted1 != quoted2) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean hasSideEffects() {
        switch (type) {
            case com.google.javascript.rhino.Token.EXPR_VOID :
            case com.google.javascript.rhino.Token.COMMA :
                if (last != null) {
                    return last.hasSideEffects();
                } else {
                    return true;
                }
            case com.google.javascript.rhino.Token.HOOK :
                if (((first == null) || (first.next == null)) || (first.next.next == null)) {
                    com.google.javascript.rhino.Kit.codeBug();
                }
                return first.next.hasSideEffects() && first.next.next.hasSideEffects();
            case com.google.javascript.rhino.Token.ERROR :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ENTERWITH :
            case com.google.javascript.rhino.Token.LEAVEWITH :
            case com.google.javascript.rhino.Token.RETURN :
            case com.google.javascript.rhino.Token.GOTO :
            case com.google.javascript.rhino.Token.IFEQ :
            case com.google.javascript.rhino.Token.IFNE :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.SETNAME :
            case com.google.javascript.rhino.Token.SETPROP :
            case com.google.javascript.rhino.Token.SETELEM :
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.THROW :
            case com.google.javascript.rhino.Token.RETHROW :
            case com.google.javascript.rhino.Token.SETVAR :
            case com.google.javascript.rhino.Token.CATCH_SCOPE :
            case com.google.javascript.rhino.Token.RETURN_RESULT :
            case com.google.javascript.rhino.Token.SET_REF :
            case com.google.javascript.rhino.Token.DEL_REF :
            case com.google.javascript.rhino.Token.REF_CALL :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SEMI :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.EXPORT :
            case com.google.javascript.rhino.Token.IMPORT :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.ELSE :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.CONST :
            case com.google.javascript.rhino.Token.WITH :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.FINALLY :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.TARGET :
            case com.google.javascript.rhino.Token.LOOP :
            case com.google.javascript.rhino.Token.JSR :
            case com.google.javascript.rhino.Token.SETPROP_OP :
            case com.google.javascript.rhino.Token.SETELEM_OP :
            case com.google.javascript.rhino.Token.LOCAL_BLOCK :
            case com.google.javascript.rhino.Token.SET_REF_OP :
                return true;
            default :
                return false;
        }
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        com.google.javascript.rhino.Kit.codeBug();
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }
}
[11885387] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659912018597
GPR[SSUN]-1659912018597
2433571
GPR[SPVATF]-1659912018831
GPR[EPVATF]-1659912019091
GPR[SPS]-1659912019091
[11886615] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int LOCAL_BLOCK_PROP = -3;

    public static final int OBJECT_IDS_PROP = -2;

    public static final int CATCH_SCOPE_PROP = -1;

    public static final int LABEL_ID_PROP = 0;

    public static final int TARGET_PROP = 1;

    public static final int BREAK_PROP = 2;

    public static final int CONTINUE_PROP = 3;

    public static final int ENUM_PROP = 4;

    public static final int FUNCTION_PROP = 5;

    public static final int TEMP_PROP = 6;

    public static final int LOCAL_PROP = 7;

    public static final int CODEOFFSET_PROP = 8;

    public static final int FIXUPS_PROP = 9;

    public static final int VARS_PROP = 10;

    public static final int USES_PROP = 11;

    public static final int REGEXP_PROP = 12;

    public static final int CASES_PROP = 13;

    public static final int DEFAULT_PROP = 14;

    public static final int CASEARRAY_PROP = 15;

    public static final int SOURCENAME_PROP = 16;

    public static final int TYPE_PROP = 17;

    public static final int SPECIAL_PROP_PROP = 18;

    public static final int LABEL_PROP = 19;

    public static final int FINALLY_PROP = 20;

    public static final int LOCALCOUNT_PROP = 21;

    public static final int TARGETBLOCK_PROP = 22;

    public static final int VARIABLE_PROP = 23;

    public static final int LASTUSE_PROP = 24;

    public static final int ISNUMBER_PROP = 25;

    public static final int DIRECTCALL_PROP = 26;

    public static final int SPECIALCALL_PROP = 27;

    public static final int DEBUGSOURCE_PROP = 28;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int SKIP_INDEXES_PROP = 31;

    public static final int INCRDECR_PROP = 32;

    public static final int MEMBER_TYPE_PROP = 33;

    public static final int NAME_PROP = 34;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int LAST_PROP = 50;

    public static final int BOTH = 0;

    public static final int LEFT = 1;

    public static final int RIGHT = 2;

    public static final int NON_SPECIALCALL = 0;

    public static final int SPECIALCALL_EVAL = 1;

    public static final int SPECIALCALL_WITH = 2;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    public static final int PROPERTY_FLAG = 0x1;

    public static final int ATTRIBUTE_FLAG = 0x2;

    public static final int DESCENDANTS_FLAG = 0x4;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP :
                return "local_block";
            case com.google.javascript.rhino.Node.OBJECT_IDS_PROP :
                return "object_ids_prop";
            case com.google.javascript.rhino.Node.CATCH_SCOPE_PROP :
                return "catch_scope_prop";
            case com.google.javascript.rhino.Node.LABEL_ID_PROP :
                return "label_id_prop";
            case com.google.javascript.rhino.Node.TARGET_PROP :
                return "target";
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.BREAK_PROP :
                return "break";
            case com.google.javascript.rhino.Node.CONTINUE_PROP :
                return "continue";
            case com.google.javascript.rhino.Node.ENUM_PROP :
                return "enum";
            case com.google.javascript.rhino.Node.FUNCTION_PROP :
                return "function";
            case com.google.javascript.rhino.Node.TEMP_PROP :
                return "temp";
            case com.google.javascript.rhino.Node.LOCAL_PROP :
                return "local";
            case com.google.javascript.rhino.Node.CODEOFFSET_PROP :
                return "codeoffset";
            case com.google.javascript.rhino.Node.FIXUPS_PROP :
                return "fixups";
            case com.google.javascript.rhino.Node.VARS_PROP :
                return "vars";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.USES_PROP :
                return "uses";
            case com.google.javascript.rhino.Node.REGEXP_PROP :
                return "regexp";
            case com.google.javascript.rhino.Node.CASES_PROP :
                return "cases";
            case com.google.javascript.rhino.Node.DEFAULT_PROP :
                return "default";
            case com.google.javascript.rhino.Node.CASEARRAY_PROP :
                return "casearray";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.TYPE_PROP :
                return "type";
            case com.google.javascript.rhino.Node.SPECIAL_PROP_PROP :
                return "special_prop";
            case com.google.javascript.rhino.Node.LABEL_PROP :
                return "label";
            case com.google.javascript.rhino.Node.FINALLY_PROP :
                return "finally";
            case com.google.javascript.rhino.Node.LOCALCOUNT_PROP :
                return "localcount";
            case com.google.javascript.rhino.Node.TARGETBLOCK_PROP :
                return "targetblock";
            case com.google.javascript.rhino.Node.VARIABLE_PROP :
                return "variable";
            case com.google.javascript.rhino.Node.LASTUSE_PROP :
                return "lastuse";
            case com.google.javascript.rhino.Node.ISNUMBER_PROP :
                return "isnumber";
            case com.google.javascript.rhino.Node.DIRECTCALL_PROP :
                return "directcall";
            case com.google.javascript.rhino.Node.SPECIALCALL_PROP :
                return "specialcall";
            case com.google.javascript.rhino.Node.DEBUGSOURCE_PROP :
                return "debugsource";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.SKIP_INDEXES_PROP :
                return "skip_indexes";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.MEMBER_TYPE_PROP :
                return "member_type";
            case com.google.javascript.rhino.Node.NAME_PROP :
                return "name";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            default :
                com.google.javascript.rhino.Kit.codeBug();
        }
        return null;
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && (getDouble() == ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble());
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private static class PropListItem implements java.io.Serializable {
        private static final long serialVersionUID = 1L;

        final com.google.javascript.rhino.Node.PropListItem next;

        final int type;

        final int intValue;

        final java.lang.Object objectValue;

        PropListItem(int type, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            this(type, intValue, null, next);
        }

        PropListItem(int type, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            this(type, 0, objectValue, next);
        }

        PropListItem(int type, int intValue, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            this.type = type;
            this.intValue = intValue;
            this.objectValue = objectValue;
            this.next = next;
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        if (last != null) {
            last.next = children;
        }
        last = children.getLastSibling();
        if (first == null) {
            first = children;
        }
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node != null, "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.parent = this;
        newChild.next = node.next;
        node.next = newChild;
        if (last == node) {
            last = newChild;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.type)) {
            x = x.next;
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.type == propType) {
            return item.next;
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.next, propType);
            if (result != item.next) {
                return new com.google.javascript.rhino.Node.PropListItem(item.type, item.intValue, item.objectValue, result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.objectValue;
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.intValue;
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            com.google.javascript.rhino.Kit.codeBug();
        }
        return item.intValue;
    }

    public void putProp(int propType, java.lang.Object value) {
        removeProp(propType);
        if (value != null) {
            propListHead = new com.google.javascript.rhino.Node.PropListItem(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = new com.google.javascript.rhino.Node.PropListItem(propType, value, propListHead);
        }
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.next) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.next) {
            count--;
            keys[count] = x.type;
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        if (com.google.javascript.rhino.Token.printTrees) {
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            toString(sb, printSource, printAnnotations, printType);
            return sb.toString();
        }
        return java.lang.String.valueOf(type);
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        if (com.google.javascript.rhino.Token.printTrees) {
            sb.append(com.google.javascript.rhino.Token.name(type));
            if (this instanceof com.google.javascript.rhino.Node.StringNode) {
                sb.append(' ');
                sb.append(getString());
            } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
                sb.append(' ');
                if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                    sb.append("<invalid>");
                } else {
                    sb.append(first.getString());
                }
            } else if (this instanceof com.google.javascript.rhino.ScriptOrFnNode) {
                com.google.javascript.rhino.ScriptOrFnNode sof = ((com.google.javascript.rhino.ScriptOrFnNode) (this));
                if (this instanceof com.google.javascript.rhino.FunctionNode) {
                    com.google.javascript.rhino.FunctionNode fn = ((com.google.javascript.rhino.FunctionNode) (this));
                    sb.append(' ');
                    sb.append(fn.getFunctionName());
                }
                if (printSource) {
                    sb.append(" [source name: ");
                    sb.append(sof.getSourceName());
                    sb.append("] [encoded source length: ");
                    sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());
                    sb.append("] [base line: ");
                    sb.append(sof.getBaseLineno());
                    sb.append("] [end line: ");
                    sb.append(sof.getEndLineno());
                    sb.append(']');
                }
            } else if (type == com.google.javascript.rhino.Token.NUMBER) {
                sb.append(' ');
                sb.append(getDouble());
            }
            if (printSource) {
                int lineno = getLineno();
                if (lineno != (-1)) {
                    sb.append(' ');
                    sb.append(lineno);
                }
            }
            if (printAnnotations) {
                int[] keys = getSortedPropTypes();
                for (int i = 0; i < keys.length; i++) {
                    int type = keys[i];
                    com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                    sb.append(" [");
                    sb.append(com.google.javascript.rhino.Node.propToString(type));
                    sb.append(": ");
                    java.lang.String value;
                    switch (type) {
                        case com.google.javascript.rhino.Node.TARGETBLOCK_PROP :
                            value = "target block property";
                            break;
                        case com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP :
                            value = "last local block";
                            break;
                        case com.google.javascript.rhino.Node.ISNUMBER_PROP :
                            switch (x.intValue) {
                                case com.google.javascript.rhino.Node.BOTH :
                                    value = "both";
                                    break;
                                case com.google.javascript.rhino.Node.RIGHT :
                                    value = "right";
                                    break;
                                case com.google.javascript.rhino.Node.LEFT :
                                    value = "left";
                                    break;
                                default :
                                    throw com.google.javascript.rhino.Kit.codeBug();
                            }
                            break;
                        case com.google.javascript.rhino.Node.SPECIALCALL_PROP :
                            switch (x.intValue) {
                                case com.google.javascript.rhino.Node.SPECIALCALL_EVAL :
                                    value = "eval";
                                    break;
                                case com.google.javascript.rhino.Node.SPECIALCALL_WITH :
                                    value = "with";
                                    break;
                                default :
                                    throw com.google.javascript.rhino.Kit.codeBug();
                            }
                            break;
                        default :
                            java.lang.Object obj = x.objectValue;
                            boolean spoonDefaultValue = false;
                            try {
                                spoonDefaultValue = true;
                            } catch (java.lang.Exception __NopolProcessorException) {
                            }
                            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                            if (fr.inria.lille.commons.trace.RuntimeValues.instance(127).isEnabled()) {
                                fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectionStarts();
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.FIXUPS_PROP",com.google.javascript.rhino.Node.FIXUPS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.ISNUMBER_PROP",com.google.javascript.rhino.Node.ISNUMBER_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.CODEOFFSET_PROP",com.google.javascript.rhino.Node.CODEOFFSET_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.LOCAL_PROP",com.google.javascript.rhino.Node.LOCAL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_PROP",com.google.javascript.rhino.Node.SPECIALCALL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.TARGET_PROP",com.google.javascript.rhino.Node.TARGET_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.OBJECT_IDS_PROP",com.google.javascript.rhino.Node.OBJECT_IDS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.LOCALCOUNT_PROP",com.google.javascript.rhino.Node.LOCALCOUNT_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.FUNCTION_PROP",com.google.javascript.rhino.Node.FUNCTION_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.LABEL_PROP",com.google.javascript.rhino.Node.LABEL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.BOTH",com.google.javascript.rhino.Node.BOTH);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.MEMBER_TYPE_PROP",com.google.javascript.rhino.Node.MEMBER_TYPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_WITH",com.google.javascript.rhino.Node.SPECIALCALL_WITH);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.TYPE_PROP",com.google.javascript.rhino.Node.TYPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.PROPERTY_FLAG",com.google.javascript.rhino.Node.PROPERTY_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("obj != null",obj != null);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.DEFAULT_PROP",com.google.javascript.rhino.Node.DEFAULT_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.SPECIAL_PROP_PROP",com.google.javascript.rhino.Node.SPECIAL_PROP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.CONTINUE_PROP",com.google.javascript.rhino.Node.CONTINUE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.DIRECTCALL_PROP",com.google.javascript.rhino.Node.DIRECTCALL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.LABEL_ID_PROP",com.google.javascript.rhino.Node.LABEL_ID_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.ENUM_PROP",com.google.javascript.rhino.Node.ENUM_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.TARGETBLOCK_PROP",com.google.javascript.rhino.Node.TARGETBLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.TEMP_PROP",com.google.javascript.rhino.Node.TEMP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.USES_PROP",com.google.javascript.rhino.Node.USES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.VARS_PROP",com.google.javascript.rhino.Node.VARS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.REGEXP_PROP",com.google.javascript.rhino.Node.REGEXP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.LASTUSE_PROP",com.google.javascript.rhino.Node.LASTUSE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.NAME_PROP",com.google.javascript.rhino.Node.NAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.LEFT",com.google.javascript.rhino.Node.LEFT);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.ATTRIBUTE_FLAG",com.google.javascript.rhino.Node.ATTRIBUTE_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.FINALLY_PROP",com.google.javascript.rhino.Node.FINALLY_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.NON_SPECIALCALL",com.google.javascript.rhino.Node.NON_SPECIALCALL);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.CASEARRAY_PROP",com.google.javascript.rhino.Node.CASEARRAY_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.DESCENDANTS_FLAG",com.google.javascript.rhino.Node.DESCENDANTS_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.CATCH_SCOPE_PROP",com.google.javascript.rhino.Node.CATCH_SCOPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP",com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.CASES_PROP",com.google.javascript.rhino.Node.CASES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.VARIABLE_PROP",com.google.javascript.rhino.Node.VARIABLE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.SKIP_INDEXES_PROP",com.google.javascript.rhino.Node.SKIP_INDEXES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.RIGHT",com.google.javascript.rhino.Node.RIGHT);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_EVAL",com.google.javascript.rhino.Node.SPECIALCALL_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.DEBUGSOURCE_PROP",com.google.javascript.rhino.Node.DEBUGSOURCE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("obj",obj);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.BREAK_PROP",com.google.javascript.rhino.Node.BREAK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                if (com.google.javascript.rhino.Node.this.last!=null) {
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                }
                                if (com.google.javascript.rhino.Node.this.parent!=null) {
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                }
                                if (com.google.javascript.rhino.Node.this.next!=null) {
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                }
                                if (com.google.javascript.rhino.Node.this.first!=null) {
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                }
                                fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectOutput(runtimeAngelicValue);
                                fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectionEnds();
                            }
                            if (runtimeAngelicValue) if (obj != null) {
                                value = obj.toString();
                            } else {
                                value = java.lang.String.valueOf(x.intValue);
                            }
                            break;
                    }
                    sb.append(value);
                    sb.append(']');
                }
            }
            if (printType) {
                if (jsType != null) {
                    java.lang.String jsTypeString = jsType.toString();
                    if (jsTypeString != null) {
                        sb.append(" : ");
                        sb.append(jsTypeString);
                    }
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        if (com.google.javascript.rhino.Token.printTrees) {
            for (int i = 0; i != level; ++i) {
                sb.append("    ");
            }
            sb.append(n.toString());
            sb.append('\n');
            for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
                com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
            }
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourcePositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourcePositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        public boolean hasNext() {
            return current != null;
        }

        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                public boolean hasNext() {
                    return cur != null;
                }

                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Class getNodeClass(com.google.javascript.rhino.Node n) {
        java.lang.Class c = n.getClass();
        if ((c == com.google.javascript.rhino.FunctionNode.class) || (c == com.google.javascript.rhino.ScriptOrFnNode.class)) {
            return com.google.javascript.rhino.Node.class;
        }
        return c;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public static java.lang.String tokenToName(int token) {
        switch (token) {
            case com.google.javascript.rhino.Token.ERROR :
                return "error";
            case com.google.javascript.rhino.Token.EOF :
                return "eof";
            case com.google.javascript.rhino.Token.EOL :
                return "eol";
            case com.google.javascript.rhino.Token.ENTERWITH :
                return "enterwith";
            case com.google.javascript.rhino.Token.LEAVEWITH :
                return "leavewith";
            case com.google.javascript.rhino.Token.RETURN :
                return "return";
            case com.google.javascript.rhino.Token.GOTO :
                return "goto";
            case com.google.javascript.rhino.Token.IFEQ :
                return "ifeq";
            case com.google.javascript.rhino.Token.IFNE :
                return "ifne";
            case com.google.javascript.rhino.Token.SETNAME :
                return "setname";
            case com.google.javascript.rhino.Token.BITOR :
                return "bitor";
            case com.google.javascript.rhino.Token.BITXOR :
                return "bitxor";
            case com.google.javascript.rhino.Token.BITAND :
                return "bitand";
            case com.google.javascript.rhino.Token.EQ :
                return "eq";
            case com.google.javascript.rhino.Token.NE :
                return "ne";
            case com.google.javascript.rhino.Token.LT :
                return "lt";
            case com.google.javascript.rhino.Token.LE :
                return "le";
            case com.google.javascript.rhino.Token.GT :
                return "gt";
            case com.google.javascript.rhino.Token.GE :
                return "ge";
            case com.google.javascript.rhino.Token.LSH :
                return "lsh";
            case com.google.javascript.rhino.Token.RSH :
                return "rsh";
            case com.google.javascript.rhino.Token.URSH :
                return "ursh";
            case com.google.javascript.rhino.Token.ADD :
                return "add";
            case com.google.javascript.rhino.Token.SUB :
                return "sub";
            case com.google.javascript.rhino.Token.MUL :
                return "mul";
            case com.google.javascript.rhino.Token.DIV :
                return "div";
            case com.google.javascript.rhino.Token.MOD :
                return "mod";
            case com.google.javascript.rhino.Token.BITNOT :
                return "bitnot";
            case com.google.javascript.rhino.Token.NEG :
                return "neg";
            case com.google.javascript.rhino.Token.NEW :
                return "new";
            case com.google.javascript.rhino.Token.DELPROP :
                return "delprop";
            case com.google.javascript.rhino.Token.TYPEOF :
                return "typeof";
            case com.google.javascript.rhino.Token.GETPROP :
                return "getprop";
            case com.google.javascript.rhino.Token.SETPROP :
                return "setprop";
            case com.google.javascript.rhino.Token.GETELEM :
                return "getelem";
            case com.google.javascript.rhino.Token.SETELEM :
                return "setelem";
            case com.google.javascript.rhino.Token.CALL :
                return "call";
            case com.google.javascript.rhino.Token.NAME :
                return "name";
            case com.google.javascript.rhino.Token.NUMBER :
                return "number";
            case com.google.javascript.rhino.Token.STRING :
                return "string";
            case com.google.javascript.rhino.Token.NULL :
                return "null";
            case com.google.javascript.rhino.Token.THIS :
                return "this";
            case com.google.javascript.rhino.Token.FALSE :
                return "false";
            case com.google.javascript.rhino.Token.TRUE :
                return "true";
            case com.google.javascript.rhino.Token.SHEQ :
                return "sheq";
            case com.google.javascript.rhino.Token.SHNE :
                return "shne";
            case com.google.javascript.rhino.Token.REGEXP :
                return "regexp";
            case com.google.javascript.rhino.Token.POS :
                return "pos";
            case com.google.javascript.rhino.Token.BINDNAME :
                return "bindname";
            case com.google.javascript.rhino.Token.THROW :
                return "throw";
            case com.google.javascript.rhino.Token.IN :
                return "in";
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return "instanceof";
            case com.google.javascript.rhino.Token.GETVAR :
                return "getvar";
            case com.google.javascript.rhino.Token.SETVAR :
                return "setvar";
            case com.google.javascript.rhino.Token.TRY :
                return "try";
            case com.google.javascript.rhino.Token.TYPEOFNAME :
                return "typeofname";
            case com.google.javascript.rhino.Token.THISFN :
                return "thisfn";
            case com.google.javascript.rhino.Token.SEMI :
                return "semi";
            case com.google.javascript.rhino.Token.LB :
                return "lb";
            case com.google.javascript.rhino.Token.RB :
                return "rb";
            case com.google.javascript.rhino.Token.LC :
                return "lc";
            case com.google.javascript.rhino.Token.RC :
                return "rc";
            case com.google.javascript.rhino.Token.LP :
                return "lp";
            case com.google.javascript.rhino.Token.RP :
                return "rp";
            case com.google.javascript.rhino.Token.COMMA :
                return "comma";
            case com.google.javascript.rhino.Token.ASSIGN :
                return "assign";
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return "assign_bitor";
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return "assign_bitxor";
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return "assign_bitand";
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return "assign_lsh";
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return "assign_rsh";
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return "assign_ursh";
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return "assign_add";
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return "assign_sub";
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return "assign_mul";
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return "assign_div";
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return "assign_mod";
            case com.google.javascript.rhino.Token.HOOK :
                return "hook";
            case com.google.javascript.rhino.Token.COLON :
                return "colon";
            case com.google.javascript.rhino.Token.OR :
                return "or";
            case com.google.javascript.rhino.Token.AND :
                return "and";
            case com.google.javascript.rhino.Token.INC :
                return "inc";
            case com.google.javascript.rhino.Token.DEC :
                return "dec";
            case com.google.javascript.rhino.Token.DOT :
                return "dot";
            case com.google.javascript.rhino.Token.FUNCTION :
                return "function";
            case com.google.javascript.rhino.Token.EXPORT :
                return "export";
            case com.google.javascript.rhino.Token.IMPORT :
                return "import";
            case com.google.javascript.rhino.Token.IF :
                return "if";
            case com.google.javascript.rhino.Token.ELSE :
                return "else";
            case com.google.javascript.rhino.Token.SWITCH :
                return "switch";
            case com.google.javascript.rhino.Token.CASE :
                return "case";
            case com.google.javascript.rhino.Token.DEFAULT :
                return "default";
            case com.google.javascript.rhino.Token.WHILE :
                return "while";
            case com.google.javascript.rhino.Token.DO :
                return "do";
            case com.google.javascript.rhino.Token.FOR :
                return "for";
            case com.google.javascript.rhino.Token.BREAK :
                return "break";
            case com.google.javascript.rhino.Token.CONTINUE :
                return "continue";
            case com.google.javascript.rhino.Token.VAR :
                return "var";
            case com.google.javascript.rhino.Token.WITH :
                return "with";
            case com.google.javascript.rhino.Token.CATCH :
                return "catch";
            case com.google.javascript.rhino.Token.FINALLY :
                return "finally";
            case com.google.javascript.rhino.Token.RESERVED :
                return "reserved";
            case com.google.javascript.rhino.Token.NOT :
                return "not";
            case com.google.javascript.rhino.Token.VOID :
                return "void";
            case com.google.javascript.rhino.Token.BLOCK :
                return "block";
            case com.google.javascript.rhino.Token.ARRAYLIT :
                return "arraylit";
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return "objectlit";
            case com.google.javascript.rhino.Token.LABEL :
                return "label";
            case com.google.javascript.rhino.Token.TARGET :
                return "target";
            case com.google.javascript.rhino.Token.LOOP :
                return "loop";
            case com.google.javascript.rhino.Token.EXPR_VOID :
                return "expr_void";
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                return "expr_result";
            case com.google.javascript.rhino.Token.JSR :
                return "jsr";
            case com.google.javascript.rhino.Token.SCRIPT :
                return "script";
            case com.google.javascript.rhino.Token.EMPTY :
                return "empty";
            case com.google.javascript.rhino.Token.GET_REF :
                return "get_ref";
            case com.google.javascript.rhino.Token.REF_SPECIAL :
                return "ref_special";
        }
        return ("<unknown=" + token) + ">";
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (com.google.javascript.rhino.Node.getNodeClass(this) != com.google.javascript.rhino.Node.getNodeClass(node))) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if (type == com.google.javascript.rhino.Token.ARRAYLIT) {
            try {
                int[] indices1 = ((int[]) (getProp(com.google.javascript.rhino.Node.SKIP_INDEXES_PROP)));
                int[] indices2 = ((int[]) (node.getProp(com.google.javascript.rhino.Node.SKIP_INDEXES_PROP)));
                if (indices1 == null) {
                    if (indices2 != null) {
                        return false;
                    }
                } else if (indices2 == null) {
                    return false;
                } else if (indices1.length != indices2.length) {
                    return false;
                } else {
                    for (int i = 0; i < indices1.length; i++) {
                        if (indices1[i] != indices2[i]) {
                            return false;
                        }
                    }
                }
            } catch (java.lang.Exception e) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.STRING) {
            int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            if (quoted1 != quoted2) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean hasSideEffects() {
        switch (type) {
            case com.google.javascript.rhino.Token.EXPR_VOID :
            case com.google.javascript.rhino.Token.COMMA :
                if (last != null) {
                    return last.hasSideEffects();
                } else {
                    return true;
                }
            case com.google.javascript.rhino.Token.HOOK :
                if (((first == null) || (first.next == null)) || (first.next.next == null)) {
                    com.google.javascript.rhino.Kit.codeBug();
                }
                return first.next.hasSideEffects() && first.next.next.hasSideEffects();
            case com.google.javascript.rhino.Token.ERROR :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ENTERWITH :
            case com.google.javascript.rhino.Token.LEAVEWITH :
            case com.google.javascript.rhino.Token.RETURN :
            case com.google.javascript.rhino.Token.GOTO :
            case com.google.javascript.rhino.Token.IFEQ :
            case com.google.javascript.rhino.Token.IFNE :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.SETNAME :
            case com.google.javascript.rhino.Token.SETPROP :
            case com.google.javascript.rhino.Token.SETELEM :
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.THROW :
            case com.google.javascript.rhino.Token.RETHROW :
            case com.google.javascript.rhino.Token.SETVAR :
            case com.google.javascript.rhino.Token.CATCH_SCOPE :
            case com.google.javascript.rhino.Token.RETURN_RESULT :
            case com.google.javascript.rhino.Token.SET_REF :
            case com.google.javascript.rhino.Token.DEL_REF :
            case com.google.javascript.rhino.Token.REF_CALL :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SEMI :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.EXPORT :
            case com.google.javascript.rhino.Token.IMPORT :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.ELSE :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.CONST :
            case com.google.javascript.rhino.Token.WITH :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.FINALLY :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.TARGET :
            case com.google.javascript.rhino.Token.LOOP :
            case com.google.javascript.rhino.Token.JSR :
            case com.google.javascript.rhino.Token.SETPROP_OP :
            case com.google.javascript.rhino.Token.SETELEM_OP :
            case com.google.javascript.rhino.Token.LOCAL_BLOCK :
            case com.google.javascript.rhino.Token.SET_REF_OP :
                return true;
            default :
                return false;
        }
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        com.google.javascript.rhino.Kit.codeBug();
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }
}
[11886615] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659912019826
GPR[EPVATF]-1659912020091
GPR[SPS]-1659912020091
[11887500] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1024.
GPR[EPS]-1659912020711
GPR[ESUN]-1659912020711
GPR[SSUN]-1659912020711
2433571
GPR[ESUN]-1659912020943
GPR[SSUN]-1659912020943
2433571
GPR[SPVATF]-1659912021175
GPR[EPVATF]-1659912021429
GPR[SPS]-1659912021429
[11888901] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int LOCAL_BLOCK_PROP = -3;

    public static final int OBJECT_IDS_PROP = -2;

    public static final int CATCH_SCOPE_PROP = -1;

    public static final int LABEL_ID_PROP = 0;

    public static final int TARGET_PROP = 1;

    public static final int BREAK_PROP = 2;

    public static final int CONTINUE_PROP = 3;

    public static final int ENUM_PROP = 4;

    public static final int FUNCTION_PROP = 5;

    public static final int TEMP_PROP = 6;

    public static final int LOCAL_PROP = 7;

    public static final int CODEOFFSET_PROP = 8;

    public static final int FIXUPS_PROP = 9;

    public static final int VARS_PROP = 10;

    public static final int USES_PROP = 11;

    public static final int REGEXP_PROP = 12;

    public static final int CASES_PROP = 13;

    public static final int DEFAULT_PROP = 14;

    public static final int CASEARRAY_PROP = 15;

    public static final int SOURCENAME_PROP = 16;

    public static final int TYPE_PROP = 17;

    public static final int SPECIAL_PROP_PROP = 18;

    public static final int LABEL_PROP = 19;

    public static final int FINALLY_PROP = 20;

    public static final int LOCALCOUNT_PROP = 21;

    public static final int TARGETBLOCK_PROP = 22;

    public static final int VARIABLE_PROP = 23;

    public static final int LASTUSE_PROP = 24;

    public static final int ISNUMBER_PROP = 25;

    public static final int DIRECTCALL_PROP = 26;

    public static final int SPECIALCALL_PROP = 27;

    public static final int DEBUGSOURCE_PROP = 28;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int SKIP_INDEXES_PROP = 31;

    public static final int INCRDECR_PROP = 32;

    public static final int MEMBER_TYPE_PROP = 33;

    public static final int NAME_PROP = 34;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int LAST_PROP = 50;

    public static final int BOTH = 0;

    public static final int LEFT = 1;

    public static final int RIGHT = 2;

    public static final int NON_SPECIALCALL = 0;

    public static final int SPECIALCALL_EVAL = 1;

    public static final int SPECIALCALL_WITH = 2;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    public static final int PROPERTY_FLAG = 0x1;

    public static final int ATTRIBUTE_FLAG = 0x2;

    public static final int DESCENDANTS_FLAG = 0x4;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP :
                return "local_block";
            case com.google.javascript.rhino.Node.OBJECT_IDS_PROP :
                return "object_ids_prop";
            case com.google.javascript.rhino.Node.CATCH_SCOPE_PROP :
                return "catch_scope_prop";
            case com.google.javascript.rhino.Node.LABEL_ID_PROP :
                return "label_id_prop";
            case com.google.javascript.rhino.Node.TARGET_PROP :
                return "target";
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.BREAK_PROP :
                return "break";
            case com.google.javascript.rhino.Node.CONTINUE_PROP :
                return "continue";
            case com.google.javascript.rhino.Node.ENUM_PROP :
                return "enum";
            case com.google.javascript.rhino.Node.FUNCTION_PROP :
                return "function";
            case com.google.javascript.rhino.Node.TEMP_PROP :
                return "temp";
            case com.google.javascript.rhino.Node.LOCAL_PROP :
                return "local";
            case com.google.javascript.rhino.Node.CODEOFFSET_PROP :
                return "codeoffset";
            case com.google.javascript.rhino.Node.FIXUPS_PROP :
                return "fixups";
            case com.google.javascript.rhino.Node.VARS_PROP :
                return "vars";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.USES_PROP :
                return "uses";
            case com.google.javascript.rhino.Node.REGEXP_PROP :
                return "regexp";
            case com.google.javascript.rhino.Node.CASES_PROP :
                return "cases";
            case com.google.javascript.rhino.Node.DEFAULT_PROP :
                return "default";
            case com.google.javascript.rhino.Node.CASEARRAY_PROP :
                return "casearray";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.TYPE_PROP :
                return "type";
            case com.google.javascript.rhino.Node.SPECIAL_PROP_PROP :
                return "special_prop";
            case com.google.javascript.rhino.Node.LABEL_PROP :
                return "label";
            case com.google.javascript.rhino.Node.FINALLY_PROP :
                return "finally";
            case com.google.javascript.rhino.Node.LOCALCOUNT_PROP :
                return "localcount";
            case com.google.javascript.rhino.Node.TARGETBLOCK_PROP :
                return "targetblock";
            case com.google.javascript.rhino.Node.VARIABLE_PROP :
                return "variable";
            case com.google.javascript.rhino.Node.LASTUSE_PROP :
                return "lastuse";
            case com.google.javascript.rhino.Node.ISNUMBER_PROP :
                return "isnumber";
            case com.google.javascript.rhino.Node.DIRECTCALL_PROP :
                return "directcall";
            case com.google.javascript.rhino.Node.SPECIALCALL_PROP :
                return "specialcall";
            case com.google.javascript.rhino.Node.DEBUGSOURCE_PROP :
                return "debugsource";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.SKIP_INDEXES_PROP :
                return "skip_indexes";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.MEMBER_TYPE_PROP :
                return "member_type";
            case com.google.javascript.rhino.Node.NAME_PROP :
                return "name";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            default :
                com.google.javascript.rhino.Kit.codeBug();
        }
        return null;
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && (getDouble() == ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble());
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private static class PropListItem implements java.io.Serializable {
        private static final long serialVersionUID = 1L;

        final com.google.javascript.rhino.Node.PropListItem next;

        final int type;

        final int intValue;

        final java.lang.Object objectValue;

        PropListItem(int type, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            this(type, intValue, null, next);
        }

        PropListItem(int type, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            this(type, 0, objectValue, next);
        }

        PropListItem(int type, int intValue, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            this.type = type;
            this.intValue = intValue;
            this.objectValue = objectValue;
            this.next = next;
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        if (last != null) {
            last.next = children;
        }
        last = children.getLastSibling();
        if (first == null) {
            first = children;
        }
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node != null, "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.parent = this;
        newChild.next = node.next;
        node.next = newChild;
        if (last == node) {
            last = newChild;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.type)) {
            x = x.next;
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.type == propType) {
            return item.next;
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.next, propType);
            if (result != item.next) {
                return new com.google.javascript.rhino.Node.PropListItem(item.type, item.intValue, item.objectValue, result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.objectValue;
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.intValue;
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            com.google.javascript.rhino.Kit.codeBug();
        }
        return item.intValue;
    }

    public void putProp(int propType, java.lang.Object value) {
        removeProp(propType);
        if (value != null) {
            propListHead = new com.google.javascript.rhino.Node.PropListItem(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = new com.google.javascript.rhino.Node.PropListItem(propType, value, propListHead);
        }
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.next) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.next) {
            count--;
            keys[count] = x.type;
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        if (com.google.javascript.rhino.Token.printTrees) {
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            toString(sb, printSource, printAnnotations, printType);
            return sb.toString();
        }
        return java.lang.String.valueOf(type);
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        if (com.google.javascript.rhino.Token.printTrees) {
            sb.append(com.google.javascript.rhino.Token.name(type));
            if (this instanceof com.google.javascript.rhino.Node.StringNode) {
                sb.append(' ');
                sb.append(getString());
            } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
                sb.append(' ');
                if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                    sb.append("<invalid>");
                } else {
                    sb.append(first.getString());
                }
            } else if (this instanceof com.google.javascript.rhino.ScriptOrFnNode) {
                com.google.javascript.rhino.ScriptOrFnNode sof = ((com.google.javascript.rhino.ScriptOrFnNode) (this));
                if (this instanceof com.google.javascript.rhino.FunctionNode) {
                    com.google.javascript.rhino.FunctionNode fn = ((com.google.javascript.rhino.FunctionNode) (this));
                    sb.append(' ');
                    sb.append(fn.getFunctionName());
                }
                if (printSource) {
                    sb.append(" [source name: ");
                    sb.append(sof.getSourceName());
                    sb.append("] [encoded source length: ");
                    sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());
                    sb.append("] [base line: ");
                    sb.append(sof.getBaseLineno());
                    sb.append("] [end line: ");
                    sb.append(sof.getEndLineno());
                    sb.append(']');
                }
            } else if (type == com.google.javascript.rhino.Token.NUMBER) {
                sb.append(' ');
                sb.append(getDouble());
            }
            if (printSource) {
                int lineno = getLineno();
                if (lineno != (-1)) {
                    sb.append(' ');
                    sb.append(lineno);
                }
            }
            if (printAnnotations) {
                int[] keys = getSortedPropTypes();
                for (int i = 0; i < keys.length; i++) {
                    int type = keys[i];
                    com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                    sb.append(" [");
                    sb.append(com.google.javascript.rhino.Node.propToString(type));
                    sb.append(": ");
                    java.lang.String value;
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(129).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.FIXUPS_PROP",com.google.javascript.rhino.Node.FIXUPS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.ISNUMBER_PROP",com.google.javascript.rhino.Node.ISNUMBER_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.CODEOFFSET_PROP",com.google.javascript.rhino.Node.CODEOFFSET_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.LOCAL_PROP",com.google.javascript.rhino.Node.LOCAL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_PROP",com.google.javascript.rhino.Node.SPECIALCALL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.TARGET_PROP",com.google.javascript.rhino.Node.TARGET_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.OBJECT_IDS_PROP",com.google.javascript.rhino.Node.OBJECT_IDS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.LOCALCOUNT_PROP",com.google.javascript.rhino.Node.LOCALCOUNT_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.FUNCTION_PROP",com.google.javascript.rhino.Node.FUNCTION_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.LABEL_PROP",com.google.javascript.rhino.Node.LABEL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.BOTH",com.google.javascript.rhino.Node.BOTH);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.MEMBER_TYPE_PROP",com.google.javascript.rhino.Node.MEMBER_TYPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_WITH",com.google.javascript.rhino.Node.SPECIALCALL_WITH);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.TYPE_PROP",com.google.javascript.rhino.Node.TYPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.PROPERTY_FLAG",com.google.javascript.rhino.Node.PROPERTY_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.DEFAULT_PROP",com.google.javascript.rhino.Node.DEFAULT_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.SPECIAL_PROP_PROP",com.google.javascript.rhino.Node.SPECIAL_PROP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.CONTINUE_PROP",com.google.javascript.rhino.Node.CONTINUE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.DIRECTCALL_PROP",com.google.javascript.rhino.Node.DIRECTCALL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.LABEL_ID_PROP",com.google.javascript.rhino.Node.LABEL_ID_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.ENUM_PROP",com.google.javascript.rhino.Node.ENUM_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.TARGETBLOCK_PROP",com.google.javascript.rhino.Node.TARGETBLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.TEMP_PROP",com.google.javascript.rhino.Node.TEMP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.USES_PROP",com.google.javascript.rhino.Node.USES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.VARS_PROP",com.google.javascript.rhino.Node.VARS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.REGEXP_PROP",com.google.javascript.rhino.Node.REGEXP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.LASTUSE_PROP",com.google.javascript.rhino.Node.LASTUSE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.NAME_PROP",com.google.javascript.rhino.Node.NAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.LEFT",com.google.javascript.rhino.Node.LEFT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.ATTRIBUTE_FLAG",com.google.javascript.rhino.Node.ATTRIBUTE_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.FINALLY_PROP",com.google.javascript.rhino.Node.FINALLY_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.NON_SPECIALCALL",com.google.javascript.rhino.Node.NON_SPECIALCALL);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.CASEARRAY_PROP",com.google.javascript.rhino.Node.CASEARRAY_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.DESCENDANTS_FLAG",com.google.javascript.rhino.Node.DESCENDANTS_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.CATCH_SCOPE_PROP",com.google.javascript.rhino.Node.CATCH_SCOPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP",com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.CASES_PROP",com.google.javascript.rhino.Node.CASES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.VARIABLE_PROP",com.google.javascript.rhino.Node.VARIABLE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.SKIP_INDEXES_PROP",com.google.javascript.rhino.Node.SKIP_INDEXES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.RIGHT",com.google.javascript.rhino.Node.RIGHT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_EVAL",com.google.javascript.rhino.Node.SPECIALCALL_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.DEBUGSOURCE_PROP",com.google.javascript.rhino.Node.DEBUGSOURCE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.BREAK_PROP",com.google.javascript.rhino.Node.BREAK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        if (com.google.javascript.rhino.Node.this.last!=null) {
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        }
                        if (com.google.javascript.rhino.Node.this.parent!=null) {
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        }
                        if (com.google.javascript.rhino.Node.this.next!=null) {
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        }
                        if (com.google.javascript.rhino.Node.this.first!=null) {
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        }
                        fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(129).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        switch (type) {
                            case com.google.javascript.rhino.Node.TARGETBLOCK_PROP :
                                value = "target block property";
                                break;
                            case com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP :
                                value = "last local block";
                                break;
                            case com.google.javascript.rhino.Node.ISNUMBER_PROP :
                                switch (x.intValue) {
                                    case com.google.javascript.rhino.Node.BOTH :
                                        value = "both";
                                        break;
                                    case com.google.javascript.rhino.Node.RIGHT :
                                        value = "right";
                                        break;
                                    case com.google.javascript.rhino.Node.LEFT :
                                        value = "left";
                                        break;
                                    default :
                                        throw com.google.javascript.rhino.Kit.codeBug();
                                }
                                break;
                            case com.google.javascript.rhino.Node.SPECIALCALL_PROP :
                                switch (x.intValue) {
                                    case com.google.javascript.rhino.Node.SPECIALCALL_EVAL :
                                        value = "eval";
                                        break;
                                    case com.google.javascript.rhino.Node.SPECIALCALL_WITH :
                                        value = "with";
                                        break;
                                    default :
                                        throw com.google.javascript.rhino.Kit.codeBug();
                                }
                                break;
                            default :
                                java.lang.Object obj = x.objectValue;
                                if (obj != null) {
                                    value = obj.toString();
                                } else {
                                    value = java.lang.String.valueOf(x.intValue);
                                }
                                break;
                        }

                    sb.append(value);
                    sb.append(']');
                }
            }
            if (printType) {
                if (jsType != null) {
                    java.lang.String jsTypeString = jsType.toString();
                    if (jsTypeString != null) {
                        sb.append(" : ");
                        sb.append(jsTypeString);
                    }
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        if (com.google.javascript.rhino.Token.printTrees) {
            for (int i = 0; i != level; ++i) {
                sb.append("    ");
            }
            sb.append(n.toString());
            sb.append('\n');
            for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
                com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
            }
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourcePositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourcePositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        public boolean hasNext() {
            return current != null;
        }

        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                public boolean hasNext() {
                    return cur != null;
                }

                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Class getNodeClass(com.google.javascript.rhino.Node n) {
        java.lang.Class c = n.getClass();
        if ((c == com.google.javascript.rhino.FunctionNode.class) || (c == com.google.javascript.rhino.ScriptOrFnNode.class)) {
            return com.google.javascript.rhino.Node.class;
        }
        return c;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public static java.lang.String tokenToName(int token) {
        switch (token) {
            case com.google.javascript.rhino.Token.ERROR :
                return "error";
            case com.google.javascript.rhino.Token.EOF :
                return "eof";
            case com.google.javascript.rhino.Token.EOL :
                return "eol";
            case com.google.javascript.rhino.Token.ENTERWITH :
                return "enterwith";
            case com.google.javascript.rhino.Token.LEAVEWITH :
                return "leavewith";
            case com.google.javascript.rhino.Token.RETURN :
                return "return";
            case com.google.javascript.rhino.Token.GOTO :
                return "goto";
            case com.google.javascript.rhino.Token.IFEQ :
                return "ifeq";
            case com.google.javascript.rhino.Token.IFNE :
                return "ifne";
            case com.google.javascript.rhino.Token.SETNAME :
                return "setname";
            case com.google.javascript.rhino.Token.BITOR :
                return "bitor";
            case com.google.javascript.rhino.Token.BITXOR :
                return "bitxor";
            case com.google.javascript.rhino.Token.BITAND :
                return "bitand";
            case com.google.javascript.rhino.Token.EQ :
                return "eq";
            case com.google.javascript.rhino.Token.NE :
                return "ne";
            case com.google.javascript.rhino.Token.LT :
                return "lt";
            case com.google.javascript.rhino.Token.LE :
                return "le";
            case com.google.javascript.rhino.Token.GT :
                return "gt";
            case com.google.javascript.rhino.Token.GE :
                return "ge";
            case com.google.javascript.rhino.Token.LSH :
                return "lsh";
            case com.google.javascript.rhino.Token.RSH :
                return "rsh";
            case com.google.javascript.rhino.Token.URSH :
                return "ursh";
            case com.google.javascript.rhino.Token.ADD :
                return "add";
            case com.google.javascript.rhino.Token.SUB :
                return "sub";
            case com.google.javascript.rhino.Token.MUL :
                return "mul";
            case com.google.javascript.rhino.Token.DIV :
                return "div";
            case com.google.javascript.rhino.Token.MOD :
                return "mod";
            case com.google.javascript.rhino.Token.BITNOT :
                return "bitnot";
            case com.google.javascript.rhino.Token.NEG :
                return "neg";
            case com.google.javascript.rhino.Token.NEW :
                return "new";
            case com.google.javascript.rhino.Token.DELPROP :
                return "delprop";
            case com.google.javascript.rhino.Token.TYPEOF :
                return "typeof";
            case com.google.javascript.rhino.Token.GETPROP :
                return "getprop";
            case com.google.javascript.rhino.Token.SETPROP :
                return "setprop";
            case com.google.javascript.rhino.Token.GETELEM :
                return "getelem";
            case com.google.javascript.rhino.Token.SETELEM :
                return "setelem";
            case com.google.javascript.rhino.Token.CALL :
                return "call";
            case com.google.javascript.rhino.Token.NAME :
                return "name";
            case com.google.javascript.rhino.Token.NUMBER :
                return "number";
            case com.google.javascript.rhino.Token.STRING :
                return "string";
            case com.google.javascript.rhino.Token.NULL :
                return "null";
            case com.google.javascript.rhino.Token.THIS :
                return "this";
            case com.google.javascript.rhino.Token.FALSE :
                return "false";
            case com.google.javascript.rhino.Token.TRUE :
                return "true";
            case com.google.javascript.rhino.Token.SHEQ :
                return "sheq";
            case com.google.javascript.rhino.Token.SHNE :
                return "shne";
            case com.google.javascript.rhino.Token.REGEXP :
                return "regexp";
            case com.google.javascript.rhino.Token.POS :
                return "pos";
            case com.google.javascript.rhino.Token.BINDNAME :
                return "bindname";
            case com.google.javascript.rhino.Token.THROW :
                return "throw";
            case com.google.javascript.rhino.Token.IN :
                return "in";
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return "instanceof";
            case com.google.javascript.rhino.Token.GETVAR :
                return "getvar";
            case com.google.javascript.rhino.Token.SETVAR :
                return "setvar";
            case com.google.javascript.rhino.Token.TRY :
                return "try";
            case com.google.javascript.rhino.Token.TYPEOFNAME :
                return "typeofname";
            case com.google.javascript.rhino.Token.THISFN :
                return "thisfn";
            case com.google.javascript.rhino.Token.SEMI :
                return "semi";
            case com.google.javascript.rhino.Token.LB :
                return "lb";
            case com.google.javascript.rhino.Token.RB :
                return "rb";
            case com.google.javascript.rhino.Token.LC :
                return "lc";
            case com.google.javascript.rhino.Token.RC :
                return "rc";
            case com.google.javascript.rhino.Token.LP :
                return "lp";
            case com.google.javascript.rhino.Token.RP :
                return "rp";
            case com.google.javascript.rhino.Token.COMMA :
                return "comma";
            case com.google.javascript.rhino.Token.ASSIGN :
                return "assign";
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return "assign_bitor";
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return "assign_bitxor";
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return "assign_bitand";
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return "assign_lsh";
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return "assign_rsh";
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return "assign_ursh";
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return "assign_add";
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return "assign_sub";
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return "assign_mul";
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return "assign_div";
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return "assign_mod";
            case com.google.javascript.rhino.Token.HOOK :
                return "hook";
            case com.google.javascript.rhino.Token.COLON :
                return "colon";
            case com.google.javascript.rhino.Token.OR :
                return "or";
            case com.google.javascript.rhino.Token.AND :
                return "and";
            case com.google.javascript.rhino.Token.INC :
                return "inc";
            case com.google.javascript.rhino.Token.DEC :
                return "dec";
            case com.google.javascript.rhino.Token.DOT :
                return "dot";
            case com.google.javascript.rhino.Token.FUNCTION :
                return "function";
            case com.google.javascript.rhino.Token.EXPORT :
                return "export";
            case com.google.javascript.rhino.Token.IMPORT :
                return "import";
            case com.google.javascript.rhino.Token.IF :
                return "if";
            case com.google.javascript.rhino.Token.ELSE :
                return "else";
            case com.google.javascript.rhino.Token.SWITCH :
                return "switch";
            case com.google.javascript.rhino.Token.CASE :
                return "case";
            case com.google.javascript.rhino.Token.DEFAULT :
                return "default";
            case com.google.javascript.rhino.Token.WHILE :
                return "while";
            case com.google.javascript.rhino.Token.DO :
                return "do";
            case com.google.javascript.rhino.Token.FOR :
                return "for";
            case com.google.javascript.rhino.Token.BREAK :
                return "break";
            case com.google.javascript.rhino.Token.CONTINUE :
                return "continue";
            case com.google.javascript.rhino.Token.VAR :
                return "var";
            case com.google.javascript.rhino.Token.WITH :
                return "with";
            case com.google.javascript.rhino.Token.CATCH :
                return "catch";
            case com.google.javascript.rhino.Token.FINALLY :
                return "finally";
            case com.google.javascript.rhino.Token.RESERVED :
                return "reserved";
            case com.google.javascript.rhino.Token.NOT :
                return "not";
            case com.google.javascript.rhino.Token.VOID :
                return "void";
            case com.google.javascript.rhino.Token.BLOCK :
                return "block";
            case com.google.javascript.rhino.Token.ARRAYLIT :
                return "arraylit";
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return "objectlit";
            case com.google.javascript.rhino.Token.LABEL :
                return "label";
            case com.google.javascript.rhino.Token.TARGET :
                return "target";
            case com.google.javascript.rhino.Token.LOOP :
                return "loop";
            case com.google.javascript.rhino.Token.EXPR_VOID :
                return "expr_void";
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                return "expr_result";
            case com.google.javascript.rhino.Token.JSR :
                return "jsr";
            case com.google.javascript.rhino.Token.SCRIPT :
                return "script";
            case com.google.javascript.rhino.Token.EMPTY :
                return "empty";
            case com.google.javascript.rhino.Token.GET_REF :
                return "get_ref";
            case com.google.javascript.rhino.Token.REF_SPECIAL :
                return "ref_special";
        }
        return ("<unknown=" + token) + ">";
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (com.google.javascript.rhino.Node.getNodeClass(this) != com.google.javascript.rhino.Node.getNodeClass(node))) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if (type == com.google.javascript.rhino.Token.ARRAYLIT) {
            try {
                int[] indices1 = ((int[]) (getProp(com.google.javascript.rhino.Node.SKIP_INDEXES_PROP)));
                int[] indices2 = ((int[]) (node.getProp(com.google.javascript.rhino.Node.SKIP_INDEXES_PROP)));
                if (indices1 == null) {
                    if (indices2 != null) {
                        return false;
                    }
                } else if (indices2 == null) {
                    return false;
                } else if (indices1.length != indices2.length) {
                    return false;
                } else {
                    for (int i = 0; i < indices1.length; i++) {
                        if (indices1[i] != indices2[i]) {
                            return false;
                        }
                    }
                }
            } catch (java.lang.Exception e) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.STRING) {
            int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            if (quoted1 != quoted2) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean hasSideEffects() {
        switch (type) {
            case com.google.javascript.rhino.Token.EXPR_VOID :
            case com.google.javascript.rhino.Token.COMMA :
                if (last != null) {
                    return last.hasSideEffects();
                } else {
                    return true;
                }
            case com.google.javascript.rhino.Token.HOOK :
                if (((first == null) || (first.next == null)) || (first.next.next == null)) {
                    com.google.javascript.rhino.Kit.codeBug();
                }
                return first.next.hasSideEffects() && first.next.next.hasSideEffects();
            case com.google.javascript.rhino.Token.ERROR :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ENTERWITH :
            case com.google.javascript.rhino.Token.LEAVEWITH :
            case com.google.javascript.rhino.Token.RETURN :
            case com.google.javascript.rhino.Token.GOTO :
            case com.google.javascript.rhino.Token.IFEQ :
            case com.google.javascript.rhino.Token.IFNE :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.SETNAME :
            case com.google.javascript.rhino.Token.SETPROP :
            case com.google.javascript.rhino.Token.SETELEM :
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.THROW :
            case com.google.javascript.rhino.Token.RETHROW :
            case com.google.javascript.rhino.Token.SETVAR :
            case com.google.javascript.rhino.Token.CATCH_SCOPE :
            case com.google.javascript.rhino.Token.RETURN_RESULT :
            case com.google.javascript.rhino.Token.SET_REF :
            case com.google.javascript.rhino.Token.DEL_REF :
            case com.google.javascript.rhino.Token.REF_CALL :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SEMI :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.EXPORT :
            case com.google.javascript.rhino.Token.IMPORT :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.ELSE :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.CONST :
            case com.google.javascript.rhino.Token.WITH :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.FINALLY :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.TARGET :
            case com.google.javascript.rhino.Token.LOOP :
            case com.google.javascript.rhino.Token.JSR :
            case com.google.javascript.rhino.Token.SETPROP_OP :
            case com.google.javascript.rhino.Token.SETELEM_OP :
            case com.google.javascript.rhino.Token.LOCAL_BLOCK :
            case com.google.javascript.rhino.Token.SET_REF_OP :
                return true;
            default :
                return false;
        }
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        com.google.javascript.rhino.Kit.codeBug();
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }
}
[11888902] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659912022112
GPR[SSUN]-1659912022112
2433571
GPR[SPVATF]-1659912022347
GPR[EPVATF]-1659912022601
GPR[SPS]-1659912022601
[11890013] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:985.
GPR[EPS]-1659912023224
GPR[ESUN]-1659912023224
GPR[SSUN]-1659912023224
2433571
GPR[SPVATF]-1659912023456
GPR[EPVATF]-1659912023712
GPR[SPS]-1659912023712
[11891122] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:984.
GPR[EPS]-1659912024332
GPR[ESUN]-1659912024332
GPR[SSUN]-1659912024332
2433571
GPR[SPVATF]-1659912024564
GPR[EPVATF]-1659912024822
GPR[SPS]-1659912024822
[11892238] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:983.
GPR[EPS]-1659912025448
GPR[ESUN]-1659912025448
GPR[SSUN]-1659912025448
2433571
GPR[ESUN]-1659912025683
GPR[SSUN]-1659912025683
2433571
GPR[ESUN]-1659912025914
GPR[SSUN]-1659912025914
2433571
GPR[SPVATF]-1659912026203
GPR[EPVATF]-1659912027290
GPR[SPS]-1659912027290
[11894733] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:852.
GPR[EPS]-1659912027943
GPR[ESUN]-1659912027943
GPR[SSUN]-1659912027943
2433571
GPR[SPVATF]-1659912028174
GPR[EPVATF]-1659912028647
GPR[SPS]-1659912028647
[11896039] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:851.
GPR[EPS]-1659912029249
GPR[ESUN]-1659912029249
GPR[SSUN]-1659912029249
2433571
GPR[SPVATF]-1659912029482
GPR[EPVATF]-1659912029725
GPR[SPS]-1659912029725
[11897115] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:846.
GPR[EPS]-1659912030325
GPR[ESUN]-1659912030325
GPR[SSUN]-1659912030325
2433571
GPR[SPVATF]-1659912030557
GPR[EPVATF]-1659912030799
GPR[SPS]-1659912030799
[11898169] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:173.
GPR[EPS]-1659912031380
GPR[ESUN]-1659912031380
GPR[SSUN]-1659912031380
2433571
GPR[SPVATF]-1659912031611
GPR[EPVATF]-1659912031857
GPR[SPS]-1659912031857
[11899274] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:974.
GPR[EPS]-1659912032484
GPR[ESUN]-1659912032484
GPR[SSUN]-1659912032484
2433571
GPR[SPVATF]-1659912032717
GPR[EPVATF]-1659912032965
GPR[SPS]-1659912032965
[11900369] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:973.
GPR[EPS]-1659912033579
GPR[ESUN]-1659912033579
GPR[SSUN]-1659912033579
2433571
GPR[SPVATF]-1659912033836
GPR[EPVATF]-1659912034082
GPR[SPS]-1659912034082
[11901497] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1037.
GPR[EPS]-1659912034707
GPR[SPVATF]-1659912034708
GPR[EPVATF]-1659912034958
GPR[SPS]-1659912034958
[11902363] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1037.
GPR[EPS]-1659912035573
GPR[ESUN]-1659912035573
GPR[SSUN]-1659912035573
2433571
GPR[SPVATF]-1659912035807
GPR[EPVATF]-1659912036050
GPR[SPS]-1659912036050
[11903459] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:980.
GPR[EPS]-1659912036669
GPR[ESUN]-1659912036669
GPR[SSUN]-1659912036669
2433571
GPR[ESUN]-1659912036901
GPR[SSUN]-1659912036901
2433571
GPR[SPVATF]-1659912037131
GPR[EPVATF]-1659912037372
GPR[SPS]-1659912037372
[11904784] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:972.
GPR[EPS]-1659912037994
GPR[SPVATF]-1659912037994
GPR[EPVATF]-1659912038241
GPR[SPS]-1659912038241
[11905647] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:972.
GPR[EPS]-1659912038857
GPR[ESUN]-1659912038857
GPR[SSUN]-1659912038857
2433571
GPR[ESUN]-1659912039089
GPR[SSUN]-1659912039089
2433571
GPR[ESUN]-1659912039323
GPR[SSUN]-1659912039323
2433571
GPR[ESUN]-1659912039550
GPR[SSUN]-1659912039550
2433571
GPR[SPVATF]-1659912039778
GPR[EPVATF]-1659912040020
GPR[SPS]-1659912040020
[11907466] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:855.
GPR[EPS]-1659912040676
GPR[ESUN]-1659912040676
GPR[SSUN]-1659912040676
2433571
GPR[SPVATF]-1659912040911
GPR[EPVATF]-1659912041156
GPR[SPS]-1659912041156
[11908575] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:850.
GPR[EPS]-1659912041785
GPR[ESUN]-1659912041785
GPR[SSUN]-1659912041785
2433571
GPR[ESUN]-1659912042020
GPR[SSUN]-1659912042020
2433571
GPR[SPVATF]-1659912042252
GPR[EPVATF]-1659912042528
GPR[SPS]-1659912042528
[11909927] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:845.
GPR[EPS]-1659912043137
GPR[ESUN]-1659912043137
GPR[SSUN]-1659912043137
2433571
GPR[ESUN]-1659912043369
GPR[SSUN]-1659912043369
2433571
GPR[SPVATF]-1659912043603
GPR[EPVATF]-1659912043874
GPR[SPS]-1659912043874
[11911331] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:948.
GPR[EPS]-1659912044541
GPR[SPVATF]-1659912044542
GPR[EPVATF]-1659912044792
GPR[SPS]-1659912044792
[11912204] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:948.
GPR[EPS]-1659912045414
GPR[ESUN]-1659912045414
GPR[SSUN]-1659912045414
1187751237
GPR[ESUN]-1659912045688
GPR[SSUN]-1659912045688
2433571
GPR[SPVATF]-1659912045917
GPR[EPVATF]-1659912046160
GPR[SPS]-1659912046160
[11913595] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:938.
GPR[EPS]-1659912046805
GPR[SPVATF]-1659912046805
GPR[EPVATF]-1659912047051
GPR[SPS]-1659912047051
[11914464] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:938.
GPR[EPS]-1659912047674
GPR[ESUN]-1659912047674
GPR[SSUN]-1659912047674
2433571
GPR[ESUN]-1659912047905
GPR[SSUN]-1659912047905
2433571
GPR[SPVATF]-1659912048134
GPR[EPVATF]-1659912048377
GPR[SPS]-1659912048377
[11915779] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1036.
GPR[EPS]-1659912048989
GPR[SPVATF]-1659912048989
GPR[EPVATF]-1659912049238
GPR[SPS]-1659912049238
[11916646] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1036.
GPR[EPS]-1659912049856
GPR[ESUN]-1659912049856
GPR[SSUN]-1659912049856
2433571
GPR[SPVATF]-1659912050090
GPR[EPVATF]-1659912050341
GPR[SPS]-1659912050341
[11917751] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:978.
GPR[EPS]-1659912050961
GPR[SPVATF]-1659912050961
GPR[EPVATF]-1659912051213
GPR[SPS]-1659912051213
[11918618] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:978.
GPR[EPS]-1659912051828
GPR[ESUN]-1659912051828
GPR[SSUN]-1659912051828
2433571
GPR[SPVATF]-1659912052058
GPR[EPVATF]-1659912052300
GPR[SPS]-1659912052300
[11919756] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:970.
GPR[EPS]-1659912052966
GPR[SPVATF]-1659912052966
GPR[EPVATF]-1659912053224
GPR[SPS]-1659912053224
[11920635] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:970.
GPR[EPS]-1659912053845
GPR[ESUN]-1659912053845
GPR[SSUN]-1659912053845
2433571
GPR[SPVATF]-1659912054075
GPR[EPVATF]-1659912054319
GPR[SPS]-1659912054320
[11921733] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:935.
GPR[EPS]-1659912054943
GPR[SPVATF]-1659912054943
GPR[EPVATF]-1659912055186
GPR[SPS]-1659912055186
[11922674] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:935.
GPR[EPS]-1659912055884
GPR[ESUN]-1659912055884
GPR[SSUN]-1659912055884
2433571
GPR[SPVATF]-1659912056116
GPR[EPVATF]-1659912056373
GPR[SPS]-1659912056373
[11923767] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:934.
GPR[EPS]-1659912056977
GPR[ESUN]-1659912056977
GPR[SSUN]-1659912056977
2433571
GPR[SPVATF]-1659912057206
GPR[EPVATF]-1659912057449
GPR[SPS]-1659912057449
[11924852] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:923.
GPR[EPS]-1659912058062
GPR[ESUN]-1659912058062
GPR[SSUN]-1659912058062
2433571
GPR[SPVATF]-1659912058294
GPR[EPVATF]-1659912058544
GPR[SPS]-1659912058544
[11925980] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:922.
GPR[EPS]-1659912059190
GPR[ESUN]-1659912059190
GPR[SSUN]-1659912059190
2433571
GPR[ESUN]-1659912059475
GPR[SSUN]-1659912059475
-718432441
GPR[SPVATF]-1659912059702
GPR[EPVATF]-1659912059972
GPR[SPS]-1659912059972
[11927484] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:482.
GPR[EPS]-1659912060694
GPR[ESUN]-1659912060694
GPR[SSUN]-1659912060694
-718432441
GPR[SPVATF]-1659912060923
GPR[EPVATF]-1659912061197
GPR[SPS]-1659912061197
[11928771] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:481.
GPR[EPS]-1659912061982
GPR[ESUN]-1659912061982
GPR[SSUN]-1659912061982
-718432441
GPR[SPVATF]-1659912062231
GPR[EPVATF]-1659912062483
GPR[SPS]-1659912062483
[11929947] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:480.
GPR[EPS]-1659912063157
GPR[ESUN]-1659912063157
GPR[SSUN]-1659912063157
-718432441
GPR[SPVATF]-1659912063382
GPR[EPVATF]-1659912063631
GPR[SPS]-1659912063631
[11931090] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:479.
GPR[EPS]-1659912064301
GPR[ESUN]-1659912064301
GPR[SSUN]-1659912064301
-718432441
GPR[SPVATF]-1659912064530
GPR[EPVATF]-1659912064783
GPR[SPS]-1659912064783
[11932298] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:478.
GPR[EPS]-1659912065508
GPR[ESUN]-1659912065508
GPR[SSUN]-1659912065508
-718432441
GPR[SPVATF]-1659912065752
GPR[EPVATF]-1659912066008
GPR[SPS]-1659912066008
[11933487] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:475.
GPR[EPS]-1659912066697
GPR[ESUN]-1659912066697
GPR[SSUN]-1659912066697
GPR[ESUN]-1659912066697
GPR[SSUN]-1659912066697
-1117079791
GPR[ESUN]-1659912066891
GPR[SSUN]-1659912066891
-1117079791
GPR[SPVATF]-1659912067085
GPR[EPVATF]-1659912068106
GPR[SPS]-1659912068106
[11935335] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:238.
GPR[EPS]-1659912068545
GPR[ESUN]-1659912068545
GPR[SSUN]-1659912068545
80988634
GPR[ESUN]-1659912068725
GPR[SSUN]-1659912068725
1187751237
GPR[SPVATF]-1659912069013
GPR[EPVATF]-1659912069335
GPR[SPS]-1659912069335
[11936840] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1767.
GPR[EPS]-1659912070050
GPR[ESUN]-1659912070050
GPR[SSUN]-1659912070050
2433571
GPR[ESUN]-1659912070284
GPR[SSUN]-1659912070284
1187751237
GPR[SPVATF]-1659912070574
GPR[EPVATF]-1659912070817
GPR[SPS]-1659912070817
[11938324] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1764.
GPR[EPS]-1659912071535
GPR[SPVATF]-1659912071535
GPR[EPVATF]-1659912071777
GPR[SPS]-1659912071777
[11939273] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1764.
GPR[EPS]-1659912072483
GPR[ESUN]-1659912072483
GPR[SSUN]-1659912072483
1187751237
GPR[ESUN]-1659912072753
GPR[SSUN]-1659912072753
1187751237
GPR[ESUN]-1659912073031
GPR[SSUN]-1659912073031
1187751237
GPR[SPVATF]-1659912073321
GPR[EPVATF]-1659912073566
GPR[SPS]-1659912073566
[11941058] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1749.
GPR[EPS]-1659912074268
GPR[SPVATF]-1659912074268
GPR[EPVATF]-1659912074519
GPR[SPS]-1659912074519
[11941996] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1749.
GPR[EPS]-1659912075206
GPR[ESUN]-1659912075206
GPR[SSUN]-1659912075206
1187751237
GPR[ESUN]-1659912075495
GPR[SSUN]-1659912075495
1187751237
GPR[SPVATF]-1659912075792
GPR[EPVATF]-1659912076040
GPR[SPS]-1659912076040
[11943531] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1741.
GPR[EPS]-1659912076741
GPR[SPVATF]-1659912076741
GPR[EPVATF]-1659912076994
GPR[SPS]-1659912076994
[11944497] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1741.
GPR[EPS]-1659912077707
GPR[ESUN]-1659912077707
GPR[SSUN]-1659912077707
711965926
GPR[ESUN]-1659912077890
GPR[SSUN]-1659912077890
711965926
GPR[SPVATF]-1659912078071
GPR[EPVATF]-1659912078340
GPR[SPS]-1659912078340
[11945543] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractMessageFormatter:37.
GPR[EPS]-1659912078753
GPR[ESUN]-1659912078753
GPR[SSUN]-1659912078753
1187751237
GPR[ESUN]-1659912079025
GPR[SSUN]-1659912079025
1187751237
GPR[ESUN]-1659912079291
GPR[SSUN]-1659912079291
-42906419
GPR[SPVATF]-1659912079479
GPR[EPVATF]-1659912079728
GPR[SPS]-1659912079728
[11947001] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.FixedPointGraphTraversal:121.
GPR[EPS]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
GPR[ESUN]-1659912080211
GPR[SSUN]-1659912080211
1537627151
GPR[ESUN]-1659912080422
GPR[SSUN]-1659912080422
-1345859678
GPR[ESUN]-1659912080669
GPR[SSUN]-1659912080669
-1345859678
GPR[ESUN]-1659912080910
GPR[SSUN]-1659912080910
1187751237
GPR[ESUN]-1659912081180
GPR[SSUN]-1659912081180
1965452846
GPR[ESUN]-1659912081400
GPR[SSUN]-1659912081400
GPR[ESUN]-1659912081400
GPR[SSUN]-1659912081400
-718432441
GPR[SPVATF]-1659912081630
GPR[EPVATF]-1659912081880
GPR[SPS]-1659912081880
[11949351] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:961.
GPR[EPS]-1659912082561
GPR[ESUN]-1659912082561
GPR[SSUN]-1659912082561
-42906419
GPR[ESUN]-1659912082754
GPR[SSUN]-1659912082754
-42906419
GPR[SPVATF]-1659912082943
GPR[EPVATF]-1659912083198
GPR[SPS]-1659912083198
[11950422] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.FixedPointGraphTraversal:120.
GPR[EPS]-1659912083632
GPR[SPVATF]-1659912083632
GPR[EPVATF]-1659912083902
GPR[SPS]-1659912083902
[11951122] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.FixedPointGraphTraversal:120.
GPR[EPS]-1659912084332
GPR[ESUN]-1659912084332
GPR[SSUN]-1659912084332
-42906419
GPR[ESUN]-1659912084534
GPR[SSUN]-1659912084534
-718432441
GPR[SPVATF]-1659912084762
GPR[EPVATF]-1659912085015
GPR[SPS]-1659912085015
[11952525] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:639.
GPR[EPS]-1659912085735
GPR[ESUN]-1659912085735
GPR[SSUN]-1659912085735
-718432441
GPR[SPVATF]-1659912085967
GPR[EPVATF]-1659912086215
GPR[SPS]-1659912086215
[11953720] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:638.
GPR[EPS]-1659912086930
GPR[ESUN]-1659912086930
GPR[SSUN]-1659912086930
-718432441
GPR[SPVATF]-1659912087166
GPR[EPVATF]-1659912087437
GPR[SPS]-1659912087437
[11954913] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:632.
GPR[EPS]-1659912088123
GPR[SPVATF]-1659912088123
GPR[EPVATF]-1659912088377
GPR[SPS]-1659912088377
[11955848] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:632.
GPR[EPS]-1659912089058
GPR[ESUN]-1659912089058
GPR[SSUN]-1659912089058
-718432441
GPR[SPVATF]-1659912089286
GPR[EPVATF]-1659912089539
GPR[SPS]-1659912089539
[11957009] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1063.
GPR[EPS]-1659912090219
GPR[ESUN]-1659912090219
GPR[SSUN]-1659912090219
-718432441
GPR[SPVATF]-1659912090460
GPR[EPVATF]-1659912090724
GPR[SPS]-1659912090724
[11958190] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1062.
GPR[EPS]-1659912091400
GPR[SPVATF]-1659912091401
GPR[EPVATF]-1659912091658
GPR[SPS]-1659912091658
[11959131] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1062.
GPR[EPS]-1659912092341
GPR[ESUN]-1659912092341
GPR[SSUN]-1659912092341
-718432441
GPR[SPVATF]-1659912092575
GPR[EPVATF]-1659912092830
GPR[SPS]-1659912092830
[11960349] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1051.
GPR[EPS]-1659912093560
GPR[SPVATF]-1659912093560
GPR[EPVATF]-1659912093814
GPR[SPS]-1659912093814
[11961306] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1051.
GPR[EPS]-1659912094516
GPR[ESUN]-1659912094516
GPR[SSUN]-1659912094516
-718432441
GPR[SPVATF]-1659912094748
GPR[EPVATF]-1659912095004
GPR[SPS]-1659912095004
[11962579] ERROR ConstraintModelBuilder - Unable to compile the change: 
class CodeGenerator {
    private final java.util.Map<java.lang.String, java.lang.String> ESCAPED_JS_STRINGS = com.google.common.collect.Maps.newHashMap();

    private static final char[] HEX_CHARS = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };

    private final com.google.javascript.jscomp.CodeConsumer cc;

    private final java.nio.charset.CharsetEncoder outputCharsetEncoder;

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer, java.nio.charset.Charset outputCharset) {
        cc = consumer;
        if ((outputCharset == null) || (outputCharset == com.google.common.base.Charsets.US_ASCII)) {
            this.outputCharsetEncoder = null;
        } else {
            this.outputCharsetEncoder = outputCharset.newEncoder();
        }
    }

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer) {
        this(consumer, null);
    }

    public void tagAsStrict() {
        add("'use strict';");
    }

    void add(java.lang.String str) {
        cc.add(str);
    }

    private void addIdentifier(java.lang.String identifier) {
        cc.addIdentifier(com.google.javascript.jscomp.CodeGenerator.identifierEscape(identifier));
    }

    void add(com.google.javascript.rhino.Node n) {
        add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void add(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if (!cc.continueProcessing()) {
            return;
        }
        int type = n.getType();
        java.lang.String opstr = com.google.javascript.jscomp.NodeUtil.opToStr(type);
        int childCount = n.getChildCount();
        com.google.javascript.rhino.Node first = n.getFirstChild();
        com.google.javascript.rhino.Node last = n.getLastChild();
        if ((opstr != null) && (first != last)) {
            com.google.common.base.Preconditions.checkState(childCount == 2, "Bad binary operator \"%s\": expected 2 arguments but got %s", opstr, childCount);
            int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
            addLeftExpr(first, p, context);
            cc.addOp(opstr, true);
            com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);
            if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {
                addExpr(last, p, rhsContext);
            } else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {
                addExpr(last, p, rhsContext);
            } else {
                addExpr(last, p + 1, rhsContext);
            }
            return;
        }
        cc.startSourceMapping(n);
        switch (type) {
            case com.google.javascript.rhino.Token.TRY :
                {
                    com.google.common.base.Preconditions.checkState((first.getNext().getType() == com.google.javascript.rhino.Token.BLOCK) && (!first.getNext().hasMoreThanOneChild()));
                    com.google.common.base.Preconditions.checkState((childCount >= 2) && (childCount <= 3));
                    add("try");
                    add(first, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    com.google.javascript.rhino.Node catchblock = first.getNext().getFirstChild();
                    if (catchblock != null) {
                        add(catchblock);
                    }
                    if (childCount == 3) {
                        add("finally");
                        add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CATCH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("catch(");
                add(first);
                add(")");
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.THROW :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("throw");
                add(first);
                cc.endStatement(true);
                break;
            case com.google.javascript.rhino.Token.RETURN :
                add("return");
                if (childCount == 1) {
                    add(first);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 0);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.VAR :
                if (first != null) {
                    add("var ");
                    addList(first, false, getContextForNoInOperator(context));
                }
                break;
            case com.google.javascript.rhino.Token.LABEL_NAME :
                com.google.common.base.Preconditions.checkState(!n.getString().isEmpty());
                addIdentifier(n.getString());
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ((first == null) || (first.getType() == com.google.javascript.rhino.Token.EMPTY)) {
                    addIdentifier(n.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    addIdentifier(n.getString());
                    cc.addOp("=", true);
                    if (first.getType() == com.google.javascript.rhino.Token.COMMA) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.ASSIGN));
                    } else {
                        addExpr(first, 0, getContextForNoInOperator(context));
                    }
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                add("[");
                addArrayList(first);
                add("]");
                break;
            case com.google.javascript.rhino.Token.LP :
                add("(");
                addList(first);
                add(")");
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                addList(first, false, context);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addNumber(n.getDouble());
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type));
                    break;
                }
            case com.google.javascript.rhino.Token.NEG :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    if (n.getFirstChild().getType() == com.google.javascript.rhino.Token.NUMBER) {
                        cc.addNumber(-n.getFirstChild().getDouble());
                    } else {
                        cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
                    addLeftExpr(first, p + 1, context);
                    cc.addOp("?", true);
                    addExpr(first.getNext(), 1);
                    cc.addOp(":", true);
                    addExpr(last, 1);
                    break;
                }
            case com.google.javascript.rhino.Token.REGEXP :
                if ((first.getType() != com.google.javascript.rhino.Token.STRING) || (last.getType() != com.google.javascript.rhino.Token.STRING)) {
                    throw new java.lang.Error("Expected children to be strings");
                }
                java.lang.String regexp = com.google.javascript.jscomp.CodeGenerator.regexpEscape(first.getString(), outputCharsetEncoder);
                if (childCount == 2) {
                    add(regexp + last.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    add(regexp);
                }
                break;
            case com.google.javascript.rhino.Token.GET_REF :
                add(first);
                break;
            case com.google.javascript.rhino.Token.REF_SPECIAL :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first);
                add(".");
                add(((java.lang.String) (n.getProp(com.google.javascript.rhino.Node.NAME_PROP))));
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                if (n.getClass() != com.google.javascript.rhino.Node.class) {
                    throw new java.lang.Error("Unexpected Node subclass.");
                }
                com.google.common.base.Preconditions.checkState(childCount == 3);
                boolean funcNeedsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                if (funcNeedsParens) {
                    add("(");
                }
                add("function");
                add(first);
                add(first.getNext());
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                cc.endFunction(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                if (funcNeedsParens) {
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.GET :
            case com.google.javascript.rhino.Token.SET :
                com.google.common.base.Preconditions.checkState(n.getParent().getType() == com.google.javascript.rhino.Token.OBJECTLIT);
                com.google.common.base.Preconditions.checkState(childCount == 1);
                com.google.common.base.Preconditions.checkState(first.getType() == com.google.javascript.rhino.Token.FUNCTION);
                com.google.common.base.Preconditions.checkState(first.getFirstChild().getString().isEmpty());
                if (type == com.google.javascript.rhino.Token.GET) {
                    com.google.common.base.Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());
                    add("get ");
                } else {
                    com.google.common.base.Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
                    add("set ");
                }
                java.lang.String name = n.getString();
                com.google.javascript.rhino.Node fn = first;
                com.google.javascript.rhino.Node parameters = fn.getChildAtIndex(1);
                com.google.javascript.rhino.Node body = fn.getLastChild();
                if (((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {
                    add(name);
                } else {
                    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);
                    if (!java.lang.Double.isNaN(d)) {
                        cc.addNumber(d);
                    } else {
                        addJsString(n.getString());
                    }
                }
                add(parameters);
                add(body, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                {
                    if (n.getClass() != com.google.javascript.rhino.Node.class) {
                        throw new java.lang.Error("Unexpected Node subclass.");
                    }
                    boolean preserveBlock = context == com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
                    if (preserveBlock) {
                        cc.beginBlock();
                    }
                    boolean preferLineBreaks = (type == com.google.javascript.rhino.Token.SCRIPT) || ((((type == com.google.javascript.rhino.Token.BLOCK) && (!preserveBlock)) && (n.getParent() != null)) && (n.getParent().getType() == com.google.javascript.rhino.Token.SCRIPT));
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        add(c, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                        if (c.getType() == com.google.javascript.rhino.Token.VAR) {
                            cc.endStatement();
                        }
                        if (c.getType() == com.google.javascript.rhino.Token.FUNCTION) {
                            cc.maybeLineBreak();
                        }
                        if (preferLineBreaks) {
                            cc.notePreferredLineBreak();
                        }
                    }
                    if (preserveBlock) {
                        cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.FOR :
                if (childCount == 4) {
                    add("for(");
                    if (first.getType() == com.google.javascript.rhino.Token.VAR) {
                        add(first, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    } else {
                        addExpr(first, 0, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    }
                    add(";");
                    add(first.getNext());
                    add(";");
                    add(first.getNext().getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    add("for(");
                    add(first);
                    add("in");
                    add(first.getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                }
                break;
            case com.google.javascript.rhino.Token.DO :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("do");
                addNonEmptyStatement(first, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                add("while(");
                add(last);
                add(")");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.WHILE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("while(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.EMPTY :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETPROP: expected 2 children, but got %s", childCount);
                    com.google.common.base.Preconditions.checkState(last.getType() == com.google.javascript.rhino.Token.STRING, "Bad GETPROP: RHS should be STRING");
                    boolean needsParens = first.getType() == com.google.javascript.rhino.Token.NUMBER;
                    if (needsParens) {
                        add("(");
                    }
                    addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                    if (needsParens) {
                        add(")");
                    }
                    add(".");
                    addIdentifier(last.getString());
                    break;
                }
            case com.google.javascript.rhino.Token.GETELEM :
                com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETELEM: expected 2 children but got %s", childCount);
                addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                add("[");
                add(first.getNext());
                add("]");
                break;
            case com.google.javascript.rhino.Token.WITH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("with(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    java.lang.String o = (type == com.google.javascript.rhino.Token.INC) ? "++" : "--";
                    int postProp = n.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
                    if (postProp != 0) {
                        addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                        cc.addOp(o, false);
                    } else {
                        cc.addOp(o, false);
                        add(first);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CALL :
                if (isIndirectEval(first) || (n.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) && com.google.javascript.jscomp.NodeUtil.isGet(first))) {
                    add("(0,");
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.COMMA));
                    add(")");
                } else {
                    addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                }
                add("(");
                addList(first.getNext());
                add(")");
                break;
            case com.google.javascript.rhino.Token.IF :
                boolean hasElse = childCount == 3;
                boolean ambiguousElseClause = (context == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE) && (!hasElse);
                if (ambiguousElseClause) {
                    cc.beginBlock();
                }
                add("if(");
                add(first);
                add(")");
                if (hasElse) {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE, false);
                    add("else");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                    com.google.common.base.Preconditions.checkState(childCount == 2);
                }
                if (ambiguousElseClause) {
                    cc.endBlock();
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.TRUE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add(com.google.javascript.rhino.Node.tokenToName(type));
                break;
            case com.google.javascript.rhino.Token.CONTINUE :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("continue");
                if (childCount == 1) {
                    if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.DEBUGGER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("debugger");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.BREAK :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("break");
                if (childCount == 1) {
                    if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.EXPR_VOID :
                throw new java.lang.Error("Unexpected EXPR_VOID. Should be EXPR_RESULT.");
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first, com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR);
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.NEW :
                add("new ");
                int precedence = com.google.javascript.jscomp.NodeUtil.precedence(type);
                if (com.google.javascript.jscomp.NodeUtil.containsType(first, com.google.javascript.rhino.Token.CALL, new com.google.javascript.jscomp.NodeUtil.MatchNotFunction())) {
                    precedence = com.google.javascript.jscomp.NodeUtil.precedence(first.getType()) + 1;
                }
                addExpr(first, precedence);
                com.google.javascript.rhino.Node next = first.getNext();
                if (next != null) {
                    add("(");
                    addList(next);
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                if (childCount != ((n.getParent() != null) && (n.getParent().getType() == com.google.javascript.rhino.Token.OBJECTLIT) ? 1 : 0)) {
                    throw new java.lang.IllegalStateException("Unexpected String children: " + n.getParent().toStringTree());
                }
                addJsString(n.getString());
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("delete ");
                add(first);
                break;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                {
                    boolean needsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                    if (needsParens) {
                        add("(");
                    }
                    add("{");
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        if (c != first) {
                            cc.listSeparator();
                        }
                        if ((c.getType() == com.google.javascript.rhino.Token.GET) || (c.getType() == com.google.javascript.rhino.Token.SET)) {
                            add(c);
                        } else {
                            com.google.common.base.Preconditions.checkState(c.getType() == com.google.javascript.rhino.Token.STRING);
                            java.lang.String key = c.getString();
                            if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {
                                add(key);
                            } else {
                                double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);
                                if (!java.lang.Double.isNaN(d)) {
                                    cc.addNumber(d);
                                } else {
                                    addExpr(c, 1);
                                }
                            }
                            add(":");
                            addExpr(c.getFirstChild(), 1);
                        }
                    }
                    add("}");
                    if (needsParens) {
                        add(")");
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.SWITCH :
                add("switch(");
                add(first);
                add(")");
                cc.beginBlock();
                addAllSiblings(first.getNext());
                cc.endBlock(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("case ");
                add(first);
                addCaseBody(last);
                break;
            case com.google.javascript.rhino.Token.DEFAULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("default");
                addCaseBody(first);
                break;
            case com.google.javascript.rhino.Token.LABEL :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {
                    throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                }
                add(first);
                add(":");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), true);
                break;
            case com.google.javascript.rhino.Token.SETNAME :
                break;
            default :
                throw new java.lang.Error((("Unknown type " + type) + "\n") + n.toStringTree());
        }
        cc.endSourceMapping(n);
    }

    static boolean isSimpleNumber(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if ((c < '0') || (c > '9')) {
                return false;
            }
        }
        return len > 0;
    }

    static double getSimpleNumber(java.lang.String s) {
        if (com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(s)) {
            try {
                long l = java.lang.Long.parseLong(s);
                if (l < com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                    return l;
                }
            } catch (java.lang.NumberFormatException e) {
            }
        }
        return java.lang.Double.NaN;
    }

    private boolean isIndirectEval(com.google.javascript.rhino.Node n) {
        return ((n.getType() == com.google.javascript.rhino.Token.NAME) && "eval".equals(n.getString())) && (!n.getBooleanProp(com.google.javascript.rhino.Node.DIRECT_EVAL));
    }

    private void addNonEmptyStatement(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context, boolean allowNonBlockChild) {
        com.google.javascript.rhino.Node nodeToProcess = n;
        if ((!allowNonBlockChild) && (n.getType() != com.google.javascript.rhino.Token.BLOCK)) {
            throw new java.lang.Error("Missing BLOCK child.");
        }
        if (n.getType() == com.google.javascript.rhino.Token.BLOCK) {
            int count = com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2);
            if (count == 0) {
                if (cc.shouldPreserveExtraBlocks()) {
                    cc.beginBlock();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                } else {
                    cc.endStatement(true);
                }
                return;
            }
            if (count == 1) {
                com.google.javascript.rhino.Node firstAndOnlyChild = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n);
                boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();
                if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {
                    cc.beginBlock();
                    add(firstAndOnlyChild, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                    cc.maybeLineBreak();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    return;
                } else {
                    nodeToProcess = firstAndOnlyChild;
                }
            }
            if (count > 1) {
                context = com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
            }
        }
        if (nodeToProcess.getType() == com.google.javascript.rhino.Token.EMPTY) {
            cc.endStatement(true);
        } else {
            add(nodeToProcess, context);
            if (nodeToProcess.getType() == com.google.javascript.rhino.Token.VAR) {
                cc.endStatement();
            }
        }
    }

    private boolean isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node n) {
        if (n.getType() == com.google.javascript.rhino.Token.LABEL) {
            com.google.javascript.rhino.Node labeledStatement = n.getLastChild();
            if (labeledStatement.getType() != com.google.javascript.rhino.Token.BLOCK) {
                return isOneExactlyFunctionOrDo(labeledStatement);
            } else if (com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2) == 1) {
                return isOneExactlyFunctionOrDo(com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n));
            } else {
                return false;
            }
        } else {
            return (n.getType() == com.google.javascript.rhino.Token.FUNCTION) || (n.getType() == com.google.javascript.rhino.Token.DO);
        }
    }

    void addLeftExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        addExpr(n, minPrecedence, context);
    }

    void addExpr(com.google.javascript.rhino.Node n, int minPrecedence) {
        addExpr(n, minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    private void addExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if ((com.google.javascript.jscomp.NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE) && (n.getType() == com.google.javascript.rhino.Token.IN))) {
            add("(");
            add(n, clearContextForNoInOperator(context));
            add(")");
        } else {
            add(n, context);
        }
    }

    void addList(com.google.javascript.rhino.Node firstInList) {
        addList(firstInList, true, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument) {
        addList(firstInList, isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context lhsContext) {
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            boolean isFirst = n == firstInList;
            if (isFirst) {
                addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
            } else {
                cc.listSeparator();
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0);
            }
        }
    }

    void addArrayList(com.google.javascript.rhino.Node firstInList) {
        boolean lastWasEmpty = false;
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            if (n != firstInList) {
                cc.listSeparator();
            }
            addExpr(n, 1);
            lastWasEmpty = n.getType() == com.google.javascript.rhino.Token.EMPTY;
        }
        if (lastWasEmpty) {
            cc.listSeparator();
        }
    }

    void addCaseBody(com.google.javascript.rhino.Node caseBody) {
        cc.beginCaseBody();
        add(caseBody);
        cc.endCaseBody();
    }

    void addAllSiblings(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n; c != null; c = c.getNext()) {
            add(c);
        }
    }

    void addJsString(java.lang.String s) {
        java.lang.String cached = ESCAPED_JS_STRINGS.get(s);
        if (cached == null) {
            cached = jsString(s);
            ESCAPED_JS_STRINGS.put(s, cached);
        }
        add(cached);
    }

    java.lang.String jsString(java.lang.String s) {
        int singleq = 0;
        int doubleq = 0;
        for (int i = 0; i < s.length(); i++) {
            switch (s.charAt(i)) {
                case '"' :
                    doubleq++;
                    break;
                case '\'' :
                    singleq++;
                    break;
            }
        }
        java.lang.String doublequote;
        java.lang.String singlequote;
        char quote;
        if (singleq < doubleq) {
            quote = '\'';
            doublequote = "\"";
            singlequote = "\\\'";
        } else {
            quote = '\"';
            doublequote = "\\\"";
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(190).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("singleq",singleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",com.google.javascript.jscomp.CodeGenerator.HEX_CHARS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS",com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("s",s);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("doubleq",doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("com.google.javascript.jscomp.CodeGenerator.this.cc",com.google.javascript.jscomp.CodeGenerator.this.cc);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectInput("com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder",com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(190).collectionEnds();
            }
            if (runtimeAngelicValue)
                singlequote = "\'";

        }
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder);
    }

    static java.lang.String regexpEscape(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '/', "\"", "'", "\\", outputCharsetEncoder);
    }

    static java.lang.String escapeToDoubleQuotedJsString(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '"', "\\\"", "\'", "\\\\", null);
    }

    static java.lang.String regexpEscape(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.regexpEscape(s, null);
    }

    static java.lang.String strEscape(java.lang.String s, char quote, java.lang.String doublequoteEscape, java.lang.String singlequoteEscape, java.lang.String backslashEscape, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder(s.length() + 2);
        sb.append(quote);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch (c) {
                case '\u0000' :
                    sb.append("\\0");
                    break;
                case '\n' :
                    sb.append("\\n");
                    break;
                case '\r' :
                    sb.append("\\r");
                    break;
                case '\t' :
                    sb.append("\\t");
                    break;
                case '\\' :
                    sb.append(backslashEscape);
                    break;
                case '\"' :
                    sb.append(doublequoteEscape);
                    break;
                case '\'' :
                    sb.append(singlequoteEscape);
                    break;
                case '>' :
                    if ((i >= 2) && (((s.charAt(i - 1) == '-') && (s.charAt(i - 2) == '-')) || ((s.charAt(i - 1) == ']') && (s.charAt(i - 2) == ']')))) {
                        sb.append("\\>");
                    } else {
                        sb.append(c);
                    }
                    break;
                case '<' :
                    final java.lang.String END_SCRIPT = "/script";
                    final java.lang.String START_COMMENT = "!--";
                    if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {
                        sb.append("<\\");
                    } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {
                        sb.append("<\\");
                    } else {
                        sb.append(c);
                    }
                    break;
                default :
                    if (outputCharsetEncoder != null) {
                        if (outputCharsetEncoder.canEncode(c)) {
                            sb.append(c);
                        } else {
                            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                        }
                    } else if ((c > 0x1f) && (c < 0x7f)) {
                        sb.append(c);
                    } else {
                        com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                    }
            }
        }
        sb.append(quote);
        return sb.toString();
    }

    static java.lang.String identifierEscape(java.lang.String s) {
        if (com.google.javascript.jscomp.NodeUtil.isLatin(s)) {
            return s;
        }
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if ((c > 0x1f) && (c < 0x7f)) {
                sb.append(c);
            } else {
                com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
            }
        }
        return sb.toString();
    }

    private static int getNonEmptyChildCount(com.google.javascript.rhino.Node n, int maxCount) {
        int i = 0;
        com.google.javascript.rhino.Node c = n.getFirstChild();
        for (; (c != null) && (i < maxCount); c = c.getNext()) {
            if (c.getType() == com.google.javascript.rhino.Token.BLOCK) {
                i += com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(c, maxCount - i);
            } else if (c.getType() != com.google.javascript.rhino.Token.EMPTY) {
                i++;
            }
        }
        return i;
    }

    private static com.google.javascript.rhino.Node getFirstNonEmptyChild(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.getType() == com.google.javascript.rhino.Token.BLOCK) {
                com.google.javascript.rhino.Node result = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(c);
                if (result != null) {
                    return result;
                }
            } else if (c.getType() != com.google.javascript.rhino.Token.EMPTY) {
                return c;
            }
        }
        return null;
    }

    enum Context {

        STATEMENT,
        BEFORE_DANGLING_ELSE,
        START_OF_EXPR,
        PRESERVE_BLOCK,
        IN_FOR_INIT_CLAUSE,
        OTHER;}

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNonEmptyExpression(com.google.javascript.jscomp.CodeGenerator.Context currentContext) {
        return currentContext == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE ? com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context clearContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.OTHER : context;
    }

    private static void appendHexJavaScriptRepresentation(java.lang.StringBuilder sb, char c) {
        try {
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(c, sb);
        } catch (java.io.IOException ex) {
            throw new java.lang.RuntimeException(ex);
        }
    }

    private static void appendHexJavaScriptRepresentation(int codePoint, java.lang.Appendable out) throws java.io.IOException {
        if (java.lang.Character.isSupplementaryCodePoint(codePoint)) {
            char[] surrogates = java.lang.Character.toChars(codePoint);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[0], out);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[1], out);
            return;
        }
        out.append("\\u").append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 12) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 8) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 4) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[codePoint & 0xf]);
    }
}
[11962579] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659912095789
GPR[SSUN]-1659912095789
-718432441
GPR[SPVATF]-1659912096020
GPR[EPVATF]-1659912096271
GPR[SPS]-1659912096271
[11963792] ERROR ConstraintModelBuilder - Unable to compile the change: 
class CodeGenerator {
    private final java.util.Map<java.lang.String, java.lang.String> ESCAPED_JS_STRINGS = com.google.common.collect.Maps.newHashMap();

    private static final char[] HEX_CHARS = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };

    private final com.google.javascript.jscomp.CodeConsumer cc;

    private final java.nio.charset.CharsetEncoder outputCharsetEncoder;

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer, java.nio.charset.Charset outputCharset) {
        cc = consumer;
        if ((outputCharset == null) || (outputCharset == com.google.common.base.Charsets.US_ASCII)) {
            this.outputCharsetEncoder = null;
        } else {
            this.outputCharsetEncoder = outputCharset.newEncoder();
        }
    }

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer) {
        this(consumer, null);
    }

    public void tagAsStrict() {
        add("'use strict';");
    }

    void add(java.lang.String str) {
        cc.add(str);
    }

    private void addIdentifier(java.lang.String identifier) {
        cc.addIdentifier(com.google.javascript.jscomp.CodeGenerator.identifierEscape(identifier));
    }

    void add(com.google.javascript.rhino.Node n) {
        add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void add(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if (!cc.continueProcessing()) {
            return;
        }
        int type = n.getType();
        java.lang.String opstr = com.google.javascript.jscomp.NodeUtil.opToStr(type);
        int childCount = n.getChildCount();
        com.google.javascript.rhino.Node first = n.getFirstChild();
        com.google.javascript.rhino.Node last = n.getLastChild();
        if ((opstr != null) && (first != last)) {
            com.google.common.base.Preconditions.checkState(childCount == 2, "Bad binary operator \"%s\": expected 2 arguments but got %s", opstr, childCount);
            int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
            addLeftExpr(first, p, context);
            cc.addOp(opstr, true);
            com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);
            if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {
                addExpr(last, p, rhsContext);
            } else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {
                addExpr(last, p, rhsContext);
            } else {
                addExpr(last, p + 1, rhsContext);
            }
            return;
        }
        cc.startSourceMapping(n);
        switch (type) {
            case com.google.javascript.rhino.Token.TRY :
                {
                    com.google.common.base.Preconditions.checkState((first.getNext().getType() == com.google.javascript.rhino.Token.BLOCK) && (!first.getNext().hasMoreThanOneChild()));
                    com.google.common.base.Preconditions.checkState((childCount >= 2) && (childCount <= 3));
                    add("try");
                    add(first, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    com.google.javascript.rhino.Node catchblock = first.getNext().getFirstChild();
                    if (catchblock != null) {
                        add(catchblock);
                    }
                    if (childCount == 3) {
                        add("finally");
                        add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CATCH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("catch(");
                add(first);
                add(")");
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.THROW :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("throw");
                add(first);
                cc.endStatement(true);
                break;
            case com.google.javascript.rhino.Token.RETURN :
                add("return");
                if (childCount == 1) {
                    add(first);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 0);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.VAR :
                if (first != null) {
                    add("var ");
                    addList(first, false, getContextForNoInOperator(context));
                }
                break;
            case com.google.javascript.rhino.Token.LABEL_NAME :
                com.google.common.base.Preconditions.checkState(!n.getString().isEmpty());
                addIdentifier(n.getString());
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ((first == null) || (first.getType() == com.google.javascript.rhino.Token.EMPTY)) {
                    addIdentifier(n.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    addIdentifier(n.getString());
                    cc.addOp("=", true);
                    if (first.getType() == com.google.javascript.rhino.Token.COMMA) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.ASSIGN));
                    } else {
                        addExpr(first, 0, getContextForNoInOperator(context));
                    }
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                add("[");
                addArrayList(first);
                add("]");
                break;
            case com.google.javascript.rhino.Token.LP :
                add("(");
                addList(first);
                add(")");
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                addList(first, false, context);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addNumber(n.getDouble());
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type));
                    break;
                }
            case com.google.javascript.rhino.Token.NEG :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    if (n.getFirstChild().getType() == com.google.javascript.rhino.Token.NUMBER) {
                        cc.addNumber(-n.getFirstChild().getDouble());
                    } else {
                        cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
                    addLeftExpr(first, p + 1, context);
                    cc.addOp("?", true);
                    addExpr(first.getNext(), 1);
                    cc.addOp(":", true);
                    addExpr(last, 1);
                    break;
                }
            case com.google.javascript.rhino.Token.REGEXP :
                if ((first.getType() != com.google.javascript.rhino.Token.STRING) || (last.getType() != com.google.javascript.rhino.Token.STRING)) {
                    throw new java.lang.Error("Expected children to be strings");
                }
                java.lang.String regexp = com.google.javascript.jscomp.CodeGenerator.regexpEscape(first.getString(), outputCharsetEncoder);
                if (childCount == 2) {
                    add(regexp + last.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    add(regexp);
                }
                break;
            case com.google.javascript.rhino.Token.GET_REF :
                add(first);
                break;
            case com.google.javascript.rhino.Token.REF_SPECIAL :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first);
                add(".");
                add(((java.lang.String) (n.getProp(com.google.javascript.rhino.Node.NAME_PROP))));
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                if (n.getClass() != com.google.javascript.rhino.Node.class) {
                    throw new java.lang.Error("Unexpected Node subclass.");
                }
                com.google.common.base.Preconditions.checkState(childCount == 3);
                boolean funcNeedsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                if (funcNeedsParens) {
                    add("(");
                }
                add("function");
                add(first);
                add(first.getNext());
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                cc.endFunction(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                if (funcNeedsParens) {
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.GET :
            case com.google.javascript.rhino.Token.SET :
                com.google.common.base.Preconditions.checkState(n.getParent().getType() == com.google.javascript.rhino.Token.OBJECTLIT);
                com.google.common.base.Preconditions.checkState(childCount == 1);
                com.google.common.base.Preconditions.checkState(first.getType() == com.google.javascript.rhino.Token.FUNCTION);
                com.google.common.base.Preconditions.checkState(first.getFirstChild().getString().isEmpty());
                if (type == com.google.javascript.rhino.Token.GET) {
                    com.google.common.base.Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());
                    add("get ");
                } else {
                    com.google.common.base.Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
                    add("set ");
                }
                java.lang.String name = n.getString();
                com.google.javascript.rhino.Node fn = first;
                com.google.javascript.rhino.Node parameters = fn.getChildAtIndex(1);
                com.google.javascript.rhino.Node body = fn.getLastChild();
                if (((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {
                    add(name);
                } else {
                    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);
                    if (!java.lang.Double.isNaN(d)) {
                        cc.addNumber(d);
                    } else {
                        addJsString(n.getString());
                    }
                }
                add(parameters);
                add(body, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                {
                    if (n.getClass() != com.google.javascript.rhino.Node.class) {
                        throw new java.lang.Error("Unexpected Node subclass.");
                    }
                    boolean preserveBlock = context == com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
                    if (preserveBlock) {
                        cc.beginBlock();
                    }
                    boolean preferLineBreaks = (type == com.google.javascript.rhino.Token.SCRIPT) || ((((type == com.google.javascript.rhino.Token.BLOCK) && (!preserveBlock)) && (n.getParent() != null)) && (n.getParent().getType() == com.google.javascript.rhino.Token.SCRIPT));
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        add(c, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                        if (c.getType() == com.google.javascript.rhino.Token.VAR) {
                            cc.endStatement();
                        }
                        if (c.getType() == com.google.javascript.rhino.Token.FUNCTION) {
                            cc.maybeLineBreak();
                        }
                        if (preferLineBreaks) {
                            cc.notePreferredLineBreak();
                        }
                    }
                    if (preserveBlock) {
                        cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.FOR :
                if (childCount == 4) {
                    add("for(");
                    if (first.getType() == com.google.javascript.rhino.Token.VAR) {
                        add(first, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    } else {
                        addExpr(first, 0, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    }
                    add(";");
                    add(first.getNext());
                    add(";");
                    add(first.getNext().getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    add("for(");
                    add(first);
                    add("in");
                    add(first.getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                }
                break;
            case com.google.javascript.rhino.Token.DO :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("do");
                addNonEmptyStatement(first, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                add("while(");
                add(last);
                add(")");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.WHILE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("while(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.EMPTY :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETPROP: expected 2 children, but got %s", childCount);
                    com.google.common.base.Preconditions.checkState(last.getType() == com.google.javascript.rhino.Token.STRING, "Bad GETPROP: RHS should be STRING");
                    boolean needsParens = first.getType() == com.google.javascript.rhino.Token.NUMBER;
                    if (needsParens) {
                        add("(");
                    }
                    addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                    if (needsParens) {
                        add(")");
                    }
                    add(".");
                    addIdentifier(last.getString());
                    break;
                }
            case com.google.javascript.rhino.Token.GETELEM :
                com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETELEM: expected 2 children but got %s", childCount);
                addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                add("[");
                add(first.getNext());
                add("]");
                break;
            case com.google.javascript.rhino.Token.WITH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("with(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    java.lang.String o = (type == com.google.javascript.rhino.Token.INC) ? "++" : "--";
                    int postProp = n.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
                    if (postProp != 0) {
                        addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                        cc.addOp(o, false);
                    } else {
                        cc.addOp(o, false);
                        add(first);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CALL :
                if (isIndirectEval(first) || (n.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) && com.google.javascript.jscomp.NodeUtil.isGet(first))) {
                    add("(0,");
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.COMMA));
                    add(")");
                } else {
                    addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                }
                add("(");
                addList(first.getNext());
                add(")");
                break;
            case com.google.javascript.rhino.Token.IF :
                boolean hasElse = childCount == 3;
                boolean ambiguousElseClause = (context == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE) && (!hasElse);
                if (ambiguousElseClause) {
                    cc.beginBlock();
                }
                add("if(");
                add(first);
                add(")");
                if (hasElse) {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE, false);
                    add("else");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                    com.google.common.base.Preconditions.checkState(childCount == 2);
                }
                if (ambiguousElseClause) {
                    cc.endBlock();
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.TRUE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add(com.google.javascript.rhino.Node.tokenToName(type));
                break;
            case com.google.javascript.rhino.Token.CONTINUE :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("continue");
                if (childCount == 1) {
                    if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.DEBUGGER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("debugger");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.BREAK :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("break");
                if (childCount == 1) {
                    if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.EXPR_VOID :
                throw new java.lang.Error("Unexpected EXPR_VOID. Should be EXPR_RESULT.");
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first, com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR);
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.NEW :
                add("new ");
                int precedence = com.google.javascript.jscomp.NodeUtil.precedence(type);
                if (com.google.javascript.jscomp.NodeUtil.containsType(first, com.google.javascript.rhino.Token.CALL, new com.google.javascript.jscomp.NodeUtil.MatchNotFunction())) {
                    precedence = com.google.javascript.jscomp.NodeUtil.precedence(first.getType()) + 1;
                }
                addExpr(first, precedence);
                com.google.javascript.rhino.Node next = first.getNext();
                if (next != null) {
                    add("(");
                    addList(next);
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                if (childCount != ((n.getParent() != null) && (n.getParent().getType() == com.google.javascript.rhino.Token.OBJECTLIT) ? 1 : 0)) {
                    throw new java.lang.IllegalStateException("Unexpected String children: " + n.getParent().toStringTree());
                }
                addJsString(n.getString());
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("delete ");
                add(first);
                break;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                {
                    boolean needsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                    if (needsParens) {
                        add("(");
                    }
                    add("{");
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        if (c != first) {
                            cc.listSeparator();
                        }
                        if ((c.getType() == com.google.javascript.rhino.Token.GET) || (c.getType() == com.google.javascript.rhino.Token.SET)) {
                            add(c);
                        } else {
                            com.google.common.base.Preconditions.checkState(c.getType() == com.google.javascript.rhino.Token.STRING);
                            java.lang.String key = c.getString();
                            if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {
                                add(key);
                            } else {
                                double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);
                                if (!java.lang.Double.isNaN(d)) {
                                    cc.addNumber(d);
                                } else {
                                    addExpr(c, 1);
                                }
                            }
                            add(":");
                            addExpr(c.getFirstChild(), 1);
                        }
                    }
                    add("}");
                    if (needsParens) {
                        add(")");
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.SWITCH :
                add("switch(");
                add(first);
                add(")");
                cc.beginBlock();
                addAllSiblings(first.getNext());
                cc.endBlock(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("case ");
                add(first);
                addCaseBody(last);
                break;
            case com.google.javascript.rhino.Token.DEFAULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("default");
                addCaseBody(first);
                break;
            case com.google.javascript.rhino.Token.LABEL :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {
                    throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                }
                add(first);
                add(":");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), true);
                break;
            case com.google.javascript.rhino.Token.SETNAME :
                break;
            default :
                throw new java.lang.Error((("Unknown type " + type) + "\n") + n.toStringTree());
        }
        cc.endSourceMapping(n);
    }

    static boolean isSimpleNumber(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if ((c < '0') || (c > '9')) {
                return false;
            }
        }
        return len > 0;
    }

    static double getSimpleNumber(java.lang.String s) {
        if (com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(s)) {
            try {
                long l = java.lang.Long.parseLong(s);
                if (l < com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                    return l;
                }
            } catch (java.lang.NumberFormatException e) {
            }
        }
        return java.lang.Double.NaN;
    }

    private boolean isIndirectEval(com.google.javascript.rhino.Node n) {
        return ((n.getType() == com.google.javascript.rhino.Token.NAME) && "eval".equals(n.getString())) && (!n.getBooleanProp(com.google.javascript.rhino.Node.DIRECT_EVAL));
    }

    private void addNonEmptyStatement(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context, boolean allowNonBlockChild) {
        com.google.javascript.rhino.Node nodeToProcess = n;
        if ((!allowNonBlockChild) && (n.getType() != com.google.javascript.rhino.Token.BLOCK)) {
            throw new java.lang.Error("Missing BLOCK child.");
        }
        if (n.getType() == com.google.javascript.rhino.Token.BLOCK) {
            int count = com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2);
            if (count == 0) {
                if (cc.shouldPreserveExtraBlocks()) {
                    cc.beginBlock();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                } else {
                    cc.endStatement(true);
                }
                return;
            }
            if (count == 1) {
                com.google.javascript.rhino.Node firstAndOnlyChild = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n);
                boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();
                if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {
                    cc.beginBlock();
                    add(firstAndOnlyChild, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                    cc.maybeLineBreak();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    return;
                } else {
                    nodeToProcess = firstAndOnlyChild;
                }
            }
            if (count > 1) {
                context = com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
            }
        }
        if (nodeToProcess.getType() == com.google.javascript.rhino.Token.EMPTY) {
            cc.endStatement(true);
        } else {
            add(nodeToProcess, context);
            if (nodeToProcess.getType() == com.google.javascript.rhino.Token.VAR) {
                cc.endStatement();
            }
        }
    }

    private boolean isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node n) {
        if (n.getType() == com.google.javascript.rhino.Token.LABEL) {
            com.google.javascript.rhino.Node labeledStatement = n.getLastChild();
            if (labeledStatement.getType() != com.google.javascript.rhino.Token.BLOCK) {
                return isOneExactlyFunctionOrDo(labeledStatement);
            } else if (com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2) == 1) {
                return isOneExactlyFunctionOrDo(com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n));
            } else {
                return false;
            }
        } else {
            return (n.getType() == com.google.javascript.rhino.Token.FUNCTION) || (n.getType() == com.google.javascript.rhino.Token.DO);
        }
    }

    void addLeftExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        addExpr(n, minPrecedence, context);
    }

    void addExpr(com.google.javascript.rhino.Node n, int minPrecedence) {
        addExpr(n, minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    private void addExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if ((com.google.javascript.jscomp.NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE) && (n.getType() == com.google.javascript.rhino.Token.IN))) {
            add("(");
            add(n, clearContextForNoInOperator(context));
            add(")");
        } else {
            add(n, context);
        }
    }

    void addList(com.google.javascript.rhino.Node firstInList) {
        addList(firstInList, true, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument) {
        addList(firstInList, isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context lhsContext) {
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            boolean isFirst = n == firstInList;
            if (isFirst) {
                addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
            } else {
                cc.listSeparator();
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0);
            }
        }
    }

    void addArrayList(com.google.javascript.rhino.Node firstInList) {
        boolean lastWasEmpty = false;
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            if (n != firstInList) {
                cc.listSeparator();
            }
            addExpr(n, 1);
            lastWasEmpty = n.getType() == com.google.javascript.rhino.Token.EMPTY;
        }
        if (lastWasEmpty) {
            cc.listSeparator();
        }
    }

    void addCaseBody(com.google.javascript.rhino.Node caseBody) {
        cc.beginCaseBody();
        add(caseBody);
        cc.endCaseBody();
    }

    void addAllSiblings(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n; c != null; c = c.getNext()) {
            add(c);
        }
    }

    void addJsString(java.lang.String s) {
        java.lang.String cached = ESCAPED_JS_STRINGS.get(s);
        if (cached == null) {
            cached = jsString(s);
            ESCAPED_JS_STRINGS.put(s, cached);
        }
        add(cached);
    }

    java.lang.String jsString(java.lang.String s) {
        int singleq = 0;
        int doubleq = 0;
        for (int i = 0; i < s.length(); i++) {
            switch (s.charAt(i)) {
                case '"' :
                    doubleq++;
                    break;
                case '\'' :
                    singleq++;
                    break;
            }
        }
        java.lang.String doublequote;
        java.lang.String singlequote;
        char quote;
        if (singleq < doubleq) {
            quote = '\'';
            doublequote = "\"";
            singlequote = "\\\'";
        } else {
            quote = '\"';
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(191).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("singleq",singleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",com.google.javascript.jscomp.CodeGenerator.HEX_CHARS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS",com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("s",s);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("doubleq",doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.jscomp.CodeGenerator.this.cc",com.google.javascript.jscomp.CodeGenerator.this.cc);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder",com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectionEnds();
            }
            if (runtimeAngelicValue)
                doublequote = "\\\"";

            singlequote = "\'";
        }
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder);
    }

    static java.lang.String regexpEscape(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '/', "\"", "'", "\\", outputCharsetEncoder);
    }

    static java.lang.String escapeToDoubleQuotedJsString(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '"', "\\\"", "\'", "\\\\", null);
    }

    static java.lang.String regexpEscape(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.regexpEscape(s, null);
    }

    static java.lang.String strEscape(java.lang.String s, char quote, java.lang.String doublequoteEscape, java.lang.String singlequoteEscape, java.lang.String backslashEscape, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder(s.length() + 2);
        sb.append(quote);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch (c) {
                case '\u0000' :
                    sb.append("\\0");
                    break;
                case '\n' :
                    sb.append("\\n");
                    break;
                case '\r' :
                    sb.append("\\r");
                    break;
                case '\t' :
                    sb.append("\\t");
                    break;
                case '\\' :
                    sb.append(backslashEscape);
                    break;
                case '\"' :
                    sb.append(doublequoteEscape);
                    break;
                case '\'' :
                    sb.append(singlequoteEscape);
                    break;
                case '>' :
                    if ((i >= 2) && (((s.charAt(i - 1) == '-') && (s.charAt(i - 2) == '-')) || ((s.charAt(i - 1) == ']') && (s.charAt(i - 2) == ']')))) {
                        sb.append("\\>");
                    } else {
                        sb.append(c);
                    }
                    break;
                case '<' :
                    final java.lang.String END_SCRIPT = "/script";
                    final java.lang.String START_COMMENT = "!--";
                    if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {
                        sb.append("<\\");
                    } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {
                        sb.append("<\\");
                    } else {
                        sb.append(c);
                    }
                    break;
                default :
                    if (outputCharsetEncoder != null) {
                        if (outputCharsetEncoder.canEncode(c)) {
                            sb.append(c);
                        } else {
                            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                        }
                    } else if ((c > 0x1f) && (c < 0x7f)) {
                        sb.append(c);
                    } else {
                        com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                    }
            }
        }
        sb.append(quote);
        return sb.toString();
    }

    static java.lang.String identifierEscape(java.lang.String s) {
        if (com.google.javascript.jscomp.NodeUtil.isLatin(s)) {
            return s;
        }
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if ((c > 0x1f) && (c < 0x7f)) {
                sb.append(c);
            } else {
                com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
            }
        }
        return sb.toString();
    }

    private static int getNonEmptyChildCount(com.google.javascript.rhino.Node n, int maxCount) {
        int i = 0;
        com.google.javascript.rhino.Node c = n.getFirstChild();
        for (; (c != null) && (i < maxCount); c = c.getNext()) {
            if (c.getType() == com.google.javascript.rhino.Token.BLOCK) {
                i += com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(c, maxCount - i);
            } else if (c.getType() != com.google.javascript.rhino.Token.EMPTY) {
                i++;
            }
        }
        return i;
    }

    private static com.google.javascript.rhino.Node getFirstNonEmptyChild(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.getType() == com.google.javascript.rhino.Token.BLOCK) {
                com.google.javascript.rhino.Node result = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(c);
                if (result != null) {
                    return result;
                }
            } else if (c.getType() != com.google.javascript.rhino.Token.EMPTY) {
                return c;
            }
        }
        return null;
    }

    enum Context {

        STATEMENT,
        BEFORE_DANGLING_ELSE,
        START_OF_EXPR,
        PRESERVE_BLOCK,
        IN_FOR_INIT_CLAUSE,
        OTHER;}

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNonEmptyExpression(com.google.javascript.jscomp.CodeGenerator.Context currentContext) {
        return currentContext == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE ? com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context clearContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.OTHER : context;
    }

    private static void appendHexJavaScriptRepresentation(java.lang.StringBuilder sb, char c) {
        try {
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(c, sb);
        } catch (java.io.IOException ex) {
            throw new java.lang.RuntimeException(ex);
        }
    }

    private static void appendHexJavaScriptRepresentation(int codePoint, java.lang.Appendable out) throws java.io.IOException {
        if (java.lang.Character.isSupplementaryCodePoint(codePoint)) {
            char[] surrogates = java.lang.Character.toChars(codePoint);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[0], out);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[1], out);
            return;
        }
        out.append("\\u").append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 12) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 8) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 4) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[codePoint & 0xf]);
    }
}
[11963792] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659912097002
GPR[SSUN]-1659912097002
-718432441
GPR[SPVATF]-1659912097232
GPR[EPVATF]-1659912097497
GPR[SPS]-1659912097497
[11965068] ERROR ConstraintModelBuilder - Unable to compile the change: 
class CodeGenerator {
    private final java.util.Map<java.lang.String, java.lang.String> ESCAPED_JS_STRINGS = com.google.common.collect.Maps.newHashMap();

    private static final char[] HEX_CHARS = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };

    private final com.google.javascript.jscomp.CodeConsumer cc;

    private final java.nio.charset.CharsetEncoder outputCharsetEncoder;

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer, java.nio.charset.Charset outputCharset) {
        cc = consumer;
        if ((outputCharset == null) || (outputCharset == com.google.common.base.Charsets.US_ASCII)) {
            this.outputCharsetEncoder = null;
        } else {
            this.outputCharsetEncoder = outputCharset.newEncoder();
        }
    }

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer) {
        this(consumer, null);
    }

    public void tagAsStrict() {
        add("'use strict';");
    }

    void add(java.lang.String str) {
        cc.add(str);
    }

    private void addIdentifier(java.lang.String identifier) {
        cc.addIdentifier(com.google.javascript.jscomp.CodeGenerator.identifierEscape(identifier));
    }

    void add(com.google.javascript.rhino.Node n) {
        add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void add(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if (!cc.continueProcessing()) {
            return;
        }
        int type = n.getType();
        java.lang.String opstr = com.google.javascript.jscomp.NodeUtil.opToStr(type);
        int childCount = n.getChildCount();
        com.google.javascript.rhino.Node first = n.getFirstChild();
        com.google.javascript.rhino.Node last = n.getLastChild();
        if ((opstr != null) && (first != last)) {
            com.google.common.base.Preconditions.checkState(childCount == 2, "Bad binary operator \"%s\": expected 2 arguments but got %s", opstr, childCount);
            int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
            addLeftExpr(first, p, context);
            cc.addOp(opstr, true);
            com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);
            if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {
                addExpr(last, p, rhsContext);
            } else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {
                addExpr(last, p, rhsContext);
            } else {
                addExpr(last, p + 1, rhsContext);
            }
            return;
        }
        cc.startSourceMapping(n);
        switch (type) {
            case com.google.javascript.rhino.Token.TRY :
                {
                    com.google.common.base.Preconditions.checkState((first.getNext().getType() == com.google.javascript.rhino.Token.BLOCK) && (!first.getNext().hasMoreThanOneChild()));
                    com.google.common.base.Preconditions.checkState((childCount >= 2) && (childCount <= 3));
                    add("try");
                    add(first, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    com.google.javascript.rhino.Node catchblock = first.getNext().getFirstChild();
                    if (catchblock != null) {
                        add(catchblock);
                    }
                    if (childCount == 3) {
                        add("finally");
                        add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CATCH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("catch(");
                add(first);
                add(")");
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.THROW :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("throw");
                add(first);
                cc.endStatement(true);
                break;
            case com.google.javascript.rhino.Token.RETURN :
                add("return");
                if (childCount == 1) {
                    add(first);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 0);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.VAR :
                if (first != null) {
                    add("var ");
                    addList(first, false, getContextForNoInOperator(context));
                }
                break;
            case com.google.javascript.rhino.Token.LABEL_NAME :
                com.google.common.base.Preconditions.checkState(!n.getString().isEmpty());
                addIdentifier(n.getString());
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ((first == null) || (first.getType() == com.google.javascript.rhino.Token.EMPTY)) {
                    addIdentifier(n.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    addIdentifier(n.getString());
                    cc.addOp("=", true);
                    if (first.getType() == com.google.javascript.rhino.Token.COMMA) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.ASSIGN));
                    } else {
                        addExpr(first, 0, getContextForNoInOperator(context));
                    }
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                add("[");
                addArrayList(first);
                add("]");
                break;
            case com.google.javascript.rhino.Token.LP :
                add("(");
                addList(first);
                add(")");
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                addList(first, false, context);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addNumber(n.getDouble());
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type));
                    break;
                }
            case com.google.javascript.rhino.Token.NEG :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    if (n.getFirstChild().getType() == com.google.javascript.rhino.Token.NUMBER) {
                        cc.addNumber(-n.getFirstChild().getDouble());
                    } else {
                        cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
                    addLeftExpr(first, p + 1, context);
                    cc.addOp("?", true);
                    addExpr(first.getNext(), 1);
                    cc.addOp(":", true);
                    addExpr(last, 1);
                    break;
                }
            case com.google.javascript.rhino.Token.REGEXP :
                if ((first.getType() != com.google.javascript.rhino.Token.STRING) || (last.getType() != com.google.javascript.rhino.Token.STRING)) {
                    throw new java.lang.Error("Expected children to be strings");
                }
                java.lang.String regexp = com.google.javascript.jscomp.CodeGenerator.regexpEscape(first.getString(), outputCharsetEncoder);
                if (childCount == 2) {
                    add(regexp + last.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    add(regexp);
                }
                break;
            case com.google.javascript.rhino.Token.GET_REF :
                add(first);
                break;
            case com.google.javascript.rhino.Token.REF_SPECIAL :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first);
                add(".");
                add(((java.lang.String) (n.getProp(com.google.javascript.rhino.Node.NAME_PROP))));
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                if (n.getClass() != com.google.javascript.rhino.Node.class) {
                    throw new java.lang.Error("Unexpected Node subclass.");
                }
                com.google.common.base.Preconditions.checkState(childCount == 3);
                boolean funcNeedsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                if (funcNeedsParens) {
                    add("(");
                }
                add("function");
                add(first);
                add(first.getNext());
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                cc.endFunction(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                if (funcNeedsParens) {
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.GET :
            case com.google.javascript.rhino.Token.SET :
                com.google.common.base.Preconditions.checkState(n.getParent().getType() == com.google.javascript.rhino.Token.OBJECTLIT);
                com.google.common.base.Preconditions.checkState(childCount == 1);
                com.google.common.base.Preconditions.checkState(first.getType() == com.google.javascript.rhino.Token.FUNCTION);
                com.google.common.base.Preconditions.checkState(first.getFirstChild().getString().isEmpty());
                if (type == com.google.javascript.rhino.Token.GET) {
                    com.google.common.base.Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());
                    add("get ");
                } else {
                    com.google.common.base.Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
                    add("set ");
                }
                java.lang.String name = n.getString();
                com.google.javascript.rhino.Node fn = first;
                com.google.javascript.rhino.Node parameters = fn.getChildAtIndex(1);
                com.google.javascript.rhino.Node body = fn.getLastChild();
                if (((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {
                    add(name);
                } else {
                    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);
                    if (!java.lang.Double.isNaN(d)) {
                        cc.addNumber(d);
                    } else {
                        addJsString(n.getString());
                    }
                }
                add(parameters);
                add(body, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                {
                    if (n.getClass() != com.google.javascript.rhino.Node.class) {
                        throw new java.lang.Error("Unexpected Node subclass.");
                    }
                    boolean preserveBlock = context == com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
                    if (preserveBlock) {
                        cc.beginBlock();
                    }
                    boolean preferLineBreaks = (type == com.google.javascript.rhino.Token.SCRIPT) || ((((type == com.google.javascript.rhino.Token.BLOCK) && (!preserveBlock)) && (n.getParent() != null)) && (n.getParent().getType() == com.google.javascript.rhino.Token.SCRIPT));
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        add(c, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                        if (c.getType() == com.google.javascript.rhino.Token.VAR) {
                            cc.endStatement();
                        }
                        if (c.getType() == com.google.javascript.rhino.Token.FUNCTION) {
                            cc.maybeLineBreak();
                        }
                        if (preferLineBreaks) {
                            cc.notePreferredLineBreak();
                        }
                    }
                    if (preserveBlock) {
                        cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.FOR :
                if (childCount == 4) {
                    add("for(");
                    if (first.getType() == com.google.javascript.rhino.Token.VAR) {
                        add(first, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    } else {
                        addExpr(first, 0, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    }
                    add(";");
                    add(first.getNext());
                    add(";");
                    add(first.getNext().getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    add("for(");
                    add(first);
                    add("in");
                    add(first.getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                }
                break;
            case com.google.javascript.rhino.Token.DO :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("do");
                addNonEmptyStatement(first, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                add("while(");
                add(last);
                add(")");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.WHILE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("while(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.EMPTY :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETPROP: expected 2 children, but got %s", childCount);
                    com.google.common.base.Preconditions.checkState(last.getType() == com.google.javascript.rhino.Token.STRING, "Bad GETPROP: RHS should be STRING");
                    boolean needsParens = first.getType() == com.google.javascript.rhino.Token.NUMBER;
                    if (needsParens) {
                        add("(");
                    }
                    addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                    if (needsParens) {
                        add(")");
                    }
                    add(".");
                    addIdentifier(last.getString());
                    break;
                }
            case com.google.javascript.rhino.Token.GETELEM :
                com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETELEM: expected 2 children but got %s", childCount);
                addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                add("[");
                add(first.getNext());
                add("]");
                break;
            case com.google.javascript.rhino.Token.WITH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("with(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    java.lang.String o = (type == com.google.javascript.rhino.Token.INC) ? "++" : "--";
                    int postProp = n.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
                    if (postProp != 0) {
                        addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                        cc.addOp(o, false);
                    } else {
                        cc.addOp(o, false);
                        add(first);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CALL :
                if (isIndirectEval(first) || (n.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) && com.google.javascript.jscomp.NodeUtil.isGet(first))) {
                    add("(0,");
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.COMMA));
                    add(")");
                } else {
                    addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                }
                add("(");
                addList(first.getNext());
                add(")");
                break;
            case com.google.javascript.rhino.Token.IF :
                boolean hasElse = childCount == 3;
                boolean ambiguousElseClause = (context == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE) && (!hasElse);
                if (ambiguousElseClause) {
                    cc.beginBlock();
                }
                add("if(");
                add(first);
                add(")");
                if (hasElse) {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE, false);
                    add("else");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                    com.google.common.base.Preconditions.checkState(childCount == 2);
                }
                if (ambiguousElseClause) {
                    cc.endBlock();
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.TRUE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add(com.google.javascript.rhino.Node.tokenToName(type));
                break;
            case com.google.javascript.rhino.Token.CONTINUE :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("continue");
                if (childCount == 1) {
                    if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.DEBUGGER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("debugger");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.BREAK :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("break");
                if (childCount == 1) {
                    if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.EXPR_VOID :
                throw new java.lang.Error("Unexpected EXPR_VOID. Should be EXPR_RESULT.");
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first, com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR);
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.NEW :
                add("new ");
                int precedence = com.google.javascript.jscomp.NodeUtil.precedence(type);
                if (com.google.javascript.jscomp.NodeUtil.containsType(first, com.google.javascript.rhino.Token.CALL, new com.google.javascript.jscomp.NodeUtil.MatchNotFunction())) {
                    precedence = com.google.javascript.jscomp.NodeUtil.precedence(first.getType()) + 1;
                }
                addExpr(first, precedence);
                com.google.javascript.rhino.Node next = first.getNext();
                if (next != null) {
                    add("(");
                    addList(next);
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                if (childCount != ((n.getParent() != null) && (n.getParent().getType() == com.google.javascript.rhino.Token.OBJECTLIT) ? 1 : 0)) {
                    throw new java.lang.IllegalStateException("Unexpected String children: " + n.getParent().toStringTree());
                }
                addJsString(n.getString());
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("delete ");
                add(first);
                break;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                {
                    boolean needsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                    if (needsParens) {
                        add("(");
                    }
                    add("{");
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        if (c != first) {
                            cc.listSeparator();
                        }
                        if ((c.getType() == com.google.javascript.rhino.Token.GET) || (c.getType() == com.google.javascript.rhino.Token.SET)) {
                            add(c);
                        } else {
                            com.google.common.base.Preconditions.checkState(c.getType() == com.google.javascript.rhino.Token.STRING);
                            java.lang.String key = c.getString();
                            if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {
                                add(key);
                            } else {
                                double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);
                                if (!java.lang.Double.isNaN(d)) {
                                    cc.addNumber(d);
                                } else {
                                    addExpr(c, 1);
                                }
                            }
                            add(":");
                            addExpr(c.getFirstChild(), 1);
                        }
                    }
                    add("}");
                    if (needsParens) {
                        add(")");
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.SWITCH :
                add("switch(");
                add(first);
                add(")");
                cc.beginBlock();
                addAllSiblings(first.getNext());
                cc.endBlock(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("case ");
                add(first);
                addCaseBody(last);
                break;
            case com.google.javascript.rhino.Token.DEFAULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("default");
                addCaseBody(first);
                break;
            case com.google.javascript.rhino.Token.LABEL :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {
                    throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                }
                add(first);
                add(":");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), true);
                break;
            case com.google.javascript.rhino.Token.SETNAME :
                break;
            default :
                throw new java.lang.Error((("Unknown type " + type) + "\n") + n.toStringTree());
        }
        cc.endSourceMapping(n);
    }

    static boolean isSimpleNumber(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if ((c < '0') || (c > '9')) {
                return false;
            }
        }
        return len > 0;
    }

    static double getSimpleNumber(java.lang.String s) {
        if (com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(s)) {
            try {
                long l = java.lang.Long.parseLong(s);
                if (l < com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                    return l;
                }
            } catch (java.lang.NumberFormatException e) {
            }
        }
        return java.lang.Double.NaN;
    }

    private boolean isIndirectEval(com.google.javascript.rhino.Node n) {
        return ((n.getType() == com.google.javascript.rhino.Token.NAME) && "eval".equals(n.getString())) && (!n.getBooleanProp(com.google.javascript.rhino.Node.DIRECT_EVAL));
    }

    private void addNonEmptyStatement(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context, boolean allowNonBlockChild) {
        com.google.javascript.rhino.Node nodeToProcess = n;
        if ((!allowNonBlockChild) && (n.getType() != com.google.javascript.rhino.Token.BLOCK)) {
            throw new java.lang.Error("Missing BLOCK child.");
        }
        if (n.getType() == com.google.javascript.rhino.Token.BLOCK) {
            int count = com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2);
            if (count == 0) {
                if (cc.shouldPreserveExtraBlocks()) {
                    cc.beginBlock();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                } else {
                    cc.endStatement(true);
                }
                return;
            }
            if (count == 1) {
                com.google.javascript.rhino.Node firstAndOnlyChild = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n);
                boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();
                if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {
                    cc.beginBlock();
                    add(firstAndOnlyChild, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                    cc.maybeLineBreak();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    return;
                } else {
                    nodeToProcess = firstAndOnlyChild;
                }
            }
            if (count > 1) {
                context = com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
            }
        }
        if (nodeToProcess.getType() == com.google.javascript.rhino.Token.EMPTY) {
            cc.endStatement(true);
        } else {
            add(nodeToProcess, context);
            if (nodeToProcess.getType() == com.google.javascript.rhino.Token.VAR) {
                cc.endStatement();
            }
        }
    }

    private boolean isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node n) {
        if (n.getType() == com.google.javascript.rhino.Token.LABEL) {
            com.google.javascript.rhino.Node labeledStatement = n.getLastChild();
            if (labeledStatement.getType() != com.google.javascript.rhino.Token.BLOCK) {
                return isOneExactlyFunctionOrDo(labeledStatement);
            } else if (com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2) == 1) {
                return isOneExactlyFunctionOrDo(com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n));
            } else {
                return false;
            }
        } else {
            return (n.getType() == com.google.javascript.rhino.Token.FUNCTION) || (n.getType() == com.google.javascript.rhino.Token.DO);
        }
    }

    void addLeftExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        addExpr(n, minPrecedence, context);
    }

    void addExpr(com.google.javascript.rhino.Node n, int minPrecedence) {
        addExpr(n, minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    private void addExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if ((com.google.javascript.jscomp.NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE) && (n.getType() == com.google.javascript.rhino.Token.IN))) {
            add("(");
            add(n, clearContextForNoInOperator(context));
            add(")");
        } else {
            add(n, context);
        }
    }

    void addList(com.google.javascript.rhino.Node firstInList) {
        addList(firstInList, true, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument) {
        addList(firstInList, isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context lhsContext) {
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            boolean isFirst = n == firstInList;
            if (isFirst) {
                addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
            } else {
                cc.listSeparator();
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0);
            }
        }
    }

    void addArrayList(com.google.javascript.rhino.Node firstInList) {
        boolean lastWasEmpty = false;
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            if (n != firstInList) {
                cc.listSeparator();
            }
            addExpr(n, 1);
            lastWasEmpty = n.getType() == com.google.javascript.rhino.Token.EMPTY;
        }
        if (lastWasEmpty) {
            cc.listSeparator();
        }
    }

    void addCaseBody(com.google.javascript.rhino.Node caseBody) {
        cc.beginCaseBody();
        add(caseBody);
        cc.endCaseBody();
    }

    void addAllSiblings(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n; c != null; c = c.getNext()) {
            add(c);
        }
    }

    void addJsString(java.lang.String s) {
        java.lang.String cached = ESCAPED_JS_STRINGS.get(s);
        if (cached == null) {
            cached = jsString(s);
            ESCAPED_JS_STRINGS.put(s, cached);
        }
        add(cached);
    }

    java.lang.String jsString(java.lang.String s) {
        int singleq = 0;
        int doubleq = 0;
        for (int i = 0; i < s.length(); i++) {
            switch (s.charAt(i)) {
                case '"' :
                    doubleq++;
                    break;
                case '\'' :
                    singleq++;
                    break;
            }
        }
        java.lang.String doublequote;
        java.lang.String singlequote;
        char quote;
        if (singleq < doubleq) {
            quote = '\'';
            doublequote = "\"";
            singlequote = "\\\'";
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(192).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(192).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(192).collectInput("singleq",singleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(192).collectInput("com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",com.google.javascript.jscomp.CodeGenerator.HEX_CHARS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(192).collectInput("com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS",com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(192).collectInput("s",s);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(192).collectInput("doubleq",doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(192).collectInput("com.google.javascript.jscomp.CodeGenerator.this.cc",com.google.javascript.jscomp.CodeGenerator.this.cc);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(192).collectInput("com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder",com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(192).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(192).collectionEnds();
            }
            if (runtimeAngelicValue)
                quote = '\"';

            doublequote = "\\\"";
            singlequote = "\'";
        }
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder);
    }

    static java.lang.String regexpEscape(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '/', "\"", "'", "\\", outputCharsetEncoder);
    }

    static java.lang.String escapeToDoubleQuotedJsString(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '"', "\\\"", "\'", "\\\\", null);
    }

    static java.lang.String regexpEscape(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.regexpEscape(s, null);
    }

    static java.lang.String strEscape(java.lang.String s, char quote, java.lang.String doublequoteEscape, java.lang.String singlequoteEscape, java.lang.String backslashEscape, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder(s.length() + 2);
        sb.append(quote);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch (c) {
                case '\u0000' :
                    sb.append("\\0");
                    break;
                case '\n' :
                    sb.append("\\n");
                    break;
                case '\r' :
                    sb.append("\\r");
                    break;
                case '\t' :
                    sb.append("\\t");
                    break;
                case '\\' :
                    sb.append(backslashEscape);
                    break;
                case '\"' :
                    sb.append(doublequoteEscape);
                    break;
                case '\'' :
                    sb.append(singlequoteEscape);
                    break;
                case '>' :
                    if ((i >= 2) && (((s.charAt(i - 1) == '-') && (s.charAt(i - 2) == '-')) || ((s.charAt(i - 1) == ']') && (s.charAt(i - 2) == ']')))) {
                        sb.append("\\>");
                    } else {
                        sb.append(c);
                    }
                    break;
                case '<' :
                    final java.lang.String END_SCRIPT = "/script";
                    final java.lang.String START_COMMENT = "!--";
                    if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {
                        sb.append("<\\");
                    } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {
                        sb.append("<\\");
                    } else {
                        sb.append(c);
                    }
                    break;
                default :
                    if (outputCharsetEncoder != null) {
                        if (outputCharsetEncoder.canEncode(c)) {
                            sb.append(c);
                        } else {
                            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                        }
                    } else if ((c > 0x1f) && (c < 0x7f)) {
                        sb.append(c);
                    } else {
                        com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                    }
            }
        }
        sb.append(quote);
        return sb.toString();
    }

    static java.lang.String identifierEscape(java.lang.String s) {
        if (com.google.javascript.jscomp.NodeUtil.isLatin(s)) {
            return s;
        }
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if ((c > 0x1f) && (c < 0x7f)) {
                sb.append(c);
            } else {
                com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
            }
        }
        return sb.toString();
    }

    private static int getNonEmptyChildCount(com.google.javascript.rhino.Node n, int maxCount) {
        int i = 0;
        com.google.javascript.rhino.Node c = n.getFirstChild();
        for (; (c != null) && (i < maxCount); c = c.getNext()) {
            if (c.getType() == com.google.javascript.rhino.Token.BLOCK) {
                i += com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(c, maxCount - i);
            } else if (c.getType() != com.google.javascript.rhino.Token.EMPTY) {
                i++;
            }
        }
        return i;
    }

    private static com.google.javascript.rhino.Node getFirstNonEmptyChild(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.getType() == com.google.javascript.rhino.Token.BLOCK) {
                com.google.javascript.rhino.Node result = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(c);
                if (result != null) {
                    return result;
                }
            } else if (c.getType() != com.google.javascript.rhino.Token.EMPTY) {
                return c;
            }
        }
        return null;
    }

    enum Context {

        STATEMENT,
        BEFORE_DANGLING_ELSE,
        START_OF_EXPR,
        PRESERVE_BLOCK,
        IN_FOR_INIT_CLAUSE,
        OTHER;}

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNonEmptyExpression(com.google.javascript.jscomp.CodeGenerator.Context currentContext) {
        return currentContext == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE ? com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context clearContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.OTHER : context;
    }

    private static void appendHexJavaScriptRepresentation(java.lang.StringBuilder sb, char c) {
        try {
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(c, sb);
        } catch (java.io.IOException ex) {
            throw new java.lang.RuntimeException(ex);
        }
    }

    private static void appendHexJavaScriptRepresentation(int codePoint, java.lang.Appendable out) throws java.io.IOException {
        if (java.lang.Character.isSupplementaryCodePoint(codePoint)) {
            char[] surrogates = java.lang.Character.toChars(codePoint);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[0], out);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[1], out);
            return;
        }
        out.append("\\u").append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 12) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 8) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 4) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[codePoint & 0xf]);
    }
}
[11965069] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659912098279
GPR[SSUN]-1659912098279
-718432441
GPR[SPVATF]-1659912098509
GPR[EPVATF]-1659912098805
GPR[SPS]-1659912098805
[11966273] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1014.
GPR[EPS]-1659912099483
GPR[ESUN]-1659912099483
GPR[SSUN]-1659912099483
-718432441
GPR[ESUN]-1659912099714
GPR[SSUN]-1659912099714
-718432441
GPR[ESUN]-1659912099943
GPR[SSUN]-1659912099943
-718432441
GPR[SPVATF]-1659912100173
GPR[EPVATF]-1659912100427
GPR[SPS]-1659912100427
[11967943] ERROR ConstraintModelBuilder - Unable to compile the change: 
class CodeGenerator {
    private final java.util.Map<java.lang.String, java.lang.String> ESCAPED_JS_STRINGS = com.google.common.collect.Maps.newHashMap();

    private static final char[] HEX_CHARS = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };

    private final com.google.javascript.jscomp.CodeConsumer cc;

    private final java.nio.charset.CharsetEncoder outputCharsetEncoder;

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer, java.nio.charset.Charset outputCharset) {
        cc = consumer;
        if ((outputCharset == null) || (outputCharset == com.google.common.base.Charsets.US_ASCII)) {
            this.outputCharsetEncoder = null;
        } else {
            this.outputCharsetEncoder = outputCharset.newEncoder();
        }
    }

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer) {
        this(consumer, null);
    }

    public void tagAsStrict() {
        add("'use strict';");
    }

    void add(java.lang.String str) {
        cc.add(str);
    }

    private void addIdentifier(java.lang.String identifier) {
        cc.addIdentifier(com.google.javascript.jscomp.CodeGenerator.identifierEscape(identifier));
    }

    void add(com.google.javascript.rhino.Node n) {
        add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void add(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if (!cc.continueProcessing()) {
            return;
        }
        int type = n.getType();
        java.lang.String opstr = com.google.javascript.jscomp.NodeUtil.opToStr(type);
        int childCount = n.getChildCount();
        com.google.javascript.rhino.Node first = n.getFirstChild();
        com.google.javascript.rhino.Node last = n.getLastChild();
        if ((opstr != null) && (first != last)) {
            com.google.common.base.Preconditions.checkState(childCount == 2, "Bad binary operator \"%s\": expected 2 arguments but got %s", opstr, childCount);
            int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
            addLeftExpr(first, p, context);
            cc.addOp(opstr, true);
            com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);
            if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {
                addExpr(last, p, rhsContext);
            } else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {
                addExpr(last, p, rhsContext);
            } else {
                addExpr(last, p + 1, rhsContext);
            }
            return;
        }
        cc.startSourceMapping(n);
        switch (type) {
            case com.google.javascript.rhino.Token.TRY :
                {
                    com.google.common.base.Preconditions.checkState((first.getNext().getType() == com.google.javascript.rhino.Token.BLOCK) && (!first.getNext().hasMoreThanOneChild()));
                    com.google.common.base.Preconditions.checkState((childCount >= 2) && (childCount <= 3));
                    add("try");
                    add(first, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    com.google.javascript.rhino.Node catchblock = first.getNext().getFirstChild();
                    if (catchblock != null) {
                        add(catchblock);
                    }
                    if (childCount == 3) {
                        add("finally");
                        add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CATCH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("catch(");
                add(first);
                add(")");
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.THROW :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("throw");
                add(first);
                cc.endStatement(true);
                break;
            case com.google.javascript.rhino.Token.RETURN :
                add("return");
                if (childCount == 1) {
                    add(first);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 0);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.VAR :
                if (first != null) {
                    add("var ");
                    addList(first, false, getContextForNoInOperator(context));
                }
                break;
            case com.google.javascript.rhino.Token.LABEL_NAME :
                com.google.common.base.Preconditions.checkState(!n.getString().isEmpty());
                addIdentifier(n.getString());
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ((first == null) || (first.getType() == com.google.javascript.rhino.Token.EMPTY)) {
                    addIdentifier(n.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    addIdentifier(n.getString());
                    cc.addOp("=", true);
                    if (first.getType() == com.google.javascript.rhino.Token.COMMA) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.ASSIGN));
                    } else {
                        addExpr(first, 0, getContextForNoInOperator(context));
                    }
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                add("[");
                addArrayList(first);
                add("]");
                break;
            case com.google.javascript.rhino.Token.LP :
                add("(");
                addList(first);
                add(")");
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                addList(first, false, context);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addNumber(n.getDouble());
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type));
                    break;
                }
            case com.google.javascript.rhino.Token.NEG :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    if (n.getFirstChild().getType() == com.google.javascript.rhino.Token.NUMBER) {
                        cc.addNumber(-n.getFirstChild().getDouble());
                    } else {
                        cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
                    addLeftExpr(first, p + 1, context);
                    cc.addOp("?", true);
                    addExpr(first.getNext(), 1);
                    cc.addOp(":", true);
                    addExpr(last, 1);
                    break;
                }
            case com.google.javascript.rhino.Token.REGEXP :
                if ((first.getType() != com.google.javascript.rhino.Token.STRING) || (last.getType() != com.google.javascript.rhino.Token.STRING)) {
                    throw new java.lang.Error("Expected children to be strings");
                }
                java.lang.String regexp = com.google.javascript.jscomp.CodeGenerator.regexpEscape(first.getString(), outputCharsetEncoder);
                if (childCount == 2) {
                    add(regexp + last.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    add(regexp);
                }
                break;
            case com.google.javascript.rhino.Token.GET_REF :
                add(first);
                break;
            case com.google.javascript.rhino.Token.REF_SPECIAL :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first);
                add(".");
                add(((java.lang.String) (n.getProp(com.google.javascript.rhino.Node.NAME_PROP))));
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                if (n.getClass() != com.google.javascript.rhino.Node.class) {
                    throw new java.lang.Error("Unexpected Node subclass.");
                }
                com.google.common.base.Preconditions.checkState(childCount == 3);
                boolean funcNeedsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                if (funcNeedsParens) {
                    add("(");
                }
                add("function");
                add(first);
                add(first.getNext());
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                cc.endFunction(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                if (funcNeedsParens) {
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.GET :
            case com.google.javascript.rhino.Token.SET :
                com.google.common.base.Preconditions.checkState(n.getParent().getType() == com.google.javascript.rhino.Token.OBJECTLIT);
                com.google.common.base.Preconditions.checkState(childCount == 1);
                com.google.common.base.Preconditions.checkState(first.getType() == com.google.javascript.rhino.Token.FUNCTION);
                com.google.common.base.Preconditions.checkState(first.getFirstChild().getString().isEmpty());
                if (type == com.google.javascript.rhino.Token.GET) {
                    com.google.common.base.Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());
                    add("get ");
                } else {
                    com.google.common.base.Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
                    add("set ");
                }
                java.lang.String name = n.getString();
                com.google.javascript.rhino.Node fn = first;
                com.google.javascript.rhino.Node parameters = fn.getChildAtIndex(1);
                com.google.javascript.rhino.Node body = fn.getLastChild();
                if (((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {
                    add(name);
                } else {
                    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);
                    if (!java.lang.Double.isNaN(d)) {
                        cc.addNumber(d);
                    } else {
                        addJsString(n.getString());
                    }
                }
                add(parameters);
                add(body, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                {
                    if (n.getClass() != com.google.javascript.rhino.Node.class) {
                        throw new java.lang.Error("Unexpected Node subclass.");
                    }
                    boolean preserveBlock = context == com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
                    if (preserveBlock) {
                        cc.beginBlock();
                    }
                    boolean preferLineBreaks = (type == com.google.javascript.rhino.Token.SCRIPT) || ((((type == com.google.javascript.rhino.Token.BLOCK) && (!preserveBlock)) && (n.getParent() != null)) && (n.getParent().getType() == com.google.javascript.rhino.Token.SCRIPT));
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        add(c, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                        if (c.getType() == com.google.javascript.rhino.Token.VAR) {
                            cc.endStatement();
                        }
                        if (c.getType() == com.google.javascript.rhino.Token.FUNCTION) {
                            cc.maybeLineBreak();
                        }
                        if (preferLineBreaks) {
                            cc.notePreferredLineBreak();
                        }
                    }
                    if (preserveBlock) {
                        cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.FOR :
                if (childCount == 4) {
                    add("for(");
                    if (first.getType() == com.google.javascript.rhino.Token.VAR) {
                        add(first, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    } else {
                        addExpr(first, 0, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    }
                    add(";");
                    add(first.getNext());
                    add(";");
                    add(first.getNext().getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    add("for(");
                    add(first);
                    add("in");
                    add(first.getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                }
                break;
            case com.google.javascript.rhino.Token.DO :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("do");
                addNonEmptyStatement(first, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                add("while(");
                add(last);
                add(")");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.WHILE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("while(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.EMPTY :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETPROP: expected 2 children, but got %s", childCount);
                    com.google.common.base.Preconditions.checkState(last.getType() == com.google.javascript.rhino.Token.STRING, "Bad GETPROP: RHS should be STRING");
                    boolean needsParens = first.getType() == com.google.javascript.rhino.Token.NUMBER;
                    if (needsParens) {
                        add("(");
                    }
                    addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                    if (needsParens) {
                        add(")");
                    }
                    add(".");
                    addIdentifier(last.getString());
                    break;
                }
            case com.google.javascript.rhino.Token.GETELEM :
                com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETELEM: expected 2 children but got %s", childCount);
                addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                add("[");
                add(first.getNext());
                add("]");
                break;
            case com.google.javascript.rhino.Token.WITH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("with(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    java.lang.String o = (type == com.google.javascript.rhino.Token.INC) ? "++" : "--";
                    int postProp = n.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
                    if (postProp != 0) {
                        addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                        cc.addOp(o, false);
                    } else {
                        cc.addOp(o, false);
                        add(first);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CALL :
                if (isIndirectEval(first) || (n.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) && com.google.javascript.jscomp.NodeUtil.isGet(first))) {
                    add("(0,");
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.COMMA));
                    add(")");
                } else {
                    addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                }
                add("(");
                addList(first.getNext());
                add(")");
                break;
            case com.google.javascript.rhino.Token.IF :
                boolean hasElse = childCount == 3;
                boolean ambiguousElseClause = (context == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE) && (!hasElse);
                if (ambiguousElseClause) {
                    cc.beginBlock();
                }
                add("if(");
                add(first);
                add(")");
                if (hasElse) {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE, false);
                    add("else");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                    com.google.common.base.Preconditions.checkState(childCount == 2);
                }
                if (ambiguousElseClause) {
                    cc.endBlock();
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.TRUE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add(com.google.javascript.rhino.Node.tokenToName(type));
                break;
            case com.google.javascript.rhino.Token.CONTINUE :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("continue");
                if (childCount == 1) {
                    if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.DEBUGGER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("debugger");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.BREAK :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("break");
                if (childCount == 1) {
                    if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.EXPR_VOID :
                throw new java.lang.Error("Unexpected EXPR_VOID. Should be EXPR_RESULT.");
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first, com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR);
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.NEW :
                add("new ");
                int precedence = com.google.javascript.jscomp.NodeUtil.precedence(type);
                if (com.google.javascript.jscomp.NodeUtil.containsType(first, com.google.javascript.rhino.Token.CALL, new com.google.javascript.jscomp.NodeUtil.MatchNotFunction())) {
                    precedence = com.google.javascript.jscomp.NodeUtil.precedence(first.getType()) + 1;
                }
                addExpr(first, precedence);
                com.google.javascript.rhino.Node next = first.getNext();
                if (next != null) {
                    add("(");
                    addList(next);
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                if (childCount != ((n.getParent() != null) && (n.getParent().getType() == com.google.javascript.rhino.Token.OBJECTLIT) ? 1 : 0)) {
                    throw new java.lang.IllegalStateException("Unexpected String children: " + n.getParent().toStringTree());
                }
                addJsString(n.getString());
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("delete ");
                add(first);
                break;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                {
                    boolean needsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                    if (needsParens) {
                        add("(");
                    }
                    add("{");
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        if (c != first) {
                            cc.listSeparator();
                        }
                        if ((c.getType() == com.google.javascript.rhino.Token.GET) || (c.getType() == com.google.javascript.rhino.Token.SET)) {
                            add(c);
                        } else {
                            com.google.common.base.Preconditions.checkState(c.getType() == com.google.javascript.rhino.Token.STRING);
                            java.lang.String key = c.getString();
                            if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {
                                add(key);
                            } else {
                                double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);
                                if (!java.lang.Double.isNaN(d)) {
                                    cc.addNumber(d);
                                } else {
                                    addExpr(c, 1);
                                }
                            }
                            add(":");
                            addExpr(c.getFirstChild(), 1);
                        }
                    }
                    add("}");
                    if (needsParens) {
                        add(")");
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.SWITCH :
                add("switch(");
                add(first);
                add(")");
                cc.beginBlock();
                addAllSiblings(first.getNext());
                cc.endBlock(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("case ");
                add(first);
                addCaseBody(last);
                break;
            case com.google.javascript.rhino.Token.DEFAULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("default");
                addCaseBody(first);
                break;
            case com.google.javascript.rhino.Token.LABEL :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {
                    throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                }
                add(first);
                add(":");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), true);
                break;
            case com.google.javascript.rhino.Token.SETNAME :
                break;
            default :
                throw new java.lang.Error((("Unknown type " + type) + "\n") + n.toStringTree());
        }
        cc.endSourceMapping(n);
    }

    static boolean isSimpleNumber(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if ((c < '0') || (c > '9')) {
                return false;
            }
        }
        return len > 0;
    }

    static double getSimpleNumber(java.lang.String s) {
        if (com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(s)) {
            try {
                long l = java.lang.Long.parseLong(s);
                if (l < com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                    return l;
                }
            } catch (java.lang.NumberFormatException e) {
            }
        }
        return java.lang.Double.NaN;
    }

    private boolean isIndirectEval(com.google.javascript.rhino.Node n) {
        return ((n.getType() == com.google.javascript.rhino.Token.NAME) && "eval".equals(n.getString())) && (!n.getBooleanProp(com.google.javascript.rhino.Node.DIRECT_EVAL));
    }

    private void addNonEmptyStatement(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context, boolean allowNonBlockChild) {
        com.google.javascript.rhino.Node nodeToProcess = n;
        if ((!allowNonBlockChild) && (n.getType() != com.google.javascript.rhino.Token.BLOCK)) {
            throw new java.lang.Error("Missing BLOCK child.");
        }
        if (n.getType() == com.google.javascript.rhino.Token.BLOCK) {
            int count = com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2);
            if (count == 0) {
                if (cc.shouldPreserveExtraBlocks()) {
                    cc.beginBlock();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                } else {
                    cc.endStatement(true);
                }
                return;
            }
            if (count == 1) {
                com.google.javascript.rhino.Node firstAndOnlyChild = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n);
                boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();
                if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {
                    cc.beginBlock();
                    add(firstAndOnlyChild, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                    cc.maybeLineBreak();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    return;
                } else {
                    nodeToProcess = firstAndOnlyChild;
                }
            }
            if (count > 1) {
                context = com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
            }
        }
        if (nodeToProcess.getType() == com.google.javascript.rhino.Token.EMPTY) {
            cc.endStatement(true);
        } else {
            add(nodeToProcess, context);
            if (nodeToProcess.getType() == com.google.javascript.rhino.Token.VAR) {
                cc.endStatement();
            }
        }
    }

    private boolean isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node n) {
        if (n.getType() == com.google.javascript.rhino.Token.LABEL) {
            com.google.javascript.rhino.Node labeledStatement = n.getLastChild();
            if (labeledStatement.getType() != com.google.javascript.rhino.Token.BLOCK) {
                return isOneExactlyFunctionOrDo(labeledStatement);
            } else if (com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2) == 1) {
                return isOneExactlyFunctionOrDo(com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n));
            } else {
                return false;
            }
        } else {
            return (n.getType() == com.google.javascript.rhino.Token.FUNCTION) || (n.getType() == com.google.javascript.rhino.Token.DO);
        }
    }

    void addLeftExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        addExpr(n, minPrecedence, context);
    }

    void addExpr(com.google.javascript.rhino.Node n, int minPrecedence) {
        addExpr(n, minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    private void addExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if ((com.google.javascript.jscomp.NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE) && (n.getType() == com.google.javascript.rhino.Token.IN))) {
            add("(");
            add(n, clearContextForNoInOperator(context));
            add(")");
        } else {
            add(n, context);
        }
    }

    void addList(com.google.javascript.rhino.Node firstInList) {
        addList(firstInList, true, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument) {
        addList(firstInList, isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context lhsContext) {
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            boolean isFirst = n == firstInList;
            if (isFirst) {
                addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
            } else {
                cc.listSeparator();
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0);
            }
        }
    }

    void addArrayList(com.google.javascript.rhino.Node firstInList) {
        boolean lastWasEmpty = false;
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            if (n != firstInList) {
                cc.listSeparator();
            }
            addExpr(n, 1);
            lastWasEmpty = n.getType() == com.google.javascript.rhino.Token.EMPTY;
        }
        if (lastWasEmpty) {
            cc.listSeparator();
        }
    }

    void addCaseBody(com.google.javascript.rhino.Node caseBody) {
        cc.beginCaseBody();
        add(caseBody);
        cc.endCaseBody();
    }

    void addAllSiblings(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n; c != null; c = c.getNext()) {
            add(c);
        }
    }

    void addJsString(java.lang.String s) {
        java.lang.String cached = ESCAPED_JS_STRINGS.get(s);
        if (cached == null) {
            cached = jsString(s);
            ESCAPED_JS_STRINGS.put(s, cached);
        }
        add(cached);
    }

    java.lang.String jsString(java.lang.String s) {
        int singleq = 0;
        int doubleq = 0;
        for (int i = 0; i < s.length(); i++) {
            switch (s.charAt(i)) {
                case '"' :
                    doubleq++;
                    break;
                case '\'' :
                    singleq++;
                    break;
            }
        }
        java.lang.String doublequote;
        java.lang.String singlequote;
        char quote;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(194).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("singleq",singleq);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",com.google.javascript.jscomp.CodeGenerator.HEX_CHARS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS",com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("s",s);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("doubleq",doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("singleq < doubleq",singleq < doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("com.google.javascript.jscomp.CodeGenerator.this.cc",com.google.javascript.jscomp.CodeGenerator.this.cc);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder",com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectionEnds();
        }
        if (runtimeAngelicValue) if (singleq < doubleq) {
            quote = '\'';
            doublequote = "\"";
            singlequote = "\\\'";
        } else {
            quote = '\"';
            doublequote = "\\\"";
            singlequote = "\'";
        }
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder);
    }

    static java.lang.String regexpEscape(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '/', "\"", "'", "\\", outputCharsetEncoder);
    }

    static java.lang.String escapeToDoubleQuotedJsString(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '"', "\\\"", "\'", "\\\\", null);
    }

    static java.lang.String regexpEscape(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.regexpEscape(s, null);
    }

    static java.lang.String strEscape(java.lang.String s, char quote, java.lang.String doublequoteEscape, java.lang.String singlequoteEscape, java.lang.String backslashEscape, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder(s.length() + 2);
        sb.append(quote);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch (c) {
                case '\u0000' :
                    sb.append("\\0");
                    break;
                case '\n' :
                    sb.append("\\n");
                    break;
                case '\r' :
                    sb.append("\\r");
                    break;
                case '\t' :
                    sb.append("\\t");
                    break;
                case '\\' :
                    sb.append(backslashEscape);
                    break;
                case '\"' :
                    sb.append(doublequoteEscape);
                    break;
                case '\'' :
                    sb.append(singlequoteEscape);
                    break;
                case '>' :
                    if ((i >= 2) && (((s.charAt(i - 1) == '-') && (s.charAt(i - 2) == '-')) || ((s.charAt(i - 1) == ']') && (s.charAt(i - 2) == ']')))) {
                        sb.append("\\>");
                    } else {
                        sb.append(c);
                    }
                    break;
                case '<' :
                    final java.lang.String END_SCRIPT = "/script";
                    final java.lang.String START_COMMENT = "!--";
                    if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {
                        sb.append("<\\");
                    } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {
                        sb.append("<\\");
                    } else {
                        sb.append(c);
                    }
                    break;
                default :
                    if (outputCharsetEncoder != null) {
                        if (outputCharsetEncoder.canEncode(c)) {
                            sb.append(c);
                        } else {
                            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                        }
                    } else if ((c > 0x1f) && (c < 0x7f)) {
                        sb.append(c);
                    } else {
                        com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                    }
            }
        }
        sb.append(quote);
        return sb.toString();
    }

    static java.lang.String identifierEscape(java.lang.String s) {
        if (com.google.javascript.jscomp.NodeUtil.isLatin(s)) {
            return s;
        }
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if ((c > 0x1f) && (c < 0x7f)) {
                sb.append(c);
            } else {
                com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
            }
        }
        return sb.toString();
    }

    private static int getNonEmptyChildCount(com.google.javascript.rhino.Node n, int maxCount) {
        int i = 0;
        com.google.javascript.rhino.Node c = n.getFirstChild();
        for (; (c != null) && (i < maxCount); c = c.getNext()) {
            if (c.getType() == com.google.javascript.rhino.Token.BLOCK) {
                i += com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(c, maxCount - i);
            } else if (c.getType() != com.google.javascript.rhino.Token.EMPTY) {
                i++;
            }
        }
        return i;
    }

    private static com.google.javascript.rhino.Node getFirstNonEmptyChild(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.getType() == com.google.javascript.rhino.Token.BLOCK) {
                com.google.javascript.rhino.Node result = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(c);
                if (result != null) {
                    return result;
                }
            } else if (c.getType() != com.google.javascript.rhino.Token.EMPTY) {
                return c;
            }
        }
        return null;
    }

    enum Context {

        STATEMENT,
        BEFORE_DANGLING_ELSE,
        START_OF_EXPR,
        PRESERVE_BLOCK,
        IN_FOR_INIT_CLAUSE,
        OTHER;}

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNonEmptyExpression(com.google.javascript.jscomp.CodeGenerator.Context currentContext) {
        return currentContext == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE ? com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context clearContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.OTHER : context;
    }

    private static void appendHexJavaScriptRepresentation(java.lang.StringBuilder sb, char c) {
        try {
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(c, sb);
        } catch (java.io.IOException ex) {
            throw new java.lang.RuntimeException(ex);
        }
    }

    private static void appendHexJavaScriptRepresentation(int codePoint, java.lang.Appendable out) throws java.io.IOException {
        if (java.lang.Character.isSupplementaryCodePoint(codePoint)) {
            char[] surrogates = java.lang.Character.toChars(codePoint);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[0], out);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[1], out);
            return;
        }
        out.append("\\u").append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 12) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 8) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 4) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[codePoint & 0xf]);
    }
}
[11967944] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659912101154
GPR[EPVATF]-1659912101404
GPR[SPS]-1659912101404
[11968859] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:969.
GPR[EPS]-1659912102069
GPR[ESUN]-1659912102069
GPR[SSUN]-1659912102069
-718432441
GPR[SPVATF]-1659912102302
GPR[EPVATF]-1659912102572
GPR[SPS]-1659912102572
[11970047] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:960.
GPR[EPS]-1659912103257
GPR[ESUN]-1659912103257
GPR[SSUN]-1659912103257
-718432441
GPR[ESUN]-1659912103487
GPR[SSUN]-1659912103487
-718432441
GPR[ESUN]-1659912103717
GPR[SSUN]-1659912103717
-718432441
GPR[SPVATF]-1659912103946
GPR[EPVATF]-1659912104199
GPR[SPS]-1659912104199
[11971696] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:953.
GPR[EPS]-1659912104906
GPR[ESUN]-1659912104906
GPR[SSUN]-1659912104906
-718432441
GPR[SPVATF]-1659912105137
GPR[EPVATF]-1659912105414
GPR[SPS]-1659912105414
[11972899] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:951.
GPR[EPS]-1659912106109
GPR[ESUN]-1659912106109
GPR[SSUN]-1659912106109
-718432441
GPR[SPVATF]-1659912106341
GPR[EPVATF]-1659912106640
GPR[SPS]-1659912106640
[11974107] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:950.
GPR[EPS]-1659912107317
GPR[ESUN]-1659912107317
GPR[SSUN]-1659912107317
-718432441
GPR[SPVATF]-1659912107550
GPR[EPVATF]-1659912107806
GPR[SPS]-1659912107806
[11975272] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:949.
GPR[EPS]-1659912108482
GPR[SPVATF]-1659912108482
GPR[EPVATF]-1659912108739
GPR[SPS]-1659912108739
[11976199] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:949.
GPR[EPS]-1659912109409
GPR[ESUN]-1659912109409
GPR[SSUN]-1659912109409
-718432441
GPR[ESUN]-1659912109638
GPR[SSUN]-1659912109638
-718432441
GPR[ESUN]-1659912109862
GPR[SSUN]-1659912109862
-718432441
GPR[SPVATF]-1659912110906
GPR[EPVATF]-1659912111168
GPR[SPS]-1659912111168
[11978645] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1073.
GPR[EPS]-1659912111855
GPR[ESUN]-1659912111855
GPR[SSUN]-1659912111855
-718432441
GPR[SPVATF]-1659912112088
GPR[EPVATF]-1659912112384
GPR[SPS]-1659912112384
[11979861] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1012.
GPR[EPS]-1659912113071
GPR[ESUN]-1659912113071
GPR[SSUN]-1659912113071
-718432441
GPR[SPVATF]-1659912113303
GPR[EPVATF]-1659912113559
GPR[SPS]-1659912113559
[11981031] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1011.
GPR[EPS]-1659912114241
GPR[ESUN]-1659912114241
GPR[SSUN]-1659912114241
-718432441
GPR[ESUN]-1659912114471
GPR[SSUN]-1659912114471
80988634
GPR[ESUN]-1659912114650
GPR[SSUN]-1659912114650
-42906419
GPR[SPVATF]-1659912114838
GPR[EPVATF]-1659912115086
GPR[SPS]-1659912115086
[11982326] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.FixedPointGraphTraversal:118.
GPR[EPS]-1659912115536
GPR[ESUN]-1659912115536
GPR[SSUN]-1659912115536
-42906419
GPR[ESUN]-1659912115727
GPR[SSUN]-1659912115727
-42906419
GPR[SPVATF]-1659912115915
GPR[EPVATF]-1659912116164
GPR[SPS]-1659912116164
[11983389] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.FixedPointGraphTraversal:115.
GPR[EPS]-1659912116599
GPR[ESUN]-1659912116599
GPR[SSUN]-1659912116599
-42906419
GPR[ESUN]-1659912116788
GPR[SSUN]-1659912116788
-42906419
GPR[ESUN]-1659912116975
GPR[SSUN]-1659912116975
-42906419
GPR[ESUN]-1659912117164
GPR[SSUN]-1659912117164
-42906419
GPR[SPVATF]-1659912117349
GPR[EPVATF]-1659912117597
GPR[SPS]-1659912117597
[11984832] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.FixedPointGraphTraversal:105.
GPR[EPS]-1659912118043
GPR[ESUN]-1659912118043
GPR[SSUN]-1659912118043
2433571
GPR[SPVATF]-1659912118279
GPR[EPVATF]-1659912118549
GPR[SPS]-1659912118549
[11985951] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:567.
GPR[EPS]-1659912119161
GPR[SPVATF]-1659912119162
GPR[EPVATF]-1659912119407
GPR[SPS]-1659912119407
[11986798] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:567.
GPR[EPS]-1659912120008
GPR[ESUN]-1659912120008
GPR[SSUN]-1659912120008
2433571
GPR[SPVATF]-1659912120235
GPR[EPVATF]-1659912120480
GPR[SPS]-1659912120480
[12370479] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659912503689
GPR[SSUN]-1659912503689
GPR[ESUN]-1659912503690
GPR[SSUN]-1659912503690
GPR[ESUN]-1659912503690
GPR[SSUN]-1659912503690
-42906419
GPR[ESUN]-1659912504039
GPR[SSUN]-1659912504039
-1345859678
GPR[ESUN]-1659912504287
GPR[SSUN]-1659912504287
-42906419
GPR[ESUN]-1659912504479
GPR[SSUN]-1659912504479
-42906419
GPR[SPVATF]-1659912504672
GPR[EPVATF]-1659912504925
GPR[SPS]-1659912504925
[12372176] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.FixedPointGraphTraversal:126.
GPR[EPS]-1659912505386
GPR[ESUN]-1659912505386
GPR[SSUN]-1659912505386
-42906419
GPR[SPVATF]-1659912505588
GPR[EPVATF]-1659912505917
GPR[SPS]-1659912505917
[12373153] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.FixedPointGraphTraversal:107.
GPR[EPS]-1659912506364
GPR[ESUN]-1659912506364
GPR[SSUN]-1659912506364
-42906419
GPR[SPVATF]-1659912506563
GPR[EPVATF]-1659912506822
GPR[SPS]-1659912506822
[12374066] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.FixedPointGraphTraversal:104.
GPR[EPS]-1659912507276
GPR[ESUN]-1659912507276
GPR[SSUN]-1659912507276
-42906419
GPR[ESUN]-1659912507474
GPR[SSUN]-1659912507474
-42906419
GPR[ESUN]-1659912507666
GPR[SSUN]-1659912507666
-42906419
GPR[ESUN]-1659912507858
GPR[SSUN]-1659912507858
-42906419
GPR[ESUN]-1659912508051
GPR[SSUN]-1659912508051
GPR[ESUN]-1659912508051
GPR[SSUN]-1659912508051
1965452846
GPR[ESUN]-1659912508275
GPR[SSUN]-1659912508275
-1117079791
GPR[ESUN]-1659912508474
GPR[SSUN]-1659912508474
-1117079791
GPR[SPVATF]-1659912508671
GPR[EPVATF]-1659912508947
GPR[SPS]-1659912508947
[12376177] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:226.
GPR[EPS]-1659912509387
GPR[ESUN]-1659912509387
GPR[SSUN]-1659912509387
-718432441
GPR[SPVATF]-1659912509627
GPR[EPVATF]-1659912509899
GPR[SPS]-1659912509899
[12377377] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:567.
GPR[EPS]-1659912510587
GPR[ESUN]-1659912510587
GPR[SSUN]-1659912510587
-718432441
GPR[SPVATF]-1659912510819
GPR[EPVATF]-1659912511084
GPR[SPS]-1659912511084
[12378572] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:566.
GPR[EPS]-1659912511782
GPR[ESUN]-1659912511782
GPR[SSUN]-1659912511782
-718432441
GPR[SPVATF]-1659912512015
GPR[EPVATF]-1659912512283
GPR[SPS]-1659912512283
[12379768] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:565.
GPR[EPS]-1659912512978
GPR[ESUN]-1659912512978
GPR[SSUN]-1659912512978
2433571
GPR[SPVATF]-1659912513216
GPR[EPVATF]-1659912513468
GPR[SPS]-1659912513468
[12380846] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1458.
GPR[EPS]-1659912514056
GPR[ESUN]-1659912514056
GPR[SSUN]-1659912514056
-1117079791
GPR[ESUN]-1659912514257
GPR[SSUN]-1659912514257
-1117079791
GPR[ESUN]-1659912514455
GPR[SSUN]-1659912514455
-1117079791
GPR[SPVATF]-1659912514653
GPR[EPVATF]-1659912514902
GPR[SPS]-1659912514902
[12382155] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:633.
GPR[EPS]-1659912515365
GPR[ESUN]-1659912515365
GPR[SSUN]-1659912515365
-1117079791
GPR[SPVATF]-1659912515564
GPR[EPVATF]-1659912515811
GPR[SPS]-1659912515811
[12383045] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:630.
GPR[EPS]-1659912516255
GPR[ESUN]-1659912516255
GPR[SSUN]-1659912516255
-1117079791
GPR[SPVATF]-1659912516454
GPR[EPVATF]-1659912516707
GPR[SPS]-1659912516707
[12383939] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:629.
GPR[EPS]-1659912517149
GPR[ESUN]-1659912517149
GPR[SSUN]-1659912517149
79711797
GPR[ESUN]-1659912517374
GPR[SSUN]-1659912517374
80988634
GPR[ESUN]-1659912517554
GPR[SSUN]-1659912517554
-1117079791
GPR[ESUN]-1659912517753
GPR[SSUN]-1659912517753
-1117079791
GPR[SPVATF]-1659912517949
GPR[EPVATF]-1659912518204
GPR[SPS]-1659912518204
[12385463] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:160.
GPR[EPS]-1659912518673
GPR[ESUN]-1659912518673
GPR[SSUN]-1659912518673
GPR[ESUN]-1659912518673
GPR[SSUN]-1659912518673
-1117079791
GPR[ESUN]-1659912518878
GPR[SSUN]-1659912518878
-1117079791
GPR[SPVATF]-1659912519076
GPR[EPVATF]-1659912519324
GPR[SPS]-1659912519324
[12386562] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:742.
GPR[EPS]-1659912519772
GPR[ESUN]-1659912519772
GPR[SSUN]-1659912519772
-1117079791
GPR[SPVATF]-1659912519975
GPR[EPVATF]-1659912520223
GPR[SPS]-1659912520223
[12387477] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:741.
GPR[EPS]-1659912520687
GPR[ESUN]-1659912520687
GPR[SSUN]-1659912520687
-1117079791
GPR[SPVATF]-1659912520887
GPR[EPVATF]-1659912521143
GPR[SPS]-1659912521144
[12388384] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:740.
GPR[EPS]-1659912521594
GPR[ESUN]-1659912521594
GPR[SSUN]-1659912521594
1616555300
GPR[SPVATF]-1659912521788
GPR[EPVATF]-1659912522065
GPR[SPS]-1659912522065
[12389289] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:185.
GPR[EPS]-1659912522499
GPR[ESUN]-1659912522499
GPR[SSUN]-1659912522499
GPR[ESUN]-1659912522499
GPR[SSUN]-1659912522499
GPR[ESUN]-1659912522499
GPR[SSUN]-1659912522499
80988634
GPR[SPVATF]-1659912522686
GPR[EPVATF]-1659912522951
GPR[SPS]-1659912522951
[12390132] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Token:273.
GPR[EPS]-1659912523342
GPR[ESUN]-1659912523342
GPR[SSUN]-1659912523342
-1117079791
GPR[ESUN]-1659912523543
GPR[SSUN]-1659912523543
-1117079791
GPR[SPVATF]-1659912523742
GPR[EPVATF]-1659912523995
GPR[SPS]-1659912523995
[12391238] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:588.
GPR[EPS]-1659912524448
GPR[ESUN]-1659912524448
GPR[SSUN]-1659912524448
GPR[ESUN]-1659912524448
GPR[SSUN]-1659912524448
GPR[ESUN]-1659912524448
GPR[SSUN]-1659912524448
GPR[ESUN]-1659912524448
GPR[SSUN]-1659912524448
GPR[ESUN]-1659912524448
GPR[SSUN]-1659912524448
GPR[ESUN]-1659912524448
GPR[SSUN]-1659912524448
GPR[ESUN]-1659912524448
GPR[SSUN]-1659912524448
GPR[ESUN]-1659912524448
GPR[SSUN]-1659912524448
1057148605
GPR[ESUN]-1659912524669
GPR[SSUN]-1659912524669
GPR[ESUN]-1659912524669
GPR[SSUN]-1659912524669
-383829259
GPR[ESUN]-1659912524864
GPR[SSUN]-1659912524865
GPR[ESUN]-1659912524865
GPR[SSUN]-1659912524865
GPR[ESUN]-1659912524865
GPR[SSUN]-1659912524865
1537627151
GPR[ESUN]-1659912525073
GPR[SSUN]-1659912525073
-1345859678
GPR[ESUN]-1659912525318
GPR[SSUN]-1659912525318
-1345859678
GPR[ESUN]-1659912525584
GPR[SSUN]-1659912525584
GPR[ESUN]-1659912525584
GPR[SSUN]-1659912525584
GPR[ESUN]-1659912525584
GPR[SSUN]-1659912525584
GPR[ESUN]-1659912525584
GPR[SSUN]-1659912525584
GPR[ESUN]-1659912525584
GPR[SSUN]-1659912525584
GPR[ESUN]-1659912525584
GPR[SSUN]-1659912525584
GPR[ESUN]-1659912525584
GPR[SSUN]-1659912525584
GPR[ESUN]-1659912525584
GPR[SSUN]-1659912525584
GPR[ESUN]-1659912525584
GPR[SSUN]-1659912525584
GPR[ESUN]-1659912525584
GPR[SSUN]-1659912525584
GPR[ESUN]-1659912525584
GPR[SSUN]-1659912525584
GPR[ESUN]-1659912525584
GPR[SSUN]-1659912525584
GPR[ESUN]-1659912525584
GPR[SSUN]-1659912525584
GPR[ESUN]-1659912525584
GPR[SSUN]-1659912525584
GPR[ESUN]-1659912525584
GPR[SSUN]-1659912525584
GPR[ESUN]-1659912525584
GPR[SSUN]-1659912525584
GPR[ESUN]-1659912525584
GPR[SSUN]-1659912525584
GPR[ESUN]-1659912525584
GPR[SSUN]-1659912525584
GPR[ESUN]-1659912525584
GPR[SSUN]-1659912525584
GPR[ESUN]-1659912525584
GPR[SSUN]-1659912525584
1331276989
GPR[ESUN]-1659912525793
GPR[SSUN]-1659912525793
1331276989
GPR[ESUN]-1659912525999
GPR[SSUN]-1659912525999
GPR[ESUN]-1659912525999
GPR[SSUN]-1659912525999
GPR[ESUN]-1659912525999
GPR[SSUN]-1659912525999
GPR[ESUN]-1659912525999
GPR[SSUN]-1659912525999
-1345859678
GPR[ESUN]-1659912526243
GPR[SSUN]-1659912526243
-1345859678
GPR[ESUN]-1659912526488
GPR[SSUN]-1659912526488
1537627151
GPR[ESUN]-1659912526694
GPR[SSUN]-1659912526694
-1345859678
GPR[ESUN]-1659912526936
GPR[SSUN]-1659912526936
GPR[ESUN]-1659912526936
GPR[SSUN]-1659912526936
GPR[ESUN]-1659912526936
GPR[SSUN]-1659912526936
GPR[ESUN]-1659912526936
GPR[SSUN]-1659912526936
GPR[ESUN]-1659912526936
GPR[SSUN]-1659912526936
GPR[ESUN]-1659912526936
GPR[SSUN]-1659912526936
1350153804
GPR[ESUN]-1659912527154
GPR[SSUN]-1659912527154
2433571
GPR[ESUN]-1659912527385
GPR[SSUN]-1659912527385
1057148605
GPR[ESUN]-1659912527602
GPR[SSUN]-1659912527602
-718432441
GPR[SPVATF]-1659912527839
GPR[EPVATF]-1659912528100
GPR[SPS]-1659912528100
[12395641] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:471.
GPR[EPS]-1659912528851
GPR[ESUN]-1659912528851
GPR[SSUN]-1659912528851
-718432441
GPR[SPVATF]-1659912529082
GPR[EPVATF]-1659912529349
GPR[SPS]-1659912529349
[12396829] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:470.
GPR[EPS]-1659912530039
GPR[ESUN]-1659912530039
GPR[SSUN]-1659912530039
-718432441
GPR[SPVATF]-1659912530275
GPR[EPVATF]-1659912530545
GPR[SPS]-1659912530545
[12398028] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:469.
GPR[EPS]-1659912531238
GPR[ESUN]-1659912531238
GPR[SSUN]-1659912531238
-718432441
GPR[SPVATF]-1659912531471
GPR[EPVATF]-1659912531730
GPR[SPS]-1659912531730
[12399215] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:466.
GPR[EPS]-1659912532425
GPR[SPVATF]-1659912532426
GPR[EPVATF]-1659912532679
GPR[SPS]-1659912532679
[12400162] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:466.
GPR[EPS]-1659912533372
GPR[ESUN]-1659912533372
GPR[SSUN]-1659912533372
-718432441
GPR[SPVATF]-1659912533606
GPR[EPVATF]-1659912533860
GPR[SPS]-1659912533861
[12401342] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:465.
GPR[EPS]-1659912534552
GPR[ESUN]-1659912534552
GPR[SSUN]-1659912534552
-718432441
GPR[SPVATF]-1659912534786
GPR[EPVATF]-1659912535042
GPR[SPS]-1659912535042
[12402547] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:462.
GPR[EPS]-1659912535757
GPR[SPVATF]-1659912535757
GPR[EPVATF]-1659912536011
GPR[SPS]-1659912536011
[12403499] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:462.
GPR[EPS]-1659912536709
GPR[ESUN]-1659912536709
GPR[SSUN]-1659912536709
-718432441
GPR[ESUN]-1659912536943
GPR[SSUN]-1659912536943
-718432441
GPR[SPVATF]-1659912537174
GPR[EPVATF]-1659912537434
GPR[SPS]-1659912537434
[12404911] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:458.
GPR[EPS]-1659912538121
GPR[ESUN]-1659912538121
GPR[SSUN]-1659912538121
-718432441
GPR[SPVATF]-1659912538352
GPR[EPVATF]-1659912538612
GPR[SPS]-1659912538612
[12406084] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:455.
GPR[EPS]-1659912539295
GPR[ESUN]-1659912539295
GPR[SSUN]-1659912539295
-718432441
GPR[SPVATF]-1659912539527
GPR[EPVATF]-1659912539793
GPR[SPS]-1659912539793
[12407272] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:389.
GPR[EPS]-1659912540482
GPR[ESUN]-1659912540483
GPR[SSUN]-1659912540483
1616555300
GPR[SPVATF]-1659912540673
GPR[EPVATF]-1659912540933
GPR[SPS]-1659912540933
[12408142] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:170.
GPR[EPS]-1659912541352
GPR[ESUN]-1659912541352
GPR[SSUN]-1659912541352
1187751237
GPR[SPVATF]-1659912541632
GPR[EPVATF]-1659912541902
GPR[SPS]-1659912541903
[12409397] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2859.
GPR[EPS]-1659912542607
GPR[ESUN]-1659912542607
GPR[SSUN]-1659912542607
-1117079791
GPR[ESUN]-1659912542807
GPR[SSUN]-1659912542807
-1117079791
GPR[SPVATF]-1659912543016
GPR[EPVATF]-1659912543281
GPR[SPS]-1659912543281
[12410506] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:266.
GPR[EPS]-1659912543716
GPR[ESUN]-1659912543716
GPR[SSUN]-1659912543716
-1117079791
GPR[ESUN]-1659912543912
GPR[SSUN]-1659912543912
-1117079791
GPR[SPVATF]-1659912544107
GPR[EPVATF]-1659912544367
GPR[SPS]-1659912544367
[12411605] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:354.
GPR[EPS]-1659912544815
GPR[ESUN]-1659912544815
GPR[SSUN]-1659912544815
-1117079791
GPR[SPVATF]-1659912545013
GPR[EPVATF]-1659912545272
GPR[SPS]-1659912545272
[12412510] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:353.
GPR[EPS]-1659912545720
GPR[ESUN]-1659912545720
GPR[SSUN]-1659912545720
-1117079791
GPR[SPVATF]-1659912545917
GPR[EPVATF]-1659912546175
GPR[SPS]-1659912546175
[12413428] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:352.
GPR[EPS]-1659912546638
GPR[ESUN]-1659912546638
GPR[SSUN]-1659912546638
-1117079791
GPR[SPVATF]-1659912546836
GPR[EPVATF]-1659912547094
GPR[SPS]-1659912547094
[12414332] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:351.
GPR[EPS]-1659912547542
GPR[ESUN]-1659912547542
GPR[SSUN]-1659912547542
-1117079791
GPR[SPVATF]-1659912547748
GPR[EPVATF]-1659912548012
GPR[SPS]-1659912548012
[12415325] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:350.
GPR[EPS]-1659912548535
GPR[ESUN]-1659912548535
GPR[SSUN]-1659912548536
-1117079791
GPR[ESUN]-1659912548734
GPR[SSUN]-1659912548734
-1117079791
GPR[SPVATF]-1659912548928
GPR[EPVATF]-1659912549186
GPR[SPS]-1659912549186
[12416445] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:338.
GPR[EPS]-1659912549655
GPR[ESUN]-1659912549655
GPR[SSUN]-1659912549655
-1117079791
GPR[SPVATF]-1659912549853
GPR[EPVATF]-1659912550112
GPR[SPS]-1659912550112
[12417345] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:337.
GPR[EPS]-1659912550555
GPR[ESUN]-1659912550555
GPR[SSUN]-1659912550555
-1117079791
GPR[SPVATF]-1659912550755
GPR[EPVATF]-1659912551019
GPR[SPS]-1659912551019
[12418245] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:336.
GPR[EPS]-1659912551455
GPR[ESUN]-1659912551455
GPR[SSUN]-1659912551455
2433571
GPR[SPVATF]-1659912551690
GPR[EPVATF]-1659912551954
GPR[SPS]-1659912551954
[12426978] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1603.
GPR[EPS]-1659912560188
GPR[ESUN]-1659912560188
GPR[SSUN]-1659912560188
1187751237
GPR[ESUN]-1659912560479
GPR[SSUN]-1659912560479
1187751237
GPR[ESUN]-1659912560758
GPR[SSUN]-1659912560758
79711797
GPR[SPVATF]-1659912560979
GPR[EPVATF]-1659912561247
GPR[SPS]-1659912561247
[12428387] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Scope implements com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> {
    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.Scope.Var> vars = new java.util.LinkedHashMap<java.lang.String, com.google.javascript.jscomp.Scope.Var>();

    private final com.google.javascript.jscomp.Scope parent;

    private final int depth;

    private final com.google.javascript.rhino.Node rootNode;

    private final com.google.javascript.rhino.jstype.ObjectType thisType;

    private final boolean isBottom;

    private com.google.javascript.jscomp.Scope.Var arguments;

    private static final com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES = new com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var>() {
        @java.lang.Override
        public boolean apply(com.google.javascript.jscomp.Scope.Var var) {
            return (((var.getParentNode() != null) && (var.getType() == null)) && (var.getParentNode().getType() == com.google.javascript.rhino.Token.VAR)) && (!var.isExtern());
        }
    };

    public static class Var implements com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> {
        final java.lang.String name;

        final com.google.javascript.rhino.Node nameNode;

        private com.google.javascript.rhino.jstype.JSType type;

        private final com.google.javascript.rhino.JSDocInfo info;

        private final boolean typeInferred;

        final com.google.javascript.jscomp.CompilerInput input;

        final boolean isDefine;

        final int index;

        final com.google.javascript.jscomp.Scope scope;

        private Var(boolean inferred, java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.Scope scope, int index, com.google.javascript.jscomp.CompilerInput input, boolean isDefine, com.google.javascript.rhino.JSDocInfo info) {
            this.name = name;
            this.nameNode = nameNode;
            this.type = type;
            this.scope = scope;
            this.index = index;
            this.input = input;
            this.isDefine = isDefine;
            this.info = info;
            this.typeInferred = inferred;
        }

        public java.lang.String getName() {
            return name;
        }

        public com.google.javascript.rhino.Node getParentNode() {
            return nameNode == null ? null : nameNode.getParent();
        }

        public boolean isBleedingFunction() {
            return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(getParentNode());
        }

        com.google.javascript.jscomp.Scope getScope() {
            return scope;
        }

        public boolean isGlobal() {
            return scope.isGlobal();
        }

        public boolean isLocal() {
            return scope.isLocal();
        }

        boolean isExtern() {
            return (input == null) || input.isExtern();
        }

        public boolean isConst() {
            return (nameNode != null) && com.google.javascript.jscomp.NodeUtil.isConstantName(nameNode);
        }

        public boolean isDefine() {
            return isDefine;
        }

        public com.google.javascript.rhino.Node getInitialValue() {
            com.google.javascript.rhino.Node parent = getParentNode();
            int pType = parent.getType();
            if (pType == com.google.javascript.rhino.Token.FUNCTION) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(252).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(252).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(252).collectInput("pType",pType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(252).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(252).collectInput("com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES",com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(252).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(252).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return parent;

            } else if (pType == com.google.javascript.rhino.Token.ASSIGN) {
                return parent.getLastChild();
            } else if (pType == com.google.javascript.rhino.Token.VAR) {
                return nameNode.getFirstChild();
            } else {
                return null;
            }
        }

        public com.google.javascript.rhino.jstype.JSType getType() {
            return type;
        }

        public com.google.javascript.rhino.Node getNameNode() {
            return nameNode;
        }

        public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
            return info;
        }

        void setType(com.google.javascript.rhino.jstype.JSType type) {
            com.google.common.base.Preconditions.checkState(isTypeInferred());
            this.type = type;
        }

        void resolveType(com.google.javascript.rhino.ErrorReporter errorReporter) {
            if (type != null) {
                type = type.resolve(errorReporter, scope);
            }
        }

        public boolean isTypeInferred() {
            return typeInferred;
        }

        public java.lang.String getInputName() {
            if (input == null) {
                return "<non-file>";
            } else {
                return input.getName();
            }
        }

        public boolean isNoShadow() {
            if ((info != null) && info.isNoShadow()) {
                return true;
            } else {
                return false;
            }
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Var)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Var otherVar = ((com.google.javascript.jscomp.Scope.Var) (other));
            return otherVar.nameNode == nameNode;
        }

        @java.lang.Override
        public int hashCode() {
            return nameNode.hashCode();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return ((("Scope.Var " + name) + "{") + type) + "}";
        }
    }

    public static class Arguments extends com.google.javascript.jscomp.Scope.Var {
        Arguments(com.google.javascript.jscomp.Scope scope) {
            super(false, "arguments", null, null, scope, -1, null, false, null);
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Arguments)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Arguments otherVar = ((com.google.javascript.jscomp.Scope.Arguments) (other));
            return otherVar.scope.getRootNode() == scope.getRootNode();
        }

        @java.lang.Override
        public int hashCode() {
            return java.lang.System.identityHashCode(this);
        }
    }

    Scope(com.google.javascript.jscomp.Scope parent, com.google.javascript.rhino.Node rootNode) {
        com.google.common.base.Preconditions.checkNotNull(parent);
        com.google.common.base.Preconditions.checkArgument(rootNode != parent.rootNode);
        this.parent = parent;
        this.rootNode = rootNode;
        com.google.javascript.rhino.jstype.JSType nodeType = rootNode.getJSType();
        if ((nodeType != null) && (nodeType instanceof com.google.javascript.rhino.jstype.FunctionType)) {
            thisType = ((com.google.javascript.rhino.jstype.FunctionType) (nodeType)).getTypeOfThis();
        } else {
            thisType = parent.thisType;
        }
        this.isBottom = false;
        this.depth = parent.depth + 1;
    }

    Scope(com.google.javascript.rhino.Node rootNode, com.google.javascript.jscomp.AbstractCompiler compiler) {
        this.parent = null;
        this.rootNode = rootNode;
        thisType = compiler.getTypeRegistry().getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.GLOBAL_THIS);
        this.isBottom = false;
        this.depth = 0;
    }

    Scope(com.google.javascript.rhino.Node rootNode, com.google.javascript.rhino.jstype.ObjectType thisType) {
        this.parent = null;
        this.rootNode = rootNode;
        this.thisType = thisType;
        this.isBottom = true;
        this.depth = 0;
    }

    int getDepth() {
        return depth;
    }

    boolean isBottom() {
        return isBottom;
    }

    public com.google.javascript.rhino.Node getRootNode() {
        return rootNode;
    }

    public com.google.javascript.jscomp.Scope getParent() {
        return parent;
    }

    com.google.javascript.jscomp.Scope getGlobalScope() {
        com.google.javascript.jscomp.Scope result = this;
        while (result.getParent() != null) {
            result = result.getParent();
        } 
        return result;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getParentScope() {
        return parent;
    }

    public com.google.javascript.rhino.jstype.ObjectType getTypeOfThis() {
        return thisType;
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input) {
        return declare(name, nameNode, type, input, true);
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input, boolean inferred) {
        com.google.common.base.Preconditions.checkState((name != null) && (name.length() > 0));
        com.google.common.base.Preconditions.checkState(vars.get(name) == null);
        com.google.javascript.rhino.JSDocInfo info = com.google.javascript.jscomp.NodeUtil.getInfoForNameNode(nameNode);
        com.google.javascript.jscomp.Scope.Var var = new com.google.javascript.jscomp.Scope.Var(inferred, name, nameNode, type, this, vars.size(), input, (info != null) && info.isDefine(), info);
        vars.put(name, var);
        return var;
    }

    void undeclare(com.google.javascript.jscomp.Scope.Var var) {
        com.google.common.base.Preconditions.checkState(var.scope == this);
        com.google.common.base.Preconditions.checkState(vars.get(var.name) == var);
        vars.remove(var.name);
    }

    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getSlot(java.lang.String name) {
        return getVar(name);
    }

    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getOwnSlot(java.lang.String name) {
        return vars.get(name);
    }

    public com.google.javascript.jscomp.Scope.Var getVar(java.lang.String name) {
        com.google.javascript.jscomp.Scope.Var var = vars.get(name);
        if (var != null) {
            return var;
        } else if (parent != null) {
            return parent.getVar(name);
        } else {
            return null;
        }
    }

    public com.google.javascript.jscomp.Scope.Var getArgumentsVar() {
        if (arguments == null) {
            arguments = new com.google.javascript.jscomp.Scope.Arguments(this);
        }
        return arguments;
    }

    public boolean isDeclared(java.lang.String name, boolean recurse) {
        com.google.javascript.jscomp.Scope scope = this;
        if (scope.vars.containsKey(name)) {
            return true;
        }
        if ((scope.parent != null) && recurse) {
            return scope.parent.isDeclared(name, recurse);
        }
        return false;
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getVars() {
        return vars.values().iterator();
    }

    public int getVarCount() {
        return vars.size();
    }

    public boolean isGlobal() {
        return parent == null;
    }

    public boolean isLocal() {
        return !isGlobal();
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getDeclarativelyUnboundVarsWithoutTypes() {
        return com.google.common.collect.Iterators.filter(getVars(), com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);
    }
}
[12428388] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659912561598
GPR[SSUN]-1659912561598
-546582215
GPR[ESUN]-1659912561799
GPR[SSUN]-1659912561799
-546582215
GPR[SPVATF]-1659912562000
GPR[EPVATF]-1659912562458
GPR[SPS]-1659912562458
[12429708] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:139.
GPR[EPS]-1659912562918
GPR[ESUN]-1659912562918
GPR[SSUN]-1659912562918
-546582215
GPR[SPVATF]-1659912563134
GPR[EPVATF]-1659912563397
GPR[SPS]-1659912563397
[12430654] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:135.
GPR[EPS]-1659912563864
GPR[SPVATF]-1659912563864
GPR[EPVATF]-1659912564127
GPR[SPS]-1659912564127
[12431502] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:135.
GPR[EPS]-1659912564712
GPR[ESUN]-1659912564712
GPR[SSUN]-1659912564712
-546582215
GPR[ESUN]-1659912564916
GPR[SSUN]-1659912564916
-546582215
GPR[SPVATF]-1659912565119
GPR[EPVATF]-1659912565373
GPR[SPS]-1659912565373
[12432619] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:130.
GPR[EPS]-1659912565829
GPR[SPVATF]-1659912565830
GPR[EPVATF]-1659912566103
GPR[SPS]-1659912566103
[12433370] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:130.
GPR[EPS]-1659912566580
GPR[ESUN]-1659912566581
GPR[SSUN]-1659912566581
1616555300
GPR[SPVATF]-1659912566774
GPR[EPVATF]-1659912567033
GPR[SPS]-1659912567033
[12434249] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:193.
GPR[EPS]-1659912567459
GPR[ESUN]-1659912567459
GPR[SSUN]-1659912567459
GPR[ESUN]-1659912567459
GPR[SSUN]-1659912567459
1187751237
GPR[ESUN]-1659912567734
GPR[SSUN]-1659912567734
GPR[ESUN]-1659912567734
GPR[SSUN]-1659912567734
-718432441
GPR[ESUN]-1659912567965
GPR[SSUN]-1659912567965
-718432441
GPR[SPVATF]-1659912568194
GPR[EPVATF]-1659912568450
GPR[SPS]-1659912568450
[12435957] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:531.
GPR[EPS]-1659912569167
GPR[ESUN]-1659912569167
GPR[SSUN]-1659912569167
-718432441
GPR[SPVATF]-1659912569400
GPR[EPVATF]-1659912569652
GPR[SPS]-1659912569652
[12437126] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:530.
GPR[EPS]-1659912570336
GPR[ESUN]-1659912570336
GPR[SSUN]-1659912570336
-718432441
GPR[SPVATF]-1659912570570
GPR[EPVATF]-1659912570838
GPR[SPS]-1659912570838
[12438371] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:529.
GPR[EPS]-1659912571581
GPR[ESUN]-1659912571581
GPR[SSUN]-1659912571581
-718432441
GPR[SPVATF]-1659912571839
GPR[EPVATF]-1659912572098
GPR[SPS]-1659912572098
[12439614] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:528.
GPR[EPS]-1659912572824
GPR[ESUN]-1659912572824
GPR[SSUN]-1659912572824
-718432441
GPR[SPVATF]-1659912573056
GPR[EPVATF]-1659912573333
GPR[SPS]-1659912573333
[12440840] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:526.
GPR[EPS]-1659912574050
GPR[ESUN]-1659912574050
GPR[SSUN]-1659912574050
-718432441
GPR[SPVATF]-1659912574321
GPR[EPVATF]-1659912574602
GPR[SPS]-1659912574602
[12442087] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:520.
GPR[EPS]-1659912575297
GPR[SPVATF]-1659912575297
GPR[EPVATF]-1659912575558
GPR[SPS]-1659912575558
[12443046] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:520.
GPR[EPS]-1659912576256
GPR[ESUN]-1659912576256
GPR[SSUN]-1659912576256
-1117079791
GPR[SPVATF]-1659912576458
GPR[EPVATF]-1659912576716
GPR[SPS]-1659912576716
[12443999] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:278.
GPR[EPS]-1659912577209
GPR[ESUN]-1659912577209
GPR[SSUN]-1659912577209
2433571
GPR[SPVATF]-1659912577456
GPR[EPVATF]-1659912577725
GPR[SPS]-1659912577725
[12445136] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1652.
GPR[EPS]-1659912578346
GPR[ESUN]-1659912578346
GPR[SSUN]-1659912578346
448480590
GPR[SPVATF]-1659912578550
GPR[EPVATF]-1659912578801
GPR[SPS]-1659912578801
[12446090] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodePrinter$CompactCodePrinter:449.
GPR[EPS]-1659912579300
GPR[ESUN]-1659912579300
GPR[SSUN]-1659912579300
448480590
GPR[SPVATF]-1659912579509
GPR[EPVATF]-1659912579761
GPR[SPS]-1659912579761
[12447081] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodePrinter$CompactCodePrinter:448.
GPR[EPS]-1659912580291
GPR[SPVATF]-1659912580291
GPR[EPVATF]-1659912580554
GPR[SPS]-1659912580554
[12447850] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodePrinter$CompactCodePrinter:448.
GPR[EPS]-1659912581060
GPR[ESUN]-1659912581060
GPR[SSUN]-1659912581060
448480590
GPR[ESUN]-1659912581269
GPR[SSUN]-1659912581269
-718432441
GPR[SPVATF]-1659912581502
GPR[EPVATF]-1659912581756
GPR[SPS]-1659912581756
[12449269] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:123.
GPR[EPS]-1659912582479
GPR[ESUN]-1659912582479
GPR[SSUN]-1659912582479
-718432441
GPR[SPVATF]-1659912582766
GPR[EPVATF]-1659912583104
GPR[SPS]-1659912583104
[12450705] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:121.
GPR[EPS]-1659912583915
GPR[ESUN]-1659912583915
GPR[SSUN]-1659912583915
-718432441
GPR[SPVATF]-1659912584196
GPR[EPVATF]-1659912584501
GPR[SPS]-1659912584501
[12452084] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:117.
GPR[EPS]-1659912585294
GPR[SPVATF]-1659912585294
GPR[EPVATF]-1659912585630
GPR[SPS]-1659912585630
[12453184] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:117.
GPR[EPS]-1659912586394
GPR[ESUN]-1659912586394
GPR[SSUN]-1659912586394
-718432441
GPR[SPVATF]-1659912586634
GPR[EPVATF]-1659912586897
GPR[SPS]-1659912586897
[12454397] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:114.
GPR[EPS]-1659912587607
GPR[SPVATF]-1659912587608
GPR[EPVATF]-1659912587867
GPR[SPS]-1659912587867
[12455402] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:114.
GPR[EPS]-1659912588612
GPR[ESUN]-1659912588612
GPR[SSUN]-1659912588612
-718432441
GPR[ESUN]-1659912588852
GPR[SSUN]-1659912588852
-718432441
GPR[SPVATF]-1659912589090
GPR[EPVATF]-1659912589350
GPR[SPS]-1659912589350
[12456828] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:105.
GPR[EPS]-1659912590038
GPR[ESUN]-1659912590038
GPR[SSUN]-1659912590038
-718432441
GPR[SPVATF]-1659912590270
GPR[EPVATF]-1659912590537
GPR[SPS]-1659912590537
[12458051] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:104.
GPR[EPS]-1659912591261
GPR[ESUN]-1659912591261
GPR[SSUN]-1659912591261
-718432441
GPR[ESUN]-1659912591497
GPR[SSUN]-1659912591497
-718432441
GPR[SPVATF]-1659912591727
GPR[EPVATF]-1659912592003
GPR[SPS]-1659912592003
[12459481] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:99.
GPR[EPS]-1659912592691
GPR[ESUN]-1659912592691
GPR[SSUN]-1659912592691
2433571
GPR[SPVATF]-1659912592928
GPR[EPVATF]-1659912593186
GPR[SPS]-1659912593186
[12460629] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1641.
GPR[EPS]-1659912593839
GPR[SPVATF]-1659912593839
GPR[EPVATF]-1659912594107
GPR[SPS]-1659912594107
[12461509] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1641.
GPR[EPS]-1659912594719
GPR[ESUN]-1659912594719
GPR[SSUN]-1659912594719
2433571
GPR[ESUN]-1659912594956
GPR[SSUN]-1659912594956
2433571
GPR[ESUN]-1659912595192
GPR[SSUN]-1659912595192
-546582215
GPR[SPVATF]-1659912595393
GPR[EPVATF]-1659912595659
GPR[SPS]-1659912595660
[12462907] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:71.
GPR[EPS]-1659912596117
GPR[ESUN]-1659912596117
GPR[SSUN]-1659912596117
-546582215
GPR[ESUN]-1659912596318
GPR[SSUN]-1659912596318
-546582215
GPR[SPVATF]-1659912596571
GPR[EPVATF]-1659912596834
GPR[SPS]-1659912596834
[12464073] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:106.
GPR[EPS]-1659912597283
GPR[ESUN]-1659912597283
GPR[SSUN]-1659912597283
-546582215
GPR[SPVATF]-1659912597485
GPR[EPVATF]-1659912597746
GPR[SPS]-1659912597746
[12464985] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:99.
GPR[EPS]-1659912598195
GPR[ESUN]-1659912598195
GPR[SSUN]-1659912598195
-546582215
GPR[SPVATF]-1659912598399
GPR[EPVATF]-1659912598664
GPR[SPS]-1659912598664
[12465914] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:98.
GPR[EPS]-1659912599124
GPR[ESUN]-1659912599124
GPR[SSUN]-1659912599124
-546582215
GPR[SPVATF]-1659912599327
GPR[EPVATF]-1659912599600
GPR[SPS]-1659912599600
[12466896] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:93.
GPR[EPS]-1659912600106
GPR[SPVATF]-1659912600107
GPR[EPVATF]-1659912600370
GPR[SPS]-1659912600370
[12467618] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:93.
GPR[EPS]-1659912600828
GPR[ESUN]-1659912600828
GPR[SSUN]-1659912600828
-546582215
GPR[ESUN]-1659912601031
GPR[SSUN]-1659912601031
-546582215
GPR[ESUN]-1659912601234
GPR[SSUN]-1659912601234
-546582215
GPR[ESUN]-1659912601436
GPR[SSUN]-1659912601436
-546582215
GPR[ESUN]-1659912601638
GPR[SSUN]-1659912601638
-546582215
GPR[SPVATF]-1659912601840
GPR[EPVATF]-1659912602127
GPR[SPS]-1659912602127
[12469370] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:84.
GPR[EPS]-1659912602580
GPR[ESUN]-1659912602580
GPR[SSUN]-1659912602581
-718432441
GPR[SPVATF]-1659912602812
GPR[EPVATF]-1659912607644
GPR[SPS]-1659912607644
[12475187] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:314.
GPR[EPS]-1659912608397
GPR[SPVATF]-1659912608398
GPR[EPVATF]-1659912608873
GPR[SPS]-1659912608873
[12476343] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:314.
GPR[EPS]-1659912609553
GPR[ESUN]-1659912609553
GPR[SSUN]-1659912609553
-718432441
GPR[SPVATF]-1659912609790
GPR[EPVATF]-1659912610052
GPR[SPS]-1659912610052
[12477538] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:312.
GPR[EPS]-1659912610748
GPR[ESUN]-1659912610748
GPR[SSUN]-1659912610748
-718432441
GPR[SPVATF]-1659912610988
GPR[EPVATF]-1659912611249
GPR[SPS]-1659912611249
[12478723] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:311.
GPR[EPS]-1659912611933
GPR[ESUN]-1659912611933
GPR[SSUN]-1659912611933
-718432441
GPR[SPVATF]-1659912612160
GPR[EPVATF]-1659912612416
GPR[SPS]-1659912612416
[12479900] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:310.
GPR[EPS]-1659912613110
GPR[ESUN]-1659912613110
GPR[SSUN]-1659912613110
-718432441
GPR[SPVATF]-1659912613337
GPR[EPVATF]-1659912613589
GPR[SPS]-1659912613589
[12481059] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:308.
GPR[EPS]-1659912614269
GPR[ESUN]-1659912614269
GPR[SSUN]-1659912614269
-718432441
GPR[SPVATF]-1659912614495
GPR[EPVATF]-1659912614750
GPR[SPS]-1659912614750
[12482245] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:307.
GPR[EPS]-1659912615455
GPR[ESUN]-1659912615455
GPR[SSUN]-1659912615455
-718432441
GPR[SPVATF]-1659912615689
GPR[EPVATF]-1659912615956
GPR[SPS]-1659912615956
[12483430] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:303.
GPR[EPS]-1659912616640
GPR[SPVATF]-1659912616640
GPR[EPVATF]-1659912616890
GPR[SPS]-1659912616890
[12484375] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:303.
GPR[EPS]-1659912617585
GPR[ESUN]-1659912617585
GPR[SSUN]-1659912617585
-718432441
GPR[ESUN]-1659912617845
GPR[SSUN]-1659912617845
-718432441
GPR[SPVATF]-1659912618081
GPR[EPVATF]-1659912618349
GPR[SPS]-1659912618349
[12485843] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:301.
GPR[EPS]-1659912619053
GPR[ESUN]-1659912619053
GPR[SSUN]-1659912619053
-718432441
GPR[SPVATF]-1659912619292
GPR[EPVATF]-1659912619564
GPR[SPS]-1659912619564
[12487048] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:298.
GPR[EPS]-1659912620258
GPR[SPVATF]-1659912620259
GPR[EPVATF]-1659912620513
GPR[SPS]-1659912620513
[12488015] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:298.
GPR[EPS]-1659912621225
GPR[ESUN]-1659912621225
GPR[SSUN]-1659912621225
1616555300
GPR[ESUN]-1659912621416
GPR[SSUN]-1659912621416
1616555300
GPR[SPVATF]-1659912621606
GPR[EPVATF]-1659912621862
GPR[SPS]-1659912621862
[12489098] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:169.
GPR[EPS]-1659912622308
GPR[SPVATF]-1659912622308
GPR[EPVATF]-1659912622558
GPR[SPS]-1659912622558
[12489778] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:169.
GPR[EPS]-1659912622988
GPR[ESUN]-1659912622988
GPR[SSUN]-1659912622988
1616555300
GPR[SPVATF]-1659912623181
GPR[EPVATF]-1659912623441
GPR[SPS]-1659912623441
[12490684] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:168.
GPR[EPS]-1659912623894
GPR[ESUN]-1659912623894
GPR[SSUN]-1659912623894
GPR[ESUN]-1659912623894
GPR[SSUN]-1659912623894
-718432441
GPR[SPVATF]-1659912624128
GPR[EPVATF]-1659912624383
GPR[SPS]-1659912624383
[12491988] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:218.
GPR[EPS]-1659912625198
GPR[ESUN]-1659912625198
GPR[SSUN]-1659912625198
-718432441
GPR[SPVATF]-1659912625430
GPR[EPVATF]-1659912625694
GPR[SPS]-1659912625694
[12493167] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:217.
GPR[EPS]-1659912626377
GPR[ESUN]-1659912626377
GPR[SSUN]-1659912626377
-718432441
GPR[SPVATF]-1659912626639
GPR[EPVATF]-1659912626894
GPR[SPS]-1659912626894
[12494373] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:216.
GPR[EPS]-1659912627583
GPR[ESUN]-1659912627583
GPR[SSUN]-1659912627583
-718432441
GPR[SPVATF]-1659912627817
GPR[EPVATF]-1659912628078
GPR[SPS]-1659912628078
[12495634] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:215.
GPR[EPS]-1659912628844
GPR[ESUN]-1659912628845
GPR[SSUN]-1659912628845
1187751237
GPR[ESUN]-1659912629150
GPR[SSUN]-1659912629150
-1117079791
GPR[ESUN]-1659912629350
GPR[SSUN]-1659912629350
-1117079791
GPR[SPVATF]-1659912629546
GPR[EPVATF]-1659912629815
GPR[SPS]-1659912629815
[12497046] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:346.
GPR[EPS]-1659912630256
GPR[ESUN]-1659912630256
GPR[SSUN]-1659912630256
-1117079791
GPR[SPVATF]-1659912630457
GPR[EPVATF]-1659912630715
GPR[SPS]-1659912630715
[12497953] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:345.
GPR[EPS]-1659912631163
GPR[ESUN]-1659912631163
GPR[SSUN]-1659912631163
-1117079791
GPR[SPVATF]-1659912631361
GPR[EPVATF]-1659912631619
GPR[SPS]-1659912631619
[12498855] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:344.
GPR[EPS]-1659912632065
GPR[ESUN]-1659912632065
GPR[SSUN]-1659912632065
-1117079791
GPR[SPVATF]-1659912632260
GPR[EPVATF]-1659912632512
GPR[SPS]-1659912632512
[12499796] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:343.
GPR[EPS]-1659912633006
GPR[ESUN]-1659912633006
GPR[SSUN]-1659912633006
-1117079791
GPR[SPVATF]-1659912633203
GPR[EPVATF]-1659912633457
GPR[SPS]-1659912633457
[12500694] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:342.
GPR[EPS]-1659912633904
GPR[ESUN]-1659912633904
GPR[SSUN]-1659912633904
-1117079791
GPR[ESUN]-1659912634101
GPR[SSUN]-1659912634101
-1117079791
GPR[SPVATF]-1659912634295
GPR[EPVATF]-1659912634556
GPR[SPS]-1659912634556
[12501797] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:100.
GPR[EPS]-1659912635007
GPR[ESUN]-1659912635007
GPR[SSUN]-1659912635007
-1117079791
GPR[ESUN]-1659912635207
GPR[SSUN]-1659912635207
-1117079791
GPR[SPVATF]-1659912635404
GPR[EPVATF]-1659912635666
GPR[SPS]-1659912635666
[12502941] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:616.
GPR[EPS]-1659912636151
GPR[ESUN]-1659912636151
GPR[SSUN]-1659912636151
-1117079791
GPR[SPVATF]-1659912636349
GPR[EPVATF]-1659912636616
GPR[SPS]-1659912636616
[12503850] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:615.
GPR[EPS]-1659912637060
GPR[ESUN]-1659912637060
GPR[SSUN]-1659912637060
-1117079791
GPR[ESUN]-1659912637257
GPR[SSUN]-1659912637257
-1117079791
GPR[SPVATF]-1659912637453
GPR[EPVATF]-1659912637721
GPR[SPS]-1659912637721
[12504953] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:613.
GPR[EPS]-1659912638163
GPR[ESUN]-1659912638163
GPR[SSUN]-1659912638163
-1117079791
GPR[SPVATF]-1659912638361
GPR[EPVATF]-1659912638617
GPR[SPS]-1659912638618
[12505855] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:612.
GPR[EPS]-1659912639065
GPR[ESUN]-1659912639065
GPR[SSUN]-1659912639065
-1117079791
GPR[SPVATF]-1659912639267
GPR[EPVATF]-1659912639538
GPR[SPS]-1659912639538
[12506811] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:611.
GPR[EPS]-1659912640021
GPR[ESUN]-1659912640021
GPR[SSUN]-1659912640021
-1117079791
GPR[ESUN]-1659912640218
GPR[SSUN]-1659912640218
-1117079791
GPR[SPVATF]-1659912640413
GPR[EPVATF]-1659912640674
GPR[SPS]-1659912640674
[12507908] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:242.
GPR[EPS]-1659912641118
GPR[ESUN]-1659912641118
GPR[SSUN]-1659912641118
79711797
GPR[SPVATF]-1659912641341
GPR[EPVATF]-1659912641604
GPR[SPS]-1659912641604
[12508881] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Scope$Var:205.
GPR[EPS]-1659912642091
GPR[ESUN]-1659912642091
GPR[SSUN]-1659912642091
79711797
GPR[ESUN]-1659912642314
GPR[SSUN]-1659912642314
79711797
GPR[ESUN]-1659912642535
GPR[SSUN]-1659912642535
1616555300
GPR[ESUN]-1659912642725
GPR[SSUN]-1659912642725
-1117079791
GPR[ESUN]-1659912642959
GPR[SSUN]-1659912642959
-1117079791
GPR[SPVATF]-1659912643157
GPR[EPVATF]-1659912643421
GPR[SPS]-1659912643421
[12510651] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:594.
GPR[EPS]-1659912643861
GPR[ESUN]-1659912643861
GPR[SSUN]-1659912643861
-1117079791
GPR[SPVATF]-1659912644062
GPR[EPVATF]-1659912644328
GPR[SPS]-1659912644328
[12511563] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:593.
GPR[EPS]-1659912644773
GPR[ESUN]-1659912644773
GPR[SSUN]-1659912644773
-1117079791
GPR[SPVATF]-1659912644971
GPR[EPVATF]-1659912645234
GPR[SPS]-1659912645234
[12512471] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:592.
GPR[EPS]-1659912645681
GPR[ESUN]-1659912645681
GPR[SSUN]-1659912645681
-1117079791
GPR[ESUN]-1659912645877
GPR[SSUN]-1659912645877
-1117079791
GPR[SPVATF]-1659912646071
GPR[EPVATF]-1659912646334
GPR[SPS]-1659912646334
[12513617] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:217.
GPR[EPS]-1659912646828
GPR[ESUN]-1659912646828
GPR[SSUN]-1659912646828
1616555300
GPR[ESUN]-1659912647017
GPR[SSUN]-1659912647017
1616555300
GPR[SPVATF]-1659912647205
GPR[EPVATF]-1659912647470
GPR[SPS]-1659912647470
[12514682] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:81.
GPR[EPS]-1659912647893
GPR[ESUN]-1659912647893
GPR[SSUN]-1659912647893
1616555300
GPR[ESUN]-1659912648085
GPR[SSUN]-1659912648085
1616555300
GPR[SPVATF]-1659912648273
GPR[EPVATF]-1659912648542
GPR[SPS]-1659912648542
[12515757] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:77.
GPR[EPS]-1659912648967
GPR[ESUN]-1659912648967
GPR[SSUN]-1659912648967
-1117079791
GPR[ESUN]-1659912649166
GPR[SSUN]-1659912649166
-1117079791
GPR[SPVATF]-1659912649362
GPR[EPVATF]-1659912649629
GPR[SPS]-1659912649629
[12517762] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:602.
GPR[EPS]-1659912650973
GPR[ESUN]-1659912650973
GPR[SSUN]-1659912650973
-1117079791
GPR[SPVATF]-1659912651182
GPR[EPVATF]-1659912651452
GPR[SPS]-1659912651452
[12518695] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:598.
GPR[EPS]-1659912651905
GPR[ESUN]-1659912651905
GPR[SSUN]-1659912651905
-718432441
GPR[SPVATF]-1659912652146
GPR[EPVATF]-1659912652564
GPR[SPS]-1659912652564
[12520049] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:399.
GPR[EPS]-1659912653259
GPR[ESUN]-1659912653259
GPR[SSUN]-1659912653259
-718432441
GPR[SPVATF]-1659912653490
GPR[EPVATF]-1659912653748
GPR[SPS]-1659912653748
[12521228] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:371.
GPR[EPS]-1659912654438
GPR[ESUN]-1659912654438
GPR[SSUN]-1659912654439
-1117079791
GPR[ESUN]-1659912654642
GPR[SSUN]-1659912654642
-1117079791
GPR[SPVATF]-1659912654838
GPR[EPVATF]-1659912655111
GPR[SPS]-1659912655111
[12522346] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:368.
GPR[EPS]-1659912655556
GPR[ESUN]-1659912655556
GPR[SSUN]-1659912655556
-1117079791
GPR[SPVATF]-1659912655756
GPR[EPVATF]-1659912656010
GPR[SPS]-1659912656010
[12523243] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:367.
GPR[EPS]-1659912656453
GPR[ESUN]-1659912656453
GPR[SSUN]-1659912656453
-1117079791
GPR[SPVATF]-1659912656651
GPR[EPVATF]-1659912656901
GPR[SPS]-1659912656901
[12524151] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:366.
GPR[EPS]-1659912657361
GPR[ESUN]-1659912657361
GPR[SSUN]-1659912657361
-1117079791
GPR[SPVATF]-1659912657562
GPR[EPVATF]-1659912657816
GPR[SPS]-1659912657816
[12525049] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:365.
GPR[EPS]-1659912658259
GPR[ESUN]-1659912658259
GPR[SSUN]-1659912658259
-1117079791
GPR[ESUN]-1659912658456
GPR[SSUN]-1659912658456
-1117079791
GPR[SPVATF]-1659912658652
GPR[EPVATF]-1659912658919
GPR[SPS]-1659912658919
[12526152] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:258.
GPR[EPS]-1659912659362
GPR[ESUN]-1659912659362
GPR[SSUN]-1659912659362
1616555300
GPR[ESUN]-1659912659555
GPR[SSUN]-1659912659555
1616555300
GPR[SPVATF]-1659912659744
GPR[EPVATF]-1659912659995
GPR[SPS]-1659912659995
[12527214] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:120.
GPR[EPS]-1659912660424
GPR[ESUN]-1659912660424
GPR[SSUN]-1659912660424
1616555300
GPR[SPVATF]-1659912660617
GPR[EPVATF]-1659912660870
GPR[SPS]-1659912660870
[12528111] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:117.
GPR[EPS]-1659912661321
GPR[SPVATF]-1659912661321
GPR[EPVATF]-1659912661580
GPR[SPS]-1659912661580
[12528807] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:117.
GPR[EPS]-1659912662017
GPR[ESUN]-1659912662017
GPR[SSUN]-1659912662017
1616555300
GPR[SPVATF]-1659912662211
GPR[EPVATF]-1659912662469
GPR[SPS]-1659912662469
[12529743] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:116.
GPR[EPS]-1659912662953
GPR[ESUN]-1659912662953
GPR[SSUN]-1659912662953
1616555300
GPR[ESUN]-1659912663146
GPR[SSUN]-1659912663146
1616555300
GPR[SPVATF]-1659912663340
GPR[EPVATF]-1659912663596
GPR[SPS]-1659912663596
[12530821] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:108.
GPR[EPS]-1659912664031
GPR[ESUN]-1659912664031
GPR[SSUN]-1659912664031
1616555300
GPR[SPVATF]-1659912664225
GPR[EPVATF]-1659912664487
GPR[SPS]-1659912664487
[12531732] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:107.
GPR[EPS]-1659912664942
GPR[ESUN]-1659912664942
GPR[SSUN]-1659912664942
1616555300
GPR[SPVATF]-1659912665140
GPR[EPVATF]-1659912665411
GPR[SPS]-1659912665411
[12532640] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:105.
GPR[EPS]-1659912665850
GPR[ESUN]-1659912665850
GPR[SSUN]-1659912665851
1616555300
GPR[SPVATF]-1659912666048
GPR[EPVATF]-1659912666313
GPR[SPS]-1659912666313
[12533539] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:101.
GPR[EPS]-1659912666749
GPR[SPVATF]-1659912666749
GPR[EPVATF]-1659912667005
GPR[SPS]-1659912667005
[12534238] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:101.
GPR[EPS]-1659912667448
GPR[ESUN]-1659912667448
GPR[SSUN]-1659912667448
79711797
GPR[SPVATF]-1659912667681
GPR[EPVATF]-1659912667938
GPR[SPS]-1659912667938
[12535086] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Scope implements com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> {
    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.Scope.Var> vars = new java.util.LinkedHashMap<java.lang.String, com.google.javascript.jscomp.Scope.Var>();

    private final com.google.javascript.jscomp.Scope parent;

    private final int depth;

    private final com.google.javascript.rhino.Node rootNode;

    private final com.google.javascript.rhino.jstype.ObjectType thisType;

    private final boolean isBottom;

    private com.google.javascript.jscomp.Scope.Var arguments;

    private static final com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES = new com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var>() {
        @java.lang.Override
        public boolean apply(com.google.javascript.jscomp.Scope.Var var) {
            return (((var.getParentNode() != null) && (var.getType() == null)) && (var.getParentNode().getType() == com.google.javascript.rhino.Token.VAR)) && (!var.isExtern());
        }
    };

    public static class Var implements com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> {
        final java.lang.String name;

        final com.google.javascript.rhino.Node nameNode;

        private com.google.javascript.rhino.jstype.JSType type;

        private final com.google.javascript.rhino.JSDocInfo info;

        private final boolean typeInferred;

        final com.google.javascript.jscomp.CompilerInput input;

        final boolean isDefine;

        final int index;

        final com.google.javascript.jscomp.Scope scope;

        private Var(boolean inferred, java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.Scope scope, int index, com.google.javascript.jscomp.CompilerInput input, boolean isDefine, com.google.javascript.rhino.JSDocInfo info) {
            this.name = name;
            this.nameNode = nameNode;
            this.type = type;
            this.scope = scope;
            this.index = index;
            this.input = input;
            this.isDefine = isDefine;
            this.info = info;
            this.typeInferred = inferred;
        }

        public java.lang.String getName() {
            return name;
        }

        public com.google.javascript.rhino.Node getParentNode() {
            return nameNode == null ? null : nameNode.getParent();
        }

        public boolean isBleedingFunction() {
            return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(getParentNode());
        }

        com.google.javascript.jscomp.Scope getScope() {
            return scope;
        }

        public boolean isGlobal() {
            return scope.isGlobal();
        }

        public boolean isLocal() {
            return scope.isLocal();
        }

        boolean isExtern() {
            return (input == null) || input.isExtern();
        }

        public boolean isConst() {
            return (nameNode != null) && com.google.javascript.jscomp.NodeUtil.isConstantName(nameNode);
        }

        public boolean isDefine() {
            return isDefine;
        }

        public com.google.javascript.rhino.Node getInitialValue() {
            com.google.javascript.rhino.Node parent = getParentNode();
            int pType = parent.getType();
            if (pType == com.google.javascript.rhino.Token.FUNCTION) {
                return parent;
            } else if (pType == com.google.javascript.rhino.Token.ASSIGN) {
                return parent.getLastChild();
            } else if (pType == com.google.javascript.rhino.Token.VAR) {
                return nameNode.getFirstChild();
            } else {
                return null;
            }
        }

        public com.google.javascript.rhino.jstype.JSType getType() {
            return type;
        }

        public com.google.javascript.rhino.Node getNameNode() {
            return nameNode;
        }

        public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
            return info;
        }

        void setType(com.google.javascript.rhino.jstype.JSType type) {
            com.google.common.base.Preconditions.checkState(isTypeInferred());
            this.type = type;
        }

        void resolveType(com.google.javascript.rhino.ErrorReporter errorReporter) {
            if (type != null) {
                type = type.resolve(errorReporter, scope);
            }
        }

        public boolean isTypeInferred() {
            return typeInferred;
        }

        public java.lang.String getInputName() {
            if (input == null) {
                return "<non-file>";
            } else {
                return input.getName();
            }
        }

        public boolean isNoShadow() {
            if ((info != null) && info.isNoShadow()) {
                return true;
            } else {
                return false;
            }
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Var)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Var otherVar = ((com.google.javascript.jscomp.Scope.Var) (other));
            return otherVar.nameNode == nameNode;
        }

        @java.lang.Override
        public int hashCode() {
            return nameNode.hashCode();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return ((("Scope.Var " + name) + "{") + type) + "}";
        }
    }

    public static class Arguments extends com.google.javascript.jscomp.Scope.Var {
        Arguments(com.google.javascript.jscomp.Scope scope) {
            super(false, "arguments", null, null, scope, -1, null, false, null);
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Arguments)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Arguments otherVar = ((com.google.javascript.jscomp.Scope.Arguments) (other));
            return otherVar.scope.getRootNode() == scope.getRootNode();
        }

        @java.lang.Override
        public int hashCode() {
            return java.lang.System.identityHashCode(this);
        }
    }

    Scope(com.google.javascript.jscomp.Scope parent, com.google.javascript.rhino.Node rootNode) {
        com.google.common.base.Preconditions.checkNotNull(parent);
        com.google.common.base.Preconditions.checkArgument(rootNode != parent.rootNode);
        this.parent = parent;
        this.rootNode = rootNode;
        com.google.javascript.rhino.jstype.JSType nodeType = rootNode.getJSType();
        if ((nodeType != null) && (nodeType instanceof com.google.javascript.rhino.jstype.FunctionType)) {
            thisType = ((com.google.javascript.rhino.jstype.FunctionType) (nodeType)).getTypeOfThis();
        } else {
            thisType = parent.thisType;
        }
        this.isBottom = false;
        this.depth = parent.depth + 1;
    }

    Scope(com.google.javascript.rhino.Node rootNode, com.google.javascript.jscomp.AbstractCompiler compiler) {
        this.parent = null;
        this.rootNode = rootNode;
        thisType = compiler.getTypeRegistry().getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.GLOBAL_THIS);
        this.isBottom = false;
        this.depth = 0;
    }

    Scope(com.google.javascript.rhino.Node rootNode, com.google.javascript.rhino.jstype.ObjectType thisType) {
        this.parent = null;
        this.rootNode = rootNode;
        this.thisType = thisType;
        this.isBottom = true;
        this.depth = 0;
    }

    int getDepth() {
        return depth;
    }

    boolean isBottom() {
        return isBottom;
    }

    public com.google.javascript.rhino.Node getRootNode() {
        return rootNode;
    }

    public com.google.javascript.jscomp.Scope getParent() {
        return parent;
    }

    com.google.javascript.jscomp.Scope getGlobalScope() {
        com.google.javascript.jscomp.Scope result = this;
        while (result.getParent() != null) {
            result = result.getParent();
        } 
        return result;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getParentScope() {
        return parent;
    }

    public com.google.javascript.rhino.jstype.ObjectType getTypeOfThis() {
        return thisType;
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input) {
        return declare(name, nameNode, type, input, true);
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input, boolean inferred) {
        com.google.common.base.Preconditions.checkState((name != null) && (name.length() > 0));
        com.google.common.base.Preconditions.checkState(vars.get(name) == null);
        com.google.javascript.rhino.JSDocInfo info = com.google.javascript.jscomp.NodeUtil.getInfoForNameNode(nameNode);
        com.google.javascript.jscomp.Scope.Var var = new com.google.javascript.jscomp.Scope.Var(inferred, name, nameNode, type, this, vars.size(), input, (info != null) && info.isDefine(), info);
        vars.put(name, var);
        return var;
    }

    void undeclare(com.google.javascript.jscomp.Scope.Var var) {
        com.google.common.base.Preconditions.checkState(var.scope == this);
        com.google.common.base.Preconditions.checkState(vars.get(var.name) == var);
        vars.remove(var.name);
    }

    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getSlot(java.lang.String name) {
        return getVar(name);
    }

    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getOwnSlot(java.lang.String name) {
        return vars.get(name);
    }

    public com.google.javascript.jscomp.Scope.Var getVar(java.lang.String name) {
        com.google.javascript.jscomp.Scope.Var var = vars.get(name);
        if (var != null) {
            return var;
        } else if (parent != null) {
            return parent.getVar(name);
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(345).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectInput("com.google.javascript.jscomp.Scope.this.parent",com.google.javascript.jscomp.Scope.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectInput("com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES",com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectInput("var",var);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectInput("com.google.javascript.jscomp.Scope.this.isBottom",com.google.javascript.jscomp.Scope.this.isBottom);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectInput("com.google.javascript.jscomp.Scope.this.rootNode",com.google.javascript.jscomp.Scope.this.rootNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectInput("name",name);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectInput("com.google.javascript.jscomp.Scope.this.thisType",com.google.javascript.jscomp.Scope.this.thisType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectInput("com.google.javascript.jscomp.Scope.this.depth",com.google.javascript.jscomp.Scope.this.depth);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectInput("com.google.javascript.jscomp.Scope.this.vars",com.google.javascript.jscomp.Scope.this.vars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectInput("com.google.javascript.jscomp.Scope.this.arguments",com.google.javascript.jscomp.Scope.this.arguments);} catch (Exception ex1) {ex1.printStackTrace();};
                if (com.google.javascript.jscomp.Scope.this.parent!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectInput("com.google.javascript.jscomp.Scope.this.parent.getTypeOfThis()",com.google.javascript.jscomp.Scope.this.parent.getTypeOfThis());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectInput("com.google.javascript.jscomp.Scope.this.parent.getParent()",com.google.javascript.jscomp.Scope.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectInput("com.google.javascript.jscomp.Scope.this.parent.getDepth()",com.google.javascript.jscomp.Scope.this.parent.getDepth());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectInput("com.google.javascript.jscomp.Scope.this.parent.getParentScope()",com.google.javascript.jscomp.Scope.this.parent.getParentScope());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectInput("com.google.javascript.jscomp.Scope.this.parent.isBottom()",com.google.javascript.jscomp.Scope.this.parent.isBottom());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectInput("com.google.javascript.jscomp.Scope.this.parent.getRootNode()",com.google.javascript.jscomp.Scope.this.parent.getRootNode());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.jscomp.Scope.this.arguments!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getName()",com.google.javascript.jscomp.Scope.this.arguments.getName());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isDefine()",com.google.javascript.jscomp.Scope.this.arguments.isDefine());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getType()",com.google.javascript.jscomp.Scope.this.arguments.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isTypeInferred()",com.google.javascript.jscomp.Scope.this.arguments.isTypeInferred());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getJSDocInfo()",com.google.javascript.jscomp.Scope.this.arguments.getJSDocInfo());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getScope()",com.google.javascript.jscomp.Scope.this.arguments.getScope());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getNameNode()",com.google.javascript.jscomp.Scope.this.arguments.getNameNode());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(345).collectionEnds();
            }
            if (runtimeAngelicValue)
                return null;

        }
    }

    public com.google.javascript.jscomp.Scope.Var getArgumentsVar() {
        if (arguments == null) {
            arguments = new com.google.javascript.jscomp.Scope.Arguments(this);
        }
        return arguments;
    }

    public boolean isDeclared(java.lang.String name, boolean recurse) {
        com.google.javascript.jscomp.Scope scope = this;
        if (scope.vars.containsKey(name)) {
            return true;
        }
        if ((scope.parent != null) && recurse) {
            return scope.parent.isDeclared(name, recurse);
        }
        return false;
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getVars() {
        return vars.values().iterator();
    }

    public int getVarCount() {
        return vars.size();
    }

    public boolean isGlobal() {
        return parent == null;
    }

    public boolean isLocal() {
        return !isGlobal();
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getDeclarativelyUnboundVarsWithoutTypes() {
        return com.google.common.collect.Iterators.filter(getVars(), com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);
    }
}
[12535086] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659912668296
GPR[SSUN]-1659912668296
1064951918
GPR[ESUN]-1659912668479
GPR[SSUN]-1659912668479
1064951918
GPR[SPVATF]-1659912668700
GPR[EPVATF]-1659912668953
GPR[SPS]-1659912668953
[12536159] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeChangeHandler$RecentChange:39.
GPR[EPS]-1659912669370
GPR[ESUN]-1659912669370
GPR[SSUN]-1659912669370
-534884160
GPR[ESUN]-1659912669705
GPR[SSUN]-1659912669705
-534884160
GPR[ESUN]-1659912670006
GPR[SSUN]-1659912670006
-534884160
GPR[SPVATF]-1659912670313
GPR[EPVATF]-1659912670572
GPR[SPS]-1659912670572
[12538083] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1656.
GPR[EPS]-1659912671293
GPR[ESUN]-1659912671293
GPR[SSUN]-1659912671293
-534884160
GPR[SPVATF]-1659912671629
GPR[EPVATF]-1659912671887
GPR[SPS]-1659912671888
[12539401] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1655.
GPR[EPS]-1659912672611
GPR[ESUN]-1659912672611
GPR[SSUN]-1659912672611
GPR[ESUN]-1659912672611
GPR[SSUN]-1659912672611
GPR[ESUN]-1659912672611
GPR[SSUN]-1659912672611
-1345859678
GPR[SPVATF]-1659912672862
GPR[EPVATF]-1659912673118
GPR[SPS]-1659912673118
[12540484] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:624.
GPR[EPS]-1659912673694
GPR[ESUN]-1659912673694
GPR[SSUN]-1659912673694
-1345859678
GPR[SPVATF]-1659912673941
GPR[EPVATF]-1659912674209
GPR[SPS]-1659912674209
[12541604] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:609.
GPR[EPS]-1659912674814
GPR[ESUN]-1659912674814
GPR[SSUN]-1659912674814
-1345859678
GPR[ESUN]-1659912675062
GPR[SSUN]-1659912675062
-1345859678
GPR[SPVATF]-1659912675307
GPR[EPVATF]-1659912675568
GPR[SPS]-1659912675568
[12542923] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:603.
GPR[EPS]-1659912676133
GPR[ESUN]-1659912676133
GPR[SSUN]-1659912676133
-1345859678
GPR[SPVATF]-1659912676381
GPR[EPVATF]-1659912676641
GPR[SPS]-1659912676641
[12543995] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:596.
GPR[EPS]-1659912677205
GPR[ESUN]-1659912677205
GPR[SSUN]-1659912677205
-1345859678
GPR[SPVATF]-1659912677497
GPR[EPVATF]-1659912677764
GPR[SPS]-1659912677764
[12545115] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:595.
GPR[EPS]-1659912678325
GPR[ESUN]-1659912678325
GPR[SSUN]-1659912678325
-1345859678
GPR[SPVATF]-1659912678570
GPR[EPVATF]-1659912678831
GPR[SPS]-1659912678831
[12546174] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:594.
GPR[EPS]-1659912679384
GPR[ESUN]-1659912679384
GPR[SSUN]-1659912679385
-1345859678
GPR[SPVATF]-1659912679635
GPR[EPVATF]-1659912679893
GPR[SPS]-1659912679893
[12547290] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:588.
GPR[EPS]-1659912680500
GPR[SPVATF]-1659912680500
GPR[EPVATF]-1659912680761
GPR[SPS]-1659912680761
[12548116] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:588.
GPR[EPS]-1659912681326
GPR[ESUN]-1659912681326
GPR[SSUN]-1659912681326
-1345859678
GPR[ESUN]-1659912681571
GPR[SSUN]-1659912681571
GPR[ESUN]-1659912681571
GPR[SSUN]-1659912681571
1616555300
GPR[SPVATF]-1659912681760
GPR[EPVATF]-1659912682022
GPR[SPS]-1659912682022
[12549231] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:158.
GPR[EPS]-1659912682441
GPR[ESUN]-1659912682441
GPR[SSUN]-1659912682441
1616555300
GPR[SPVATF]-1659912682633
GPR[EPVATF]-1659912682901
GPR[SPS]-1659912682901
[12550115] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:157.
GPR[EPS]-1659912683325
GPR[ESUN]-1659912683325
GPR[SSUN]-1659912683325
1616555300
GPR[SPVATF]-1659912683516
GPR[EPVATF]-1659912683776
GPR[SPS]-1659912683776
[12551045] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:156.
GPR[EPS]-1659912684255
GPR[ESUN]-1659912684256
GPR[SSUN]-1659912684256
1616555300
GPR[SPVATF]-1659912684449
GPR[EPVATF]-1659912684710
GPR[SPS]-1659912684710
[12552050] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:155.
GPR[EPS]-1659912685260
GPR[ESUN]-1659912685260
GPR[SSUN]-1659912685260
GPR[ESUN]-1659912685260
GPR[SSUN]-1659912685260
GPR[ESUN]-1659912685260
GPR[SSUN]-1659912685260
1187751237
GPR[SPVATF]-1659912685538
GPR[EPVATF]-1659912685803
GPR[SPS]-1659912685803
[12553301] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2857.
GPR[EPS]-1659912686511
GPR[SPVATF]-1659912686511
GPR[EPVATF]-1659912686788
GPR[SPS]-1659912686788
[12554325] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2857.
GPR[EPS]-1659912687535
GPR[ESUN]-1659912687535
GPR[SSUN]-1659912687535
1187751237
GPR[ESUN]-1659912687816
GPR[SSUN]-1659912687816
1331276989
GPR[SPVATF]-1659912688025
GPR[EPVATF]-1659912688295
GPR[SPS]-1659912688295
[12555564] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:490.
GPR[EPS]-1659912688774
GPR[ESUN]-1659912688774
GPR[SSUN]-1659912688774
GPR[ESUN]-1659912688774
GPR[SSUN]-1659912688774
2433571
GPR[SPVATF]-1659912689013
GPR[EPVATF]-1659912689278
GPR[SPS]-1659912689278
[12556769] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int LOCAL_BLOCK_PROP = -3;

    public static final int OBJECT_IDS_PROP = -2;

    public static final int CATCH_SCOPE_PROP = -1;

    public static final int LABEL_ID_PROP = 0;

    public static final int TARGET_PROP = 1;

    public static final int BREAK_PROP = 2;

    public static final int CONTINUE_PROP = 3;

    public static final int ENUM_PROP = 4;

    public static final int FUNCTION_PROP = 5;

    public static final int TEMP_PROP = 6;

    public static final int LOCAL_PROP = 7;

    public static final int CODEOFFSET_PROP = 8;

    public static final int FIXUPS_PROP = 9;

    public static final int VARS_PROP = 10;

    public static final int USES_PROP = 11;

    public static final int REGEXP_PROP = 12;

    public static final int CASES_PROP = 13;

    public static final int DEFAULT_PROP = 14;

    public static final int CASEARRAY_PROP = 15;

    public static final int SOURCENAME_PROP = 16;

    public static final int TYPE_PROP = 17;

    public static final int SPECIAL_PROP_PROP = 18;

    public static final int LABEL_PROP = 19;

    public static final int FINALLY_PROP = 20;

    public static final int LOCALCOUNT_PROP = 21;

    public static final int TARGETBLOCK_PROP = 22;

    public static final int VARIABLE_PROP = 23;

    public static final int LASTUSE_PROP = 24;

    public static final int ISNUMBER_PROP = 25;

    public static final int DIRECTCALL_PROP = 26;

    public static final int SPECIALCALL_PROP = 27;

    public static final int DEBUGSOURCE_PROP = 28;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int SKIP_INDEXES_PROP = 31;

    public static final int INCRDECR_PROP = 32;

    public static final int MEMBER_TYPE_PROP = 33;

    public static final int NAME_PROP = 34;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int LAST_PROP = 50;

    public static final int BOTH = 0;

    public static final int LEFT = 1;

    public static final int RIGHT = 2;

    public static final int NON_SPECIALCALL = 0;

    public static final int SPECIALCALL_EVAL = 1;

    public static final int SPECIALCALL_WITH = 2;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    public static final int PROPERTY_FLAG = 0x1;

    public static final int ATTRIBUTE_FLAG = 0x2;

    public static final int DESCENDANTS_FLAG = 0x4;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP :
                return "local_block";
            case com.google.javascript.rhino.Node.OBJECT_IDS_PROP :
                return "object_ids_prop";
            case com.google.javascript.rhino.Node.CATCH_SCOPE_PROP :
                return "catch_scope_prop";
            case com.google.javascript.rhino.Node.LABEL_ID_PROP :
                return "label_id_prop";
            case com.google.javascript.rhino.Node.TARGET_PROP :
                return "target";
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.BREAK_PROP :
                return "break";
            case com.google.javascript.rhino.Node.CONTINUE_PROP :
                return "continue";
            case com.google.javascript.rhino.Node.ENUM_PROP :
                return "enum";
            case com.google.javascript.rhino.Node.FUNCTION_PROP :
                return "function";
            case com.google.javascript.rhino.Node.TEMP_PROP :
                return "temp";
            case com.google.javascript.rhino.Node.LOCAL_PROP :
                return "local";
            case com.google.javascript.rhino.Node.CODEOFFSET_PROP :
                return "codeoffset";
            case com.google.javascript.rhino.Node.FIXUPS_PROP :
                return "fixups";
            case com.google.javascript.rhino.Node.VARS_PROP :
                return "vars";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.USES_PROP :
                return "uses";
            case com.google.javascript.rhino.Node.REGEXP_PROP :
                return "regexp";
            case com.google.javascript.rhino.Node.CASES_PROP :
                return "cases";
            case com.google.javascript.rhino.Node.DEFAULT_PROP :
                return "default";
            case com.google.javascript.rhino.Node.CASEARRAY_PROP :
                return "casearray";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.TYPE_PROP :
                return "type";
            case com.google.javascript.rhino.Node.SPECIAL_PROP_PROP :
                return "special_prop";
            case com.google.javascript.rhino.Node.LABEL_PROP :
                return "label";
            case com.google.javascript.rhino.Node.FINALLY_PROP :
                return "finally";
            case com.google.javascript.rhino.Node.LOCALCOUNT_PROP :
                return "localcount";
            case com.google.javascript.rhino.Node.TARGETBLOCK_PROP :
                return "targetblock";
            case com.google.javascript.rhino.Node.VARIABLE_PROP :
                return "variable";
            case com.google.javascript.rhino.Node.LASTUSE_PROP :
                return "lastuse";
            case com.google.javascript.rhino.Node.ISNUMBER_PROP :
                return "isnumber";
            case com.google.javascript.rhino.Node.DIRECTCALL_PROP :
                return "directcall";
            case com.google.javascript.rhino.Node.SPECIALCALL_PROP :
                return "specialcall";
            case com.google.javascript.rhino.Node.DEBUGSOURCE_PROP :
                return "debugsource";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.SKIP_INDEXES_PROP :
                return "skip_indexes";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.MEMBER_TYPE_PROP :
                return "member_type";
            case com.google.javascript.rhino.Node.NAME_PROP :
                return "name";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            default :
                com.google.javascript.rhino.Kit.codeBug();
        }
        return null;
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && (getDouble() == ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble());
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private static class PropListItem implements java.io.Serializable {
        private static final long serialVersionUID = 1L;

        final com.google.javascript.rhino.Node.PropListItem next;

        final int type;

        final int intValue;

        final java.lang.Object objectValue;

        PropListItem(int type, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            this(type, intValue, null, next);
        }

        PropListItem(int type, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            this(type, 0, objectValue, next);
        }

        PropListItem(int type, int intValue, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            this.type = type;
            this.intValue = intValue;
            this.objectValue = objectValue;
            this.next = next;
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        if (last != null) {
            last.next = children;
        }
        last = children.getLastSibling();
        if (first == null) {
            first = children;
        }
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node != null, "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.parent = this;
        newChild.next = node.next;
        node.next = newChild;
        if (last == node) {
            last = newChild;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.type)) {
            x = x.next;
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.type == propType) {
            return item.next;
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.next, propType);
            if (result != item.next) {
                return new com.google.javascript.rhino.Node.PropListItem(item.type, item.intValue, item.objectValue, result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.objectValue;
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.intValue;
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            com.google.javascript.rhino.Kit.codeBug();
        }
        return item.intValue;
    }

    public void putProp(int propType, java.lang.Object value) {
        removeProp(propType);
        if (value != null) {
            propListHead = new com.google.javascript.rhino.Node.PropListItem(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = new com.google.javascript.rhino.Node.PropListItem(propType, value, propListHead);
        }
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.next) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.next) {
            count--;
            keys[count] = x.type;
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        if (com.google.javascript.rhino.Token.printTrees) {
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            toString(sb, printSource, printAnnotations, printType);
            return sb.toString();
        }
        return java.lang.String.valueOf(type);
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        if (com.google.javascript.rhino.Token.printTrees) {
            sb.append(com.google.javascript.rhino.Token.name(type));
            if (this instanceof com.google.javascript.rhino.Node.StringNode) {
                sb.append(' ');
                sb.append(getString());
            } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
                sb.append(' ');
                if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                    sb.append("<invalid>");
                } else {
                    sb.append(first.getString());
                }
            } else if (this instanceof com.google.javascript.rhino.ScriptOrFnNode) {
                com.google.javascript.rhino.ScriptOrFnNode sof = ((com.google.javascript.rhino.ScriptOrFnNode) (this));
                if (this instanceof com.google.javascript.rhino.FunctionNode) {
                    com.google.javascript.rhino.FunctionNode fn = ((com.google.javascript.rhino.FunctionNode) (this));
                    sb.append(' ');
                    sb.append(fn.getFunctionName());
                }
                if (printSource) {
                    sb.append(" [source name: ");
                    sb.append(sof.getSourceName());
                    sb.append("] [encoded source length: ");
                    sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());
                    sb.append("] [base line: ");
                    sb.append(sof.getBaseLineno());
                    sb.append("] [end line: ");
                    sb.append(sof.getEndLineno());
                    sb.append(']');
                }
            } else if (type == com.google.javascript.rhino.Token.NUMBER) {
                sb.append(' ');
                sb.append(getDouble());
            }
            if (printSource) {
                int lineno = getLineno();
                if (lineno != (-1)) {
                    sb.append(' ');
                    sb.append(lineno);
                }
            }
            if (printAnnotations) {
                int[] keys = getSortedPropTypes();
                for (int i = 0; i < keys.length; i++) {
                    int type = keys[i];
                    com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                    sb.append(" [");
                    sb.append(com.google.javascript.rhino.Node.propToString(type));
                    sb.append(": ");
                    java.lang.String value;
                    switch (type) {
                        case com.google.javascript.rhino.Node.TARGETBLOCK_PROP :
                            value = "target block property";
                            break;
                        case com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP :
                            value = "last local block";
                            break;
                        case com.google.javascript.rhino.Node.ISNUMBER_PROP :
                            switch (x.intValue) {
                                case com.google.javascript.rhino.Node.BOTH :
                                    value = "both";
                                    break;
                                case com.google.javascript.rhino.Node.RIGHT :
                                    value = "right";
                                    break;
                                case com.google.javascript.rhino.Node.LEFT :
                                    value = "left";
                                    break;
                                default :
                                    throw com.google.javascript.rhino.Kit.codeBug();
                            }
                            break;
                        case com.google.javascript.rhino.Node.SPECIALCALL_PROP :
                            switch (x.intValue) {
                                case com.google.javascript.rhino.Node.SPECIALCALL_EVAL :
                                    value = "eval";
                                    break;
                                case com.google.javascript.rhino.Node.SPECIALCALL_WITH :
                                    value = "with";
                                    break;
                                default :
                                    throw com.google.javascript.rhino.Kit.codeBug();
                            }
                            break;
                        default :
                            java.lang.Object obj = x.objectValue;
                            if (obj != null) {
                                value = obj.toString();
                            } else {
                                value = java.lang.String.valueOf(x.intValue);
                            }
                            break;
                    }
                    sb.append(value);
                    sb.append(']');
                }
            }
            if (printType) {
                if (jsType != null) {
                    java.lang.String jsTypeString = jsType.toString();
                    if (jsTypeString != null) {
                        sb.append(" : ");
                        sb.append(jsTypeString);
                    }
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        if (com.google.javascript.rhino.Token.printTrees) {
            for (int i = 0; i != level; ++i) {
                sb.append("    ");
            }
            sb.append(n.toString());
            sb.append('\n');
            for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
                com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
            }
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourcePositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourcePositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(364).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.FIXUPS_PROP",com.google.javascript.rhino.Node.FIXUPS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.ISNUMBER_PROP",com.google.javascript.rhino.Node.ISNUMBER_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.CODEOFFSET_PROP",com.google.javascript.rhino.Node.CODEOFFSET_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.LOCAL_PROP",com.google.javascript.rhino.Node.LOCAL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_PROP",com.google.javascript.rhino.Node.SPECIALCALL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.TARGET_PROP",com.google.javascript.rhino.Node.TARGET_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.OBJECT_IDS_PROP",com.google.javascript.rhino.Node.OBJECT_IDS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.LOCALCOUNT_PROP",com.google.javascript.rhino.Node.LOCALCOUNT_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.FUNCTION_PROP",com.google.javascript.rhino.Node.FUNCTION_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.LABEL_PROP",com.google.javascript.rhino.Node.LABEL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.BOTH",com.google.javascript.rhino.Node.BOTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.MEMBER_TYPE_PROP",com.google.javascript.rhino.Node.MEMBER_TYPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_WITH",com.google.javascript.rhino.Node.SPECIALCALL_WITH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.TYPE_PROP",com.google.javascript.rhino.Node.TYPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.PROPERTY_FLAG",com.google.javascript.rhino.Node.PROPERTY_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.DEFAULT_PROP",com.google.javascript.rhino.Node.DEFAULT_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.SPECIAL_PROP_PROP",com.google.javascript.rhino.Node.SPECIAL_PROP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("charno",charno);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.CONTINUE_PROP",com.google.javascript.rhino.Node.CONTINUE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.DIRECTCALL_PROP",com.google.javascript.rhino.Node.DIRECTCALL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.LABEL_ID_PROP",com.google.javascript.rhino.Node.LABEL_ID_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.ENUM_PROP",com.google.javascript.rhino.Node.ENUM_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.TARGETBLOCK_PROP",com.google.javascript.rhino.Node.TARGETBLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.TEMP_PROP",com.google.javascript.rhino.Node.TEMP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.USES_PROP",com.google.javascript.rhino.Node.USES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.VARS_PROP",com.google.javascript.rhino.Node.VARS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.REGEXP_PROP",com.google.javascript.rhino.Node.REGEXP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.LASTUSE_PROP",com.google.javascript.rhino.Node.LASTUSE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.NAME_PROP",com.google.javascript.rhino.Node.NAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.LEFT",com.google.javascript.rhino.Node.LEFT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.ATTRIBUTE_FLAG",com.google.javascript.rhino.Node.ATTRIBUTE_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.FINALLY_PROP",com.google.javascript.rhino.Node.FINALLY_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.NON_SPECIALCALL",com.google.javascript.rhino.Node.NON_SPECIALCALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.CASEARRAY_PROP",com.google.javascript.rhino.Node.CASEARRAY_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.DESCENDANTS_FLAG",com.google.javascript.rhino.Node.DESCENDANTS_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.CATCH_SCOPE_PROP",com.google.javascript.rhino.Node.CATCH_SCOPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP",com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.CASES_PROP",com.google.javascript.rhino.Node.CASES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.VARIABLE_PROP",com.google.javascript.rhino.Node.VARIABLE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.SKIP_INDEXES_PROP",com.google.javascript.rhino.Node.SKIP_INDEXES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.RIGHT",com.google.javascript.rhino.Node.RIGHT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_EVAL",com.google.javascript.rhino.Node.SPECIALCALL_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.DEBUGSOURCE_PROP",com.google.javascript.rhino.Node.DEBUGSOURCE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("lineno",lineno);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.BREAK_PROP",com.google.javascript.rhino.Node.BREAK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectionEnds();
            }
            if (runtimeAngelicValue)
                return -1;

        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        public boolean hasNext() {
            return current != null;
        }

        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                public boolean hasNext() {
                    return cur != null;
                }

                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Class getNodeClass(com.google.javascript.rhino.Node n) {
        java.lang.Class c = n.getClass();
        if ((c == com.google.javascript.rhino.FunctionNode.class) || (c == com.google.javascript.rhino.ScriptOrFnNode.class)) {
            return com.google.javascript.rhino.Node.class;
        }
        return c;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public static java.lang.String tokenToName(int token) {
        switch (token) {
            case com.google.javascript.rhino.Token.ERROR :
                return "error";
            case com.google.javascript.rhino.Token.EOF :
                return "eof";
            case com.google.javascript.rhino.Token.EOL :
                return "eol";
            case com.google.javascript.rhino.Token.ENTERWITH :
                return "enterwith";
            case com.google.javascript.rhino.Token.LEAVEWITH :
                return "leavewith";
            case com.google.javascript.rhino.Token.RETURN :
                return "return";
            case com.google.javascript.rhino.Token.GOTO :
                return "goto";
            case com.google.javascript.rhino.Token.IFEQ :
                return "ifeq";
            case com.google.javascript.rhino.Token.IFNE :
                return "ifne";
            case com.google.javascript.rhino.Token.SETNAME :
                return "setname";
            case com.google.javascript.rhino.Token.BITOR :
                return "bitor";
            case com.google.javascript.rhino.Token.BITXOR :
                return "bitxor";
            case com.google.javascript.rhino.Token.BITAND :
                return "bitand";
            case com.google.javascript.rhino.Token.EQ :
                return "eq";
            case com.google.javascript.rhino.Token.NE :
                return "ne";
            case com.google.javascript.rhino.Token.LT :
                return "lt";
            case com.google.javascript.rhino.Token.LE :
                return "le";
            case com.google.javascript.rhino.Token.GT :
                return "gt";
            case com.google.javascript.rhino.Token.GE :
                return "ge";
            case com.google.javascript.rhino.Token.LSH :
                return "lsh";
            case com.google.javascript.rhino.Token.RSH :
                return "rsh";
            case com.google.javascript.rhino.Token.URSH :
                return "ursh";
            case com.google.javascript.rhino.Token.ADD :
                return "add";
            case com.google.javascript.rhino.Token.SUB :
                return "sub";
            case com.google.javascript.rhino.Token.MUL :
                return "mul";
            case com.google.javascript.rhino.Token.DIV :
                return "div";
            case com.google.javascript.rhino.Token.MOD :
                return "mod";
            case com.google.javascript.rhino.Token.BITNOT :
                return "bitnot";
            case com.google.javascript.rhino.Token.NEG :
                return "neg";
            case com.google.javascript.rhino.Token.NEW :
                return "new";
            case com.google.javascript.rhino.Token.DELPROP :
                return "delprop";
            case com.google.javascript.rhino.Token.TYPEOF :
                return "typeof";
            case com.google.javascript.rhino.Token.GETPROP :
                return "getprop";
            case com.google.javascript.rhino.Token.SETPROP :
                return "setprop";
            case com.google.javascript.rhino.Token.GETELEM :
                return "getelem";
            case com.google.javascript.rhino.Token.SETELEM :
                return "setelem";
            case com.google.javascript.rhino.Token.CALL :
                return "call";
            case com.google.javascript.rhino.Token.NAME :
                return "name";
            case com.google.javascript.rhino.Token.NUMBER :
                return "number";
            case com.google.javascript.rhino.Token.STRING :
                return "string";
            case com.google.javascript.rhino.Token.NULL :
                return "null";
            case com.google.javascript.rhino.Token.THIS :
                return "this";
            case com.google.javascript.rhino.Token.FALSE :
                return "false";
            case com.google.javascript.rhino.Token.TRUE :
                return "true";
            case com.google.javascript.rhino.Token.SHEQ :
                return "sheq";
            case com.google.javascript.rhino.Token.SHNE :
                return "shne";
            case com.google.javascript.rhino.Token.REGEXP :
                return "regexp";
            case com.google.javascript.rhino.Token.POS :
                return "pos";
            case com.google.javascript.rhino.Token.BINDNAME :
                return "bindname";
            case com.google.javascript.rhino.Token.THROW :
                return "throw";
            case com.google.javascript.rhino.Token.IN :
                return "in";
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return "instanceof";
            case com.google.javascript.rhino.Token.GETVAR :
                return "getvar";
            case com.google.javascript.rhino.Token.SETVAR :
                return "setvar";
            case com.google.javascript.rhino.Token.TRY :
                return "try";
            case com.google.javascript.rhino.Token.TYPEOFNAME :
                return "typeofname";
            case com.google.javascript.rhino.Token.THISFN :
                return "thisfn";
            case com.google.javascript.rhino.Token.SEMI :
                return "semi";
            case com.google.javascript.rhino.Token.LB :
                return "lb";
            case com.google.javascript.rhino.Token.RB :
                return "rb";
            case com.google.javascript.rhino.Token.LC :
                return "lc";
            case com.google.javascript.rhino.Token.RC :
                return "rc";
            case com.google.javascript.rhino.Token.LP :
                return "lp";
            case com.google.javascript.rhino.Token.RP :
                return "rp";
            case com.google.javascript.rhino.Token.COMMA :
                return "comma";
            case com.google.javascript.rhino.Token.ASSIGN :
                return "assign";
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return "assign_bitor";
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return "assign_bitxor";
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return "assign_bitand";
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return "assign_lsh";
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return "assign_rsh";
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return "assign_ursh";
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return "assign_add";
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return "assign_sub";
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return "assign_mul";
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return "assign_div";
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return "assign_mod";
            case com.google.javascript.rhino.Token.HOOK :
                return "hook";
            case com.google.javascript.rhino.Token.COLON :
                return "colon";
            case com.google.javascript.rhino.Token.OR :
                return "or";
            case com.google.javascript.rhino.Token.AND :
                return "and";
            case com.google.javascript.rhino.Token.INC :
                return "inc";
            case com.google.javascript.rhino.Token.DEC :
                return "dec";
            case com.google.javascript.rhino.Token.DOT :
                return "dot";
            case com.google.javascript.rhino.Token.FUNCTION :
                return "function";
            case com.google.javascript.rhino.Token.EXPORT :
                return "export";
            case com.google.javascript.rhino.Token.IMPORT :
                return "import";
            case com.google.javascript.rhino.Token.IF :
                return "if";
            case com.google.javascript.rhino.Token.ELSE :
                return "else";
            case com.google.javascript.rhino.Token.SWITCH :
                return "switch";
            case com.google.javascript.rhino.Token.CASE :
                return "case";
            case com.google.javascript.rhino.Token.DEFAULT :
                return "default";
            case com.google.javascript.rhino.Token.WHILE :
                return "while";
            case com.google.javascript.rhino.Token.DO :
                return "do";
            case com.google.javascript.rhino.Token.FOR :
                return "for";
            case com.google.javascript.rhino.Token.BREAK :
                return "break";
            case com.google.javascript.rhino.Token.CONTINUE :
                return "continue";
            case com.google.javascript.rhino.Token.VAR :
                return "var";
            case com.google.javascript.rhino.Token.WITH :
                return "with";
            case com.google.javascript.rhino.Token.CATCH :
                return "catch";
            case com.google.javascript.rhino.Token.FINALLY :
                return "finally";
            case com.google.javascript.rhino.Token.RESERVED :
                return "reserved";
            case com.google.javascript.rhino.Token.NOT :
                return "not";
            case com.google.javascript.rhino.Token.VOID :
                return "void";
            case com.google.javascript.rhino.Token.BLOCK :
                return "block";
            case com.google.javascript.rhino.Token.ARRAYLIT :
                return "arraylit";
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return "objectlit";
            case com.google.javascript.rhino.Token.LABEL :
                return "label";
            case com.google.javascript.rhino.Token.TARGET :
                return "target";
            case com.google.javascript.rhino.Token.LOOP :
                return "loop";
            case com.google.javascript.rhino.Token.EXPR_VOID :
                return "expr_void";
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                return "expr_result";
            case com.google.javascript.rhino.Token.JSR :
                return "jsr";
            case com.google.javascript.rhino.Token.SCRIPT :
                return "script";
            case com.google.javascript.rhino.Token.EMPTY :
                return "empty";
            case com.google.javascript.rhino.Token.GET_REF :
                return "get_ref";
            case com.google.javascript.rhino.Token.REF_SPECIAL :
                return "ref_special";
        }
        return ("<unknown=" + token) + ">";
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (com.google.javascript.rhino.Node.getNodeClass(this) != com.google.javascript.rhino.Node.getNodeClass(node))) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if (type == com.google.javascript.rhino.Token.ARRAYLIT) {
            try {
                int[] indices1 = ((int[]) (getProp(com.google.javascript.rhino.Node.SKIP_INDEXES_PROP)));
                int[] indices2 = ((int[]) (node.getProp(com.google.javascript.rhino.Node.SKIP_INDEXES_PROP)));
                if (indices1 == null) {
                    if (indices2 != null) {
                        return false;
                    }
                } else if (indices2 == null) {
                    return false;
                } else if (indices1.length != indices2.length) {
                    return false;
                } else {
                    for (int i = 0; i < indices1.length; i++) {
                        if (indices1[i] != indices2[i]) {
                            return false;
                        }
                    }
                }
            } catch (java.lang.Exception e) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.STRING) {
            int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            if (quoted1 != quoted2) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean hasSideEffects() {
        switch (type) {
            case com.google.javascript.rhino.Token.EXPR_VOID :
            case com.google.javascript.rhino.Token.COMMA :
                if (last != null) {
                    return last.hasSideEffects();
                } else {
                    return true;
                }
            case com.google.javascript.rhino.Token.HOOK :
                if (((first == null) || (first.next == null)) || (first.next.next == null)) {
                    com.google.javascript.rhino.Kit.codeBug();
                }
                return first.next.hasSideEffects() && first.next.next.hasSideEffects();
            case com.google.javascript.rhino.Token.ERROR :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ENTERWITH :
            case com.google.javascript.rhino.Token.LEAVEWITH :
            case com.google.javascript.rhino.Token.RETURN :
            case com.google.javascript.rhino.Token.GOTO :
            case com.google.javascript.rhino.Token.IFEQ :
            case com.google.javascript.rhino.Token.IFNE :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.SETNAME :
            case com.google.javascript.rhino.Token.SETPROP :
            case com.google.javascript.rhino.Token.SETELEM :
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.THROW :
            case com.google.javascript.rhino.Token.RETHROW :
            case com.google.javascript.rhino.Token.SETVAR :
            case com.google.javascript.rhino.Token.CATCH_SCOPE :
            case com.google.javascript.rhino.Token.RETURN_RESULT :
            case com.google.javascript.rhino.Token.SET_REF :
            case com.google.javascript.rhino.Token.DEL_REF :
            case com.google.javascript.rhino.Token.REF_CALL :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SEMI :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.EXPORT :
            case com.google.javascript.rhino.Token.IMPORT :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.ELSE :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.CONST :
            case com.google.javascript.rhino.Token.WITH :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.FINALLY :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.TARGET :
            case com.google.javascript.rhino.Token.LOOP :
            case com.google.javascript.rhino.Token.JSR :
            case com.google.javascript.rhino.Token.SETPROP_OP :
            case com.google.javascript.rhino.Token.SETELEM_OP :
            case com.google.javascript.rhino.Token.LOCAL_BLOCK :
            case com.google.javascript.rhino.Token.SET_REF_OP :
                return true;
            default :
                return false;
        }
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        com.google.javascript.rhino.Kit.codeBug();
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }
}
[12556770] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659912689980
GPR[SSUN]-1659912689980
GPR[ESUN]-1659912689980
GPR[SSUN]-1659912689980
GPR[ESUN]-1659912689980
GPR[SSUN]-1659912689980
GPR[ESUN]-1659912689980
GPR[SSUN]-1659912689980
GPR[ESUN]-1659912689980
GPR[SSUN]-1659912689980
GPR[ESUN]-1659912689980
GPR[SSUN]-1659912689980
GPR[ESUN]-1659912689980
GPR[SSUN]-1659912689980
GPR[ESUN]-1659912689980
GPR[SSUN]-1659912689980
GPR[ESUN]-1659912689980
GPR[SSUN]-1659912689980
GPR[ESUN]-1659912689980
GPR[SSUN]-1659912689980
GPR[ESUN]-1659912689980
GPR[SSUN]-1659912689980
GPR[ESUN]-1659912689980
GPR[SSUN]-1659912689980
GPR[ESUN]-1659912689980
GPR[SSUN]-1659912689980
-546582215
GPR[ESUN]-1659912690189
GPR[SSUN]-1659912690189
-546582215
GPR[SPVATF]-1659912690394
GPR[EPVATF]-1659912690657
GPR[SPS]-1659912690657
[12557902] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:248.
GPR[EPS]-1659912691112
GPR[ESUN]-1659912691112
GPR[SSUN]-1659912691112
-546582215
GPR[SPVATF]-1659912699842
GPR[EPVATF]-1659912700108
GPR[SPS]-1659912700108
[12567362] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:243.
GPR[EPS]-1659912700572
GPR[SPVATF]-1659912700573
GPR[EPVATF]-1659912700839
GPR[SPS]-1659912700839
[12568103] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:243.
GPR[EPS]-1659912701313
GPR[ESUN]-1659912701313
GPR[SSUN]-1659912701313
-546582215
GPR[ESUN]-1659912701547
GPR[SSUN]-1659912701548
-546582215
GPR[ESUN]-1659912701749
GPR[SSUN]-1659912701749
-546582215
GPR[SPVATF]-1659912701954
GPR[EPVATF]-1659912702445
GPR[SPS]-1659912702445
[12569687] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:239.
GPR[EPS]-1659912702897
GPR[ESUN]-1659912702897
GPR[SSUN]-1659912702897
1187751237
GPR[ESUN]-1659912703177
GPR[SSUN]-1659912703177
1331276989
GPR[ESUN]-1659912703394
GPR[SSUN]-1659912703394
1331276989
GPR[ESUN]-1659912703599
GPR[SSUN]-1659912703599
1616555300
GPR[SPVATF]-1659912703785
GPR[EPVATF]-1659912704039
GPR[SPS]-1659912704039
[12571256] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:229.
GPR[EPS]-1659912704466
GPR[ESUN]-1659912704466
GPR[SSUN]-1659912704466
1187751237
GPR[SPVATF]-1659912704737
GPR[EPVATF]-1659912704990
GPR[SPS]-1659912704990
[12572480] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1377.
GPR[EPS]-1659912705690
GPR[ESUN]-1659912705690
GPR[SSUN]-1659912705690
1616555300
GPR[ESUN]-1659912705879
GPR[SSUN]-1659912705880
1616555300
GPR[SPVATF]-1659912706067
GPR[EPVATF]-1659912706318
GPR[SPS]-1659912706318
[12573549] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:200.
GPR[EPS]-1659912706759
GPR[ESUN]-1659912706759
GPR[SSUN]-1659912706759
-718432441
GPR[ESUN]-1659912706990
GPR[SSUN]-1659912706990
-718432441
GPR[SPVATF]-1659912707221
GPR[EPVATF]-1659912707475
GPR[SPS]-1659912707475
[12574944] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:891.
GPR[EPS]-1659912708154
GPR[ESUN]-1659912708154
GPR[SSUN]-1659912708155
-546582215
GPR[SPVATF]-1659912708357
GPR[EPVATF]-1659912708610
GPR[SPS]-1659912708610
[12575853] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:156.
GPR[EPS]-1659912709063
GPR[ESUN]-1659912709063
GPR[SSUN]-1659912709064
-1117079791
GPR[ESUN]-1659912709278
GPR[SSUN]-1659912709278
-1117079791
GPR[SPVATF]-1659912709472
GPR[EPVATF]-1659912709727
GPR[SPS]-1659912709727
[12576956] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:359.
GPR[EPS]-1659912710166
GPR[ESUN]-1659912710166
GPR[SSUN]-1659912710166
-1117079791
GPR[SPVATF]-1659912710363
GPR[EPVATF]-1659912710618
GPR[SPS]-1659912710618
[12577852] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:358.
GPR[EPS]-1659912711062
GPR[ESUN]-1659912711062
GPR[SSUN]-1659912711062
-546582215
GPR[SPVATF]-1659912711265
GPR[EPVATF]-1659912711516
GPR[SPS]-1659912711516
[12578762] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:110.
GPR[EPS]-1659912711972
GPR[ESUN]-1659912711972
GPR[SSUN]-1659912711972
-546582215
GPR[SPVATF]-1659912712175
GPR[EPVATF]-1659912712424
GPR[SPS]-1659912712424
[12579691] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:109.
GPR[EPS]-1659912712901
GPR[ESUN]-1659912712901
GPR[SSUN]-1659912712901
1616555300
GPR[SPVATF]-1659912713089
GPR[EPVATF]-1659912713347
GPR[SPS]-1659912713347
[12580570] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:217.
GPR[EPS]-1659912713780
GPR[SPVATF]-1659912713780
GPR[EPVATF]-1659912714035
GPR[SPS]-1659912714035
[12581264] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:217.
GPR[EPS]-1659912714474
GPR[ESUN]-1659912714474
GPR[SSUN]-1659912714474
1616555300
GPR[ESUN]-1659912714671
GPR[SSUN]-1659912714672
1616555300
GPR[SPVATF]-1659912714862
GPR[EPVATF]-1659912715128
GPR[SPS]-1659912715128
[12582364] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:228.
GPR[EPS]-1659912715574
GPR[SPVATF]-1659912715575
GPR[EPVATF]-1659912715834
GPR[SPS]-1659912715834
[12583091] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:228.
GPR[EPS]-1659912716301
GPR[ESUN]-1659912716301
GPR[SSUN]-1659912716301
1616555300
GPR[SPVATF]-1659912716494
GPR[EPVATF]-1659912716790
GPR[SPS]-1659912716790
[12584063] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:223.
GPR[EPS]-1659912717273
GPR[ESUN]-1659912717273
GPR[SSUN]-1659912717273
1616555300
GPR[SPVATF]-1659912717465
GPR[EPVATF]-1659912717720
GPR[SPS]-1659912717720
[12584941] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:213.
GPR[EPS]-1659912718151
GPR[SPVATF]-1659912718151
GPR[EPVATF]-1659912718405
GPR[SPS]-1659912718405
[12585622] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:213.
GPR[EPS]-1659912718832
GPR[ESUN]-1659912718832
GPR[SSUN]-1659912718832
1616555300
GPR[SPVATF]-1659912719025
GPR[EPVATF]-1659912719279
GPR[SPS]-1659912719279
[12586496] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:209.
GPR[EPS]-1659912719706
GPR[SPVATF]-1659912719706
GPR[EPVATF]-1659912719959
GPR[SPS]-1659912719959
[12587183] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:209.
GPR[EPS]-1659912720393
GPR[ESUN]-1659912720393
GPR[SSUN]-1659912720393
1616555300
GPR[ESUN]-1659912720619
GPR[SSUN]-1659912720619
1616555300
GPR[ESUN]-1659912720807
GPR[SSUN]-1659912720807
1616555300
GPR[SPVATF]-1659912720993
GPR[EPVATF]-1659912721247
GPR[SPS]-1659912721247
[12588471] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:204.
GPR[EPS]-1659912721681
GPR[ESUN]-1659912721681
GPR[SSUN]-1659912721681
-546582215
GPR[SPVATF]-1659912721885
GPR[EPVATF]-1659912722147
GPR[SPS]-1659912722147
[12589439] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:69.
GPR[EPS]-1659912722649
GPR[ESUN]-1659912722649
GPR[SSUN]-1659912722649
-546582215
GPR[ESUN]-1659912722852
GPR[SSUN]-1659912722852
-546582215
GPR[SPVATF]-1659912723055
GPR[EPVATF]-1659912723306
GPR[SPS]-1659912723306
[12827087] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659912972412
GPR[SSUN]-1659912977805
\n\nNode: host-55\n
\n\nDate: Sun 07 Aug 2022 04:04:13 PM PDT\n
End running Nopol Closure/67 results at /experiment_home///results/Nopol/Closure/67/seed_261/
Removing checked out dir script/workingdir/Nopol/Closure_67
GPR[SSLE]-1659913453422
GPR[ESLE]-1659913513425
