Sleep 1m start
GPR[SSLI]-1659857949992
GPR[ESLI]-1659858009995
Running Nopol Chart 4b with approach: smt
Timezone: America/Los_Angeles
Seed 260
OS: linux
Creating out dir /experiment_home///results/Nopol/Chart/4/seed_260/
The file script/workingdir/Nopol/Chart_4 does not exist!
script/workingdir/Nopol/Chart_4
script/workingdir/Nopol/Chart_4
classpath:  script/workingdir/Nopol/Chart_4/lib/servlet.jar:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:script/workingdir/Nopol/Chart_4/build:script/workingdir/Nopol/Chart_4/build-tests
Src java:  /source
Classes Java:  /build
Src Test:  /tests
Classes Test:  /build-tests
GPR[SSLB]-1659858029145
GPR[ESLB]-1659858089151
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Chart_4//build:script/workingdir/Nopol/Chart_4//build-tests:script/workingdir/Nopol/Chart_4/lib/servlet.jar:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:script/workingdir/Nopol/Chart_4/build:script/workingdir/Nopol/Chart_4/build-tests
Node: host-44
Date init: Sun 07 Aug 2022 12:41:29 AM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Chart_4/source]
[0] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Chart_4/build/, file:script/workingdir/Nopol/Chart_4/build-tests/, file:script/workingdir/Nopol/Chart_4/lib/servlet.jar, file:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar, file:script/workingdir/Nopol/Chart_4/build/, file:script/workingdir/Nopol/Chart_4/build-tests/]
[0] INFO NoPol - Statement type: PRE_THEN_COND
[0] INFO NoPol - Args: [org.jfree.chart.annotations.junit.AnnotationsPackageTests, org.jfree.chart.annotations.junit.AnnotationsPackageTests, org.jfree.chart.annotations.junit.CategoryLineAnnotationTests, org.jfree.chart.annotations.junit.CategoryLineAnnotationTests, org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests, org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests, org.jfree.chart.annotations.junit.CategoryTextAnnotationTests, org.jfree.chart.annotations.junit.CategoryTextAnnotationTests, org.jfree.chart.annotations.junit.TextAnnotationTests, org.jfree.chart.annotations.junit.TextAnnotationTests, org.jfree.chart.annotations.junit.XYBoxAnnotationTests, org.jfree.chart.annotations.junit.XYBoxAnnotationTests, org.jfree.chart.annotations.junit.XYDrawableAnnotationTests, org.jfree.chart.annotations.junit.XYDrawableAnnotationTests, org.jfree.chart.annotations.junit.XYImageAnnotationTests, org.jfree.chart.annotations.junit.XYImageAnnotationTests, org.jfree.chart.annotations.junit.XYLineAnnotationTests, org.jfree.chart.annotations.junit.XYLineAnnotationTests, org.jfree.chart.annotations.junit.XYPointerAnnotationTests, org.jfree.chart.annotations.junit.XYPointerAnnotationTests, org.jfree.chart.annotations.junit.XYPolygonAnnotationTests, org.jfree.chart.annotations.junit.XYPolygonAnnotationTests, org.jfree.chart.annotations.junit.XYShapeAnnotationTests, org.jfree.chart.annotations.junit.XYShapeAnnotationTests, org.jfree.chart.annotations.junit.XYTextAnnotationTests, org.jfree.chart.annotations.junit.XYTextAnnotationTests, org.jfree.chart.annotations.junit.XYTitleAnnotationTests, org.jfree.chart.annotations.junit.XYTitleAnnotationTests, org.jfree.chart.axis.junit.AxisLocationTests, org.jfree.chart.axis.junit.AxisLocationTests, org.jfree.chart.axis.junit.AxisPackageTests, org.jfree.chart.axis.junit.AxisPackageTests, org.jfree.chart.axis.junit.AxisSpaceTests, org.jfree.chart.axis.junit.AxisSpaceTests, org.jfree.chart.axis.junit.AxisTests, org.jfree.chart.axis.junit.AxisTests, org.jfree.chart.axis.junit.CategoryAnchorTests, org.jfree.chart.axis.junit.CategoryAnchorTests, org.jfree.chart.axis.junit.CategoryAxis3DTests, org.jfree.chart.axis.junit.CategoryAxis3DTests, org.jfree.chart.axis.junit.CategoryAxisTests, org.jfree.chart.axis.junit.CategoryAxisTests, org.jfree.chart.axis.junit.CategoryLabelPositionTests, org.jfree.chart.axis.junit.CategoryLabelPositionTests, org.jfree.chart.axis.junit.CategoryLabelPositionsTests, org.jfree.chart.axis.junit.CategoryLabelPositionsTests, org.jfree.chart.axis.junit.CategoryLabelWidthTypeTests, org.jfree.chart.axis.junit.CategoryLabelWidthTypeTests, org.jfree.chart.axis.junit.CategoryTickTests, org.jfree.chart.axis.junit.CategoryTickTests, org.jfree.chart.axis.junit.CyclicNumberAxisTests, org.jfree.chart.axis.junit.CyclicNumberAxisTests, org.jfree.chart.axis.junit.DateAxisTests, org.jfree.chart.axis.junit.DateAxisTests, org.jfree.chart.axis.junit.DateTickMarkPositionTests, org.jfree.chart.axis.junit.DateTickMarkPositionTests, org.jfree.chart.axis.junit.DateTickTests, org.jfree.chart.axis.junit.DateTickTests, org.jfree.chart.axis.junit.DateTickUnitTests, org.jfree.chart.axis.junit.DateTickUnitTests, org.jfree.chart.axis.junit.ExtendedCategoryAxisTests, org.jfree.chart.axis.junit.ExtendedCategoryAxisTests, org.jfree.chart.axis.junit.LogAxisTests, org.jfree.chart.axis.junit.LogAxisTests, org.jfree.chart.axis.junit.LogarithmicAxisTests, org.jfree.chart.axis.junit.LogarithmicAxisTests, org.jfree.chart.axis.junit.MarkerAxisBandTests, org.jfree.chart.axis.junit.MarkerAxisBandTests, org.jfree.chart.axis.junit.ModuloAxisTests, org.jfree.chart.axis.junit.ModuloAxisTests, org.jfree.chart.axis.junit.MonthDateFormatTests, org.jfree.chart.axis.junit.MonthDateFormatTests, org.jfree.chart.axis.junit.NumberAxis3DTests, org.jfree.chart.axis.junit.NumberAxis3DTests, org.jfree.chart.axis.junit.NumberAxisTests, org.jfree.chart.axis.junit.NumberAxisTests, org.jfree.chart.axis.junit.NumberTickUnitTests, org.jfree.chart.axis.junit.NumberTickUnitTests, org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests, org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests, org.jfree.chart.axis.junit.PeriodAxisTests, org.jfree.chart.axis.junit.PeriodAxisTests, org.jfree.chart.axis.junit.QuarterDateFormatTests, org.jfree.chart.axis.junit.QuarterDateFormatTests, org.jfree.chart.axis.junit.SegmentedTimelineTests, org.jfree.chart.axis.junit.SegmentedTimelineTests, org.jfree.chart.axis.junit.SegmentedTimelineTests2, org.jfree.chart.axis.junit.SegmentedTimelineTests2, org.jfree.chart.axis.junit.StandardTickUnitSourceTests, org.jfree.chart.axis.junit.StandardTickUnitSourceTests, org.jfree.chart.axis.junit.SubCategoryAxisTests, org.jfree.chart.axis.junit.SubCategoryAxisTests, org.jfree.chart.axis.junit.SymbolAxisTests, org.jfree.chart.axis.junit.SymbolAxisTests, org.jfree.chart.axis.junit.TickUnitsTests, org.jfree.chart.axis.junit.TickUnitsTests, org.jfree.chart.axis.junit.ValueAxisTests, org.jfree.chart.axis.junit.ValueAxisTests, org.jfree.chart.block.junit.AbstractBlockTests, org.jfree.chart.block.junit.AbstractBlockTests, org.jfree.chart.block.junit.BlockBorderTests, org.jfree.chart.block.junit.BlockBorderTests, org.jfree.chart.block.junit.BlockContainerTests, org.jfree.chart.block.junit.BlockContainerTests, org.jfree.chart.block.junit.BlockPackageTests, org.jfree.chart.block.junit.BlockPackageTests, org.jfree.chart.block.junit.BorderArrangementTests, org.jfree.chart.block.junit.BorderArrangementTests, org.jfree.chart.block.junit.ColorBlockTests, org.jfree.chart.block.junit.ColorBlockTests, org.jfree.chart.block.junit.ColumnArrangementTests, org.jfree.chart.block.junit.ColumnArrangementTests, org.jfree.chart.block.junit.EmptyBlockTests, org.jfree.chart.block.junit.EmptyBlockTests, org.jfree.chart.block.junit.FlowArrangementTests, org.jfree.chart.block.junit.FlowArrangementTests, org.jfree.chart.block.junit.GridArrangementTests, org.jfree.chart.block.junit.GridArrangementTests, org.jfree.chart.block.junit.LabelBlockTests, org.jfree.chart.block.junit.LabelBlockTests, org.jfree.chart.block.junit.LineBorderTests, org.jfree.chart.block.junit.LineBorderTests, org.jfree.chart.block.junit.RectangleConstraintTests, org.jfree.chart.block.junit.RectangleConstraintTests, org.jfree.chart.entity.junit.CategoryItemEntityTests, org.jfree.chart.entity.junit.CategoryItemEntityTests, org.jfree.chart.entity.junit.CategoryLabelEntityTests, org.jfree.chart.entity.junit.CategoryLabelEntityTests, org.jfree.chart.entity.junit.EntityPackageTests, org.jfree.chart.entity.junit.EntityPackageTests, org.jfree.chart.entity.junit.LegendItemEntityTests, org.jfree.chart.entity.junit.LegendItemEntityTests, org.jfree.chart.entity.junit.PieSectionEntityTests, org.jfree.chart.entity.junit.PieSectionEntityTests, org.jfree.chart.entity.junit.StandardEntityCollectionTests, org.jfree.chart.entity.junit.StandardEntityCollectionTests, org.jfree.chart.entity.junit.TickLabelEntityTests, org.jfree.chart.entity.junit.TickLabelEntityTests, org.jfree.chart.entity.junit.XYItemEntityTests, org.jfree.chart.entity.junit.XYItemEntityTests, org.jfree.chart.imagemap.junit.DynamicDriveToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.DynamicDriveToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.ImageMapPackageTests, org.jfree.chart.imagemap.junit.ImageMapPackageTests, org.jfree.chart.imagemap.junit.ImageMapUtilitiesTests, org.jfree.chart.imagemap.junit.ImageMapUtilitiesTests, org.jfree.chart.imagemap.junit.OverLIBToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.OverLIBToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.StandardToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.StandardToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.StandardURLTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.StandardURLTagFragmentGeneratorTests, org.jfree.chart.junit.AreaChartTests, org.jfree.chart.junit.AreaChartTests, org.jfree.chart.junit.BarChart3DTests, org.jfree.chart.junit.BarChart3DTests, org.jfree.chart.junit.BarChartTests, org.jfree.chart.junit.BarChartTests, org.jfree.chart.junit.ChartPackageTests, org.jfree.chart.junit.ChartPackageTests, org.jfree.chart.junit.ChartPanelTests, org.jfree.chart.junit.ChartPanelTests, org.jfree.chart.junit.ChartRenderingInfoTests, org.jfree.chart.junit.ChartRenderingInfoTests, org.jfree.chart.junit.GanttChartTests, org.jfree.chart.junit.GanttChartTests, org.jfree.chart.junit.JFreeChartTests, org.jfree.chart.junit.JFreeChartTests, org.jfree.chart.junit.LegendItemCollectionTests, org.jfree.chart.junit.LegendItemCollectionTests, org.jfree.chart.junit.LegendItemTests, org.jfree.chart.junit.LegendItemTests, org.jfree.chart.junit.LineChart3DTests, org.jfree.chart.junit.LineChart3DTests, org.jfree.chart.junit.LineChartTests, org.jfree.chart.junit.LineChartTests, org.jfree.chart.junit.MeterChartTests, org.jfree.chart.junit.MeterChartTests, org.jfree.chart.junit.PieChart3DTests, org.jfree.chart.junit.PieChart3DTests, org.jfree.chart.junit.PieChartTests, org.jfree.chart.junit.PieChartTests, org.jfree.chart.junit.ScatterPlotTests, org.jfree.chart.junit.ScatterPlotTests, org.jfree.chart.junit.StackedAreaChartTests, org.jfree.chart.junit.StackedAreaChartTests, org.jfree.chart.junit.StackedBarChart3DTests, org.jfree.chart.junit.StackedBarChart3DTests, org.jfree.chart.junit.StackedBarChartTests, org.jfree.chart.junit.StackedBarChartTests, org.jfree.chart.junit.StandardChartThemeTests, org.jfree.chart.junit.StandardChartThemeTests, org.jfree.chart.junit.TimeSeriesChartTests, org.jfree.chart.junit.TimeSeriesChartTests, org.jfree.chart.junit.WaterfallChartTests, org.jfree.chart.junit.WaterfallChartTests, org.jfree.chart.junit.XYAreaChartTests, org.jfree.chart.junit.XYAreaChartTests, org.jfree.chart.junit.XYBarChartTests, org.jfree.chart.junit.XYBarChartTests, org.jfree.chart.junit.XYLineChartTests, org.jfree.chart.junit.XYLineChartTests, org.jfree.chart.junit.XYStepAreaChartTests, org.jfree.chart.junit.XYStepAreaChartTests, org.jfree.chart.junit.XYStepChartTests, org.jfree.chart.junit.XYStepChartTests, org.jfree.chart.labels.junit.BoxAndWhiskerToolTipGeneratorTests, org.jfree.chart.labels.junit.BoxAndWhiskerToolTipGeneratorTests, org.jfree.chart.labels.junit.BoxAndWhiskerXYToolTipGeneratorTests, org.jfree.chart.labels.junit.BoxAndWhiskerXYToolTipGeneratorTests, org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.CustomXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.CustomXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.HighLowItemLabelGeneratorTests, org.jfree.chart.labels.junit.HighLowItemLabelGeneratorTests, org.jfree.chart.labels.junit.IntervalCategoryItemLabelGeneratorTests, org.jfree.chart.labels.junit.IntervalCategoryItemLabelGeneratorTests, org.jfree.chart.labels.junit.IntervalCategoryToolTipGeneratorTests, org.jfree.chart.labels.junit.IntervalCategoryToolTipGeneratorTests, org.jfree.chart.labels.junit.ItemLabelAnchorTests, org.jfree.chart.labels.junit.ItemLabelAnchorTests, org.jfree.chart.labels.junit.ItemLabelPositionTests, org.jfree.chart.labels.junit.ItemLabelPositionTests, org.jfree.chart.labels.junit.LabelsPackageTests, org.jfree.chart.labels.junit.LabelsPackageTests, org.jfree.chart.labels.junit.MultipleXYSeriesLabelGeneratorTests, org.jfree.chart.labels.junit.MultipleXYSeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests, org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests, org.jfree.chart.labels.junit.StandardPieToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardPieToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.StandardXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardXYToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardXYToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardXYZToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardXYZToolTipGeneratorTests, org.jfree.chart.labels.junit.SymbolicXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.SymbolicXYItemLabelGeneratorTests, org.jfree.chart.needle.junit.ArrowNeedleTests, org.jfree.chart.needle.junit.ArrowNeedleTests, org.jfree.chart.needle.junit.LineNeedleTests, org.jfree.chart.needle.junit.LineNeedleTests, org.jfree.chart.needle.junit.LongNeedleTests, org.jfree.chart.needle.junit.LongNeedleTests, org.jfree.chart.needle.junit.MeterNeedleTests, org.jfree.chart.needle.junit.MeterNeedleTests, org.jfree.chart.needle.junit.MiddlePinNeedleTests, org.jfree.chart.needle.junit.MiddlePinNeedleTests, org.jfree.chart.needle.junit.NeedlePackageTests, org.jfree.chart.needle.junit.NeedlePackageTests, org.jfree.chart.needle.junit.PinNeedleTests, org.jfree.chart.needle.junit.PinNeedleTests, org.jfree.chart.needle.junit.PlumNeedleTests, org.jfree.chart.needle.junit.PlumNeedleTests, org.jfree.chart.needle.junit.PointerNeedleTests, org.jfree.chart.needle.junit.PointerNeedleTests, org.jfree.chart.needle.junit.ShipNeedleTests, org.jfree.chart.needle.junit.ShipNeedleTests, org.jfree.chart.needle.junit.WindNeedleTests, org.jfree.chart.needle.junit.WindNeedleTests, org.jfree.chart.plot.dial.junit.AbstractDialLayerTests, org.jfree.chart.plot.dial.junit.AbstractDialLayerTests, org.jfree.chart.plot.dial.junit.ArcDialFrameTests, org.jfree.chart.plot.dial.junit.ArcDialFrameTests, org.jfree.chart.plot.dial.junit.DialBackgroundTests, org.jfree.chart.plot.dial.junit.DialBackgroundTests, org.jfree.chart.plot.dial.junit.DialCapTests, org.jfree.chart.plot.dial.junit.DialCapTests, org.jfree.chart.plot.dial.junit.DialPackageTests, org.jfree.chart.plot.dial.junit.DialPackageTests, org.jfree.chart.plot.dial.junit.DialPlotTests, org.jfree.chart.plot.dial.junit.DialPlotTests, org.jfree.chart.plot.dial.junit.DialPointerTests, org.jfree.chart.plot.dial.junit.DialPointerTests, org.jfree.chart.plot.dial.junit.DialTextAnnotationTests, org.jfree.chart.plot.dial.junit.DialTextAnnotationTests, org.jfree.chart.plot.dial.junit.DialValueIndicatorTests, org.jfree.chart.plot.dial.junit.DialValueIndicatorTests, org.jfree.chart.plot.dial.junit.StandardDialFrameTests, org.jfree.chart.plot.dial.junit.StandardDialFrameTests, org.jfree.chart.plot.dial.junit.StandardDialRangeTests, org.jfree.chart.plot.dial.junit.StandardDialRangeTests, org.jfree.chart.plot.dial.junit.StandardDialScaleTests, org.jfree.chart.plot.dial.junit.StandardDialScaleTests, org.jfree.chart.plot.junit.CategoryMarkerTests, org.jfree.chart.plot.junit.CategoryMarkerTests, org.jfree.chart.plot.junit.CategoryPlotTests, org.jfree.chart.plot.junit.CategoryPlotTests, org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests, org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests, org.jfree.chart.plot.junit.CombinedDomainXYPlotTests, org.jfree.chart.plot.junit.CombinedDomainXYPlotTests, org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests, org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests, org.jfree.chart.plot.junit.CombinedRangeXYPlotTests, org.jfree.chart.plot.junit.CombinedRangeXYPlotTests, org.jfree.chart.plot.junit.CompassPlotTests, org.jfree.chart.plot.junit.CompassPlotTests, org.jfree.chart.plot.junit.DefaultDrawingSupplierTests, org.jfree.chart.plot.junit.DefaultDrawingSupplierTests, org.jfree.chart.plot.junit.FastScatterPlotTests, org.jfree.chart.plot.junit.FastScatterPlotTests, org.jfree.chart.plot.junit.IntervalMarkerTests, org.jfree.chart.plot.junit.IntervalMarkerTests, org.jfree.chart.plot.junit.MarkerTests, org.jfree.chart.plot.junit.MarkerTests, org.jfree.chart.plot.junit.MeterIntervalTests, org.jfree.chart.plot.junit.MeterIntervalTests, org.jfree.chart.plot.junit.MeterPlotTests, org.jfree.chart.plot.junit.MeterPlotTests, org.jfree.chart.plot.junit.MultiplePiePlotTests, org.jfree.chart.plot.junit.MultiplePiePlotTests, org.jfree.chart.plot.junit.PieLabelRecordTests, org.jfree.chart.plot.junit.PieLabelRecordTests, org.jfree.chart.plot.junit.PiePlot3DTests, org.jfree.chart.plot.junit.PiePlot3DTests, org.jfree.chart.plot.junit.PiePlotTests, org.jfree.chart.plot.junit.PiePlotTests, org.jfree.chart.plot.junit.PlotOrientationTests, org.jfree.chart.plot.junit.PlotOrientationTests, org.jfree.chart.plot.junit.PlotPackageTests, org.jfree.chart.plot.junit.PlotPackageTests, org.jfree.chart.plot.junit.PlotRenderingInfoTests, org.jfree.chart.plot.junit.PlotRenderingInfoTests, org.jfree.chart.plot.junit.PlotTests, org.jfree.chart.plot.junit.PlotTests, org.jfree.chart.plot.junit.PolarPlotTests, org.jfree.chart.plot.junit.PolarPlotTests, org.jfree.chart.plot.junit.RingPlotTests, org.jfree.chart.plot.junit.RingPlotTests, org.jfree.chart.plot.junit.SpiderWebPlotTests, org.jfree.chart.plot.junit.SpiderWebPlotTests, org.jfree.chart.plot.junit.ThermometerPlotTests, org.jfree.chart.plot.junit.ThermometerPlotTests, org.jfree.chart.plot.junit.ValueMarkerTests, org.jfree.chart.plot.junit.ValueMarkerTests, org.jfree.chart.plot.junit.XYPlotTests, org.jfree.chart.plot.junit.XYPlotTests, org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests, org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests, org.jfree.chart.renderer.category.junit.AreaRendererTests, org.jfree.chart.renderer.category.junit.AreaRendererTests, org.jfree.chart.renderer.category.junit.BarRenderer3DTests, org.jfree.chart.renderer.category.junit.BarRenderer3DTests, org.jfree.chart.renderer.category.junit.BarRendererTests, org.jfree.chart.renderer.category.junit.BarRendererTests, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests, org.jfree.chart.renderer.category.junit.CategoryStepRendererTests, org.jfree.chart.renderer.category.junit.CategoryStepRendererTests, org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests, org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests, org.jfree.chart.renderer.category.junit.GanttRendererTests, org.jfree.chart.renderer.category.junit.GanttRendererTests, org.jfree.chart.renderer.category.junit.GradientBarPainterTests, org.jfree.chart.renderer.category.junit.GradientBarPainterTests, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests, org.jfree.chart.renderer.category.junit.LevelRendererTests, org.jfree.chart.renderer.category.junit.LevelRendererTests, org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests, org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests, org.jfree.chart.renderer.category.junit.LineRenderer3DTests, org.jfree.chart.renderer.category.junit.LineRenderer3DTests, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests, org.jfree.chart.renderer.category.junit.RendererCategoryPackageTests, org.jfree.chart.renderer.category.junit.RendererCategoryPackageTests, org.jfree.chart.renderer.category.junit.ScatterRendererTests, org.jfree.chart.renderer.category.junit.ScatterRendererTests, org.jfree.chart.renderer.category.junit.StackedAreaRendererTests, org.jfree.chart.renderer.category.junit.StackedAreaRendererTests, org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests, org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests, org.jfree.chart.renderer.category.junit.StackedBarRendererTests, org.jfree.chart.renderer.category.junit.StackedBarRendererTests, org.jfree.chart.renderer.category.junit.StandardBarPainterTests, org.jfree.chart.renderer.category.junit.StandardBarPainterTests, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests, org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests, org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests, org.jfree.chart.renderer.junit.AbstractRendererTests, org.jfree.chart.renderer.junit.AbstractRendererTests, org.jfree.chart.renderer.junit.AreaRendererEndTypeTests, org.jfree.chart.renderer.junit.AreaRendererEndTypeTests, org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests, org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests, org.jfree.chart.renderer.junit.GrayPaintScaleTests, org.jfree.chart.renderer.junit.GrayPaintScaleTests, org.jfree.chart.renderer.junit.LookupPaintScaleTests, org.jfree.chart.renderer.junit.LookupPaintScaleTests, org.jfree.chart.renderer.junit.OutlierTests, org.jfree.chart.renderer.junit.OutlierTests, org.jfree.chart.renderer.junit.RendererPackageTests, org.jfree.chart.renderer.junit.RendererPackageTests, org.jfree.chart.renderer.junit.RendererUtilitiesTests, org.jfree.chart.renderer.junit.RendererUtilitiesTests, org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests, org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests, org.jfree.chart.renderer.xy.junit.CandlestickRendererTests, org.jfree.chart.renderer.xy.junit.CandlestickRendererTests, org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests, org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests, org.jfree.chart.renderer.xy.junit.DeviationRendererTests, org.jfree.chart.renderer.xy.junit.DeviationRendererTests, org.jfree.chart.renderer.xy.junit.GradientXYBarPainterTests, org.jfree.chart.renderer.xy.junit.GradientXYBarPainterTests, org.jfree.chart.renderer.xy.junit.HighLowRendererTests, org.jfree.chart.renderer.xy.junit.HighLowRendererTests, org.jfree.chart.renderer.xy.junit.RendererXYPackageTests, org.jfree.chart.renderer.xy.junit.RendererXYPackageTests, org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests, org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests, org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests, org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests, org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests, org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests, org.jfree.chart.renderer.xy.junit.StandardXYBarPainterTests, org.jfree.chart.renderer.xy.junit.StandardXYBarPainterTests, org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests, org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests, org.jfree.chart.renderer.xy.junit.VectorRendererTests, org.jfree.chart.renderer.xy.junit.VectorRendererTests, org.jfree.chart.renderer.xy.junit.WindItemRendererTests, org.jfree.chart.renderer.xy.junit.WindItemRendererTests, org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests, org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests, org.jfree.chart.renderer.xy.junit.XYAreaRendererTests, org.jfree.chart.renderer.xy.junit.XYAreaRendererTests, org.jfree.chart.renderer.xy.junit.XYBarRendererTests, org.jfree.chart.renderer.xy.junit.XYBarRendererTests, org.jfree.chart.renderer.xy.junit.XYBlockRendererTests, org.jfree.chart.renderer.xy.junit.XYBlockRendererTests, org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests, org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests, org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests, org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests, org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests, org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests, org.jfree.chart.renderer.xy.junit.XYDotRendererTests, org.jfree.chart.renderer.xy.junit.XYDotRendererTests, org.jfree.chart.renderer.xy.junit.XYErrorRendererTests, org.jfree.chart.renderer.xy.junit.XYErrorRendererTests, org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests, org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests, org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests, org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests, org.jfree.chart.renderer.xy.junit.XYShapeRendererTests, org.jfree.chart.renderer.xy.junit.XYShapeRendererTests, org.jfree.chart.renderer.xy.junit.XYSplineRendererTests, org.jfree.chart.renderer.xy.junit.XYSplineRendererTests, org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests, org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests, org.jfree.chart.renderer.xy.junit.XYStepRendererTests, org.jfree.chart.renderer.xy.junit.XYStepRendererTests, org.jfree.chart.renderer.xy.junit.YIntervalRendererTests, org.jfree.chart.renderer.xy.junit.YIntervalRendererTests, org.jfree.chart.title.junit.CompositeTitleTests, org.jfree.chart.title.junit.CompositeTitleTests, org.jfree.chart.title.junit.DateTitleTests, org.jfree.chart.title.junit.DateTitleTests, org.jfree.chart.title.junit.ImageTitleTests, org.jfree.chart.title.junit.ImageTitleTests, org.jfree.chart.title.junit.LegendGraphicTests, org.jfree.chart.title.junit.LegendGraphicTests, org.jfree.chart.title.junit.LegendTitleTests, org.jfree.chart.title.junit.LegendTitleTests, org.jfree.chart.title.junit.PaintScaleLegendTests, org.jfree.chart.title.junit.PaintScaleLegendTests, org.jfree.chart.title.junit.ShortTextTitleTests, org.jfree.chart.title.junit.ShortTextTitleTests, org.jfree.chart.title.junit.TextTitleTests, org.jfree.chart.title.junit.TextTitleTests, org.jfree.chart.title.junit.TitlePackageTests, org.jfree.chart.title.junit.TitlePackageTests, org.jfree.chart.title.junit.TitleTests, org.jfree.chart.title.junit.TitleTests, org.jfree.chart.urls.junit.CustomCategoryURLGeneratorTests, org.jfree.chart.urls.junit.CustomCategoryURLGeneratorTests, org.jfree.chart.urls.junit.CustomPieURLGeneratorTests, org.jfree.chart.urls.junit.CustomPieURLGeneratorTests, org.jfree.chart.urls.junit.CustomXYURLGeneratorTests, org.jfree.chart.urls.junit.CustomXYURLGeneratorTests, org.jfree.chart.urls.junit.StandardCategoryURLGeneratorTests, org.jfree.chart.urls.junit.StandardCategoryURLGeneratorTests, org.jfree.chart.urls.junit.StandardPieURLGeneratorTests, org.jfree.chart.urls.junit.StandardPieURLGeneratorTests, org.jfree.chart.urls.junit.StandardXYURLGeneratorTests, org.jfree.chart.urls.junit.StandardXYURLGeneratorTests, org.jfree.chart.urls.junit.TimeSeriesURLGeneratorTests, org.jfree.chart.urls.junit.TimeSeriesURLGeneratorTests, org.jfree.chart.urls.junit.UrlsPackageTests, org.jfree.chart.urls.junit.UrlsPackageTests, org.jfree.chart.util.junit.BooleanListTests, org.jfree.chart.util.junit.BooleanListTests, org.jfree.chart.util.junit.HashUtilitiesTests, org.jfree.chart.util.junit.HashUtilitiesTests, org.jfree.chart.util.junit.LineUtilitiesTests, org.jfree.chart.util.junit.LineUtilitiesTests, org.jfree.chart.util.junit.LogFormatTests, org.jfree.chart.util.junit.LogFormatTests, org.jfree.chart.util.junit.PaintListTests, org.jfree.chart.util.junit.PaintListTests, org.jfree.chart.util.junit.PaintMapTests, org.jfree.chart.util.junit.PaintMapTests, org.jfree.chart.util.junit.RelativeDateFormatTests, org.jfree.chart.util.junit.RelativeDateFormatTests, org.jfree.chart.util.junit.SerialUtilitiesTests, org.jfree.chart.util.junit.SerialUtilitiesTests, org.jfree.chart.util.junit.ShapeListTests, org.jfree.chart.util.junit.ShapeListTests, org.jfree.chart.util.junit.ShapeUtilitiesTests, org.jfree.chart.util.junit.ShapeUtilitiesTests, org.jfree.chart.util.junit.StrokeListTests, org.jfree.chart.util.junit.StrokeListTests, org.jfree.chart.util.junit.StrokeMapTests, org.jfree.chart.util.junit.StrokeMapTests, org.jfree.chart.util.junit.UtilPackageTests, org.jfree.chart.util.junit.UtilPackageTests, org.jfree.data.category.junit.CategoryToPieDatasetTests, org.jfree.data.category.junit.CategoryToPieDatasetTests, org.jfree.data.category.junit.DataCategoryPackageTests, org.jfree.data.category.junit.DataCategoryPackageTests, org.jfree.data.category.junit.DefaultCategoryDatasetTests, org.jfree.data.category.junit.DefaultCategoryDatasetTests, org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests, org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests, org.jfree.data.category.junit.SlidingCategoryDatasetTests, org.jfree.data.category.junit.SlidingCategoryDatasetTests, org.jfree.data.function.junit.DataFunctionPackageTests, org.jfree.data.function.junit.DataFunctionPackageTests, org.jfree.data.function.junit.LineFunction2DTests, org.jfree.data.function.junit.LineFunction2DTests, org.jfree.data.function.junit.NormalDistributionFunction2DTests, org.jfree.data.function.junit.NormalDistributionFunction2DTests, org.jfree.data.function.junit.PolynomialFunction2DTests, org.jfree.data.function.junit.PolynomialFunction2DTests, org.jfree.data.function.junit.PowerFunction2DTests, org.jfree.data.function.junit.PowerFunction2DTests, org.jfree.data.gantt.junit.DataGanttPackageTests, org.jfree.data.gantt.junit.DataGanttPackageTests, org.jfree.data.gantt.junit.SlidingGanttCategoryDatasetTests, org.jfree.data.gantt.junit.SlidingGanttCategoryDatasetTests, org.jfree.data.gantt.junit.TaskSeriesCollectionTests, org.jfree.data.gantt.junit.TaskSeriesCollectionTests, org.jfree.data.gantt.junit.TaskSeriesTests, org.jfree.data.gantt.junit.TaskSeriesTests, org.jfree.data.gantt.junit.TaskTests, org.jfree.data.gantt.junit.TaskTests, org.jfree.data.gantt.junit.XYTaskDatasetTests, org.jfree.data.gantt.junit.XYTaskDatasetTests, org.jfree.data.general.junit.DataGeneralPackageTests, org.jfree.data.general.junit.DataGeneralPackageTests, org.jfree.data.general.junit.DatasetGroupTests, org.jfree.data.general.junit.DatasetGroupTests, org.jfree.data.general.junit.DatasetUtilitiesTests, org.jfree.data.general.junit.DatasetUtilitiesTests, org.jfree.data.general.junit.DefaultHeatMapDatasetTests, org.jfree.data.general.junit.DefaultHeatMapDatasetTests, org.jfree.data.general.junit.DefaultKeyedValueDatasetTests, org.jfree.data.general.junit.DefaultKeyedValueDatasetTests, org.jfree.data.general.junit.DefaultKeyedValues2DDatasetTests, org.jfree.data.general.junit.DefaultKeyedValues2DDatasetTests, org.jfree.data.general.junit.DefaultKeyedValuesDatasetTests, org.jfree.data.general.junit.DefaultKeyedValuesDatasetTests, org.jfree.data.general.junit.DefaultPieDatasetTests, org.jfree.data.general.junit.DefaultPieDatasetTests, org.jfree.data.junit.ComparableObjectItemTests, org.jfree.data.junit.ComparableObjectItemTests, org.jfree.data.junit.ComparableObjectSeriesTests, org.jfree.data.junit.ComparableObjectSeriesTests, org.jfree.data.junit.DataPackageTests, org.jfree.data.junit.DataPackageTests, org.jfree.data.junit.DataUtilitiesTests, org.jfree.data.junit.DataUtilitiesTests, org.jfree.data.junit.DefaultKeyedValueTests, org.jfree.data.junit.DefaultKeyedValueTests, org.jfree.data.junit.DefaultKeyedValues2DTests, org.jfree.data.junit.DefaultKeyedValues2DTests, org.jfree.data.junit.DefaultKeyedValuesTests, org.jfree.data.junit.DefaultKeyedValuesTests, org.jfree.data.junit.DomainOrderTests, org.jfree.data.junit.DomainOrderTests, org.jfree.data.junit.KeyToGroupMapTests, org.jfree.data.junit.KeyToGroupMapTests, org.jfree.data.junit.KeyedObjectTests, org.jfree.data.junit.KeyedObjectTests, org.jfree.data.junit.KeyedObjects2DTests, org.jfree.data.junit.KeyedObjects2DTests, org.jfree.data.junit.KeyedObjectsTests, org.jfree.data.junit.KeyedObjectsTests, org.jfree.data.junit.RangeTests, org.jfree.data.junit.RangeTests, org.jfree.data.junit.RangeTypeTests, org.jfree.data.junit.RangeTypeTests, org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests, org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests, org.jfree.data.statistics.junit.BoxAndWhiskerItemTests, org.jfree.data.statistics.junit.BoxAndWhiskerItemTests, org.jfree.data.statistics.junit.DataStatisticsPackageTests, org.jfree.data.statistics.junit.DataStatisticsPackageTests, org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultBoxAndWhiskerXYDatasetTests, org.jfree.data.statistics.junit.DefaultBoxAndWhiskerXYDatasetTests, org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests, org.jfree.data.statistics.junit.HistogramBinTests, org.jfree.data.statistics.junit.HistogramBinTests, org.jfree.data.statistics.junit.HistogramDatasetTests, org.jfree.data.statistics.junit.HistogramDatasetTests, org.jfree.data.statistics.junit.MeanAndStandardDeviationTests, org.jfree.data.statistics.junit.MeanAndStandardDeviationTests, org.jfree.data.statistics.junit.RegressionTests, org.jfree.data.statistics.junit.RegressionTests, org.jfree.data.statistics.junit.SimpleHistogramBinTests, org.jfree.data.statistics.junit.SimpleHistogramBinTests, org.jfree.data.statistics.junit.SimpleHistogramDatasetTests, org.jfree.data.statistics.junit.SimpleHistogramDatasetTests, org.jfree.data.statistics.junit.StatisticsTests, org.jfree.data.statistics.junit.StatisticsTests, org.jfree.data.time.junit.DataTimePackageTests, org.jfree.data.time.junit.DataTimePackageTests, org.jfree.data.time.junit.DateRangeTests, org.jfree.data.time.junit.DateRangeTests, org.jfree.data.time.junit.DayTests, org.jfree.data.time.junit.DayTests, org.jfree.data.time.junit.FixedMillisecondTests, org.jfree.data.time.junit.FixedMillisecondTests, org.jfree.data.time.junit.HourTests, org.jfree.data.time.junit.HourTests, org.jfree.data.time.junit.MillisecondTests, org.jfree.data.time.junit.MillisecondTests, org.jfree.data.time.junit.MinuteTests, org.jfree.data.time.junit.MinuteTests, org.jfree.data.time.junit.MonthTests, org.jfree.data.time.junit.MonthTests, org.jfree.data.time.junit.MovingAverageTests, org.jfree.data.time.junit.MovingAverageTests, org.jfree.data.time.junit.QuarterTests, org.jfree.data.time.junit.QuarterTests, org.jfree.data.time.junit.SecondTests, org.jfree.data.time.junit.SecondTests, org.jfree.data.time.junit.SimpleTimePeriodTests, org.jfree.data.time.junit.SimpleTimePeriodTests, org.jfree.data.time.junit.TimePeriodAnchorTests, org.jfree.data.time.junit.TimePeriodAnchorTests, org.jfree.data.time.junit.TimePeriodValueTests, org.jfree.data.time.junit.TimePeriodValueTests, org.jfree.data.time.junit.TimePeriodValuesCollectionTests, org.jfree.data.time.junit.TimePeriodValuesCollectionTests, org.jfree.data.time.junit.TimePeriodValuesTests, org.jfree.data.time.junit.TimePeriodValuesTests, org.jfree.data.time.junit.TimeSeriesCollectionTests, org.jfree.data.time.junit.TimeSeriesCollectionTests, org.jfree.data.time.junit.TimeSeriesDataItemTests, org.jfree.data.time.junit.TimeSeriesDataItemTests, org.jfree.data.time.junit.TimeSeriesTests, org.jfree.data.time.junit.TimeSeriesTests, org.jfree.data.time.junit.TimeTableXYDatasetTests, org.jfree.data.time.junit.TimeTableXYDatasetTests, org.jfree.data.time.junit.WeekTests, org.jfree.data.time.junit.WeekTests, org.jfree.data.time.junit.YearTests, org.jfree.data.time.junit.YearTests, org.jfree.data.time.ohlc.junit.OHLCItemTests, org.jfree.data.time.ohlc.junit.OHLCItemTests, org.jfree.data.time.ohlc.junit.OHLCPackageTests, org.jfree.data.time.ohlc.junit.OHLCPackageTests, org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests, org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests, org.jfree.data.time.ohlc.junit.OHLCSeriesTests, org.jfree.data.time.ohlc.junit.OHLCSeriesTests, org.jfree.data.time.ohlc.junit.OHLCTests, org.jfree.data.time.ohlc.junit.OHLCTests, org.jfree.data.xy.junit.CategoryTableXYDatasetTests, org.jfree.data.xy.junit.CategoryTableXYDatasetTests, org.jfree.data.xy.junit.DataXYPackageTests, org.jfree.data.xy.junit.DataXYPackageTests, org.jfree.data.xy.junit.DefaultHighLowDatasetTests, org.jfree.data.xy.junit.DefaultHighLowDatasetTests, org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests, org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests, org.jfree.data.xy.junit.DefaultOHLCDatasetTests, org.jfree.data.xy.junit.DefaultOHLCDatasetTests, org.jfree.data.xy.junit.DefaultTableXYDatasetTests, org.jfree.data.xy.junit.DefaultTableXYDatasetTests, org.jfree.data.xy.junit.DefaultWindDatasetTests, org.jfree.data.xy.junit.DefaultWindDatasetTests, org.jfree.data.xy.junit.DefaultXYDatasetTests, org.jfree.data.xy.junit.DefaultXYDatasetTests, org.jfree.data.xy.junit.DefaultXYZDatasetTests, org.jfree.data.xy.junit.DefaultXYZDatasetTests, org.jfree.data.xy.junit.IntervalXYDelegateTests, org.jfree.data.xy.junit.IntervalXYDelegateTests, org.jfree.data.xy.junit.MatrixSeriesCollectionTests, org.jfree.data.xy.junit.MatrixSeriesCollectionTests, org.jfree.data.xy.junit.MatrixSeriesTests, org.jfree.data.xy.junit.MatrixSeriesTests, org.jfree.data.xy.junit.OHLCDataItemTests, org.jfree.data.xy.junit.OHLCDataItemTests, org.jfree.data.xy.junit.TableXYDatasetTests, org.jfree.data.xy.junit.TableXYDatasetTests, org.jfree.data.xy.junit.VectorDataItemTests, org.jfree.data.xy.junit.VectorDataItemTests, org.jfree.data.xy.junit.VectorSeriesCollectionTests, org.jfree.data.xy.junit.VectorSeriesCollectionTests, org.jfree.data.xy.junit.VectorSeriesTests, org.jfree.data.xy.junit.VectorSeriesTests, org.jfree.data.xy.junit.VectorTests, org.jfree.data.xy.junit.VectorTests, org.jfree.data.xy.junit.XIntervalDataItemTests, org.jfree.data.xy.junit.XIntervalDataItemTests, org.jfree.data.xy.junit.XIntervalSeriesCollectionTests, org.jfree.data.xy.junit.XIntervalSeriesCollectionTests, org.jfree.data.xy.junit.XIntervalSeriesTests, org.jfree.data.xy.junit.XIntervalSeriesTests, org.jfree.data.xy.junit.XYBarDatasetTests, org.jfree.data.xy.junit.XYBarDatasetTests, org.jfree.data.xy.junit.XYCoordinateTests, org.jfree.data.xy.junit.XYCoordinateTests, org.jfree.data.xy.junit.XYDataItemTests, org.jfree.data.xy.junit.XYDataItemTests, org.jfree.data.xy.junit.XYIntervalDataItemTests, org.jfree.data.xy.junit.XYIntervalDataItemTests, org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests, org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests, org.jfree.data.xy.junit.XYIntervalSeriesTests, org.jfree.data.xy.junit.XYIntervalSeriesTests, org.jfree.data.xy.junit.XYIntervalTests, org.jfree.data.xy.junit.XYIntervalTests, org.jfree.data.xy.junit.XYSeriesCollectionTests, org.jfree.data.xy.junit.XYSeriesCollectionTests, org.jfree.data.xy.junit.XYSeriesTests, org.jfree.data.xy.junit.XYSeriesTests, org.jfree.data.xy.junit.YIntervalDataItemTests, org.jfree.data.xy.junit.YIntervalDataItemTests, org.jfree.data.xy.junit.YIntervalSeriesCollectionTests, org.jfree.data.xy.junit.YIntervalSeriesCollectionTests, org.jfree.data.xy.junit.YIntervalSeriesTests, org.jfree.data.xy.junit.YIntervalSeriesTests, org.jfree.data.xy.junit.YIntervalTests, org.jfree.data.xy.junit.YIntervalTests, org.jfree.data.xy.junit.YWithXIntervalTests, org.jfree.data.xy.junit.YWithXIntervalTests]
[3] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Chart_4/source], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[org.jfree.chart.annotations.junit.AnnotationsPackageTests, org.jfree.chart.annotations.junit.AnnotationsPackageTests, org.jfree.chart.annotations.junit.CategoryLineAnnotationTests, org.jfree.chart.annotations.junit.CategoryLineAnnotationTests, org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests, org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests, org.jfree.chart.annotations.junit.CategoryTextAnnotationTests, org.jfree.chart.annotations.junit.CategoryTextAnnotationTests, org.jfree.chart.annotations.junit.TextAnnotationTests, org.jfree.chart.annotations.junit.TextAnnotationTests, org.jfree.chart.annotations.junit.XYBoxAnnotationTests, org.jfree.chart.annotations.junit.XYBoxAnnotationTests, org.jfree.chart.annotations.junit.XYDrawableAnnotationTests, org.jfree.chart.annotations.junit.XYDrawableAnnotationTests, org.jfree.chart.annotations.junit.XYImageAnnotationTests, org.jfree.chart.annotations.junit.XYImageAnnotationTests, org.jfree.chart.annotations.junit.XYLineAnnotationTests, org.jfree.chart.annotations.junit.XYLineAnnotationTests, org.jfree.chart.annotations.junit.XYPointerAnnotationTests, org.jfree.chart.annotations.junit.XYPointerAnnotationTests, org.jfree.chart.annotations.junit.XYPolygonAnnotationTests, org.jfree.chart.annotations.junit.XYPolygonAnnotationTests, org.jfree.chart.annotations.junit.XYShapeAnnotationTests, org.jfree.chart.annotations.junit.XYShapeAnnotationTests, org.jfree.chart.annotations.junit.XYTextAnnotationTests, org.jfree.chart.annotations.junit.XYTextAnnotationTests, org.jfree.chart.annotations.junit.XYTitleAnnotationTests, org.jfree.chart.annotations.junit.XYTitleAnnotationTests, org.jfree.chart.axis.junit.AxisLocationTests, org.jfree.chart.axis.junit.AxisLocationTests, org.jfree.chart.axis.junit.AxisPackageTests, org.jfree.chart.axis.junit.AxisPackageTests, org.jfree.chart.axis.junit.AxisSpaceTests, org.jfree.chart.axis.junit.AxisSpaceTests, org.jfree.chart.axis.junit.AxisTests, org.jfree.chart.axis.junit.AxisTests, org.jfree.chart.axis.junit.CategoryAnchorTests, org.jfree.chart.axis.junit.CategoryAnchorTests, org.jfree.chart.axis.junit.CategoryAxis3DTests, org.jfree.chart.axis.junit.CategoryAxis3DTests, org.jfree.chart.axis.junit.CategoryAxisTests, org.jfree.chart.axis.junit.CategoryAxisTests, org.jfree.chart.axis.junit.CategoryLabelPositionTests, org.jfree.chart.axis.junit.CategoryLabelPositionTests, org.jfree.chart.axis.junit.CategoryLabelPositionsTests, org.jfree.chart.axis.junit.CategoryLabelPositionsTests, org.jfree.chart.axis.junit.CategoryLabelWidthTypeTests, org.jfree.chart.axis.junit.CategoryLabelWidthTypeTests, org.jfree.chart.axis.junit.CategoryTickTests, org.jfree.chart.axis.junit.CategoryTickTests, org.jfree.chart.axis.junit.CyclicNumberAxisTests, org.jfree.chart.axis.junit.CyclicNumberAxisTests, org.jfree.chart.axis.junit.DateAxisTests, org.jfree.chart.axis.junit.DateAxisTests, org.jfree.chart.axis.junit.DateTickMarkPositionTests, org.jfree.chart.axis.junit.DateTickMarkPositionTests, org.jfree.chart.axis.junit.DateTickTests, org.jfree.chart.axis.junit.DateTickTests, org.jfree.chart.axis.junit.DateTickUnitTests, org.jfree.chart.axis.junit.DateTickUnitTests, org.jfree.chart.axis.junit.ExtendedCategoryAxisTests, org.jfree.chart.axis.junit.ExtendedCategoryAxisTests, org.jfree.chart.axis.junit.LogAxisTests, org.jfree.chart.axis.junit.LogAxisTests, org.jfree.chart.axis.junit.LogarithmicAxisTests, org.jfree.chart.axis.junit.LogarithmicAxisTests, org.jfree.chart.axis.junit.MarkerAxisBandTests, org.jfree.chart.axis.junit.MarkerAxisBandTests, org.jfree.chart.axis.junit.ModuloAxisTests, org.jfree.chart.axis.junit.ModuloAxisTests, org.jfree.chart.axis.junit.MonthDateFormatTests, org.jfree.chart.axis.junit.MonthDateFormatTests, org.jfree.chart.axis.junit.NumberAxis3DTests, org.jfree.chart.axis.junit.NumberAxis3DTests, org.jfree.chart.axis.junit.NumberAxisTests, org.jfree.chart.axis.junit.NumberAxisTests, org.jfree.chart.axis.junit.NumberTickUnitTests, org.jfree.chart.axis.junit.NumberTickUnitTests, org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests, org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests, org.jfree.chart.axis.junit.PeriodAxisTests, org.jfree.chart.axis.junit.PeriodAxisTests, org.jfree.chart.axis.junit.QuarterDateFormatTests, org.jfree.chart.axis.junit.QuarterDateFormatTests, org.jfree.chart.axis.junit.SegmentedTimelineTests, org.jfree.chart.axis.junit.SegmentedTimelineTests, org.jfree.chart.axis.junit.SegmentedTimelineTests2, org.jfree.chart.axis.junit.SegmentedTimelineTests2, org.jfree.chart.axis.junit.StandardTickUnitSourceTests, org.jfree.chart.axis.junit.StandardTickUnitSourceTests, org.jfree.chart.axis.junit.SubCategoryAxisTests, org.jfree.chart.axis.junit.SubCategoryAxisTests, org.jfree.chart.axis.junit.SymbolAxisTests, org.jfree.chart.axis.junit.SymbolAxisTests, org.jfree.chart.axis.junit.TickUnitsTests, org.jfree.chart.axis.junit.TickUnitsTests, org.jfree.chart.axis.junit.ValueAxisTests, org.jfree.chart.axis.junit.ValueAxisTests, org.jfree.chart.block.junit.AbstractBlockTests, org.jfree.chart.block.junit.AbstractBlockTests, org.jfree.chart.block.junit.BlockBorderTests, org.jfree.chart.block.junit.BlockBorderTests, org.jfree.chart.block.junit.BlockContainerTests, org.jfree.chart.block.junit.BlockContainerTests, org.jfree.chart.block.junit.BlockPackageTests, org.jfree.chart.block.junit.BlockPackageTests, org.jfree.chart.block.junit.BorderArrangementTests, org.jfree.chart.block.junit.BorderArrangementTests, org.jfree.chart.block.junit.ColorBlockTests, org.jfree.chart.block.junit.ColorBlockTests, org.jfree.chart.block.junit.ColumnArrangementTests, org.jfree.chart.block.junit.ColumnArrangementTests, org.jfree.chart.block.junit.EmptyBlockTests, org.jfree.chart.block.junit.EmptyBlockTests, org.jfree.chart.block.junit.FlowArrangementTests, org.jfree.chart.block.junit.FlowArrangementTests, org.jfree.chart.block.junit.GridArrangementTests, org.jfree.chart.block.junit.GridArrangementTests, org.jfree.chart.block.junit.LabelBlockTests, org.jfree.chart.block.junit.LabelBlockTests, org.jfree.chart.block.junit.LineBorderTests, org.jfree.chart.block.junit.LineBorderTests, org.jfree.chart.block.junit.RectangleConstraintTests, org.jfree.chart.block.junit.RectangleConstraintTests, org.jfree.chart.entity.junit.CategoryItemEntityTests, org.jfree.chart.entity.junit.CategoryItemEntityTests, org.jfree.chart.entity.junit.CategoryLabelEntityTests, org.jfree.chart.entity.junit.CategoryLabelEntityTests, org.jfree.chart.entity.junit.EntityPackageTests, org.jfree.chart.entity.junit.EntityPackageTests, org.jfree.chart.entity.junit.LegendItemEntityTests, org.jfree.chart.entity.junit.LegendItemEntityTests, org.jfree.chart.entity.junit.PieSectionEntityTests, org.jfree.chart.entity.junit.PieSectionEntityTests, org.jfree.chart.entity.junit.StandardEntityCollectionTests, org.jfree.chart.entity.junit.StandardEntityCollectionTests, org.jfree.chart.entity.junit.TickLabelEntityTests, org.jfree.chart.entity.junit.TickLabelEntityTests, org.jfree.chart.entity.junit.XYItemEntityTests, org.jfree.chart.entity.junit.XYItemEntityTests, org.jfree.chart.imagemap.junit.DynamicDriveToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.DynamicDriveToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.ImageMapPackageTests, org.jfree.chart.imagemap.junit.ImageMapPackageTests, org.jfree.chart.imagemap.junit.ImageMapUtilitiesTests, org.jfree.chart.imagemap.junit.ImageMapUtilitiesTests, org.jfree.chart.imagemap.junit.OverLIBToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.OverLIBToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.StandardToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.StandardToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.StandardURLTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.StandardURLTagFragmentGeneratorTests, org.jfree.chart.junit.AreaChartTests, org.jfree.chart.junit.AreaChartTests, org.jfree.chart.junit.BarChart3DTests, org.jfree.chart.junit.BarChart3DTests, org.jfree.chart.junit.BarChartTests, org.jfree.chart.junit.BarChartTests, org.jfree.chart.junit.ChartPackageTests, org.jfree.chart.junit.ChartPackageTests, org.jfree.chart.junit.ChartPanelTests, org.jfree.chart.junit.ChartPanelTests, org.jfree.chart.junit.ChartRenderingInfoTests, org.jfree.chart.junit.ChartRenderingInfoTests, org.jfree.chart.junit.GanttChartTests, org.jfree.chart.junit.GanttChartTests, org.jfree.chart.junit.JFreeChartTests, org.jfree.chart.junit.JFreeChartTests, org.jfree.chart.junit.LegendItemCollectionTests, org.jfree.chart.junit.LegendItemCollectionTests, org.jfree.chart.junit.LegendItemTests, org.jfree.chart.junit.LegendItemTests, org.jfree.chart.junit.LineChart3DTests, org.jfree.chart.junit.LineChart3DTests, org.jfree.chart.junit.LineChartTests, org.jfree.chart.junit.LineChartTests, org.jfree.chart.junit.MeterChartTests, org.jfree.chart.junit.MeterChartTests, org.jfree.chart.junit.PieChart3DTests, org.jfree.chart.junit.PieChart3DTests, org.jfree.chart.junit.PieChartTests, org.jfree.chart.junit.PieChartTests, org.jfree.chart.junit.ScatterPlotTests, org.jfree.chart.junit.ScatterPlotTests, org.jfree.chart.junit.StackedAreaChartTests, org.jfree.chart.junit.StackedAreaChartTests, org.jfree.chart.junit.StackedBarChart3DTests, org.jfree.chart.junit.StackedBarChart3DTests, org.jfree.chart.junit.StackedBarChartTests, org.jfree.chart.junit.StackedBarChartTests, org.jfree.chart.junit.StandardChartThemeTests, org.jfree.chart.junit.StandardChartThemeTests, org.jfree.chart.junit.TimeSeriesChartTests, org.jfree.chart.junit.TimeSeriesChartTests, org.jfree.chart.junit.WaterfallChartTests, org.jfree.chart.junit.WaterfallChartTests, org.jfree.chart.junit.XYAreaChartTests, org.jfree.chart.junit.XYAreaChartTests, org.jfree.chart.junit.XYBarChartTests, org.jfree.chart.junit.XYBarChartTests, org.jfree.chart.junit.XYLineChartTests, org.jfree.chart.junit.XYLineChartTests, org.jfree.chart.junit.XYStepAreaChartTests, org.jfree.chart.junit.XYStepAreaChartTests, org.jfree.chart.junit.XYStepChartTests, org.jfree.chart.junit.XYStepChartTests, org.jfree.chart.labels.junit.BoxAndWhiskerToolTipGeneratorTests, org.jfree.chart.labels.junit.BoxAndWhiskerToolTipGeneratorTests, org.jfree.chart.labels.junit.BoxAndWhiskerXYToolTipGeneratorTests, org.jfree.chart.labels.junit.BoxAndWhiskerXYToolTipGeneratorTests, org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.CustomXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.CustomXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.HighLowItemLabelGeneratorTests, org.jfree.chart.labels.junit.HighLowItemLabelGeneratorTests, org.jfree.chart.labels.junit.IntervalCategoryItemLabelGeneratorTests, org.jfree.chart.labels.junit.IntervalCategoryItemLabelGeneratorTests, org.jfree.chart.labels.junit.IntervalCategoryToolTipGeneratorTests, org.jfree.chart.labels.junit.IntervalCategoryToolTipGeneratorTests, org.jfree.chart.labels.junit.ItemLabelAnchorTests, org.jfree.chart.labels.junit.ItemLabelAnchorTests, org.jfree.chart.labels.junit.ItemLabelPositionTests, org.jfree.chart.labels.junit.ItemLabelPositionTests, org.jfree.chart.labels.junit.LabelsPackageTests, org.jfree.chart.labels.junit.LabelsPackageTests, org.jfree.chart.labels.junit.MultipleXYSeriesLabelGeneratorTests, org.jfree.chart.labels.junit.MultipleXYSeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests, org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests, org.jfree.chart.labels.junit.StandardPieToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardPieToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.StandardXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardXYToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardXYToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardXYZToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardXYZToolTipGeneratorTests, org.jfree.chart.labels.junit.SymbolicXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.SymbolicXYItemLabelGeneratorTests, org.jfree.chart.needle.junit.ArrowNeedleTests, org.jfree.chart.needle.junit.ArrowNeedleTests, org.jfree.chart.needle.junit.LineNeedleTests, org.jfree.chart.needle.junit.LineNeedleTests, org.jfree.chart.needle.junit.LongNeedleTests, org.jfree.chart.needle.junit.LongNeedleTests, org.jfree.chart.needle.junit.MeterNeedleTests, org.jfree.chart.needle.junit.MeterNeedleTests, org.jfree.chart.needle.junit.MiddlePinNeedleTests, org.jfree.chart.needle.junit.MiddlePinNeedleTests, org.jfree.chart.needle.junit.NeedlePackageTests, org.jfree.chart.needle.junit.NeedlePackageTests, org.jfree.chart.needle.junit.PinNeedleTests, org.jfree.chart.needle.junit.PinNeedleTests, org.jfree.chart.needle.junit.PlumNeedleTests, org.jfree.chart.needle.junit.PlumNeedleTests, org.jfree.chart.needle.junit.PointerNeedleTests, org.jfree.chart.needle.junit.PointerNeedleTests, org.jfree.chart.needle.junit.ShipNeedleTests, org.jfree.chart.needle.junit.ShipNeedleTests, org.jfree.chart.needle.junit.WindNeedleTests, org.jfree.chart.needle.junit.WindNeedleTests, org.jfree.chart.plot.dial.junit.AbstractDialLayerTests, org.jfree.chart.plot.dial.junit.AbstractDialLayerTests, org.jfree.chart.plot.dial.junit.ArcDialFrameTests, org.jfree.chart.plot.dial.junit.ArcDialFrameTests, org.jfree.chart.plot.dial.junit.DialBackgroundTests, org.jfree.chart.plot.dial.junit.DialBackgroundTests, org.jfree.chart.plot.dial.junit.DialCapTests, org.jfree.chart.plot.dial.junit.DialCapTests, org.jfree.chart.plot.dial.junit.DialPackageTests, org.jfree.chart.plot.dial.junit.DialPackageTests, org.jfree.chart.plot.dial.junit.DialPlotTests, org.jfree.chart.plot.dial.junit.DialPlotTests, org.jfree.chart.plot.dial.junit.DialPointerTests, org.jfree.chart.plot.dial.junit.DialPointerTests, org.jfree.chart.plot.dial.junit.DialTextAnnotationTests, org.jfree.chart.plot.dial.junit.DialTextAnnotationTests, org.jfree.chart.plot.dial.junit.DialValueIndicatorTests, org.jfree.chart.plot.dial.junit.DialValueIndicatorTests, org.jfree.chart.plot.dial.junit.StandardDialFrameTests, org.jfree.chart.plot.dial.junit.StandardDialFrameTests, org.jfree.chart.plot.dial.junit.StandardDialRangeTests, org.jfree.chart.plot.dial.junit.StandardDialRangeTests, org.jfree.chart.plot.dial.junit.StandardDialScaleTests, org.jfree.chart.plot.dial.junit.StandardDialScaleTests, org.jfree.chart.plot.junit.CategoryMarkerTests, org.jfree.chart.plot.junit.CategoryMarkerTests, org.jfree.chart.plot.junit.CategoryPlotTests, org.jfree.chart.plot.junit.CategoryPlotTests, org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests, org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests, org.jfree.chart.plot.junit.CombinedDomainXYPlotTests, org.jfree.chart.plot.junit.CombinedDomainXYPlotTests, org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests, org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests, org.jfree.chart.plot.junit.CombinedRangeXYPlotTests, org.jfree.chart.plot.junit.CombinedRangeXYPlotTests, org.jfree.chart.plot.junit.CompassPlotTests, org.jfree.chart.plot.junit.CompassPlotTests, org.jfree.chart.plot.junit.DefaultDrawingSupplierTests, org.jfree.chart.plot.junit.DefaultDrawingSupplierTests, org.jfree.chart.plot.junit.FastScatterPlotTests, org.jfree.chart.plot.junit.FastScatterPlotTests, org.jfree.chart.plot.junit.IntervalMarkerTests, org.jfree.chart.plot.junit.IntervalMarkerTests, org.jfree.chart.plot.junit.MarkerTests, org.jfree.chart.plot.junit.MarkerTests, org.jfree.chart.plot.junit.MeterIntervalTests, org.jfree.chart.plot.junit.MeterIntervalTests, org.jfree.chart.plot.junit.MeterPlotTests, org.jfree.chart.plot.junit.MeterPlotTests, org.jfree.chart.plot.junit.MultiplePiePlotTests, org.jfree.chart.plot.junit.MultiplePiePlotTests, org.jfree.chart.plot.junit.PieLabelRecordTests, org.jfree.chart.plot.junit.PieLabelRecordTests, org.jfree.chart.plot.junit.PiePlot3DTests, org.jfree.chart.plot.junit.PiePlot3DTests, org.jfree.chart.plot.junit.PiePlotTests, org.jfree.chart.plot.junit.PiePlotTests, org.jfree.chart.plot.junit.PlotOrientationTests, org.jfree.chart.plot.junit.PlotOrientationTests, org.jfree.chart.plot.junit.PlotPackageTests, org.jfree.chart.plot.junit.PlotPackageTests, org.jfree.chart.plot.junit.PlotRenderingInfoTests, org.jfree.chart.plot.junit.PlotRenderingInfoTests, org.jfree.chart.plot.junit.PlotTests, org.jfree.chart.plot.junit.PlotTests, org.jfree.chart.plot.junit.PolarPlotTests, org.jfree.chart.plot.junit.PolarPlotTests, org.jfree.chart.plot.junit.RingPlotTests, org.jfree.chart.plot.junit.RingPlotTests, org.jfree.chart.plot.junit.SpiderWebPlotTests, org.jfree.chart.plot.junit.SpiderWebPlotTests, org.jfree.chart.plot.junit.ThermometerPlotTests, org.jfree.chart.plot.junit.ThermometerPlotTests, org.jfree.chart.plot.junit.ValueMarkerTests, org.jfree.chart.plot.junit.ValueMarkerTests, org.jfree.chart.plot.junit.XYPlotTests, org.jfree.chart.plot.junit.XYPlotTests, org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests, org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests, org.jfree.chart.renderer.category.junit.AreaRendererTests, org.jfree.chart.renderer.category.junit.AreaRendererTests, org.jfree.chart.renderer.category.junit.BarRenderer3DTests, org.jfree.chart.renderer.category.junit.BarRenderer3DTests, org.jfree.chart.renderer.category.junit.BarRendererTests, org.jfree.chart.renderer.category.junit.BarRendererTests, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests, org.jfree.chart.renderer.category.junit.CategoryStepRendererTests, org.jfree.chart.renderer.category.junit.CategoryStepRendererTests, org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests, org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests, org.jfree.chart.renderer.category.junit.GanttRendererTests, org.jfree.chart.renderer.category.junit.GanttRendererTests, org.jfree.chart.renderer.category.junit.GradientBarPainterTests, org.jfree.chart.renderer.category.junit.GradientBarPainterTests, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests, org.jfree.chart.renderer.category.junit.LevelRendererTests, org.jfree.chart.renderer.category.junit.LevelRendererTests, org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests, org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests, org.jfree.chart.renderer.category.junit.LineRenderer3DTests, org.jfree.chart.renderer.category.junit.LineRenderer3DTests, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests, org.jfree.chart.renderer.category.junit.RendererCategoryPackageTests, org.jfree.chart.renderer.category.junit.RendererCategoryPackageTests, org.jfree.chart.renderer.category.junit.ScatterRendererTests, org.jfree.chart.renderer.category.junit.ScatterRendererTests, org.jfree.chart.renderer.category.junit.StackedAreaRendererTests, org.jfree.chart.renderer.category.junit.StackedAreaRendererTests, org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests, org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests, org.jfree.chart.renderer.category.junit.StackedBarRendererTests, org.jfree.chart.renderer.category.junit.StackedBarRendererTests, org.jfree.chart.renderer.category.junit.StandardBarPainterTests, org.jfree.chart.renderer.category.junit.StandardBarPainterTests, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests, org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests, org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests, org.jfree.chart.renderer.junit.AbstractRendererTests, org.jfree.chart.renderer.junit.AbstractRendererTests, org.jfree.chart.renderer.junit.AreaRendererEndTypeTests, org.jfree.chart.renderer.junit.AreaRendererEndTypeTests, org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests, org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests, org.jfree.chart.renderer.junit.GrayPaintScaleTests, org.jfree.chart.renderer.junit.GrayPaintScaleTests, org.jfree.chart.renderer.junit.LookupPaintScaleTests, org.jfree.chart.renderer.junit.LookupPaintScaleTests, org.jfree.chart.renderer.junit.OutlierTests, org.jfree.chart.renderer.junit.OutlierTests, org.jfree.chart.renderer.junit.RendererPackageTests, org.jfree.chart.renderer.junit.RendererPackageTests, org.jfree.chart.renderer.junit.RendererUtilitiesTests, org.jfree.chart.renderer.junit.RendererUtilitiesTests, org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests, org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests, org.jfree.chart.renderer.xy.junit.CandlestickRendererTests, org.jfree.chart.renderer.xy.junit.CandlestickRendererTests, org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests, org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests, org.jfree.chart.renderer.xy.junit.DeviationRendererTests, org.jfree.chart.renderer.xy.junit.DeviationRendererTests, org.jfree.chart.renderer.xy.junit.GradientXYBarPainterTests, org.jfree.chart.renderer.xy.junit.GradientXYBarPainterTests, org.jfree.chart.renderer.xy.junit.HighLowRendererTests, org.jfree.chart.renderer.xy.junit.HighLowRendererTests, org.jfree.chart.renderer.xy.junit.RendererXYPackageTests, org.jfree.chart.renderer.xy.junit.RendererXYPackageTests, org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests, org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests, org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests, org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests, org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests, org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests, org.jfree.chart.renderer.xy.junit.StandardXYBarPainterTests, org.jfree.chart.renderer.xy.junit.StandardXYBarPainterTests, org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests, org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests, org.jfree.chart.renderer.xy.junit.VectorRendererTests, org.jfree.chart.renderer.xy.junit.VectorRendererTests, org.jfree.chart.renderer.xy.junit.WindItemRendererTests, org.jfree.chart.renderer.xy.junit.WindItemRendererTests, org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests, org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests, org.jfree.chart.renderer.xy.junit.XYAreaRendererTests, org.jfree.chart.renderer.xy.junit.XYAreaRendererTests, org.jfree.chart.renderer.xy.junit.XYBarRendererTests, org.jfree.chart.renderer.xy.junit.XYBarRendererTests, org.jfree.chart.renderer.xy.junit.XYBlockRendererTests, org.jfree.chart.renderer.xy.junit.XYBlockRendererTests, org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests, org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests, org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests, org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests, org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests, org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests, org.jfree.chart.renderer.xy.junit.XYDotRendererTests, org.jfree.chart.renderer.xy.junit.XYDotRendererTests, org.jfree.chart.renderer.xy.junit.XYErrorRendererTests, org.jfree.chart.renderer.xy.junit.XYErrorRendererTests, org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests, org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests, org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests, org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests, org.jfree.chart.renderer.xy.junit.XYShapeRendererTests, org.jfree.chart.renderer.xy.junit.XYShapeRendererTests, org.jfree.chart.renderer.xy.junit.XYSplineRendererTests, org.jfree.chart.renderer.xy.junit.XYSplineRendererTests, org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests, org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests, org.jfree.chart.renderer.xy.junit.XYStepRendererTests, org.jfree.chart.renderer.xy.junit.XYStepRendererTests, org.jfree.chart.renderer.xy.junit.YIntervalRendererTests, org.jfree.chart.renderer.xy.junit.YIntervalRendererTests, org.jfree.chart.title.junit.CompositeTitleTests, org.jfree.chart.title.junit.CompositeTitleTests, org.jfree.chart.title.junit.DateTitleTests, org.jfree.chart.title.junit.DateTitleTests, org.jfree.chart.title.junit.ImageTitleTests, org.jfree.chart.title.junit.ImageTitleTests, org.jfree.chart.title.junit.LegendGraphicTests, org.jfree.chart.title.junit.LegendGraphicTests, org.jfree.chart.title.junit.LegendTitleTests, org.jfree.chart.title.junit.LegendTitleTests, org.jfree.chart.title.junit.PaintScaleLegendTests, org.jfree.chart.title.junit.PaintScaleLegendTests, org.jfree.chart.title.junit.ShortTextTitleTests, org.jfree.chart.title.junit.ShortTextTitleTests, org.jfree.chart.title.junit.TextTitleTests, org.jfree.chart.title.junit.TextTitleTests, org.jfree.chart.title.junit.TitlePackageTests, org.jfree.chart.title.junit.TitlePackageTests, org.jfree.chart.title.junit.TitleTests, org.jfree.chart.title.junit.TitleTests, org.jfree.chart.urls.junit.CustomCategoryURLGeneratorTests, org.jfree.chart.urls.junit.CustomCategoryURLGeneratorTests, org.jfree.chart.urls.junit.CustomPieURLGeneratorTests, org.jfree.chart.urls.junit.CustomPieURLGeneratorTests, org.jfree.chart.urls.junit.CustomXYURLGeneratorTests, org.jfree.chart.urls.junit.CustomXYURLGeneratorTests, org.jfree.chart.urls.junit.StandardCategoryURLGeneratorTests, org.jfree.chart.urls.junit.StandardCategoryURLGeneratorTests, org.jfree.chart.urls.junit.StandardPieURLGeneratorTests, org.jfree.chart.urls.junit.StandardPieURLGeneratorTests, org.jfree.chart.urls.junit.StandardXYURLGeneratorTests, org.jfree.chart.urls.junit.StandardXYURLGeneratorTests, org.jfree.chart.urls.junit.TimeSeriesURLGeneratorTests, org.jfree.chart.urls.junit.TimeSeriesURLGeneratorTests, org.jfree.chart.urls.junit.UrlsPackageTests, org.jfree.chart.urls.junit.UrlsPackageTests, org.jfree.chart.util.junit.BooleanListTests, org.jfree.chart.util.junit.BooleanListTests, org.jfree.chart.util.junit.HashUtilitiesTests, org.jfree.chart.util.junit.HashUtilitiesTests, org.jfree.chart.util.junit.LineUtilitiesTests, org.jfree.chart.util.junit.LineUtilitiesTests, org.jfree.chart.util.junit.LogFormatTests, org.jfree.chart.util.junit.LogFormatTests, org.jfree.chart.util.junit.PaintListTests, org.jfree.chart.util.junit.PaintListTests, org.jfree.chart.util.junit.PaintMapTests, org.jfree.chart.util.junit.PaintMapTests, org.jfree.chart.util.junit.RelativeDateFormatTests, org.jfree.chart.util.junit.RelativeDateFormatTests, org.jfree.chart.util.junit.SerialUtilitiesTests, org.jfree.chart.util.junit.SerialUtilitiesTests, org.jfree.chart.util.junit.ShapeListTests, org.jfree.chart.util.junit.ShapeListTests, org.jfree.chart.util.junit.ShapeUtilitiesTests, org.jfree.chart.util.junit.ShapeUtilitiesTests, org.jfree.chart.util.junit.StrokeListTests, org.jfree.chart.util.junit.StrokeListTests, org.jfree.chart.util.junit.StrokeMapTests, org.jfree.chart.util.junit.StrokeMapTests, org.jfree.chart.util.junit.UtilPackageTests, org.jfree.chart.util.junit.UtilPackageTests, org.jfree.data.category.junit.CategoryToPieDatasetTests, org.jfree.data.category.junit.CategoryToPieDatasetTests, org.jfree.data.category.junit.DataCategoryPackageTests, org.jfree.data.category.junit.DataCategoryPackageTests, org.jfree.data.category.junit.DefaultCategoryDatasetTests, org.jfree.data.category.junit.DefaultCategoryDatasetTests, org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests, org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests, org.jfree.data.category.junit.SlidingCategoryDatasetTests, org.jfree.data.category.junit.SlidingCategoryDatasetTests, org.jfree.data.function.junit.DataFunctionPackageTests, org.jfree.data.function.junit.DataFunctionPackageTests, org.jfree.data.function.junit.LineFunction2DTests, org.jfree.data.function.junit.LineFunction2DTests, org.jfree.data.function.junit.NormalDistributionFunction2DTests, org.jfree.data.function.junit.NormalDistributionFunction2DTests, org.jfree.data.function.junit.PolynomialFunction2DTests, org.jfree.data.function.junit.PolynomialFunction2DTests, org.jfree.data.function.junit.PowerFunction2DTests, org.jfree.data.function.junit.PowerFunction2DTests, org.jfree.data.gantt.junit.DataGanttPackageTests, org.jfree.data.gantt.junit.DataGanttPackageTests, org.jfree.data.gantt.junit.SlidingGanttCategoryDatasetTests, org.jfree.data.gantt.junit.SlidingGanttCategoryDatasetTests, org.jfree.data.gantt.junit.TaskSeriesCollectionTests, org.jfree.data.gantt.junit.TaskSeriesCollectionTests, org.jfree.data.gantt.junit.TaskSeriesTests, org.jfree.data.gantt.junit.TaskSeriesTests, org.jfree.data.gantt.junit.TaskTests, org.jfree.data.gantt.junit.TaskTests, org.jfree.data.gantt.junit.XYTaskDatasetTests, org.jfree.data.gantt.junit.XYTaskDatasetTests, org.jfree.data.general.junit.DataGeneralPackageTests, org.jfree.data.general.junit.DataGeneralPackageTests, org.jfree.data.general.junit.DatasetGroupTests, org.jfree.data.general.junit.DatasetGroupTests, org.jfree.data.general.junit.DatasetUtilitiesTests, org.jfree.data.general.junit.DatasetUtilitiesTests, org.jfree.data.general.junit.DefaultHeatMapDatasetTests, org.jfree.data.general.junit.DefaultHeatMapDatasetTests, org.jfree.data.general.junit.DefaultKeyedValueDatasetTests, org.jfree.data.general.junit.DefaultKeyedValueDatasetTests, org.jfree.data.general.junit.DefaultKeyedValues2DDatasetTests, org.jfree.data.general.junit.DefaultKeyedValues2DDatasetTests, org.jfree.data.general.junit.DefaultKeyedValuesDatasetTests, org.jfree.data.general.junit.DefaultKeyedValuesDatasetTests, org.jfree.data.general.junit.DefaultPieDatasetTests, org.jfree.data.general.junit.DefaultPieDatasetTests, org.jfree.data.junit.ComparableObjectItemTests, org.jfree.data.junit.ComparableObjectItemTests, org.jfree.data.junit.ComparableObjectSeriesTests, org.jfree.data.junit.ComparableObjectSeriesTests, org.jfree.data.junit.DataPackageTests, org.jfree.data.junit.DataPackageTests, org.jfree.data.junit.DataUtilitiesTests, org.jfree.data.junit.DataUtilitiesTests, org.jfree.data.junit.DefaultKeyedValueTests, org.jfree.data.junit.DefaultKeyedValueTests, org.jfree.data.junit.DefaultKeyedValues2DTests, org.jfree.data.junit.DefaultKeyedValues2DTests, org.jfree.data.junit.DefaultKeyedValuesTests, org.jfree.data.junit.DefaultKeyedValuesTests, org.jfree.data.junit.DomainOrderTests, org.jfree.data.junit.DomainOrderTests, org.jfree.data.junit.KeyToGroupMapTests, org.jfree.data.junit.KeyToGroupMapTests, org.jfree.data.junit.KeyedObjectTests, org.jfree.data.junit.KeyedObjectTests, org.jfree.data.junit.KeyedObjects2DTests, org.jfree.data.junit.KeyedObjects2DTests, org.jfree.data.junit.KeyedObjectsTests, org.jfree.data.junit.KeyedObjectsTests, org.jfree.data.junit.RangeTests, org.jfree.data.junit.RangeTests, org.jfree.data.junit.RangeTypeTests, org.jfree.data.junit.RangeTypeTests, org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests, org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests, org.jfree.data.statistics.junit.BoxAndWhiskerItemTests, org.jfree.data.statistics.junit.BoxAndWhiskerItemTests, org.jfree.data.statistics.junit.DataStatisticsPackageTests, org.jfree.data.statistics.junit.DataStatisticsPackageTests, org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultBoxAndWhiskerXYDatasetTests, org.jfree.data.statistics.junit.DefaultBoxAndWhiskerXYDatasetTests, org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests, org.jfree.data.statistics.junit.HistogramBinTests, org.jfree.data.statistics.junit.HistogramBinTests, org.jfree.data.statistics.junit.HistogramDatasetTests, org.jfree.data.statistics.junit.HistogramDatasetTests, org.jfree.data.statistics.junit.MeanAndStandardDeviationTests, org.jfree.data.statistics.junit.MeanAndStandardDeviationTests, org.jfree.data.statistics.junit.RegressionTests, org.jfree.data.statistics.junit.RegressionTests, org.jfree.data.statistics.junit.SimpleHistogramBinTests, org.jfree.data.statistics.junit.SimpleHistogramBinTests, org.jfree.data.statistics.junit.SimpleHistogramDatasetTests, org.jfree.data.statistics.junit.SimpleHistogramDatasetTests, org.jfree.data.statistics.junit.StatisticsTests, org.jfree.data.statistics.junit.StatisticsTests, org.jfree.data.time.junit.DataTimePackageTests, org.jfree.data.time.junit.DataTimePackageTests, org.jfree.data.time.junit.DateRangeTests, org.jfree.data.time.junit.DateRangeTests, org.jfree.data.time.junit.DayTests, org.jfree.data.time.junit.DayTests, org.jfree.data.time.junit.FixedMillisecondTests, org.jfree.data.time.junit.FixedMillisecondTests, org.jfree.data.time.junit.HourTests, org.jfree.data.time.junit.HourTests, org.jfree.data.time.junit.MillisecondTests, org.jfree.data.time.junit.MillisecondTests, org.jfree.data.time.junit.MinuteTests, org.jfree.data.time.junit.MinuteTests, org.jfree.data.time.junit.MonthTests, org.jfree.data.time.junit.MonthTests, org.jfree.data.time.junit.MovingAverageTests, org.jfree.data.time.junit.MovingAverageTests, org.jfree.data.time.junit.QuarterTests, org.jfree.data.time.junit.QuarterTests, org.jfree.data.time.junit.SecondTests, org.jfree.data.time.junit.SecondTests, org.jfree.data.time.junit.SimpleTimePeriodTests, org.jfree.data.time.junit.SimpleTimePeriodTests, org.jfree.data.time.junit.TimePeriodAnchorTests, org.jfree.data.time.junit.TimePeriodAnchorTests, org.jfree.data.time.junit.TimePeriodValueTests, org.jfree.data.time.junit.TimePeriodValueTests, org.jfree.data.time.junit.TimePeriodValuesCollectionTests, org.jfree.data.time.junit.TimePeriodValuesCollectionTests, org.jfree.data.time.junit.TimePeriodValuesTests, org.jfree.data.time.junit.TimePeriodValuesTests, org.jfree.data.time.junit.TimeSeriesCollectionTests, org.jfree.data.time.junit.TimeSeriesCollectionTests, org.jfree.data.time.junit.TimeSeriesDataItemTests, org.jfree.data.time.junit.TimeSeriesDataItemTests, org.jfree.data.time.junit.TimeSeriesTests, org.jfree.data.time.junit.TimeSeriesTests, org.jfree.data.time.junit.TimeTableXYDatasetTests, org.jfree.data.time.junit.TimeTableXYDatasetTests, org.jfree.data.time.junit.WeekTests, org.jfree.data.time.junit.WeekTests, org.jfree.data.time.junit.YearTests, org.jfree.data.time.junit.YearTests, org.jfree.data.time.ohlc.junit.OHLCItemTests, org.jfree.data.time.ohlc.junit.OHLCItemTests, org.jfree.data.time.ohlc.junit.OHLCPackageTests, org.jfree.data.time.ohlc.junit.OHLCPackageTests, org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests, org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests, org.jfree.data.time.ohlc.junit.OHLCSeriesTests, org.jfree.data.time.ohlc.junit.OHLCSeriesTests, org.jfree.data.time.ohlc.junit.OHLCTests, org.jfree.data.time.ohlc.junit.OHLCTests, org.jfree.data.xy.junit.CategoryTableXYDatasetTests, org.jfree.data.xy.junit.CategoryTableXYDatasetTests, org.jfree.data.xy.junit.DataXYPackageTests, org.jfree.data.xy.junit.DataXYPackageTests, org.jfree.data.xy.junit.DefaultHighLowDatasetTests, org.jfree.data.xy.junit.DefaultHighLowDatasetTests, org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests, org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests, org.jfree.data.xy.junit.DefaultOHLCDatasetTests, org.jfree.data.xy.junit.DefaultOHLCDatasetTests, org.jfree.data.xy.junit.DefaultTableXYDatasetTests, org.jfree.data.xy.junit.DefaultTableXYDatasetTests, org.jfree.data.xy.junit.DefaultWindDatasetTests, org.jfree.data.xy.junit.DefaultWindDatasetTests, org.jfree.data.xy.junit.DefaultXYDatasetTests, org.jfree.data.xy.junit.DefaultXYDatasetTests, org.jfree.data.xy.junit.DefaultXYZDatasetTests, org.jfree.data.xy.junit.DefaultXYZDatasetTests, org.jfree.data.xy.junit.IntervalXYDelegateTests, org.jfree.data.xy.junit.IntervalXYDelegateTests, org.jfree.data.xy.junit.MatrixSeriesCollectionTests, org.jfree.data.xy.junit.MatrixSeriesCollectionTests, org.jfree.data.xy.junit.MatrixSeriesTests, org.jfree.data.xy.junit.MatrixSeriesTests, org.jfree.data.xy.junit.OHLCDataItemTests, org.jfree.data.xy.junit.OHLCDataItemTests, org.jfree.data.xy.junit.TableXYDatasetTests, org.jfree.data.xy.junit.TableXYDatasetTests, org.jfree.data.xy.junit.VectorDataItemTests, org.jfree.data.xy.junit.VectorDataItemTests, org.jfree.data.xy.junit.VectorSeriesCollectionTests, org.jfree.data.xy.junit.VectorSeriesCollectionTests, org.jfree.data.xy.junit.VectorSeriesTests, org.jfree.data.xy.junit.VectorSeriesTests, org.jfree.data.xy.junit.VectorTests, org.jfree.data.xy.junit.VectorTests, org.jfree.data.xy.junit.XIntervalDataItemTests, org.jfree.data.xy.junit.XIntervalDataItemTests, org.jfree.data.xy.junit.XIntervalSeriesCollectionTests, org.jfree.data.xy.junit.XIntervalSeriesCollectionTests, org.jfree.data.xy.junit.XIntervalSeriesTests, org.jfree.data.xy.junit.XIntervalSeriesTests, org.jfree.data.xy.junit.XYBarDatasetTests, org.jfree.data.xy.junit.XYBarDatasetTests, org.jfree.data.xy.junit.XYCoordinateTests, org.jfree.data.xy.junit.XYCoordinateTests, org.jfree.data.xy.junit.XYDataItemTests, org.jfree.data.xy.junit.XYDataItemTests, org.jfree.data.xy.junit.XYIntervalDataItemTests, org.jfree.data.xy.junit.XYIntervalDataItemTests, org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests, org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests, org.jfree.data.xy.junit.XYIntervalSeriesTests, org.jfree.data.xy.junit.XYIntervalSeriesTests, org.jfree.data.xy.junit.XYIntervalTests, org.jfree.data.xy.junit.XYIntervalTests, org.jfree.data.xy.junit.XYSeriesCollectionTests, org.jfree.data.xy.junit.XYSeriesCollectionTests, org.jfree.data.xy.junit.XYSeriesTests, org.jfree.data.xy.junit.XYSeriesTests, org.jfree.data.xy.junit.YIntervalDataItemTests, org.jfree.data.xy.junit.YIntervalDataItemTests, org.jfree.data.xy.junit.YIntervalSeriesCollectionTests, org.jfree.data.xy.junit.YIntervalSeriesCollectionTests, org.jfree.data.xy.junit.YIntervalSeriesTests, org.jfree.data.xy.junit.YIntervalSeriesTests, org.jfree.data.xy.junit.YIntervalTests, org.jfree.data.xy.junit.YIntervalTests, org.jfree.data.xy.junit.YWithXIntervalTests, org.jfree.data.xy.junit.YWithXIntervalTests], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Chart/4/seed_260/, json=true}
[4] INFO NoPol - Available processors (cores): 36
[7] INFO NoPol - Free memory: 1 GB
[8] INFO NoPol - Maximum memory: 7 GB
[8] INFO NoPol - Total memory available to JVM: 1 GB
[9] INFO NoPol - Java version: 1.8.0_45
[10] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[10] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659858094091
GPR[ESUP]-1659858094091
GPR[SFL]-1659858094091
GPR[EFL]-1659858105785
GPR[SFP]-1659858105785
GPR[SSUN]-1659858105876
-1690918013
GPR[SPVATF]-1659858106326
GPR[EPVATF]-1659858106860
GPR[SPS]-1659858106860
[18257] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4479.
GPR[EPS]-1659858108183
GPR[ESUN]-1659858108183
GPR[SSUN]-1659858108183
1355738515
GPR[ESUN]-1659858108327
GPR[SSUN]-1659858108328
-1771352681
GPR[SPVATF]-1659858108463
GPR[EPVATF]-1659858108611
GPR[SPS]-1659858108611
[18932] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class XYSeriesCollection extends org.jfree.data.xy.AbstractIntervalXYDataset implements org.jfree.data.xy.IntervalXYDataset , org.jfree.data.DomainInfo , org.jfree.data.RangeInfo , org.jfree.data.xy.XYDatasetSelectionState , org.jfree.data.xy.SelectableXYDataset , org.jfree.chart.util.PublicCloneable , java.io.Serializable {
    private static final long serialVersionUID = -7590013825931496766L;

    private java.util.List data;

    private org.jfree.data.xy.IntervalXYDelegate intervalDelegate;

    public XYSeriesCollection() {
        this(null);
    }

    public XYSeriesCollection(org.jfree.data.xy.XYSeries series) {
        this.data = new java.util.ArrayList();
        this.intervalDelegate = new org.jfree.data.xy.IntervalXYDelegate(this, false);
        addChangeListener(this.intervalDelegate);
        if (series != null) {
            this.data.add(series);
            series.addChangeListener(this);
        }
        setSelectionState(this);
    }

    public org.jfree.data.DomainOrder getDomainOrder() {
        int seriesCount = getSeriesCount();
        for (int i = 0; i < seriesCount; i++) {
            org.jfree.data.xy.XYSeries s = getSeries(i);
            if (!s.getAutoSort()) {
                return org.jfree.data.DomainOrder.NONE;
            }
        }
        return org.jfree.data.DomainOrder.ASCENDING;
    }

    public void addSeries(org.jfree.data.xy.XYSeries series) {
        if (series == null) {
            throw new java.lang.IllegalArgumentException("Null 'series' argument.");
        }
        this.data.add(series);
        series.addChangeListener(this);
        fireDatasetChanged();
    }

    public void removeSeries(int series) {
        if ((series < 0) || (series >= getSeriesCount())) {
            throw new java.lang.IllegalArgumentException("Series index out of bounds.");
        }
        org.jfree.data.xy.XYSeries ts = ((org.jfree.data.xy.XYSeries) (this.data.get(series)));
        ts.removeChangeListener(this);
        this.data.remove(series);
        fireDatasetChanged();
    }

    public void removeSeries(org.jfree.data.xy.XYSeries series) {
        if (series == null) {
            throw new java.lang.IllegalArgumentException("Null 'series' argument.");
        }
        if (this.data.contains(series)) {
            series.removeChangeListener(this);
            this.data.remove(series);
            fireDatasetChanged();
        }
    }

    public void removeAllSeries() {
        for (int i = 0; i < this.data.size(); i++) {
            org.jfree.data.xy.XYSeries series = ((org.jfree.data.xy.XYSeries) (this.data.get(i)));
            series.removeChangeListener(this);
        }
        this.data.clear();
        fireDatasetChanged();
    }

    public int getSeriesCount() {
        return this.data.size();
    }

    public java.util.List getSeries() {
        return java.util.Collections.unmodifiableList(this.data);
    }

    public int indexOf(org.jfree.data.xy.XYSeries series) {
        if (series == null) {
            throw new java.lang.IllegalArgumentException("Null 'series' argument.");
        }
        return this.data.indexOf(series);
    }

    public org.jfree.data.xy.XYSeries getSeries(int series) {
        if ((series < 0) || (series >= getSeriesCount())) {
            throw new java.lang.IllegalArgumentException("Series index out of bounds");
        }
        return ((org.jfree.data.xy.XYSeries) (this.data.get(series)));
    }

    public org.jfree.data.xy.XYSeries getSeries(java.lang.Comparable key) {
        if (key == null) {
            throw new java.lang.IllegalArgumentException("Null 'key' argument.");
        }
        java.util.Iterator iterator = this.data.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.xy.XYSeries series = ((org.jfree.data.xy.XYSeries) (iterator.next()));
            if (key.equals(series.getKey())) {
                return series;
            }
        } 
        throw new org.jfree.data.UnknownKeyException("Key not found: " + key);
    }

    public java.lang.Comparable getSeriesKey(int series) {
        return getSeries(series).getKey();
    }

    public int getItemCount(int series) {
        return getSeries(series).getItemCount();
    }

    public java.lang.Number getX(int series, int item) {
        org.jfree.data.xy.XYSeries s = ((org.jfree.data.xy.XYSeries) (this.data.get(series)));
        return s.getX(item);
    }

    public java.lang.Number getStartX(int series, int item) {
        return this.intervalDelegate.getStartX(series, item);
    }

    public java.lang.Number getEndX(int series, int item) {
        return this.intervalDelegate.getEndX(series, item);
    }

    public java.lang.Number getY(int series, int index) {
        org.jfree.data.xy.XYSeries s = ((org.jfree.data.xy.XYSeries) (this.data.get(series)));
        return s.getY(index);
    }

    public java.lang.Number getStartY(int series, int item) {
        return getY(series, item);
    }

    public java.lang.Number getEndY(int series, int item) {
        return getY(series, item);
    }

    public boolean isSelected(int series, int item) {
        org.jfree.data.xy.XYSeries s = getSeries(series);
        org.jfree.data.xy.XYDataItem i = s.getRawDataItem(item);
        return i.isSelected();
    }

    public void setSelected(int series, int item, boolean selected) {
        setSelected(series, item, selected, true);
    }

    public void setSelected(int series, int item, boolean selected, boolean notify) {
        org.jfree.data.xy.XYSeries s = getSeries(series);
        org.jfree.data.xy.XYDataItem i = s.getRawDataItem(item);
        i.setSelected(selected);
        if (notify) {
            fireDatasetChanged();
        }
    }

    public void clearSelection() {
        int seriesCount = getSeriesCount();
        for (int s = 0; s < seriesCount; s++) {
            int itemCount = getItemCount(s);
            for (int i = 0; i < itemCount; i++) {
                setSelected(s, i, false, false);
            }
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.xy.XYSeriesCollection)) {
            return false;
        }
        org.jfree.data.xy.XYSeriesCollection that = ((org.jfree.data.xy.XYSeriesCollection) (obj));
        if (!this.intervalDelegate.equals(that.intervalDelegate)) {
            return false;
        }
        return org.jfree.chart.util.ObjectUtilities.equal(this.data, that.data);
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.data.xy.XYSeriesCollection clone = ((org.jfree.data.xy.XYSeriesCollection) (super.clone()));
        clone.data = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.data)));
        clone.intervalDelegate = ((org.jfree.data.xy.IntervalXYDelegate) (this.intervalDelegate.clone()));
        return clone;
    }

    public int hashCode() {
        int hash = 5;
        hash = org.jfree.chart.util.HashUtilities.hashCode(hash, this.intervalDelegate);
        hash = org.jfree.chart.util.HashUtilities.hashCode(hash, this.data);
        return hash;
    }

    public double getDomainLowerBound(boolean includeInterval) {
        if (includeInterval) {
            return this.intervalDelegate.getDomainLowerBound(includeInterval);
        } else {
            double result = java.lang.Double.NaN;
            int seriesCount = getSeriesCount();
            for (int s = 0; s < seriesCount; s++) {
                org.jfree.data.xy.XYSeries series = getSeries(s);
                double lowX = series.getMinX();
                if (java.lang.Double.isNaN(result)) {
                    result = lowX;
                } else if (!java.lang.Double.isNaN(lowX)) {
                    result = java.lang.Math.min(result, lowX);
                }
            }
            return result;
        }
    }

    public double getDomainUpperBound(boolean includeInterval) {
        if (includeInterval) {
            return this.intervalDelegate.getDomainUpperBound(includeInterval);
        } else {
            double result = java.lang.Double.NaN;
            int seriesCount = getSeriesCount();
            for (int s = 0; s < seriesCount; s++) {
                org.jfree.data.xy.XYSeries series = getSeries(s);
                double hiX = series.getMaxX();
                if (java.lang.Double.isNaN(result)) {
                    result = hiX;
                } else if (!java.lang.Double.isNaN(hiX)) {
                    result = java.lang.Math.max(result, hiX);
                }
            }
            return result;
        }
    }

    public org.jfree.data.Range getDomainBounds(boolean includeInterval) {
        if (includeInterval) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(1).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.data.xy.XYSeriesCollection.this.data",org.jfree.data.xy.XYSeriesCollection.this.data);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("includeInterval",includeInterval);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.data.xy.XYSeriesCollection.this.intervalDelegate",org.jfree.data.xy.XYSeriesCollection.this.intervalDelegate);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectionEnds();
            }
            if (runtimeAngelicValue)
                return this.intervalDelegate.getDomainBounds(includeInterval);

        } else {
            double lower = java.lang.Double.POSITIVE_INFINITY;
            double upper = java.lang.Double.NEGATIVE_INFINITY;
            int seriesCount = getSeriesCount();
            for (int s = 0; s < seriesCount; s++) {
                org.jfree.data.xy.XYSeries series = getSeries(s);
                double minX = series.getMinX();
                if (!java.lang.Double.isNaN(minX)) {
                    lower = java.lang.Math.min(lower, minX);
                }
                double maxX = series.getMaxX();
                if (!java.lang.Double.isNaN(maxX)) {
                    upper = java.lang.Math.max(upper, maxX);
                }
            }
            if (lower > upper) {
                return null;
            } else {
                return new org.jfree.data.Range(lower, upper);
            }
        }
    }

    public double getIntervalWidth() {
        return this.intervalDelegate.getIntervalWidth();
    }

    public void setIntervalWidth(double width) {
        if (width < 0.0) {
            throw new java.lang.IllegalArgumentException("Negative 'width' argument.");
        }
        this.intervalDelegate.setFixedIntervalWidth(width);
        fireDatasetChanged();
    }

    public double getIntervalPositionFactor() {
        return this.intervalDelegate.getIntervalPositionFactor();
    }

    public void setIntervalPositionFactor(double factor) {
        this.intervalDelegate.setIntervalPositionFactor(factor);
        fireDatasetChanged();
    }

    public boolean isAutoWidth() {
        return this.intervalDelegate.isAutoWidth();
    }

    public void setAutoWidth(boolean b) {
        this.intervalDelegate.setAutoWidth(b);
        fireDatasetChanged();
    }

    public org.jfree.data.Range getRangeBounds(boolean includeInterval) {
        double lower = java.lang.Double.POSITIVE_INFINITY;
        double upper = java.lang.Double.NEGATIVE_INFINITY;
        int seriesCount = getSeriesCount();
        for (int s = 0; s < seriesCount; s++) {
            org.jfree.data.xy.XYSeries series = getSeries(s);
            double minY = series.getMinY();
            if (!java.lang.Double.isNaN(minY)) {
                lower = java.lang.Math.min(lower, minY);
            }
            double maxY = series.getMaxY();
            if (!java.lang.Double.isNaN(maxY)) {
                upper = java.lang.Math.max(upper, maxY);
            }
        }
        if (lower > upper) {
            return null;
        } else {
            return new org.jfree.data.Range(lower, upper);
        }
    }

    public double getRangeLowerBound(boolean includeInterval) {
        double result = java.lang.Double.NaN;
        int seriesCount = getSeriesCount();
        for (int s = 0; s < seriesCount; s++) {
            org.jfree.data.xy.XYSeries series = getSeries(s);
            double lowY = series.getMinY();
            if (java.lang.Double.isNaN(result)) {
                result = lowY;
            } else if (!java.lang.Double.isNaN(lowY)) {
                result = java.lang.Math.min(result, lowY);
            }
        }
        return result;
    }

    public double getRangeUpperBound(boolean includeInterval) {
        double result = java.lang.Double.NaN;
        int seriesCount = getSeriesCount();
        for (int s = 0; s < seriesCount; s++) {
            org.jfree.data.xy.XYSeries series = getSeries(s);
            double hiY = series.getMaxY();
            if (java.lang.Double.isNaN(result)) {
                result = hiY;
            } else if (!java.lang.Double.isNaN(hiY)) {
                result = java.lang.Math.max(result, hiY);
            }
        }
        return result;
    }
}
[18932] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858108858
GPR[SSUN]-1659858108859
-1771352681
GPR[SPVATF]-1659858108995
GPR[EPVATF]-1659858109114
GPR[SPS]-1659858109114
[19392] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class XYSeriesCollection extends org.jfree.data.xy.AbstractIntervalXYDataset implements org.jfree.data.xy.IntervalXYDataset , org.jfree.data.DomainInfo , org.jfree.data.RangeInfo , org.jfree.data.xy.XYDatasetSelectionState , org.jfree.data.xy.SelectableXYDataset , org.jfree.chart.util.PublicCloneable , java.io.Serializable {
    private static final long serialVersionUID = -7590013825931496766L;

    private java.util.List data;

    private org.jfree.data.xy.IntervalXYDelegate intervalDelegate;

    public XYSeriesCollection() {
        this(null);
    }

    public XYSeriesCollection(org.jfree.data.xy.XYSeries series) {
        this.data = new java.util.ArrayList();
        this.intervalDelegate = new org.jfree.data.xy.IntervalXYDelegate(this, false);
        addChangeListener(this.intervalDelegate);
        if (series != null) {
            this.data.add(series);
            series.addChangeListener(this);
        }
        setSelectionState(this);
    }

    public org.jfree.data.DomainOrder getDomainOrder() {
        int seriesCount = getSeriesCount();
        for (int i = 0; i < seriesCount; i++) {
            org.jfree.data.xy.XYSeries s = getSeries(i);
            if (!s.getAutoSort()) {
                return org.jfree.data.DomainOrder.NONE;
            }
        }
        return org.jfree.data.DomainOrder.ASCENDING;
    }

    public void addSeries(org.jfree.data.xy.XYSeries series) {
        if (series == null) {
            throw new java.lang.IllegalArgumentException("Null 'series' argument.");
        }
        this.data.add(series);
        series.addChangeListener(this);
        fireDatasetChanged();
    }

    public void removeSeries(int series) {
        if ((series < 0) || (series >= getSeriesCount())) {
            throw new java.lang.IllegalArgumentException("Series index out of bounds.");
        }
        org.jfree.data.xy.XYSeries ts = ((org.jfree.data.xy.XYSeries) (this.data.get(series)));
        ts.removeChangeListener(this);
        this.data.remove(series);
        fireDatasetChanged();
    }

    public void removeSeries(org.jfree.data.xy.XYSeries series) {
        if (series == null) {
            throw new java.lang.IllegalArgumentException("Null 'series' argument.");
        }
        if (this.data.contains(series)) {
            series.removeChangeListener(this);
            this.data.remove(series);
            fireDatasetChanged();
        }
    }

    public void removeAllSeries() {
        for (int i = 0; i < this.data.size(); i++) {
            org.jfree.data.xy.XYSeries series = ((org.jfree.data.xy.XYSeries) (this.data.get(i)));
            series.removeChangeListener(this);
        }
        this.data.clear();
        fireDatasetChanged();
    }

    public int getSeriesCount() {
        return this.data.size();
    }

    public java.util.List getSeries() {
        return java.util.Collections.unmodifiableList(this.data);
    }

    public int indexOf(org.jfree.data.xy.XYSeries series) {
        if (series == null) {
            throw new java.lang.IllegalArgumentException("Null 'series' argument.");
        }
        return this.data.indexOf(series);
    }

    public org.jfree.data.xy.XYSeries getSeries(int series) {
        if ((series < 0) || (series >= getSeriesCount())) {
            throw new java.lang.IllegalArgumentException("Series index out of bounds");
        }
        return ((org.jfree.data.xy.XYSeries) (this.data.get(series)));
    }

    public org.jfree.data.xy.XYSeries getSeries(java.lang.Comparable key) {
        if (key == null) {
            throw new java.lang.IllegalArgumentException("Null 'key' argument.");
        }
        java.util.Iterator iterator = this.data.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.xy.XYSeries series = ((org.jfree.data.xy.XYSeries) (iterator.next()));
            if (key.equals(series.getKey())) {
                return series;
            }
        } 
        throw new org.jfree.data.UnknownKeyException("Key not found: " + key);
    }

    public java.lang.Comparable getSeriesKey(int series) {
        return getSeries(series).getKey();
    }

    public int getItemCount(int series) {
        return getSeries(series).getItemCount();
    }

    public java.lang.Number getX(int series, int item) {
        org.jfree.data.xy.XYSeries s = ((org.jfree.data.xy.XYSeries) (this.data.get(series)));
        return s.getX(item);
    }

    public java.lang.Number getStartX(int series, int item) {
        return this.intervalDelegate.getStartX(series, item);
    }

    public java.lang.Number getEndX(int series, int item) {
        return this.intervalDelegate.getEndX(series, item);
    }

    public java.lang.Number getY(int series, int index) {
        org.jfree.data.xy.XYSeries s = ((org.jfree.data.xy.XYSeries) (this.data.get(series)));
        return s.getY(index);
    }

    public java.lang.Number getStartY(int series, int item) {
        return getY(series, item);
    }

    public java.lang.Number getEndY(int series, int item) {
        return getY(series, item);
    }

    public boolean isSelected(int series, int item) {
        org.jfree.data.xy.XYSeries s = getSeries(series);
        org.jfree.data.xy.XYDataItem i = s.getRawDataItem(item);
        return i.isSelected();
    }

    public void setSelected(int series, int item, boolean selected) {
        setSelected(series, item, selected, true);
    }

    public void setSelected(int series, int item, boolean selected, boolean notify) {
        org.jfree.data.xy.XYSeries s = getSeries(series);
        org.jfree.data.xy.XYDataItem i = s.getRawDataItem(item);
        i.setSelected(selected);
        if (notify) {
            fireDatasetChanged();
        }
    }

    public void clearSelection() {
        int seriesCount = getSeriesCount();
        for (int s = 0; s < seriesCount; s++) {
            int itemCount = getItemCount(s);
            for (int i = 0; i < itemCount; i++) {
                setSelected(s, i, false, false);
            }
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.xy.XYSeriesCollection)) {
            return false;
        }
        org.jfree.data.xy.XYSeriesCollection that = ((org.jfree.data.xy.XYSeriesCollection) (obj));
        if (!this.intervalDelegate.equals(that.intervalDelegate)) {
            return false;
        }
        return org.jfree.chart.util.ObjectUtilities.equal(this.data, that.data);
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.data.xy.XYSeriesCollection clone = ((org.jfree.data.xy.XYSeriesCollection) (super.clone()));
        clone.data = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.data)));
        clone.intervalDelegate = ((org.jfree.data.xy.IntervalXYDelegate) (this.intervalDelegate.clone()));
        return clone;
    }

    public int hashCode() {
        int hash = 5;
        hash = org.jfree.chart.util.HashUtilities.hashCode(hash, this.intervalDelegate);
        hash = org.jfree.chart.util.HashUtilities.hashCode(hash, this.data);
        return hash;
    }

    public double getDomainLowerBound(boolean includeInterval) {
        if (includeInterval) {
            return this.intervalDelegate.getDomainLowerBound(includeInterval);
        } else {
            double result = java.lang.Double.NaN;
            int seriesCount = getSeriesCount();
            for (int s = 0; s < seriesCount; s++) {
                org.jfree.data.xy.XYSeries series = getSeries(s);
                double lowX = series.getMinX();
                if (java.lang.Double.isNaN(result)) {
                    result = lowX;
                } else if (!java.lang.Double.isNaN(lowX)) {
                    result = java.lang.Math.min(result, lowX);
                }
            }
            return result;
        }
    }

    public double getDomainUpperBound(boolean includeInterval) {
        if (includeInterval) {
            return this.intervalDelegate.getDomainUpperBound(includeInterval);
        } else {
            double result = java.lang.Double.NaN;
            int seriesCount = getSeriesCount();
            for (int s = 0; s < seriesCount; s++) {
                org.jfree.data.xy.XYSeries series = getSeries(s);
                double hiX = series.getMaxX();
                if (java.lang.Double.isNaN(result)) {
                    result = hiX;
                } else if (!java.lang.Double.isNaN(hiX)) {
                    result = java.lang.Math.max(result, hiX);
                }
            }
            return result;
        }
    }

    public org.jfree.data.Range getDomainBounds(boolean includeInterval) {
        if (includeInterval) {
            return this.intervalDelegate.getDomainBounds(includeInterval);
        } else {
            double lower = java.lang.Double.POSITIVE_INFINITY;
            double upper = java.lang.Double.NEGATIVE_INFINITY;
            int seriesCount = getSeriesCount();
            for (int s = 0; s < seriesCount; s++) {
                org.jfree.data.xy.XYSeries series = getSeries(s);
                double minX = series.getMinX();
                if (!java.lang.Double.isNaN(minX)) {
                    lower = java.lang.Math.min(lower, minX);
                }
                double maxX = series.getMaxX();
                if (!java.lang.Double.isNaN(maxX)) {
                    upper = java.lang.Math.max(upper, maxX);
                }
            }
            if (lower > upper) {
                return null;
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(2).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.jfree.data.xy.XYSeriesCollection.this.data",org.jfree.data.xy.XYSeriesCollection.this.data);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("seriesCount",seriesCount);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("includeInterval",includeInterval);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("lower",lower);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("upper",upper);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("org.jfree.data.xy.XYSeriesCollection.this.intervalDelegate",org.jfree.data.xy.XYSeriesCollection.this.intervalDelegate);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return new org.jfree.data.Range(lower, upper);

            }
        }
    }

    public double getIntervalWidth() {
        return this.intervalDelegate.getIntervalWidth();
    }

    public void setIntervalWidth(double width) {
        if (width < 0.0) {
            throw new java.lang.IllegalArgumentException("Negative 'width' argument.");
        }
        this.intervalDelegate.setFixedIntervalWidth(width);
        fireDatasetChanged();
    }

    public double getIntervalPositionFactor() {
        return this.intervalDelegate.getIntervalPositionFactor();
    }

    public void setIntervalPositionFactor(double factor) {
        this.intervalDelegate.setIntervalPositionFactor(factor);
        fireDatasetChanged();
    }

    public boolean isAutoWidth() {
        return this.intervalDelegate.isAutoWidth();
    }

    public void setAutoWidth(boolean b) {
        this.intervalDelegate.setAutoWidth(b);
        fireDatasetChanged();
    }

    public org.jfree.data.Range getRangeBounds(boolean includeInterval) {
        double lower = java.lang.Double.POSITIVE_INFINITY;
        double upper = java.lang.Double.NEGATIVE_INFINITY;
        int seriesCount = getSeriesCount();
        for (int s = 0; s < seriesCount; s++) {
            org.jfree.data.xy.XYSeries series = getSeries(s);
            double minY = series.getMinY();
            if (!java.lang.Double.isNaN(minY)) {
                lower = java.lang.Math.min(lower, minY);
            }
            double maxY = series.getMaxY();
            if (!java.lang.Double.isNaN(maxY)) {
                upper = java.lang.Math.max(upper, maxY);
            }
        }
        if (lower > upper) {
            return null;
        } else {
            return new org.jfree.data.Range(lower, upper);
        }
    }

    public double getRangeLowerBound(boolean includeInterval) {
        double result = java.lang.Double.NaN;
        int seriesCount = getSeriesCount();
        for (int s = 0; s < seriesCount; s++) {
            org.jfree.data.xy.XYSeries series = getSeries(s);
            double lowY = series.getMinY();
            if (java.lang.Double.isNaN(result)) {
                result = lowY;
            } else if (!java.lang.Double.isNaN(lowY)) {
                result = java.lang.Math.min(result, lowY);
            }
        }
        return result;
    }

    public double getRangeUpperBound(boolean includeInterval) {
        double result = java.lang.Double.NaN;
        int seriesCount = getSeriesCount();
        for (int s = 0; s < seriesCount; s++) {
            org.jfree.data.xy.XYSeries series = getSeries(s);
            double hiY = series.getMaxY();
            if (java.lang.Double.isNaN(result)) {
                result = hiY;
            } else if (!java.lang.Double.isNaN(hiY)) {
                result = java.lang.Math.max(result, hiY);
            }
        }
        return result;
    }
}
[19392] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858109318
GPR[SSUN]-1659858109318
-1771352681
GPR[SPVATF]-1659858109453
GPR[EPVATF]-1659858109572
GPR[SPS]-1659858109572
[19851] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class XYSeriesCollection extends org.jfree.data.xy.AbstractIntervalXYDataset implements org.jfree.data.xy.IntervalXYDataset , org.jfree.data.DomainInfo , org.jfree.data.RangeInfo , org.jfree.data.xy.XYDatasetSelectionState , org.jfree.data.xy.SelectableXYDataset , org.jfree.chart.util.PublicCloneable , java.io.Serializable {
    private static final long serialVersionUID = -7590013825931496766L;

    private java.util.List data;

    private org.jfree.data.xy.IntervalXYDelegate intervalDelegate;

    public XYSeriesCollection() {
        this(null);
    }

    public XYSeriesCollection(org.jfree.data.xy.XYSeries series) {
        this.data = new java.util.ArrayList();
        this.intervalDelegate = new org.jfree.data.xy.IntervalXYDelegate(this, false);
        addChangeListener(this.intervalDelegate);
        if (series != null) {
            this.data.add(series);
            series.addChangeListener(this);
        }
        setSelectionState(this);
    }

    public org.jfree.data.DomainOrder getDomainOrder() {
        int seriesCount = getSeriesCount();
        for (int i = 0; i < seriesCount; i++) {
            org.jfree.data.xy.XYSeries s = getSeries(i);
            if (!s.getAutoSort()) {
                return org.jfree.data.DomainOrder.NONE;
            }
        }
        return org.jfree.data.DomainOrder.ASCENDING;
    }

    public void addSeries(org.jfree.data.xy.XYSeries series) {
        if (series == null) {
            throw new java.lang.IllegalArgumentException("Null 'series' argument.");
        }
        this.data.add(series);
        series.addChangeListener(this);
        fireDatasetChanged();
    }

    public void removeSeries(int series) {
        if ((series < 0) || (series >= getSeriesCount())) {
            throw new java.lang.IllegalArgumentException("Series index out of bounds.");
        }
        org.jfree.data.xy.XYSeries ts = ((org.jfree.data.xy.XYSeries) (this.data.get(series)));
        ts.removeChangeListener(this);
        this.data.remove(series);
        fireDatasetChanged();
    }

    public void removeSeries(org.jfree.data.xy.XYSeries series) {
        if (series == null) {
            throw new java.lang.IllegalArgumentException("Null 'series' argument.");
        }
        if (this.data.contains(series)) {
            series.removeChangeListener(this);
            this.data.remove(series);
            fireDatasetChanged();
        }
    }

    public void removeAllSeries() {
        for (int i = 0; i < this.data.size(); i++) {
            org.jfree.data.xy.XYSeries series = ((org.jfree.data.xy.XYSeries) (this.data.get(i)));
            series.removeChangeListener(this);
        }
        this.data.clear();
        fireDatasetChanged();
    }

    public int getSeriesCount() {
        return this.data.size();
    }

    public java.util.List getSeries() {
        return java.util.Collections.unmodifiableList(this.data);
    }

    public int indexOf(org.jfree.data.xy.XYSeries series) {
        if (series == null) {
            throw new java.lang.IllegalArgumentException("Null 'series' argument.");
        }
        return this.data.indexOf(series);
    }

    public org.jfree.data.xy.XYSeries getSeries(int series) {
        if ((series < 0) || (series >= getSeriesCount())) {
            throw new java.lang.IllegalArgumentException("Series index out of bounds");
        }
        return ((org.jfree.data.xy.XYSeries) (this.data.get(series)));
    }

    public org.jfree.data.xy.XYSeries getSeries(java.lang.Comparable key) {
        if (key == null) {
            throw new java.lang.IllegalArgumentException("Null 'key' argument.");
        }
        java.util.Iterator iterator = this.data.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.xy.XYSeries series = ((org.jfree.data.xy.XYSeries) (iterator.next()));
            if (key.equals(series.getKey())) {
                return series;
            }
        } 
        throw new org.jfree.data.UnknownKeyException("Key not found: " + key);
    }

    public java.lang.Comparable getSeriesKey(int series) {
        return getSeries(series).getKey();
    }

    public int getItemCount(int series) {
        return getSeries(series).getItemCount();
    }

    public java.lang.Number getX(int series, int item) {
        org.jfree.data.xy.XYSeries s = ((org.jfree.data.xy.XYSeries) (this.data.get(series)));
        return s.getX(item);
    }

    public java.lang.Number getStartX(int series, int item) {
        return this.intervalDelegate.getStartX(series, item);
    }

    public java.lang.Number getEndX(int series, int item) {
        return this.intervalDelegate.getEndX(series, item);
    }

    public java.lang.Number getY(int series, int index) {
        org.jfree.data.xy.XYSeries s = ((org.jfree.data.xy.XYSeries) (this.data.get(series)));
        return s.getY(index);
    }

    public java.lang.Number getStartY(int series, int item) {
        return getY(series, item);
    }

    public java.lang.Number getEndY(int series, int item) {
        return getY(series, item);
    }

    public boolean isSelected(int series, int item) {
        org.jfree.data.xy.XYSeries s = getSeries(series);
        org.jfree.data.xy.XYDataItem i = s.getRawDataItem(item);
        return i.isSelected();
    }

    public void setSelected(int series, int item, boolean selected) {
        setSelected(series, item, selected, true);
    }

    public void setSelected(int series, int item, boolean selected, boolean notify) {
        org.jfree.data.xy.XYSeries s = getSeries(series);
        org.jfree.data.xy.XYDataItem i = s.getRawDataItem(item);
        i.setSelected(selected);
        if (notify) {
            fireDatasetChanged();
        }
    }

    public void clearSelection() {
        int seriesCount = getSeriesCount();
        for (int s = 0; s < seriesCount; s++) {
            int itemCount = getItemCount(s);
            for (int i = 0; i < itemCount; i++) {
                setSelected(s, i, false, false);
            }
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.xy.XYSeriesCollection)) {
            return false;
        }
        org.jfree.data.xy.XYSeriesCollection that = ((org.jfree.data.xy.XYSeriesCollection) (obj));
        if (!this.intervalDelegate.equals(that.intervalDelegate)) {
            return false;
        }
        return org.jfree.chart.util.ObjectUtilities.equal(this.data, that.data);
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.data.xy.XYSeriesCollection clone = ((org.jfree.data.xy.XYSeriesCollection) (super.clone()));
        clone.data = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.data)));
        clone.intervalDelegate = ((org.jfree.data.xy.IntervalXYDelegate) (this.intervalDelegate.clone()));
        return clone;
    }

    public int hashCode() {
        int hash = 5;
        hash = org.jfree.chart.util.HashUtilities.hashCode(hash, this.intervalDelegate);
        hash = org.jfree.chart.util.HashUtilities.hashCode(hash, this.data);
        return hash;
    }

    public double getDomainLowerBound(boolean includeInterval) {
        if (includeInterval) {
            return this.intervalDelegate.getDomainLowerBound(includeInterval);
        } else {
            double result = java.lang.Double.NaN;
            int seriesCount = getSeriesCount();
            for (int s = 0; s < seriesCount; s++) {
                org.jfree.data.xy.XYSeries series = getSeries(s);
                double lowX = series.getMinX();
                if (java.lang.Double.isNaN(result)) {
                    result = lowX;
                } else if (!java.lang.Double.isNaN(lowX)) {
                    result = java.lang.Math.min(result, lowX);
                }
            }
            return result;
        }
    }

    public double getDomainUpperBound(boolean includeInterval) {
        if (includeInterval) {
            return this.intervalDelegate.getDomainUpperBound(includeInterval);
        } else {
            double result = java.lang.Double.NaN;
            int seriesCount = getSeriesCount();
            for (int s = 0; s < seriesCount; s++) {
                org.jfree.data.xy.XYSeries series = getSeries(s);
                double hiX = series.getMaxX();
                if (java.lang.Double.isNaN(result)) {
                    result = hiX;
                } else if (!java.lang.Double.isNaN(hiX)) {
                    result = java.lang.Math.max(result, hiX);
                }
            }
            return result;
        }
    }

    public org.jfree.data.Range getDomainBounds(boolean includeInterval) {
        if (includeInterval) {
            return this.intervalDelegate.getDomainBounds(includeInterval);
        } else {
            double lower = java.lang.Double.POSITIVE_INFINITY;
            double upper = java.lang.Double.NEGATIVE_INFINITY;
            int seriesCount = getSeriesCount();
            for (int s = 0; s < seriesCount; s++) {
                org.jfree.data.xy.XYSeries series = getSeries(s);
                double minX = series.getMinX();
                if (!java.lang.Double.isNaN(minX)) {
                    lower = java.lang.Math.min(lower, minX);
                }
                double maxX = series.getMaxX();
                if (!java.lang.Double.isNaN(maxX)) {
                    upper = java.lang.Math.max(upper, maxX);
                }
            }
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(3).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("includeInterval",includeInterval);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("lower > upper",lower > upper);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("lower",lower);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("upper",upper);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.data.xy.XYSeriesCollection.this.intervalDelegate",org.jfree.data.xy.XYSeriesCollection.this.intervalDelegate);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.data.xy.XYSeriesCollection.this.data",org.jfree.data.xy.XYSeriesCollection.this.data);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("seriesCount",seriesCount);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectionEnds();
            }
            if (runtimeAngelicValue) if (lower > upper) {
                return null;
            } else {
                return new org.jfree.data.Range(lower, upper);
            }
        }
    }

    public double getIntervalWidth() {
        return this.intervalDelegate.getIntervalWidth();
    }

    public void setIntervalWidth(double width) {
        if (width < 0.0) {
            throw new java.lang.IllegalArgumentException("Negative 'width' argument.");
        }
        this.intervalDelegate.setFixedIntervalWidth(width);
        fireDatasetChanged();
    }

    public double getIntervalPositionFactor() {
        return this.intervalDelegate.getIntervalPositionFactor();
    }

    public void setIntervalPositionFactor(double factor) {
        this.intervalDelegate.setIntervalPositionFactor(factor);
        fireDatasetChanged();
    }

    public boolean isAutoWidth() {
        return this.intervalDelegate.isAutoWidth();
    }

    public void setAutoWidth(boolean b) {
        this.intervalDelegate.setAutoWidth(b);
        fireDatasetChanged();
    }

    public org.jfree.data.Range getRangeBounds(boolean includeInterval) {
        double lower = java.lang.Double.POSITIVE_INFINITY;
        double upper = java.lang.Double.NEGATIVE_INFINITY;
        int seriesCount = getSeriesCount();
        for (int s = 0; s < seriesCount; s++) {
            org.jfree.data.xy.XYSeries series = getSeries(s);
            double minY = series.getMinY();
            if (!java.lang.Double.isNaN(minY)) {
                lower = java.lang.Math.min(lower, minY);
            }
            double maxY = series.getMaxY();
            if (!java.lang.Double.isNaN(maxY)) {
                upper = java.lang.Math.max(upper, maxY);
            }
        }
        if (lower > upper) {
            return null;
        } else {
            return new org.jfree.data.Range(lower, upper);
        }
    }

    public double getRangeLowerBound(boolean includeInterval) {
        double result = java.lang.Double.NaN;
        int seriesCount = getSeriesCount();
        for (int s = 0; s < seriesCount; s++) {
            org.jfree.data.xy.XYSeries series = getSeries(s);
            double lowY = series.getMinY();
            if (java.lang.Double.isNaN(result)) {
                result = lowY;
            } else if (!java.lang.Double.isNaN(lowY)) {
                result = java.lang.Math.min(result, lowY);
            }
        }
        return result;
    }

    public double getRangeUpperBound(boolean includeInterval) {
        double result = java.lang.Double.NaN;
        int seriesCount = getSeriesCount();
        for (int s = 0; s < seriesCount; s++) {
            org.jfree.data.xy.XYSeries series = getSeries(s);
            double hiY = series.getMaxY();
            if (java.lang.Double.isNaN(result)) {
                result = hiY;
            } else if (!java.lang.Double.isNaN(hiY)) {
                result = java.lang.Math.max(result, hiY);
            }
        }
        return result;
    }
}
[19852] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659858109778
GPR[EPVATF]-1659858109903
GPR[SPS]-1659858109903
[20745] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeriesCollection:595.
GPR[EPS]-1659858110671
GPR[ESUN]-1659858110671
GPR[SSUN]-1659858110671
-1771352681
GPR[SPVATF]-1659858110801
GPR[EPVATF]-1659858110914
GPR[SPS]-1659858110914
[21231] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeriesCollection:592.
GPR[EPS]-1659858111157
GPR[ESUN]-1659858111157
GPR[SSUN]-1659858111157
-1771352681
GPR[SPVATF]-1659858111276
GPR[EPVATF]-1659858111386
GPR[SPS]-1659858111386
[21707] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeriesCollection:591.
GPR[EPS]-1659858111633
GPR[SPVATF]-1659858111633
GPR[EPVATF]-1659858111749
GPR[SPS]-1659858111749
[22067] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeriesCollection:591.
GPR[EPS]-1659858111994
GPR[ESUN]-1659858111994
GPR[SSUN]-1659858111994
-1771352681
GPR[ESUN]-1659858112112
GPR[SSUN]-1659858112113
-1771352681
GPR[SPVATF]-1659858112227
GPR[EPVATF]-1659858112332
GPR[SPS]-1659858112332
[22646] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeriesCollection:588.
GPR[EPS]-1659858112572
GPR[ESUN]-1659858112572
GPR[SSUN]-1659858112572
-1771352681
GPR[SPVATF]-1659858112693
GPR[EPVATF]-1659858112800
GPR[SPS]-1659858112800
[23131] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeriesCollection:587.
GPR[EPS]-1659858113057
GPR[SPVATF]-1659858113058
GPR[EPVATF]-1659858113169
GPR[SPS]-1659858113169
[23487] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeriesCollection:587.
GPR[EPS]-1659858113413
GPR[ESUN]-1659858113413
GPR[SSUN]-1659858113413
-1771352681
GPR[ESUN]-1659858113531
GPR[SSUN]-1659858113531
-1771352681
GPR[ESUN]-1659858113650
GPR[SSUN]-1659858113650
-1771352681
GPR[SPVATF]-1659858113767
GPR[EPVATF]-1659858113874
GPR[SPS]-1659858113874
[24182] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeriesCollection:584.
GPR[EPS]-1659858114108
GPR[ESUN]-1659858114108
GPR[SSUN]-1659858114108
-1771352681
GPR[ESUN]-1659858114224
GPR[SSUN]-1659858114224
-1771352681
GPR[ESUN]-1659858114342
GPR[SSUN]-1659858114342
-1771352681
GPR[ESUN]-1659858114459
GPR[SSUN]-1659858114459
-1771352681
GPR[SPVATF]-1659858114971
GPR[EPVATF]-1659858115323
GPR[SPS]-1659858115323
[226731] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659858316657
GPR[SSUN]-1659858316657
1355738515
GPR[ESUN]-1659858316861
GPR[SSUN]-1659858316861
1355738515
GPR[SPVATF]-1659858316985
GPR[EPVATF]-1659858317140
GPR[SPS]-1659858317140
[227496] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:671.
GPR[EPS]-1659858317422
GPR[ESUN]-1659858317422
GPR[SSUN]-1659858317422
1355738515
GPR[ESUN]-1659858317556
GPR[SSUN]-1659858317556
-1690918013
GPR[SPVATF]-1659858317797
GPR[EPVATF]-1659858318041
GPR[SPS]-1659858318041
[228803] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1749.
GPR[EPS]-1659858318729
GPR[ESUN]-1659858318729
GPR[SSUN]-1659858318729
1508764236
GPR[ESUN]-1659858318844
GPR[SSUN]-1659858318844
1508764236
GPR[SPVATF]-1659858318947
GPR[EPVATF]-1659858319053
GPR[SPS]-1659858319053
[229358] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.IntervalXYDelegate:371.
GPR[EPS]-1659858319284
GPR[ESUN]-1659858319284
GPR[SSUN]-1659858319284
1508764236
GPR[ESUN]-1659858319392
GPR[SSUN]-1659858319392
1508764236
GPR[ESUN]-1659858319499
GPR[SSUN]-1659858319499
1508764236
GPR[SPVATF]-1659858319605
GPR[EPVATF]-1659858319713
GPR[SPS]-1659858319713
[229998] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.IntervalXYDelegate:368.
GPR[EPS]-1659858319924
GPR[SPVATF]-1659858319925
GPR[EPVATF]-1659858320033
GPR[SPS]-1659858320033
[230322] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.IntervalXYDelegate:368.
GPR[EPS]-1659858320248
GPR[ESUN]-1659858320248
GPR[SSUN]-1659858320248
1508764236
GPR[ESUN]-1659858320359
GPR[SSUN]-1659858320359
-1395068711
GPR[ESUN]-1659858320479
GPR[SSUN]-1659858320479
-1395068711
GPR[ESUN]-1659858320592
GPR[SSUN]-1659858320592
1355738515
GPR[ESUN]-1659858320715
GPR[SSUN]-1659858320715
1355738515
GPR[SPVATF]-1659858320836
GPR[EPVATF]-1659858321086
GPR[SPS]-1659858321086
[231457] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:669.
GPR[EPS]-1659858321383
GPR[SPVATF]-1659858321384
GPR[EPVATF]-1659858321625
GPR[SPS]-1659858321625
[231996] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:669.
GPR[EPS]-1659858321923
GPR[ESUN]-1659858321923
GPR[SSUN]-1659858321923
1355738515
GPR[ESUN]-1659858322056
GPR[SSUN]-1659858322056
1355738515
GPR[SPVATF]-1659858322181
GPR[EPVATF]-1659858322410
GPR[SPS]-1659858322410
[232756] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:663.
GPR[EPS]-1659858322682
GPR[SPVATF]-1659858322682
GPR[EPVATF]-1659858322904
GPR[SPS]-1659858322904
[233245] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:663.
GPR[EPS]-1659858323171
GPR[ESUN]-1659858323171
GPR[SSUN]-1659858323172
1508764236
GPR[SPVATF]-1659858323308
GPR[EPVATF]-1659858323413
GPR[SPS]-1659858323413
[233622] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class IntervalXYDelegate implements org.jfree.data.general.DatasetChangeListener , org.jfree.data.DomainInfo , java.io.Serializable , java.lang.Cloneable , org.jfree.chart.util.PublicCloneable {
    private static final long serialVersionUID = -685166711639592857L;

    private org.jfree.data.xy.XYDataset dataset;

    private boolean autoWidth;

    private double intervalPositionFactor;

    private double fixedIntervalWidth;

    private double autoIntervalWidth;

    public IntervalXYDelegate(org.jfree.data.xy.XYDataset dataset) {
        this(dataset, true);
    }

    public IntervalXYDelegate(org.jfree.data.xy.XYDataset dataset, boolean autoWidth) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        this.dataset = dataset;
        this.autoWidth = autoWidth;
        this.intervalPositionFactor = 0.5;
        this.autoIntervalWidth = java.lang.Double.POSITIVE_INFINITY;
        this.fixedIntervalWidth = 1.0;
    }

    public boolean isAutoWidth() {
        return this.autoWidth;
    }

    public void setAutoWidth(boolean b) {
        this.autoWidth = b;
        if (b) {
            this.autoIntervalWidth = recalculateInterval();
        }
    }

    public double getIntervalPositionFactor() {
        return this.intervalPositionFactor;
    }

    public void setIntervalPositionFactor(double d) {
        if ((d < 0.0) || (1.0 < d)) {
            throw new java.lang.IllegalArgumentException("Argument 'd' outside valid range.");
        }
        this.intervalPositionFactor = d;
    }

    public double getFixedIntervalWidth() {
        return this.fixedIntervalWidth;
    }

    public void setFixedIntervalWidth(double w) {
        if (w < 0.0) {
            throw new java.lang.IllegalArgumentException("Negative 'w' argument.");
        }
        this.fixedIntervalWidth = w;
        this.autoWidth = false;
    }

    public double getIntervalWidth() {
        if (isAutoWidth() && (!java.lang.Double.isInfinite(this.autoIntervalWidth))) {
            return this.autoIntervalWidth;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(22).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectInput("org.jfree.data.xy.IntervalXYDelegate.this.dataset",org.jfree.data.xy.IntervalXYDelegate.this.dataset);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectInput("org.jfree.data.xy.IntervalXYDelegate.this.autoWidth",org.jfree.data.xy.IntervalXYDelegate.this.autoWidth);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectInput("org.jfree.data.xy.IntervalXYDelegate.this.autoIntervalWidth",org.jfree.data.xy.IntervalXYDelegate.this.autoIntervalWidth);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectInput("org.jfree.data.xy.IntervalXYDelegate.this.fixedIntervalWidth",org.jfree.data.xy.IntervalXYDelegate.this.fixedIntervalWidth);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectInput("org.jfree.data.xy.IntervalXYDelegate.this.intervalPositionFactor",org.jfree.data.xy.IntervalXYDelegate.this.intervalPositionFactor);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectionEnds();
            }
            if (runtimeAngelicValue)
                return this.fixedIntervalWidth;

        }
    }

    public java.lang.Number getStartX(int series, int item) {
        java.lang.Number startX = null;
        java.lang.Number x = this.dataset.getX(series, item);
        if (x != null) {
            startX = new java.lang.Double(x.doubleValue() - (getIntervalPositionFactor() * getIntervalWidth()));
        }
        return startX;
    }

    public double getStartXValue(int series, int item) {
        return this.dataset.getXValue(series, item) - (getIntervalPositionFactor() * getIntervalWidth());
    }

    public java.lang.Number getEndX(int series, int item) {
        java.lang.Number endX = null;
        java.lang.Number x = this.dataset.getX(series, item);
        if (x != null) {
            endX = new java.lang.Double(x.doubleValue() + ((1.0 - getIntervalPositionFactor()) * getIntervalWidth()));
        }
        return endX;
    }

    public double getEndXValue(int series, int item) {
        return this.dataset.getXValue(series, item) + ((1.0 - getIntervalPositionFactor()) * getIntervalWidth());
    }

    public double getDomainLowerBound(boolean includeInterval) {
        double result = java.lang.Double.NaN;
        org.jfree.data.Range r = getDomainBounds(includeInterval);
        if (r != null) {
            result = r.getLowerBound();
        }
        return result;
    }

    public double getDomainUpperBound(boolean includeInterval) {
        double result = java.lang.Double.NaN;
        org.jfree.data.Range r = getDomainBounds(includeInterval);
        if (r != null) {
            result = r.getUpperBound();
        }
        return result;
    }

    public org.jfree.data.Range getDomainBounds(boolean includeInterval) {
        org.jfree.data.Range range = org.jfree.data.general.DatasetUtilities.findDomainBounds(this.dataset, false);
        if (includeInterval && (range != null)) {
            double lowerAdj = getIntervalWidth() * getIntervalPositionFactor();
            double upperAdj = getIntervalWidth() - lowerAdj;
            range = new org.jfree.data.Range(range.getLowerBound() - lowerAdj, range.getUpperBound() + upperAdj);
        }
        return range;
    }

    public void datasetChanged(org.jfree.data.general.DatasetChangeEvent e) {
        if (this.autoWidth) {
            this.autoIntervalWidth = recalculateInterval();
        }
    }

    private double recalculateInterval() {
        double result = java.lang.Double.POSITIVE_INFINITY;
        int seriesCount = this.dataset.getSeriesCount();
        for (int series = 0; series < seriesCount; series++) {
            result = java.lang.Math.min(result, calculateIntervalForSeries(series));
        }
        return result;
    }

    private double calculateIntervalForSeries(int series) {
        double result = java.lang.Double.POSITIVE_INFINITY;
        int itemCount = this.dataset.getItemCount(series);
        if (itemCount > 1) {
            double prev = this.dataset.getXValue(series, 0);
            for (int item = 1; item < itemCount; item++) {
                double x = this.dataset.getXValue(series, item);
                result = java.lang.Math.min(result, x - prev);
                prev = x;
            }
        }
        return result;
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.xy.IntervalXYDelegate)) {
            return false;
        }
        org.jfree.data.xy.IntervalXYDelegate that = ((org.jfree.data.xy.IntervalXYDelegate) (obj));
        if (this.autoWidth != that.autoWidth) {
            return false;
        }
        if (this.intervalPositionFactor != that.intervalPositionFactor) {
            return false;
        }
        if (this.fixedIntervalWidth != that.fixedIntervalWidth) {
            return false;
        }
        return true;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        return super.clone();
    }

    public int hashCode() {
        int hash = 5;
        hash = org.jfree.chart.util.HashUtilities.hashCode(hash, this.autoWidth);
        hash = org.jfree.chart.util.HashUtilities.hashCode(hash, this.intervalPositionFactor);
        hash = org.jfree.chart.util.HashUtilities.hashCode(hash, this.fixedIntervalWidth);
        return hash;
    }
}
[233622] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858323548
GPR[SSUN]-1659858323548
1508764236
GPR[SPVATF]-1659858323653
GPR[EPVATF]-1659858323760
GPR[SPS]-1659858323760
[234042] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.IntervalXYDelegate:240.
GPR[EPS]-1659858323968
GPR[ESUN]-1659858323968
GPR[SSUN]-1659858323968
1508764236
GPR[ESUN]-1659858324073
GPR[SSUN]-1659858324073
1508764236
GPR[ESUN]-1659858324177
GPR[SSUN]-1659858324177
-1690918013
GPR[ESUN]-1659858324393
GPR[SSUN]-1659858324393
1256214381
GPR[ESUN]-1659858324674
GPR[SSUN]-1659858324674
1256214381
GPR[SPVATF]-1659858324958
GPR[EPVATF]-1659858325043
GPR[SPS]-1659858325043
[235538] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1488.
GPR[EPS]-1659858325464
GPR[ESUN]-1659858325464
GPR[SSUN]-1659858325464
1256214381
GPR[ESUN]-1659858325733
GPR[SSUN]-1659858325733
1256214381
GPR[SPVATF]-1659858326001
GPR[EPVATF]-1659858326084
GPR[SPS]-1659858326084
[236543] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1486.
GPR[EPS]-1659858326469
GPR[ESUN]-1659858326469
GPR[SSUN]-1659858326469
1256214381
GPR[ESUN]-1659858326734
GPR[SSUN]-1659858326734
1256214381
GPR[SPVATF]-1659858327002
GPR[EPVATF]-1659858327086
GPR[SPS]-1659858327086
[237550] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1482.
GPR[EPS]-1659858327476
GPR[SPVATF]-1659858327476
GPR[EPVATF]-1659858327559
GPR[SPS]-1659858327559
[238012] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1482.
GPR[EPS]-1659858327938
GPR[ESUN]-1659858327938
GPR[SSUN]-1659858327938
-1690918013
GPR[SPVATF]-1659858328156
GPR[EPVATF]-1659858328381
GPR[SPS]-1659858328381
[239057] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1591.
GPR[EPS]-1659858328983
GPR[ESUN]-1659858328983
GPR[SSUN]-1659858328983
-1690918013
GPR[ESUN]-1659858329206
GPR[SSUN]-1659858329206
-1690918013
GPR[SPVATF]-1659858329430
GPR[EPVATF]-1659858329667
GPR[SPS]-1659858329667
[240164] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1590.
GPR[EPS]-1659858330090
GPR[SPVATF]-1659858330090
GPR[EPVATF]-1659858330310
GPR[SPS]-1659858330311
[240810] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1590.
GPR[EPS]-1659858330736
GPR[ESUN]-1659858330736
GPR[SSUN]-1659858330737
-1690918013
GPR[ESUN]-1659858330951
GPR[SSUN]-1659858330951
-1690918013
GPR[ESUN]-1659858331166
GPR[SSUN]-1659858331166
-1690918013
GPR[SPVATF]-1659858331378
GPR[EPVATF]-1659858331600
GPR[SPS]-1659858331600
[242108] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4475.
GPR[EPS]-1659858332034
GPR[SPVATF]-1659858332035
GPR[EPVATF]-1659858332257
GPR[SPS]-1659858332257
[242746] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4475.
GPR[EPS]-1659858332672
GPR[ESUN]-1659858332672
GPR[SSUN]-1659858332672
-1690918013
GPR[SPVATF]-1659858332889
GPR[EPVATF]-1659858333110
GPR[SPS]-1659858333110
[244325] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4474.
GPR[EPS]-1659858334251
GPR[SPVATF]-1659858334251
GPR[EPVATF]-1659858335017
GPR[SPS]-1659858335017
[246023] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4474.
GPR[EPS]-1659858335949
GPR[ESUN]-1659858335949
GPR[SSUN]-1659858335949
-1690918013
GPR[ESUN]-1659858336165
GPR[SSUN]-1659858336165
-1690918013
GPR[ESUN]-1659858336374
GPR[SSUN]-1659858336374
-1690918013
GPR[SPVATF]-1659858336580
GPR[EPVATF]-1659858336804
GPR[SPS]-1659858336804
[247323] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1748.
GPR[EPS]-1659858337249
GPR[SPVATF]-1659858337250
GPR[EPVATF]-1659858337468
GPR[SPS]-1659858337468
[247958] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1748.
GPR[EPS]-1659858337884
GPR[ESUN]-1659858337884
GPR[SSUN]-1659858337884
-1690918013
GPR[SPVATF]-1659858338093
GPR[EPVATF]-1659858338305
GPR[SPS]-1659858338305
[248782] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1747.
GPR[EPS]-1659858338708
GPR[ESUN]-1659858338708
GPR[SSUN]-1659858338708
-1690918013
GPR[SPVATF]-1659858338918
GPR[EPVATF]-1659858339136
GPR[SPS]-1659858339136
[249618] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1746.
GPR[EPS]-1659858339545
GPR[SPVATF]-1659858339545
GPR[EPVATF]-1659858339764
GPR[SPS]-1659858339764
[250265] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1746.
GPR[EPS]-1659858340191
GPR[ESUN]-1659858340191
GPR[SSUN]-1659858340191
-1690918013
GPR[SPVATF]-1659858340400
GPR[EPVATF]-1659858340625
GPR[SPS]-1659858340625
[251118] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1745.
GPR[EPS]-1659858341044
GPR[ESUN]-1659858341044
GPR[SSUN]-1659858341044
-1690918013
GPR[ESUN]-1659858341260
GPR[SSUN]-1659858341260
1600734891
GPR[ESUN]-1659858341385
GPR[SSUN]-1659858341385
1600734891
GPR[SPVATF]-1659858341513
GPR[EPVATF]-1659858341739
GPR[SPS]-1659858341740
[252082] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:265.
GPR[EPS]-1659858342008
GPR[ESUN]-1659858342008
GPR[SSUN]-1659858342008
1600734891
GPR[SPVATF]-1659858342140
GPR[EPVATF]-1659858342354
GPR[SPS]-1659858342354
[252694] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:263.
GPR[EPS]-1659858342620
GPR[ESUN]-1659858342620
GPR[SSUN]-1659858342620
1600734891
GPR[SPVATF]-1659858342748
GPR[EPVATF]-1659858342973
GPR[SPS]-1659858342973
[253309] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:262.
GPR[EPS]-1659858343235
GPR[SPVATF]-1659858343236
GPR[EPVATF]-1659858343457
GPR[SPS]-1659858343457
[253823] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:262.
GPR[EPS]-1659858343749
GPR[ESUN]-1659858343749
GPR[SSUN]-1659858343749
1600734891
GPR[SPVATF]-1659858343875
GPR[EPVATF]-1659858344097
GPR[SPS]-1659858344097
[254442] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:261.
GPR[EPS]-1659858344368
GPR[ESUN]-1659858344368
GPR[SSUN]-1659858344368
1600734891
GPR[SPVATF]-1659858344498
GPR[EPVATF]-1659858344720
GPR[SPS]-1659858344720
[255060] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:260.
GPR[EPS]-1659858344986
GPR[SPVATF]-1659858344987
GPR[EPVATF]-1659858345208
GPR[SPS]-1659858345208
[255545] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:260.
GPR[EPS]-1659858345471
GPR[ESUN]-1659858345471
GPR[SSUN]-1659858345471
-1771352681
GPR[ESUN]-1659858345585
GPR[SSUN]-1659858345585
-1771352681
GPR[SPVATF]-1659858345701
GPR[EPVATF]-1659858345810
GPR[SPS]-1659858345810
[256104] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeriesCollection:253.
GPR[EPS]-1659858346030
GPR[SPVATF]-1659858346031
GPR[EPVATF]-1659858346141
GPR[SPS]-1659858346141
[256435] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeriesCollection:253.
GPR[EPS]-1659858346361
GPR[ESUN]-1659858346362
GPR[SSUN]-1659858346362
-1690918013
GPR[SPVATF]-1659858346577
GPR[EPVATF]-1659858346806
GPR[SPS]-1659858346806
[257541] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4441.
GPR[EPS]-1659858347467
GPR[ESUN]-1659858347467
GPR[SSUN]-1659858347467
-1690918013
GPR[ESUN]-1659858347688
GPR[SSUN]-1659858347688
-1690918013
GPR[SPVATF]-1659858347902
GPR[EPVATF]-1659858348129
GPR[SPS]-1659858348129
[258620] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4438.
GPR[EPS]-1659858348546
GPR[SPVATF]-1659858348547
GPR[EPVATF]-1659858348777
GPR[SPS]-1659858348777
[259315] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4438.
GPR[EPS]-1659858349241
GPR[ESUN]-1659858349241
GPR[SSUN]-1659858349241
-1690918013
GPR[SPVATF]-1659858349458
GPR[EPVATF]-1659858349684
GPR[SPS]-1659858349684
[260178] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4436.
GPR[EPS]-1659858350104
GPR[ESUN]-1659858350104
GPR[SSUN]-1659858350104
-1690918013
GPR[SPVATF]-1659858350321
GPR[EPVATF]-1659858350552
GPR[SPS]-1659858350552
[261038] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4435.
GPR[EPS]-1659858350964
GPR[ESUN]-1659858350964
GPR[SSUN]-1659858350964
-1690918013
GPR[ESUN]-1659858351179
GPR[SSUN]-1659858351179
-1690918013
GPR[SPVATF]-1659858351390
GPR[EPVATF]-1659858351615
GPR[SPS]-1659858351615
[262118] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4337.
GPR[EPS]-1659858352044
GPR[ESUN]-1659858352044
GPR[SSUN]-1659858352044
-1690918013
GPR[SPVATF]-1659858352258
GPR[EPVATF]-1659858352483
GPR[SPS]-1659858352483
[262982] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4336.
GPR[EPS]-1659858352908
GPR[SPVATF]-1659858352908
GPR[EPVATF]-1659858353134
GPR[SPS]-1659858353134
[263619] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4336.
GPR[EPS]-1659858353545
GPR[ESUN]-1659858353545
GPR[SSUN]-1659858353545
-1690918013
GPR[SPVATF]-1659858353757
GPR[EPVATF]-1659858353983
GPR[SPS]-1659858353983
[264480] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4330.
GPR[EPS]-1659858354406
GPR[SPVATF]-1659858354406
GPR[EPVATF]-1659858354629
GPR[SPS]-1659858354629
[265131] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4330.
GPR[EPS]-1659858355057
GPR[ESUN]-1659858355058
GPR[SSUN]-1659858355058
-1690918013
GPR[ESUN]-1659858355273
GPR[SSUN]-1659858355273
-1690918013
GPR[SPVATF]-1659858355485
GPR[EPVATF]-1659858355713
GPR[SPS]-1659858355713
[266210] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4327.
GPR[EPS]-1659858356136
GPR[ESUN]-1659858356136
GPR[SSUN]-1659858356136
-1690918013
GPR[ESUN]-1659858356351
GPR[SSUN]-1659858356351
-1690918013
GPR[SPVATF]-1659858356560
GPR[EPVATF]-1659858356790
GPR[SPS]-1659858356790
[267266] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4323.
GPR[EPS]-1659858357192
GPR[SPVATF]-1659858357193
GPR[EPVATF]-1659858357418
GPR[SPS]-1659858357418
[267890] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4323.
GPR[EPS]-1659858357816
GPR[ESUN]-1659858357816
GPR[SSUN]-1659858357816
-1690918013
GPR[SPVATF]-1659858358027
GPR[EPVATF]-1659858358253
GPR[SPS]-1659858358253
[268731] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:972.
GPR[EPS]-1659858358657
GPR[ESUN]-1659858358657
GPR[SSUN]-1659858358657
-1690918013
GPR[SPVATF]-1659858358872
GPR[EPVATF]-1659858359125
GPR[SPS]-1659858359125
[269667] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4472.
GPR[EPS]-1659858359593
GPR[SPVATF]-1659858359593
GPR[EPVATF]-1659858359824
GPR[SPS]-1659858359824
[270358] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4472.
GPR[EPS]-1659858360285
GPR[ESUN]-1659858360285
GPR[SSUN]-1659858360285
-1690918013
GPR[ESUN]-1659858360500
GPR[SSUN]-1659858360500
-1690918013
GPR[SPVATF]-1659858360710
GPR[EPVATF]-1659858360943
GPR[SPS]-1659858360943
[271476] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4470.
GPR[EPS]-1659858361402
GPR[ESUN]-1659858361402
GPR[SSUN]-1659858361402
-1690918013
GPR[ESUN]-1659858361620
GPR[SSUN]-1659858361620
-1690918013
GPR[SPVATF]-1659858361831
GPR[EPVATF]-1659858362073
GPR[SPS]-1659858362073
[272587] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4452.
GPR[EPS]-1659858362513
GPR[SPVATF]-1659858362513
GPR[EPVATF]-1659858362750
GPR[SPS]-1659858362750
[273230] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4452.
GPR[EPS]-1659858363156
GPR[ESUN]-1659858363156
GPR[SSUN]-1659858363156
-1690918013
GPR[ESUN]-1659858363368
GPR[SSUN]-1659858363368
-1690918013
GPR[SPVATF]-1659858363577
GPR[EPVATF]-1659858363815
GPR[SPS]-1659858363815
[274306] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4434.
GPR[EPS]-1659858364232
GPR[SPVATF]-1659858364233
GPR[EPVATF]-1659858364476
GPR[SPS]-1659858364476
[274967] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4434.
GPR[EPS]-1659858364893
GPR[ESUN]-1659858364893
GPR[SSUN]-1659858364893
-1690918013
GPR[ESUN]-1659858365130
GPR[SSUN]-1659858365130
-1690918013
GPR[ESUN]-1659858365397
GPR[SSUN]-1659858365397
-1690918013
GPR[ESUN]-1659858365607
GPR[SSUN]-1659858365607
-1690918013
GPR[ESUN]-1659858365814
GPR[SSUN]-1659858365814
-1690918013
GPR[ESUN]-1659858366023
GPR[SSUN]-1659858366023
-1690918013
GPR[ESUN]-1659858366237
GPR[SSUN]-1659858366237
-1690918013
GPR[SPVATF]-1659858366449
GPR[EPVATF]-1659858366685
GPR[SPS]-1659858366685
[277167] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4410.
GPR[EPS]-1659858367093
GPR[SPVATF]-1659858367093
GPR[EPVATF]-1659858367331
GPR[SPS]-1659858367331
[277814] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4410.
GPR[EPS]-1659858367740
GPR[ESUN]-1659858367740
GPR[SSUN]-1659858367741
-1690918013
GPR[ESUN]-1659858367957
GPR[SSUN]-1659858367957
-1690918013
GPR[SPVATF]-1659858368168
GPR[EPVATF]-1659858368405
GPR[SPS]-1659858368405
[278923] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4407.
GPR[EPS]-1659858368849
GPR[SPVATF]-1659858368850
GPR[EPVATF]-1659858369086
GPR[SPS]-1659858369086
[279574] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4407.
GPR[EPS]-1659858369500
GPR[ESUN]-1659858369500
GPR[SSUN]-1659858369500
-1690918013
GPR[ESUN]-1659858369715
GPR[SSUN]-1659858369715
-1690918013
GPR[ESUN]-1659858369928
GPR[SSUN]-1659858369928
-1690918013
GPR[SPVATF]-1659858370142
GPR[EPVATF]-1659858370384
GPR[SPS]-1659858370384
[280878] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4385.
GPR[EPS]-1659858370804
GPR[SPVATF]-1659858370804
GPR[EPVATF]-1659858371041
GPR[SPS]-1659858371042
[281552] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4385.
GPR[EPS]-1659858371478
GPR[ESUN]-1659858371478
GPR[SSUN]-1659858371478
-1690918013
GPR[ESUN]-1659858371701
GPR[SSUN]-1659858371701
-1771352681
GPR[ESUN]-1659858371814
GPR[SSUN]-1659858371814
-232368544
GPR[ESUN]-1659858371919
GPR[SSUN]-1659858371919
-1690918013
GPR[ESUN]-1659858372136
GPR[SSUN]-1659858372136
-1690918013
GPR[SPVATF]-1659858372349
GPR[EPVATF]-1659858372591
GPR[SPS]-1659858372591
[283072] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4537.
GPR[EPS]-1659858372998
GPR[ESUN]-1659858372998
GPR[SSUN]-1659858372998
-1690918013
GPR[SPVATF]-1659858373216
GPR[EPVATF]-1659858373454
GPR[SPS]-1659858373454
[283936] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4536.
GPR[EPS]-1659858373862
GPR[ESUN]-1659858373862
GPR[SSUN]-1659858373862
-1690918013
GPR[ESUN]-1659858374076
GPR[SSUN]-1659858374076
-1690918013
GPR[SPVATF]-1659858374320
GPR[EPVATF]-1659858374557
GPR[SPS]-1659858374557
[285051] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4531.
GPR[EPS]-1659858374977
GPR[SPVATF]-1659858374977
GPR[EPVATF]-1659858375233
GPR[SPS]-1659858375233
[285712] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4531.
GPR[EPS]-1659858375638
GPR[ESUN]-1659858375638
GPR[SSUN]-1659858375638
-1690918013
GPR[SPVATF]-1659858376197
GPR[EPVATF]-1659858376442
GPR[SPS]-1659858376442
[286943] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4530.
GPR[EPS]-1659858376870
GPR[ESUN]-1659858376870
GPR[SSUN]-1659858376870
-1690918013
GPR[SPVATF]-1659858377084
GPR[EPVATF]-1659858377317
GPR[SPS]-1659858377317
[287794] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4529.
GPR[EPS]-1659858377720
GPR[ESUN]-1659858377720
GPR[SSUN]-1659858377721
-1690918013
GPR[ESUN]-1659858377946
GPR[SSUN]-1659858377946
-1690918013
GPR[SPVATF]-1659858378157
GPR[EPVATF]-1659858378397
GPR[SPS]-1659858378397
[288899] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1553.
GPR[EPS]-1659858378825
GPR[ESUN]-1659858378825
GPR[SSUN]-1659858378825
-1690918013
GPR[SPVATF]-1659858379037
GPR[EPVATF]-1659858379275
GPR[SPS]-1659858379275
[289756] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1550.
GPR[EPS]-1659858379682
GPR[SPVATF]-1659858379682
GPR[EPVATF]-1659858379924
GPR[SPS]-1659858379924
[290406] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1550.
GPR[EPS]-1659858380332
GPR[ESUN]-1659858380332
GPR[SSUN]-1659858380332
-1690918013
GPR[SPVATF]-1659858380547
GPR[EPVATF]-1659858380786
GPR[SPS]-1659858380786
[291281] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1546.
GPR[EPS]-1659858381207
GPR[SPVATF]-1659858381207
GPR[EPVATF]-1659858381446
GPR[SPS]-1659858381446
[291927] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1546.
GPR[EPS]-1659858381853
GPR[ESUN]-1659858381853
GPR[SSUN]-1659858381853
-1690918013
GPR[ESUN]-1659858382063
GPR[SSUN]-1659858382063
-1690918013
GPR[SPVATF]-1659858382271
GPR[EPVATF]-1659858382515
GPR[SPS]-1659858382515
[292996] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1544.
GPR[EPS]-1659858382922
GPR[ESUN]-1659858382922
GPR[SSUN]-1659858382922
-1690918013
GPR[ESUN]-1659858383140
GPR[SSUN]-1659858383140
-1690918013
GPR[SPVATF]-1659858383350
GPR[EPVATF]-1659858383588
GPR[SPS]-1659858383588
[294087] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1540.
GPR[EPS]-1659858384013
GPR[SPVATF]-1659858384013
GPR[EPVATF]-1659858384252
GPR[SPS]-1659858384252
[294732] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1540.
GPR[EPS]-1659858384658
GPR[ESUN]-1659858384658
GPR[SSUN]-1659858384658
-1690918013
GPR[ESUN]-1659858384873
GPR[SSUN]-1659858384873
-1690918013
GPR[SPVATF]-1659858385081
GPR[EPVATF]-1659858385317
GPR[SPS]-1659858385317
[295797] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1536.
GPR[EPS]-1659858385723
GPR[SPVATF]-1659858385723
GPR[EPVATF]-1659858385960
GPR[SPS]-1659858385960
[296463] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1536.
GPR[EPS]-1659858386389
GPR[ESUN]-1659858386389
GPR[SSUN]-1659858386389
-1690918013
GPR[ESUN]-1659858386608
GPR[SSUN]-1659858386608
-1690918013
GPR[SPVATF]-1659858386817
GPR[EPVATF]-1659858387056
GPR[SPS]-1659858387056
[297536] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1486.
GPR[EPS]-1659858387462
GPR[ESUN]-1659858387462
GPR[SSUN]-1659858387462
-1690918013
GPR[SPVATF]-1659858387696
GPR[EPVATF]-1659858387936
GPR[SPS]-1659858387936
[298433] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1484.
GPR[EPS]-1659858388359
GPR[ESUN]-1659858388359
GPR[SSUN]-1659858388359
-1690918013
GPR[ESUN]-1659858388571
GPR[SSUN]-1659858388571
-1690918013
GPR[SPVATF]-1659858388776
GPR[EPVATF]-1659858389021
GPR[SPS]-1659858389021
[299512] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1482.
GPR[EPS]-1659858389438
GPR[ESUN]-1659858389438
GPR[SSUN]-1659858389438
-1690918013
GPR[SPVATF]-1659858389649
GPR[EPVATF]-1659858389895
GPR[SPS]-1659858389895
[300375] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1479.
GPR[EPS]-1659858390301
GPR[SPVATF]-1659858390301
GPR[EPVATF]-1659858390549
GPR[SPS]-1659858390549
[301026] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1479.
GPR[EPS]-1659858390952
GPR[ESUN]-1659858390953
GPR[SSUN]-1659858390953
-1690918013
GPR[ESUN]-1659858391191
GPR[SSUN]-1659858391191
-1690918013
GPR[SPVATF]-1659858391397
GPR[EPVATF]-1659858391645
GPR[SPS]-1659858391645
[302124] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1465.
GPR[EPS]-1659858392050
GPR[ESUN]-1659858392050
GPR[SSUN]-1659858392050
-1690918013
GPR[SPVATF]-1659858392259
GPR[EPVATF]-1659858392503
GPR[SPS]-1659858392503
[302981] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1464.
GPR[EPS]-1659858392907
GPR[ESUN]-1659858392907
GPR[SSUN]-1659858392907
-1690918013
GPR[ESUN]-1659858393116
GPR[SSUN]-1659858393116
-1690918013
GPR[ESUN]-1659858393322
GPR[SSUN]-1659858393322
-1690918013
GPR[SPVATF]-1659858393528
GPR[EPVATF]-1659858393772
GPR[SPS]-1659858393772
[304283] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1384.
GPR[EPS]-1659858394209
GPR[ESUN]-1659858394209
GPR[SSUN]-1659858394209
-1690918013
GPR[SPVATF]-1659858394421
GPR[EPVATF]-1659858394663
GPR[SPS]-1659858394663
[305144] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1383.
GPR[EPS]-1659858395070
GPR[SPVATF]-1659858395071
GPR[EPVATF]-1659858395314
GPR[SPS]-1659858395314
[305821] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1383.
GPR[EPS]-1659858395747
GPR[ESUN]-1659858395747
GPR[SSUN]-1659858395747
-1690918013
GPR[ESUN]-1659858395962
GPR[SSUN]-1659858395962
-1690918013
GPR[ESUN]-1659858396179
GPR[SSUN]-1659858396179
-1690918013
GPR[SPVATF]-1659858396386
GPR[EPVATF]-1659858396635
GPR[SPS]-1659858396635
[307116] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1269.
GPR[EPS]-1659858397042
GPR[ESUN]-1659858397042
GPR[SSUN]-1659858397042
-1690918013
GPR[ESUN]-1659858397268
GPR[SSUN]-1659858397268
-1690918013
GPR[SPVATF]-1659858397481
GPR[EPVATF]-1659858397728
GPR[SPS]-1659858397728
[308238] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:971.
GPR[EPS]-1659858398164
GPR[SPVATF]-1659858398164
GPR[EPVATF]-1659858398414
GPR[SPS]-1659858398414
[308895] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:971.
GPR[EPS]-1659858398821
GPR[ESUN]-1659858398821
GPR[SSUN]-1659858398821
-1690918013
GPR[ESUN]-1659858399034
GPR[SSUN]-1659858399034
-1690918013
GPR[SPVATF]-1659858399239
GPR[EPVATF]-1659858399491
GPR[SPS]-1659858399491
[309974] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:969.
GPR[EPS]-1659858399900
GPR[ESUN]-1659858399900
GPR[SSUN]-1659858399900
-1082760138
GPR[ESUN]-1659858399998
GPR[SSUN]-1659858399998
-1082760138
GPR[SPVATF]-1659858400091
GPR[EPVATF]-1659858400252
GPR[SPS]-1659858400252
[310570] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.AbstractXYDataset:128.
GPR[EPS]-1659858400496
GPR[ESUN]-1659858400496
GPR[SSUN]-1659858400496
-1082760138
GPR[SPVATF]-1659858400593
GPR[EPVATF]-1659858400753
GPR[SPS]-1659858400753
[311046] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.AbstractXYDataset:127.
GPR[EPS]-1659858400972
GPR[ESUN]-1659858400972
GPR[SSUN]-1659858400972
-209594369
GPR[SPVATF]-1659858401074
GPR[EPVATF]-1659858401194
GPR[SPS]-1659858401194
[311384] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class XYDataItem implements java.lang.Cloneable , java.lang.Comparable , java.io.Serializable {
    private static final long serialVersionUID = 2751513470325494890L;

    private java.lang.Number x;

    private java.lang.Number y;

    private boolean selected;

    public XYDataItem(java.lang.Number x, java.lang.Number y) {
        if (x == null) {
            throw new java.lang.IllegalArgumentException("Null 'x' argument.");
        }
        this.x = x;
        this.y = y;
        this.selected = false;
    }

    public XYDataItem(double x, double y) {
        this(new java.lang.Double(x), new java.lang.Double(y));
    }

    public java.lang.Number getX() {
        return this.x;
    }

    public double getXValue() {
        return this.x.doubleValue();
    }

    public java.lang.Number getY() {
        return this.y;
    }

    public double getYValue() {
        double result = java.lang.Double.NaN;
        if (this.y != null) {
            result = this.y.doubleValue();
        }
        return result;
    }

    public void setY(double y) {
        setY(new java.lang.Double(y));
    }

    public void setY(java.lang.Number y) {
        this.y = y;
    }

    public boolean isSelected() {
        return this.selected;
    }

    public void setSelected(boolean selected) {
        this.selected = selected;
    }

    public int compareTo(java.lang.Object o1) {
        int result;
        if (o1 instanceof org.jfree.data.xy.XYDataItem) {
            org.jfree.data.xy.XYDataItem dataItem = ((org.jfree.data.xy.XYDataItem) (o1));
            double compare = this.x.doubleValue() - dataItem.getX().doubleValue();
            if (compare > 0.0) {
                result = 1;
            } else if (compare < 0.0) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(109).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("dataItem",dataItem);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("org.jfree.data.xy.XYDataItem.this.selected",org.jfree.data.xy.XYDataItem.this.selected);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("compare",compare);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("o1",o1);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("org.jfree.data.xy.XYDataItem.this.y",org.jfree.data.xy.XYDataItem.this.y);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("org.jfree.data.xy.XYDataItem.this.x",org.jfree.data.xy.XYDataItem.this.x);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectionEnds();
                }
                if (runtimeAngelicValue)
                    result = -1;

            } else {
                result = 0;
            }
        } else {
            result = 1;
        }
        return result;
    }

    public java.lang.Object clone() {
        java.lang.Object clone = null;
        try {
            clone = super.clone();
        } catch (java.lang.CloneNotSupportedException e) {
            e.printStackTrace();
        }
        return clone;
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.xy.XYDataItem)) {
            return false;
        }
        org.jfree.data.xy.XYDataItem that = ((org.jfree.data.xy.XYDataItem) (obj));
        if (!this.x.equals(that.x)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.y, that.y)) {
            return false;
        }
        if (this.selected != that.selected) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result;
        result = this.x.hashCode();
        result = (29 * result) + (this.y != null ? this.y.hashCode() : 0);
        result = org.jfree.chart.util.HashUtilities.hashCode(result, this.selected);
        return result;
    }

    public java.lang.String toString() {
        return ((("[" + getXValue()) + ", ") + getYValue()) + "]";
    }
}
[311384] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858401310
GPR[SSUN]-1659858401310
1256214381
GPR[ESUN]-1659858401583
GPR[SSUN]-1659858401583
1256214381
GPR[SPVATF]-1659858401857
GPR[EPVATF]-1659858401981
GPR[SPS]-1659858401981
[312458] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1892.
GPR[EPS]-1659858402384
GPR[ESUN]-1659858402384
GPR[SSUN]-1659858402384
1256214381
GPR[ESUN]-1659858402656
GPR[SSUN]-1659858402656
1256214381
GPR[SPVATF]-1659858402920
GPR[EPVATF]-1659858403042
GPR[SPS]-1659858403042
[313511] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1890.
GPR[EPS]-1659858403437
GPR[ESUN]-1659858403437
GPR[SSUN]-1659858403437
1256214381
GPR[SPVATF]-1659858403706
GPR[EPVATF]-1659858403828
GPR[SPS]-1659858403828
[314297] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1889.
GPR[EPS]-1659858404223
GPR[ESUN]-1659858404223
GPR[SSUN]-1659858404223
1256214381
GPR[ESUN]-1659858404527
GPR[SSUN]-1659858404527
-209594369
GPR[SPVATF]-1659858404623
GPR[EPVATF]-1659858404741
GPR[SPS]-1659858404741
[314932] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class XYDataItem implements java.lang.Cloneable , java.lang.Comparable , java.io.Serializable {
    private static final long serialVersionUID = 2751513470325494890L;

    private java.lang.Number x;

    private java.lang.Number y;

    private boolean selected;

    public XYDataItem(java.lang.Number x, java.lang.Number y) {
        if (x == null) {
            throw new java.lang.IllegalArgumentException("Null 'x' argument.");
        }
        this.x = x;
        this.y = y;
        this.selected = false;
    }

    public XYDataItem(double x, double y) {
        this(new java.lang.Double(x), new java.lang.Double(y));
    }

    public java.lang.Number getX() {
        return this.x;
    }

    public double getXValue() {
        return this.x.doubleValue();
    }

    public java.lang.Number getY() {
        return this.y;
    }

    public double getYValue() {
        double result = java.lang.Double.NaN;
        if (this.y != null) {
            result = this.y.doubleValue();
        }
        return result;
    }

    public void setY(double y) {
        setY(new java.lang.Double(y));
    }

    public void setY(java.lang.Number y) {
        this.y = y;
    }

    public boolean isSelected() {
        return this.selected;
    }

    public void setSelected(boolean selected) {
        this.selected = selected;
    }

    public int compareTo(java.lang.Object o1) {
        int result;
        if (o1 instanceof org.jfree.data.xy.XYDataItem) {
            org.jfree.data.xy.XYDataItem dataItem = ((org.jfree.data.xy.XYDataItem) (o1));
            double compare = this.x.doubleValue() - dataItem.getX().doubleValue();
            if (compare > 0.0) {
                result = 1;
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(113).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(113).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(113).collectInput("dataItem",dataItem);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(113).collectInput("compare",compare);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(113).collectInput("o1",o1);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(113).collectInput("0.0",0.0);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(113).collectInput("compare < 0.0",compare < 0.0);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(113).collectInput("org.jfree.data.xy.XYDataItem.this.selected",org.jfree.data.xy.XYDataItem.this.selected);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(113).collectInput("org.jfree.data.xy.XYDataItem.this.y",org.jfree.data.xy.XYDataItem.this.y);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(113).collectInput("org.jfree.data.xy.XYDataItem.this.x",org.jfree.data.xy.XYDataItem.this.x);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(113).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(113).collectionEnds();
                }
                if (runtimeAngelicValue) if (compare < 0.0) {
                    result = -1;
                } else {
                    result = 0;
                }
            }
        } else {
            result = 1;
        }
        return result;
    }

    public java.lang.Object clone() {
        java.lang.Object clone = null;
        try {
            clone = super.clone();
        } catch (java.lang.CloneNotSupportedException e) {
            e.printStackTrace();
        }
        return clone;
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.xy.XYDataItem)) {
            return false;
        }
        org.jfree.data.xy.XYDataItem that = ((org.jfree.data.xy.XYDataItem) (obj));
        if (!this.x.equals(that.x)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.y, that.y)) {
            return false;
        }
        if (this.selected != that.selected) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result;
        result = this.x.hashCode();
        result = (29 * result) + (this.y != null ? this.y.hashCode() : 0);
        result = org.jfree.chart.util.HashUtilities.hashCode(result, this.selected);
        return result;
    }

    public java.lang.String toString() {
        return ((("[" + getXValue()) + ", ") + getYValue()) + "]";
    }
}
[314932] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659858404858
GPR[EPVATF]-1659858404979
GPR[SPS]-1659858404979
[315255] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYDataItem:226.
GPR[EPS]-1659858405181
GPR[ESUN]-1659858405181
GPR[SSUN]-1659858405181
-209594369
GPR[ESUN]-1659858405280
GPR[SSUN]-1659858405280
-209594369
GPR[ESUN]-1659858405375
GPR[SSUN]-1659858405375
-209594369
GPR[SPVATF]-1659858405469
GPR[EPVATF]-1659858405587
GPR[SPS]-1659858405587
[315775] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class XYDataItem implements java.lang.Cloneable , java.lang.Comparable , java.io.Serializable {
    private static final long serialVersionUID = 2751513470325494890L;

    private java.lang.Number x;

    private java.lang.Number y;

    private boolean selected;

    public XYDataItem(java.lang.Number x, java.lang.Number y) {
        if (x == null) {
            throw new java.lang.IllegalArgumentException("Null 'x' argument.");
        }
        this.x = x;
        this.y = y;
        this.selected = false;
    }

    public XYDataItem(double x, double y) {
        this(new java.lang.Double(x), new java.lang.Double(y));
    }

    public java.lang.Number getX() {
        return this.x;
    }

    public double getXValue() {
        return this.x.doubleValue();
    }

    public java.lang.Number getY() {
        return this.y;
    }

    public double getYValue() {
        double result = java.lang.Double.NaN;
        if (this.y != null) {
            result = this.y.doubleValue();
        }
        return result;
    }

    public void setY(double y) {
        setY(new java.lang.Double(y));
    }

    public void setY(java.lang.Number y) {
        this.y = y;
    }

    public boolean isSelected() {
        return this.selected;
    }

    public void setSelected(boolean selected) {
        this.selected = selected;
    }

    public int compareTo(java.lang.Object o1) {
        int result;
        if (o1 instanceof org.jfree.data.xy.XYDataItem) {
            org.jfree.data.xy.XYDataItem dataItem = ((org.jfree.data.xy.XYDataItem) (o1));
            double compare = this.x.doubleValue() - dataItem.getX().doubleValue();
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(115).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(115).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(115).collectInput("dataItem",dataItem);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(115).collectInput("compare",compare);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(115).collectInput("o1",o1);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(115).collectInput("0.0",0.0);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(115).collectInput("compare > 0.0",compare > 0.0);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(115).collectInput("org.jfree.data.xy.XYDataItem.this.selected",org.jfree.data.xy.XYDataItem.this.selected);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(115).collectInput("org.jfree.data.xy.XYDataItem.this.y",org.jfree.data.xy.XYDataItem.this.y);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(115).collectInput("org.jfree.data.xy.XYDataItem.this.x",org.jfree.data.xy.XYDataItem.this.x);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(115).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(115).collectionEnds();
            }
            if (runtimeAngelicValue) if (compare > 0.0) {
                result = 1;
            } else if (compare < 0.0) {
                result = -1;
            } else {
                result = 0;
            }
        } else {
            result = 1;
        }
        return result;
    }

    public java.lang.Object clone() {
        java.lang.Object clone = null;
        try {
            clone = super.clone();
        } catch (java.lang.CloneNotSupportedException e) {
            e.printStackTrace();
        }
        return clone;
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.xy.XYDataItem)) {
            return false;
        }
        org.jfree.data.xy.XYDataItem that = ((org.jfree.data.xy.XYDataItem) (obj));
        if (!this.x.equals(that.x)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.y, that.y)) {
            return false;
        }
        if (this.selected != that.selected) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result;
        result = this.x.hashCode();
        result = (29 * result) + (this.y != null ? this.y.hashCode() : 0);
        result = org.jfree.chart.util.HashUtilities.hashCode(result, this.selected);
        return result;
    }

    public java.lang.String toString() {
        return ((("[" + getXValue()) + ", ") + getYValue()) + "]";
    }
}
[315775] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659858405701
GPR[EPVATF]-1659858405821
GPR[SPS]-1659858405821
[316089] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYDataItem:222.
GPR[EPS]-1659858406015
GPR[ESUN]-1659858406015
GPR[SSUN]-1659858406015
-209594369
GPR[ESUN]-1659858406113
GPR[SSUN]-1659858406113
-209594369
GPR[ESUN]-1659858406207
GPR[SSUN]-1659858406207
-209594369
GPR[SPVATF]-1659858406301
GPR[EPVATF]-1659858406421
GPR[SPS]-1659858406421
[316610] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class XYDataItem implements java.lang.Cloneable , java.lang.Comparable , java.io.Serializable {
    private static final long serialVersionUID = 2751513470325494890L;

    private java.lang.Number x;

    private java.lang.Number y;

    private boolean selected;

    public XYDataItem(java.lang.Number x, java.lang.Number y) {
        if (x == null) {
            throw new java.lang.IllegalArgumentException("Null 'x' argument.");
        }
        this.x = x;
        this.y = y;
        this.selected = false;
    }

    public XYDataItem(double x, double y) {
        this(new java.lang.Double(x), new java.lang.Double(y));
    }

    public java.lang.Number getX() {
        return this.x;
    }

    public double getXValue() {
        return this.x.doubleValue();
    }

    public java.lang.Number getY() {
        return this.y;
    }

    public double getYValue() {
        double result = java.lang.Double.NaN;
        if (this.y != null) {
            result = this.y.doubleValue();
        }
        return result;
    }

    public void setY(double y) {
        setY(new java.lang.Double(y));
    }

    public void setY(java.lang.Number y) {
        this.y = y;
    }

    public boolean isSelected() {
        return this.selected;
    }

    public void setSelected(boolean selected) {
        this.selected = selected;
    }

    public int compareTo(java.lang.Object o1) {
        int result;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(117).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("o1 instanceof org.jfree.data.xy.XYDataItem",o1 instanceof org.jfree.data.xy.XYDataItem);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("org.jfree.data.xy.XYDataItem.this.selected",org.jfree.data.xy.XYDataItem.this.selected);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("o1",o1);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("org.jfree.data.xy.XYDataItem.this.y",org.jfree.data.xy.XYDataItem.this.y);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("org.jfree.data.xy.XYDataItem.this.x",org.jfree.data.xy.XYDataItem.this.x);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectionEnds();
        }
        if (runtimeAngelicValue) if (o1 instanceof org.jfree.data.xy.XYDataItem) {
            org.jfree.data.xy.XYDataItem dataItem = ((org.jfree.data.xy.XYDataItem) (o1));
            double compare = this.x.doubleValue() - dataItem.getX().doubleValue();
            if (compare > 0.0) {
                result = 1;
            } else if (compare < 0.0) {
                result = -1;
            } else {
                result = 0;
            }
        } else {
            result = 1;
        }
        return result;
    }

    public java.lang.Object clone() {
        java.lang.Object clone = null;
        try {
            clone = super.clone();
        } catch (java.lang.CloneNotSupportedException e) {
            e.printStackTrace();
        }
        return clone;
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.xy.XYDataItem)) {
            return false;
        }
        org.jfree.data.xy.XYDataItem that = ((org.jfree.data.xy.XYDataItem) (obj));
        if (!this.x.equals(that.x)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.y, that.y)) {
            return false;
        }
        if (this.selected != that.selected) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result;
        result = this.x.hashCode();
        result = (29 * result) + (this.y != null ? this.y.hashCode() : 0);
        result = org.jfree.chart.util.HashUtilities.hashCode(result, this.selected);
        return result;
    }

    public java.lang.String toString() {
        return ((("[" + getXValue()) + ", ") + getYValue()) + "]";
    }
}
[316610] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659858406537
GPR[EPVATF]-1659858406656
GPR[SPS]-1659858406656
[316925] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYDataItem:218.
GPR[EPS]-1659858406851
GPR[ESUN]-1659858406851
GPR[SSUN]-1659858406851
1856841872
GPR[ESUN]-1659858406990
GPR[SSUN]-1659858406990
1856841872
GPR[ESUN]-1659858407125
GPR[SSUN]-1659858407125
1856841872
GPR[SPVATF]-1659858407260
GPR[EPVATF]-1659858407391
GPR[SPS]-1659858407391
[317736] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1283.
GPR[EPS]-1659858407662
GPR[SPVATF]-1659858407663
GPR[EPVATF]-1659858407795
GPR[SPS]-1659858407795
[318183] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1283.
GPR[EPS]-1659858408109
GPR[ESUN]-1659858408109
GPR[SSUN]-1659858408109
1856841872
GPR[ESUN]-1659858408248
GPR[SSUN]-1659858408248
1856841872
GPR[SPVATF]-1659858408380
GPR[EPVATF]-1659858408513
GPR[SPS]-1659858408513
[318854] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:719.
GPR[EPS]-1659858408780
GPR[ESUN]-1659858408780
GPR[SSUN]-1659858408780
1856841872
GPR[SPVATF]-1659858408914
GPR[EPVATF]-1659858409046
GPR[SPS]-1659858409046
[319384] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:718.
GPR[EPS]-1659858409310
GPR[SPVATF]-1659858409311
GPR[EPVATF]-1659858409442
GPR[SPS]-1659858409442
[319786] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:718.
GPR[EPS]-1659858409712
GPR[ESUN]-1659858409712
GPR[SSUN]-1659858409712
-1395068711
GPR[SPVATF]-1659858409831
GPR[EPVATF]-1659858409952
GPR[SPS]-1659858409952
[320184] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class XYSeries extends org.jfree.data.general.Series implements java.lang.Cloneable , java.io.Serializable {
    static final long serialVersionUID = -5908509288197150436L;

    protected java.util.List data;

    private int maximumItemCount = java.lang.Integer.MAX_VALUE;

    private boolean autoSort;

    private boolean allowDuplicateXValues;

    private double minX;

    private double maxX;

    private double minY;

    private double maxY;

    public XYSeries(java.lang.Comparable key) {
        this(key, true, true);
    }

    public XYSeries(java.lang.Comparable key, boolean autoSort) {
        this(key, autoSort, true);
    }

    public XYSeries(java.lang.Comparable key, boolean autoSort, boolean allowDuplicateXValues) {
        super(key);
        this.data = new java.util.ArrayList();
        this.autoSort = autoSort;
        this.allowDuplicateXValues = allowDuplicateXValues;
        this.minX = java.lang.Double.NaN;
        this.maxX = java.lang.Double.NaN;
        this.minY = java.lang.Double.NaN;
        this.maxY = java.lang.Double.NaN;
    }

    public double getMinX() {
        return this.minX;
    }

    public double getMaxX() {
        return this.maxX;
    }

    public double getMinY() {
        return this.minY;
    }

    public double getMaxY() {
        return this.maxY;
    }

    private void updateBoundsForAddedItem(org.jfree.data.xy.XYDataItem item) {
        double x = item.getXValue();
        this.minX = minIgnoreNaN(this.minX, x);
        this.maxX = maxIgnoreNaN(this.maxX, x);
        if (item.getY() != null) {
            double y = item.getYValue();
            this.minY = minIgnoreNaN(this.minY, y);
            this.maxY = maxIgnoreNaN(this.maxY, y);
        }
    }

    private void updateBoundsForRemovedItem(org.jfree.data.xy.XYDataItem item) {
        boolean itemContributesToXBounds = false;
        boolean itemContributesToYBounds = false;
        double x = item.getXValue();
        if (!java.lang.Double.isNaN(x)) {
            if ((x <= this.minX) || (x >= this.maxX)) {
                itemContributesToXBounds = true;
            }
        }
        if (item.getY() != null) {
            double y = item.getYValue();
            if (!java.lang.Double.isNaN(y)) {
                if ((y <= this.minY) || (y >= this.maxY)) {
                    itemContributesToYBounds = true;
                }
            }
        }
        if (itemContributesToYBounds) {
            findBoundsByIteration();
        } else if (itemContributesToXBounds) {
            if (getAutoSort()) {
                this.minX = getX(0).doubleValue();
                this.maxX = getX(getItemCount() - 1).doubleValue();
            } else {
                findBoundsByIteration();
            }
        }
    }

    private void findBoundsByIteration() {
        this.minX = java.lang.Double.NaN;
        this.maxX = java.lang.Double.NaN;
        this.minY = java.lang.Double.NaN;
        this.maxY = java.lang.Double.NaN;
        java.util.Iterator iterator = this.data.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.xy.XYDataItem item = ((org.jfree.data.xy.XYDataItem) (iterator.next()));
            updateBoundsForAddedItem(item);
        } 
    }

    public boolean getAutoSort() {
        return this.autoSort;
    }

    public boolean getAllowDuplicateXValues() {
        return this.allowDuplicateXValues;
    }

    public int getItemCount() {
        return this.data.size();
    }

    public java.util.List getItems() {
        return java.util.Collections.unmodifiableList(this.data);
    }

    public int getMaximumItemCount() {
        return this.maximumItemCount;
    }

    public void setMaximumItemCount(int maximum) {
        this.maximumItemCount = maximum;
        int remove = this.data.size() - maximum;
        if (remove > 0) {
            this.data.subList(0, remove).clear();
            findBoundsByIteration();
            fireSeriesChanged();
        }
    }

    public void add(org.jfree.data.xy.XYDataItem item) {
        add(item, true);
    }

    public void add(double x, double y) {
        add(new java.lang.Double(x), new java.lang.Double(y), true);
    }

    public void add(double x, double y, boolean notify) {
        add(new java.lang.Double(x), new java.lang.Double(y), notify);
    }

    public void add(double x, java.lang.Number y) {
        add(new java.lang.Double(x), y);
    }

    public void add(double x, java.lang.Number y, boolean notify) {
        add(new java.lang.Double(x), y, notify);
    }

    public void add(java.lang.Number x, java.lang.Number y) {
        add(x, y, true);
    }

    public void add(java.lang.Number x, java.lang.Number y, boolean notify) {
        org.jfree.data.xy.XYDataItem item = new org.jfree.data.xy.XYDataItem(x, y);
        add(item, notify);
    }

    public void add(org.jfree.data.xy.XYDataItem item, boolean notify) {
        if (item == null) {
            throw new java.lang.IllegalArgumentException("Null 'item' argument.");
        }
        item = ((org.jfree.data.xy.XYDataItem) (item.clone()));
        if (this.autoSort) {
            int index = java.util.Collections.binarySearch(this.data, item);
            if (index < 0) {
                this.data.add((-index) - 1, item);
            } else if (this.allowDuplicateXValues) {
                int size = this.data.size();
                while ((index < size) && (item.compareTo(this.data.get(index)) == 0)) {
                    index++;
                } 
                if (index < this.data.size()) {
                    this.data.add(index, item);
                } else {
                    this.data.add(item);
                }
            } else {
                throw new org.jfree.data.general.SeriesException("X-value already exists.");
            }
        } else {
            if (!this.allowDuplicateXValues) {
                int index = indexOf(item.getX());
                if (index >= 0) {
                    throw new org.jfree.data.general.SeriesException("X-value already exists.");
                }
            }
            this.data.add(item);
        }
        updateBoundsForAddedItem(item);
        if (getItemCount() > this.maximumItemCount) {
            org.jfree.data.xy.XYDataItem removed = ((org.jfree.data.xy.XYDataItem) (this.data.remove(0)));
            updateBoundsForRemovedItem(removed);
        }
        if (notify) {
            fireSeriesChanged();
        }
    }

    public void delete(int start, int end) {
        this.data.subList(start, end + 1).clear();
        findBoundsByIteration();
        fireSeriesChanged();
    }

    public org.jfree.data.xy.XYDataItem remove(int index) {
        org.jfree.data.xy.XYDataItem removed = ((org.jfree.data.xy.XYDataItem) (this.data.remove(index)));
        updateBoundsForRemovedItem(removed);
        fireSeriesChanged();
        return removed;
    }

    public org.jfree.data.xy.XYDataItem remove(java.lang.Number x) {
        return remove(indexOf(x));
    }

    public void clear() {
        if (this.data.size() > 0) {
            this.data.clear();
            this.minX = java.lang.Double.NaN;
            this.maxX = java.lang.Double.NaN;
            this.minY = java.lang.Double.NaN;
            this.maxY = java.lang.Double.NaN;
            fireSeriesChanged();
        }
    }

    public org.jfree.data.xy.XYDataItem getDataItem(int index) {
        org.jfree.data.xy.XYDataItem item = ((org.jfree.data.xy.XYDataItem) (this.data.get(index)));
        return ((org.jfree.data.xy.XYDataItem) (item.clone()));
    }

    org.jfree.data.xy.XYDataItem getRawDataItem(int index) {
        return ((org.jfree.data.xy.XYDataItem) (this.data.get(index)));
    }

    public java.lang.Number getX(int index) {
        return getRawDataItem(index).getX();
    }

    public java.lang.Number getY(int index) {
        return getRawDataItem(index).getY();
    }

    public void updateByIndex(int index, java.lang.Number y) {
        org.jfree.data.xy.XYDataItem item = getRawDataItem(index);
        boolean iterate = false;
        double oldY = item.getYValue();
        if (!java.lang.Double.isNaN(oldY)) {
            iterate = (oldY <= this.minY) || (oldY >= this.maxY);
        }
        item.setY(y);
        if (iterate) {
            findBoundsByIteration();
        } else if (y != null) {
            double yy = y.doubleValue();
            this.minY = minIgnoreNaN(this.minY, yy);
            this.maxY = maxIgnoreNaN(this.maxY, yy);
        }
        fireSeriesChanged();
    }

    private double minIgnoreNaN(double a, double b) {
        if (java.lang.Double.isNaN(a)) {
            return b;
        } else if (java.lang.Double.isNaN(b)) {
            return a;
        } else {
            return java.lang.Math.min(a, b);
        }
    }

    private double maxIgnoreNaN(double a, double b) {
        if (java.lang.Double.isNaN(a)) {
            return b;
        } else if (java.lang.Double.isNaN(b)) {
            return a;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(124).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(124).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(124).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(124).collectInput("org.jfree.data.xy.XYSeries.this.maxX",org.jfree.data.xy.XYSeries.this.maxX);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(124).collectInput("org.jfree.data.xy.XYSeries.this.allowDuplicateXValues",org.jfree.data.xy.XYSeries.this.allowDuplicateXValues);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(124).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(124).collectInput("org.jfree.data.xy.XYSeries.this.maxY",org.jfree.data.xy.XYSeries.this.maxY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(124).collectInput("org.jfree.data.xy.XYSeries.this.minX",org.jfree.data.xy.XYSeries.this.minX);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(124).collectInput("org.jfree.data.xy.XYSeries.this.minY",org.jfree.data.xy.XYSeries.this.minY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(124).collectInput("org.jfree.data.xy.XYSeries.this.maximumItemCount",org.jfree.data.xy.XYSeries.this.maximumItemCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(124).collectInput("org.jfree.data.xy.XYSeries.this.data",org.jfree.data.xy.XYSeries.this.data);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(124).collectInput("org.jfree.data.xy.XYSeries.this.autoSort",org.jfree.data.xy.XYSeries.this.autoSort);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(124).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(124).collectionEnds();
            }
            if (runtimeAngelicValue)
                return java.lang.Math.max(a, b);

        }
    }

    public void update(java.lang.Number x, java.lang.Number y) {
        int index = indexOf(x);
        if (index < 0) {
            throw new org.jfree.data.general.SeriesException("No observation for x = " + x);
        } else {
            updateByIndex(index, y);
        }
    }

    public org.jfree.data.xy.XYDataItem addOrUpdate(double x, double y) {
        return addOrUpdate(new java.lang.Double(x), new java.lang.Double(y));
    }

    public org.jfree.data.xy.XYDataItem addOrUpdate(java.lang.Number x, java.lang.Number y) {
        return addOrUpdate(new org.jfree.data.xy.XYDataItem(x, y));
    }

    public org.jfree.data.xy.XYDataItem addOrUpdate(org.jfree.data.xy.XYDataItem item) {
        if (item == null) {
            throw new java.lang.IllegalArgumentException("Null 'item' argument.");
        }
        if (this.allowDuplicateXValues) {
            add(item);
            return null;
        }
        org.jfree.data.xy.XYDataItem overwritten = null;
        int index = indexOf(item.getX());
        if (index >= 0) {
            org.jfree.data.xy.XYDataItem existing = ((org.jfree.data.xy.XYDataItem) (this.data.get(index)));
            overwritten = ((org.jfree.data.xy.XYDataItem) (existing.clone()));
            boolean iterate = false;
            double oldY = existing.getYValue();
            if (!java.lang.Double.isNaN(oldY)) {
                iterate = (oldY <= this.minY) || (oldY >= this.maxY);
            }
            existing.setY(item.getY());
            if (iterate) {
                findBoundsByIteration();
            } else if (item.getY() != null) {
                double yy = item.getY().doubleValue();
                this.minY = minIgnoreNaN(this.minY, yy);
                this.maxY = minIgnoreNaN(this.maxY, yy);
            }
        } else {
            item = ((org.jfree.data.xy.XYDataItem) (item.clone()));
            if (this.autoSort) {
                this.data.add((-index) - 1, item);
            } else {
                this.data.add(item);
            }
            updateBoundsForAddedItem(item);
            if (getItemCount() > this.maximumItemCount) {
                org.jfree.data.xy.XYDataItem removed = ((org.jfree.data.xy.XYDataItem) (this.data.remove(0)));
                updateBoundsForRemovedItem(removed);
            }
        }
        fireSeriesChanged();
        return overwritten;
    }

    public int indexOf(java.lang.Number x) {
        if (this.autoSort) {
            return java.util.Collections.binarySearch(this.data, new org.jfree.data.xy.XYDataItem(x, null));
        } else {
            for (int i = 0; i < this.data.size(); i++) {
                org.jfree.data.xy.XYDataItem item = ((org.jfree.data.xy.XYDataItem) (this.data.get(i)));
                if (item.getX().equals(x)) {
                    return i;
                }
            }
            return -1;
        }
    }

    public double[][] toArray() {
        int itemCount = getItemCount();
        double[][] result = new double[2][itemCount];
        for (int i = 0; i < itemCount; i++) {
            result[0][i] = this.getX(i).doubleValue();
            java.lang.Number y = getY(i);
            if (y != null) {
                result[1][i] = y.doubleValue();
            } else {
                result[1][i] = java.lang.Double.NaN;
            }
        }
        return result;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.data.xy.XYSeries clone = ((org.jfree.data.xy.XYSeries) (super.clone()));
        clone.data = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.data)));
        return clone;
    }

    public org.jfree.data.xy.XYSeries createCopy(int start, int end) throws java.lang.CloneNotSupportedException {
        org.jfree.data.xy.XYSeries copy = ((org.jfree.data.xy.XYSeries) (super.clone()));
        copy.data = new java.util.ArrayList();
        if (this.data.size() > 0) {
            for (int index = start; index <= end; index++) {
                org.jfree.data.xy.XYDataItem item = ((org.jfree.data.xy.XYDataItem) (this.data.get(index)));
                org.jfree.data.xy.XYDataItem clone = ((org.jfree.data.xy.XYDataItem) (item.clone()));
                try {
                    copy.add(clone);
                } catch (org.jfree.data.general.SeriesException e) {
                    java.lang.System.err.println("Unable to add cloned data item.");
                }
            }
        }
        return copy;
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.xy.XYSeries)) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }
        org.jfree.data.xy.XYSeries that = ((org.jfree.data.xy.XYSeries) (obj));
        if (this.maximumItemCount != that.maximumItemCount) {
            return false;
        }
        if (this.autoSort != that.autoSort) {
            return false;
        }
        if (this.allowDuplicateXValues != that.allowDuplicateXValues) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.data, that.data)) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result = super.hashCode();
        int count = getItemCount();
        if (count > 0) {
            org.jfree.data.xy.XYDataItem item = getRawDataItem(0);
            result = (29 * result) + item.hashCode();
        }
        if (count > 1) {
            org.jfree.data.xy.XYDataItem item = getRawDataItem(count - 1);
            result = (29 * result) + item.hashCode();
        }
        if (count > 2) {
            org.jfree.data.xy.XYDataItem item = getRawDataItem(count / 2);
            result = (29 * result) + item.hashCode();
        }
        result = (29 * result) + this.maximumItemCount;
        result = (29 * result) + (this.autoSort ? 1 : 0);
        result = (29 * result) + (this.allowDuplicateXValues ? 1 : 0);
        return result;
    }
}
[320184] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858410110
GPR[SSUN]-1659858410110
-1395068711
GPR[SPVATF]-1659858410232
GPR[EPVATF]-1659858410356
GPR[SPS]-1659858410356
[320579] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class XYSeries extends org.jfree.data.general.Series implements java.lang.Cloneable , java.io.Serializable {
    static final long serialVersionUID = -5908509288197150436L;

    protected java.util.List data;

    private int maximumItemCount = java.lang.Integer.MAX_VALUE;

    private boolean autoSort;

    private boolean allowDuplicateXValues;

    private double minX;

    private double maxX;

    private double minY;

    private double maxY;

    public XYSeries(java.lang.Comparable key) {
        this(key, true, true);
    }

    public XYSeries(java.lang.Comparable key, boolean autoSort) {
        this(key, autoSort, true);
    }

    public XYSeries(java.lang.Comparable key, boolean autoSort, boolean allowDuplicateXValues) {
        super(key);
        this.data = new java.util.ArrayList();
        this.autoSort = autoSort;
        this.allowDuplicateXValues = allowDuplicateXValues;
        this.minX = java.lang.Double.NaN;
        this.maxX = java.lang.Double.NaN;
        this.minY = java.lang.Double.NaN;
        this.maxY = java.lang.Double.NaN;
    }

    public double getMinX() {
        return this.minX;
    }

    public double getMaxX() {
        return this.maxX;
    }

    public double getMinY() {
        return this.minY;
    }

    public double getMaxY() {
        return this.maxY;
    }

    private void updateBoundsForAddedItem(org.jfree.data.xy.XYDataItem item) {
        double x = item.getXValue();
        this.minX = minIgnoreNaN(this.minX, x);
        this.maxX = maxIgnoreNaN(this.maxX, x);
        if (item.getY() != null) {
            double y = item.getYValue();
            this.minY = minIgnoreNaN(this.minY, y);
            this.maxY = maxIgnoreNaN(this.maxY, y);
        }
    }

    private void updateBoundsForRemovedItem(org.jfree.data.xy.XYDataItem item) {
        boolean itemContributesToXBounds = false;
        boolean itemContributesToYBounds = false;
        double x = item.getXValue();
        if (!java.lang.Double.isNaN(x)) {
            if ((x <= this.minX) || (x >= this.maxX)) {
                itemContributesToXBounds = true;
            }
        }
        if (item.getY() != null) {
            double y = item.getYValue();
            if (!java.lang.Double.isNaN(y)) {
                if ((y <= this.minY) || (y >= this.maxY)) {
                    itemContributesToYBounds = true;
                }
            }
        }
        if (itemContributesToYBounds) {
            findBoundsByIteration();
        } else if (itemContributesToXBounds) {
            if (getAutoSort()) {
                this.minX = getX(0).doubleValue();
                this.maxX = getX(getItemCount() - 1).doubleValue();
            } else {
                findBoundsByIteration();
            }
        }
    }

    private void findBoundsByIteration() {
        this.minX = java.lang.Double.NaN;
        this.maxX = java.lang.Double.NaN;
        this.minY = java.lang.Double.NaN;
        this.maxY = java.lang.Double.NaN;
        java.util.Iterator iterator = this.data.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.xy.XYDataItem item = ((org.jfree.data.xy.XYDataItem) (iterator.next()));
            updateBoundsForAddedItem(item);
        } 
    }

    public boolean getAutoSort() {
        return this.autoSort;
    }

    public boolean getAllowDuplicateXValues() {
        return this.allowDuplicateXValues;
    }

    public int getItemCount() {
        return this.data.size();
    }

    public java.util.List getItems() {
        return java.util.Collections.unmodifiableList(this.data);
    }

    public int getMaximumItemCount() {
        return this.maximumItemCount;
    }

    public void setMaximumItemCount(int maximum) {
        this.maximumItemCount = maximum;
        int remove = this.data.size() - maximum;
        if (remove > 0) {
            this.data.subList(0, remove).clear();
            findBoundsByIteration();
            fireSeriesChanged();
        }
    }

    public void add(org.jfree.data.xy.XYDataItem item) {
        add(item, true);
    }

    public void add(double x, double y) {
        add(new java.lang.Double(x), new java.lang.Double(y), true);
    }

    public void add(double x, double y, boolean notify) {
        add(new java.lang.Double(x), new java.lang.Double(y), notify);
    }

    public void add(double x, java.lang.Number y) {
        add(new java.lang.Double(x), y);
    }

    public void add(double x, java.lang.Number y, boolean notify) {
        add(new java.lang.Double(x), y, notify);
    }

    public void add(java.lang.Number x, java.lang.Number y) {
        add(x, y, true);
    }

    public void add(java.lang.Number x, java.lang.Number y, boolean notify) {
        org.jfree.data.xy.XYDataItem item = new org.jfree.data.xy.XYDataItem(x, y);
        add(item, notify);
    }

    public void add(org.jfree.data.xy.XYDataItem item, boolean notify) {
        if (item == null) {
            throw new java.lang.IllegalArgumentException("Null 'item' argument.");
        }
        item = ((org.jfree.data.xy.XYDataItem) (item.clone()));
        if (this.autoSort) {
            int index = java.util.Collections.binarySearch(this.data, item);
            if (index < 0) {
                this.data.add((-index) - 1, item);
            } else if (this.allowDuplicateXValues) {
                int size = this.data.size();
                while ((index < size) && (item.compareTo(this.data.get(index)) == 0)) {
                    index++;
                } 
                if (index < this.data.size()) {
                    this.data.add(index, item);
                } else {
                    this.data.add(item);
                }
            } else {
                throw new org.jfree.data.general.SeriesException("X-value already exists.");
            }
        } else {
            if (!this.allowDuplicateXValues) {
                int index = indexOf(item.getX());
                if (index >= 0) {
                    throw new org.jfree.data.general.SeriesException("X-value already exists.");
                }
            }
            this.data.add(item);
        }
        updateBoundsForAddedItem(item);
        if (getItemCount() > this.maximumItemCount) {
            org.jfree.data.xy.XYDataItem removed = ((org.jfree.data.xy.XYDataItem) (this.data.remove(0)));
            updateBoundsForRemovedItem(removed);
        }
        if (notify) {
            fireSeriesChanged();
        }
    }

    public void delete(int start, int end) {
        this.data.subList(start, end + 1).clear();
        findBoundsByIteration();
        fireSeriesChanged();
    }

    public org.jfree.data.xy.XYDataItem remove(int index) {
        org.jfree.data.xy.XYDataItem removed = ((org.jfree.data.xy.XYDataItem) (this.data.remove(index)));
        updateBoundsForRemovedItem(removed);
        fireSeriesChanged();
        return removed;
    }

    public org.jfree.data.xy.XYDataItem remove(java.lang.Number x) {
        return remove(indexOf(x));
    }

    public void clear() {
        if (this.data.size() > 0) {
            this.data.clear();
            this.minX = java.lang.Double.NaN;
            this.maxX = java.lang.Double.NaN;
            this.minY = java.lang.Double.NaN;
            this.maxY = java.lang.Double.NaN;
            fireSeriesChanged();
        }
    }

    public org.jfree.data.xy.XYDataItem getDataItem(int index) {
        org.jfree.data.xy.XYDataItem item = ((org.jfree.data.xy.XYDataItem) (this.data.get(index)));
        return ((org.jfree.data.xy.XYDataItem) (item.clone()));
    }

    org.jfree.data.xy.XYDataItem getRawDataItem(int index) {
        return ((org.jfree.data.xy.XYDataItem) (this.data.get(index)));
    }

    public java.lang.Number getX(int index) {
        return getRawDataItem(index).getX();
    }

    public java.lang.Number getY(int index) {
        return getRawDataItem(index).getY();
    }

    public void updateByIndex(int index, java.lang.Number y) {
        org.jfree.data.xy.XYDataItem item = getRawDataItem(index);
        boolean iterate = false;
        double oldY = item.getYValue();
        if (!java.lang.Double.isNaN(oldY)) {
            iterate = (oldY <= this.minY) || (oldY >= this.maxY);
        }
        item.setY(y);
        if (iterate) {
            findBoundsByIteration();
        } else if (y != null) {
            double yy = y.doubleValue();
            this.minY = minIgnoreNaN(this.minY, yy);
            this.maxY = maxIgnoreNaN(this.maxY, yy);
        }
        fireSeriesChanged();
    }

    private double minIgnoreNaN(double a, double b) {
        if (java.lang.Double.isNaN(a)) {
            return b;
        } else if (java.lang.Double.isNaN(b)) {
            return a;
        } else {
            return java.lang.Math.min(a, b);
        }
    }

    private double maxIgnoreNaN(double a, double b) {
        if (java.lang.Double.isNaN(a)) {
            return b;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(125).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(125).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(125).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(125).collectInput("org.jfree.data.xy.XYSeries.this.maxX",org.jfree.data.xy.XYSeries.this.maxX);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(125).collectInput("org.jfree.data.xy.XYSeries.this.allowDuplicateXValues",org.jfree.data.xy.XYSeries.this.allowDuplicateXValues);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(125).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(125).collectInput("org.jfree.data.xy.XYSeries.this.maxY",org.jfree.data.xy.XYSeries.this.maxY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(125).collectInput("org.jfree.data.xy.XYSeries.this.minX",org.jfree.data.xy.XYSeries.this.minX);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(125).collectInput("org.jfree.data.xy.XYSeries.this.minY",org.jfree.data.xy.XYSeries.this.minY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(125).collectInput("org.jfree.data.xy.XYSeries.this.maximumItemCount",org.jfree.data.xy.XYSeries.this.maximumItemCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(125).collectInput("org.jfree.data.xy.XYSeries.this.data",org.jfree.data.xy.XYSeries.this.data);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(125).collectInput("org.jfree.data.xy.XYSeries.this.autoSort",org.jfree.data.xy.XYSeries.this.autoSort);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(125).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(125).collectionEnds();
            }
            if (runtimeAngelicValue) if (java.lang.Double.isNaN(b)) {
                return a;
            } else {
                return java.lang.Math.max(a, b);
            }
        }
    }

    public void update(java.lang.Number x, java.lang.Number y) {
        int index = indexOf(x);
        if (index < 0) {
            throw new org.jfree.data.general.SeriesException("No observation for x = " + x);
        } else {
            updateByIndex(index, y);
        }
    }

    public org.jfree.data.xy.XYDataItem addOrUpdate(double x, double y) {
        return addOrUpdate(new java.lang.Double(x), new java.lang.Double(y));
    }

    public org.jfree.data.xy.XYDataItem addOrUpdate(java.lang.Number x, java.lang.Number y) {
        return addOrUpdate(new org.jfree.data.xy.XYDataItem(x, y));
    }

    public org.jfree.data.xy.XYDataItem addOrUpdate(org.jfree.data.xy.XYDataItem item) {
        if (item == null) {
            throw new java.lang.IllegalArgumentException("Null 'item' argument.");
        }
        if (this.allowDuplicateXValues) {
            add(item);
            return null;
        }
        org.jfree.data.xy.XYDataItem overwritten = null;
        int index = indexOf(item.getX());
        if (index >= 0) {
            org.jfree.data.xy.XYDataItem existing = ((org.jfree.data.xy.XYDataItem) (this.data.get(index)));
            overwritten = ((org.jfree.data.xy.XYDataItem) (existing.clone()));
            boolean iterate = false;
            double oldY = existing.getYValue();
            if (!java.lang.Double.isNaN(oldY)) {
                iterate = (oldY <= this.minY) || (oldY >= this.maxY);
            }
            existing.setY(item.getY());
            if (iterate) {
                findBoundsByIteration();
            } else if (item.getY() != null) {
                double yy = item.getY().doubleValue();
                this.minY = minIgnoreNaN(this.minY, yy);
                this.maxY = minIgnoreNaN(this.maxY, yy);
            }
        } else {
            item = ((org.jfree.data.xy.XYDataItem) (item.clone()));
            if (this.autoSort) {
                this.data.add((-index) - 1, item);
            } else {
                this.data.add(item);
            }
            updateBoundsForAddedItem(item);
            if (getItemCount() > this.maximumItemCount) {
                org.jfree.data.xy.XYDataItem removed = ((org.jfree.data.xy.XYDataItem) (this.data.remove(0)));
                updateBoundsForRemovedItem(removed);
            }
        }
        fireSeriesChanged();
        return overwritten;
    }

    public int indexOf(java.lang.Number x) {
        if (this.autoSort) {
            return java.util.Collections.binarySearch(this.data, new org.jfree.data.xy.XYDataItem(x, null));
        } else {
            for (int i = 0; i < this.data.size(); i++) {
                org.jfree.data.xy.XYDataItem item = ((org.jfree.data.xy.XYDataItem) (this.data.get(i)));
                if (item.getX().equals(x)) {
                    return i;
                }
            }
            return -1;
        }
    }

    public double[][] toArray() {
        int itemCount = getItemCount();
        double[][] result = new double[2][itemCount];
        for (int i = 0; i < itemCount; i++) {
            result[0][i] = this.getX(i).doubleValue();
            java.lang.Number y = getY(i);
            if (y != null) {
                result[1][i] = y.doubleValue();
            } else {
                result[1][i] = java.lang.Double.NaN;
            }
        }
        return result;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.data.xy.XYSeries clone = ((org.jfree.data.xy.XYSeries) (super.clone()));
        clone.data = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.data)));
        return clone;
    }

    public org.jfree.data.xy.XYSeries createCopy(int start, int end) throws java.lang.CloneNotSupportedException {
        org.jfree.data.xy.XYSeries copy = ((org.jfree.data.xy.XYSeries) (super.clone()));
        copy.data = new java.util.ArrayList();
        if (this.data.size() > 0) {
            for (int index = start; index <= end; index++) {
                org.jfree.data.xy.XYDataItem item = ((org.jfree.data.xy.XYDataItem) (this.data.get(index)));
                org.jfree.data.xy.XYDataItem clone = ((org.jfree.data.xy.XYDataItem) (item.clone()));
                try {
                    copy.add(clone);
                } catch (org.jfree.data.general.SeriesException e) {
                    java.lang.System.err.println("Unable to add cloned data item.");
                }
            }
        }
        return copy;
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.xy.XYSeries)) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }
        org.jfree.data.xy.XYSeries that = ((org.jfree.data.xy.XYSeries) (obj));
        if (this.maximumItemCount != that.maximumItemCount) {
            return false;
        }
        if (this.autoSort != that.autoSort) {
            return false;
        }
        if (this.allowDuplicateXValues != that.allowDuplicateXValues) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.data, that.data)) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result = super.hashCode();
        int count = getItemCount();
        if (count > 0) {
            org.jfree.data.xy.XYDataItem item = getRawDataItem(0);
            result = (29 * result) + item.hashCode();
        }
        if (count > 1) {
            org.jfree.data.xy.XYDataItem item = getRawDataItem(count - 1);
            result = (29 * result) + item.hashCode();
        }
        if (count > 2) {
            org.jfree.data.xy.XYDataItem item = getRawDataItem(count / 2);
            result = (29 * result) + item.hashCode();
        }
        result = (29 * result) + this.maximumItemCount;
        result = (29 * result) + (this.autoSort ? 1 : 0);
        result = (29 * result) + (this.allowDuplicateXValues ? 1 : 0);
        return result;
    }
}
[320579] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659858410505
GPR[EPVATF]-1659858410629
GPR[SPS]-1659858410629
[320927] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:726.
GPR[EPS]-1659858410853
GPR[ESUN]-1659858410853
GPR[SSUN]-1659858410853
-1395068711
GPR[SPVATF]-1659858410972
GPR[EPVATF]-1659858411096
GPR[SPS]-1659858411096
[321318] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class XYSeries extends org.jfree.data.general.Series implements java.lang.Cloneable , java.io.Serializable {
    static final long serialVersionUID = -5908509288197150436L;

    protected java.util.List data;

    private int maximumItemCount = java.lang.Integer.MAX_VALUE;

    private boolean autoSort;

    private boolean allowDuplicateXValues;

    private double minX;

    private double maxX;

    private double minY;

    private double maxY;

    public XYSeries(java.lang.Comparable key) {
        this(key, true, true);
    }

    public XYSeries(java.lang.Comparable key, boolean autoSort) {
        this(key, autoSort, true);
    }

    public XYSeries(java.lang.Comparable key, boolean autoSort, boolean allowDuplicateXValues) {
        super(key);
        this.data = new java.util.ArrayList();
        this.autoSort = autoSort;
        this.allowDuplicateXValues = allowDuplicateXValues;
        this.minX = java.lang.Double.NaN;
        this.maxX = java.lang.Double.NaN;
        this.minY = java.lang.Double.NaN;
        this.maxY = java.lang.Double.NaN;
    }

    public double getMinX() {
        return this.minX;
    }

    public double getMaxX() {
        return this.maxX;
    }

    public double getMinY() {
        return this.minY;
    }

    public double getMaxY() {
        return this.maxY;
    }

    private void updateBoundsForAddedItem(org.jfree.data.xy.XYDataItem item) {
        double x = item.getXValue();
        this.minX = minIgnoreNaN(this.minX, x);
        this.maxX = maxIgnoreNaN(this.maxX, x);
        if (item.getY() != null) {
            double y = item.getYValue();
            this.minY = minIgnoreNaN(this.minY, y);
            this.maxY = maxIgnoreNaN(this.maxY, y);
        }
    }

    private void updateBoundsForRemovedItem(org.jfree.data.xy.XYDataItem item) {
        boolean itemContributesToXBounds = false;
        boolean itemContributesToYBounds = false;
        double x = item.getXValue();
        if (!java.lang.Double.isNaN(x)) {
            if ((x <= this.minX) || (x >= this.maxX)) {
                itemContributesToXBounds = true;
            }
        }
        if (item.getY() != null) {
            double y = item.getYValue();
            if (!java.lang.Double.isNaN(y)) {
                if ((y <= this.minY) || (y >= this.maxY)) {
                    itemContributesToYBounds = true;
                }
            }
        }
        if (itemContributesToYBounds) {
            findBoundsByIteration();
        } else if (itemContributesToXBounds) {
            if (getAutoSort()) {
                this.minX = getX(0).doubleValue();
                this.maxX = getX(getItemCount() - 1).doubleValue();
            } else {
                findBoundsByIteration();
            }
        }
    }

    private void findBoundsByIteration() {
        this.minX = java.lang.Double.NaN;
        this.maxX = java.lang.Double.NaN;
        this.minY = java.lang.Double.NaN;
        this.maxY = java.lang.Double.NaN;
        java.util.Iterator iterator = this.data.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.xy.XYDataItem item = ((org.jfree.data.xy.XYDataItem) (iterator.next()));
            updateBoundsForAddedItem(item);
        } 
    }

    public boolean getAutoSort() {
        return this.autoSort;
    }

    public boolean getAllowDuplicateXValues() {
        return this.allowDuplicateXValues;
    }

    public int getItemCount() {
        return this.data.size();
    }

    public java.util.List getItems() {
        return java.util.Collections.unmodifiableList(this.data);
    }

    public int getMaximumItemCount() {
        return this.maximumItemCount;
    }

    public void setMaximumItemCount(int maximum) {
        this.maximumItemCount = maximum;
        int remove = this.data.size() - maximum;
        if (remove > 0) {
            this.data.subList(0, remove).clear();
            findBoundsByIteration();
            fireSeriesChanged();
        }
    }

    public void add(org.jfree.data.xy.XYDataItem item) {
        add(item, true);
    }

    public void add(double x, double y) {
        add(new java.lang.Double(x), new java.lang.Double(y), true);
    }

    public void add(double x, double y, boolean notify) {
        add(new java.lang.Double(x), new java.lang.Double(y), notify);
    }

    public void add(double x, java.lang.Number y) {
        add(new java.lang.Double(x), y);
    }

    public void add(double x, java.lang.Number y, boolean notify) {
        add(new java.lang.Double(x), y, notify);
    }

    public void add(java.lang.Number x, java.lang.Number y) {
        add(x, y, true);
    }

    public void add(java.lang.Number x, java.lang.Number y, boolean notify) {
        org.jfree.data.xy.XYDataItem item = new org.jfree.data.xy.XYDataItem(x, y);
        add(item, notify);
    }

    public void add(org.jfree.data.xy.XYDataItem item, boolean notify) {
        if (item == null) {
            throw new java.lang.IllegalArgumentException("Null 'item' argument.");
        }
        item = ((org.jfree.data.xy.XYDataItem) (item.clone()));
        if (this.autoSort) {
            int index = java.util.Collections.binarySearch(this.data, item);
            if (index < 0) {
                this.data.add((-index) - 1, item);
            } else if (this.allowDuplicateXValues) {
                int size = this.data.size();
                while ((index < size) && (item.compareTo(this.data.get(index)) == 0)) {
                    index++;
                } 
                if (index < this.data.size()) {
                    this.data.add(index, item);
                } else {
                    this.data.add(item);
                }
            } else {
                throw new org.jfree.data.general.SeriesException("X-value already exists.");
            }
        } else {
            if (!this.allowDuplicateXValues) {
                int index = indexOf(item.getX());
                if (index >= 0) {
                    throw new org.jfree.data.general.SeriesException("X-value already exists.");
                }
            }
            this.data.add(item);
        }
        updateBoundsForAddedItem(item);
        if (getItemCount() > this.maximumItemCount) {
            org.jfree.data.xy.XYDataItem removed = ((org.jfree.data.xy.XYDataItem) (this.data.remove(0)));
            updateBoundsForRemovedItem(removed);
        }
        if (notify) {
            fireSeriesChanged();
        }
    }

    public void delete(int start, int end) {
        this.data.subList(start, end + 1).clear();
        findBoundsByIteration();
        fireSeriesChanged();
    }

    public org.jfree.data.xy.XYDataItem remove(int index) {
        org.jfree.data.xy.XYDataItem removed = ((org.jfree.data.xy.XYDataItem) (this.data.remove(index)));
        updateBoundsForRemovedItem(removed);
        fireSeriesChanged();
        return removed;
    }

    public org.jfree.data.xy.XYDataItem remove(java.lang.Number x) {
        return remove(indexOf(x));
    }

    public void clear() {
        if (this.data.size() > 0) {
            this.data.clear();
            this.minX = java.lang.Double.NaN;
            this.maxX = java.lang.Double.NaN;
            this.minY = java.lang.Double.NaN;
            this.maxY = java.lang.Double.NaN;
            fireSeriesChanged();
        }
    }

    public org.jfree.data.xy.XYDataItem getDataItem(int index) {
        org.jfree.data.xy.XYDataItem item = ((org.jfree.data.xy.XYDataItem) (this.data.get(index)));
        return ((org.jfree.data.xy.XYDataItem) (item.clone()));
    }

    org.jfree.data.xy.XYDataItem getRawDataItem(int index) {
        return ((org.jfree.data.xy.XYDataItem) (this.data.get(index)));
    }

    public java.lang.Number getX(int index) {
        return getRawDataItem(index).getX();
    }

    public java.lang.Number getY(int index) {
        return getRawDataItem(index).getY();
    }

    public void updateByIndex(int index, java.lang.Number y) {
        org.jfree.data.xy.XYDataItem item = getRawDataItem(index);
        boolean iterate = false;
        double oldY = item.getYValue();
        if (!java.lang.Double.isNaN(oldY)) {
            iterate = (oldY <= this.minY) || (oldY >= this.maxY);
        }
        item.setY(y);
        if (iterate) {
            findBoundsByIteration();
        } else if (y != null) {
            double yy = y.doubleValue();
            this.minY = minIgnoreNaN(this.minY, yy);
            this.maxY = maxIgnoreNaN(this.maxY, yy);
        }
        fireSeriesChanged();
    }

    private double minIgnoreNaN(double a, double b) {
        if (java.lang.Double.isNaN(a)) {
            return b;
        } else if (java.lang.Double.isNaN(b)) {
            return a;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(127).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("org.jfree.data.xy.XYSeries.this.maxX",org.jfree.data.xy.XYSeries.this.maxX);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("org.jfree.data.xy.XYSeries.this.allowDuplicateXValues",org.jfree.data.xy.XYSeries.this.allowDuplicateXValues);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("org.jfree.data.xy.XYSeries.this.maxY",org.jfree.data.xy.XYSeries.this.maxY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("org.jfree.data.xy.XYSeries.this.minX",org.jfree.data.xy.XYSeries.this.minX);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("org.jfree.data.xy.XYSeries.this.minY",org.jfree.data.xy.XYSeries.this.minY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("org.jfree.data.xy.XYSeries.this.maximumItemCount",org.jfree.data.xy.XYSeries.this.maximumItemCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("org.jfree.data.xy.XYSeries.this.data",org.jfree.data.xy.XYSeries.this.data);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectInput("org.jfree.data.xy.XYSeries.this.autoSort",org.jfree.data.xy.XYSeries.this.autoSort);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(127).collectionEnds();
            }
            if (runtimeAngelicValue)
                return java.lang.Math.min(a, b);

        }
    }

    private double maxIgnoreNaN(double a, double b) {
        if (java.lang.Double.isNaN(a)) {
            return b;
        } else if (java.lang.Double.isNaN(b)) {
            return a;
        } else {
            return java.lang.Math.max(a, b);
        }
    }

    public void update(java.lang.Number x, java.lang.Number y) {
        int index = indexOf(x);
        if (index < 0) {
            throw new org.jfree.data.general.SeriesException("No observation for x = " + x);
        } else {
            updateByIndex(index, y);
        }
    }

    public org.jfree.data.xy.XYDataItem addOrUpdate(double x, double y) {
        return addOrUpdate(new java.lang.Double(x), new java.lang.Double(y));
    }

    public org.jfree.data.xy.XYDataItem addOrUpdate(java.lang.Number x, java.lang.Number y) {
        return addOrUpdate(new org.jfree.data.xy.XYDataItem(x, y));
    }

    public org.jfree.data.xy.XYDataItem addOrUpdate(org.jfree.data.xy.XYDataItem item) {
        if (item == null) {
            throw new java.lang.IllegalArgumentException("Null 'item' argument.");
        }
        if (this.allowDuplicateXValues) {
            add(item);
            return null;
        }
        org.jfree.data.xy.XYDataItem overwritten = null;
        int index = indexOf(item.getX());
        if (index >= 0) {
            org.jfree.data.xy.XYDataItem existing = ((org.jfree.data.xy.XYDataItem) (this.data.get(index)));
            overwritten = ((org.jfree.data.xy.XYDataItem) (existing.clone()));
            boolean iterate = false;
            double oldY = existing.getYValue();
            if (!java.lang.Double.isNaN(oldY)) {
                iterate = (oldY <= this.minY) || (oldY >= this.maxY);
            }
            existing.setY(item.getY());
            if (iterate) {
                findBoundsByIteration();
            } else if (item.getY() != null) {
                double yy = item.getY().doubleValue();
                this.minY = minIgnoreNaN(this.minY, yy);
                this.maxY = minIgnoreNaN(this.maxY, yy);
            }
        } else {
            item = ((org.jfree.data.xy.XYDataItem) (item.clone()));
            if (this.autoSort) {
                this.data.add((-index) - 1, item);
            } else {
                this.data.add(item);
            }
            updateBoundsForAddedItem(item);
            if (getItemCount() > this.maximumItemCount) {
                org.jfree.data.xy.XYDataItem removed = ((org.jfree.data.xy.XYDataItem) (this.data.remove(0)));
                updateBoundsForRemovedItem(removed);
            }
        }
        fireSeriesChanged();
        return overwritten;
    }

    public int indexOf(java.lang.Number x) {
        if (this.autoSort) {
            return java.util.Collections.binarySearch(this.data, new org.jfree.data.xy.XYDataItem(x, null));
        } else {
            for (int i = 0; i < this.data.size(); i++) {
                org.jfree.data.xy.XYDataItem item = ((org.jfree.data.xy.XYDataItem) (this.data.get(i)));
                if (item.getX().equals(x)) {
                    return i;
                }
            }
            return -1;
        }
    }

    public double[][] toArray() {
        int itemCount = getItemCount();
        double[][] result = new double[2][itemCount];
        for (int i = 0; i < itemCount; i++) {
            result[0][i] = this.getX(i).doubleValue();
            java.lang.Number y = getY(i);
            if (y != null) {
                result[1][i] = y.doubleValue();
            } else {
                result[1][i] = java.lang.Double.NaN;
            }
        }
        return result;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.data.xy.XYSeries clone = ((org.jfree.data.xy.XYSeries) (super.clone()));
        clone.data = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.data)));
        return clone;
    }

    public org.jfree.data.xy.XYSeries createCopy(int start, int end) throws java.lang.CloneNotSupportedException {
        org.jfree.data.xy.XYSeries copy = ((org.jfree.data.xy.XYSeries) (super.clone()));
        copy.data = new java.util.ArrayList();
        if (this.data.size() > 0) {
            for (int index = start; index <= end; index++) {
                org.jfree.data.xy.XYDataItem item = ((org.jfree.data.xy.XYDataItem) (this.data.get(index)));
                org.jfree.data.xy.XYDataItem clone = ((org.jfree.data.xy.XYDataItem) (item.clone()));
                try {
                    copy.add(clone);
                } catch (org.jfree.data.general.SeriesException e) {
                    java.lang.System.err.println("Unable to add cloned data item.");
                }
            }
        }
        return copy;
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.xy.XYSeries)) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }
        org.jfree.data.xy.XYSeries that = ((org.jfree.data.xy.XYSeries) (obj));
        if (this.maximumItemCount != that.maximumItemCount) {
            return false;
        }
        if (this.autoSort != that.autoSort) {
            return false;
        }
        if (this.allowDuplicateXValues != that.allowDuplicateXValues) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.data, that.data)) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result = super.hashCode();
        int count = getItemCount();
        if (count > 0) {
            org.jfree.data.xy.XYDataItem item = getRawDataItem(0);
            result = (29 * result) + item.hashCode();
        }
        if (count > 1) {
            org.jfree.data.xy.XYDataItem item = getRawDataItem(count - 1);
            result = (29 * result) + item.hashCode();
        }
        if (count > 2) {
            org.jfree.data.xy.XYDataItem item = getRawDataItem(count / 2);
            result = (29 * result) + item.hashCode();
        }
        result = (29 * result) + this.maximumItemCount;
        result = (29 * result) + (this.autoSort ? 1 : 0);
        result = (29 * result) + (this.allowDuplicateXValues ? 1 : 0);
        return result;
    }
}
[321318] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858411244
GPR[SSUN]-1659858411244
-1395068711
GPR[SPVATF]-1659858411362
GPR[EPVATF]-1659858411485
GPR[SPS]-1659858411485
[321709] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class XYSeries extends org.jfree.data.general.Series implements java.lang.Cloneable , java.io.Serializable {
    static final long serialVersionUID = -5908509288197150436L;

    protected java.util.List data;

    private int maximumItemCount = java.lang.Integer.MAX_VALUE;

    private boolean autoSort;

    private boolean allowDuplicateXValues;

    private double minX;

    private double maxX;

    private double minY;

    private double maxY;

    public XYSeries(java.lang.Comparable key) {
        this(key, true, true);
    }

    public XYSeries(java.lang.Comparable key, boolean autoSort) {
        this(key, autoSort, true);
    }

    public XYSeries(java.lang.Comparable key, boolean autoSort, boolean allowDuplicateXValues) {
        super(key);
        this.data = new java.util.ArrayList();
        this.autoSort = autoSort;
        this.allowDuplicateXValues = allowDuplicateXValues;
        this.minX = java.lang.Double.NaN;
        this.maxX = java.lang.Double.NaN;
        this.minY = java.lang.Double.NaN;
        this.maxY = java.lang.Double.NaN;
    }

    public double getMinX() {
        return this.minX;
    }

    public double getMaxX() {
        return this.maxX;
    }

    public double getMinY() {
        return this.minY;
    }

    public double getMaxY() {
        return this.maxY;
    }

    private void updateBoundsForAddedItem(org.jfree.data.xy.XYDataItem item) {
        double x = item.getXValue();
        this.minX = minIgnoreNaN(this.minX, x);
        this.maxX = maxIgnoreNaN(this.maxX, x);
        if (item.getY() != null) {
            double y = item.getYValue();
            this.minY = minIgnoreNaN(this.minY, y);
            this.maxY = maxIgnoreNaN(this.maxY, y);
        }
    }

    private void updateBoundsForRemovedItem(org.jfree.data.xy.XYDataItem item) {
        boolean itemContributesToXBounds = false;
        boolean itemContributesToYBounds = false;
        double x = item.getXValue();
        if (!java.lang.Double.isNaN(x)) {
            if ((x <= this.minX) || (x >= this.maxX)) {
                itemContributesToXBounds = true;
            }
        }
        if (item.getY() != null) {
            double y = item.getYValue();
            if (!java.lang.Double.isNaN(y)) {
                if ((y <= this.minY) || (y >= this.maxY)) {
                    itemContributesToYBounds = true;
                }
            }
        }
        if (itemContributesToYBounds) {
            findBoundsByIteration();
        } else if (itemContributesToXBounds) {
            if (getAutoSort()) {
                this.minX = getX(0).doubleValue();
                this.maxX = getX(getItemCount() - 1).doubleValue();
            } else {
                findBoundsByIteration();
            }
        }
    }

    private void findBoundsByIteration() {
        this.minX = java.lang.Double.NaN;
        this.maxX = java.lang.Double.NaN;
        this.minY = java.lang.Double.NaN;
        this.maxY = java.lang.Double.NaN;
        java.util.Iterator iterator = this.data.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.xy.XYDataItem item = ((org.jfree.data.xy.XYDataItem) (iterator.next()));
            updateBoundsForAddedItem(item);
        } 
    }

    public boolean getAutoSort() {
        return this.autoSort;
    }

    public boolean getAllowDuplicateXValues() {
        return this.allowDuplicateXValues;
    }

    public int getItemCount() {
        return this.data.size();
    }

    public java.util.List getItems() {
        return java.util.Collections.unmodifiableList(this.data);
    }

    public int getMaximumItemCount() {
        return this.maximumItemCount;
    }

    public void setMaximumItemCount(int maximum) {
        this.maximumItemCount = maximum;
        int remove = this.data.size() - maximum;
        if (remove > 0) {
            this.data.subList(0, remove).clear();
            findBoundsByIteration();
            fireSeriesChanged();
        }
    }

    public void add(org.jfree.data.xy.XYDataItem item) {
        add(item, true);
    }

    public void add(double x, double y) {
        add(new java.lang.Double(x), new java.lang.Double(y), true);
    }

    public void add(double x, double y, boolean notify) {
        add(new java.lang.Double(x), new java.lang.Double(y), notify);
    }

    public void add(double x, java.lang.Number y) {
        add(new java.lang.Double(x), y);
    }

    public void add(double x, java.lang.Number y, boolean notify) {
        add(new java.lang.Double(x), y, notify);
    }

    public void add(java.lang.Number x, java.lang.Number y) {
        add(x, y, true);
    }

    public void add(java.lang.Number x, java.lang.Number y, boolean notify) {
        org.jfree.data.xy.XYDataItem item = new org.jfree.data.xy.XYDataItem(x, y);
        add(item, notify);
    }

    public void add(org.jfree.data.xy.XYDataItem item, boolean notify) {
        if (item == null) {
            throw new java.lang.IllegalArgumentException("Null 'item' argument.");
        }
        item = ((org.jfree.data.xy.XYDataItem) (item.clone()));
        if (this.autoSort) {
            int index = java.util.Collections.binarySearch(this.data, item);
            if (index < 0) {
                this.data.add((-index) - 1, item);
            } else if (this.allowDuplicateXValues) {
                int size = this.data.size();
                while ((index < size) && (item.compareTo(this.data.get(index)) == 0)) {
                    index++;
                } 
                if (index < this.data.size()) {
                    this.data.add(index, item);
                } else {
                    this.data.add(item);
                }
            } else {
                throw new org.jfree.data.general.SeriesException("X-value already exists.");
            }
        } else {
            if (!this.allowDuplicateXValues) {
                int index = indexOf(item.getX());
                if (index >= 0) {
                    throw new org.jfree.data.general.SeriesException("X-value already exists.");
                }
            }
            this.data.add(item);
        }
        updateBoundsForAddedItem(item);
        if (getItemCount() > this.maximumItemCount) {
            org.jfree.data.xy.XYDataItem removed = ((org.jfree.data.xy.XYDataItem) (this.data.remove(0)));
            updateBoundsForRemovedItem(removed);
        }
        if (notify) {
            fireSeriesChanged();
        }
    }

    public void delete(int start, int end) {
        this.data.subList(start, end + 1).clear();
        findBoundsByIteration();
        fireSeriesChanged();
    }

    public org.jfree.data.xy.XYDataItem remove(int index) {
        org.jfree.data.xy.XYDataItem removed = ((org.jfree.data.xy.XYDataItem) (this.data.remove(index)));
        updateBoundsForRemovedItem(removed);
        fireSeriesChanged();
        return removed;
    }

    public org.jfree.data.xy.XYDataItem remove(java.lang.Number x) {
        return remove(indexOf(x));
    }

    public void clear() {
        if (this.data.size() > 0) {
            this.data.clear();
            this.minX = java.lang.Double.NaN;
            this.maxX = java.lang.Double.NaN;
            this.minY = java.lang.Double.NaN;
            this.maxY = java.lang.Double.NaN;
            fireSeriesChanged();
        }
    }

    public org.jfree.data.xy.XYDataItem getDataItem(int index) {
        org.jfree.data.xy.XYDataItem item = ((org.jfree.data.xy.XYDataItem) (this.data.get(index)));
        return ((org.jfree.data.xy.XYDataItem) (item.clone()));
    }

    org.jfree.data.xy.XYDataItem getRawDataItem(int index) {
        return ((org.jfree.data.xy.XYDataItem) (this.data.get(index)));
    }

    public java.lang.Number getX(int index) {
        return getRawDataItem(index).getX();
    }

    public java.lang.Number getY(int index) {
        return getRawDataItem(index).getY();
    }

    public void updateByIndex(int index, java.lang.Number y) {
        org.jfree.data.xy.XYDataItem item = getRawDataItem(index);
        boolean iterate = false;
        double oldY = item.getYValue();
        if (!java.lang.Double.isNaN(oldY)) {
            iterate = (oldY <= this.minY) || (oldY >= this.maxY);
        }
        item.setY(y);
        if (iterate) {
            findBoundsByIteration();
        } else if (y != null) {
            double yy = y.doubleValue();
            this.minY = minIgnoreNaN(this.minY, yy);
            this.maxY = maxIgnoreNaN(this.maxY, yy);
        }
        fireSeriesChanged();
    }

    private double minIgnoreNaN(double a, double b) {
        if (java.lang.Double.isNaN(a)) {
            return b;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(128).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(128).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(128).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(128).collectInput("org.jfree.data.xy.XYSeries.this.maxX",org.jfree.data.xy.XYSeries.this.maxX);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(128).collectInput("org.jfree.data.xy.XYSeries.this.allowDuplicateXValues",org.jfree.data.xy.XYSeries.this.allowDuplicateXValues);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(128).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(128).collectInput("org.jfree.data.xy.XYSeries.this.maxY",org.jfree.data.xy.XYSeries.this.maxY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(128).collectInput("org.jfree.data.xy.XYSeries.this.minX",org.jfree.data.xy.XYSeries.this.minX);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(128).collectInput("org.jfree.data.xy.XYSeries.this.minY",org.jfree.data.xy.XYSeries.this.minY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(128).collectInput("org.jfree.data.xy.XYSeries.this.maximumItemCount",org.jfree.data.xy.XYSeries.this.maximumItemCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(128).collectInput("org.jfree.data.xy.XYSeries.this.data",org.jfree.data.xy.XYSeries.this.data);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(128).collectInput("org.jfree.data.xy.XYSeries.this.autoSort",org.jfree.data.xy.XYSeries.this.autoSort);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(128).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(128).collectionEnds();
            }
            if (runtimeAngelicValue) if (java.lang.Double.isNaN(b)) {
                return a;
            } else {
                return java.lang.Math.min(a, b);
            }
        }
    }

    private double maxIgnoreNaN(double a, double b) {
        if (java.lang.Double.isNaN(a)) {
            return b;
        } else if (java.lang.Double.isNaN(b)) {
            return a;
        } else {
            return java.lang.Math.max(a, b);
        }
    }

    public void update(java.lang.Number x, java.lang.Number y) {
        int index = indexOf(x);
        if (index < 0) {
            throw new org.jfree.data.general.SeriesException("No observation for x = " + x);
        } else {
            updateByIndex(index, y);
        }
    }

    public org.jfree.data.xy.XYDataItem addOrUpdate(double x, double y) {
        return addOrUpdate(new java.lang.Double(x), new java.lang.Double(y));
    }

    public org.jfree.data.xy.XYDataItem addOrUpdate(java.lang.Number x, java.lang.Number y) {
        return addOrUpdate(new org.jfree.data.xy.XYDataItem(x, y));
    }

    public org.jfree.data.xy.XYDataItem addOrUpdate(org.jfree.data.xy.XYDataItem item) {
        if (item == null) {
            throw new java.lang.IllegalArgumentException("Null 'item' argument.");
        }
        if (this.allowDuplicateXValues) {
            add(item);
            return null;
        }
        org.jfree.data.xy.XYDataItem overwritten = null;
        int index = indexOf(item.getX());
        if (index >= 0) {
            org.jfree.data.xy.XYDataItem existing = ((org.jfree.data.xy.XYDataItem) (this.data.get(index)));
            overwritten = ((org.jfree.data.xy.XYDataItem) (existing.clone()));
            boolean iterate = false;
            double oldY = existing.getYValue();
            if (!java.lang.Double.isNaN(oldY)) {
                iterate = (oldY <= this.minY) || (oldY >= this.maxY);
            }
            existing.setY(item.getY());
            if (iterate) {
                findBoundsByIteration();
            } else if (item.getY() != null) {
                double yy = item.getY().doubleValue();
                this.minY = minIgnoreNaN(this.minY, yy);
                this.maxY = minIgnoreNaN(this.maxY, yy);
            }
        } else {
            item = ((org.jfree.data.xy.XYDataItem) (item.clone()));
            if (this.autoSort) {
                this.data.add((-index) - 1, item);
            } else {
                this.data.add(item);
            }
            updateBoundsForAddedItem(item);
            if (getItemCount() > this.maximumItemCount) {
                org.jfree.data.xy.XYDataItem removed = ((org.jfree.data.xy.XYDataItem) (this.data.remove(0)));
                updateBoundsForRemovedItem(removed);
            }
        }
        fireSeriesChanged();
        return overwritten;
    }

    public int indexOf(java.lang.Number x) {
        if (this.autoSort) {
            return java.util.Collections.binarySearch(this.data, new org.jfree.data.xy.XYDataItem(x, null));
        } else {
            for (int i = 0; i < this.data.size(); i++) {
                org.jfree.data.xy.XYDataItem item = ((org.jfree.data.xy.XYDataItem) (this.data.get(i)));
                if (item.getX().equals(x)) {
                    return i;
                }
            }
            return -1;
        }
    }

    public double[][] toArray() {
        int itemCount = getItemCount();
        double[][] result = new double[2][itemCount];
        for (int i = 0; i < itemCount; i++) {
            result[0][i] = this.getX(i).doubleValue();
            java.lang.Number y = getY(i);
            if (y != null) {
                result[1][i] = y.doubleValue();
            } else {
                result[1][i] = java.lang.Double.NaN;
            }
        }
        return result;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.data.xy.XYSeries clone = ((org.jfree.data.xy.XYSeries) (super.clone()));
        clone.data = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.data)));
        return clone;
    }

    public org.jfree.data.xy.XYSeries createCopy(int start, int end) throws java.lang.CloneNotSupportedException {
        org.jfree.data.xy.XYSeries copy = ((org.jfree.data.xy.XYSeries) (super.clone()));
        copy.data = new java.util.ArrayList();
        if (this.data.size() > 0) {
            for (int index = start; index <= end; index++) {
                org.jfree.data.xy.XYDataItem item = ((org.jfree.data.xy.XYDataItem) (this.data.get(index)));
                org.jfree.data.xy.XYDataItem clone = ((org.jfree.data.xy.XYDataItem) (item.clone()));
                try {
                    copy.add(clone);
                } catch (org.jfree.data.general.SeriesException e) {
                    java.lang.System.err.println("Unable to add cloned data item.");
                }
            }
        }
        return copy;
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.xy.XYSeries)) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }
        org.jfree.data.xy.XYSeries that = ((org.jfree.data.xy.XYSeries) (obj));
        if (this.maximumItemCount != that.maximumItemCount) {
            return false;
        }
        if (this.autoSort != that.autoSort) {
            return false;
        }
        if (this.allowDuplicateXValues != that.allowDuplicateXValues) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.data, that.data)) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result = super.hashCode();
        int count = getItemCount();
        if (count > 0) {
            org.jfree.data.xy.XYDataItem item = getRawDataItem(0);
            result = (29 * result) + item.hashCode();
        }
        if (count > 1) {
            org.jfree.data.xy.XYDataItem item = getRawDataItem(count - 1);
            result = (29 * result) + item.hashCode();
        }
        if (count > 2) {
            org.jfree.data.xy.XYDataItem item = getRawDataItem(count / 2);
            result = (29 * result) + item.hashCode();
        }
        result = (29 * result) + this.maximumItemCount;
        result = (29 * result) + (this.autoSort ? 1 : 0);
        result = (29 * result) + (this.allowDuplicateXValues ? 1 : 0);
        return result;
    }
}
[321709] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659858411635
GPR[EPVATF]-1659858411755
GPR[SPS]-1659858411755
[322095] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:703.
GPR[EPS]-1659858412021
GPR[ESUN]-1659858412021
GPR[SSUN]-1659858412021
-1395068711
GPR[ESUN]-1659858412139
GPR[SSUN]-1659858412139
-1395068711
GPR[SPVATF]-1659858412257
GPR[EPVATF]-1659858412377
GPR[SPS]-1659858412377
[322680] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:511.
GPR[EPS]-1659858412606
GPR[ESUN]-1659858412606
GPR[SSUN]-1659858412606
-1395068711
GPR[SPVATF]-1659858412725
GPR[EPVATF]-1659858412846
GPR[SPS]-1659858412846
[323147] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:510.
GPR[EPS]-1659858413073
GPR[SPVATF]-1659858413073
GPR[EPVATF]-1659858413192
GPR[SPS]-1659858413192
[323493] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:510.
GPR[EPS]-1659858413419
GPR[ESUN]-1659858413419
GPR[SSUN]-1659858413419
-1395068711
GPR[ESUN]-1659858413535
GPR[SSUN]-1659858413535
1508764236
GPR[ESUN]-1659858413639
GPR[SSUN]-1659858413639
1508764236
GPR[SPVATF]-1659858413742
GPR[EPVATF]-1659858413863
GPR[SPS]-1659858413863
[324145] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.IntervalXYDelegate:389.
GPR[EPS]-1659858414071
GPR[SPVATF]-1659858414071
GPR[EPVATF]-1659858414191
GPR[SPS]-1659858414191
[324481] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.IntervalXYDelegate:389.
GPR[EPS]-1659858414407
GPR[ESUN]-1659858414407
GPR[SSUN]-1659858414407
-209594369
GPR[ESUN]-1659858414512
GPR[SSUN]-1659858414512
-1395068711
GPR[ESUN]-1659858414626
GPR[SSUN]-1659858414626
-1395068711
GPR[SPVATF]-1659858414740
GPR[EPVATF]-1659858414862
GPR[SPS]-1659858414862
[325203] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:412.
GPR[EPS]-1659858415129
GPR[ESUN]-1659858415129
GPR[SSUN]-1659858415129
-1395068711
GPR[ESUN]-1659858415244
GPR[SSUN]-1659858415244
-1395068711
GPR[SPVATF]-1659858415355
GPR[EPVATF]-1659858415478
GPR[SPS]-1659858415478
[325774] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:491.
GPR[EPS]-1659858415700
GPR[ESUN]-1659858415700
GPR[SSUN]-1659858415700
-1395068711
GPR[ESUN]-1659858415815
GPR[SSUN]-1659858415815
-1395068711
GPR[ESUN]-1659858415929
GPR[SSUN]-1659858415929
-1395068711
GPR[SPVATF]-1659858416046
GPR[EPVATF]-1659858416170
GPR[SPS]-1659858416170
[326472] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:550.
GPR[EPS]-1659858416398
GPR[ESUN]-1659858416398
GPR[SSUN]-1659858416398
-1395068711
GPR[SPVATF]-1659858416514
GPR[EPVATF]-1659858416635
GPR[SPS]-1659858416635
[326932] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:549.
GPR[EPS]-1659858416858
GPR[SPVATF]-1659858416858
GPR[EPVATF]-1659858416982
GPR[SPS]-1659858416982
[327323] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:549.
GPR[EPS]-1659858417249
GPR[ESUN]-1659858417249
GPR[SSUN]-1659858417249
-1395068711
GPR[SPVATF]-1659858417367
GPR[EPVATF]-1659858417492
GPR[SPS]-1659858417492
[327796] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:545.
GPR[EPS]-1659858417722
GPR[SPVATF]-1659858417722
GPR[EPVATF]-1659858417859
GPR[SPS]-1659858417859
[328157] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:545.
GPR[EPS]-1659858418083
GPR[ESUN]-1659858418083
GPR[SSUN]-1659858418084
-1395068711
GPR[SPVATF]-1659858418200
GPR[EPVATF]-1659858418321
GPR[SPS]-1659858418321
[328616] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:544.
GPR[EPS]-1659858418542
GPR[ESUN]-1659858418542
GPR[SSUN]-1659858418542
-1395068711
GPR[SPVATF]-1659858418677
GPR[EPVATF]-1659858418799
GPR[SPS]-1659858418799
[329098] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:508.
GPR[EPS]-1659858419024
GPR[SPVATF]-1659858419025
GPR[EPVATF]-1659858419148
GPR[SPS]-1659858419148
[329499] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:508.
GPR[EPS]-1659858419425
GPR[ESUN]-1659858419425
GPR[SSUN]-1659858419425
-1395068711
GPR[SPVATF]-1659858419542
GPR[EPVATF]-1659858419665
GPR[SPS]-1659858419665
[329961] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:507.
GPR[EPS]-1659858419887
GPR[ESUN]-1659858419887
GPR[SSUN]-1659858419887
-1395068711
GPR[SPVATF]-1659858420002
GPR[EPVATF]-1659858420123
GPR[SPS]-1659858420123
[330420] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:504.
GPR[EPS]-1659858420346
GPR[SPVATF]-1659858420346
GPR[EPVATF]-1659858420469
GPR[SPS]-1659858420469
[330763] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:504.
GPR[EPS]-1659858420689
GPR[ESUN]-1659858420689
GPR[SSUN]-1659858420689
-209594369
GPR[ESUN]-1659858420788
GPR[SSUN]-1659858420788
-209594369
GPR[SPVATF]-1659858420883
GPR[EPVATF]-1659858421390
GPR[SPS]-1659858421390
[331674] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYDataItem:148.
GPR[EPS]-1659858421600
GPR[ESUN]-1659858421600
GPR[SSUN]-1659858421600
-209594369
GPR[SPVATF]-1659858421703
GPR[EPVATF]-1659858421821
GPR[SPS]-1659858421821
[332091] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYDataItem:147.
GPR[EPS]-1659858422017
GPR[SPVATF]-1659858422017
GPR[EPVATF]-1659858422137
GPR[SPS]-1659858422137
[332407] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYDataItem:147.
GPR[EPS]-1659858422333
GPR[ESUN]-1659858422333
GPR[SSUN]-1659858422333
-209594369
GPR[ESUN]-1659858422432
GPR[SSUN]-1659858422432
-209594369
GPR[ESUN]-1659858422527
GPR[SSUN]-1659858422527
-209594369
GPR[ESUN]-1659858422621
GPR[SSUN]-1659858422621
-1395068711
GPR[SPVATF]-1659858422734
GPR[EPVATF]-1659858422854
GPR[SPS]-1659858422854
[333075] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class XYSeries extends org.jfree.data.general.Series implements java.lang.Cloneable , java.io.Serializable {
    static final long serialVersionUID = -5908509288197150436L;

    protected java.util.List data;

    private int maximumItemCount = java.lang.Integer.MAX_VALUE;

    private boolean autoSort;

    private boolean allowDuplicateXValues;

    private double minX;

    private double maxX;

    private double minY;

    private double maxY;

    public XYSeries(java.lang.Comparable key) {
        this(key, true, true);
    }

    public XYSeries(java.lang.Comparable key, boolean autoSort) {
        this(key, autoSort, true);
    }

    public XYSeries(java.lang.Comparable key, boolean autoSort, boolean allowDuplicateXValues) {
        super(key);
        this.data = new java.util.ArrayList();
        this.autoSort = autoSort;
        this.allowDuplicateXValues = allowDuplicateXValues;
        this.minX = java.lang.Double.NaN;
        this.maxX = java.lang.Double.NaN;
        this.minY = java.lang.Double.NaN;
        this.maxY = java.lang.Double.NaN;
    }

    public double getMinX() {
        return this.minX;
    }

    public double getMaxX() {
        return this.maxX;
    }

    public double getMinY() {
        return this.minY;
    }

    public double getMaxY() {
        return this.maxY;
    }

    private void updateBoundsForAddedItem(org.jfree.data.xy.XYDataItem item) {
        double x = item.getXValue();
        this.minX = minIgnoreNaN(this.minX, x);
        this.maxX = maxIgnoreNaN(this.maxX, x);
        if (item.getY() != null) {
            double y = item.getYValue();
            this.minY = minIgnoreNaN(this.minY, y);
            this.maxY = maxIgnoreNaN(this.maxY, y);
        }
    }

    private void updateBoundsForRemovedItem(org.jfree.data.xy.XYDataItem item) {
        boolean itemContributesToXBounds = false;
        boolean itemContributesToYBounds = false;
        double x = item.getXValue();
        if (!java.lang.Double.isNaN(x)) {
            if ((x <= this.minX) || (x >= this.maxX)) {
                itemContributesToXBounds = true;
            }
        }
        if (item.getY() != null) {
            double y = item.getYValue();
            if (!java.lang.Double.isNaN(y)) {
                if ((y <= this.minY) || (y >= this.maxY)) {
                    itemContributesToYBounds = true;
                }
            }
        }
        if (itemContributesToYBounds) {
            findBoundsByIteration();
        } else if (itemContributesToXBounds) {
            if (getAutoSort()) {
                this.minX = getX(0).doubleValue();
                this.maxX = getX(getItemCount() - 1).doubleValue();
            } else {
                findBoundsByIteration();
            }
        }
    }

    private void findBoundsByIteration() {
        this.minX = java.lang.Double.NaN;
        this.maxX = java.lang.Double.NaN;
        this.minY = java.lang.Double.NaN;
        this.maxY = java.lang.Double.NaN;
        java.util.Iterator iterator = this.data.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.xy.XYDataItem item = ((org.jfree.data.xy.XYDataItem) (iterator.next()));
            updateBoundsForAddedItem(item);
        } 
    }

    public boolean getAutoSort() {
        return this.autoSort;
    }

    public boolean getAllowDuplicateXValues() {
        return this.allowDuplicateXValues;
    }

    public int getItemCount() {
        return this.data.size();
    }

    public java.util.List getItems() {
        return java.util.Collections.unmodifiableList(this.data);
    }

    public int getMaximumItemCount() {
        return this.maximumItemCount;
    }

    public void setMaximumItemCount(int maximum) {
        this.maximumItemCount = maximum;
        int remove = this.data.size() - maximum;
        if (remove > 0) {
            this.data.subList(0, remove).clear();
            findBoundsByIteration();
            fireSeriesChanged();
        }
    }

    public void add(org.jfree.data.xy.XYDataItem item) {
        add(item, true);
    }

    public void add(double x, double y) {
        add(new java.lang.Double(x), new java.lang.Double(y), true);
    }

    public void add(double x, double y, boolean notify) {
        add(new java.lang.Double(x), new java.lang.Double(y), notify);
    }

    public void add(double x, java.lang.Number y) {
        add(new java.lang.Double(x), y);
    }

    public void add(double x, java.lang.Number y, boolean notify) {
        add(new java.lang.Double(x), y, notify);
    }

    public void add(java.lang.Number x, java.lang.Number y) {
        add(x, y, true);
    }

    public void add(java.lang.Number x, java.lang.Number y, boolean notify) {
        org.jfree.data.xy.XYDataItem item = new org.jfree.data.xy.XYDataItem(x, y);
        add(item, notify);
    }

    public void add(org.jfree.data.xy.XYDataItem item, boolean notify) {
        if (item == null) {
            throw new java.lang.IllegalArgumentException("Null 'item' argument.");
        }
        item = ((org.jfree.data.xy.XYDataItem) (item.clone()));
        if (this.autoSort) {
            int index = java.util.Collections.binarySearch(this.data, item);
            if (index < 0) {
                this.data.add((-index) - 1, item);
            } else if (this.allowDuplicateXValues) {
                int size = this.data.size();
                while ((index < size) && (item.compareTo(this.data.get(index)) == 0)) {
                    index++;
                } 
                if (index < this.data.size()) {
                    this.data.add(index, item);
                } else {
                    this.data.add(item);
                }
            } else {
                throw new org.jfree.data.general.SeriesException("X-value already exists.");
            }
        } else {
            if (!this.allowDuplicateXValues) {
                int index = indexOf(item.getX());
                if (index >= 0) {
                    throw new org.jfree.data.general.SeriesException("X-value already exists.");
                }
            }
            this.data.add(item);
        }
        updateBoundsForAddedItem(item);
        if (getItemCount() > this.maximumItemCount) {
            org.jfree.data.xy.XYDataItem removed = ((org.jfree.data.xy.XYDataItem) (this.data.remove(0)));
            updateBoundsForRemovedItem(removed);
        }
        if (notify) {
            fireSeriesChanged();
        }
    }

    public void delete(int start, int end) {
        this.data.subList(start, end + 1).clear();
        findBoundsByIteration();
        fireSeriesChanged();
    }

    public org.jfree.data.xy.XYDataItem remove(int index) {
        org.jfree.data.xy.XYDataItem removed = ((org.jfree.data.xy.XYDataItem) (this.data.remove(index)));
        updateBoundsForRemovedItem(removed);
        fireSeriesChanged();
        return removed;
    }

    public org.jfree.data.xy.XYDataItem remove(java.lang.Number x) {
        return remove(indexOf(x));
    }

    public void clear() {
        if (this.data.size() > 0) {
            this.data.clear();
            this.minX = java.lang.Double.NaN;
            this.maxX = java.lang.Double.NaN;
            this.minY = java.lang.Double.NaN;
            this.maxY = java.lang.Double.NaN;
            fireSeriesChanged();
        }
    }

    public org.jfree.data.xy.XYDataItem getDataItem(int index) {
        org.jfree.data.xy.XYDataItem item = ((org.jfree.data.xy.XYDataItem) (this.data.get(index)));
        return ((org.jfree.data.xy.XYDataItem) (item.clone()));
    }

    org.jfree.data.xy.XYDataItem getRawDataItem(int index) {
        return ((org.jfree.data.xy.XYDataItem) (this.data.get(index)));
    }

    public java.lang.Number getX(int index) {
        return getRawDataItem(index).getX();
    }

    public java.lang.Number getY(int index) {
        return getRawDataItem(index).getY();
    }

    public void updateByIndex(int index, java.lang.Number y) {
        org.jfree.data.xy.XYDataItem item = getRawDataItem(index);
        boolean iterate = false;
        double oldY = item.getYValue();
        if (!java.lang.Double.isNaN(oldY)) {
            iterate = (oldY <= this.minY) || (oldY >= this.maxY);
        }
        item.setY(y);
        if (iterate) {
            findBoundsByIteration();
        } else if (y != null) {
            double yy = y.doubleValue();
            this.minY = minIgnoreNaN(this.minY, yy);
            this.maxY = maxIgnoreNaN(this.maxY, yy);
        }
        fireSeriesChanged();
    }

    private double minIgnoreNaN(double a, double b) {
        if (java.lang.Double.isNaN(a)) {
            return b;
        } else if (java.lang.Double.isNaN(b)) {
            return a;
        } else {
            return java.lang.Math.min(a, b);
        }
    }

    private double maxIgnoreNaN(double a, double b) {
        if (java.lang.Double.isNaN(a)) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(151).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("org.jfree.data.xy.XYSeries.this.maxX",org.jfree.data.xy.XYSeries.this.maxX);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("org.jfree.data.xy.XYSeries.this.allowDuplicateXValues",org.jfree.data.xy.XYSeries.this.allowDuplicateXValues);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("org.jfree.data.xy.XYSeries.this.maxY",org.jfree.data.xy.XYSeries.this.maxY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("org.jfree.data.xy.XYSeries.this.minX",org.jfree.data.xy.XYSeries.this.minX);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("org.jfree.data.xy.XYSeries.this.minY",org.jfree.data.xy.XYSeries.this.minY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("org.jfree.data.xy.XYSeries.this.maximumItemCount",org.jfree.data.xy.XYSeries.this.maximumItemCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("org.jfree.data.xy.XYSeries.this.data",org.jfree.data.xy.XYSeries.this.data);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("org.jfree.data.xy.XYSeries.this.autoSort",org.jfree.data.xy.XYSeries.this.autoSort);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectionEnds();
            }
            if (runtimeAngelicValue)
                return b;

        } else if (java.lang.Double.isNaN(b)) {
            return a;
        } else {
            return java.lang.Math.max(a, b);
        }
    }

    public void update(java.lang.Number x, java.lang.Number y) {
        int index = indexOf(x);
        if (index < 0) {
            throw new org.jfree.data.general.SeriesException("No observation for x = " + x);
        } else {
            updateByIndex(index, y);
        }
    }

    public org.jfree.data.xy.XYDataItem addOrUpdate(double x, double y) {
        return addOrUpdate(new java.lang.Double(x), new java.lang.Double(y));
    }

    public org.jfree.data.xy.XYDataItem addOrUpdate(java.lang.Number x, java.lang.Number y) {
        return addOrUpdate(new org.jfree.data.xy.XYDataItem(x, y));
    }

    public org.jfree.data.xy.XYDataItem addOrUpdate(org.jfree.data.xy.XYDataItem item) {
        if (item == null) {
            throw new java.lang.IllegalArgumentException("Null 'item' argument.");
        }
        if (this.allowDuplicateXValues) {
            add(item);
            return null;
        }
        org.jfree.data.xy.XYDataItem overwritten = null;
        int index = indexOf(item.getX());
        if (index >= 0) {
            org.jfree.data.xy.XYDataItem existing = ((org.jfree.data.xy.XYDataItem) (this.data.get(index)));
            overwritten = ((org.jfree.data.xy.XYDataItem) (existing.clone()));
            boolean iterate = false;
            double oldY = existing.getYValue();
            if (!java.lang.Double.isNaN(oldY)) {
                iterate = (oldY <= this.minY) || (oldY >= this.maxY);
            }
            existing.setY(item.getY());
            if (iterate) {
                findBoundsByIteration();
            } else if (item.getY() != null) {
                double yy = item.getY().doubleValue();
                this.minY = minIgnoreNaN(this.minY, yy);
                this.maxY = minIgnoreNaN(this.maxY, yy);
            }
        } else {
            item = ((org.jfree.data.xy.XYDataItem) (item.clone()));
            if (this.autoSort) {
                this.data.add((-index) - 1, item);
            } else {
                this.data.add(item);
            }
            updateBoundsForAddedItem(item);
            if (getItemCount() > this.maximumItemCount) {
                org.jfree.data.xy.XYDataItem removed = ((org.jfree.data.xy.XYDataItem) (this.data.remove(0)));
                updateBoundsForRemovedItem(removed);
            }
        }
        fireSeriesChanged();
        return overwritten;
    }

    public int indexOf(java.lang.Number x) {
        if (this.autoSort) {
            return java.util.Collections.binarySearch(this.data, new org.jfree.data.xy.XYDataItem(x, null));
        } else {
            for (int i = 0; i < this.data.size(); i++) {
                org.jfree.data.xy.XYDataItem item = ((org.jfree.data.xy.XYDataItem) (this.data.get(i)));
                if (item.getX().equals(x)) {
                    return i;
                }
            }
            return -1;
        }
    }

    public double[][] toArray() {
        int itemCount = getItemCount();
        double[][] result = new double[2][itemCount];
        for (int i = 0; i < itemCount; i++) {
            result[0][i] = this.getX(i).doubleValue();
            java.lang.Number y = getY(i);
            if (y != null) {
                result[1][i] = y.doubleValue();
            } else {
                result[1][i] = java.lang.Double.NaN;
            }
        }
        return result;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.data.xy.XYSeries clone = ((org.jfree.data.xy.XYSeries) (super.clone()));
        clone.data = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.data)));
        return clone;
    }

    public org.jfree.data.xy.XYSeries createCopy(int start, int end) throws java.lang.CloneNotSupportedException {
        org.jfree.data.xy.XYSeries copy = ((org.jfree.data.xy.XYSeries) (super.clone()));
        copy.data = new java.util.ArrayList();
        if (this.data.size() > 0) {
            for (int index = start; index <= end; index++) {
                org.jfree.data.xy.XYDataItem item = ((org.jfree.data.xy.XYDataItem) (this.data.get(index)));
                org.jfree.data.xy.XYDataItem clone = ((org.jfree.data.xy.XYDataItem) (item.clone()));
                try {
                    copy.add(clone);
                } catch (org.jfree.data.general.SeriesException e) {
                    java.lang.System.err.println("Unable to add cloned data item.");
                }
            }
        }
        return copy;
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.xy.XYSeries)) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }
        org.jfree.data.xy.XYSeries that = ((org.jfree.data.xy.XYSeries) (obj));
        if (this.maximumItemCount != that.maximumItemCount) {
            return false;
        }
        if (this.autoSort != that.autoSort) {
            return false;
        }
        if (this.allowDuplicateXValues != that.allowDuplicateXValues) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.data, that.data)) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result = super.hashCode();
        int count = getItemCount();
        if (count > 0) {
            org.jfree.data.xy.XYDataItem item = getRawDataItem(0);
            result = (29 * result) + item.hashCode();
        }
        if (count > 1) {
            org.jfree.data.xy.XYDataItem item = getRawDataItem(count - 1);
            result = (29 * result) + item.hashCode();
        }
        if (count > 2) {
            org.jfree.data.xy.XYDataItem item = getRawDataItem(count / 2);
            result = (29 * result) + item.hashCode();
        }
        result = (29 * result) + this.maximumItemCount;
        result = (29 * result) + (this.autoSort ? 1 : 0);
        result = (29 * result) + (this.allowDuplicateXValues ? 1 : 0);
        return result;
    }
}
[333075] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858423001
GPR[SSUN]-1659858423001
-1395068711
GPR[SPVATF]-1659858423113
GPR[EPVATF]-1659858423236
GPR[SPS]-1659858423236
[333547] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:722.
GPR[EPS]-1659858423474
GPR[ESUN]-1659858423474
GPR[SSUN]-1659858423474
-1395068711
GPR[SPVATF]-1659858423592
GPR[EPVATF]-1659858423715
GPR[SPS]-1659858423715
[333937] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class XYSeries extends org.jfree.data.general.Series implements java.lang.Cloneable , java.io.Serializable {
    static final long serialVersionUID = -5908509288197150436L;

    protected java.util.List data;

    private int maximumItemCount = java.lang.Integer.MAX_VALUE;

    private boolean autoSort;

    private boolean allowDuplicateXValues;

    private double minX;

    private double maxX;

    private double minY;

    private double maxY;

    public XYSeries(java.lang.Comparable key) {
        this(key, true, true);
    }

    public XYSeries(java.lang.Comparable key, boolean autoSort) {
        this(key, autoSort, true);
    }

    public XYSeries(java.lang.Comparable key, boolean autoSort, boolean allowDuplicateXValues) {
        super(key);
        this.data = new java.util.ArrayList();
        this.autoSort = autoSort;
        this.allowDuplicateXValues = allowDuplicateXValues;
        this.minX = java.lang.Double.NaN;
        this.maxX = java.lang.Double.NaN;
        this.minY = java.lang.Double.NaN;
        this.maxY = java.lang.Double.NaN;
    }

    public double getMinX() {
        return this.minX;
    }

    public double getMaxX() {
        return this.maxX;
    }

    public double getMinY() {
        return this.minY;
    }

    public double getMaxY() {
        return this.maxY;
    }

    private void updateBoundsForAddedItem(org.jfree.data.xy.XYDataItem item) {
        double x = item.getXValue();
        this.minX = minIgnoreNaN(this.minX, x);
        this.maxX = maxIgnoreNaN(this.maxX, x);
        if (item.getY() != null) {
            double y = item.getYValue();
            this.minY = minIgnoreNaN(this.minY, y);
            this.maxY = maxIgnoreNaN(this.maxY, y);
        }
    }

    private void updateBoundsForRemovedItem(org.jfree.data.xy.XYDataItem item) {
        boolean itemContributesToXBounds = false;
        boolean itemContributesToYBounds = false;
        double x = item.getXValue();
        if (!java.lang.Double.isNaN(x)) {
            if ((x <= this.minX) || (x >= this.maxX)) {
                itemContributesToXBounds = true;
            }
        }
        if (item.getY() != null) {
            double y = item.getYValue();
            if (!java.lang.Double.isNaN(y)) {
                if ((y <= this.minY) || (y >= this.maxY)) {
                    itemContributesToYBounds = true;
                }
            }
        }
        if (itemContributesToYBounds) {
            findBoundsByIteration();
        } else if (itemContributesToXBounds) {
            if (getAutoSort()) {
                this.minX = getX(0).doubleValue();
                this.maxX = getX(getItemCount() - 1).doubleValue();
            } else {
                findBoundsByIteration();
            }
        }
    }

    private void findBoundsByIteration() {
        this.minX = java.lang.Double.NaN;
        this.maxX = java.lang.Double.NaN;
        this.minY = java.lang.Double.NaN;
        this.maxY = java.lang.Double.NaN;
        java.util.Iterator iterator = this.data.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.xy.XYDataItem item = ((org.jfree.data.xy.XYDataItem) (iterator.next()));
            updateBoundsForAddedItem(item);
        } 
    }

    public boolean getAutoSort() {
        return this.autoSort;
    }

    public boolean getAllowDuplicateXValues() {
        return this.allowDuplicateXValues;
    }

    public int getItemCount() {
        return this.data.size();
    }

    public java.util.List getItems() {
        return java.util.Collections.unmodifiableList(this.data);
    }

    public int getMaximumItemCount() {
        return this.maximumItemCount;
    }

    public void setMaximumItemCount(int maximum) {
        this.maximumItemCount = maximum;
        int remove = this.data.size() - maximum;
        if (remove > 0) {
            this.data.subList(0, remove).clear();
            findBoundsByIteration();
            fireSeriesChanged();
        }
    }

    public void add(org.jfree.data.xy.XYDataItem item) {
        add(item, true);
    }

    public void add(double x, double y) {
        add(new java.lang.Double(x), new java.lang.Double(y), true);
    }

    public void add(double x, double y, boolean notify) {
        add(new java.lang.Double(x), new java.lang.Double(y), notify);
    }

    public void add(double x, java.lang.Number y) {
        add(new java.lang.Double(x), y);
    }

    public void add(double x, java.lang.Number y, boolean notify) {
        add(new java.lang.Double(x), y, notify);
    }

    public void add(java.lang.Number x, java.lang.Number y) {
        add(x, y, true);
    }

    public void add(java.lang.Number x, java.lang.Number y, boolean notify) {
        org.jfree.data.xy.XYDataItem item = new org.jfree.data.xy.XYDataItem(x, y);
        add(item, notify);
    }

    public void add(org.jfree.data.xy.XYDataItem item, boolean notify) {
        if (item == null) {
            throw new java.lang.IllegalArgumentException("Null 'item' argument.");
        }
        item = ((org.jfree.data.xy.XYDataItem) (item.clone()));
        if (this.autoSort) {
            int index = java.util.Collections.binarySearch(this.data, item);
            if (index < 0) {
                this.data.add((-index) - 1, item);
            } else if (this.allowDuplicateXValues) {
                int size = this.data.size();
                while ((index < size) && (item.compareTo(this.data.get(index)) == 0)) {
                    index++;
                } 
                if (index < this.data.size()) {
                    this.data.add(index, item);
                } else {
                    this.data.add(item);
                }
            } else {
                throw new org.jfree.data.general.SeriesException("X-value already exists.");
            }
        } else {
            if (!this.allowDuplicateXValues) {
                int index = indexOf(item.getX());
                if (index >= 0) {
                    throw new org.jfree.data.general.SeriesException("X-value already exists.");
                }
            }
            this.data.add(item);
        }
        updateBoundsForAddedItem(item);
        if (getItemCount() > this.maximumItemCount) {
            org.jfree.data.xy.XYDataItem removed = ((org.jfree.data.xy.XYDataItem) (this.data.remove(0)));
            updateBoundsForRemovedItem(removed);
        }
        if (notify) {
            fireSeriesChanged();
        }
    }

    public void delete(int start, int end) {
        this.data.subList(start, end + 1).clear();
        findBoundsByIteration();
        fireSeriesChanged();
    }

    public org.jfree.data.xy.XYDataItem remove(int index) {
        org.jfree.data.xy.XYDataItem removed = ((org.jfree.data.xy.XYDataItem) (this.data.remove(index)));
        updateBoundsForRemovedItem(removed);
        fireSeriesChanged();
        return removed;
    }

    public org.jfree.data.xy.XYDataItem remove(java.lang.Number x) {
        return remove(indexOf(x));
    }

    public void clear() {
        if (this.data.size() > 0) {
            this.data.clear();
            this.minX = java.lang.Double.NaN;
            this.maxX = java.lang.Double.NaN;
            this.minY = java.lang.Double.NaN;
            this.maxY = java.lang.Double.NaN;
            fireSeriesChanged();
        }
    }

    public org.jfree.data.xy.XYDataItem getDataItem(int index) {
        org.jfree.data.xy.XYDataItem item = ((org.jfree.data.xy.XYDataItem) (this.data.get(index)));
        return ((org.jfree.data.xy.XYDataItem) (item.clone()));
    }

    org.jfree.data.xy.XYDataItem getRawDataItem(int index) {
        return ((org.jfree.data.xy.XYDataItem) (this.data.get(index)));
    }

    public java.lang.Number getX(int index) {
        return getRawDataItem(index).getX();
    }

    public java.lang.Number getY(int index) {
        return getRawDataItem(index).getY();
    }

    public void updateByIndex(int index, java.lang.Number y) {
        org.jfree.data.xy.XYDataItem item = getRawDataItem(index);
        boolean iterate = false;
        double oldY = item.getYValue();
        if (!java.lang.Double.isNaN(oldY)) {
            iterate = (oldY <= this.minY) || (oldY >= this.maxY);
        }
        item.setY(y);
        if (iterate) {
            findBoundsByIteration();
        } else if (y != null) {
            double yy = y.doubleValue();
            this.minY = minIgnoreNaN(this.minY, yy);
            this.maxY = maxIgnoreNaN(this.maxY, yy);
        }
        fireSeriesChanged();
    }

    private double minIgnoreNaN(double a, double b) {
        if (java.lang.Double.isNaN(a)) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(153).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.jfree.data.xy.XYSeries.this.maxX",org.jfree.data.xy.XYSeries.this.maxX);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.jfree.data.xy.XYSeries.this.allowDuplicateXValues",org.jfree.data.xy.XYSeries.this.allowDuplicateXValues);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.jfree.data.xy.XYSeries.this.maxY",org.jfree.data.xy.XYSeries.this.maxY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.jfree.data.xy.XYSeries.this.minX",org.jfree.data.xy.XYSeries.this.minX);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.jfree.data.xy.XYSeries.this.minY",org.jfree.data.xy.XYSeries.this.minY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.jfree.data.xy.XYSeries.this.maximumItemCount",org.jfree.data.xy.XYSeries.this.maximumItemCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.jfree.data.xy.XYSeries.this.data",org.jfree.data.xy.XYSeries.this.data);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.jfree.data.xy.XYSeries.this.autoSort",org.jfree.data.xy.XYSeries.this.autoSort);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectionEnds();
            }
            if (runtimeAngelicValue)
                return b;

        } else if (java.lang.Double.isNaN(b)) {
            return a;
        } else {
            return java.lang.Math.min(a, b);
        }
    }

    private double maxIgnoreNaN(double a, double b) {
        if (java.lang.Double.isNaN(a)) {
            return b;
        } else if (java.lang.Double.isNaN(b)) {
            return a;
        } else {
            return java.lang.Math.max(a, b);
        }
    }

    public void update(java.lang.Number x, java.lang.Number y) {
        int index = indexOf(x);
        if (index < 0) {
            throw new org.jfree.data.general.SeriesException("No observation for x = " + x);
        } else {
            updateByIndex(index, y);
        }
    }

    public org.jfree.data.xy.XYDataItem addOrUpdate(double x, double y) {
        return addOrUpdate(new java.lang.Double(x), new java.lang.Double(y));
    }

    public org.jfree.data.xy.XYDataItem addOrUpdate(java.lang.Number x, java.lang.Number y) {
        return addOrUpdate(new org.jfree.data.xy.XYDataItem(x, y));
    }

    public org.jfree.data.xy.XYDataItem addOrUpdate(org.jfree.data.xy.XYDataItem item) {
        if (item == null) {
            throw new java.lang.IllegalArgumentException("Null 'item' argument.");
        }
        if (this.allowDuplicateXValues) {
            add(item);
            return null;
        }
        org.jfree.data.xy.XYDataItem overwritten = null;
        int index = indexOf(item.getX());
        if (index >= 0) {
            org.jfree.data.xy.XYDataItem existing = ((org.jfree.data.xy.XYDataItem) (this.data.get(index)));
            overwritten = ((org.jfree.data.xy.XYDataItem) (existing.clone()));
            boolean iterate = false;
            double oldY = existing.getYValue();
            if (!java.lang.Double.isNaN(oldY)) {
                iterate = (oldY <= this.minY) || (oldY >= this.maxY);
            }
            existing.setY(item.getY());
            if (iterate) {
                findBoundsByIteration();
            } else if (item.getY() != null) {
                double yy = item.getY().doubleValue();
                this.minY = minIgnoreNaN(this.minY, yy);
                this.maxY = minIgnoreNaN(this.maxY, yy);
            }
        } else {
            item = ((org.jfree.data.xy.XYDataItem) (item.clone()));
            if (this.autoSort) {
                this.data.add((-index) - 1, item);
            } else {
                this.data.add(item);
            }
            updateBoundsForAddedItem(item);
            if (getItemCount() > this.maximumItemCount) {
                org.jfree.data.xy.XYDataItem removed = ((org.jfree.data.xy.XYDataItem) (this.data.remove(0)));
                updateBoundsForRemovedItem(removed);
            }
        }
        fireSeriesChanged();
        return overwritten;
    }

    public int indexOf(java.lang.Number x) {
        if (this.autoSort) {
            return java.util.Collections.binarySearch(this.data, new org.jfree.data.xy.XYDataItem(x, null));
        } else {
            for (int i = 0; i < this.data.size(); i++) {
                org.jfree.data.xy.XYDataItem item = ((org.jfree.data.xy.XYDataItem) (this.data.get(i)));
                if (item.getX().equals(x)) {
                    return i;
                }
            }
            return -1;
        }
    }

    public double[][] toArray() {
        int itemCount = getItemCount();
        double[][] result = new double[2][itemCount];
        for (int i = 0; i < itemCount; i++) {
            result[0][i] = this.getX(i).doubleValue();
            java.lang.Number y = getY(i);
            if (y != null) {
                result[1][i] = y.doubleValue();
            } else {
                result[1][i] = java.lang.Double.NaN;
            }
        }
        return result;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.data.xy.XYSeries clone = ((org.jfree.data.xy.XYSeries) (super.clone()));
        clone.data = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.data)));
        return clone;
    }

    public org.jfree.data.xy.XYSeries createCopy(int start, int end) throws java.lang.CloneNotSupportedException {
        org.jfree.data.xy.XYSeries copy = ((org.jfree.data.xy.XYSeries) (super.clone()));
        copy.data = new java.util.ArrayList();
        if (this.data.size() > 0) {
            for (int index = start; index <= end; index++) {
                org.jfree.data.xy.XYDataItem item = ((org.jfree.data.xy.XYDataItem) (this.data.get(index)));
                org.jfree.data.xy.XYDataItem clone = ((org.jfree.data.xy.XYDataItem) (item.clone()));
                try {
                    copy.add(clone);
                } catch (org.jfree.data.general.SeriesException e) {
                    java.lang.System.err.println("Unable to add cloned data item.");
                }
            }
        }
        return copy;
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.xy.XYSeries)) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }
        org.jfree.data.xy.XYSeries that = ((org.jfree.data.xy.XYSeries) (obj));
        if (this.maximumItemCount != that.maximumItemCount) {
            return false;
        }
        if (this.autoSort != that.autoSort) {
            return false;
        }
        if (this.allowDuplicateXValues != that.allowDuplicateXValues) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.data, that.data)) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result = super.hashCode();
        int count = getItemCount();
        if (count > 0) {
            org.jfree.data.xy.XYDataItem item = getRawDataItem(0);
            result = (29 * result) + item.hashCode();
        }
        if (count > 1) {
            org.jfree.data.xy.XYDataItem item = getRawDataItem(count - 1);
            result = (29 * result) + item.hashCode();
        }
        if (count > 2) {
            org.jfree.data.xy.XYDataItem item = getRawDataItem(count / 2);
            result = (29 * result) + item.hashCode();
        }
        result = (29 * result) + this.maximumItemCount;
        result = (29 * result) + (this.autoSort ? 1 : 0);
        result = (29 * result) + (this.allowDuplicateXValues ? 1 : 0);
        return result;
    }
}
[333937] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858423863
GPR[SSUN]-1659858423863
-1395068711
GPR[SPVATF]-1659858423976
GPR[EPVATF]-1659858424100
GPR[SPS]-1659858424100
[334395] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:699.
GPR[EPS]-1659858424321
GPR[ESUN]-1659858424321
GPR[SSUN]-1659858424321
-1395068711
GPR[ESUN]-1659858424439
GPR[SSUN]-1659858424439
-1395068711
GPR[SPVATF]-1659858424550
GPR[EPVATF]-1659858424672
GPR[SPS]-1659858424672
[334977] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:254.
GPR[EPS]-1659858424903
GPR[ESUN]-1659858424903
GPR[SSUN]-1659858424903
-1395068711
GPR[SPVATF]-1659858425043
GPR[EPVATF]-1659858425164
GPR[SPS]-1659858425164
[335460] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:253.
GPR[EPS]-1659858425386
GPR[ESUN]-1659858425386
GPR[SSUN]-1659858425386
-1395068711
GPR[ESUN]-1659858425501
GPR[SSUN]-1659858425501
-1395068711
GPR[SPVATF]-1659858425613
GPR[EPVATF]-1659858425734
GPR[SPS]-1659858425734
[336028] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:251.
GPR[EPS]-1659858425954
GPR[SPVATF]-1659858425955
GPR[EPVATF]-1659858426075
GPR[SPS]-1659858426075
[336386] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:251.
GPR[EPS]-1659858426312
GPR[ESUN]-1659858426312
GPR[SSUN]-1659858426312
-1395068711
GPR[SPVATF]-1659858426429
GPR[EPVATF]-1659858426549
GPR[SPS]-1659858426549
[336844] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:250.
GPR[EPS]-1659858426770
GPR[ESUN]-1659858426770
GPR[SSUN]-1659858426770
-1395068711
GPR[SPVATF]-1659858426887
GPR[EPVATF]-1659858427007
GPR[SPS]-1659858427007
[337301] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeries:249.
GPR[EPS]-1659858427227
GPR[ESUN]-1659858427227
GPR[SSUN]-1659858427227
-1395068711
GPR[ESUN]-1659858427344
GPR[SSUN]-1659858427344
1256214381
GPR[ESUN]-1659858427623
GPR[SSUN]-1659858427623
1256214381
GPR[ESUN]-1659858427889
GPR[SSUN]-1659858427889
1256214381
GPR[SPVATF]-1659858428159
GPR[EPVATF]-1659858428219
GPR[SPS]-1659858428219
[338691] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1787.
GPR[EPS]-1659858428617
GPR[ESUN]-1659858428617
GPR[SSUN]-1659858428617
1256214381
GPR[SPVATF]-1659858428888
GPR[EPVATF]-1659858428948
GPR[SPS]-1659858428948
[339406] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1786.
GPR[EPS]-1659858429332
GPR[SPVATF]-1659858429332
GPR[EPVATF]-1659858429394
GPR[SPS]-1659858429394
[339858] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1786.
GPR[EPS]-1659858429784
GPR[ESUN]-1659858429784
GPR[SSUN]-1659858429784
1256214381
GPR[ESUN]-1659858430057
GPR[SSUN]-1659858430057
1256214381
GPR[SPVATF]-1659858430327
GPR[EPVATF]-1659858430385
GPR[SPS]-1659858430385
[340844] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1782.
GPR[EPS]-1659858430770
GPR[ESUN]-1659858430770
GPR[SSUN]-1659858430770
1256214381
GPR[SPVATF]-1659858431039
GPR[EPVATF]-1659858431097
GPR[SPS]-1659858431097
[341551] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1781.
GPR[EPS]-1659858431477
GPR[SPVATF]-1659858431477
GPR[EPVATF]-1659858431537
GPR[SPS]-1659858431537
[341998] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1781.
GPR[EPS]-1659858431924
GPR[ESUN]-1659858431924
GPR[SSUN]-1659858431924
1256214381
GPR[ESUN]-1659858432216
GPR[SSUN]-1659858432216
1256214381
GPR[SPVATF]-1659858432483
GPR[EPVATF]-1659858432544
GPR[SPS]-1659858432544
[343002] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1778.
GPR[EPS]-1659858432928
GPR[ESUN]-1659858432928
GPR[SSUN]-1659858432928
1256214381
GPR[ESUN]-1659858433200
GPR[SSUN]-1659858433200
1256214381
GPR[ESUN]-1659858433471
GPR[SSUN]-1659858433471
1256214381
GPR[SPVATF]-1659858433750
GPR[EPVATF]-1659858433811
GPR[SPS]-1659858433811
[344268] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1773.
GPR[EPS]-1659858434194
GPR[SPVATF]-1659858434195
GPR[EPVATF]-1659858434255
GPR[SPS]-1659858434255
[344711] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1773.
GPR[EPS]-1659858434637
GPR[ESUN]-1659858434637
GPR[SSUN]-1659858434637
1256214381
GPR[ESUN]-1659858434921
GPR[SSUN]-1659858434921
1256214381
GPR[ESUN]-1659858435198
GPR[SSUN]-1659858435198
1256214381
GPR[SPVATF]-1659858435466
GPR[EPVATF]-1659858435522
GPR[SPS]-1659858435522
[346003] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1842.
GPR[EPS]-1659858435929
GPR[ESUN]-1659858435929
GPR[SSUN]-1659858435929
1256214381
GPR[SPVATF]-1659858436207
GPR[EPVATF]-1659858436262
GPR[SPS]-1659858436262
[346717] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1841.
GPR[EPS]-1659858436643
GPR[SPVATF]-1659858436643
GPR[EPVATF]-1659858436699
GPR[SPS]-1659858436699
[347152] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1841.
GPR[EPS]-1659858437078
GPR[ESUN]-1659858437078
GPR[SSUN]-1659858437078
1256214381
GPR[ESUN]-1659858437360
GPR[SSUN]-1659858437360
1256214381
GPR[SPVATF]-1659858437636
GPR[EPVATF]-1659858437690
GPR[SPS]-1659858437690
[348143] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1837.
GPR[EPS]-1659858438069
GPR[ESUN]-1659858438069
GPR[SSUN]-1659858438069
1256214381
GPR[SPVATF]-1659858438342
GPR[EPVATF]-1659858438397
GPR[SPS]-1659858438397
[348854] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1836.
GPR[EPS]-1659858438780
GPR[SPVATF]-1659858438780
GPR[EPVATF]-1659858438837
GPR[SPS]-1659858438837
[349291] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1836.
GPR[EPS]-1659858439217
GPR[ESUN]-1659858439217
GPR[SSUN]-1659858439217
1256214381
GPR[ESUN]-1659858439517
GPR[SSUN]-1659858439517
1256214381
GPR[ESUN]-1659858439790
GPR[SSUN]-1659858439790
1256214381
GPR[SPVATF]-1659858440059
GPR[EPVATF]-1659858440115
GPR[SPS]-1659858440115
[350572] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1832.
GPR[EPS]-1659858440498
GPR[ESUN]-1659858440498
GPR[SSUN]-1659858440498
1256214381
GPR[ESUN]-1659858440772
GPR[SSUN]-1659858440772
1256214381
GPR[SPVATF]-1659858441044
GPR[EPVATF]-1659858441099
GPR[SPS]-1659858441099
[351555] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1828.
GPR[EPS]-1659858441481
GPR[SPVATF]-1659858441481
GPR[EPVATF]-1659858441538
GPR[SPS]-1659858441538
[351992] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1828.
GPR[EPS]-1659858441918
GPR[ESUN]-1659858441918
GPR[SSUN]-1659858441918
1256214381
GPR[ESUN]-1659858442195
GPR[SSUN]-1659858442195
1256214381
GPR[ESUN]-1659858442468
GPR[SSUN]-1659858442468
1256214381
GPR[SPVATF]-1659858442733
GPR[EPVATF]-1659858442783
GPR[SPS]-1659858442783
[353259] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1617.
GPR[EPS]-1659858443185
GPR[ESUN]-1659858443186
GPR[SSUN]-1659858443186
1256214381
GPR[ESUN]-1659858443456
GPR[SSUN]-1659858443456
1256214381
GPR[SPVATF]-1659858443723
GPR[EPVATF]-1659858443772
GPR[SPS]-1659858443772
[354230] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1613.
GPR[EPS]-1659858444156
GPR[SPVATF]-1659858444156
GPR[EPVATF]-1659858444207
GPR[SPS]-1659858444207
[354659] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1613.
GPR[EPS]-1659858444585
GPR[ESUN]-1659858444585
GPR[SSUN]-1659858444585
-209594369
GPR[ESUN]-1659858444682
GPR[SSUN]-1659858444682
-209594369
GPR[ESUN]-1659858444777
GPR[SSUN]-1659858444777
-209594369
GPR[SPVATF]-1659858444870
GPR[EPVATF]-1659858444993
GPR[SPS]-1659858444993
[355262] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYDataItem:254.
GPR[EPS]-1659858445188
GPR[ESUN]-1659858445188
GPR[SSUN]-1659858445188
-209594369
GPR[ESUN]-1659858445286
GPR[SSUN]-1659858445286
-1395068711
GPR[ESUN]-1659858445398
GPR[SSUN]-1659858445398
-396293673
GPR[SPVATF]-1659858445504
GPR[EPVATF]-1659858445630
GPR[SPS]-1659858445630
[355943] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.AbstractDataset:185.
GPR[EPS]-1659858445869
GPR[ESUN]-1659858445869
GPR[SSUN]-1659858445869
-396293673
GPR[SPVATF]-1659858445981
GPR[EPVATF]-1659858446106
GPR[SPS]-1659858446106
[356393] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.AbstractDataset:184.
GPR[EPS]-1659858446319
GPR[SPVATF]-1659858446319
GPR[EPVATF]-1659858446444
GPR[SPS]-1659858446444
[356731] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.AbstractDataset:184.
GPR[EPS]-1659858446657
GPR[ESUN]-1659858446657
GPR[SSUN]-1659858446657
2055106
GPR[ESUN]-1659858446798
GPR[SSUN]-1659858446798
2055106
GPR[SPVATF]-1659858446939
GPR[EPVATF]-1659858447202
GPR[SPS]-1659858447202
[357607] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:1223.
GPR[EPS]-1659858447533
GPR[ESUN]-1659858447533
GPR[SSUN]-1659858447533
2055106
GPR[ESUN]-1659858447682
GPR[SSUN]-1659858447682
-232368544
GPR[SPVATF]-1659858447793
GPR[EPVATF]-1659858448070
GPR[SPS]-1659858448070
[358443] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.AbstractObjectList:163.
GPR[EPS]-1659858448369
GPR[ESUN]-1659858448369
GPR[SSUN]-1659858448369
78727454
GPR[SPVATF]-1659858448464
GPR[EPVATF]-1659858448725
GPR[SPS]-1659858448725
[358911] ERROR ConstraintModelBuilder - Unable to compile the change: 
public strictfp class Range implements java.io.Serializable {
    private static final long serialVersionUID = -906333695431863380L;

    private double lower;

    private double upper;

    public strictfp Range(double lower, double upper) {
        if (lower > upper) {
            java.lang.String msg = ((("Range(double, double): require lower (" + lower) + ") <= upper (") + upper) + ").";
            throw new java.lang.IllegalArgumentException(msg);
        }
        this.lower = lower;
        this.upper = upper;
    }

    public strictfp double getLowerBound() {
        return this.lower;
    }

    public strictfp double getUpperBound() {
        return this.upper;
    }

    public strictfp double getLength() {
        return this.upper - this.lower;
    }

    public strictfp double getCentralValue() {
        return (this.lower / 2.0) + (this.upper / 2.0);
    }

    public strictfp boolean contains(double value) {
        return (value >= this.lower) && (value <= this.upper);
    }

    public strictfp boolean intersects(double b0, double b1) {
        if (b0 <= this.lower) {
            return b1 > this.lower;
        } else {
            return (b0 < this.upper) && (b1 >= b0);
        }
    }

    public strictfp boolean intersects(org.jfree.data.Range range) {
        return intersects(range.getLowerBound(), range.getUpperBound());
    }

    public strictfp double constrain(double value) {
        double result = value;
        if (!contains(value)) {
            if (value > this.upper) {
                result = this.upper;
            } else if (value < this.lower) {
                result = this.lower;
            }
        }
        return result;
    }

    public static strictfp org.jfree.data.Range combine(org.jfree.data.Range range1, org.jfree.data.Range range2) {
        if (range1 == null) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(188).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(188).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(188).collectInput("range1.lower",range1.lower);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(188).collectInput("org.jfree.data.Range.serialVersionUID",org.jfree.data.Range.serialVersionUID);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(188).collectInput("range2.upper",range2.upper);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(188).collectInput("range1",range1);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(188).collectInput("range2.lower",range2.lower);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(188).collectInput("range2",range2);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(188).collectInput("range1.upper",range1.upper);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(188).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(188).collectionEnds();
            }
            if (runtimeAngelicValue)
                return range2;

        } else if (range2 == null) {
            return range1;
        } else {
            double l = java.lang.Math.min(range1.getLowerBound(), range2.getLowerBound());
            double u = java.lang.Math.max(range1.getUpperBound(), range2.getUpperBound());
            return new org.jfree.data.Range(l, u);
        }
    }

    public static strictfp org.jfree.data.Range expandToInclude(org.jfree.data.Range range, double value) {
        if (range == null) {
            return new org.jfree.data.Range(value, value);
        }
        if (value < range.getLowerBound()) {
            return new org.jfree.data.Range(value, range.getUpperBound());
        } else if (value > range.getUpperBound()) {
            return new org.jfree.data.Range(range.getLowerBound(), value);
        } else {
            return range;
        }
    }

    public static strictfp org.jfree.data.Range expand(org.jfree.data.Range range, double lowerMargin, double upperMargin) {
        if (range == null) {
            throw new java.lang.IllegalArgumentException("Null 'range' argument.");
        }
        double length = range.getLength();
        double lower = range.getLowerBound() - (length * lowerMargin);
        double upper = range.getUpperBound() + (length * upperMargin);
        if (lower > upper) {
            lower = (lower / 2.0) + (upper / 2.0);
            upper = lower;
        }
        return new org.jfree.data.Range(lower, upper);
    }

    public static strictfp org.jfree.data.Range shift(org.jfree.data.Range base, double delta) {
        return org.jfree.data.Range.shift(base, delta, false);
    }

    public static strictfp org.jfree.data.Range shift(org.jfree.data.Range base, double delta, boolean allowZeroCrossing) {
        if (base == null) {
            throw new java.lang.IllegalArgumentException("Null 'base' argument.");
        }
        if (allowZeroCrossing) {
            return new org.jfree.data.Range(base.getLowerBound() + delta, base.getUpperBound() + delta);
        } else {
            return new org.jfree.data.Range(org.jfree.data.Range.shiftWithNoZeroCrossing(base.getLowerBound(), delta), org.jfree.data.Range.shiftWithNoZeroCrossing(base.getUpperBound(), delta));
        }
    }

    private static strictfp double shiftWithNoZeroCrossing(double value, double delta) {
        if (value > 0.0) {
            return java.lang.Math.max(value + delta, 0.0);
        } else if (value < 0.0) {
            return java.lang.Math.min(value + delta, 0.0);
        } else {
            return value + delta;
        }
    }

    public static strictfp org.jfree.data.Range scale(org.jfree.data.Range base, double factor) {
        if (base == null) {
            throw new java.lang.IllegalArgumentException("Null 'base' argument.");
        }
        if (factor < 0) {
            throw new java.lang.IllegalArgumentException("Negative 'factor' argument.");
        }
        return new org.jfree.data.Range(base.getLowerBound() * factor, base.getUpperBound() * factor);
    }

    public strictfp boolean equals(java.lang.Object obj) {
        if (!(obj instanceof org.jfree.data.Range)) {
            return false;
        }
        org.jfree.data.Range range = ((org.jfree.data.Range) (obj));
        if (!(this.lower == range.lower)) {
            return false;
        }
        if (!(this.upper == range.upper)) {
            return false;
        }
        return true;
    }

    public strictfp int hashCode() {
        int result;
        long temp;
        temp = java.lang.Double.doubleToLongBits(this.lower);
        result = ((int) (temp ^ (temp >>> 32)));
        temp = java.lang.Double.doubleToLongBits(this.upper);
        result = (29 * result) + ((int) (temp ^ (temp >>> 32)));
        return result;
    }

    public strictfp java.lang.String toString() {
        return ((("Range[" + this.lower) + ",") + this.upper) + "]";
    }
}
[358911] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858448837
GPR[SSUN]-1659858448837
78727454
GPR[SPVATF]-1659858448937
GPR[EPVATF]-1659858449204
GPR[SPS]-1659858449204
[359550] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.Range:214.
GPR[EPS]-1659858449476
GPR[ESUN]-1659858449476
GPR[SSUN]-1659858449476
-232368544
GPR[SPVATF]-1659858449585
GPR[EPVATF]-1659858449848
GPR[SPS]-1659858449848
[360222] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.AbstractObjectList:162.
GPR[EPS]-1659858450148
GPR[SPVATF]-1659858450148
GPR[EPVATF]-1659858450408
GPR[SPS]-1659858450408
[360784] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.AbstractObjectList:162.
GPR[EPS]-1659858450710
GPR[ESUN]-1659858450710
GPR[SSUN]-1659858450710
-232368544
GPR[SPVATF]-1659858450820
GPR[EPVATF]-1659858451085
GPR[SPS]-1659858451085
[361482] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.AbstractObjectList:161.
GPR[EPS]-1659858451408
GPR[ESUN]-1659858451409
GPR[SSUN]-1659858451409
-1234899810
GPR[ESUN]-1659858451503
GPR[SSUN]-1659858451503
2055106
GPR[SPVATF]-1659858451644
GPR[EPVATF]-1659858451909
GPR[SPS]-1659858451909
[362280] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:1044.
GPR[EPS]-1659858452206
GPR[ESUN]-1659858452206
GPR[SSUN]-1659858452206
2055106
GPR[SPVATF]-1659858452346
GPR[EPVATF]-1659858452609
GPR[SPS]-1659858452609
[363039] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:1043.
GPR[EPS]-1659858452965
GPR[ESUN]-1659858452965
GPR[SSUN]-1659858452965
-1821971816
GPR[ESUN]-1659858453068
GPR[SSUN]-1659858453068
-1821971816
GPR[SPVATF]-1659858453163
GPR[EPVATF]-1659858453333
GPR[SPS]-1659858453333
[363629] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.Series:295.
GPR[EPS]-1659858453555
GPR[ESUN]-1659858453556
GPR[SSUN]-1659858453556
1237707923
GPR[ESUN]-1659858453687
GPR[SSUN]-1659858453687
1600734891
GPR[ESUN]-1659858453837
GPR[SSUN]-1659858453837
1600734891
GPR[SPVATF]-1659858453968
GPR[EPVATF]-1659858454237
GPR[SPS]-1659858454237
[364594] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:776.
GPR[EPS]-1659858454520
GPR[ESUN]-1659858454520
GPR[SSUN]-1659858454520
1600734891
GPR[SPVATF]-1659858454652
GPR[EPVATF]-1659858454916
GPR[SPS]-1659858454916
[365274] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:775.
GPR[EPS]-1659858455200
GPR[ESUN]-1659858455200
GPR[SSUN]-1659858455200
1600734891
GPR[SPVATF]-1659858455330
GPR[EPVATF]-1659858455600
GPR[SPS]-1659858455600
[365986] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:774.
GPR[EPS]-1659858455912
GPR[ESUN]-1659858455912
GPR[SSUN]-1659858455912
1600734891
GPR[SPVATF]-1659858456049
GPR[EPVATF]-1659858456316
GPR[SPS]-1659858456316
[366675] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:773.
GPR[EPS]-1659858456601
GPR[ESUN]-1659858456602
GPR[SSUN]-1659858456602
1600734891
GPR[SPVATF]-1659858456730
GPR[EPVATF]-1659858456993
GPR[SPS]-1659858456993
[367349] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:772.
GPR[EPS]-1659858457275
GPR[ESUN]-1659858457275
GPR[SSUN]-1659858457275
1600734891
GPR[SPVATF]-1659858457404
GPR[EPVATF]-1659858457663
GPR[SPS]-1659858457663
[368020] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:771.
GPR[EPS]-1659858457946
GPR[ESUN]-1659858457946
GPR[SSUN]-1659858457946
1600734891
GPR[SPVATF]-1659858458080
GPR[EPVATF]-1659858458373
GPR[SPS]-1659858458373
[368735] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:770.
GPR[EPS]-1659858458661
GPR[ESUN]-1659858458661
GPR[SSUN]-1659858458661
1600734891
GPR[SPVATF]-1659858458789
GPR[EPVATF]-1659858459047
GPR[SPS]-1659858459047
[369404] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:769.
GPR[EPS]-1659858459330
GPR[ESUN]-1659858459331
GPR[SSUN]-1659858459331
1600734891
GPR[SPVATF]-1659858459459
GPR[EPVATF]-1659858459718
GPR[SPS]-1659858459718
[370079] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:768.
GPR[EPS]-1659858460005
GPR[ESUN]-1659858460005
GPR[SSUN]-1659858460005
1600734891
GPR[SPVATF]-1659858460134
GPR[EPVATF]-1659858460401
GPR[SPS]-1659858460401
[370795] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:767.
GPR[EPS]-1659858460721
GPR[ESUN]-1659858460721
GPR[SSUN]-1659858460722
1600734891
GPR[SPVATF]-1659858460853
GPR[EPVATF]-1659858461118
GPR[SPS]-1659858461118
[371475] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:766.
GPR[EPS]-1659858461401
GPR[ESUN]-1659858461401
GPR[SSUN]-1659858461401
1600734891
GPR[SPVATF]-1659858461529
GPR[EPVATF]-1659858461794
GPR[SPS]-1659858461794
[372149] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:765.
GPR[EPS]-1659858462075
GPR[ESUN]-1659858462075
GPR[SSUN]-1659858462075
1600734891
GPR[SPVATF]-1659858462203
GPR[EPVATF]-1659858462466
GPR[SPS]-1659858462466
[372821] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:764.
GPR[EPS]-1659858462747
GPR[ESUN]-1659858462747
GPR[SSUN]-1659858462747
1600734891
GPR[SPVATF]-1659858462908
GPR[EPVATF]-1659858463174
GPR[SPS]-1659858463174
[373536] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:763.
GPR[EPS]-1659858463462
GPR[ESUN]-1659858463463
GPR[SSUN]-1659858463463
1600734891
GPR[SPVATF]-1659858463592
GPR[EPVATF]-1659858463858
GPR[SPS]-1659858463858
[374215] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:762.
GPR[EPS]-1659858464141
GPR[ESUN]-1659858464141
GPR[SSUN]-1659858464141
1600734891
GPR[SPVATF]-1659858464276
GPR[EPVATF]-1659858464541
GPR[SPS]-1659858464541
[374926] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:761.
GPR[EPS]-1659858464852
GPR[ESUN]-1659858464852
GPR[SSUN]-1659858464852
1600734891
GPR[SPVATF]-1659858464982
GPR[EPVATF]-1659858465250
GPR[SPS]-1659858465250
[375607] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:760.
GPR[EPS]-1659858465533
GPR[ESUN]-1659858465533
GPR[SSUN]-1659858465533
1600734891
GPR[SPVATF]-1659858465663
GPR[EPVATF]-1659858465931
GPR[SPS]-1659858465931
[376290] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:759.
GPR[EPS]-1659858466216
GPR[ESUN]-1659858466216
GPR[SSUN]-1659858466216
1600734891
GPR[SPVATF]-1659858466344
GPR[EPVATF]-1659858466610
GPR[SPS]-1659858466610
[377010] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:758.
GPR[EPS]-1659858466936
GPR[ESUN]-1659858466936
GPR[SSUN]-1659858466936
1600734891
GPR[SPVATF]-1659858467074
GPR[EPVATF]-1659858467342
GPR[SPS]-1659858467342
[377704] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:756.
GPR[EPS]-1659858467630
GPR[ESUN]-1659858467630
GPR[SSUN]-1659858467630
1600734891
GPR[SPVATF]-1659858467762
GPR[EPVATF]-1659858468035
GPR[SPS]-1659858468035
[378394] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:755.
GPR[EPS]-1659858468320
GPR[ESUN]-1659858468320
GPR[SSUN]-1659858468320
1600734891
GPR[SPVATF]-1659858468453
GPR[EPVATF]-1659858468725
GPR[SPS]-1659858468725
[379130] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:754.
GPR[EPS]-1659858469056
GPR[ESUN]-1659858469056
GPR[SSUN]-1659858469056
1600734891
GPR[SPVATF]-1659858469191
GPR[EPVATF]-1659858469464
GPR[SPS]-1659858469464
[379837] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:753.
GPR[EPS]-1659858469763
GPR[ESUN]-1659858469763
GPR[SSUN]-1659858469763
1600734891
GPR[SPVATF]-1659858469898
GPR[EPVATF]-1659858470181
GPR[SPS]-1659858470181
[380593] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:752.
GPR[EPS]-1659858470519
GPR[ESUN]-1659858470519
GPR[SSUN]-1659858470519
1600734891
GPR[SPVATF]-1659858470653
GPR[EPVATF]-1659858470929
GPR[SPS]-1659858470929
[381288] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:751.
GPR[EPS]-1659858471214
GPR[ESUN]-1659858471214
GPR[SSUN]-1659858471214
1600734891
GPR[SPVATF]-1659858471345
GPR[EPVATF]-1659858471619
GPR[SPS]-1659858471619
[381979] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:750.
GPR[EPS]-1659858471905
GPR[ESUN]-1659858471905
GPR[SSUN]-1659858471905
1600734891
GPR[SPVATF]-1659858472037
GPR[EPVATF]-1659858472312
GPR[SPS]-1659858472312
[382724] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:749.
GPR[EPS]-1659858472650
GPR[ESUN]-1659858472650
GPR[SSUN]-1659858472650
1600734891
GPR[SPVATF]-1659858472781
GPR[EPVATF]-1659858473058
GPR[SPS]-1659858473058
[383423] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:748.
GPR[EPS]-1659858473349
GPR[ESUN]-1659858473349
GPR[SSUN]-1659858473349
1600734891
GPR[SPVATF]-1659858473482
GPR[EPVATF]-1659858473769
GPR[SPS]-1659858473769
[384136] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:747.
GPR[EPS]-1659858474062
GPR[ESUN]-1659858474062
GPR[SSUN]-1659858474062
1600734891
GPR[SPVATF]-1659858474195
GPR[EPVATF]-1659858474473
GPR[SPS]-1659858474473
[384884] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:746.
GPR[EPS]-1659858474810
GPR[ESUN]-1659858474810
GPR[SSUN]-1659858474810
1600734891
GPR[SPVATF]-1659858474944
GPR[EPVATF]-1659858475219
GPR[SPS]-1659858475219
[385587] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:745.
GPR[EPS]-1659858475513
GPR[ESUN]-1659858475513
GPR[SSUN]-1659858475513
1600734891
GPR[SPVATF]-1659858475642
GPR[EPVATF]-1659858475918
GPR[SPS]-1659858475918
[386279] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:744.
GPR[EPS]-1659858476205
GPR[ESUN]-1659858476205
GPR[SSUN]-1659858476205
1600734891
GPR[SPVATF]-1659858476339
GPR[EPVATF]-1659858476665
GPR[SPS]-1659858476665
[387034] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:743.
GPR[EPS]-1659858476960
GPR[ESUN]-1659858476960
GPR[SSUN]-1659858476960
1600734891
GPR[SPVATF]-1659858477091
GPR[EPVATF]-1659858477373
GPR[SPS]-1659858477373
[387738] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:742.
GPR[EPS]-1659858477664
GPR[ESUN]-1659858477664
GPR[SSUN]-1659858477664
1600734891
GPR[SPVATF]-1659858477793
GPR[EPVATF]-1659858478071
GPR[SPS]-1659858478071
[388469] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:741.
GPR[EPS]-1659858478395
GPR[ESUN]-1659858478395
GPR[SSUN]-1659858478395
1600734891
GPR[SPVATF]-1659858478525
GPR[EPVATF]-1659858478807
GPR[SPS]-1659858478807
[389168] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:740.
GPR[EPS]-1659858479094
GPR[ESUN]-1659858479095
GPR[SSUN]-1659858479095
1600734891
GPR[SPVATF]-1659858479225
GPR[EPVATF]-1659858479507
GPR[SPS]-1659858479507
[389872] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:739.
GPR[EPS]-1659858479798
GPR[ESUN]-1659858479798
GPR[SSUN]-1659858479798
1600734891
GPR[SPVATF]-1659858479926
GPR[EPVATF]-1659858480205
GPR[SPS]-1659858480205
[390609] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:738.
GPR[EPS]-1659858480535
GPR[ESUN]-1659858480535
GPR[SSUN]-1659858480535
1600734891
GPR[SPVATF]-1659858480665
GPR[EPVATF]-1659858480947
GPR[SPS]-1659858480948
[391315] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:736.
GPR[EPS]-1659858481241
GPR[ESUN]-1659858481241
GPR[SSUN]-1659858481241
1600734891
GPR[SPVATF]-1659858481370
GPR[EPVATF]-1659858481650
GPR[SPS]-1659858481650
[392016] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:735.
GPR[EPS]-1659858481942
GPR[ESUN]-1659858481942
GPR[SSUN]-1659858481942
1600734891
GPR[SPVATF]-1659858482071
GPR[EPVATF]-1659858482350
GPR[SPS]-1659858482350
[392758] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:734.
GPR[EPS]-1659858482684
GPR[ESUN]-1659858482684
GPR[SSUN]-1659858482684
1600734891
GPR[SPVATF]-1659858482816
GPR[EPVATF]-1659858483095
GPR[SPS]-1659858483095
[393458] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:733.
GPR[EPS]-1659858483384
GPR[ESUN]-1659858483384
GPR[SSUN]-1659858483384
1600734891
GPR[SPVATF]-1659858483518
GPR[EPVATF]-1659858483799
GPR[SPS]-1659858483799
[394168] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:732.
GPR[EPS]-1659858484094
GPR[ESUN]-1659858484094
GPR[SSUN]-1659858484094
1600734891
GPR[SPVATF]-1659858484261
GPR[EPVATF]-1659858484543
GPR[SPS]-1659858484543
[394910] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:731.
GPR[EPS]-1659858484836
GPR[ESUN]-1659858484836
GPR[SSUN]-1659858484837
1600734891
GPR[SPVATF]-1659858484973
GPR[EPVATF]-1659858485256
GPR[SPS]-1659858485256
[395644] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:730.
GPR[EPS]-1659858485570
GPR[ESUN]-1659858485570
GPR[SSUN]-1659858485570
1600734891
GPR[SPVATF]-1659858485705
GPR[EPVATF]-1659858485985
GPR[SPS]-1659858485985
[396383] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:729.
GPR[EPS]-1659858486309
GPR[ESUN]-1659858486309
GPR[SSUN]-1659858486309
1600734891
GPR[SPVATF]-1659858486440
GPR[EPVATF]-1659858486725
GPR[SPS]-1659858486725
[397092] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:728.
GPR[EPS]-1659858487018
GPR[ESUN]-1659858487018
GPR[SSUN]-1659858487018
1600734891
GPR[SPVATF]-1659858487145
GPR[EPVATF]-1659858487428
GPR[SPS]-1659858487428
[397790] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:727.
GPR[EPS]-1659858487716
GPR[ESUN]-1659858487716
GPR[SSUN]-1659858487716
1600734891
GPR[SPVATF]-1659858487844
GPR[EPVATF]-1659858488125
GPR[SPS]-1659858488125
[398520] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:726.
GPR[EPS]-1659858488446
GPR[ESUN]-1659858488446
GPR[SSUN]-1659858488446
1600734891
GPR[SPVATF]-1659858488580
GPR[EPVATF]-1659858488867
GPR[SPS]-1659858488867
[399234] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:725.
GPR[EPS]-1659858489160
GPR[ESUN]-1659858489160
GPR[SSUN]-1659858489160
1600734891
GPR[SPVATF]-1659858489290
GPR[EPVATF]-1659858489574
GPR[SPS]-1659858489574
[399935] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:724.
GPR[EPS]-1659858489861
GPR[ESUN]-1659858489861
GPR[SSUN]-1659858489861
1600734891
GPR[SPVATF]-1659858489991
GPR[EPVATF]-1659858490271
GPR[SPS]-1659858490271
[400661] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:723.
GPR[EPS]-1659858490587
GPR[ESUN]-1659858490587
GPR[SSUN]-1659858490587
1600734891
GPR[SPVATF]-1659858490719
GPR[EPVATF]-1659858491002
GPR[SPS]-1659858491002
[401363] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:722.
GPR[EPS]-1659858491290
GPR[ESUN]-1659858491290
GPR[SSUN]-1659858491290
1600734891
GPR[SPVATF]-1659858491423
GPR[EPVATF]-1659858491705
GPR[SPS]-1659858491705
[402099] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:721.
GPR[EPS]-1659858492025
GPR[ESUN]-1659858492025
GPR[SSUN]-1659858492025
1600734891
GPR[SPVATF]-1659858492157
GPR[EPVATF]-1659858492447
GPR[SPS]-1659858492447
[402811] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:720.
GPR[EPS]-1659858492737
GPR[ESUN]-1659858492737
GPR[SSUN]-1659858492737
1600734891
GPR[SPVATF]-1659858492868
GPR[EPVATF]-1659858493674
GPR[SPS]-1659858493674
[404049] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:719.
GPR[EPS]-1659858493976
GPR[ESUN]-1659858493976
GPR[SSUN]-1659858493976
1600734891
GPR[SPVATF]-1659858494105
GPR[EPVATF]-1659858494383
GPR[SPS]-1659858494383
[404741] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:718.
GPR[EPS]-1659858494667
GPR[ESUN]-1659858494667
GPR[SSUN]-1659858494667
1600734891
GPR[ESUN]-1659858494804
GPR[SSUN]-1659858494804
1600734891
GPR[ESUN]-1659858494930
GPR[SSUN]-1659858494930
1600734891
GPR[ESUN]-1659858495053
GPR[SSUN]-1659858495053
1600734891
GPR[ESUN]-1659858495175
GPR[SSUN]-1659858495175
1600734891
GPR[ESUN]-1659858495303
GPR[SSUN]-1659858495303
1600734891
GPR[ESUN]-1659858495433
GPR[SSUN]-1659858495433
1600734891
GPR[ESUN]-1659858495558
GPR[SSUN]-1659858495558
1600734891
GPR[ESUN]-1659858495680
GPR[SSUN]-1659858495680
1600734891
GPR[ESUN]-1659858495803
GPR[SSUN]-1659858495803
1600734891
GPR[ESUN]-1659858495927
GPR[SSUN]-1659858495927
1600734891
GPR[ESUN]-1659858496048
GPR[SSUN]-1659858496048
1600734891
GPR[ESUN]-1659858496171
GPR[SSUN]-1659858496171
2001530082
GPR[SPVATF]-1659858496261
GPR[EPVATF]-1659858496531
GPR[SPS]-1659858496531
[406709] ERROR ConstraintModelBuilder - Unable to compile the change: 
public abstract class TickUnit implements java.lang.Comparable , java.io.Serializable {
    private static final long serialVersionUID = 510179855057013974L;

    private double size;

    private int minorTickCount;

    public TickUnit(double size) {
        this.size = size;
    }

    public TickUnit(double size, int minorTickCount) {
        this.size = size;
        this.minorTickCount = minorTickCount;
    }

    public double getSize() {
        return this.size;
    }

    public int getMinorTickCount() {
        return this.minorTickCount;
    }

    public java.lang.String valueToString(double value) {
        return java.lang.String.valueOf(value);
    }

    public int compareTo(java.lang.Object object) {
        if (object instanceof org.jfree.chart.axis.TickUnit) {
            org.jfree.chart.axis.TickUnit other = ((org.jfree.chart.axis.TickUnit) (object));
            if (this.size > other.getSize()) {
                return 1;
            } else if (this.size < other.getSize()) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(253).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(253).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(253).collectInput("other",other);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(253).collectInput("org.jfree.chart.axis.TickUnit.this.minorTickCount",org.jfree.chart.axis.TickUnit.this.minorTickCount);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(253).collectInput("object",object);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(253).collectInput("org.jfree.chart.axis.TickUnit.this.size",org.jfree.chart.axis.TickUnit.this.size);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(253).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(253).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return -1;

            } else {
                return 0;
            }
        } else {
            return -1;
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.axis.TickUnit)) {
            return false;
        }
        org.jfree.chart.axis.TickUnit that = ((org.jfree.chart.axis.TickUnit) (obj));
        if (this.size != that.size) {
            return false;
        }
        if (this.minorTickCount != that.minorTickCount) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        long temp = (this.size != (+0.0)) ? java.lang.Double.doubleToLongBits(this.size) : 0L;
        return ((int) (temp ^ (temp >>> 32)));
    }
}
[406709] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858496635
GPR[SSUN]-1659858496635
2001530082
GPR[SPVATF]-1659858496750
GPR[EPVATF]-1659858497030
GPR[SPS]-1659858497030
[407211] ERROR ConstraintModelBuilder - Unable to compile the change: 
public abstract class TickUnit implements java.lang.Comparable , java.io.Serializable {
    private static final long serialVersionUID = 510179855057013974L;

    private double size;

    private int minorTickCount;

    public TickUnit(double size) {
        this.size = size;
    }

    public TickUnit(double size, int minorTickCount) {
        this.size = size;
        this.minorTickCount = minorTickCount;
    }

    public double getSize() {
        return this.size;
    }

    public int getMinorTickCount() {
        return this.minorTickCount;
    }

    public java.lang.String valueToString(double value) {
        return java.lang.String.valueOf(value);
    }

    public int compareTo(java.lang.Object object) {
        if (object instanceof org.jfree.chart.axis.TickUnit) {
            org.jfree.chart.axis.TickUnit other = ((org.jfree.chart.axis.TickUnit) (object));
            if (this.size > other.getSize()) {
                return 1;
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(254).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(254).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(254).collectInput("other",other);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(254).collectInput("org.jfree.chart.axis.TickUnit.this.minorTickCount",org.jfree.chart.axis.TickUnit.this.minorTickCount);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(254).collectInput("object",object);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(254).collectInput("org.jfree.chart.axis.TickUnit.this.size",org.jfree.chart.axis.TickUnit.this.size);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(254).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(254).collectionEnds();
                }
                if (runtimeAngelicValue) if (this.size < other.getSize()) {
                    return -1;
                } else {
                    return 0;
                }
            }
        } else {
            return -1;
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.axis.TickUnit)) {
            return false;
        }
        org.jfree.chart.axis.TickUnit that = ((org.jfree.chart.axis.TickUnit) (obj));
        if (this.size != that.size) {
            return false;
        }
        if (this.minorTickCount != that.minorTickCount) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        long temp = (this.size != (+0.0)) ? java.lang.Double.doubleToLongBits(this.size) : 0L;
        return ((int) (temp ^ (temp >>> 32)));
    }
}
[407211] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659858497137
GPR[EPVATF]-1659858497419
GPR[SPS]-1659858497419
[407738] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.TickUnit:149.
GPR[EPS]-1659858497664
GPR[ESUN]-1659858497664
GPR[SSUN]-1659858497664
-1234899810
GPR[ESUN]-1659858497757
GPR[SSUN]-1659858497757
-1234899810
GPR[ESUN]-1659858497849
GPR[SSUN]-1659858497849
-1234899810
GPR[SPVATF]-1659858497947
GPR[EPVATF]-1659858498227
GPR[SPS]-1659858498228
[408558] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.ObjectList:95.
GPR[EPS]-1659858498484
GPR[ESUN]-1659858498484
GPR[SSUN]-1659858498484
-779068883
GPR[ESUN]-1659858498597
GPR[SSUN]-1659858498597
-779068883
GPR[SPVATF]-1659858498707
GPR[EPVATF]-1659858498982
GPR[SPS]-1659858498982
[409329] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.event.ChartChangeEvent:131.
GPR[EPS]-1659858499255
GPR[ESUN]-1659858499255
GPR[SSUN]-1659858499255
2055106
GPR[ESUN]-1659858499400
GPR[SSUN]-1659858499400
2490626
GPR[ESUN]-1659858499541
GPR[SSUN]-1659858499541
1600734891
GPR[SPVATF]-1659858499667
GPR[EPVATF]-1659858499939
GPR[SPS]-1659858499939
[410301] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:428.
GPR[EPS]-1659858500227
GPR[ESUN]-1659858500227
GPR[SSUN]-1659858500227
-232368544
GPR[SPVATF]-1659858500335
GPR[EPVATF]-1659858500620
GPR[SPS]-1659858500620
[410975] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.AbstractObjectList:111.
GPR[EPS]-1659858500901
GPR[ESUN]-1659858500901
GPR[SSUN]-1659858500901
1917890483
GPR[ESUN]-1659858501012
GPR[SSUN]-1659858501012
1917890483
GPR[SPVATF]-1659858501117
GPR[EPVATF]-1659858501392
GPR[SPS]-1659858501392
[411748] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.TickUnits:94.
GPR[EPS]-1659858501674
GPR[ESUN]-1659858501674
GPR[SSUN]-1659858501674
1917890483
GPR[SPVATF]-1659858501787
GPR[EPVATF]-1659858502066
GPR[SPS]-1659858502066
[412393] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.TickUnits:93.
GPR[EPS]-1659858502319
GPR[ESUN]-1659858502319
GPR[SSUN]-1659858502319
1917890483
GPR[SPVATF]-1659858502429
GPR[EPVATF]-1659858502710
GPR[SPS]-1659858502710
[413043] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.TickUnits:90.
GPR[EPS]-1659858502969
GPR[SPVATF]-1659858502969
GPR[EPVATF]-1659858503243
GPR[SPS]-1659858503243
[413587] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.TickUnits:90.
GPR[EPS]-1659858503513
GPR[ESUN]-1659858503513
GPR[SSUN]-1659858503513
2001530082
GPR[SPVATF]-1659858503608
GPR[EPVATF]-1659858503889
GPR[SPS]-1659858503889
[414075] ERROR ConstraintModelBuilder - Unable to compile the change: 
public abstract class TickUnit implements java.lang.Comparable , java.io.Serializable {
    private static final long serialVersionUID = 510179855057013974L;

    private double size;

    private int minorTickCount;

    public TickUnit(double size) {
        this.size = size;
    }

    public TickUnit(double size, int minorTickCount) {
        this.size = size;
        this.minorTickCount = minorTickCount;
    }

    public double getSize() {
        return this.size;
    }

    public int getMinorTickCount() {
        return this.minorTickCount;
    }

    public java.lang.String valueToString(double value) {
        return java.lang.String.valueOf(value);
    }

    public int compareTo(java.lang.Object object) {
        if (object instanceof org.jfree.chart.axis.TickUnit) {
            org.jfree.chart.axis.TickUnit other = ((org.jfree.chart.axis.TickUnit) (object));
            if (this.size > other.getSize()) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(264).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(264).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(264).collectInput("other",other);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(264).collectInput("org.jfree.chart.axis.TickUnit.this.minorTickCount",org.jfree.chart.axis.TickUnit.this.minorTickCount);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(264).collectInput("object",object);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(264).collectInput("org.jfree.chart.axis.TickUnit.this.size",org.jfree.chart.axis.TickUnit.this.size);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(264).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(264).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return 1;

            } else if (this.size < other.getSize()) {
                return -1;
            } else {
                return 0;
            }
        } else {
            return -1;
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.axis.TickUnit)) {
            return false;
        }
        org.jfree.chart.axis.TickUnit that = ((org.jfree.chart.axis.TickUnit) (obj));
        if (this.size != that.size) {
            return false;
        }
        if (this.minorTickCount != that.minorTickCount) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        long temp = (this.size != (+0.0)) ? java.lang.Double.doubleToLongBits(this.size) : 0L;
        return ((int) (temp ^ (temp >>> 32)));
    }
}
[414075] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858504001
GPR[SSUN]-1659858504002
2001530082
GPR[SPVATF]-1659858504092
GPR[EPVATF]-1659858504377
GPR[SPS]-1659858504377
[414555] ERROR ConstraintModelBuilder - Unable to compile the change: 
public abstract class TickUnit implements java.lang.Comparable , java.io.Serializable {
    private static final long serialVersionUID = 510179855057013974L;

    private double size;

    private int minorTickCount;

    public TickUnit(double size) {
        this.size = size;
    }

    public TickUnit(double size, int minorTickCount) {
        this.size = size;
        this.minorTickCount = minorTickCount;
    }

    public double getSize() {
        return this.size;
    }

    public int getMinorTickCount() {
        return this.minorTickCount;
    }

    public java.lang.String valueToString(double value) {
        return java.lang.String.valueOf(value);
    }

    public int compareTo(java.lang.Object object) {
        if (object instanceof org.jfree.chart.axis.TickUnit) {
            org.jfree.chart.axis.TickUnit other = ((org.jfree.chart.axis.TickUnit) (object));
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(265).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(265).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(265).collectInput("other",other);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(265).collectInput("org.jfree.chart.axis.TickUnit.this.minorTickCount",org.jfree.chart.axis.TickUnit.this.minorTickCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(265).collectInput("object",object);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(265).collectInput("org.jfree.chart.axis.TickUnit.this.size",org.jfree.chart.axis.TickUnit.this.size);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(265).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(265).collectionEnds();
            }
            if (runtimeAngelicValue) if (this.size > other.getSize()) {
                return 1;
            } else if (this.size < other.getSize()) {
                return -1;
            } else {
                return 0;
            }
        } else {
            return -1;
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.axis.TickUnit)) {
            return false;
        }
        org.jfree.chart.axis.TickUnit that = ((org.jfree.chart.axis.TickUnit) (obj));
        if (this.size != that.size) {
            return false;
        }
        if (this.minorTickCount != that.minorTickCount) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        long temp = (this.size != (+0.0)) ? java.lang.Double.doubleToLongBits(this.size) : 0L;
        return ((int) (temp ^ (temp >>> 32)));
    }
}
[414556] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659858504482
GPR[EPVATF]-1659858504765
GPR[SPS]-1659858504765
[415265] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.TickUnit:146.
GPR[EPS]-1659858505191
GPR[ESUN]-1659858505191
GPR[SSUN]-1659858505191
2001530082
GPR[ESUN]-1659858505284
GPR[SSUN]-1659858505284
2001530082
GPR[SPVATF]-1659858505377
GPR[EPVATF]-1659858505659
GPR[SPS]-1659858505659
[416178] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.TickUnit:144.
GPR[EPS]-1659858506104
GPR[ESUN]-1659858506104
GPR[SSUN]-1659858506104
2001530082
GPR[ESUN]-1659858506201
GPR[SSUN]-1659858506201
-232368544
GPR[ESUN]-1659858506310
GPR[SSUN]-1659858506310
-232368544
GPR[SPVATF]-1659858506420
GPR[EPVATF]-1659858506704
GPR[SPS]-1659858506704
[417058] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.AbstractObjectList:132.
GPR[EPS]-1659858506984
GPR[ESUN]-1659858506984
GPR[SSUN]-1659858506984
-232368544
GPR[SPVATF]-1659858507093
GPR[EPVATF]-1659858507368
GPR[SPS]-1659858507368
[417716] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.AbstractObjectList:131.
GPR[EPS]-1659858507643
GPR[ESUN]-1659858507643
GPR[SSUN]-1659858507643
-232368544
GPR[SPVATF]-1659858507751
GPR[EPVATF]-1659858508030
GPR[SPS]-1659858508030
[418388] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.AbstractObjectList:126.
GPR[EPS]-1659858508314
GPR[SPVATF]-1659858508315
GPR[EPVATF]-1659858508594
GPR[SPS]-1659858508594
[418919] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.AbstractObjectList:126.
GPR[EPS]-1659858508846
GPR[ESUN]-1659858508846
GPR[SSUN]-1659858508846
-232368544
GPR[SPVATF]-1659858508955
GPR[EPVATF]-1659858509229
GPR[SPS]-1659858509229
[419553] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.AbstractObjectList:123.
GPR[EPS]-1659858509479
GPR[SPVATF]-1659858509479
GPR[EPVATF]-1659858509754
GPR[SPS]-1659858509754
[420091] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.AbstractObjectList:123.
GPR[EPS]-1659858510017
GPR[ESUN]-1659858510017
GPR[SSUN]-1659858510017
-232368544
GPR[ESUN]-1659858510126
GPR[SSUN]-1659858510126
-232368544
GPR[SPVATF]-1659858510233
GPR[EPVATF]-1659858510515
GPR[SPS]-1659858510515
[420869] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.AbstractObjectList:110.
GPR[EPS]-1659858510795
GPR[SPVATF]-1659858510795
GPR[EPVATF]-1659858511068
GPR[SPS]-1659858511068
[421427] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.AbstractObjectList:110.
GPR[EPS]-1659858511353
GPR[ESUN]-1659858511353
GPR[SSUN]-1659858511353
-232368544
GPR[ESUN]-1659858511459
GPR[SSUN]-1659858511459
1600734891
GPR[SPVATF]-1659858511584
GPR[EPVATF]-1659858511861
GPR[SPS]-1659858511861
[422249] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:427.
GPR[EPS]-1659858512175
GPR[SPVATF]-1659858512175
GPR[EPVATF]-1659858512451
GPR[SPS]-1659858512451
[422836] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:427.
GPR[EPS]-1659858512762
GPR[ESUN]-1659858512762
GPR[SSUN]-1659858512762
1600734891
GPR[ESUN]-1659858512891
GPR[SSUN]-1659858512891
2490626
GPR[ESUN]-1659858513033
GPR[SSUN]-1659858513033
2490626
GPR[SPVATF]-1659858513175
GPR[EPVATF]-1659858513453
GPR[SPS]-1659858513453
[423864] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:966.
GPR[EPS]-1659858513790
GPR[ESUN]-1659858513790
GPR[SSUN]-1659858513790
2490626
GPR[ESUN]-1659858513961
GPR[SSUN]-1659858513961
2490626
GPR[SPVATF]-1659858514104
GPR[EPVATF]-1659858514387
GPR[SPS]-1659858514387
[424788] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:962.
GPR[EPS]-1659858514714
GPR[SPVATF]-1659858514715
GPR[EPVATF]-1659858514996
GPR[SPS]-1659858514996
[425393] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:962.
GPR[EPS]-1659858515319
GPR[ESUN]-1659858515319
GPR[SSUN]-1659858515319
-396293673
GPR[ESUN]-1659858515429
GPR[SSUN]-1659858515429
-396293673
GPR[SPVATF]-1659858515536
GPR[EPVATF]-1659858515819
GPR[SPS]-1659858515819
[426143] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.AbstractDataset:130.
GPR[EPS]-1659858516069
GPR[ESUN]-1659858516069
GPR[SSUN]-1659858516069
78727454
GPR[ESUN]-1659858516165
GPR[SSUN]-1659858516165
78727454
GPR[ESUN]-1659858516262
GPR[SSUN]-1659858516262
-1821971816
GPR[ESUN]-1659858516361
GPR[SSUN]-1659858516361
-1821971816
GPR[SPVATF]-1659858516458
GPR[EPVATF]-1659858516649
GPR[SPS]-1659858516649
[426981] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.Series:327.
GPR[EPS]-1659858516907
GPR[ESUN]-1659858516907
GPR[SSUN]-1659858516907
-1821971816
GPR[ESUN]-1659858517006
GPR[SSUN]-1659858517006
-1821971816
GPR[ESUN]-1659858517103
GPR[SSUN]-1659858517103
-1821971816
GPR[SPVATF]-1659858517199
GPR[EPVATF]-1659858517389
GPR[SPS]-1659858517389
[427692] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.Series:314.
GPR[EPS]-1659858517618
GPR[ESUN]-1659858517618
GPR[SSUN]-1659858517618
-1821971816
GPR[SPVATF]-1659858517715
GPR[EPVATF]-1659858517902
GPR[SPS]-1659858517902
[428213] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.Series:313.
GPR[EPS]-1659858518139
GPR[SPVATF]-1659858518139
GPR[EPVATF]-1659858518328
GPR[SPS]-1659858518328
[428632] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.Series:313.
GPR[EPS]-1659858518558
GPR[ESUN]-1659858518558
GPR[SSUN]-1659858518558
493593264
GPR[SPVATF]-1659858518663
GPR[EPVATF]-1659858518819
GPR[SPS]-1659858518819
[429042] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class DateTickUnit extends org.jfree.chart.axis.TickUnit implements java.io.Serializable {
    private static final long serialVersionUID = -7289292157229621901L;

    private org.jfree.chart.axis.DateTickUnitType unitType;

    private int count;

    private org.jfree.chart.axis.DateTickUnitType rollUnitType;

    private int rollCount;

    private java.text.DateFormat formatter;

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple) {
        this(unitType, multiple, java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT));
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, java.text.DateFormat formatter) {
        this(unitType, multiple, unitType, multiple, formatter);
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, org.jfree.chart.axis.DateTickUnitType rollUnitType, int rollMultiple, java.text.DateFormat formatter) {
        super(org.jfree.chart.axis.DateTickUnit.getMillisecondCount(unitType, multiple));
        if (formatter == null) {
            throw new java.lang.IllegalArgumentException("Null 'formatter' argument.");
        }
        if (multiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'multiple' > 0.");
        }
        if (rollMultiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'rollMultiple' > 0.");
        }
        this.unitType = unitType;
        this.count = multiple;
        this.rollUnitType = rollUnitType;
        this.rollCount = rollMultiple;
        this.formatter = formatter;
    }

    public org.jfree.chart.axis.DateTickUnitType getUnitType() {
        return this.unitType;
    }

    public int getMultiple() {
        return this.count;
    }

    public org.jfree.chart.axis.DateTickUnitType getRollUnitType() {
        return this.rollUnitType;
    }

    public int getRollMultiple() {
        return this.rollCount;
    }

    public java.lang.String valueToString(double milliseconds) {
        return this.formatter.format(new java.util.Date(((long) (milliseconds))));
    }

    public java.lang.String dateToString(java.util.Date date) {
        return this.formatter.format(date);
    }

    public java.util.Date addToDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.unitType.getCalendarField(), this.count);
        return calendar.getTime();
    }

    public java.util.Date rollDate(java.util.Date base) {
        return rollDate(base, java.util.TimeZone.getDefault());
    }

    public java.util.Date rollDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.rollUnitType.getCalendarField(), this.rollCount);
        return calendar.getTime();
    }

    public int getCalendarField() {
        return this.unitType.getCalendarField();
    }

    private static long getMillisecondCount(org.jfree.chart.axis.DateTickUnitType unit, int count) {
        if (unit.equals(org.jfree.chart.axis.DateTickUnitType.YEAR)) {
            return ((((365L * 24L) * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MONTH)) {
            return ((((31L * 24L) * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.DAY)) {
            return (((24L * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.HOUR)) {
            return ((60L * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MINUTE)) {
            return (60L * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.SECOND)) {
            return 1000L * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MILLISECOND)) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(286).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(286).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(286).collectInput("count",count);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(286).collectInput("unit",unit);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(286).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(286).collectionEnds();
            }
            if (runtimeAngelicValue)
                return count;

        } else {
            throw new java.lang.IllegalArgumentException("The 'unit' argument has a " + "value that is not recognised.");
        }
    }

    private static java.text.DateFormat notNull(java.text.DateFormat formatter) {
        if (formatter == null) {
            return java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT);
        } else {
            return formatter;
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.axis.DateTickUnit)) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }
        org.jfree.chart.axis.DateTickUnit that = ((org.jfree.chart.axis.DateTickUnit) (obj));
        if (!this.unitType.equals(that.unitType)) {
            return false;
        }
        if (this.count != that.count) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.formatter, that.formatter)) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result = 19;
        result = (37 * result) + this.unitType.hashCode();
        result = (37 * result) + this.count;
        result = (37 * result) + this.formatter.hashCode();
        return result;
    }

    public java.lang.String toString() {
        return ((("DateTickUnit[" + this.unitType.toString()) + ", ") + this.count) + "]";
    }
}
[429042] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858518968
GPR[SSUN]-1659858518968
493593264
GPR[SPVATF]-1659858519066
GPR[EPVATF]-1659858519228
GPR[SPS]-1659858519228
[429420] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class DateTickUnit extends org.jfree.chart.axis.TickUnit implements java.io.Serializable {
    private static final long serialVersionUID = -7289292157229621901L;

    private org.jfree.chart.axis.DateTickUnitType unitType;

    private int count;

    private org.jfree.chart.axis.DateTickUnitType rollUnitType;

    private int rollCount;

    private java.text.DateFormat formatter;

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple) {
        this(unitType, multiple, java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT));
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, java.text.DateFormat formatter) {
        this(unitType, multiple, unitType, multiple, formatter);
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, org.jfree.chart.axis.DateTickUnitType rollUnitType, int rollMultiple, java.text.DateFormat formatter) {
        super(org.jfree.chart.axis.DateTickUnit.getMillisecondCount(unitType, multiple));
        if (formatter == null) {
            throw new java.lang.IllegalArgumentException("Null 'formatter' argument.");
        }
        if (multiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'multiple' > 0.");
        }
        if (rollMultiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'rollMultiple' > 0.");
        }
        this.unitType = unitType;
        this.count = multiple;
        this.rollUnitType = rollUnitType;
        this.rollCount = rollMultiple;
        this.formatter = formatter;
    }

    public org.jfree.chart.axis.DateTickUnitType getUnitType() {
        return this.unitType;
    }

    public int getMultiple() {
        return this.count;
    }

    public org.jfree.chart.axis.DateTickUnitType getRollUnitType() {
        return this.rollUnitType;
    }

    public int getRollMultiple() {
        return this.rollCount;
    }

    public java.lang.String valueToString(double milliseconds) {
        return this.formatter.format(new java.util.Date(((long) (milliseconds))));
    }

    public java.lang.String dateToString(java.util.Date date) {
        return this.formatter.format(date);
    }

    public java.util.Date addToDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.unitType.getCalendarField(), this.count);
        return calendar.getTime();
    }

    public java.util.Date rollDate(java.util.Date base) {
        return rollDate(base, java.util.TimeZone.getDefault());
    }

    public java.util.Date rollDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.rollUnitType.getCalendarField(), this.rollCount);
        return calendar.getTime();
    }

    public int getCalendarField() {
        return this.unitType.getCalendarField();
    }

    private static long getMillisecondCount(org.jfree.chart.axis.DateTickUnitType unit, int count) {
        if (unit.equals(org.jfree.chart.axis.DateTickUnitType.YEAR)) {
            return ((((365L * 24L) * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MONTH)) {
            return ((((31L * 24L) * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.DAY)) {
            return (((24L * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.HOUR)) {
            return ((60L * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MINUTE)) {
            return (60L * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.SECOND)) {
            return 1000L * count;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(287).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(287).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(287).collectInput("count",count);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(287).collectInput("unit",unit);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(287).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(287).collectionEnds();
            }
            if (runtimeAngelicValue) if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MILLISECOND)) {
                return count;
            } else {
                throw new java.lang.IllegalArgumentException("The 'unit' argument has a " + "value that is not recognised.");
            }
        }
    }

    private static java.text.DateFormat notNull(java.text.DateFormat formatter) {
        if (formatter == null) {
            return java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT);
        } else {
            return formatter;
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.axis.DateTickUnit)) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }
        org.jfree.chart.axis.DateTickUnit that = ((org.jfree.chart.axis.DateTickUnit) (obj));
        if (!this.unitType.equals(that.unitType)) {
            return false;
        }
        if (this.count != that.count) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.formatter, that.formatter)) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result = 19;
        result = (37 * result) + this.unitType.hashCode();
        result = (37 * result) + this.count;
        result = (37 * result) + this.formatter.hashCode();
        return result;
    }

    public java.lang.String toString() {
        return ((("DateTickUnit[" + this.unitType.toString()) + ", ") + this.count) + "]";
    }
}
[429420] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659858519347
GPR[EPVATF]-1659858519505
GPR[SPS]-1659858519505
[429790] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateTickUnit:321.
GPR[EPS]-1659858519716
GPR[ESUN]-1659858519716
GPR[SSUN]-1659858519716
493593264
GPR[SPVATF]-1659858519815
GPR[EPVATF]-1659858519971
GPR[SPS]-1659858519971
[430167] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class DateTickUnit extends org.jfree.chart.axis.TickUnit implements java.io.Serializable {
    private static final long serialVersionUID = -7289292157229621901L;

    private org.jfree.chart.axis.DateTickUnitType unitType;

    private int count;

    private org.jfree.chart.axis.DateTickUnitType rollUnitType;

    private int rollCount;

    private java.text.DateFormat formatter;

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple) {
        this(unitType, multiple, java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT));
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, java.text.DateFormat formatter) {
        this(unitType, multiple, unitType, multiple, formatter);
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, org.jfree.chart.axis.DateTickUnitType rollUnitType, int rollMultiple, java.text.DateFormat formatter) {
        super(org.jfree.chart.axis.DateTickUnit.getMillisecondCount(unitType, multiple));
        if (formatter == null) {
            throw new java.lang.IllegalArgumentException("Null 'formatter' argument.");
        }
        if (multiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'multiple' > 0.");
        }
        if (rollMultiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'rollMultiple' > 0.");
        }
        this.unitType = unitType;
        this.count = multiple;
        this.rollUnitType = rollUnitType;
        this.rollCount = rollMultiple;
        this.formatter = formatter;
    }

    public org.jfree.chart.axis.DateTickUnitType getUnitType() {
        return this.unitType;
    }

    public int getMultiple() {
        return this.count;
    }

    public org.jfree.chart.axis.DateTickUnitType getRollUnitType() {
        return this.rollUnitType;
    }

    public int getRollMultiple() {
        return this.rollCount;
    }

    public java.lang.String valueToString(double milliseconds) {
        return this.formatter.format(new java.util.Date(((long) (milliseconds))));
    }

    public java.lang.String dateToString(java.util.Date date) {
        return this.formatter.format(date);
    }

    public java.util.Date addToDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.unitType.getCalendarField(), this.count);
        return calendar.getTime();
    }

    public java.util.Date rollDate(java.util.Date base) {
        return rollDate(base, java.util.TimeZone.getDefault());
    }

    public java.util.Date rollDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.rollUnitType.getCalendarField(), this.rollCount);
        return calendar.getTime();
    }

    public int getCalendarField() {
        return this.unitType.getCalendarField();
    }

    private static long getMillisecondCount(org.jfree.chart.axis.DateTickUnitType unit, int count) {
        if (unit.equals(org.jfree.chart.axis.DateTickUnitType.YEAR)) {
            return ((((365L * 24L) * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MONTH)) {
            return ((((31L * 24L) * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.DAY)) {
            return (((24L * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.HOUR)) {
            return ((60L * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MINUTE)) {
            return (60L * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.SECOND)) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(289).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(289).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(289).collectInput("count",count);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(289).collectInput("unit",unit);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(289).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(289).collectionEnds();
            }
            if (runtimeAngelicValue)
                return 1000L * count;

        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MILLISECOND)) {
            return count;
        } else {
            throw new java.lang.IllegalArgumentException("The 'unit' argument has a " + "value that is not recognised.");
        }
    }

    private static java.text.DateFormat notNull(java.text.DateFormat formatter) {
        if (formatter == null) {
            return java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT);
        } else {
            return formatter;
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.axis.DateTickUnit)) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }
        org.jfree.chart.axis.DateTickUnit that = ((org.jfree.chart.axis.DateTickUnit) (obj));
        if (!this.unitType.equals(that.unitType)) {
            return false;
        }
        if (this.count != that.count) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.formatter, that.formatter)) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result = 19;
        result = (37 * result) + this.unitType.hashCode();
        result = (37 * result) + this.count;
        result = (37 * result) + this.formatter.hashCode();
        return result;
    }

    public java.lang.String toString() {
        return ((("DateTickUnit[" + this.unitType.toString()) + ", ") + this.count) + "]";
    }
}
[430168] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858520094
GPR[SSUN]-1659858520094
493593264
GPR[SPVATF]-1659858520192
GPR[EPVATF]-1659858520357
GPR[SPS]-1659858520357
[430554] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class DateTickUnit extends org.jfree.chart.axis.TickUnit implements java.io.Serializable {
    private static final long serialVersionUID = -7289292157229621901L;

    private org.jfree.chart.axis.DateTickUnitType unitType;

    private int count;

    private org.jfree.chart.axis.DateTickUnitType rollUnitType;

    private int rollCount;

    private java.text.DateFormat formatter;

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple) {
        this(unitType, multiple, java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT));
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, java.text.DateFormat formatter) {
        this(unitType, multiple, unitType, multiple, formatter);
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, org.jfree.chart.axis.DateTickUnitType rollUnitType, int rollMultiple, java.text.DateFormat formatter) {
        super(org.jfree.chart.axis.DateTickUnit.getMillisecondCount(unitType, multiple));
        if (formatter == null) {
            throw new java.lang.IllegalArgumentException("Null 'formatter' argument.");
        }
        if (multiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'multiple' > 0.");
        }
        if (rollMultiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'rollMultiple' > 0.");
        }
        this.unitType = unitType;
        this.count = multiple;
        this.rollUnitType = rollUnitType;
        this.rollCount = rollMultiple;
        this.formatter = formatter;
    }

    public org.jfree.chart.axis.DateTickUnitType getUnitType() {
        return this.unitType;
    }

    public int getMultiple() {
        return this.count;
    }

    public org.jfree.chart.axis.DateTickUnitType getRollUnitType() {
        return this.rollUnitType;
    }

    public int getRollMultiple() {
        return this.rollCount;
    }

    public java.lang.String valueToString(double milliseconds) {
        return this.formatter.format(new java.util.Date(((long) (milliseconds))));
    }

    public java.lang.String dateToString(java.util.Date date) {
        return this.formatter.format(date);
    }

    public java.util.Date addToDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.unitType.getCalendarField(), this.count);
        return calendar.getTime();
    }

    public java.util.Date rollDate(java.util.Date base) {
        return rollDate(base, java.util.TimeZone.getDefault());
    }

    public java.util.Date rollDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.rollUnitType.getCalendarField(), this.rollCount);
        return calendar.getTime();
    }

    public int getCalendarField() {
        return this.unitType.getCalendarField();
    }

    private static long getMillisecondCount(org.jfree.chart.axis.DateTickUnitType unit, int count) {
        if (unit.equals(org.jfree.chart.axis.DateTickUnitType.YEAR)) {
            return ((((365L * 24L) * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MONTH)) {
            return ((((31L * 24L) * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.DAY)) {
            return (((24L * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.HOUR)) {
            return ((60L * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MINUTE)) {
            return (60L * 1000L) * count;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(290).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(290).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(290).collectInput("count",count);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(290).collectInput("unit",unit);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(290).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(290).collectionEnds();
            }
            if (runtimeAngelicValue) if (unit.equals(org.jfree.chart.axis.DateTickUnitType.SECOND)) {
                return 1000L * count;
            } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MILLISECOND)) {
                return count;
            } else {
                throw new java.lang.IllegalArgumentException("The 'unit' argument has a " + "value that is not recognised.");
            }
        }
    }

    private static java.text.DateFormat notNull(java.text.DateFormat formatter) {
        if (formatter == null) {
            return java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT);
        } else {
            return formatter;
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.axis.DateTickUnit)) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }
        org.jfree.chart.axis.DateTickUnit that = ((org.jfree.chart.axis.DateTickUnit) (obj));
        if (!this.unitType.equals(that.unitType)) {
            return false;
        }
        if (this.count != that.count) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.formatter, that.formatter)) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result = 19;
        result = (37 * result) + this.unitType.hashCode();
        result = (37 * result) + this.count;
        result = (37 * result) + this.formatter.hashCode();
        return result;
    }

    public java.lang.String toString() {
        return ((("DateTickUnit[" + this.unitType.toString()) + ", ") + this.count) + "]";
    }
}
[430554] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659858520480
GPR[EPVATF]-1659858520639
GPR[SPS]-1659858520639
[430935] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateTickUnit:318.
GPR[EPS]-1659858520861
GPR[ESUN]-1659858520861
GPR[SSUN]-1659858520861
493593264
GPR[SPVATF]-1659858520962
GPR[EPVATF]-1659858521118
GPR[SPS]-1659858521118
[431312] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class DateTickUnit extends org.jfree.chart.axis.TickUnit implements java.io.Serializable {
    private static final long serialVersionUID = -7289292157229621901L;

    private org.jfree.chart.axis.DateTickUnitType unitType;

    private int count;

    private org.jfree.chart.axis.DateTickUnitType rollUnitType;

    private int rollCount;

    private java.text.DateFormat formatter;

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple) {
        this(unitType, multiple, java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT));
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, java.text.DateFormat formatter) {
        this(unitType, multiple, unitType, multiple, formatter);
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, org.jfree.chart.axis.DateTickUnitType rollUnitType, int rollMultiple, java.text.DateFormat formatter) {
        super(org.jfree.chart.axis.DateTickUnit.getMillisecondCount(unitType, multiple));
        if (formatter == null) {
            throw new java.lang.IllegalArgumentException("Null 'formatter' argument.");
        }
        if (multiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'multiple' > 0.");
        }
        if (rollMultiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'rollMultiple' > 0.");
        }
        this.unitType = unitType;
        this.count = multiple;
        this.rollUnitType = rollUnitType;
        this.rollCount = rollMultiple;
        this.formatter = formatter;
    }

    public org.jfree.chart.axis.DateTickUnitType getUnitType() {
        return this.unitType;
    }

    public int getMultiple() {
        return this.count;
    }

    public org.jfree.chart.axis.DateTickUnitType getRollUnitType() {
        return this.rollUnitType;
    }

    public int getRollMultiple() {
        return this.rollCount;
    }

    public java.lang.String valueToString(double milliseconds) {
        return this.formatter.format(new java.util.Date(((long) (milliseconds))));
    }

    public java.lang.String dateToString(java.util.Date date) {
        return this.formatter.format(date);
    }

    public java.util.Date addToDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.unitType.getCalendarField(), this.count);
        return calendar.getTime();
    }

    public java.util.Date rollDate(java.util.Date base) {
        return rollDate(base, java.util.TimeZone.getDefault());
    }

    public java.util.Date rollDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.rollUnitType.getCalendarField(), this.rollCount);
        return calendar.getTime();
    }

    public int getCalendarField() {
        return this.unitType.getCalendarField();
    }

    private static long getMillisecondCount(org.jfree.chart.axis.DateTickUnitType unit, int count) {
        if (unit.equals(org.jfree.chart.axis.DateTickUnitType.YEAR)) {
            return ((((365L * 24L) * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MONTH)) {
            return ((((31L * 24L) * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.DAY)) {
            return (((24L * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.HOUR)) {
            return ((60L * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MINUTE)) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(292).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("count",count);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("unit",unit);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectionEnds();
            }
            if (runtimeAngelicValue)
                return (60L * 1000L) * count;

        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.SECOND)) {
            return 1000L * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MILLISECOND)) {
            return count;
        } else {
            throw new java.lang.IllegalArgumentException("The 'unit' argument has a " + "value that is not recognised.");
        }
    }

    private static java.text.DateFormat notNull(java.text.DateFormat formatter) {
        if (formatter == null) {
            return java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT);
        } else {
            return formatter;
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.axis.DateTickUnit)) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }
        org.jfree.chart.axis.DateTickUnit that = ((org.jfree.chart.axis.DateTickUnit) (obj));
        if (!this.unitType.equals(that.unitType)) {
            return false;
        }
        if (this.count != that.count) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.formatter, that.formatter)) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result = 19;
        result = (37 * result) + this.unitType.hashCode();
        result = (37 * result) + this.count;
        result = (37 * result) + this.formatter.hashCode();
        return result;
    }

    public java.lang.String toString() {
        return ((("DateTickUnit[" + this.unitType.toString()) + ", ") + this.count) + "]";
    }
}
[431312] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858521238
GPR[SSUN]-1659858521238
493593264
GPR[SPVATF]-1659858521335
GPR[EPVATF]-1659858521493
GPR[SPS]-1659858521493
[431692] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class DateTickUnit extends org.jfree.chart.axis.TickUnit implements java.io.Serializable {
    private static final long serialVersionUID = -7289292157229621901L;

    private org.jfree.chart.axis.DateTickUnitType unitType;

    private int count;

    private org.jfree.chart.axis.DateTickUnitType rollUnitType;

    private int rollCount;

    private java.text.DateFormat formatter;

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple) {
        this(unitType, multiple, java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT));
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, java.text.DateFormat formatter) {
        this(unitType, multiple, unitType, multiple, formatter);
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, org.jfree.chart.axis.DateTickUnitType rollUnitType, int rollMultiple, java.text.DateFormat formatter) {
        super(org.jfree.chart.axis.DateTickUnit.getMillisecondCount(unitType, multiple));
        if (formatter == null) {
            throw new java.lang.IllegalArgumentException("Null 'formatter' argument.");
        }
        if (multiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'multiple' > 0.");
        }
        if (rollMultiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'rollMultiple' > 0.");
        }
        this.unitType = unitType;
        this.count = multiple;
        this.rollUnitType = rollUnitType;
        this.rollCount = rollMultiple;
        this.formatter = formatter;
    }

    public org.jfree.chart.axis.DateTickUnitType getUnitType() {
        return this.unitType;
    }

    public int getMultiple() {
        return this.count;
    }

    public org.jfree.chart.axis.DateTickUnitType getRollUnitType() {
        return this.rollUnitType;
    }

    public int getRollMultiple() {
        return this.rollCount;
    }

    public java.lang.String valueToString(double milliseconds) {
        return this.formatter.format(new java.util.Date(((long) (milliseconds))));
    }

    public java.lang.String dateToString(java.util.Date date) {
        return this.formatter.format(date);
    }

    public java.util.Date addToDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.unitType.getCalendarField(), this.count);
        return calendar.getTime();
    }

    public java.util.Date rollDate(java.util.Date base) {
        return rollDate(base, java.util.TimeZone.getDefault());
    }

    public java.util.Date rollDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.rollUnitType.getCalendarField(), this.rollCount);
        return calendar.getTime();
    }

    public int getCalendarField() {
        return this.unitType.getCalendarField();
    }

    private static long getMillisecondCount(org.jfree.chart.axis.DateTickUnitType unit, int count) {
        if (unit.equals(org.jfree.chart.axis.DateTickUnitType.YEAR)) {
            return ((((365L * 24L) * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MONTH)) {
            return ((((31L * 24L) * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.DAY)) {
            return (((24L * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.HOUR)) {
            return ((60L * 60L) * 1000L) * count;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(293).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(293).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(293).collectInput("count",count);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(293).collectInput("unit",unit);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(293).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(293).collectionEnds();
            }
            if (runtimeAngelicValue) if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MINUTE)) {
                return (60L * 1000L) * count;
            } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.SECOND)) {
                return 1000L * count;
            } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MILLISECOND)) {
                return count;
            } else {
                throw new java.lang.IllegalArgumentException("The 'unit' argument has a " + "value that is not recognised.");
            }
        }
    }

    private static java.text.DateFormat notNull(java.text.DateFormat formatter) {
        if (formatter == null) {
            return java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT);
        } else {
            return formatter;
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.axis.DateTickUnit)) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }
        org.jfree.chart.axis.DateTickUnit that = ((org.jfree.chart.axis.DateTickUnit) (obj));
        if (!this.unitType.equals(that.unitType)) {
            return false;
        }
        if (this.count != that.count) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.formatter, that.formatter)) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result = 19;
        result = (37 * result) + this.unitType.hashCode();
        result = (37 * result) + this.count;
        result = (37 * result) + this.formatter.hashCode();
        return result;
    }

    public java.lang.String toString() {
        return ((("DateTickUnit[" + this.unitType.toString()) + ", ") + this.count) + "]";
    }
}
[431692] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659858521618
GPR[EPVATF]-1659858521782
GPR[SPS]-1659858521782
[432073] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateTickUnit:315.
GPR[EPS]-1659858521999
GPR[ESUN]-1659858521999
GPR[SSUN]-1659858521999
493593264
GPR[SPVATF]-1659858522103
GPR[EPVATF]-1659858522259
GPR[SPS]-1659858522259
[432457] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class DateTickUnit extends org.jfree.chart.axis.TickUnit implements java.io.Serializable {
    private static final long serialVersionUID = -7289292157229621901L;

    private org.jfree.chart.axis.DateTickUnitType unitType;

    private int count;

    private org.jfree.chart.axis.DateTickUnitType rollUnitType;

    private int rollCount;

    private java.text.DateFormat formatter;

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple) {
        this(unitType, multiple, java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT));
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, java.text.DateFormat formatter) {
        this(unitType, multiple, unitType, multiple, formatter);
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, org.jfree.chart.axis.DateTickUnitType rollUnitType, int rollMultiple, java.text.DateFormat formatter) {
        super(org.jfree.chart.axis.DateTickUnit.getMillisecondCount(unitType, multiple));
        if (formatter == null) {
            throw new java.lang.IllegalArgumentException("Null 'formatter' argument.");
        }
        if (multiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'multiple' > 0.");
        }
        if (rollMultiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'rollMultiple' > 0.");
        }
        this.unitType = unitType;
        this.count = multiple;
        this.rollUnitType = rollUnitType;
        this.rollCount = rollMultiple;
        this.formatter = formatter;
    }

    public org.jfree.chart.axis.DateTickUnitType getUnitType() {
        return this.unitType;
    }

    public int getMultiple() {
        return this.count;
    }

    public org.jfree.chart.axis.DateTickUnitType getRollUnitType() {
        return this.rollUnitType;
    }

    public int getRollMultiple() {
        return this.rollCount;
    }

    public java.lang.String valueToString(double milliseconds) {
        return this.formatter.format(new java.util.Date(((long) (milliseconds))));
    }

    public java.lang.String dateToString(java.util.Date date) {
        return this.formatter.format(date);
    }

    public java.util.Date addToDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.unitType.getCalendarField(), this.count);
        return calendar.getTime();
    }

    public java.util.Date rollDate(java.util.Date base) {
        return rollDate(base, java.util.TimeZone.getDefault());
    }

    public java.util.Date rollDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.rollUnitType.getCalendarField(), this.rollCount);
        return calendar.getTime();
    }

    public int getCalendarField() {
        return this.unitType.getCalendarField();
    }

    private static long getMillisecondCount(org.jfree.chart.axis.DateTickUnitType unit, int count) {
        if (unit.equals(org.jfree.chart.axis.DateTickUnitType.YEAR)) {
            return ((((365L * 24L) * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MONTH)) {
            return ((((31L * 24L) * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.DAY)) {
            return (((24L * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.HOUR)) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(295).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(295).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(295).collectInput("count",count);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(295).collectInput("unit",unit);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(295).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(295).collectionEnds();
            }
            if (runtimeAngelicValue)
                return ((60L * 60L) * 1000L) * count;

        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MINUTE)) {
            return (60L * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.SECOND)) {
            return 1000L * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MILLISECOND)) {
            return count;
        } else {
            throw new java.lang.IllegalArgumentException("The 'unit' argument has a " + "value that is not recognised.");
        }
    }

    private static java.text.DateFormat notNull(java.text.DateFormat formatter) {
        if (formatter == null) {
            return java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT);
        } else {
            return formatter;
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.axis.DateTickUnit)) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }
        org.jfree.chart.axis.DateTickUnit that = ((org.jfree.chart.axis.DateTickUnit) (obj));
        if (!this.unitType.equals(that.unitType)) {
            return false;
        }
        if (this.count != that.count) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.formatter, that.formatter)) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result = 19;
        result = (37 * result) + this.unitType.hashCode();
        result = (37 * result) + this.count;
        result = (37 * result) + this.formatter.hashCode();
        return result;
    }

    public java.lang.String toString() {
        return ((("DateTickUnit[" + this.unitType.toString()) + ", ") + this.count) + "]";
    }
}
[432458] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858522384
GPR[SSUN]-1659858522384
493593264
GPR[SPVATF]-1659858522482
GPR[EPVATF]-1659858522642
GPR[SPS]-1659858522642
[432834] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class DateTickUnit extends org.jfree.chart.axis.TickUnit implements java.io.Serializable {
    private static final long serialVersionUID = -7289292157229621901L;

    private org.jfree.chart.axis.DateTickUnitType unitType;

    private int count;

    private org.jfree.chart.axis.DateTickUnitType rollUnitType;

    private int rollCount;

    private java.text.DateFormat formatter;

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple) {
        this(unitType, multiple, java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT));
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, java.text.DateFormat formatter) {
        this(unitType, multiple, unitType, multiple, formatter);
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, org.jfree.chart.axis.DateTickUnitType rollUnitType, int rollMultiple, java.text.DateFormat formatter) {
        super(org.jfree.chart.axis.DateTickUnit.getMillisecondCount(unitType, multiple));
        if (formatter == null) {
            throw new java.lang.IllegalArgumentException("Null 'formatter' argument.");
        }
        if (multiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'multiple' > 0.");
        }
        if (rollMultiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'rollMultiple' > 0.");
        }
        this.unitType = unitType;
        this.count = multiple;
        this.rollUnitType = rollUnitType;
        this.rollCount = rollMultiple;
        this.formatter = formatter;
    }

    public org.jfree.chart.axis.DateTickUnitType getUnitType() {
        return this.unitType;
    }

    public int getMultiple() {
        return this.count;
    }

    public org.jfree.chart.axis.DateTickUnitType getRollUnitType() {
        return this.rollUnitType;
    }

    public int getRollMultiple() {
        return this.rollCount;
    }

    public java.lang.String valueToString(double milliseconds) {
        return this.formatter.format(new java.util.Date(((long) (milliseconds))));
    }

    public java.lang.String dateToString(java.util.Date date) {
        return this.formatter.format(date);
    }

    public java.util.Date addToDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.unitType.getCalendarField(), this.count);
        return calendar.getTime();
    }

    public java.util.Date rollDate(java.util.Date base) {
        return rollDate(base, java.util.TimeZone.getDefault());
    }

    public java.util.Date rollDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.rollUnitType.getCalendarField(), this.rollCount);
        return calendar.getTime();
    }

    public int getCalendarField() {
        return this.unitType.getCalendarField();
    }

    private static long getMillisecondCount(org.jfree.chart.axis.DateTickUnitType unit, int count) {
        if (unit.equals(org.jfree.chart.axis.DateTickUnitType.YEAR)) {
            return ((((365L * 24L) * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MONTH)) {
            return ((((31L * 24L) * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.DAY)) {
            return (((24L * 60L) * 60L) * 1000L) * count;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(296).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(296).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(296).collectInput("count",count);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(296).collectInput("unit",unit);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(296).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(296).collectionEnds();
            }
            if (runtimeAngelicValue) if (unit.equals(org.jfree.chart.axis.DateTickUnitType.HOUR)) {
                return ((60L * 60L) * 1000L) * count;
            } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MINUTE)) {
                return (60L * 1000L) * count;
            } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.SECOND)) {
                return 1000L * count;
            } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MILLISECOND)) {
                return count;
            } else {
                throw new java.lang.IllegalArgumentException("The 'unit' argument has a " + "value that is not recognised.");
            }
        }
    }

    private static java.text.DateFormat notNull(java.text.DateFormat formatter) {
        if (formatter == null) {
            return java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT);
        } else {
            return formatter;
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.axis.DateTickUnit)) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }
        org.jfree.chart.axis.DateTickUnit that = ((org.jfree.chart.axis.DateTickUnit) (obj));
        if (!this.unitType.equals(that.unitType)) {
            return false;
        }
        if (this.count != that.count) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.formatter, that.formatter)) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result = 19;
        result = (37 * result) + this.unitType.hashCode();
        result = (37 * result) + this.count;
        result = (37 * result) + this.formatter.hashCode();
        return result;
    }

    public java.lang.String toString() {
        return ((("DateTickUnit[" + this.unitType.toString()) + ", ") + this.count) + "]";
    }
}
[432834] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659858522760
GPR[EPVATF]-1659858522921
GPR[SPS]-1659858522921
[433211] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateTickUnit:312.
GPR[EPS]-1659858523137
GPR[ESUN]-1659858523137
GPR[SSUN]-1659858523137
493593264
GPR[SPVATF]-1659858523237
GPR[EPVATF]-1659858523395
GPR[SPS]-1659858523395
[433587] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class DateTickUnit extends org.jfree.chart.axis.TickUnit implements java.io.Serializable {
    private static final long serialVersionUID = -7289292157229621901L;

    private org.jfree.chart.axis.DateTickUnitType unitType;

    private int count;

    private org.jfree.chart.axis.DateTickUnitType rollUnitType;

    private int rollCount;

    private java.text.DateFormat formatter;

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple) {
        this(unitType, multiple, java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT));
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, java.text.DateFormat formatter) {
        this(unitType, multiple, unitType, multiple, formatter);
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, org.jfree.chart.axis.DateTickUnitType rollUnitType, int rollMultiple, java.text.DateFormat formatter) {
        super(org.jfree.chart.axis.DateTickUnit.getMillisecondCount(unitType, multiple));
        if (formatter == null) {
            throw new java.lang.IllegalArgumentException("Null 'formatter' argument.");
        }
        if (multiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'multiple' > 0.");
        }
        if (rollMultiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'rollMultiple' > 0.");
        }
        this.unitType = unitType;
        this.count = multiple;
        this.rollUnitType = rollUnitType;
        this.rollCount = rollMultiple;
        this.formatter = formatter;
    }

    public org.jfree.chart.axis.DateTickUnitType getUnitType() {
        return this.unitType;
    }

    public int getMultiple() {
        return this.count;
    }

    public org.jfree.chart.axis.DateTickUnitType getRollUnitType() {
        return this.rollUnitType;
    }

    public int getRollMultiple() {
        return this.rollCount;
    }

    public java.lang.String valueToString(double milliseconds) {
        return this.formatter.format(new java.util.Date(((long) (milliseconds))));
    }

    public java.lang.String dateToString(java.util.Date date) {
        return this.formatter.format(date);
    }

    public java.util.Date addToDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.unitType.getCalendarField(), this.count);
        return calendar.getTime();
    }

    public java.util.Date rollDate(java.util.Date base) {
        return rollDate(base, java.util.TimeZone.getDefault());
    }

    public java.util.Date rollDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.rollUnitType.getCalendarField(), this.rollCount);
        return calendar.getTime();
    }

    public int getCalendarField() {
        return this.unitType.getCalendarField();
    }

    private static long getMillisecondCount(org.jfree.chart.axis.DateTickUnitType unit, int count) {
        if (unit.equals(org.jfree.chart.axis.DateTickUnitType.YEAR)) {
            return ((((365L * 24L) * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MONTH)) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(298).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("count",count);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("unit",unit);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectionEnds();
            }
            if (runtimeAngelicValue)
                return ((((31L * 24L) * 60L) * 60L) * 1000L) * count;

        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.DAY)) {
            return (((24L * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.HOUR)) {
            return ((60L * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MINUTE)) {
            return (60L * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.SECOND)) {
            return 1000L * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MILLISECOND)) {
            return count;
        } else {
            throw new java.lang.IllegalArgumentException("The 'unit' argument has a " + "value that is not recognised.");
        }
    }

    private static java.text.DateFormat notNull(java.text.DateFormat formatter) {
        if (formatter == null) {
            return java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT);
        } else {
            return formatter;
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.axis.DateTickUnit)) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }
        org.jfree.chart.axis.DateTickUnit that = ((org.jfree.chart.axis.DateTickUnit) (obj));
        if (!this.unitType.equals(that.unitType)) {
            return false;
        }
        if (this.count != that.count) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.formatter, that.formatter)) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result = 19;
        result = (37 * result) + this.unitType.hashCode();
        result = (37 * result) + this.count;
        result = (37 * result) + this.formatter.hashCode();
        return result;
    }

    public java.lang.String toString() {
        return ((("DateTickUnit[" + this.unitType.toString()) + ", ") + this.count) + "]";
    }
}
[433587] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858523513
GPR[SSUN]-1659858523513
493593264
GPR[SPVATF]-1659858523613
GPR[EPVATF]-1659858523774
GPR[SPS]-1659858523774
[433965] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class DateTickUnit extends org.jfree.chart.axis.TickUnit implements java.io.Serializable {
    private static final long serialVersionUID = -7289292157229621901L;

    private org.jfree.chart.axis.DateTickUnitType unitType;

    private int count;

    private org.jfree.chart.axis.DateTickUnitType rollUnitType;

    private int rollCount;

    private java.text.DateFormat formatter;

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple) {
        this(unitType, multiple, java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT));
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, java.text.DateFormat formatter) {
        this(unitType, multiple, unitType, multiple, formatter);
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, org.jfree.chart.axis.DateTickUnitType rollUnitType, int rollMultiple, java.text.DateFormat formatter) {
        super(org.jfree.chart.axis.DateTickUnit.getMillisecondCount(unitType, multiple));
        if (formatter == null) {
            throw new java.lang.IllegalArgumentException("Null 'formatter' argument.");
        }
        if (multiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'multiple' > 0.");
        }
        if (rollMultiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'rollMultiple' > 0.");
        }
        this.unitType = unitType;
        this.count = multiple;
        this.rollUnitType = rollUnitType;
        this.rollCount = rollMultiple;
        this.formatter = formatter;
    }

    public org.jfree.chart.axis.DateTickUnitType getUnitType() {
        return this.unitType;
    }

    public int getMultiple() {
        return this.count;
    }

    public org.jfree.chart.axis.DateTickUnitType getRollUnitType() {
        return this.rollUnitType;
    }

    public int getRollMultiple() {
        return this.rollCount;
    }

    public java.lang.String valueToString(double milliseconds) {
        return this.formatter.format(new java.util.Date(((long) (milliseconds))));
    }

    public java.lang.String dateToString(java.util.Date date) {
        return this.formatter.format(date);
    }

    public java.util.Date addToDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.unitType.getCalendarField(), this.count);
        return calendar.getTime();
    }

    public java.util.Date rollDate(java.util.Date base) {
        return rollDate(base, java.util.TimeZone.getDefault());
    }

    public java.util.Date rollDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.rollUnitType.getCalendarField(), this.rollCount);
        return calendar.getTime();
    }

    public int getCalendarField() {
        return this.unitType.getCalendarField();
    }

    private static long getMillisecondCount(org.jfree.chart.axis.DateTickUnitType unit, int count) {
        if (unit.equals(org.jfree.chart.axis.DateTickUnitType.YEAR)) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(299).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(299).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(299).collectInput("count",count);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(299).collectInput("unit",unit);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(299).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(299).collectionEnds();
            }
            if (runtimeAngelicValue)
                return ((((365L * 24L) * 60L) * 60L) * 1000L) * count;

        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MONTH)) {
            return ((((31L * 24L) * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.DAY)) {
            return (((24L * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.HOUR)) {
            return ((60L * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MINUTE)) {
            return (60L * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.SECOND)) {
            return 1000L * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MILLISECOND)) {
            return count;
        } else {
            throw new java.lang.IllegalArgumentException("The 'unit' argument has a " + "value that is not recognised.");
        }
    }

    private static java.text.DateFormat notNull(java.text.DateFormat formatter) {
        if (formatter == null) {
            return java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT);
        } else {
            return formatter;
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.axis.DateTickUnit)) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }
        org.jfree.chart.axis.DateTickUnit that = ((org.jfree.chart.axis.DateTickUnit) (obj));
        if (!this.unitType.equals(that.unitType)) {
            return false;
        }
        if (this.count != that.count) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.formatter, that.formatter)) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result = 19;
        result = (37 * result) + this.unitType.hashCode();
        result = (37 * result) + this.count;
        result = (37 * result) + this.formatter.hashCode();
        return result;
    }

    public java.lang.String toString() {
        return ((("DateTickUnit[" + this.unitType.toString()) + ", ") + this.count) + "]";
    }
}
[433965] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858523891
GPR[SSUN]-1659858523891
1856841872
GPR[SPVATF]-1659858524027
GPR[EPVATF]-1659858524186
GPR[SPS]-1659858524186
[434542] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1280.
GPR[EPS]-1659858524469
GPR[ESUN]-1659858524469
GPR[SSUN]-1659858524469
1856841872
GPR[SPVATF]-1659858524610
GPR[EPVATF]-1659858524770
GPR[SPS]-1659858524770
[435153] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1279.
GPR[EPS]-1659858525080
GPR[SPVATF]-1659858525080
GPR[EPVATF]-1659858525237
GPR[SPS]-1659858525237
[435589] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1279.
GPR[EPS]-1659858525515
GPR[ESUN]-1659858525515
GPR[SSUN]-1659858525515
1856841872
GPR[ESUN]-1659858525659
GPR[SSUN]-1659858525659
1856841872
GPR[ESUN]-1659858525794
GPR[SSUN]-1659858525794
1856841872
GPR[SPVATF]-1659858525933
GPR[EPVATF]-1659858526092
GPR[SPS]-1659858526092
[436448] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1265.
GPR[EPS]-1659858526374
GPR[ESUN]-1659858526374
GPR[SSUN]-1659858526374
1856841872
GPR[SPVATF]-1659858526510
GPR[EPVATF]-1659858526670
GPR[SPS]-1659858526670
[437035] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1263.
GPR[EPS]-1659858526961
GPR[ESUN]-1659858526961
GPR[SSUN]-1659858526961
1856841872
GPR[SPVATF]-1659858527106
GPR[EPVATF]-1659858527268
GPR[SPS]-1659858527268
[437623] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1261.
GPR[EPS]-1659858527549
GPR[ESUN]-1659858527549
GPR[SSUN]-1659858527549
1856841872
GPR[SPVATF]-1659858527691
GPR[EPVATF]-1659858527851
GPR[SPS]-1659858527851
[438204] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1259.
GPR[EPS]-1659858528130
GPR[ESUN]-1659858528130
GPR[SSUN]-1659858528130
1856841872
GPR[SPVATF]-1659858528271
GPR[EPVATF]-1659858528429
GPR[SPS]-1659858528429
[438814] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1257.
GPR[EPS]-1659858528740
GPR[ESUN]-1659858528740
GPR[SSUN]-1659858528740
1856841872
GPR[SPVATF]-1659858528877
GPR[EPVATF]-1659858529036
GPR[SPS]-1659858529036
[439387] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1255.
GPR[EPS]-1659858529313
GPR[ESUN]-1659858529313
GPR[SSUN]-1659858529313
1856841872
GPR[SPVATF]-1659858529455
GPR[EPVATF]-1659858529613
GPR[SPS]-1659858529613
[439968] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1253.
GPR[EPS]-1659858529894
GPR[ESUN]-1659858529894
GPR[SSUN]-1659858529894
1856841872
GPR[SPVATF]-1659858530030
GPR[EPVATF]-1659858530189
GPR[SPS]-1659858530189
[440542] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1249.
GPR[EPS]-1659858530468
GPR[ESUN]-1659858530468
GPR[SSUN]-1659858530468
1856841872
GPR[SPVATF]-1659858530607
GPR[EPVATF]-1659858530764
GPR[SPS]-1659858530764
[441119] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1247.
GPR[EPS]-1659858531045
GPR[ESUN]-1659858531045
GPR[SSUN]-1659858531045
1856841872
GPR[SPVATF]-1659858531185
GPR[EPVATF]-1659858531346
GPR[SPS]-1659858531346
[441702] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1245.
GPR[EPS]-1659858531628
GPR[ESUN]-1659858531628
GPR[SSUN]-1659858531628
1856841872
GPR[SPVATF]-1659858531768
GPR[EPVATF]-1659858531928
GPR[SPS]-1659858531928
[442287] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1243.
GPR[EPS]-1659858532213
GPR[ESUN]-1659858532213
GPR[SSUN]-1659858532213
1856841872
GPR[SPVATF]-1659858532353
GPR[EPVATF]-1659858532549
GPR[SPS]-1659858532549
[442907] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1241.
GPR[EPS]-1659858532833
GPR[ESUN]-1659858532833
GPR[SSUN]-1659858532833
1856841872
GPR[SPVATF]-1659858532973
GPR[EPVATF]-1659858533132
GPR[SPS]-1659858533132
[443487] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1237.
GPR[EPS]-1659858533413
GPR[ESUN]-1659858533413
GPR[SSUN]-1659858533413
1856841872
GPR[SPVATF]-1659858533556
GPR[EPVATF]-1659858533716
GPR[SPS]-1659858533716
[444068] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1235.
GPR[EPS]-1659858533994
GPR[ESUN]-1659858533994
GPR[SSUN]-1659858533994
1856841872
GPR[SPVATF]-1659858534133
GPR[EPVATF]-1659858534294
GPR[SPS]-1659858534294
[444650] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1233.
GPR[EPS]-1659858534576
GPR[ESUN]-1659858534576
GPR[SSUN]-1659858534576
1856841872
GPR[SPVATF]-1659858534714
GPR[EPVATF]-1659858534877
GPR[SPS]-1659858534877
[445230] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1231.
GPR[EPS]-1659858535156
GPR[ESUN]-1659858535156
GPR[SSUN]-1659858535156
1856841872
GPR[SPVATF]-1659858535294
GPR[EPVATF]-1659858535454
GPR[SPS]-1659858535454
[445808] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1227.
GPR[EPS]-1659858535734
GPR[ESUN]-1659858535734
GPR[SSUN]-1659858535734
1856841872
GPR[SPVATF]-1659858535878
GPR[EPVATF]-1659858536038
GPR[SPS]-1659858536038
[446429] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1225.
GPR[EPS]-1659858536355
GPR[ESUN]-1659858536355
GPR[SSUN]-1659858536355
1856841872
GPR[SPVATF]-1659858536496
GPR[EPVATF]-1659858536658
GPR[SPS]-1659858536658
[447010] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1223.
GPR[EPS]-1659858536936
GPR[ESUN]-1659858536936
GPR[SSUN]-1659858536936
1856841872
GPR[SPVATF]-1659858537073
GPR[EPVATF]-1659858537232
GPR[SPS]-1659858537232
[447586] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1221.
GPR[EPS]-1659858537512
GPR[ESUN]-1659858537512
GPR[SSUN]-1659858537512
1856841872
GPR[SPVATF]-1659858537650
GPR[EPVATF]-1659858537811
GPR[SPS]-1659858537811
[448165] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1219.
GPR[EPS]-1659858538091
GPR[ESUN]-1659858538091
GPR[SSUN]-1659858538091
1856841872
GPR[SPVATF]-1659858538230
GPR[EPVATF]-1659858538393
GPR[SPS]-1659858538393
[448746] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1215.
GPR[EPS]-1659858538672
GPR[ESUN]-1659858538672
GPR[SSUN]-1659858538672
1856841872
GPR[SPVATF]-1659858538811
GPR[EPVATF]-1659858538972
GPR[SPS]-1659858538972
[449328] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1213.
GPR[EPS]-1659858539254
GPR[ESUN]-1659858539254
GPR[SSUN]-1659858539254
1856841872
GPR[SPVATF]-1659858539392
GPR[EPVATF]-1659858539554
GPR[SPS]-1659858539554
[449918] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1211.
GPR[EPS]-1659858539844
GPR[ESUN]-1659858539844
GPR[SSUN]-1659858539844
1856841872
GPR[SPVATF]-1659858540025
GPR[EPVATF]-1659858540199
GPR[SPS]-1659858540199
[450558] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1209.
GPR[EPS]-1659858540484
GPR[ESUN]-1659858540484
GPR[SSUN]-1659858540484
1856841872
GPR[SPVATF]-1659858540622
GPR[EPVATF]-1659858540785
GPR[SPS]-1659858540785
[451148] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1207.
GPR[EPS]-1659858541074
GPR[ESUN]-1659858541074
GPR[SSUN]-1659858541074
1856841872
GPR[SPVATF]-1659858541215
GPR[EPVATF]-1659858541380
GPR[SPS]-1659858541380
[451737] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1205.
GPR[EPS]-1659858541663
GPR[ESUN]-1659858541663
GPR[SSUN]-1659858541663
1856841872
GPR[SPVATF]-1659858541801
GPR[EPVATF]-1659858541964
GPR[SPS]-1659858541964
[452322] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1203.
GPR[EPS]-1659858542248
GPR[ESUN]-1659858542248
GPR[SSUN]-1659858542248
1856841872
GPR[SPVATF]-1659858542389
GPR[EPVATF]-1659858542556
GPR[SPS]-1659858542556
[452912] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1199.
GPR[EPS]-1659858542838
GPR[ESUN]-1659858542838
GPR[SSUN]-1659858542838
1856841872
GPR[SPVATF]-1659858542976
GPR[EPVATF]-1659858543144
GPR[SPS]-1659858543144
[453502] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1197.
GPR[EPS]-1659858543428
GPR[ESUN]-1659858543428
GPR[SSUN]-1659858543428
1856841872
GPR[SPVATF]-1659858543568
GPR[EPVATF]-1659858543733
GPR[SPS]-1659858543733
[454127] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1195.
GPR[EPS]-1659858544053
GPR[ESUN]-1659858544053
GPR[SSUN]-1659858544053
1856841872
GPR[SPVATF]-1659858544192
GPR[EPVATF]-1659858544361
GPR[SPS]-1659858544362
[454722] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1193.
GPR[EPS]-1659858544648
GPR[ESUN]-1659858544648
GPR[SSUN]-1659858544648
1856841872
GPR[SPVATF]-1659858544786
GPR[EPVATF]-1659858544953
GPR[SPS]-1659858544953
[455318] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1189.
GPR[EPS]-1659858545244
GPR[ESUN]-1659858545244
GPR[SSUN]-1659858545244
1856841872
GPR[SPVATF]-1659858545404
GPR[EPVATF]-1659858545571
GPR[SPS]-1659858545571
[455927] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1187.
GPR[EPS]-1659858545853
GPR[ESUN]-1659858545853
GPR[SSUN]-1659858545853
1856841872
GPR[SPVATF]-1659858545990
GPR[EPVATF]-1659858546159
GPR[SPS]-1659858546159
[456519] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1185.
GPR[EPS]-1659858546445
GPR[ESUN]-1659858546445
GPR[SSUN]-1659858546445
1856841872
GPR[SPVATF]-1659858546588
GPR[EPVATF]-1659858546755
GPR[SPS]-1659858546755
[457121] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1183.
GPR[EPS]-1659858547047
GPR[ESUN]-1659858547047
GPR[SSUN]-1659858547047
1856841872
GPR[SPVATF]-1659858547188
GPR[EPVATF]-1659858547352
GPR[SPS]-1659858547352
[457709] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1181.
GPR[EPS]-1659858547635
GPR[ESUN]-1659858547635
GPR[SSUN]-1659858547635
1856841872
GPR[SPVATF]-1659858547816
GPR[EPVATF]-1659858547982
GPR[SPS]-1659858547982
[458348] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1179.
GPR[EPS]-1659858548274
GPR[ESUN]-1659858548274
GPR[SSUN]-1659858548274
1856841872
GPR[SPVATF]-1659858548416
GPR[EPVATF]-1659858548583
GPR[SPS]-1659858548583
[458941] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1177.
GPR[EPS]-1659858548867
GPR[ESUN]-1659858548867
GPR[SSUN]-1659858548867
1856841872
GPR[SPVATF]-1659858549007
GPR[EPVATF]-1659858549172
GPR[SPS]-1659858549172
[459530] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1176.
GPR[EPS]-1659858549456
GPR[ESUN]-1659858549456
GPR[SSUN]-1659858549456
1856841872
GPR[SPVATF]-1659858549602
GPR[EPVATF]-1659858549766
GPR[SPS]-1659858549766
[460125] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1173.
GPR[EPS]-1659858550051
GPR[ESUN]-1659858550051
GPR[SSUN]-1659858550051
1856841872
GPR[SPVATF]-1659858550192
GPR[EPVATF]-1659858550360
GPR[SPS]-1659858550360
[460720] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1172.
GPR[EPS]-1659858550646
GPR[ESUN]-1659858550646
GPR[SSUN]-1659858550646
1856841872
GPR[SPVATF]-1659858550785
GPR[EPVATF]-1659858550950
GPR[SPS]-1659858550950
[461310] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1171.
GPR[EPS]-1659858551236
GPR[ESUN]-1659858551236
GPR[SSUN]-1659858551236
1856841872
GPR[SPVATF]-1659858551375
GPR[EPVATF]-1659858551541
GPR[SPS]-1659858551541
[461942] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1170.
GPR[EPS]-1659858551868
GPR[ESUN]-1659858551868
GPR[SSUN]-1659858551868
1856841872
GPR[SPVATF]-1659858552008
GPR[EPVATF]-1659858552177
GPR[SPS]-1659858552177
[462534] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1169.
GPR[EPS]-1659858552460
GPR[ESUN]-1659858552460
GPR[SSUN]-1659858552460
1856841872
GPR[SPVATF]-1659858552600
GPR[EPVATF]-1659858552764
GPR[SPS]-1659858552764
[463126] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1168.
GPR[EPS]-1659858553052
GPR[ESUN]-1659858553052
GPR[SSUN]-1659858553052
1856841872
GPR[SPVATF]-1659858553193
GPR[EPVATF]-1659858553357
GPR[SPS]-1659858553357
[463714] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1167.
GPR[EPS]-1659858553640
GPR[ESUN]-1659858553640
GPR[SSUN]-1659858553640
1856841872
GPR[ESUN]-1659858553780
GPR[SSUN]-1659858553780
1856841872
GPR[ESUN]-1659858553923
GPR[SSUN]-1659858553923
1856841872
GPR[ESUN]-1659858554058
GPR[SSUN]-1659858554058
1856841872
GPR[ESUN]-1659858554196
GPR[SSUN]-1659858554196
1856841872
GPR[ESUN]-1659858554335
GPR[SSUN]-1659858554335
1856841872
GPR[ESUN]-1659858554471
GPR[SSUN]-1659858554471
1856841872
GPR[ESUN]-1659858554604
GPR[SSUN]-1659858554604
1856841872
GPR[ESUN]-1659858554741
GPR[SSUN]-1659858554741
1856841872
GPR[SPVATF]-1659858554874
GPR[EPVATF]-1659858555046
GPR[SPS]-1659858555046
[465407] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1153.
GPR[EPS]-1659858555333
GPR[SPVATF]-1659858555333
GPR[EPVATF]-1659858555500
GPR[SPS]-1659858555500
[465899] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1153.
GPR[EPS]-1659858555825
GPR[ESUN]-1659858555825
GPR[SSUN]-1659858555825
1856841872
GPR[SPVATF]-1659858555965
GPR[EPVATF]-1659858556135
GPR[SPS]-1659858556135
[466498] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1150.
GPR[EPS]-1659858556424
GPR[SPVATF]-1659858556424
GPR[EPVATF]-1659858556591
GPR[SPS]-1659858556591
[466955] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:1150.
GPR[EPS]-1659858556881
GPR[ESUN]-1659858556881
GPR[SSUN]-1659858556881
1856841872
GPR[ESUN]-1659858557027
GPR[SSUN]-1659858557027
1856841872
GPR[SPVATF]-1659858557164
GPR[EPVATF]-1659858557335
GPR[SPS]-1659858557335
[467697] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:559.
GPR[EPS]-1659858557623
GPR[ESUN]-1659858557623
GPR[SSUN]-1659858557623
1856841872
GPR[SPVATF]-1659858557765
GPR[EPVATF]-1659858557934
GPR[SPS]-1659858557934
[468302] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:556.
GPR[EPS]-1659858558228
GPR[SPVATF]-1659858558228
GPR[EPVATF]-1659858558396
GPR[SPS]-1659858558396
[468756] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:556.
GPR[EPS]-1659858558682
GPR[ESUN]-1659858558682
GPR[SSUN]-1659858558682
1856841872
GPR[SPVATF]-1659858558819
GPR[EPVATF]-1659858558990
GPR[SPS]-1659858558990
[469349] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:551.
GPR[EPS]-1659858559275
GPR[SPVATF]-1659858559276
GPR[EPVATF]-1659858559444
GPR[SPS]-1659858559444
[469848] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:551.
GPR[EPS]-1659858559774
GPR[ESUN]-1659858559774
GPR[SSUN]-1659858559774
1856841872
GPR[ESUN]-1659858559915
GPR[SSUN]-1659858559915
1856841872
GPR[SPVATF]-1659858560055
GPR[EPVATF]-1659858560227
GPR[SPS]-1659858560227
[470594] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:500.
GPR[EPS]-1659858560520
GPR[SPVATF]-1659858560520
GPR[EPVATF]-1659858560687
GPR[SPS]-1659858560687
[471049] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:500.
GPR[EPS]-1659858560975
GPR[ESUN]-1659858560975
GPR[SSUN]-1659858560975
1856841872
GPR[SPVATF]-1659858561118
GPR[EPVATF]-1659858561289
GPR[SPS]-1659858561289
[471653] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:497.
GPR[EPS]-1659858561579
GPR[SPVATF]-1659858561579
GPR[EPVATF]-1659858561750
GPR[SPS]-1659858561750
[472113] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:497.
GPR[EPS]-1659858562039
GPR[ESUN]-1659858562039
GPR[SSUN]-1659858562039
1856841872
GPR[SPVATF]-1659858562183
GPR[EPVATF]-1659858562355
GPR[SPS]-1659858562355
[472719] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateAxis:496.
GPR[EPS]-1659858562645
GPR[ESUN]-1659858562645
GPR[SSUN]-1659858562645
1237707923
GPR[ESUN]-1659858562777
GPR[SSUN]-1659858562777
1237707923
GPR[SPVATF]-1659858562907
GPR[EPVATF]-1659858563079
GPR[SPS]-1659858563079
[473425] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1033.
GPR[EPS]-1659858563351
GPR[ESUN]-1659858563351
GPR[SSUN]-1659858563351
1237707923
GPR[SPVATF]-1659858563533
GPR[EPVATF]-1659858563706
GPR[SPS]-1659858563706
[474053] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1032.
GPR[EPS]-1659858563979
GPR[SPVATF]-1659858563979
GPR[EPVATF]-1659858564153
GPR[SPS]-1659858564153
[474500] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1032.
GPR[EPS]-1659858564426
GPR[ESUN]-1659858564426
GPR[SSUN]-1659858564426
1237707923
GPR[SPVATF]-1659858564560
GPR[EPVATF]-1659858564732
GPR[SPS]-1659858564732
[475079] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1030.
GPR[EPS]-1659858565005
GPR[ESUN]-1659858565005
GPR[SSUN]-1659858565005
1237707923
GPR[SPVATF]-1659858565142
GPR[EPVATF]-1659858565314
GPR[SPS]-1659858565314
[475660] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1029.
GPR[EPS]-1659858565586
GPR[SPVATF]-1659858565587
GPR[EPVATF]-1659858565757
GPR[SPS]-1659858565757
[476107] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1029.
GPR[EPS]-1659858566033
GPR[ESUN]-1659858566033
GPR[SSUN]-1659858566033
1237707923
GPR[SPVATF]-1659858566167
GPR[EPVATF]-1659858566339
GPR[SPS]-1659858566339
[476690] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1028.
GPR[EPS]-1659858566616
GPR[ESUN]-1659858566616
GPR[SSUN]-1659858566616
1237707923
GPR[SPVATF]-1659858566754
GPR[EPVATF]-1659858566925
GPR[SPS]-1659858566925
[477322] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1027.
GPR[EPS]-1659858567248
GPR[SPVATF]-1659858567248
GPR[EPVATF]-1659858567426
GPR[SPS]-1659858567426
[477784] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1027.
GPR[EPS]-1659858567710
GPR[ESUN]-1659858567710
GPR[SSUN]-1659858567710
1237707923
GPR[SPVATF]-1659858567846
GPR[EPVATF]-1659858568016
GPR[SPS]-1659858568016
[478363] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1023.
GPR[EPS]-1659858568289
GPR[SPVATF]-1659858568289
GPR[EPVATF]-1659858568460
GPR[SPS]-1659858568460
[478813] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1023.
GPR[EPS]-1659858568739
GPR[ESUN]-1659858568739
GPR[SSUN]-1659858568739
1237707923
GPR[ESUN]-1659858568873
GPR[SSUN]-1659858568873
1237707923
GPR[SPVATF]-1659858569003
GPR[EPVATF]-1659858569175
GPR[SPS]-1659858569175
[479520] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1009.
GPR[EPS]-1659858569446
GPR[ESUN]-1659858569446
GPR[SSUN]-1659858569446
493593264
GPR[SPVATF]-1659858569557
GPR[EPVATF]-1659858569728
GPR[SPS]-1659858569728
[479921] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class DateTickUnit extends org.jfree.chart.axis.TickUnit implements java.io.Serializable {
    private static final long serialVersionUID = -7289292157229621901L;

    private org.jfree.chart.axis.DateTickUnitType unitType;

    private int count;

    private org.jfree.chart.axis.DateTickUnitType rollUnitType;

    private int rollCount;

    private java.text.DateFormat formatter;

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple) {
        this(unitType, multiple, java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT));
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, java.text.DateFormat formatter) {
        this(unitType, multiple, unitType, multiple, formatter);
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, org.jfree.chart.axis.DateTickUnitType rollUnitType, int rollMultiple, java.text.DateFormat formatter) {
        super(org.jfree.chart.axis.DateTickUnit.getMillisecondCount(unitType, multiple));
        if (formatter == null) {
            throw new java.lang.IllegalArgumentException("Null 'formatter' argument.");
        }
        if (multiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'multiple' > 0.");
        }
        if (rollMultiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'rollMultiple' > 0.");
        }
        this.unitType = unitType;
        this.count = multiple;
        this.rollUnitType = rollUnitType;
        this.rollCount = rollMultiple;
        this.formatter = formatter;
    }

    public org.jfree.chart.axis.DateTickUnitType getUnitType() {
        return this.unitType;
    }

    public int getMultiple() {
        return this.count;
    }

    public org.jfree.chart.axis.DateTickUnitType getRollUnitType() {
        return this.rollUnitType;
    }

    public int getRollMultiple() {
        return this.rollCount;
    }

    public java.lang.String valueToString(double milliseconds) {
        return this.formatter.format(new java.util.Date(((long) (milliseconds))));
    }

    public java.lang.String dateToString(java.util.Date date) {
        return this.formatter.format(date);
    }

    public java.util.Date addToDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.unitType.getCalendarField(), this.count);
        return calendar.getTime();
    }

    public java.util.Date rollDate(java.util.Date base) {
        return rollDate(base, java.util.TimeZone.getDefault());
    }

    public java.util.Date rollDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.rollUnitType.getCalendarField(), this.rollCount);
        return calendar.getTime();
    }

    public int getCalendarField() {
        return this.unitType.getCalendarField();
    }

    private static long getMillisecondCount(org.jfree.chart.axis.DateTickUnitType unit, int count) {
        if (unit.equals(org.jfree.chart.axis.DateTickUnitType.YEAR)) {
            return ((((365L * 24L) * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MONTH)) {
            return ((((31L * 24L) * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.DAY)) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(376).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(376).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(376).collectInput("count",count);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(376).collectInput("unit",unit);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(376).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(376).collectionEnds();
            }
            if (runtimeAngelicValue)
                return (((24L * 60L) * 60L) * 1000L) * count;

        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.HOUR)) {
            return ((60L * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MINUTE)) {
            return (60L * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.SECOND)) {
            return 1000L * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MILLISECOND)) {
            return count;
        } else {
            throw new java.lang.IllegalArgumentException("The 'unit' argument has a " + "value that is not recognised.");
        }
    }

    private static java.text.DateFormat notNull(java.text.DateFormat formatter) {
        if (formatter == null) {
            return java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT);
        } else {
            return formatter;
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.axis.DateTickUnit)) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }
        org.jfree.chart.axis.DateTickUnit that = ((org.jfree.chart.axis.DateTickUnit) (obj));
        if (!this.unitType.equals(that.unitType)) {
            return false;
        }
        if (this.count != that.count) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.formatter, that.formatter)) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result = 19;
        result = (37 * result) + this.unitType.hashCode();
        result = (37 * result) + this.count;
        result = (37 * result) + this.formatter.hashCode();
        return result;
    }

    public java.lang.String toString() {
        return ((("DateTickUnit[" + this.unitType.toString()) + ", ") + this.count) + "]";
    }
}
[479921] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858569847
GPR[SSUN]-1659858569847
493593264
GPR[SPVATF]-1659858569946
GPR[EPVATF]-1659858570122
GPR[SPS]-1659858570122
[480317] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class DateTickUnit extends org.jfree.chart.axis.TickUnit implements java.io.Serializable {
    private static final long serialVersionUID = -7289292157229621901L;

    private org.jfree.chart.axis.DateTickUnitType unitType;

    private int count;

    private org.jfree.chart.axis.DateTickUnitType rollUnitType;

    private int rollCount;

    private java.text.DateFormat formatter;

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple) {
        this(unitType, multiple, java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT));
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, java.text.DateFormat formatter) {
        this(unitType, multiple, unitType, multiple, formatter);
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, org.jfree.chart.axis.DateTickUnitType rollUnitType, int rollMultiple, java.text.DateFormat formatter) {
        super(org.jfree.chart.axis.DateTickUnit.getMillisecondCount(unitType, multiple));
        if (formatter == null) {
            throw new java.lang.IllegalArgumentException("Null 'formatter' argument.");
        }
        if (multiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'multiple' > 0.");
        }
        if (rollMultiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'rollMultiple' > 0.");
        }
        this.unitType = unitType;
        this.count = multiple;
        this.rollUnitType = rollUnitType;
        this.rollCount = rollMultiple;
        this.formatter = formatter;
    }

    public org.jfree.chart.axis.DateTickUnitType getUnitType() {
        return this.unitType;
    }

    public int getMultiple() {
        return this.count;
    }

    public org.jfree.chart.axis.DateTickUnitType getRollUnitType() {
        return this.rollUnitType;
    }

    public int getRollMultiple() {
        return this.rollCount;
    }

    public java.lang.String valueToString(double milliseconds) {
        return this.formatter.format(new java.util.Date(((long) (milliseconds))));
    }

    public java.lang.String dateToString(java.util.Date date) {
        return this.formatter.format(date);
    }

    public java.util.Date addToDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.unitType.getCalendarField(), this.count);
        return calendar.getTime();
    }

    public java.util.Date rollDate(java.util.Date base) {
        return rollDate(base, java.util.TimeZone.getDefault());
    }

    public java.util.Date rollDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.rollUnitType.getCalendarField(), this.rollCount);
        return calendar.getTime();
    }

    public int getCalendarField() {
        return this.unitType.getCalendarField();
    }

    private static long getMillisecondCount(org.jfree.chart.axis.DateTickUnitType unit, int count) {
        if (unit.equals(org.jfree.chart.axis.DateTickUnitType.YEAR)) {
            return ((((365L * 24L) * 60L) * 60L) * 1000L) * count;
        } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MONTH)) {
            return ((((31L * 24L) * 60L) * 60L) * 1000L) * count;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(377).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(377).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(377).collectInput("count",count);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(377).collectInput("unit",unit);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(377).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(377).collectionEnds();
            }
            if (runtimeAngelicValue) if (unit.equals(org.jfree.chart.axis.DateTickUnitType.DAY)) {
                return (((24L * 60L) * 60L) * 1000L) * count;
            } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.HOUR)) {
                return ((60L * 60L) * 1000L) * count;
            } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MINUTE)) {
                return (60L * 1000L) * count;
            } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.SECOND)) {
                return 1000L * count;
            } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MILLISECOND)) {
                return count;
            } else {
                throw new java.lang.IllegalArgumentException("The 'unit' argument has a " + "value that is not recognised.");
            }
        }
    }

    private static java.text.DateFormat notNull(java.text.DateFormat formatter) {
        if (formatter == null) {
            return java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT);
        } else {
            return formatter;
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.axis.DateTickUnit)) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }
        org.jfree.chart.axis.DateTickUnit that = ((org.jfree.chart.axis.DateTickUnit) (obj));
        if (!this.unitType.equals(that.unitType)) {
            return false;
        }
        if (this.count != that.count) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.formatter, that.formatter)) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result = 19;
        result = (37 * result) + this.unitType.hashCode();
        result = (37 * result) + this.count;
        result = (37 * result) + this.formatter.hashCode();
        return result;
    }

    public java.lang.String toString() {
        return ((("DateTickUnit[" + this.unitType.toString()) + ", ") + this.count) + "]";
    }
}
[480317] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659858570243
GPR[EPVATF]-1659858570419
GPR[SPS]-1659858570419
[480701] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateTickUnit:309.
GPR[EPS]-1659858570627
GPR[ESUN]-1659858570627
GPR[SSUN]-1659858570627
493593264
GPR[SPVATF]-1659858570730
GPR[EPVATF]-1659858570906
GPR[SPS]-1659858570906
[481109] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class DateTickUnit extends org.jfree.chart.axis.TickUnit implements java.io.Serializable {
    private static final long serialVersionUID = -7289292157229621901L;

    private org.jfree.chart.axis.DateTickUnitType unitType;

    private int count;

    private org.jfree.chart.axis.DateTickUnitType rollUnitType;

    private int rollCount;

    private java.text.DateFormat formatter;

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple) {
        this(unitType, multiple, java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT));
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, java.text.DateFormat formatter) {
        this(unitType, multiple, unitType, multiple, formatter);
    }

    public DateTickUnit(org.jfree.chart.axis.DateTickUnitType unitType, int multiple, org.jfree.chart.axis.DateTickUnitType rollUnitType, int rollMultiple, java.text.DateFormat formatter) {
        super(org.jfree.chart.axis.DateTickUnit.getMillisecondCount(unitType, multiple));
        if (formatter == null) {
            throw new java.lang.IllegalArgumentException("Null 'formatter' argument.");
        }
        if (multiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'multiple' > 0.");
        }
        if (rollMultiple <= 0) {
            throw new java.lang.IllegalArgumentException("Requires 'rollMultiple' > 0.");
        }
        this.unitType = unitType;
        this.count = multiple;
        this.rollUnitType = rollUnitType;
        this.rollCount = rollMultiple;
        this.formatter = formatter;
    }

    public org.jfree.chart.axis.DateTickUnitType getUnitType() {
        return this.unitType;
    }

    public int getMultiple() {
        return this.count;
    }

    public org.jfree.chart.axis.DateTickUnitType getRollUnitType() {
        return this.rollUnitType;
    }

    public int getRollMultiple() {
        return this.rollCount;
    }

    public java.lang.String valueToString(double milliseconds) {
        return this.formatter.format(new java.util.Date(((long) (milliseconds))));
    }

    public java.lang.String dateToString(java.util.Date date) {
        return this.formatter.format(date);
    }

    public java.util.Date addToDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.unitType.getCalendarField(), this.count);
        return calendar.getTime();
    }

    public java.util.Date rollDate(java.util.Date base) {
        return rollDate(base, java.util.TimeZone.getDefault());
    }

    public java.util.Date rollDate(java.util.Date base, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(base);
        calendar.add(this.rollUnitType.getCalendarField(), this.rollCount);
        return calendar.getTime();
    }

    public int getCalendarField() {
        return this.unitType.getCalendarField();
    }

    private static long getMillisecondCount(org.jfree.chart.axis.DateTickUnitType unit, int count) {
        if (unit.equals(org.jfree.chart.axis.DateTickUnitType.YEAR)) {
            return ((((365L * 24L) * 60L) * 60L) * 1000L) * count;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(379).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(379).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(379).collectInput("count",count);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(379).collectInput("unit",unit);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(379).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(379).collectionEnds();
            }
            if (runtimeAngelicValue) if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MONTH)) {
                return ((((31L * 24L) * 60L) * 60L) * 1000L) * count;
            } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.DAY)) {
                return (((24L * 60L) * 60L) * 1000L) * count;
            } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.HOUR)) {
                return ((60L * 60L) * 1000L) * count;
            } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MINUTE)) {
                return (60L * 1000L) * count;
            } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.SECOND)) {
                return 1000L * count;
            } else if (unit.equals(org.jfree.chart.axis.DateTickUnitType.MILLISECOND)) {
                return count;
            } else {
                throw new java.lang.IllegalArgumentException("The 'unit' argument has a " + "value that is not recognised.");
            }
        }
    }

    private static java.text.DateFormat notNull(java.text.DateFormat formatter) {
        if (formatter == null) {
            return java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT);
        } else {
            return formatter;
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.axis.DateTickUnit)) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }
        org.jfree.chart.axis.DateTickUnit that = ((org.jfree.chart.axis.DateTickUnit) (obj));
        if (!this.unitType.equals(that.unitType)) {
            return false;
        }
        if (this.count != that.count) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.formatter, that.formatter)) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result = 19;
        result = (37 * result) + this.unitType.hashCode();
        result = (37 * result) + this.count;
        result = (37 * result) + this.formatter.hashCode();
        return result;
    }

    public java.lang.String toString() {
        return ((("DateTickUnit[" + this.unitType.toString()) + ", ") + this.count) + "]";
    }
}
[481109] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659858571035
GPR[EPVATF]-1659858571210
GPR[SPS]-1659858571210
[481511] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateTickUnit:306.
GPR[EPS]-1659858571437
GPR[ESUN]-1659858571437
GPR[SSUN]-1659858571437
493593264
GPR[SPVATF]-1659858571602
GPR[EPVATF]-1659858571790
GPR[SPS]-1659858571790
[482101] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateTickUnit:303.
GPR[EPS]-1659858572027
GPR[ESUN]-1659858572027
GPR[SSUN]-1659858572027
1687467658
GPR[SPVATF]-1659858572140
GPR[EPVATF]-1659858572327
GPR[SPS]-1659858572327
[482651] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateTickUnitType:137.
GPR[EPS]-1659858572577
GPR[ESUN]-1659858572577
GPR[SSUN]-1659858572577
1687467658
GPR[SPVATF]-1659858572673
GPR[EPVATF]-1659858572848
GPR[SPS]-1659858572848
[483159] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateTickUnitType:136.
GPR[EPS]-1659858573085
GPR[SPVATF]-1659858573085
GPR[EPVATF]-1659858573261
GPR[SPS]-1659858573261
[483590] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateTickUnitType:136.
GPR[EPS]-1659858573516
GPR[ESUN]-1659858573517
GPR[SSUN]-1659858573517
1687467658
GPR[ESUN]-1659858573618
GPR[SSUN]-1659858573618
1687467658
GPR[SPVATF]-1659858573716
GPR[EPVATF]-1659858573895
GPR[SPS]-1659858573895
[484228] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateTickUnitType:132.
GPR[EPS]-1659858574154
GPR[SPVATF]-1659858574155
GPR[EPVATF]-1659858574328
GPR[SPS]-1659858574328
[484709] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateTickUnitType:132.
GPR[EPS]-1659858574635
GPR[ESUN]-1659858574635
GPR[SSUN]-1659858574635
1687467658
GPR[SPVATF]-1659858574729
GPR[EPVATF]-1659858574905
GPR[SPS]-1659858574905
[485219] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateTickUnitType:130.
GPR[EPS]-1659858575145
GPR[ESUN]-1659858575145
GPR[SSUN]-1659858575145
1687467658
GPR[SPVATF]-1659858575240
GPR[EPVATF]-1659858575414
GPR[SPS]-1659858575414
[485758] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateTickUnitType:129.
GPR[EPS]-1659858575684
GPR[SPVATF]-1659858575684
GPR[EPVATF]-1659858575860
GPR[SPS]-1659858575860
[486189] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.DateTickUnitType:129.
GPR[EPS]-1659858576115
GPR[ESUN]-1659858576115
GPR[SSUN]-1659858576115
1687467658
GPR[ESUN]-1659858576210
GPR[SSUN]-1659858576210
1600734891
GPR[ESUN]-1659858576339
GPR[SSUN]-1659858576339
1600734891
GPR[ESUN]-1659858576472
GPR[SSUN]-1659858576472
1600734891
GPR[SPVATF]-1659858576605
GPR[EPVATF]-1659858576873
GPR[SPS]-1659858576873
[487255] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:431.
GPR[EPS]-1659858577181
GPR[SPVATF]-1659858577181
GPR[EPVATF]-1659858577446
GPR[SPS]-1659858577446
[487874] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:431.
GPR[EPS]-1659858577800
GPR[ESUN]-1659858577800
GPR[SSUN]-1659858577800
1600734891
GPR[ESUN]-1659858577935
GPR[SSUN]-1659858577935
1600734891
GPR[SPVATF]-1659858578064
GPR[EPVATF]-1659858578327
GPR[SPS]-1659858578328
[488710] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:417.
GPR[EPS]-1659858578636
GPR[ESUN]-1659858578636
GPR[SSUN]-1659858578636
1600734891
GPR[SPVATF]-1659858578767
GPR[EPVATF]-1659858579032
GPR[SPS]-1659858579033
[489420] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:416.
GPR[EPS]-1659858579346
GPR[SPVATF]-1659858579347
GPR[EPVATF]-1659858579611
GPR[SPS]-1659858579611
[489993] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:416.
GPR[EPS]-1659858579919
GPR[ESUN]-1659858579919
GPR[SSUN]-1659858579919
1237707923
GPR[ESUN]-1659858580055
GPR[SSUN]-1659858580055
1237707923
GPR[SPVATF]-1659858580192
GPR[EPVATF]-1659858580360
GPR[SPS]-1659858580360
[490698] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1133.
GPR[EPS]-1659858580624
GPR[ESUN]-1659858580624
GPR[SSUN]-1659858580624
1237707923
GPR[SPVATF]-1659858580757
GPR[EPVATF]-1659858580924
GPR[SPS]-1659858580924
[491316] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1131.
GPR[EPS]-1659858581242
GPR[ESUN]-1659858581242
GPR[SSUN]-1659858581242
1237707923
GPR[SPVATF]-1659858581376
GPR[EPVATF]-1659858581544
GPR[SPS]-1659858581544
[491884] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1130.
GPR[EPS]-1659858581810
GPR[SPVATF]-1659858581810
GPR[EPVATF]-1659858581976
GPR[SPS]-1659858581976
[492313] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1130.
GPR[EPS]-1659858582239
GPR[ESUN]-1659858582239
GPR[SSUN]-1659858582239
1237707923
GPR[SPVATF]-1659858582373
GPR[EPVATF]-1659858582538
GPR[SPS]-1659858582538
[492874] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1129.
GPR[EPS]-1659858582800
GPR[ESUN]-1659858582800
GPR[SSUN]-1659858582800
1237707923
GPR[ESUN]-1659858582938
GPR[SSUN]-1659858582938
1237707923
GPR[SPVATF]-1659858583071
GPR[EPVATF]-1659858583237
GPR[SPS]-1659858583237
[493571] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1100.
GPR[EPS]-1659858583497
GPR[ESUN]-1659858583497
GPR[SSUN]-1659858583497
1237707923
GPR[SPVATF]-1659858583632
GPR[EPVATF]-1659858583798
GPR[SPS]-1659858583798
[494136] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1098.
GPR[EPS]-1659858584062
GPR[ESUN]-1659858584062
GPR[SSUN]-1659858584062
1237707923
GPR[SPVATF]-1659858584197
GPR[EPVATF]-1659858584365
GPR[SPS]-1659858584365
[494705] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1097.
GPR[EPS]-1659858584631
GPR[SPVATF]-1659858584631
GPR[EPVATF]-1659858584796
GPR[SPS]-1659858584796
[495135] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1097.
GPR[EPS]-1659858585061
GPR[ESUN]-1659858585061
GPR[SSUN]-1659858585061
1237707923
GPR[SPVATF]-1659858585201
GPR[EPVATF]-1659858585370
GPR[SPS]-1659858585370
[495709] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1096.
GPR[EPS]-1659858585635
GPR[ESUN]-1659858585635
GPR[SSUN]-1659858585635
-232368544
GPR[ESUN]-1659858585744
GPR[SSUN]-1659858585744
-396293673
GPR[ESUN]-1659858585908
GPR[SSUN]-1659858585908
-396293673
GPR[SPVATF]-1659858586015
GPR[EPVATF]-1659858586233
GPR[SPS]-1659858586233
[496562] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.AbstractDataset:168.
GPR[EPS]-1659858586488
GPR[ESUN]-1659858586488
GPR[SSUN]-1659858586488
-396293673
GPR[ESUN]-1659858586596
GPR[SSUN]-1659858586596
-396293673
GPR[SPVATF]-1659858586701
GPR[EPVATF]-1659858586918
GPR[SPS]-1659858586918
[497250] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.AbstractDataset:183.
GPR[EPS]-1659858587176
GPR[ESUN]-1659858587176
GPR[SSUN]-1659858587176
-396293673
GPR[ESUN]-1659858587287
GPR[SSUN]-1659858587287
1233498019
GPR[ESUN]-1659858587453
GPR[SSUN]-1659858587453
1233498019
GPR[SPVATF]-1659858587610
GPR[EPVATF]-1659858587687
GPR[SPS]-1659858587687
[498041] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.XYLineAndShapeRenderer:442.
GPR[EPS]-1659858587967
GPR[ESUN]-1659858587967
GPR[SSUN]-1659858587967
1233498019
GPR[SPVATF]-1659858588127
GPR[EPVATF]-1659858588201
GPR[SPS]-1659858588202
[498614] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.XYLineAndShapeRenderer:441.
GPR[EPS]-1659858588540
GPR[ESUN]-1659858588540
GPR[SSUN]-1659858588541
1237707923
GPR[ESUN]-1659858588679
GPR[SSUN]-1659858588679
1237707923
GPR[SPVATF]-1659858588811
GPR[EPVATF]-1659858588889
GPR[SPS]-1659858588889
[499213] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1411.
GPR[EPS]-1659858589139
GPR[ESUN]-1659858589139
GPR[SSUN]-1659858589139
1237707923
GPR[SPVATF]-1659858589276
GPR[EPVATF]-1659858589353
GPR[SPS]-1659858589353
[499674] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1410.
GPR[EPS]-1659858589600
GPR[ESUN]-1659858589600
GPR[SSUN]-1659858589600
1600734891
GPR[ESUN]-1659858589734
GPR[SSUN]-1659858589734
1600734891
GPR[SPVATF]-1659858589869
GPR[EPVATF]-1659858589946
GPR[SPS]-1659858589946
[500274] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:824.
GPR[EPS]-1659858590200
GPR[ESUN]-1659858590200
GPR[SSUN]-1659858590200
1600734891
GPR[SPVATF]-1659858590339
GPR[EPVATF]-1659858590416
GPR[SPS]-1659858590416
[500742] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:823.
GPR[EPS]-1659858590668
GPR[ESUN]-1659858590668
GPR[SSUN]-1659858590668
1600734891
GPR[SPVATF]-1659858590802
GPR[EPVATF]-1659858590879
GPR[SPS]-1659858590879
[501201] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:822.
GPR[EPS]-1659858591127
GPR[ESUN]-1659858591127
GPR[SSUN]-1659858591127
1600734891
GPR[SPVATF]-1659858591260
GPR[EPVATF]-1659858591337
GPR[SPS]-1659858591337
[501660] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:821.
GPR[EPS]-1659858591586
GPR[ESUN]-1659858591586
GPR[SSUN]-1659858591586
1600734891
GPR[SPVATF]-1659858591722
GPR[EPVATF]-1659858591798
GPR[SPS]-1659858591798
[502120] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:820.
GPR[EPS]-1659858592046
GPR[ESUN]-1659858592046
GPR[SSUN]-1659858592046
1600734891
GPR[SPVATF]-1659858592180
GPR[EPVATF]-1659858592256
GPR[SPS]-1659858592256
[502578] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:819.
GPR[EPS]-1659858592504
GPR[ESUN]-1659858592504
GPR[SSUN]-1659858592504
1600734891
GPR[SPVATF]-1659858592639
GPR[EPVATF]-1659858592716
GPR[SPS]-1659858592716
[503041] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:818.
GPR[EPS]-1659858592967
GPR[ESUN]-1659858592967
GPR[SSUN]-1659858592967
1600734891
GPR[SPVATF]-1659858593101
GPR[EPVATF]-1659858593178
GPR[SPS]-1659858593178
[503545] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:817.
GPR[EPS]-1659858593471
GPR[ESUN]-1659858593471
GPR[SSUN]-1659858593471
1600734891
GPR[SPVATF]-1659858593605
GPR[EPVATF]-1659858593683
GPR[SPS]-1659858593683
[504010] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:816.
GPR[EPS]-1659858593936
GPR[ESUN]-1659858593936
GPR[SSUN]-1659858593936
1600734891
GPR[SPVATF]-1659858594073
GPR[EPVATF]-1659858594150
GPR[SPS]-1659858594150
[504469] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:815.
GPR[EPS]-1659858594395
GPR[ESUN]-1659858594395
GPR[SSUN]-1659858594395
1600734891
GPR[SPVATF]-1659858594528
GPR[EPVATF]-1659858594606
GPR[SPS]-1659858594606
[504927] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:814.
GPR[EPS]-1659858594853
GPR[ESUN]-1659858594853
GPR[SSUN]-1659858594853
1600734891
GPR[SPVATF]-1659858594987
GPR[EPVATF]-1659858595064
GPR[SPS]-1659858595064
[505390] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:813.
GPR[EPS]-1659858595316
GPR[ESUN]-1659858595316
GPR[SSUN]-1659858595316
1600734891
GPR[SPVATF]-1659858595453
GPR[EPVATF]-1659858595531
GPR[SPS]-1659858595531
[505849] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:812.
GPR[EPS]-1659858595775
GPR[ESUN]-1659858595775
GPR[SSUN]-1659858595775
1600734891
GPR[SPVATF]-1659858595908
GPR[EPVATF]-1659858595985
GPR[SPS]-1659858595985
[506304] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:811.
GPR[EPS]-1659858596230
GPR[ESUN]-1659858596230
GPR[SSUN]-1659858596230
1600734891
GPR[SPVATF]-1659858596368
GPR[EPVATF]-1659858596445
GPR[SPS]-1659858596445
[506767] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:810.
GPR[EPS]-1659858596693
GPR[ESUN]-1659858596693
GPR[SSUN]-1659858596693
1600734891
GPR[SPVATF]-1659858596846
GPR[EPVATF]-1659858596942
GPR[SPS]-1659858596942
[507270] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:809.
GPR[EPS]-1659858597196
GPR[ESUN]-1659858597196
GPR[SSUN]-1659858597196
1600734891
GPR[SPVATF]-1659858597337
GPR[EPVATF]-1659858597414
GPR[SPS]-1659858597414
[507736] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:808.
GPR[EPS]-1659858597662
GPR[ESUN]-1659858597662
GPR[SSUN]-1659858597662
1600734891
GPR[SPVATF]-1659858597793
GPR[EPVATF]-1659858597919
GPR[SPS]-1659858597919
[508242] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:807.
GPR[EPS]-1659858598168
GPR[ESUN]-1659858598168
GPR[SSUN]-1659858598168
1600734891
GPR[SPVATF]-1659858598302
GPR[EPVATF]-1659858598380
GPR[SPS]-1659858598380
[508698] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:806.
GPR[EPS]-1659858598624
GPR[ESUN]-1659858598624
GPR[SSUN]-1659858598624
1600734891
GPR[SPVATF]-1659858598757
GPR[EPVATF]-1659858598834
GPR[SPS]-1659858598834
[509160] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:805.
GPR[EPS]-1659858599086
GPR[ESUN]-1659858599086
GPR[SSUN]-1659858599086
1600734891
GPR[SPVATF]-1659858599219
GPR[EPVATF]-1659858599297
GPR[SPS]-1659858599297
[509618] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:804.
GPR[EPS]-1659858599544
GPR[ESUN]-1659858599544
GPR[SSUN]-1659858599544
1600734891
GPR[SPVATF]-1659858599677
GPR[EPVATF]-1659858599753
GPR[SPS]-1659858599753
[510078] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:803.
GPR[EPS]-1659858600004
GPR[ESUN]-1659858600004
GPR[SSUN]-1659858600004
1600734891
GPR[SPVATF]-1659858600139
GPR[EPVATF]-1659858600217
GPR[SPS]-1659858600217
[510538] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:802.
GPR[EPS]-1659858600464
GPR[ESUN]-1659858600464
GPR[SSUN]-1659858600464
1600734891
GPR[SPVATF]-1659858600598
GPR[EPVATF]-1659858600676
GPR[SPS]-1659858600676
[510996] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:801.
GPR[EPS]-1659858600922
GPR[ESUN]-1659858600922
GPR[SSUN]-1659858600922
1600734891
GPR[SPVATF]-1659858601053
GPR[EPVATF]-1659858601132
GPR[SPS]-1659858601132
[511454] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:800.
GPR[EPS]-1659858601380
GPR[ESUN]-1659858601380
GPR[SSUN]-1659858601380
1600734891
GPR[SPVATF]-1659858601514
GPR[EPVATF]-1659858601590
GPR[SPS]-1659858601590
[511918] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:799.
GPR[EPS]-1659858601844
GPR[ESUN]-1659858601844
GPR[SSUN]-1659858601844
1600734891
GPR[SPVATF]-1659858601980
GPR[EPVATF]-1659858602058
GPR[SPS]-1659858602058
[512380] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:798.
GPR[EPS]-1659858602306
GPR[ESUN]-1659858602306
GPR[SSUN]-1659858602306
1600734891
GPR[SPVATF]-1659858602483
GPR[EPVATF]-1659858602563
GPR[SPS]-1659858602563
[512885] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:797.
GPR[EPS]-1659858602811
GPR[ESUN]-1659858602811
GPR[SSUN]-1659858602811
1600734891
GPR[SPVATF]-1659858602945
GPR[EPVATF]-1659858603023
GPR[SPS]-1659858603023
[513350] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:796.
GPR[EPS]-1659858603276
GPR[ESUN]-1659858603276
GPR[SSUN]-1659858603276
1600734891
GPR[SPVATF]-1659858603412
GPR[EPVATF]-1659858603492
GPR[SPS]-1659858603492
[513815] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:795.
GPR[EPS]-1659858603741
GPR[ESUN]-1659858603741
GPR[SSUN]-1659858603741
1600734891
GPR[SPVATF]-1659858603876
GPR[EPVATF]-1659858603954
GPR[SPS]-1659858603954
[514282] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:794.
GPR[EPS]-1659858604208
GPR[ESUN]-1659858604208
GPR[SSUN]-1659858604208
1600734891
GPR[ESUN]-1659858604340
GPR[SSUN]-1659858604340
1600734891
GPR[ESUN]-1659858604470
GPR[SSUN]-1659858604470
1600734891
GPR[ESUN]-1659858604603
GPR[SSUN]-1659858604603
-631918205
GPR[ESUN]-1659858604734
GPR[SSUN]-1659858604734
-631918205
GPR[ESUN]-1659858604858
GPR[SSUN]-1659858604858
-631918205
GPR[SPVATF]-1659858604981
GPR[EPVATF]-1659858605148
GPR[SPS]-1659858605148
[515475] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeriesCollection:653.
GPR[EPS]-1659858605402
GPR[ESUN]-1659858605402
GPR[SSUN]-1659858605402
-631918205
GPR[SPVATF]-1659858605554
GPR[EPVATF]-1659858605717
GPR[SPS]-1659858605717
[515955] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TimeSeriesCollection extends org.jfree.data.xy.AbstractIntervalXYDataset implements org.jfree.data.xy.XYDataset , org.jfree.data.xy.IntervalXYDataset , org.jfree.data.DomainInfo , org.jfree.data.xy.XYDomainInfo , org.jfree.data.xy.XYRangeInfo , org.jfree.data.xy.XYDatasetSelectionState , org.jfree.data.xy.SelectableXYDataset , java.io.Serializable {
    private static final long serialVersionUID = 834149929022371137L;

    private java.util.List data;

    private java.util.Calendar workingCalendar;

    private org.jfree.data.time.TimePeriodAnchor xPosition;

    public TimeSeriesCollection() {
        this(null, java.util.TimeZone.getDefault());
    }

    public TimeSeriesCollection(java.util.TimeZone zone) {
        this(null, zone);
    }

    public TimeSeriesCollection(org.jfree.data.time.TimeSeries series) {
        this(series, java.util.TimeZone.getDefault());
    }

    public TimeSeriesCollection(org.jfree.data.time.TimeSeries series, java.util.TimeZone zone) {
        super();
        if (zone == null) {
            zone = java.util.TimeZone.getDefault();
        }
        this.workingCalendar = java.util.Calendar.getInstance(zone);
        this.data = new java.util.ArrayList();
        if (series != null) {
            this.data.add(series);
            series.addChangeListener(this);
        }
        this.xPosition = org.jfree.data.time.TimePeriodAnchor.START;
        setSelectionState(this);
    }

    public org.jfree.data.DomainOrder getDomainOrder() {
        return org.jfree.data.DomainOrder.ASCENDING;
    }

    public org.jfree.data.time.TimePeriodAnchor getXPosition() {
        return this.xPosition;
    }

    public void setXPosition(org.jfree.data.time.TimePeriodAnchor anchor) {
        if (anchor == null) {
            throw new java.lang.IllegalArgumentException("Null 'anchor' argument.");
        }
        this.xPosition = anchor;
        notifyListeners(new org.jfree.data.general.DatasetChangeEvent(this, this));
    }

    public java.util.List getSeries() {
        return java.util.Collections.unmodifiableList(this.data);
    }

    public int getSeriesCount() {
        return this.data.size();
    }

    public int indexOf(org.jfree.data.time.TimeSeries series) {
        if (series == null) {
            throw new java.lang.IllegalArgumentException("Null 'series' argument.");
        }
        return this.data.indexOf(series);
    }

    public org.jfree.data.time.TimeSeries getSeries(int series) {
        if ((series < 0) || (series >= getSeriesCount())) {
            throw new java.lang.IllegalArgumentException(("The 'series' argument is out of bounds (" + series) + ").");
        }
        return ((org.jfree.data.time.TimeSeries) (this.data.get(series)));
    }

    public org.jfree.data.time.TimeSeries getSeries(java.lang.Comparable key) {
        org.jfree.data.time.TimeSeries result = null;
        java.util.Iterator iterator = this.data.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.time.TimeSeries series = ((org.jfree.data.time.TimeSeries) (iterator.next()));
            java.lang.Comparable k = series.getKey();
            if ((k != null) && k.equals(key)) {
                result = series;
            }
        } 
        return result;
    }

    public java.lang.Comparable getSeriesKey(int series) {
        return getSeries(series).getKey();
    }

    public void addSeries(org.jfree.data.time.TimeSeries series) {
        if (series == null) {
            throw new java.lang.IllegalArgumentException("Null 'series' argument.");
        }
        this.data.add(series);
        series.addChangeListener(this);
        fireDatasetChanged();
    }

    public void removeSeries(org.jfree.data.time.TimeSeries series) {
        if (series == null) {
            throw new java.lang.IllegalArgumentException("Null 'series' argument.");
        }
        this.data.remove(series);
        series.removeChangeListener(this);
        fireDatasetChanged();
    }

    public void removeSeries(int index) {
        org.jfree.data.time.TimeSeries series = getSeries(index);
        if (series != null) {
            removeSeries(series);
        }
    }

    public void removeAllSeries() {
        for (int i = 0; i < this.data.size(); i++) {
            org.jfree.data.time.TimeSeries series = ((org.jfree.data.time.TimeSeries) (this.data.get(i)));
            series.removeChangeListener(this);
        }
        this.data.clear();
        fireDatasetChanged();
    }

    public int getItemCount(int series) {
        return getSeries(series).getItemCount();
    }

    public double getXValue(int series, int item) {
        org.jfree.data.time.TimeSeries s = ((org.jfree.data.time.TimeSeries) (this.data.get(series)));
        org.jfree.data.time.RegularTimePeriod period = s.getTimePeriod(item);
        return getX(period);
    }

    public java.lang.Number getX(int series, int item) {
        org.jfree.data.time.TimeSeries ts = ((org.jfree.data.time.TimeSeries) (this.data.get(series)));
        org.jfree.data.time.RegularTimePeriod period = ts.getTimePeriod(item);
        return new java.lang.Long(getX(period));
    }

    protected synchronized long getX(org.jfree.data.time.RegularTimePeriod period) {
        long result = 0L;
        if (this.xPosition == org.jfree.data.time.TimePeriodAnchor.START) {
            result = period.getFirstMillisecond(this.workingCalendar);
        } else if (this.xPosition == org.jfree.data.time.TimePeriodAnchor.MIDDLE) {
            result = period.getMiddleMillisecond(this.workingCalendar);
        } else if (this.xPosition == org.jfree.data.time.TimePeriodAnchor.END) {
            result = period.getLastMillisecond(this.workingCalendar);
        }
        return result;
    }

    public synchronized java.lang.Number getStartX(int series, int item) {
        org.jfree.data.time.TimeSeries ts = ((org.jfree.data.time.TimeSeries) (this.data.get(series)));
        return new java.lang.Long(ts.getTimePeriod(item).getFirstMillisecond(this.workingCalendar));
    }

    public synchronized java.lang.Number getEndX(int series, int item) {
        org.jfree.data.time.TimeSeries ts = ((org.jfree.data.time.TimeSeries) (this.data.get(series)));
        return new java.lang.Long(ts.getTimePeriod(item).getLastMillisecond(this.workingCalendar));
    }

    public java.lang.Number getY(int series, int item) {
        org.jfree.data.time.TimeSeries ts = ((org.jfree.data.time.TimeSeries) (this.data.get(series)));
        return ts.getValue(item);
    }

    public java.lang.Number getStartY(int series, int item) {
        return getY(series, item);
    }

    public java.lang.Number getEndY(int series, int item) {
        return getY(series, item);
    }

    public boolean isSelected(int series, int item) {
        org.jfree.data.time.TimeSeries s = getSeries(series);
        org.jfree.data.time.TimeSeriesDataItem i = s.getRawDataItem(item);
        return i.isSelected();
    }

    public void setSelected(int series, int item, boolean selected) {
        setSelected(series, item, selected, true);
    }

    public void setSelected(int series, int item, boolean selected, boolean notify) {
        org.jfree.data.time.TimeSeries s = getSeries(series);
        org.jfree.data.time.TimeSeriesDataItem i = s.getRawDataItem(item);
        i.setSelected(selected);
        if (notify) {
            fireDatasetChanged();
        }
    }

    public void clearSelection() {
        int seriesCount = getSeriesCount();
        for (int s = 0; s < seriesCount; s++) {
            int itemCount = getItemCount(s);
            for (int i = 0; i < itemCount; i++) {
                setSelected(s, i, false, false);
            }
        }
    }

    public int[] getSurroundingItems(int series, long milliseconds) {
        int[] result = new int[]{ -1, -1 };
        org.jfree.data.time.TimeSeries timeSeries = getSeries(series);
        for (int i = 0; i < timeSeries.getItemCount(); i++) {
            java.lang.Number x = getX(series, i);
            long m = x.longValue();
            if (m <= milliseconds) {
                result[0] = i;
            }
            if (m >= milliseconds) {
                result[1] = i;
                break;
            }
        }
        return result;
    }

    public double getDomainLowerBound(boolean includeInterval) {
        double result = java.lang.Double.NaN;
        org.jfree.data.Range r = getDomainBounds(includeInterval);
        if (r != null) {
            result = r.getLowerBound();
        }
        return result;
    }

    public double getDomainUpperBound(boolean includeInterval) {
        double result = java.lang.Double.NaN;
        org.jfree.data.Range r = getDomainBounds(includeInterval);
        if (r != null) {
            result = r.getUpperBound();
        }
        return result;
    }

    public org.jfree.data.Range getDomainBounds(boolean includeInterval) {
        org.jfree.data.Range result = null;
        java.util.Iterator iterator = this.data.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.time.TimeSeries series = ((org.jfree.data.time.TimeSeries) (iterator.next()));
            int count = series.getItemCount();
            if (count > 0) {
                org.jfree.data.time.RegularTimePeriod start = series.getTimePeriod(0);
                org.jfree.data.time.RegularTimePeriod end = series.getTimePeriod(count - 1);
                org.jfree.data.Range temp;
                if (!includeInterval) {
                    temp = new org.jfree.data.Range(getX(start), getX(end));
                } else {
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(443).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(443).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(443).collectInput("result",result);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(443).collectInput("iterator",iterator);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(443).collectInput("includeInterval",includeInterval);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(443).collectInput("series",series);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(443).collectInput("count",count);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(443).collectInput("start",start);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(443).collectInput("org.jfree.data.time.TimeSeriesCollection.this.data",org.jfree.data.time.TimeSeriesCollection.this.data);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(443).collectInput("end",end);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(443).collectInput("org.jfree.data.time.TimeSeriesCollection.this.xPosition",org.jfree.data.time.TimeSeriesCollection.this.xPosition);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(443).collectInput("org.jfree.data.time.TimeSeriesCollection.this.workingCalendar",org.jfree.data.time.TimeSeriesCollection.this.workingCalendar);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(443).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(443).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        temp = new org.jfree.data.Range(start.getFirstMillisecond(this.workingCalendar), end.getLastMillisecond(this.workingCalendar));

                }
                result = org.jfree.data.Range.combine(result, temp);
            }
        } 
        return result;
    }

    public org.jfree.data.Range getDomainBounds(java.util.List visibleSeriesKeys, boolean includeInterval) {
        org.jfree.data.Range result = null;
        java.util.Iterator iterator = visibleSeriesKeys.iterator();
        while (iterator.hasNext()) {
            java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
            org.jfree.data.time.TimeSeries series = getSeries(seriesKey);
            int count = series.getItemCount();
            if (count > 0) {
                org.jfree.data.time.RegularTimePeriod start = series.getTimePeriod(0);
                org.jfree.data.time.RegularTimePeriod end = series.getTimePeriod(count - 1);
                org.jfree.data.Range temp;
                if (!includeInterval) {
                    temp = new org.jfree.data.Range(getX(start), getX(end));
                } else {
                    temp = new org.jfree.data.Range(start.getFirstMillisecond(this.workingCalendar), end.getLastMillisecond(this.workingCalendar));
                }
                result = org.jfree.data.Range.combine(result, temp);
            }
        } 
        return result;
    }

    public org.jfree.data.Range getRangeBounds(java.util.List visibleSeriesKeys, org.jfree.data.Range xRange, boolean includeInterval) {
        org.jfree.data.Range result = null;
        java.util.Iterator iterator = visibleSeriesKeys.iterator();
        while (iterator.hasNext()) {
            java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
            org.jfree.data.time.TimeSeries series = getSeries(seriesKey);
            org.jfree.data.Range r = null;
            r = new org.jfree.data.Range(series.getMinY(), series.getMaxY());
            result = org.jfree.data.Range.combine(result, r);
        } 
        return result;
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.time.TimeSeriesCollection)) {
            return false;
        }
        org.jfree.data.time.TimeSeriesCollection that = ((org.jfree.data.time.TimeSeriesCollection) (obj));
        if (this.xPosition != that.xPosition) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.data, that.data)) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result;
        result = this.data.hashCode();
        result = (29 * result) + (this.workingCalendar != null ? this.workingCalendar.hashCode() : 0);
        result = (29 * result) + (this.xPosition != null ? this.xPosition.hashCode() : 0);
        return result;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.data.time.TimeSeriesCollection clone = ((org.jfree.data.time.TimeSeriesCollection) (super.clone()));
        clone.data = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.data)));
        clone.workingCalendar = ((java.util.Calendar) (this.workingCalendar.clone()));
        return clone;
    }
}
[515955] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858605881
GPR[SSUN]-1659858605881
-631918205
GPR[SPVATF]-1659858606007
GPR[EPVATF]-1659858606175
GPR[SPS]-1659858606175
[516411] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TimeSeriesCollection extends org.jfree.data.xy.AbstractIntervalXYDataset implements org.jfree.data.xy.XYDataset , org.jfree.data.xy.IntervalXYDataset , org.jfree.data.DomainInfo , org.jfree.data.xy.XYDomainInfo , org.jfree.data.xy.XYRangeInfo , org.jfree.data.xy.XYDatasetSelectionState , org.jfree.data.xy.SelectableXYDataset , java.io.Serializable {
    private static final long serialVersionUID = 834149929022371137L;

    private java.util.List data;

    private java.util.Calendar workingCalendar;

    private org.jfree.data.time.TimePeriodAnchor xPosition;

    public TimeSeriesCollection() {
        this(null, java.util.TimeZone.getDefault());
    }

    public TimeSeriesCollection(java.util.TimeZone zone) {
        this(null, zone);
    }

    public TimeSeriesCollection(org.jfree.data.time.TimeSeries series) {
        this(series, java.util.TimeZone.getDefault());
    }

    public TimeSeriesCollection(org.jfree.data.time.TimeSeries series, java.util.TimeZone zone) {
        super();
        if (zone == null) {
            zone = java.util.TimeZone.getDefault();
        }
        this.workingCalendar = java.util.Calendar.getInstance(zone);
        this.data = new java.util.ArrayList();
        if (series != null) {
            this.data.add(series);
            series.addChangeListener(this);
        }
        this.xPosition = org.jfree.data.time.TimePeriodAnchor.START;
        setSelectionState(this);
    }

    public org.jfree.data.DomainOrder getDomainOrder() {
        return org.jfree.data.DomainOrder.ASCENDING;
    }

    public org.jfree.data.time.TimePeriodAnchor getXPosition() {
        return this.xPosition;
    }

    public void setXPosition(org.jfree.data.time.TimePeriodAnchor anchor) {
        if (anchor == null) {
            throw new java.lang.IllegalArgumentException("Null 'anchor' argument.");
        }
        this.xPosition = anchor;
        notifyListeners(new org.jfree.data.general.DatasetChangeEvent(this, this));
    }

    public java.util.List getSeries() {
        return java.util.Collections.unmodifiableList(this.data);
    }

    public int getSeriesCount() {
        return this.data.size();
    }

    public int indexOf(org.jfree.data.time.TimeSeries series) {
        if (series == null) {
            throw new java.lang.IllegalArgumentException("Null 'series' argument.");
        }
        return this.data.indexOf(series);
    }

    public org.jfree.data.time.TimeSeries getSeries(int series) {
        if ((series < 0) || (series >= getSeriesCount())) {
            throw new java.lang.IllegalArgumentException(("The 'series' argument is out of bounds (" + series) + ").");
        }
        return ((org.jfree.data.time.TimeSeries) (this.data.get(series)));
    }

    public org.jfree.data.time.TimeSeries getSeries(java.lang.Comparable key) {
        org.jfree.data.time.TimeSeries result = null;
        java.util.Iterator iterator = this.data.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.time.TimeSeries series = ((org.jfree.data.time.TimeSeries) (iterator.next()));
            java.lang.Comparable k = series.getKey();
            if ((k != null) && k.equals(key)) {
                result = series;
            }
        } 
        return result;
    }

    public java.lang.Comparable getSeriesKey(int series) {
        return getSeries(series).getKey();
    }

    public void addSeries(org.jfree.data.time.TimeSeries series) {
        if (series == null) {
            throw new java.lang.IllegalArgumentException("Null 'series' argument.");
        }
        this.data.add(series);
        series.addChangeListener(this);
        fireDatasetChanged();
    }

    public void removeSeries(org.jfree.data.time.TimeSeries series) {
        if (series == null) {
            throw new java.lang.IllegalArgumentException("Null 'series' argument.");
        }
        this.data.remove(series);
        series.removeChangeListener(this);
        fireDatasetChanged();
    }

    public void removeSeries(int index) {
        org.jfree.data.time.TimeSeries series = getSeries(index);
        if (series != null) {
            removeSeries(series);
        }
    }

    public void removeAllSeries() {
        for (int i = 0; i < this.data.size(); i++) {
            org.jfree.data.time.TimeSeries series = ((org.jfree.data.time.TimeSeries) (this.data.get(i)));
            series.removeChangeListener(this);
        }
        this.data.clear();
        fireDatasetChanged();
    }

    public int getItemCount(int series) {
        return getSeries(series).getItemCount();
    }

    public double getXValue(int series, int item) {
        org.jfree.data.time.TimeSeries s = ((org.jfree.data.time.TimeSeries) (this.data.get(series)));
        org.jfree.data.time.RegularTimePeriod period = s.getTimePeriod(item);
        return getX(period);
    }

    public java.lang.Number getX(int series, int item) {
        org.jfree.data.time.TimeSeries ts = ((org.jfree.data.time.TimeSeries) (this.data.get(series)));
        org.jfree.data.time.RegularTimePeriod period = ts.getTimePeriod(item);
        return new java.lang.Long(getX(period));
    }

    protected synchronized long getX(org.jfree.data.time.RegularTimePeriod period) {
        long result = 0L;
        if (this.xPosition == org.jfree.data.time.TimePeriodAnchor.START) {
            result = period.getFirstMillisecond(this.workingCalendar);
        } else if (this.xPosition == org.jfree.data.time.TimePeriodAnchor.MIDDLE) {
            result = period.getMiddleMillisecond(this.workingCalendar);
        } else if (this.xPosition == org.jfree.data.time.TimePeriodAnchor.END) {
            result = period.getLastMillisecond(this.workingCalendar);
        }
        return result;
    }

    public synchronized java.lang.Number getStartX(int series, int item) {
        org.jfree.data.time.TimeSeries ts = ((org.jfree.data.time.TimeSeries) (this.data.get(series)));
        return new java.lang.Long(ts.getTimePeriod(item).getFirstMillisecond(this.workingCalendar));
    }

    public synchronized java.lang.Number getEndX(int series, int item) {
        org.jfree.data.time.TimeSeries ts = ((org.jfree.data.time.TimeSeries) (this.data.get(series)));
        return new java.lang.Long(ts.getTimePeriod(item).getLastMillisecond(this.workingCalendar));
    }

    public java.lang.Number getY(int series, int item) {
        org.jfree.data.time.TimeSeries ts = ((org.jfree.data.time.TimeSeries) (this.data.get(series)));
        return ts.getValue(item);
    }

    public java.lang.Number getStartY(int series, int item) {
        return getY(series, item);
    }

    public java.lang.Number getEndY(int series, int item) {
        return getY(series, item);
    }

    public boolean isSelected(int series, int item) {
        org.jfree.data.time.TimeSeries s = getSeries(series);
        org.jfree.data.time.TimeSeriesDataItem i = s.getRawDataItem(item);
        return i.isSelected();
    }

    public void setSelected(int series, int item, boolean selected) {
        setSelected(series, item, selected, true);
    }

    public void setSelected(int series, int item, boolean selected, boolean notify) {
        org.jfree.data.time.TimeSeries s = getSeries(series);
        org.jfree.data.time.TimeSeriesDataItem i = s.getRawDataItem(item);
        i.setSelected(selected);
        if (notify) {
            fireDatasetChanged();
        }
    }

    public void clearSelection() {
        int seriesCount = getSeriesCount();
        for (int s = 0; s < seriesCount; s++) {
            int itemCount = getItemCount(s);
            for (int i = 0; i < itemCount; i++) {
                setSelected(s, i, false, false);
            }
        }
    }

    public int[] getSurroundingItems(int series, long milliseconds) {
        int[] result = new int[]{ -1, -1 };
        org.jfree.data.time.TimeSeries timeSeries = getSeries(series);
        for (int i = 0; i < timeSeries.getItemCount(); i++) {
            java.lang.Number x = getX(series, i);
            long m = x.longValue();
            if (m <= milliseconds) {
                result[0] = i;
            }
            if (m >= milliseconds) {
                result[1] = i;
                break;
            }
        }
        return result;
    }

    public double getDomainLowerBound(boolean includeInterval) {
        double result = java.lang.Double.NaN;
        org.jfree.data.Range r = getDomainBounds(includeInterval);
        if (r != null) {
            result = r.getLowerBound();
        }
        return result;
    }

    public double getDomainUpperBound(boolean includeInterval) {
        double result = java.lang.Double.NaN;
        org.jfree.data.Range r = getDomainBounds(includeInterval);
        if (r != null) {
            result = r.getUpperBound();
        }
        return result;
    }

    public org.jfree.data.Range getDomainBounds(boolean includeInterval) {
        org.jfree.data.Range result = null;
        java.util.Iterator iterator = this.data.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.time.TimeSeries series = ((org.jfree.data.time.TimeSeries) (iterator.next()));
            int count = series.getItemCount();
            if (count > 0) {
                org.jfree.data.time.RegularTimePeriod start = series.getTimePeriod(0);
                org.jfree.data.time.RegularTimePeriod end = series.getTimePeriod(count - 1);
                org.jfree.data.Range temp;
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(444).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(444).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(444).collectInput("result",result);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(444).collectInput("iterator",iterator);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(444).collectInput("includeInterval",includeInterval);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(444).collectInput("series",series);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(444).collectInput("count",count);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(444).collectInput("start",start);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(444).collectInput("org.jfree.data.time.TimeSeriesCollection.this.data",org.jfree.data.time.TimeSeriesCollection.this.data);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(444).collectInput("end",end);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(444).collectInput("!includeInterval",!includeInterval);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(444).collectInput("org.jfree.data.time.TimeSeriesCollection.this.xPosition",org.jfree.data.time.TimeSeriesCollection.this.xPosition);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(444).collectInput("org.jfree.data.time.TimeSeriesCollection.this.workingCalendar",org.jfree.data.time.TimeSeriesCollection.this.workingCalendar);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(444).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(444).collectionEnds();
                }
                if (runtimeAngelicValue) if (!includeInterval) {
                    temp = new org.jfree.data.Range(getX(start), getX(end));
                } else {
                    temp = new org.jfree.data.Range(start.getFirstMillisecond(this.workingCalendar), end.getLastMillisecond(this.workingCalendar));
                }
                result = org.jfree.data.Range.combine(result, temp);
            }
        } 
        return result;
    }

    public org.jfree.data.Range getDomainBounds(java.util.List visibleSeriesKeys, boolean includeInterval) {
        org.jfree.data.Range result = null;
        java.util.Iterator iterator = visibleSeriesKeys.iterator();
        while (iterator.hasNext()) {
            java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
            org.jfree.data.time.TimeSeries series = getSeries(seriesKey);
            int count = series.getItemCount();
            if (count > 0) {
                org.jfree.data.time.RegularTimePeriod start = series.getTimePeriod(0);
                org.jfree.data.time.RegularTimePeriod end = series.getTimePeriod(count - 1);
                org.jfree.data.Range temp;
                if (!includeInterval) {
                    temp = new org.jfree.data.Range(getX(start), getX(end));
                } else {
                    temp = new org.jfree.data.Range(start.getFirstMillisecond(this.workingCalendar), end.getLastMillisecond(this.workingCalendar));
                }
                result = org.jfree.data.Range.combine(result, temp);
            }
        } 
        return result;
    }

    public org.jfree.data.Range getRangeBounds(java.util.List visibleSeriesKeys, org.jfree.data.Range xRange, boolean includeInterval) {
        org.jfree.data.Range result = null;
        java.util.Iterator iterator = visibleSeriesKeys.iterator();
        while (iterator.hasNext()) {
            java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
            org.jfree.data.time.TimeSeries series = getSeries(seriesKey);
            org.jfree.data.Range r = null;
            r = new org.jfree.data.Range(series.getMinY(), series.getMaxY());
            result = org.jfree.data.Range.combine(result, r);
        } 
        return result;
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.time.TimeSeriesCollection)) {
            return false;
        }
        org.jfree.data.time.TimeSeriesCollection that = ((org.jfree.data.time.TimeSeriesCollection) (obj));
        if (this.xPosition != that.xPosition) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.data, that.data)) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result;
        result = this.data.hashCode();
        result = (29 * result) + (this.workingCalendar != null ? this.workingCalendar.hashCode() : 0);
        result = (29 * result) + (this.xPosition != null ? this.xPosition.hashCode() : 0);
        return result;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.data.time.TimeSeriesCollection clone = ((org.jfree.data.time.TimeSeriesCollection) (super.clone()));
        clone.data = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.data)));
        clone.workingCalendar = ((java.util.Calendar) (this.workingCalendar.clone()));
        return clone;
    }
}
[516411] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659858606337
GPR[EPVATF]-1659858606508
GPR[SPS]-1659858606508
[516830] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeriesCollection:645.
GPR[EPS]-1659858606756
GPR[ESUN]-1659858606756
GPR[SSUN]-1659858606756
-631918205
GPR[ESUN]-1659858606883
GPR[SSUN]-1659858606883
-631918205
GPR[ESUN]-1659858607007
GPR[SSUN]-1659858607007
-631918205
GPR[SPVATF]-1659858607133
GPR[EPVATF]-1659858607301
GPR[SPS]-1659858607301
[517619] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeriesCollection:641.
GPR[EPS]-1659858607545
GPR[SPVATF]-1659858607546
GPR[EPVATF]-1659858607709
GPR[SPS]-1659858607709
[518029] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeriesCollection:641.
GPR[EPS]-1659858607955
GPR[ESUN]-1659858607955
GPR[SSUN]-1659858607955
-631918205
GPR[ESUN]-1659858608088
GPR[SSUN]-1659858608088
-631918205
GPR[ESUN]-1659858608213
GPR[SSUN]-1659858608213
-631918205
GPR[SPVATF]-1659858608338
GPR[EPVATF]-1659858608504
GPR[SPS]-1659858608504
[518822] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeriesCollection:638.
GPR[EPS]-1659858608748
GPR[ESUN]-1659858608748
GPR[SSUN]-1659858608749
-631918205
GPR[ESUN]-1659858608921
GPR[SSUN]-1659858608921
-631918205
GPR[ESUN]-1659858609051
GPR[SSUN]-1659858609051
1355738515
GPR[SPVATF]-1659858609177
GPR[EPVATF]-1659858609412
GPR[SPS]-1659858609412
[519676] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class DatasetUtilities {
    private DatasetUtilities() {
    }

    public static double calculatePieDatasetTotal(org.jfree.data.general.PieDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        java.util.List keys = dataset.getKeys();
        double totalValue = 0;
        java.util.Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            java.lang.Comparable current = ((java.lang.Comparable) (iterator.next()));
            if (current != null) {
                java.lang.Number value = dataset.getValue(current);
                double v = 0.0;
                if (value != null) {
                    v = value.doubleValue();
                }
                if (v > 0) {
                    totalValue = totalValue + v;
                }
            }
        } 
        return totalValue;
    }

    public static org.jfree.data.general.PieDataset createPieDatasetForRow(org.jfree.data.category.CategoryDataset dataset, java.lang.Comparable rowKey) {
        int row = dataset.getRowIndex(rowKey);
        return org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(dataset, row);
    }

    public static org.jfree.data.general.PieDataset createPieDatasetForRow(org.jfree.data.category.CategoryDataset dataset, int row) {
        org.jfree.data.general.DefaultPieDataset result = new org.jfree.data.general.DefaultPieDataset();
        int columnCount = dataset.getColumnCount();
        for (int current = 0; current < columnCount; current++) {
            java.lang.Comparable columnKey = dataset.getColumnKey(current);
            result.setValue(columnKey, dataset.getValue(row, current));
        }
        return result;
    }

    public static org.jfree.data.general.PieDataset createPieDatasetForColumn(org.jfree.data.category.CategoryDataset dataset, java.lang.Comparable columnKey) {
        int column = dataset.getColumnIndex(columnKey);
        return org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(dataset, column);
    }

    public static org.jfree.data.general.PieDataset createPieDatasetForColumn(org.jfree.data.category.CategoryDataset dataset, int column) {
        org.jfree.data.general.DefaultPieDataset result = new org.jfree.data.general.DefaultPieDataset();
        int rowCount = dataset.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            java.lang.Comparable rowKey = dataset.getRowKey(i);
            result.setValue(rowKey, dataset.getValue(i, column));
        }
        return result;
    }

    public static org.jfree.data.general.PieDataset createConsolidatedPieDataset(org.jfree.data.general.PieDataset source, java.lang.Comparable key, double minimumPercent) {
        return org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(source, key, minimumPercent, 2);
    }

    public static org.jfree.data.general.PieDataset createConsolidatedPieDataset(org.jfree.data.general.PieDataset source, java.lang.Comparable key, double minimumPercent, int minItems) {
        org.jfree.data.general.DefaultPieDataset result = new org.jfree.data.general.DefaultPieDataset();
        double total = org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(source);
        java.util.List keys = source.getKeys();
        java.util.ArrayList otherKeys = new java.util.ArrayList();
        java.util.Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            java.lang.Comparable currentKey = ((java.lang.Comparable) (iterator.next()));
            java.lang.Number dataValue = source.getValue(currentKey);
            if (dataValue != null) {
                double value = dataValue.doubleValue();
                if ((value / total) < minimumPercent) {
                    otherKeys.add(currentKey);
                }
            }
        } 
        iterator = keys.iterator();
        double otherValue = 0;
        while (iterator.hasNext()) {
            java.lang.Comparable currentKey = ((java.lang.Comparable) (iterator.next()));
            java.lang.Number dataValue = source.getValue(currentKey);
            if (dataValue != null) {
                if (otherKeys.contains(currentKey) && (otherKeys.size() >= minItems)) {
                    otherValue += dataValue.doubleValue();
                } else {
                    result.setValue(currentKey, dataValue);
                }
            }
        } 
        if (otherKeys.size() >= minItems) {
            result.setValue(key, otherValue);
        }
        return result;
    }

    public static org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.String rowKeyPrefix, java.lang.String columnKeyPrefix, double[][] data) {
        org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset();
        for (int r = 0; r < data.length; r++) {
            java.lang.String rowKey = rowKeyPrefix + (r + 1);
            for (int c = 0; c < data[r].length; c++) {
                java.lang.String columnKey = columnKeyPrefix + (c + 1);
                result.addValue(new java.lang.Double(data[r][c]), rowKey, columnKey);
            }
        }
        return result;
    }

    public static org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.String rowKeyPrefix, java.lang.String columnKeyPrefix, java.lang.Number[][] data) {
        org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset();
        for (int r = 0; r < data.length; r++) {
            java.lang.String rowKey = rowKeyPrefix + (r + 1);
            for (int c = 0; c < data[r].length; c++) {
                java.lang.String columnKey = columnKeyPrefix + (c + 1);
                result.addValue(data[r][c], rowKey, columnKey);
            }
        }
        return result;
    }

    public static org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.Comparable[] rowKeys, java.lang.Comparable[] columnKeys, double[][] data) {
        if (rowKeys == null) {
            throw new java.lang.IllegalArgumentException("Null 'rowKeys' argument.");
        }
        if (columnKeys == null) {
            throw new java.lang.IllegalArgumentException("Null 'columnKeys' argument.");
        }
        if (org.jfree.chart.util.ArrayUtilities.hasDuplicateItems(rowKeys)) {
            throw new java.lang.IllegalArgumentException("Duplicate items in 'rowKeys'.");
        }
        if (org.jfree.chart.util.ArrayUtilities.hasDuplicateItems(columnKeys)) {
            throw new java.lang.IllegalArgumentException("Duplicate items in 'columnKeys'.");
        }
        if (rowKeys.length != data.length) {
            throw new java.lang.IllegalArgumentException("The number of row keys does not match the number of rows in " + "the data array.");
        }
        int columnCount = 0;
        for (int r = 0; r < data.length; r++) {
            columnCount = java.lang.Math.max(columnCount, data[r].length);
        }
        if (columnKeys.length != columnCount) {
            throw new java.lang.IllegalArgumentException("The number of column keys does not match the number of " + "columns in the data array.");
        }
        org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset();
        for (int r = 0; r < data.length; r++) {
            java.lang.Comparable rowKey = rowKeys[r];
            for (int c = 0; c < data[r].length; c++) {
                java.lang.Comparable columnKey = columnKeys[c];
                result.addValue(new java.lang.Double(data[r][c]), rowKey, columnKey);
            }
        }
        return result;
    }

    public static org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.Comparable rowKey, org.jfree.data.KeyedValues rowData) {
        if (rowKey == null) {
            throw new java.lang.IllegalArgumentException("Null 'rowKey' argument.");
        }
        if (rowData == null) {
            throw new java.lang.IllegalArgumentException("Null 'rowData' argument.");
        }
        org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset();
        for (int i = 0; i < rowData.getItemCount(); i++) {
            result.addValue(rowData.getValue(i), rowKey, rowData.getKey(i));
        }
        return result;
    }

    public static org.jfree.data.xy.XYDataset sampleFunction2D(org.jfree.data.function.Function2D f, double start, double end, int samples, java.lang.Comparable seriesKey) {
        org.jfree.data.xy.XYSeries series = org.jfree.data.general.DatasetUtilities.sampleFunction2DToSeries(f, start, end, samples, seriesKey);
        org.jfree.data.xy.XYSeriesCollection collection = new org.jfree.data.xy.XYSeriesCollection(series);
        return collection;
    }

    public static org.jfree.data.xy.XYSeries sampleFunction2DToSeries(org.jfree.data.function.Function2D f, double start, double end, int samples, java.lang.Comparable seriesKey) {
        if (f == null) {
            throw new java.lang.IllegalArgumentException("Null 'f' argument.");
        }
        if (seriesKey == null) {
            throw new java.lang.IllegalArgumentException("Null 'seriesKey' argument.");
        }
        if (start >= end) {
            throw new java.lang.IllegalArgumentException("Requires 'start' < 'end'.");
        }
        if (samples < 2) {
            throw new java.lang.IllegalArgumentException("Requires 'samples' > 1");
        }
        org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries(seriesKey);
        double step = (end - start) / (samples - 1);
        for (int i = 0; i < samples; i++) {
            double x = start + (step * i);
            series.add(x, f.getValue(x));
        }
        return series;
    }

    public static boolean isEmptyOrNull(org.jfree.data.general.PieDataset dataset) {
        if (dataset == null) {
            return true;
        }
        int itemCount = dataset.getItemCount();
        if (itemCount == 0) {
            return true;
        }
        for (int item = 0; item < itemCount; item++) {
            java.lang.Number y = dataset.getValue(item);
            if (y != null) {
                double yy = y.doubleValue();
                if (yy > 0.0) {
                    return false;
                }
            }
        }
        return true;
    }

    public static boolean isEmptyOrNull(org.jfree.data.category.CategoryDataset dataset) {
        if (dataset == null) {
            return true;
        }
        int rowCount = dataset.getRowCount();
        int columnCount = dataset.getColumnCount();
        if ((rowCount == 0) || (columnCount == 0)) {
            return true;
        }
        for (int r = 0; r < rowCount; r++) {
            for (int c = 0; c < columnCount; c++) {
                if (dataset.getValue(r, c) != null) {
                    return false;
                }
            }
        }
        return true;
    }

    public static boolean isEmptyOrNull(org.jfree.data.xy.XYDataset dataset) {
        if (dataset != null) {
            for (int s = 0; s < dataset.getSeriesCount(); s++) {
                if (dataset.getItemCount(s) > 0) {
                    return false;
                }
            }
        }
        return true;
    }

    public static org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.findDomainBounds(dataset, true);
    }

    public static org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset dataset, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        if (dataset instanceof org.jfree.data.DomainInfo) {
            org.jfree.data.DomainInfo info = ((org.jfree.data.DomainInfo) (dataset));
            result = info.getDomainBounds(includeInterval);
        } else {
            result = org.jfree.data.general.DatasetUtilities.iterateDomainBounds(dataset, includeInterval);
        }
        return result;
    }

    public static org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset dataset, java.util.List visibleSeriesKeys, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        if (dataset instanceof org.jfree.data.xy.XYDomainInfo) {
            org.jfree.data.xy.XYDomainInfo info = ((org.jfree.data.xy.XYDomainInfo) (dataset));
            result = info.getDomainBounds(visibleSeriesKeys, includeInterval);
        } else {
            result = org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds(dataset, visibleSeriesKeys, includeInterval);
        }
        return result;
    }

    public static org.jfree.data.Range iterateDomainBounds(org.jfree.data.xy.XYDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.iterateDomainBounds(dataset, true);
    }

    public static org.jfree.data.Range iterateDomainBounds(org.jfree.data.xy.XYDataset dataset, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        int seriesCount = dataset.getSeriesCount();
        double lvalue;
        double uvalue;
        if (includeInterval && (dataset instanceof org.jfree.data.xy.IntervalXYDataset)) {
            org.jfree.data.xy.IntervalXYDataset intervalXYData = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    lvalue = intervalXYData.getStartXValue(series, item);
                    uvalue = intervalXYData.getEndXValue(series, item);
                    if (!java.lang.Double.isNaN(lvalue)) {
                        minimum = java.lang.Math.min(minimum, lvalue);
                    }
                    if (!java.lang.Double.isNaN(uvalue)) {
                        maximum = java.lang.Math.max(maximum, uvalue);
                    }
                }
            }
        } else {
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    lvalue = dataset.getXValue(series, item);
                    uvalue = lvalue;
                    if (!java.lang.Double.isNaN(lvalue)) {
                        minimum = java.lang.Math.min(minimum, lvalue);
                        maximum = java.lang.Math.max(maximum, uvalue);
                    }
                }
            }
        }
        if (minimum > maximum) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(449).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(449).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(449).collectInput("maximum",maximum);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(449).collectInput("seriesCount",seriesCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(449).collectInput("minimum",minimum);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(449).collectInput("dataset",dataset);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(449).collectInput("includeInterval",includeInterval);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(449).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(449).collectionEnds();
            }
            if (runtimeAngelicValue)
                return null;

        } else {
            return new org.jfree.data.Range(minimum, maximum);
        }
    }

    public static org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.findRangeBounds(dataset, true);
    }

    public static org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset dataset, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        if (dataset instanceof org.jfree.data.RangeInfo) {
            org.jfree.data.RangeInfo info = ((org.jfree.data.RangeInfo) (dataset));
            result = info.getRangeBounds(includeInterval);
        } else {
            result = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(dataset, includeInterval);
        }
        return result;
    }

    public static org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset dataset, java.util.List visibleSeriesKeys, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        if (dataset instanceof org.jfree.data.category.CategoryRangeInfo) {
            org.jfree.data.category.CategoryRangeInfo info = ((org.jfree.data.category.CategoryRangeInfo) (dataset));
            result = info.getRangeBounds(visibleSeriesKeys, includeInterval);
        } else {
            result = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, includeInterval);
        }
        return result;
    }

    public static org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.findRangeBounds(dataset, true);
    }

    public static org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset dataset, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        if (dataset instanceof org.jfree.data.RangeInfo) {
            org.jfree.data.RangeInfo info = ((org.jfree.data.RangeInfo) (dataset));
            result = info.getRangeBounds(includeInterval);
        } else {
            result = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(dataset, includeInterval);
        }
        return result;
    }

    public static org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset dataset, java.util.List visibleSeriesKeys, org.jfree.data.Range xRange, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        if (dataset instanceof org.jfree.data.xy.XYRangeInfo) {
            org.jfree.data.xy.XYRangeInfo info = ((org.jfree.data.xy.XYRangeInfo) (dataset));
            result = info.getRangeBounds(visibleSeriesKeys, xRange, includeInterval);
        } else {
            result = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, xRange, includeInterval);
        }
        return result;
    }

    public static org.jfree.data.Range iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset dataset, boolean includeInterval) {
        return org.jfree.data.general.DatasetUtilities.iterateRangeBounds(dataset, includeInterval);
    }

    public static org.jfree.data.Range iterateRangeBounds(org.jfree.data.category.CategoryDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.iterateRangeBounds(dataset, true);
    }

    public static org.jfree.data.Range iterateRangeBounds(org.jfree.data.category.CategoryDataset dataset, boolean includeInterval) {
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        int rowCount = dataset.getRowCount();
        int columnCount = dataset.getColumnCount();
        if (includeInterval && (dataset instanceof org.jfree.data.category.IntervalCategoryDataset)) {
            org.jfree.data.category.IntervalCategoryDataset icd = ((org.jfree.data.category.IntervalCategoryDataset) (dataset));
            java.lang.Number lvalue;
            java.lang.Number uvalue;
            for (int row = 0; row < rowCount; row++) {
                for (int column = 0; column < columnCount; column++) {
                    lvalue = icd.getStartValue(row, column);
                    uvalue = icd.getEndValue(row, column);
                    if ((lvalue != null) && (!java.lang.Double.isNaN(lvalue.doubleValue()))) {
                        minimum = java.lang.Math.min(minimum, lvalue.doubleValue());
                    }
                    if ((uvalue != null) && (!java.lang.Double.isNaN(uvalue.doubleValue()))) {
                        maximum = java.lang.Math.max(maximum, uvalue.doubleValue());
                    }
                }
            }
        } else {
            for (int row = 0; row < rowCount; row++) {
                for (int column = 0; column < columnCount; column++) {
                    java.lang.Number value = dataset.getValue(row, column);
                    if (value != null) {
                        double v = value.doubleValue();
                        if (!java.lang.Double.isNaN(v)) {
                            minimum = java.lang.Math.min(minimum, v);
                            maximum = java.lang.Math.max(maximum, v);
                        }
                    }
                }
            }
        }
        if (minimum == java.lang.Double.POSITIVE_INFINITY) {
            return null;
        } else {
            return new org.jfree.data.Range(minimum, maximum);
        }
    }

    public static org.jfree.data.Range iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset dataset, java.util.List visibleSeriesKeys, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (visibleSeriesKeys == null) {
            throw new java.lang.IllegalArgumentException("Null 'visibleSeriesKeys' argument.");
        }
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        int columnCount = dataset.getColumnCount();
        if (includeInterval && (dataset instanceof org.jfree.data.statistics.BoxAndWhiskerCategoryDataset)) {
            org.jfree.data.statistics.BoxAndWhiskerCategoryDataset bx = ((org.jfree.data.statistics.BoxAndWhiskerCategoryDataset) (dataset));
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.getRowIndex(seriesKey);
                int itemCount = dataset.getColumnCount();
                for (int item = 0; item < itemCount; item++) {
                    java.lang.Number lvalue = bx.getMinRegularValue(series, item);
                    if (lvalue == null) {
                        lvalue = bx.getValue(series, item);
                    }
                    java.lang.Number uvalue = bx.getMaxRegularValue(series, item);
                    if (uvalue == null) {
                        uvalue = bx.getValue(series, item);
                    }
                    if (lvalue != null) {
                        minimum = java.lang.Math.min(minimum, lvalue.doubleValue());
                    }
                    if (uvalue != null) {
                        maximum = java.lang.Math.max(maximum, uvalue.doubleValue());
                    }
                }
            } 
        } else if (includeInterval && (dataset instanceof org.jfree.data.category.IntervalCategoryDataset)) {
            org.jfree.data.category.IntervalCategoryDataset icd = ((org.jfree.data.category.IntervalCategoryDataset) (dataset));
            java.lang.Number lvalue;
            java.lang.Number uvalue;
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.getRowIndex(seriesKey);
                for (int column = 0; column < columnCount; column++) {
                    lvalue = icd.getStartValue(series, column);
                    uvalue = icd.getEndValue(series, column);
                    if ((lvalue != null) && (!java.lang.Double.isNaN(lvalue.doubleValue()))) {
                        minimum = java.lang.Math.min(minimum, lvalue.doubleValue());
                    }
                    if ((uvalue != null) && (!java.lang.Double.isNaN(uvalue.doubleValue()))) {
                        maximum = java.lang.Math.max(maximum, uvalue.doubleValue());
                    }
                }
            } 
        } else if (includeInterval && (dataset instanceof org.jfree.data.statistics.MultiValueCategoryDataset)) {
            org.jfree.data.statistics.MultiValueCategoryDataset mvcd = ((org.jfree.data.statistics.MultiValueCategoryDataset) (dataset));
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.getRowIndex(seriesKey);
                for (int column = 0; column < columnCount; column++) {
                    java.util.List values = mvcd.getValues(series, column);
                    java.util.Iterator valueIterator = values.iterator();
                    while (valueIterator.hasNext()) {
                        java.lang.Object o = valueIterator.next();
                        if (o instanceof java.lang.Number) {
                            double v = ((java.lang.Number) (o)).doubleValue();
                            if (!java.lang.Double.isNaN(v)) {
                                minimum = java.lang.Math.min(minimum, v);
                                maximum = java.lang.Math.max(maximum, v);
                            }
                        }
                    } 
                }
            } 
        } else if (includeInterval && (dataset instanceof org.jfree.data.statistics.StatisticalCategoryDataset)) {
            org.jfree.data.statistics.StatisticalCategoryDataset scd = ((org.jfree.data.statistics.StatisticalCategoryDataset) (dataset));
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.getRowIndex(seriesKey);
                for (int column = 0; column < columnCount; column++) {
                    java.lang.Number meanN = scd.getMeanValue(series, column);
                    if (meanN != null) {
                        double std = 0.0;
                        java.lang.Number stdN = scd.getStdDevValue(series, column);
                        if (stdN != null) {
                            std = stdN.doubleValue();
                            if (java.lang.Double.isNaN(std)) {
                                std = 0.0;
                            }
                        }
                        double mean = meanN.doubleValue();
                        if (!java.lang.Double.isNaN(mean)) {
                            minimum = java.lang.Math.min(minimum, mean - std);
                            maximum = java.lang.Math.max(maximum, mean + std);
                        }
                    }
                }
            } 
        } else {
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.getRowIndex(seriesKey);
                for (int column = 0; column < columnCount; column++) {
                    java.lang.Number value = dataset.getValue(series, column);
                    if (value != null) {
                        double v = value.doubleValue();
                        if (!java.lang.Double.isNaN(v)) {
                            minimum = java.lang.Math.min(minimum, v);
                            maximum = java.lang.Math.max(maximum, v);
                        }
                    }
                }
            } 
        }
        if (minimum == java.lang.Double.POSITIVE_INFINITY) {
            return null;
        } else {
            return new org.jfree.data.Range(minimum, maximum);
        }
    }

    public static org.jfree.data.Range iterateXYRangeBounds(org.jfree.data.xy.XYDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.iterateRangeBounds(dataset);
    }

    public static org.jfree.data.Range iterateRangeBounds(org.jfree.data.xy.XYDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.iterateRangeBounds(dataset, true);
    }

    public static org.jfree.data.Range iterateRangeBounds(org.jfree.data.xy.XYDataset dataset, boolean includeInterval) {
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        int seriesCount = dataset.getSeriesCount();
        if (includeInterval && (dataset instanceof org.jfree.data.xy.IntervalXYDataset)) {
            org.jfree.data.xy.IntervalXYDataset ixyd = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double lvalue = ixyd.getStartYValue(series, item);
                    double uvalue = ixyd.getEndYValue(series, item);
                    if (!java.lang.Double.isNaN(lvalue)) {
                        minimum = java.lang.Math.min(minimum, lvalue);
                    }
                    if (!java.lang.Double.isNaN(uvalue)) {
                        maximum = java.lang.Math.max(maximum, uvalue);
                    }
                }
            }
        } else if (includeInterval && (dataset instanceof org.jfree.data.xy.OHLCDataset)) {
            org.jfree.data.xy.OHLCDataset ohlc = ((org.jfree.data.xy.OHLCDataset) (dataset));
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double lvalue = ohlc.getLowValue(series, item);
                    double uvalue = ohlc.getHighValue(series, item);
                    if (!java.lang.Double.isNaN(lvalue)) {
                        minimum = java.lang.Math.min(minimum, lvalue);
                    }
                    if (!java.lang.Double.isNaN(uvalue)) {
                        maximum = java.lang.Math.max(maximum, uvalue);
                    }
                }
            }
        } else {
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double value = dataset.getYValue(series, item);
                    if (!java.lang.Double.isNaN(value)) {
                        minimum = java.lang.Math.min(minimum, value);
                        maximum = java.lang.Math.max(maximum, value);
                    }
                }
            }
        }
        if (minimum == java.lang.Double.POSITIVE_INFINITY) {
            return null;
        } else {
            return new org.jfree.data.Range(minimum, maximum);
        }
    }

    public static org.jfree.data.Range iterateToFindDomainBounds(org.jfree.data.xy.XYDataset dataset, java.util.List visibleSeriesKeys, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (visibleSeriesKeys == null) {
            throw new java.lang.IllegalArgumentException("Null 'visibleSeriesKeys' argument.");
        }
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        if (includeInterval && (dataset instanceof org.jfree.data.xy.IntervalXYDataset)) {
            org.jfree.data.xy.IntervalXYDataset ixyd = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.indexOf(seriesKey);
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double lvalue = ixyd.getStartXValue(series, item);
                    double uvalue = ixyd.getEndXValue(series, item);
                    if (!java.lang.Double.isNaN(lvalue)) {
                        minimum = java.lang.Math.min(minimum, lvalue);
                    }
                    if (!java.lang.Double.isNaN(uvalue)) {
                        maximum = java.lang.Math.max(maximum, uvalue);
                    }
                }
            } 
        } else {
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.indexOf(seriesKey);
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double x = dataset.getXValue(series, item);
                    if (!java.lang.Double.isNaN(x)) {
                        minimum = java.lang.Math.min(minimum, x);
                        maximum = java.lang.Math.max(maximum, x);
                    }
                }
            } 
        }
        if (minimum == java.lang.Double.POSITIVE_INFINITY) {
            return null;
        } else {
            return new org.jfree.data.Range(minimum, maximum);
        }
    }

    public static org.jfree.data.Range iterateToFindRangeBounds(org.jfree.data.xy.XYDataset dataset, java.util.List visibleSeriesKeys, org.jfree.data.Range xRange, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (visibleSeriesKeys == null) {
            throw new java.lang.IllegalArgumentException("Null 'visibleSeriesKeys' argument.");
        }
        if (xRange == null) {
            throw new java.lang.IllegalArgumentException("Null 'xRange' argument");
        }
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        if (includeInterval && (dataset instanceof org.jfree.data.xy.OHLCDataset)) {
            org.jfree.data.xy.OHLCDataset ohlc = ((org.jfree.data.xy.OHLCDataset) (dataset));
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.indexOf(seriesKey);
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double x = ohlc.getXValue(series, item);
                    if (xRange.contains(x)) {
                        double lvalue = ohlc.getLowValue(series, item);
                        double uvalue = ohlc.getHighValue(series, item);
                        if (!java.lang.Double.isNaN(lvalue)) {
                            minimum = java.lang.Math.min(minimum, lvalue);
                        }
                        if (!java.lang.Double.isNaN(uvalue)) {
                            maximum = java.lang.Math.max(maximum, uvalue);
                        }
                    }
                }
            } 
        } else if (includeInterval && (dataset instanceof org.jfree.data.statistics.BoxAndWhiskerXYDataset)) {
            org.jfree.data.statistics.BoxAndWhiskerXYDataset bx = ((org.jfree.data.statistics.BoxAndWhiskerXYDataset) (dataset));
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.indexOf(seriesKey);
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double x = bx.getXValue(series, item);
                    if (xRange.contains(x)) {
                        java.lang.Number lvalue = bx.getMinRegularValue(series, item);
                        java.lang.Number uvalue = bx.getMaxRegularValue(series, item);
                        if (lvalue != null) {
                            minimum = java.lang.Math.min(minimum, lvalue.doubleValue());
                        }
                        if (uvalue != null) {
                            maximum = java.lang.Math.max(maximum, uvalue.doubleValue());
                        }
                    }
                }
            } 
        } else if (includeInterval && (dataset instanceof org.jfree.data.xy.IntervalXYDataset)) {
            org.jfree.data.xy.IntervalXYDataset ixyd = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.indexOf(seriesKey);
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double x = ixyd.getXValue(series, item);
                    if (xRange.contains(x)) {
                        double lvalue = ixyd.getStartYValue(series, item);
                        double uvalue = ixyd.getEndYValue(series, item);
                        if (!java.lang.Double.isNaN(lvalue)) {
                            minimum = java.lang.Math.min(minimum, lvalue);
                        }
                        if (!java.lang.Double.isNaN(uvalue)) {
                            maximum = java.lang.Math.max(maximum, uvalue);
                        }
                    }
                }
            } 
        } else {
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.indexOf(seriesKey);
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double x = dataset.getXValue(series, item);
                    double y = dataset.getYValue(series, item);
                    if (xRange.contains(x)) {
                        if (!java.lang.Double.isNaN(y)) {
                            minimum = java.lang.Math.min(minimum, y);
                            maximum = java.lang.Math.max(maximum, y);
                        }
                    }
                }
            } 
        }
        if (minimum == java.lang.Double.POSITIVE_INFINITY) {
            return null;
        } else {
            return new org.jfree.data.Range(minimum, maximum);
        }
    }

    public static java.lang.Number findMinimumDomainValue(org.jfree.data.xy.XYDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        java.lang.Number result = null;
        if (dataset instanceof org.jfree.data.DomainInfo) {
            org.jfree.data.DomainInfo info = ((org.jfree.data.DomainInfo) (dataset));
            return new java.lang.Double(info.getDomainLowerBound(true));
        } else {
            double minimum = java.lang.Double.POSITIVE_INFINITY;
            int seriesCount = dataset.getSeriesCount();
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double value;
                    if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {
                        org.jfree.data.xy.IntervalXYDataset intervalXYData = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
                        value = intervalXYData.getStartXValue(series, item);
                    } else {
                        value = dataset.getXValue(series, item);
                    }
                    if (!java.lang.Double.isNaN(value)) {
                        minimum = java.lang.Math.min(minimum, value);
                    }
                }
            }
            if (minimum == java.lang.Double.POSITIVE_INFINITY) {
                result = null;
            } else {
                result = new java.lang.Double(minimum);
            }
        }
        return result;
    }

    public static java.lang.Number findMaximumDomainValue(org.jfree.data.xy.XYDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        java.lang.Number result = null;
        if (dataset instanceof org.jfree.data.DomainInfo) {
            org.jfree.data.DomainInfo info = ((org.jfree.data.DomainInfo) (dataset));
            return new java.lang.Double(info.getDomainUpperBound(true));
        } else {
            double maximum = java.lang.Double.NEGATIVE_INFINITY;
            int seriesCount = dataset.getSeriesCount();
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double value;
                    if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {
                        org.jfree.data.xy.IntervalXYDataset intervalXYData = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
                        value = intervalXYData.getEndXValue(series, item);
                    } else {
                        value = dataset.getXValue(series, item);
                    }
                    if (!java.lang.Double.isNaN(value)) {
                        maximum = java.lang.Math.max(maximum, value);
                    }
                }
            }
            if (maximum == java.lang.Double.NEGATIVE_INFINITY) {
                result = null;
            } else {
                result = new java.lang.Double(maximum);
            }
        }
        return result;
    }

    public static java.lang.Number findMinimumRangeValue(org.jfree.data.category.CategoryDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (dataset instanceof org.jfree.data.RangeInfo) {
            org.jfree.data.RangeInfo info = ((org.jfree.data.RangeInfo) (dataset));
            return new java.lang.Double(info.getRangeLowerBound(true));
        } else {
            double minimum = java.lang.Double.POSITIVE_INFINITY;
            int seriesCount = dataset.getRowCount();
            int itemCount = dataset.getColumnCount();
            for (int series = 0; series < seriesCount; series++) {
                for (int item = 0; item < itemCount; item++) {
                    java.lang.Number value;
                    if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {
                        org.jfree.data.category.IntervalCategoryDataset icd = ((org.jfree.data.category.IntervalCategoryDataset) (dataset));
                        value = icd.getStartValue(series, item);
                    } else {
                        value = dataset.getValue(series, item);
                    }
                    if (value != null) {
                        minimum = java.lang.Math.min(minimum, value.doubleValue());
                    }
                }
            }
            if (minimum == java.lang.Double.POSITIVE_INFINITY) {
                return null;
            } else {
                return new java.lang.Double(minimum);
            }
        }
    }

    public static java.lang.Number findMinimumRangeValue(org.jfree.data.xy.XYDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (dataset instanceof org.jfree.data.RangeInfo) {
            org.jfree.data.RangeInfo info = ((org.jfree.data.RangeInfo) (dataset));
            return new java.lang.Double(info.getRangeLowerBound(true));
        } else {
            double minimum = java.lang.Double.POSITIVE_INFINITY;
            int seriesCount = dataset.getSeriesCount();
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double value;
                    if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {
                        org.jfree.data.xy.IntervalXYDataset intervalXYData = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
                        value = intervalXYData.getStartYValue(series, item);
                    } else if (dataset instanceof org.jfree.data.xy.OHLCDataset) {
                        org.jfree.data.xy.OHLCDataset highLowData = ((org.jfree.data.xy.OHLCDataset) (dataset));
                        value = highLowData.getLowValue(series, item);
                    } else {
                        value = dataset.getYValue(series, item);
                    }
                    if (!java.lang.Double.isNaN(value)) {
                        minimum = java.lang.Math.min(minimum, value);
                    }
                }
            }
            if (minimum == java.lang.Double.POSITIVE_INFINITY) {
                return null;
            } else {
                return new java.lang.Double(minimum);
            }
        }
    }

    public static java.lang.Number findMaximumRangeValue(org.jfree.data.category.CategoryDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (dataset instanceof org.jfree.data.RangeInfo) {
            org.jfree.data.RangeInfo info = ((org.jfree.data.RangeInfo) (dataset));
            return new java.lang.Double(info.getRangeUpperBound(true));
        } else {
            double maximum = java.lang.Double.NEGATIVE_INFINITY;
            int seriesCount = dataset.getRowCount();
            int itemCount = dataset.getColumnCount();
            for (int series = 0; series < seriesCount; series++) {
                for (int item = 0; item < itemCount; item++) {
                    java.lang.Number value;
                    if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {
                        org.jfree.data.category.IntervalCategoryDataset icd = ((org.jfree.data.category.IntervalCategoryDataset) (dataset));
                        value = icd.getEndValue(series, item);
                    } else {
                        value = dataset.getValue(series, item);
                    }
                    if (value != null) {
                        maximum = java.lang.Math.max(maximum, value.doubleValue());
                    }
                }
            }
            if (maximum == java.lang.Double.NEGATIVE_INFINITY) {
                return null;
            } else {
                return new java.lang.Double(maximum);
            }
        }
    }

    public static java.lang.Number findMaximumRangeValue(org.jfree.data.xy.XYDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (dataset instanceof org.jfree.data.RangeInfo) {
            org.jfree.data.RangeInfo info = ((org.jfree.data.RangeInfo) (dataset));
            return new java.lang.Double(info.getRangeUpperBound(true));
        } else {
            double maximum = java.lang.Double.NEGATIVE_INFINITY;
            int seriesCount = dataset.getSeriesCount();
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double value;
                    if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {
                        org.jfree.data.xy.IntervalXYDataset intervalXYData = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
                        value = intervalXYData.getEndYValue(series, item);
                    } else if (dataset instanceof org.jfree.data.xy.OHLCDataset) {
                        org.jfree.data.xy.OHLCDataset highLowData = ((org.jfree.data.xy.OHLCDataset) (dataset));
                        value = highLowData.getHighValue(series, item);
                    } else {
                        value = dataset.getYValue(series, item);
                    }
                    if (!java.lang.Double.isNaN(value)) {
                        maximum = java.lang.Math.max(maximum, value);
                    }
                }
            }
            if (maximum == java.lang.Double.NEGATIVE_INFINITY) {
                return null;
            } else {
                return new java.lang.Double(maximum);
            }
        }
    }

    public static org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(dataset, 0.0);
    }

    public static org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset dataset, double base) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        int categoryCount = dataset.getColumnCount();
        for (int item = 0; item < categoryCount; item++) {
            double positive = base;
            double negative = base;
            int seriesCount = dataset.getRowCount();
            for (int series = 0; series < seriesCount; series++) {
                java.lang.Number number = dataset.getValue(series, item);
                if (number != null) {
                    double value = number.doubleValue();
                    if (value > 0.0) {
                        positive = positive + value;
                    }
                    if (value < 0.0) {
                        negative = negative + value;
                    }
                }
            }
            minimum = java.lang.Math.min(minimum, negative);
            maximum = java.lang.Math.max(maximum, positive);
        }
        if (minimum <= maximum) {
            result = new org.jfree.data.Range(minimum, maximum);
        }
        return result;
    }

    public static org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset dataset, org.jfree.data.KeyToGroupMap map) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        boolean hasValidData = false;
        org.jfree.data.Range result = null;
        int[] groupIndex = new int[dataset.getRowCount()];
        for (int i = 0; i < dataset.getRowCount(); i++) {
            groupIndex[i] = map.getGroupIndex(map.getGroup(dataset.getRowKey(i)));
        }
        int groupCount = map.getGroupCount();
        double[] minimum = new double[groupCount];
        double[] maximum = new double[groupCount];
        int categoryCount = dataset.getColumnCount();
        for (int item = 0; item < categoryCount; item++) {
            double[] positive = new double[groupCount];
            double[] negative = new double[groupCount];
            int seriesCount = dataset.getRowCount();
            for (int series = 0; series < seriesCount; series++) {
                java.lang.Number number = dataset.getValue(series, item);
                if (number != null) {
                    hasValidData = true;
                    double value = number.doubleValue();
                    if (value > 0.0) {
                        positive[groupIndex[series]] = positive[groupIndex[series]] + value;
                    }
                    if (value < 0.0) {
                        negative[groupIndex[series]] = negative[groupIndex[series]] + value;
                    }
                }
            }
            for (int g = 0; g < groupCount; g++) {
                minimum[g] = java.lang.Math.min(minimum[g], negative[g]);
                maximum[g] = java.lang.Math.max(maximum[g], positive[g]);
            }
        }
        if (hasValidData) {
            for (int j = 0; j < groupCount; j++) {
                result = org.jfree.data.Range.combine(result, new org.jfree.data.Range(minimum[j], maximum[j]));
            }
        }
        return result;
    }

    public static java.lang.Number findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        java.lang.Number result = null;
        boolean hasValidData = false;
        double minimum = 0.0;
        int categoryCount = dataset.getColumnCount();
        for (int item = 0; item < categoryCount; item++) {
            double total = 0.0;
            int seriesCount = dataset.getRowCount();
            for (int series = 0; series < seriesCount; series++) {
                java.lang.Number number = dataset.getValue(series, item);
                if (number != null) {
                    hasValidData = true;
                    double value = number.doubleValue();
                    if (value < 0.0) {
                        total = total + value;
                    }
                }
            }
            minimum = java.lang.Math.min(minimum, total);
        }
        if (hasValidData) {
            result = new java.lang.Double(minimum);
        }
        return result;
    }

    public static java.lang.Number findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        java.lang.Number result = null;
        boolean hasValidData = false;
        double maximum = 0.0;
        int categoryCount = dataset.getColumnCount();
        for (int item = 0; item < categoryCount; item++) {
            double total = 0.0;
            int seriesCount = dataset.getRowCount();
            for (int series = 0; series < seriesCount; series++) {
                java.lang.Number number = dataset.getValue(series, item);
                if (number != null) {
                    hasValidData = true;
                    double value = number.doubleValue();
                    if (value > 0.0) {
                        total = total + value;
                    }
                }
            }
            maximum = java.lang.Math.max(maximum, total);
        }
        if (hasValidData) {
            result = new java.lang.Double(maximum);
        }
        return result;
    }

    public static org.jfree.data.Range findStackedRangeBounds(org.jfree.data.xy.TableXYDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(dataset, 0.0);
    }

    public static org.jfree.data.Range findStackedRangeBounds(org.jfree.data.xy.TableXYDataset dataset, double base) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        double minimum = base;
        double maximum = base;
        for (int itemNo = 0; itemNo < dataset.getItemCount(); itemNo++) {
            double positive = base;
            double negative = base;
            int seriesCount = dataset.getSeriesCount();
            for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {
                double y = dataset.getYValue(seriesNo, itemNo);
                if (!java.lang.Double.isNaN(y)) {
                    if (y > 0.0) {
                        positive += y;
                    } else {
                        negative += y;
                    }
                }
            }
            if (positive > maximum) {
                maximum = positive;
            }
            if (negative < minimum) {
                minimum = negative;
            }
        }
        if (minimum <= maximum) {
            return new org.jfree.data.Range(minimum, maximum);
        } else {
            return null;
        }
    }

    public static double calculateStackTotal(org.jfree.data.xy.TableXYDataset dataset, int item) {
        double total = 0.0;
        int seriesCount = dataset.getSeriesCount();
        for (int s = 0; s < seriesCount; s++) {
            double value = dataset.getYValue(s, item);
            if (!java.lang.Double.isNaN(value)) {
                total = total + value;
            }
        }
        return total;
    }

    public static org.jfree.data.Range findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        boolean allItemsNull = true;
        double minimum = 0.0;
        double maximum = 0.0;
        for (int row = 0; row < dataset.getRowCount(); row++) {
            double runningTotal = 0.0;
            for (int column = 0; column <= (dataset.getColumnCount() - 1); column++) {
                java.lang.Number n = dataset.getValue(row, column);
                if (n != null) {
                    allItemsNull = false;
                    double value = n.doubleValue();
                    if (!java.lang.Double.isNaN(value)) {
                        runningTotal = runningTotal + value;
                        minimum = java.lang.Math.min(minimum, runningTotal);
                        maximum = java.lang.Math.max(maximum, runningTotal);
                    }
                }
            }
        }
        if (!allItemsNull) {
            return new org.jfree.data.Range(minimum, maximum);
        } else {
            return null;
        }
    }
}
[519676] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858609603
GPR[SSUN]-1659858609603
-417399974
GPR[ESUN]-1659858609798
GPR[SSUN]-1659858609798
-417399974
GPR[SPVATF]-1659858609993
GPR[EPVATF]-1659858610081
GPR[SPS]-1659858610081
[520495] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:637.
GPR[EPS]-1659858610421
GPR[ESUN]-1659858610421
GPR[SSUN]-1659858610421
-417399974
GPR[SPVATF]-1659858610618
GPR[EPVATF]-1659858610711
GPR[SPS]-1659858610711
[521124] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:636.
GPR[EPS]-1659858611050
GPR[SPVATF]-1659858611050
GPR[EPVATF]-1659858611139
GPR[SPS]-1659858611139
[521556] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:636.
GPR[EPS]-1659858611482
GPR[ESUN]-1659858611482
GPR[SSUN]-1659858611482
-417399974
GPR[SPVATF]-1659858611675
GPR[EPVATF]-1659858611764
GPR[SPS]-1659858611764
[522209] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:635.
GPR[EPS]-1659858612135
GPR[ESUN]-1659858612135
GPR[SSUN]-1659858612135
-417399974
GPR[ESUN]-1659858612329
GPR[SSUN]-1659858612329
-417399974
GPR[SPVATF]-1659858612519
GPR[EPVATF]-1659858612609
GPR[SPS]-1659858612609
[523020] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:620.
GPR[EPS]-1659858612946
GPR[ESUN]-1659858612947
GPR[SSUN]-1659858612947
-417399974
GPR[ESUN]-1659858613139
GPR[SSUN]-1659858613139
-417399974
GPR[SPVATF]-1659858613331
GPR[EPVATF]-1659858613420
GPR[SPS]-1659858613420
[523828] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:519.
GPR[EPS]-1659858613754
GPR[ESUN]-1659858613754
GPR[SSUN]-1659858613754
-417399974
GPR[SPVATF]-1659858614781
GPR[EPVATF]-1659858614867
GPR[SPS]-1659858614867
[525283] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:518.
GPR[EPS]-1659858615209
GPR[SPVATF]-1659858615210
GPR[EPVATF]-1659858615295
GPR[SPS]-1659858615295
[525695] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:518.
GPR[EPS]-1659858615621
GPR[ESUN]-1659858615622
GPR[SSUN]-1659858615622
-417399974
GPR[SPVATF]-1659858615811
GPR[EPVATF]-1659858615896
GPR[SPS]-1659858615896
[526296] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:517.
GPR[EPS]-1659858616222
GPR[ESUN]-1659858616222
GPR[SSUN]-1659858616222
-417399974
GPR[ESUN]-1659858616416
GPR[SSUN]-1659858616416
-417399974
GPR[SPVATF]-1659858616605
GPR[EPVATF]-1659858616693
GPR[SPS]-1659858616693
[527093] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:501.
GPR[EPS]-1659858617019
GPR[ESUN]-1659858617019
GPR[SSUN]-1659858617019
-1771352681
GPR[ESUN]-1659858617142
GPR[SSUN]-1659858617142
-1771352681
GPR[SPVATF]-1659858617256
GPR[EPVATF]-1659858617370
GPR[SPS]-1659858617370
[527688] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeriesCollection:152.
GPR[EPS]-1659858617614
GPR[ESUN]-1659858617614
GPR[SSUN]-1659858617614
-1771352681
GPR[SPVATF]-1659858617733
GPR[EPVATF]-1659858617847
GPR[SPS]-1659858617847
[528137] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeriesCollection:151.
GPR[EPS]-1659858618063
GPR[ESUN]-1659858618063
GPR[SSUN]-1659858618063
-1771352681
GPR[SPVATF]-1659858618181
GPR[EPVATF]-1659858618292
GPR[SPS]-1659858618292
[528579] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeriesCollection:150.
GPR[EPS]-1659858618505
GPR[ESUN]-1659858618505
GPR[SSUN]-1659858618505
-1771352681
GPR[SPVATF]-1659858618625
GPR[EPVATF]-1659858618735
GPR[SPS]-1659858618735
[529034] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeriesCollection:147.
GPR[EPS]-1659858618960
GPR[SPVATF]-1659858618961
GPR[EPVATF]-1659858619070
GPR[SPS]-1659858619070
[529361] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeriesCollection:147.
GPR[EPS]-1659858619287
GPR[ESUN]-1659858619287
GPR[SSUN]-1659858619287
1237707923
GPR[ESUN]-1659858619421
GPR[SSUN]-1659858619421
1237707923
GPR[SPVATF]-1659858619551
GPR[EPVATF]-1659858619829
GPR[SPS]-1659858619829
[530185] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1265.
GPR[EPS]-1659858620111
GPR[SPVATF]-1659858620112
GPR[EPVATF]-1659858620390
GPR[SPS]-1659858620390
[530748] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1265.
GPR[EPS]-1659858620674
GPR[ESUN]-1659858620674
GPR[SSUN]-1659858620674
1237707923
GPR[SPVATF]-1659858620810
GPR[EPVATF]-1659858621094
GPR[SPS]-1659858621094
[531452] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1264.
GPR[EPS]-1659858621378
GPR[ESUN]-1659858621378
GPR[SSUN]-1659858621378
1237707923
GPR[SPVATF]-1659858621514
GPR[EPVATF]-1659858621833
GPR[SPS]-1659858621833
[532192] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1261.
GPR[EPS]-1659858622118
GPR[SPVATF]-1659858622118
GPR[EPVATF]-1659858622411
GPR[SPS]-1659858622411
[532790] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1261.
GPR[EPS]-1659858622716
GPR[ESUN]-1659858622716
GPR[SSUN]-1659858622716
1237707923
GPR[SPVATF]-1659858622856
GPR[EPVATF]-1659858623145
GPR[SPS]-1659858623145
[533506] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1258.
GPR[EPS]-1659858623432
GPR[SPVATF]-1659858623433
GPR[EPVATF]-1659858623720
GPR[SPS]-1659858623720
[534088] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.ValueAxis:1258.
GPR[EPS]-1659858624014
GPR[ESUN]-1659858624014
GPR[SSUN]-1659858624014
-1690918013
GPR[SPVATF]-1659858624246
GPR[EPVATF]-1659858624471
GPR[SPS]-1659858624471
[534944] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1637.
GPR[EPS]-1659858624870
GPR[ESUN]-1659858624870
GPR[SSUN]-1659858624870
-1685022938
GPR[ESUN]-1659858625025
GPR[SSUN]-1659858625025
-1685022938
GPR[SPVATF]-1659858625178
GPR[EPVATF]-1659858625408
GPR[SPS]-1659858625408
[535762] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:2862.
GPR[EPS]-1659858625688
GPR[ESUN]-1659858625688
GPR[SSUN]-1659858625688
-1685022938
GPR[SPVATF]-1659858625836
GPR[EPVATF]-1659858626080
GPR[SPS]-1659858626080
[536471] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:2859.
GPR[EPS]-1659858626397
GPR[SPVATF]-1659858626397
GPR[EPVATF]-1659858626624
GPR[SPS]-1659858626624
[536973] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:2859.
GPR[EPS]-1659858626899
GPR[ESUN]-1659858626899
GPR[SSUN]-1659858626899
-631918205
GPR[ESUN]-1659858627026
GPR[SSUN]-1659858627026
-631918205
GPR[SPVATF]-1659858627151
GPR[EPVATF]-1659858627315
GPR[SPS]-1659858627315
[537638] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeriesCollection:324.
GPR[EPS]-1659858627564
GPR[ESUN]-1659858627564
GPR[SSUN]-1659858627564
-631918205
GPR[SPVATF]-1659858627695
GPR[EPVATF]-1659858627857
GPR[SPS]-1659858627857
[538178] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeriesCollection:323.
GPR[EPS]-1659858628104
GPR[ESUN]-1659858628104
GPR[SSUN]-1659858628104
-631918205
GPR[SPVATF]-1659858628229
GPR[EPVATF]-1659858628392
GPR[SPS]-1659858628392
[538720] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeriesCollection:322.
GPR[EPS]-1659858628646
GPR[ESUN]-1659858628646
GPR[SSUN]-1659858628646
-631918205
GPR[SPVATF]-1659858628776
GPR[EPVATF]-1659858628937
GPR[SPS]-1659858628937
[539260] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeriesCollection:319.
GPR[EPS]-1659858629186
GPR[SPVATF]-1659858629186
GPR[EPVATF]-1659858629349
GPR[SPS]-1659858629349
[539680] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeriesCollection:319.
GPR[EPS]-1659858629606
GPR[ESUN]-1659858629606
GPR[SSUN]-1659858629606
-1685022938
GPR[ESUN]-1659858629764
GPR[SSUN]-1659858629764
-1685022938
GPR[SPVATF]-1659858629916
GPR[EPVATF]-1659858630155
GPR[SPS]-1659858630155
[540532] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:2905.
GPR[EPS]-1659858630458
GPR[ESUN]-1659858630459
GPR[SSUN]-1659858630459
-1685022938
GPR[ESUN]-1659858630609
GPR[SSUN]-1659858630609
-1685022938
GPR[ESUN]-1659858630760
GPR[SSUN]-1659858630760
-1685022938
GPR[SPVATF]-1659858630913
GPR[EPVATF]-1659858631153
GPR[SPS]-1659858631153
[541530] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:2895.
GPR[EPS]-1659858631456
GPR[ESUN]-1659858631456
GPR[SSUN]-1659858631456
1355738515
GPR[SPVATF]-1659858631584
GPR[EPVATF]-1659858631812
GPR[SPS]-1659858631812
[542146] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:764.
GPR[EPS]-1659858632072
GPR[ESUN]-1659858632072
GPR[SSUN]-1659858632072
-1690918013
GPR[SPVATF]-1659858632309
GPR[EPVATF]-1659858632536
GPR[SPS]-1659858632536
GPR[EPS]-1659858633497
GPR[SPVATR]-1659858633498
[543572] INFO TestPatch - Applying patch: org.jfree.chart.plot.XYPlot:1607: PRECONDITION renderer!=null
[543894] INFO TestPatch - Running test suite to check the patch "renderer!=null" is working
GPR[EPVATR]-1659858633969
[544043] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659858633969
[544113] INFO NoPol - --- a/source/org/jfree/chart/plot/XYPlot.java
+++ b/source/org/jfree/chart/plot/XYPlot.java
@@ -1606,3 +1606,5 @@
     public void setRenderer(XYItemRenderer renderer) {
-        setRenderer(0, renderer);
+        if (renderer!=null) {
+            setRenderer(0, renderer);
+        }
     }

Saving patch at /experiment_home///results/Nopol/Chart/4/seed_260/patch_539948_1ts_1659858634039.diff
GPR[ESUN]-1659858634041
GPR[SSUN]-1659858634041
-1771352681
GPR[ESUN]-1659858634164
GPR[SSUN]-1659858634165
-1771352681
GPR[SPVATF]-1659858634285
GPR[EPVATF]-1659858634351
GPR[SPS]-1659858634351
[544634] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeriesCollection:625.
GPR[EPS]-1659858634560
GPR[ESUN]-1659858634560
GPR[SSUN]-1659858634560
-1771352681
GPR[SPVATF]-1659858634681
GPR[EPVATF]-1659858634744
GPR[SPS]-1659858634744
[545027] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeriesCollection:624.
GPR[EPS]-1659858634953
GPR[ESUN]-1659858634953
GPR[SSUN]-1659858634953
-1771352681
GPR[SPVATF]-1659858635073
GPR[EPVATF]-1659858635137
GPR[SPS]-1659858635137
[545421] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeriesCollection:621.
GPR[EPS]-1659858635347
GPR[SPVATF]-1659858635347
GPR[EPVATF]-1659858635409
GPR[SPS]-1659858635409
[545693] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.XYSeriesCollection:621.
GPR[EPS]-1659858635619
GPR[ESUN]-1659858635619
GPR[SSUN]-1659858635620
1776071035
GPR[ESUN]-1659858635718
GPR[SSUN]-1659858635718
68477
GPR[ESUN]-1659858635821
GPR[SSUN]-1659858635821
68477
GPR[ESUN]-1659858635921
GPR[SSUN]-1659858635921
68477
GPR[SPVATF]-1659858636018
GPR[EPVATF]-1659858636195
GPR[SPS]-1659858636195
[546417] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Day extends org.jfree.data.time.RegularTimePeriod implements java.io.Serializable {
    private static final long serialVersionUID = -7082667380758962755L;

    protected static final java.text.DateFormat DATE_FORMAT = new java.text.SimpleDateFormat("yyyy-MM-dd");

    protected static final java.text.DateFormat DATE_FORMAT_SHORT = java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT);

    protected static final java.text.DateFormat DATE_FORMAT_MEDIUM = java.text.DateFormat.getDateInstance(java.text.DateFormat.MEDIUM);

    protected static final java.text.DateFormat DATE_FORMAT_LONG = java.text.DateFormat.getDateInstance(java.text.DateFormat.LONG);

    private org.jfree.data.time.SerialDate serialDate;

    private long firstMillisecond;

    private long lastMillisecond;

    public Day() {
        this(new java.util.Date());
    }

    public Day(int day, int month, int year) {
        this.serialDate = org.jfree.data.time.SerialDate.createInstance(day, month, year);
        peg(java.util.Calendar.getInstance());
    }

    public Day(org.jfree.data.time.SerialDate serialDate) {
        if (serialDate == null) {
            throw new java.lang.IllegalArgumentException("Null 'serialDate' argument.");
        }
        this.serialDate = serialDate;
        peg(java.util.Calendar.getInstance());
    }

    public Day(java.util.Date time) {
        this(time, java.util.TimeZone.getDefault());
    }

    public Day(java.util.Date time, java.util.TimeZone zone) {
        if (time == null) {
            throw new java.lang.IllegalArgumentException("Null 'time' argument.");
        }
        if (zone == null) {
            throw new java.lang.IllegalArgumentException("Null 'zone' argument.");
        }
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(time);
        int d = calendar.get(java.util.Calendar.DAY_OF_MONTH);
        int m = calendar.get(java.util.Calendar.MONTH) + 1;
        int y = calendar.get(java.util.Calendar.YEAR);
        this.serialDate = org.jfree.data.time.SerialDate.createInstance(d, m, y);
        peg(calendar);
    }

    public org.jfree.data.time.SerialDate getSerialDate() {
        return this.serialDate;
    }

    public int getYear() {
        return this.serialDate.getYYYY();
    }

    public int getMonth() {
        return this.serialDate.getMonth();
    }

    public int getDayOfMonth() {
        return this.serialDate.getDayOfMonth();
    }

    public long getFirstMillisecond() {
        return this.firstMillisecond;
    }

    public long getLastMillisecond() {
        return this.lastMillisecond;
    }

    public void peg(java.util.Calendar calendar) {
        this.firstMillisecond = getFirstMillisecond(calendar);
        this.lastMillisecond = getLastMillisecond(calendar);
    }

    public org.jfree.data.time.RegularTimePeriod previous() {
        org.jfree.data.time.Day result;
        int serial = this.serialDate.toSerial();
        if (serial > org.jfree.data.time.SerialDate.SERIAL_LOWER_BOUND) {
            org.jfree.data.time.SerialDate yesterday = org.jfree.data.time.SerialDate.createInstance(serial - 1);
            return new org.jfree.data.time.Day(yesterday);
        } else {
            result = null;
        }
        return result;
    }

    public org.jfree.data.time.RegularTimePeriod next() {
        org.jfree.data.time.Day result;
        int serial = this.serialDate.toSerial();
        if (serial < org.jfree.data.time.SerialDate.SERIAL_UPPER_BOUND) {
            org.jfree.data.time.SerialDate tomorrow = org.jfree.data.time.SerialDate.createInstance(serial + 1);
            return new org.jfree.data.time.Day(tomorrow);
        } else {
            result = null;
        }
        return result;
    }

    public long getSerialIndex() {
        return this.serialDate.toSerial();
    }

    public long getFirstMillisecond(java.util.Calendar calendar) {
        int year = this.serialDate.getYYYY();
        int month = this.serialDate.getMonth();
        int day = this.serialDate.getDayOfMonth();
        calendar.clear();
        calendar.set(year, month - 1, day, 0, 0, 0);
        calendar.set(java.util.Calendar.MILLISECOND, 0);
        return calendar.getTime().getTime();
    }

    public long getLastMillisecond(java.util.Calendar calendar) {
        int year = this.serialDate.getYYYY();
        int month = this.serialDate.getMonth();
        int day = this.serialDate.getDayOfMonth();
        calendar.clear();
        calendar.set(year, month - 1, day, 23, 59, 59);
        calendar.set(java.util.Calendar.MILLISECOND, 999);
        return calendar.getTime().getTime();
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.time.Day)) {
            return false;
        }
        org.jfree.data.time.Day that = ((org.jfree.data.time.Day) (obj));
        if (!this.serialDate.equals(that.getSerialDate())) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        return this.serialDate.hashCode();
    }

    public int compareTo(java.lang.Object o1) {
        int result;
        if (o1 instanceof org.jfree.data.time.Day) {
            org.jfree.data.time.Day d = ((org.jfree.data.time.Day) (o1));
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(489).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("o1",o1);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("org.jfree.data.time.Day.this.firstMillisecond",org.jfree.data.time.Day.this.firstMillisecond);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("d",d);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("org.jfree.data.time.Day.DATE_FORMAT_SHORT",org.jfree.data.time.Day.DATE_FORMAT_SHORT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("org.jfree.data.time.Day.DATE_FORMAT_LONG",org.jfree.data.time.Day.DATE_FORMAT_LONG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("org.jfree.data.time.Day.this.serialDate",org.jfree.data.time.Day.this.serialDate);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("org.jfree.data.time.Day.DATE_FORMAT_MEDIUM",org.jfree.data.time.Day.DATE_FORMAT_MEDIUM);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("org.jfree.data.time.Day.DATE_FORMAT",org.jfree.data.time.Day.DATE_FORMAT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectInput("org.jfree.data.time.Day.this.lastMillisecond",org.jfree.data.time.Day.this.lastMillisecond);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(489).collectionEnds();
            }
            if (runtimeAngelicValue)
                result = -d.getSerialDate().compare(this.serialDate);

        } else if (o1 instanceof org.jfree.data.time.RegularTimePeriod) {
            result = 0;
        } else {
            result = 1;
        }
        return result;
    }

    public java.lang.String toString() {
        return this.serialDate.toString();
    }

    public static org.jfree.data.time.Day parseDay(java.lang.String s) {
        try {
            return new org.jfree.data.time.Day(org.jfree.data.time.Day.DATE_FORMAT.parse(s));
        } catch (java.text.ParseException e1) {
            try {
                return new org.jfree.data.time.Day(org.jfree.data.time.Day.DATE_FORMAT_SHORT.parse(s));
            } catch (java.text.ParseException e2) {
            }
        }
        return null;
    }
}
[546417] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858636343
GPR[SSUN]-1659858636343
68477
GPR[ESUN]-1659858636442
GPR[SSUN]-1659858636442
68477
GPR[SPVATF]-1659858636540
GPR[EPVATF]-1659858636712
GPR[SPS]-1659858636712
[546912] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Day extends org.jfree.data.time.RegularTimePeriod implements java.io.Serializable {
    private static final long serialVersionUID = -7082667380758962755L;

    protected static final java.text.DateFormat DATE_FORMAT = new java.text.SimpleDateFormat("yyyy-MM-dd");

    protected static final java.text.DateFormat DATE_FORMAT_SHORT = java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT);

    protected static final java.text.DateFormat DATE_FORMAT_MEDIUM = java.text.DateFormat.getDateInstance(java.text.DateFormat.MEDIUM);

    protected static final java.text.DateFormat DATE_FORMAT_LONG = java.text.DateFormat.getDateInstance(java.text.DateFormat.LONG);

    private org.jfree.data.time.SerialDate serialDate;

    private long firstMillisecond;

    private long lastMillisecond;

    public Day() {
        this(new java.util.Date());
    }

    public Day(int day, int month, int year) {
        this.serialDate = org.jfree.data.time.SerialDate.createInstance(day, month, year);
        peg(java.util.Calendar.getInstance());
    }

    public Day(org.jfree.data.time.SerialDate serialDate) {
        if (serialDate == null) {
            throw new java.lang.IllegalArgumentException("Null 'serialDate' argument.");
        }
        this.serialDate = serialDate;
        peg(java.util.Calendar.getInstance());
    }

    public Day(java.util.Date time) {
        this(time, java.util.TimeZone.getDefault());
    }

    public Day(java.util.Date time, java.util.TimeZone zone) {
        if (time == null) {
            throw new java.lang.IllegalArgumentException("Null 'time' argument.");
        }
        if (zone == null) {
            throw new java.lang.IllegalArgumentException("Null 'zone' argument.");
        }
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(time);
        int d = calendar.get(java.util.Calendar.DAY_OF_MONTH);
        int m = calendar.get(java.util.Calendar.MONTH) + 1;
        int y = calendar.get(java.util.Calendar.YEAR);
        this.serialDate = org.jfree.data.time.SerialDate.createInstance(d, m, y);
        peg(calendar);
    }

    public org.jfree.data.time.SerialDate getSerialDate() {
        return this.serialDate;
    }

    public int getYear() {
        return this.serialDate.getYYYY();
    }

    public int getMonth() {
        return this.serialDate.getMonth();
    }

    public int getDayOfMonth() {
        return this.serialDate.getDayOfMonth();
    }

    public long getFirstMillisecond() {
        return this.firstMillisecond;
    }

    public long getLastMillisecond() {
        return this.lastMillisecond;
    }

    public void peg(java.util.Calendar calendar) {
        this.firstMillisecond = getFirstMillisecond(calendar);
        this.lastMillisecond = getLastMillisecond(calendar);
    }

    public org.jfree.data.time.RegularTimePeriod previous() {
        org.jfree.data.time.Day result;
        int serial = this.serialDate.toSerial();
        if (serial > org.jfree.data.time.SerialDate.SERIAL_LOWER_BOUND) {
            org.jfree.data.time.SerialDate yesterday = org.jfree.data.time.SerialDate.createInstance(serial - 1);
            return new org.jfree.data.time.Day(yesterday);
        } else {
            result = null;
        }
        return result;
    }

    public org.jfree.data.time.RegularTimePeriod next() {
        org.jfree.data.time.Day result;
        int serial = this.serialDate.toSerial();
        if (serial < org.jfree.data.time.SerialDate.SERIAL_UPPER_BOUND) {
            org.jfree.data.time.SerialDate tomorrow = org.jfree.data.time.SerialDate.createInstance(serial + 1);
            return new org.jfree.data.time.Day(tomorrow);
        } else {
            result = null;
        }
        return result;
    }

    public long getSerialIndex() {
        return this.serialDate.toSerial();
    }

    public long getFirstMillisecond(java.util.Calendar calendar) {
        int year = this.serialDate.getYYYY();
        int month = this.serialDate.getMonth();
        int day = this.serialDate.getDayOfMonth();
        calendar.clear();
        calendar.set(year, month - 1, day, 0, 0, 0);
        calendar.set(java.util.Calendar.MILLISECOND, 0);
        return calendar.getTime().getTime();
    }

    public long getLastMillisecond(java.util.Calendar calendar) {
        int year = this.serialDate.getYYYY();
        int month = this.serialDate.getMonth();
        int day = this.serialDate.getDayOfMonth();
        calendar.clear();
        calendar.set(year, month - 1, day, 23, 59, 59);
        calendar.set(java.util.Calendar.MILLISECOND, 999);
        return calendar.getTime().getTime();
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.time.Day)) {
            return false;
        }
        org.jfree.data.time.Day that = ((org.jfree.data.time.Day) (obj));
        if (!this.serialDate.equals(that.getSerialDate())) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        return this.serialDate.hashCode();
    }

    public int compareTo(java.lang.Object o1) {
        int result;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(490).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(490).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(490).collectInput("o1",o1);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(490).collectInput("org.jfree.data.time.Day.this.firstMillisecond",org.jfree.data.time.Day.this.firstMillisecond);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(490).collectInput("org.jfree.data.time.Day.DATE_FORMAT_SHORT",org.jfree.data.time.Day.DATE_FORMAT_SHORT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(490).collectInput("org.jfree.data.time.Day.DATE_FORMAT_LONG",org.jfree.data.time.Day.DATE_FORMAT_LONG);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(490).collectInput("org.jfree.data.time.Day.this.serialDate",org.jfree.data.time.Day.this.serialDate);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(490).collectInput("org.jfree.data.time.Day.DATE_FORMAT_MEDIUM",org.jfree.data.time.Day.DATE_FORMAT_MEDIUM);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(490).collectInput("org.jfree.data.time.Day.DATE_FORMAT",org.jfree.data.time.Day.DATE_FORMAT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(490).collectInput("org.jfree.data.time.Day.this.lastMillisecond",org.jfree.data.time.Day.this.lastMillisecond);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(490).collectInput("o1 instanceof org.jfree.data.time.Day",o1 instanceof org.jfree.data.time.Day);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(490).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(490).collectionEnds();
        }
        if (runtimeAngelicValue) if (o1 instanceof org.jfree.data.time.Day) {
            org.jfree.data.time.Day d = ((org.jfree.data.time.Day) (o1));
            result = -d.getSerialDate().compare(this.serialDate);
        } else if (o1 instanceof org.jfree.data.time.RegularTimePeriod) {
            result = 0;
        } else {
            result = 1;
        }
        return result;
    }

    public java.lang.String toString() {
        return this.serialDate.toString();
    }

    public static org.jfree.data.time.Day parseDay(java.lang.String s) {
        try {
            return new org.jfree.data.time.Day(org.jfree.data.time.Day.DATE_FORMAT.parse(s));
        } catch (java.text.ParseException e1) {
            try {
                return new org.jfree.data.time.Day(org.jfree.data.time.Day.DATE_FORMAT_SHORT.parse(s));
            } catch (java.text.ParseException e2) {
            }
        }
        return null;
    }
}
[546912] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659858636879
GPR[EPVATF]-1659858637053
GPR[SPS]-1659858637053
[547337] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Day:408.
GPR[EPS]-1659858637263
GPR[ESUN]-1659858637263
GPR[SSUN]-1659858637263
1355738515
GPR[SPVATF]-1659858637394
GPR[EPVATF]-1659858637628
GPR[SPS]-1659858637628
[547957] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:674.
GPR[EPS]-1659858637883
GPR[ESUN]-1659858637883
GPR[SSUN]-1659858637883
68477
GPR[SPVATF]-1659858637983
GPR[EPVATF]-1659858638150
GPR[SPS]-1659858638150
[548346] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Day extends org.jfree.data.time.RegularTimePeriod implements java.io.Serializable {
    private static final long serialVersionUID = -7082667380758962755L;

    protected static final java.text.DateFormat DATE_FORMAT = new java.text.SimpleDateFormat("yyyy-MM-dd");

    protected static final java.text.DateFormat DATE_FORMAT_SHORT = java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT);

    protected static final java.text.DateFormat DATE_FORMAT_MEDIUM = java.text.DateFormat.getDateInstance(java.text.DateFormat.MEDIUM);

    protected static final java.text.DateFormat DATE_FORMAT_LONG = java.text.DateFormat.getDateInstance(java.text.DateFormat.LONG);

    private org.jfree.data.time.SerialDate serialDate;

    private long firstMillisecond;

    private long lastMillisecond;

    public Day() {
        this(new java.util.Date());
    }

    public Day(int day, int month, int year) {
        this.serialDate = org.jfree.data.time.SerialDate.createInstance(day, month, year);
        peg(java.util.Calendar.getInstance());
    }

    public Day(org.jfree.data.time.SerialDate serialDate) {
        if (serialDate == null) {
            throw new java.lang.IllegalArgumentException("Null 'serialDate' argument.");
        }
        this.serialDate = serialDate;
        peg(java.util.Calendar.getInstance());
    }

    public Day(java.util.Date time) {
        this(time, java.util.TimeZone.getDefault());
    }

    public Day(java.util.Date time, java.util.TimeZone zone) {
        if (time == null) {
            throw new java.lang.IllegalArgumentException("Null 'time' argument.");
        }
        if (zone == null) {
            throw new java.lang.IllegalArgumentException("Null 'zone' argument.");
        }
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(time);
        int d = calendar.get(java.util.Calendar.DAY_OF_MONTH);
        int m = calendar.get(java.util.Calendar.MONTH) + 1;
        int y = calendar.get(java.util.Calendar.YEAR);
        this.serialDate = org.jfree.data.time.SerialDate.createInstance(d, m, y);
        peg(calendar);
    }

    public org.jfree.data.time.SerialDate getSerialDate() {
        return this.serialDate;
    }

    public int getYear() {
        return this.serialDate.getYYYY();
    }

    public int getMonth() {
        return this.serialDate.getMonth();
    }

    public int getDayOfMonth() {
        return this.serialDate.getDayOfMonth();
    }

    public long getFirstMillisecond() {
        return this.firstMillisecond;
    }

    public long getLastMillisecond() {
        return this.lastMillisecond;
    }

    public void peg(java.util.Calendar calendar) {
        this.firstMillisecond = getFirstMillisecond(calendar);
        this.lastMillisecond = getLastMillisecond(calendar);
    }

    public org.jfree.data.time.RegularTimePeriod previous() {
        org.jfree.data.time.Day result;
        int serial = this.serialDate.toSerial();
        if (serial > org.jfree.data.time.SerialDate.SERIAL_LOWER_BOUND) {
            org.jfree.data.time.SerialDate yesterday = org.jfree.data.time.SerialDate.createInstance(serial - 1);
            return new org.jfree.data.time.Day(yesterday);
        } else {
            result = null;
        }
        return result;
    }

    public org.jfree.data.time.RegularTimePeriod next() {
        org.jfree.data.time.Day result;
        int serial = this.serialDate.toSerial();
        if (serial < org.jfree.data.time.SerialDate.SERIAL_UPPER_BOUND) {
            org.jfree.data.time.SerialDate tomorrow = org.jfree.data.time.SerialDate.createInstance(serial + 1);
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(493).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(493).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(493).collectInput("org.jfree.data.time.Day.this.firstMillisecond",org.jfree.data.time.Day.this.firstMillisecond);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(493).collectInput("org.jfree.data.time.Day.DATE_FORMAT_SHORT",org.jfree.data.time.Day.DATE_FORMAT_SHORT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(493).collectInput("serial",serial);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(493).collectInput("org.jfree.data.time.Day.DATE_FORMAT_LONG",org.jfree.data.time.Day.DATE_FORMAT_LONG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(493).collectInput("tomorrow",tomorrow);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(493).collectInput("org.jfree.data.time.Day.this.serialDate",org.jfree.data.time.Day.this.serialDate);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(493).collectInput("org.jfree.data.time.Day.DATE_FORMAT_MEDIUM",org.jfree.data.time.Day.DATE_FORMAT_MEDIUM);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(493).collectInput("org.jfree.data.time.Day.DATE_FORMAT",org.jfree.data.time.Day.DATE_FORMAT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(493).collectInput("org.jfree.data.time.Day.this.lastMillisecond",org.jfree.data.time.Day.this.lastMillisecond);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(493).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(493).collectionEnds();
            }
            if (runtimeAngelicValue)
                return new org.jfree.data.time.Day(tomorrow);

        } else {
            result = null;
        }
        return result;
    }

    public long getSerialIndex() {
        return this.serialDate.toSerial();
    }

    public long getFirstMillisecond(java.util.Calendar calendar) {
        int year = this.serialDate.getYYYY();
        int month = this.serialDate.getMonth();
        int day = this.serialDate.getDayOfMonth();
        calendar.clear();
        calendar.set(year, month - 1, day, 0, 0, 0);
        calendar.set(java.util.Calendar.MILLISECOND, 0);
        return calendar.getTime().getTime();
    }

    public long getLastMillisecond(java.util.Calendar calendar) {
        int year = this.serialDate.getYYYY();
        int month = this.serialDate.getMonth();
        int day = this.serialDate.getDayOfMonth();
        calendar.clear();
        calendar.set(year, month - 1, day, 23, 59, 59);
        calendar.set(java.util.Calendar.MILLISECOND, 999);
        return calendar.getTime().getTime();
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.time.Day)) {
            return false;
        }
        org.jfree.data.time.Day that = ((org.jfree.data.time.Day) (obj));
        if (!this.serialDate.equals(that.getSerialDate())) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        return this.serialDate.hashCode();
    }

    public int compareTo(java.lang.Object o1) {
        int result;
        if (o1 instanceof org.jfree.data.time.Day) {
            org.jfree.data.time.Day d = ((org.jfree.data.time.Day) (o1));
            result = -d.getSerialDate().compare(this.serialDate);
        } else if (o1 instanceof org.jfree.data.time.RegularTimePeriod) {
            result = 0;
        } else {
            result = 1;
        }
        return result;
    }

    public java.lang.String toString() {
        return this.serialDate.toString();
    }

    public static org.jfree.data.time.Day parseDay(java.lang.String s) {
        try {
            return new org.jfree.data.time.Day(org.jfree.data.time.Day.DATE_FORMAT.parse(s));
        } catch (java.text.ParseException e1) {
            try {
                return new org.jfree.data.time.Day(org.jfree.data.time.Day.DATE_FORMAT_SHORT.parse(s));
            } catch (java.text.ParseException e2) {
            }
        }
        return null;
    }
}
[548346] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858638272
GPR[SSUN]-1659858638272
68477
GPR[ESUN]-1659858638373
GPR[SSUN]-1659858638373
-1690918013
GPR[SPVATF]-1659858638612
GPR[EPVATF]-1659858638841
GPR[SPS]-1659858638841
[549326] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:5311.
GPR[EPS]-1659858639252
GPR[ESUN]-1659858639252
GPR[SSUN]-1659858639252
1394353123
GPR[ESUN]-1659858639357
GPR[SSUN]-1659858639357
1256214381
GPR[SPVATF]-1659858639655
GPR[EPVATF]-1659858639823
GPR[SPS]-1659858639824
[550349] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:337.
GPR[EPS]-1659858640275
GPR[ESUN]-1659858640275
GPR[SSUN]-1659858640275
68477
GPR[ESUN]-1659858640374
GPR[SSUN]-1659858640374
1256214381
GPR[ESUN]-1659858640674
GPR[SSUN]-1659858640674
1256214381
GPR[SPVATF]-1659858640967
GPR[EPVATF]-1659858641134
GPR[SPS]-1659858641134
[551661] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:344.
GPR[EPS]-1659858641587
GPR[ESUN]-1659858641587
GPR[SSUN]-1659858641587
1256214381
GPR[ESUN]-1659858641883
GPR[SSUN]-1659858641883
1256214381
GPR[SPVATF]-1659858642178
GPR[EPVATF]-1659858642345
GPR[SPS]-1659858642345
[552906] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:339.
GPR[EPS]-1659858642832
GPR[SPVATF]-1659858642832
GPR[EPVATF]-1659858642997
GPR[SPS]-1659858642997
[553516] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:339.
GPR[EPS]-1659858643443
GPR[ESUN]-1659858643443
GPR[SSUN]-1659858643443
1256214381
GPR[SPVATF]-1659858643743
GPR[EPVATF]-1659858643912
GPR[SPS]-1659858643912
[554430] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:336.
GPR[EPS]-1659858644356
GPR[SPVATF]-1659858644356
GPR[EPVATF]-1659858644525
GPR[SPS]-1659858644525
[555044] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:336.
GPR[EPS]-1659858644970
GPR[ESUN]-1659858644970
GPR[SSUN]-1659858644970
1256214381
GPR[SPVATF]-1659858645267
GPR[EPVATF]-1659858645436
GPR[SPS]-1659858645436
[555955] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:335.
GPR[EPS]-1659858645881
GPR[ESUN]-1659858645881
GPR[SSUN]-1659858645881
1256214381
GPR[SPVATF]-1659858646179
GPR[EPVATF]-1659858646348
GPR[SPS]-1659858646348
[556891] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:334.
GPR[EPS]-1659858646817
GPR[ESUN]-1659858646818
GPR[SSUN]-1659858646818
1256214381
GPR[ESUN]-1659858647120
GPR[SSUN]-1659858647120
1508764236
GPR[ESUN]-1659858647228
GPR[SSUN]-1659858647228
1508764236
GPR[SPVATF]-1659858647332
GPR[EPVATF]-1659858647397
GPR[SPS]-1659858647397
[557661] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.IntervalXYDelegate:229.
GPR[EPS]-1659858647587
GPR[ESUN]-1659858647587
GPR[SSUN]-1659858647587
1508764236
GPR[SPVATF]-1659858647694
GPR[EPVATF]-1659858647758
GPR[SPS]-1659858647758
[558020] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.IntervalXYDelegate:228.
GPR[EPS]-1659858647946
GPR[ESUN]-1659858647946
GPR[SSUN]-1659858647946
1508764236
GPR[SPVATF]-1659858648052
GPR[EPVATF]-1659858648173
GPR[SPS]-1659858648173
[558437] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.IntervalXYDelegate:225.
GPR[EPS]-1659858648363
GPR[SPVATF]-1659858648364
GPR[EPVATF]-1659858648427
GPR[SPS]-1659858648427
[558688] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.xy.IntervalXYDelegate:225.
GPR[EPS]-1659858648614
GPR[ESUN]-1659858648614
GPR[SSUN]-1659858648614
-1690918013
GPR[SPVATF]-1659858648847
GPR[EPVATF]-1659858649081
GPR[SPS]-1659858649081
[559563] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1644.
GPR[EPS]-1659858649489
GPR[ESUN]-1659858649489
GPR[SSUN]-1659858649489
-1690918013
GPR[SPVATF]-1659858649723
GPR[EPVATF]-1659858649956
GPR[SPS]-1659858649956
[560442] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1640.
GPR[EPS]-1659858650368
GPR[SPVATF]-1659858650368
GPR[EPVATF]-1659858650601
GPR[SPS]-1659858650601
[561084] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1640.
GPR[EPS]-1659858651010
GPR[ESUN]-1659858651010
GPR[SSUN]-1659858651010
-1690918013
GPR[SPVATF]-1659858651265
GPR[EPVATF]-1659858651498
GPR[SPS]-1659858651498
GPR[EPS]-1659858652395
GPR[SPVATR]-1659858652395
[562469] INFO TestPatch - Applying patch: org.jfree.chart.plot.XYPlot:1639: PRECONDITION renderer!=null
[562787] INFO TestPatch - Running test suite to check the patch "renderer!=null" is working
GPR[EPVATR]-1659858652916
[562990] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659858652916
[563031] INFO NoPol - --- a/source/org/jfree/chart/plot/XYPlot.java
+++ b/source/org/jfree/chart/plot/XYPlot.java
@@ -1638,3 +1638,5 @@
         }
-        this.renderers.set(index, renderer);
+        if (renderer!=null) {
+            this.renderers.set(index, renderer);
+        }
         if (renderer != null) {

Saving patch at /experiment_home///results/Nopol/Chart/4/seed_260/patch_558866_2ts_1659858652957.diff
GPR[ESUN]-1659858652957
GPR[SSUN]-1659858652958
-1690918013
GPR[SPVATF]-1659858653192
GPR[EPVATF]-1659858653424
GPR[SPS]-1659858653424
[563910] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1636.
GPR[EPS]-1659858653836
GPR[SPVATF]-1659858653836
GPR[EPVATF]-1659858654070
GPR[SPS]-1659858654070
[564554] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1636.
GPR[EPS]-1659858654480
GPR[ESUN]-1659858654480
GPR[SSUN]-1659858654481
-1690918013
GPR[ESUN]-1659858654718
GPR[SSUN]-1659858654718
-1690918013
GPR[SPVATF]-1659858654952
GPR[EPVATF]-1659858655191
GPR[SPS]-1659858655191
GPR[EPS]-1659858656079
GPR[SPVATR]-1659858656079
[566153] INFO TestPatch - Applying patch: org.jfree.chart.plot.XYPlot:1620: PRECONDITION renderer!=null
[566497] INFO TestPatch - Running test suite to check the patch "renderer!=null" is working
GPR[EPVATR]-1659858656623
[566697] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659858656623
[566746] INFO NoPol - --- a/source/org/jfree/chart/plot/XYPlot.java
+++ b/source/org/jfree/chart/plot/XYPlot.java
@@ -1619,3 +1619,5 @@
     public void setRenderer(int index, XYItemRenderer renderer) {
-        setRenderer(index, renderer, true);
+        if (renderer!=null) {
+            setRenderer(index, renderer, true);
+        }
     }

Saving patch at /experiment_home///results/Nopol/Chart/4/seed_260/patch_562581_3ts_1659858656672.diff
GPR[ESUN]-1659858656673
GPR[SSUN]-1659858656673
1355738515
GPR[SPVATF]-1659858656801
GPR[EPVATF]-1659858657039
GPR[SPS]-1659858657039
[567378] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:776.
GPR[EPS]-1659858657304
GPR[ESUN]-1659858657304
GPR[SSUN]-1659858657304
1355738515
GPR[SPVATF]-1659858657438
GPR[EPVATF]-1659858657675
GPR[SPS]-1659858657675
[568006] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:747.
GPR[EPS]-1659858657932
GPR[SPVATF]-1659858657933
GPR[EPVATF]-1659858658166
GPR[SPS]-1659858658166
[568498] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:747.
GPR[EPS]-1659858658424
GPR[ESUN]-1659858658424
GPR[SSUN]-1659858658424
1355738515
GPR[ESUN]-1659858658555
GPR[SSUN]-1659858658555
1355738515
GPR[ESUN]-1659858658686
GPR[SSUN]-1659858658686
1355738515
GPR[ESUN]-1659858658809
GPR[SSUN]-1659858658809
1355738515
GPR[SPVATF]-1659858658934
GPR[EPVATF]-1659858659169
GPR[SPS]-1659858659169
[569518] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:739.
GPR[EPS]-1659858659444
GPR[SPVATF]-1659858659444
GPR[EPVATF]-1659858659682
GPR[SPS]-1659858659682
[570005] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:739.
GPR[EPS]-1659858659932
GPR[ESUN]-1659858659932
GPR[SSUN]-1659858659932
1087677550
GPR[ESUN]-1659858660118
GPR[SSUN]-1659858660118
1087677550
GPR[SPVATF]-1659858660296
GPR[EPVATF]-1659858660527
GPR[SPS]-1659858660527
[570932] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.PiePlot:1605.
GPR[EPS]-1659858660858
GPR[ESUN]-1659858660859
GPR[SSUN]-1659858660859
1087677550
GPR[SPVATF]-1659858661039
GPR[EPVATF]-1659858661207
GPR[SPS]-1659858661207
[571612] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.PiePlot:1604.
GPR[EPS]-1659858661538
GPR[ESUN]-1659858661539
GPR[SSUN]-1659858661539
1087677550
GPR[ESUN]-1659858661719
GPR[SSUN]-1659858661719
1087677550
GPR[SPVATF]-1659858661896
GPR[EPVATF]-1659858662065
GPR[SPS]-1659858662065
[572462] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.PiePlot:2103.
GPR[EPS]-1659858662388
GPR[ESUN]-1659858662389
GPR[SSUN]-1659858662389
1087677550
GPR[SPVATF]-1659858662567
GPR[EPVATF]-1659858662747
GPR[SPS]-1659858662747
[573146] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.PiePlot:2102.
GPR[EPS]-1659858663072
GPR[ESUN]-1659858663072
GPR[SSUN]-1659858663072
990598207
GPR[ESUN]-1659858663177
GPR[SSUN]-1659858663177
990598207
GPR[SPVATF]-1659858663282
GPR[EPVATF]-1659858663454
GPR[SPS]-1659858663454
[573742] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.PaintMap:134.
GPR[EPS]-1659858663668
GPR[ESUN]-1659858663668
GPR[SSUN]-1659858663668
1087677550
GPR[ESUN]-1659858663846
GPR[SSUN]-1659858663846
1087677550
GPR[SPVATF]-1659858664018
GPR[EPVATF]-1659858664191
GPR[SPS]-1659858664191
[574594] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.PiePlot:990.
GPR[EPS]-1659858664521
GPR[SPVATF]-1659858664521
GPR[EPVATF]-1659858664694
GPR[SPS]-1659858664694
[575099] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.PiePlot:990.
GPR[EPS]-1659858665025
GPR[ESUN]-1659858665025
GPR[SSUN]-1659858665025
1087677550
GPR[SPVATF]-1659858665203
GPR[EPVATF]-1659858665373
GPR[SPS]-1659858665373
[575806] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.PiePlot:989.
GPR[EPS]-1659858665732
GPR[ESUN]-1659858665732
GPR[SSUN]-1659858665732
1848383305
GPR[ESUN]-1659858666017
GPR[SSUN]-1659858666018
1848383305
GPR[SPVATF]-1659858666323
GPR[EPVATF]-1659858666495
GPR[SPS]-1659858666495
[577007] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1300.
GPR[EPS]-1659858666933
GPR[SPVATF]-1659858666933
GPR[EPVATF]-1659858667104
GPR[SPS]-1659858667104
[577680] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1300.
GPR[EPS]-1659858667606
GPR[ESUN]-1659858667606
GPR[SSUN]-1659858667606
1848383305
GPR[SPVATF]-1659858667890
GPR[EPVATF]-1659858668063
GPR[SPS]-1659858668063
[578573] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1297.
GPR[EPS]-1659858668499
GPR[SPVATF]-1659858668499
GPR[EPVATF]-1659858668673
GPR[SPS]-1659858668673
[579178] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1297.
GPR[EPS]-1659858669104
GPR[ESUN]-1659858669104
GPR[SSUN]-1659858669104
1848383305
GPR[SPVATF]-1659858669390
GPR[EPVATF]-1659858669567
GPR[SPS]-1659858669567
[580082] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1295.
GPR[EPS]-1659858670008
GPR[ESUN]-1659858670008
GPR[SSUN]-1659858670008
1848383305
GPR[SPVATF]-1659858670293
GPR[EPVATF]-1659858670468
GPR[SPS]-1659858670468
[580976] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1294.
GPR[EPS]-1659858670902
GPR[SPVATF]-1659858670902
GPR[EPVATF]-1659858671075
GPR[SPS]-1659858671075
[581582] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1294.
GPR[EPS]-1659858671508
GPR[ESUN]-1659858671508
GPR[SSUN]-1659858671508
1848383305
GPR[SPVATF]-1659858671793
GPR[EPVATF]-1659858671966
GPR[SPS]-1659858671966
[582471] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1290.
GPR[EPS]-1659858672397
GPR[ESUN]-1659858672397
GPR[SSUN]-1659858672397
1848383305
GPR[SPVATF]-1659858672754
GPR[EPVATF]-1659858672927
GPR[SPS]-1659858672927
[583430] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1289.
GPR[EPS]-1659858673356
GPR[ESUN]-1659858673356
GPR[SSUN]-1659858673356
1848383305
GPR[SPVATF]-1659858673644
GPR[EPVATF]-1659858673817
GPR[SPS]-1659858673817
[584323] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1288.
GPR[EPS]-1659858674249
GPR[ESUN]-1659858674249
GPR[SSUN]-1659858674249
1848383305
GPR[SPVATF]-1659858674541
GPR[EPVATF]-1659858674712
GPR[SPS]-1659858674712
[585216] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1252.
GPR[EPS]-1659858675142
GPR[ESUN]-1659858675142
GPR[SSUN]-1659858675142
-1566484948
GPR[ESUN]-1659858675279
GPR[SSUN]-1659858675279
-1566484948
GPR[ESUN]-1659858675417
GPR[SSUN]-1659858675417
-1566484948
GPR[SPVATF]-1659858675548
GPR[EPVATF]-1659858675849
GPR[SPS]-1659858675849
[586214] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.LegendTitle:374.
GPR[EPS]-1659858676140
GPR[ESUN]-1659858676140
GPR[SSUN]-1659858676140
-1566484948
GPR[SPVATF]-1659858676274
GPR[EPVATF]-1659858676574
GPR[SPS]-1659858676574
[586919] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.LegendTitle:373.
GPR[EPS]-1659858676845
GPR[ESUN]-1659858676845
GPR[SSUN]-1659858676845
-1566484948
GPR[SPVATF]-1659858676980
GPR[EPVATF]-1659858677282
GPR[SPS]-1659858677282
[587626] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.LegendTitle:370.
GPR[EPS]-1659858677552
GPR[SPVATF]-1659858677552
GPR[EPVATF]-1659858677853
GPR[SPS]-1659858677853
[588200] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.LegendTitle:370.
GPR[EPS]-1659858678126
GPR[ESUN]-1659858678126
GPR[SSUN]-1659858678126
-1566484948
GPR[ESUN]-1659858678265
GPR[SSUN]-1659858678265
-112801879
GPR[ESUN]-1659858678486
GPR[SSUN]-1659858678486
-112801879
GPR[SPVATF]-1659858678785
GPR[EPVATF]-1659858679083
GPR[SPS]-1659858679083
[589534] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.JFreeChart:738.
GPR[EPS]-1659858679460
GPR[SPVATF]-1659858679460
GPR[EPVATF]-1659858679779
GPR[SPS]-1659858679779
[590231] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.JFreeChart:738.
GPR[EPS]-1659858680157
GPR[ESUN]-1659858680157
GPR[SSUN]-1659858680157
1848383305
GPR[ESUN]-1659858680447
GPR[SSUN]-1659858680448
1848383305
GPR[ESUN]-1659858680734
GPR[SSUN]-1659858680734
1848383305
GPR[SPVATF]-1659858681017
GPR[EPVATF]-1659858681318
GPR[SPS]-1659858681318
[591848] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1175.
GPR[EPS]-1659858681774
GPR[SPVATF]-1659858681775
GPR[EPVATF]-1659858682076
GPR[SPS]-1659858682076
[592619] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1175.
GPR[EPS]-1659858682545
GPR[ESUN]-1659858682545
GPR[SSUN]-1659858682545
1848383305
GPR[SPVATF]-1659858682835
GPR[EPVATF]-1659858683137
GPR[SPS]-1659858683137
[593737] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1174.
GPR[EPS]-1659858683663
GPR[ESUN]-1659858683663
GPR[SSUN]-1659858683663
1848383305
GPR[SPVATF]-1659858683958
GPR[EPVATF]-1659858684259
GPR[SPS]-1659858684259
[594790] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1173.
GPR[EPS]-1659858684716
GPR[ESUN]-1659858684716
GPR[SSUN]-1659858684716
1848383305
GPR[SPVATF]-1659858685005
GPR[EPVATF]-1659858685315
GPR[SPS]-1659858685315
[595845] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1171.
GPR[EPS]-1659858685771
GPR[ESUN]-1659858685771
GPR[SSUN]-1659858685771
1848383305
GPR[SPVATF]-1659858686067
GPR[EPVATF]-1659858686371
GPR[SPS]-1659858686371
[596906] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1170.
GPR[EPS]-1659858686832
GPR[SPVATF]-1659858686833
GPR[EPVATF]-1659858687137
GPR[SPS]-1659858687137
[597668] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1170.
GPR[EPS]-1659858687594
GPR[ESUN]-1659858687595
GPR[SSUN]-1659858687595
1848383305
GPR[ESUN]-1659858687886
GPR[SSUN]-1659858687886
1848383305
GPR[SPVATF]-1659858688179
GPR[EPVATF]-1659858688484
GPR[SPS]-1659858688484
[599071] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1168.
GPR[EPS]-1659858688997
GPR[SPVATF]-1659858688997
GPR[EPVATF]-1659858689306
GPR[SPS]-1659858689306
[599842] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1168.
GPR[EPS]-1659858689768
GPR[ESUN]-1659858689768
GPR[SSUN]-1659858689768
1848383305
GPR[SPVATF]-1659858690063
GPR[EPVATF]-1659858690371
GPR[SPS]-1659858690371
[600912] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1163.
GPR[EPS]-1659858690838
GPR[SPVATF]-1659858690838
GPR[EPVATF]-1659858691171
GPR[SPS]-1659858691171
[601703] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1163.
GPR[EPS]-1659858691629
GPR[ESUN]-1659858691629
GPR[SSUN]-1659858691629
1848383305
GPR[SPVATF]-1659858691920
GPR[EPVATF]-1659858692232
GPR[SPS]-1659858692232
[602779] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1145.
GPR[EPS]-1659858692705
GPR[ESUN]-1659858692705
GPR[SSUN]-1659858692705
-1566484948
GPR[ESUN]-1659858692840
GPR[SSUN]-1659858692840
-1566484948
GPR[SPVATF]-1659858692971
GPR[EPVATF]-1659858693287
GPR[SPS]-1659858693287
[603645] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.LegendTitle:352.
GPR[EPS]-1659858693571
GPR[ESUN]-1659858693571
GPR[SSUN]-1659858693571
-1566484948
GPR[SPVATF]-1659858693706
GPR[EPVATF]-1659858694016
GPR[SPS]-1659858694016
[604367] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.LegendTitle:351.
GPR[EPS]-1659858694294
GPR[ESUN]-1659858694294
GPR[SSUN]-1659858694294
-1566484948
GPR[SPVATF]-1659858694428
GPR[EPVATF]-1659858694801
GPR[SPS]-1659858694801
[605151] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.LegendTitle:348.
GPR[EPS]-1659858695077
GPR[SPVATF]-1659858695078
GPR[EPVATF]-1659858695383
GPR[SPS]-1659858695383
[605734] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.LegendTitle:348.
GPR[EPS]-1659858695660
GPR[ESUN]-1659858695660
GPR[SSUN]-1659858695660
1087677550
GPR[ESUN]-1659858695842
GPR[SSUN]-1659858695842
1087677550
GPR[SPVATF]-1659858696019
GPR[EPVATF]-1659858696202
GPR[SPS]-1659858696202
[606620] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.PiePlot:1837.
GPR[EPS]-1659858696546
GPR[ESUN]-1659858696546
GPR[SSUN]-1659858696546
1087677550
GPR[SPVATF]-1659858696726
GPR[EPVATF]-1659858696908
GPR[SPS]-1659858696908
[607324] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.PiePlot:1836.
GPR[EPS]-1659858697250
GPR[ESUN]-1659858697250
GPR[SSUN]-1659858697250
1087677550
GPR[SPVATF]-1659858697430
GPR[EPVATF]-1659858697613
GPR[SPS]-1659858697613
[608024] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.PiePlot:1833.
GPR[EPS]-1659858697950
GPR[SPVATF]-1659858697950
GPR[EPVATF]-1659858698128
GPR[SPS]-1659858698128
[608541] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.PiePlot:1833.
GPR[EPS]-1659858698467
GPR[ESUN]-1659858698467
GPR[SSUN]-1659858698467
1087677550
GPR[ESUN]-1659858698648
GPR[SSUN]-1659858698648
1087677550
GPR[SPVATF]-1659858698826
GPR[EPVATF]-1659858699009
GPR[SPS]-1659858699009
[609417] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.PiePlot:1768.
GPR[EPS]-1659858699343
GPR[ESUN]-1659858699343
GPR[SSUN]-1659858699343
1087677550
GPR[SPVATF]-1659858699522
GPR[EPVATF]-1659858699705
GPR[SPS]-1659858699705
[610125] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.PiePlot:1767.
GPR[EPS]-1659858700051
GPR[ESUN]-1659858700051
GPR[SSUN]-1659858700051
1087677550
GPR[SPVATF]-1659858700237
GPR[EPVATF]-1659858700422
GPR[SPS]-1659858700422
[610835] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.PiePlot:1764.
GPR[EPS]-1659858700761
GPR[SPVATF]-1659858700761
GPR[EPVATF]-1659858700942
GPR[SPS]-1659858700942
[611362] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.PiePlot:1764.
GPR[EPS]-1659858701288
GPR[ESUN]-1659858701288
GPR[SSUN]-1659858701288
1087677550
GPR[ESUN]-1659858701470
GPR[SSUN]-1659858701470
1087677550
GPR[SPVATF]-1659858701646
GPR[EPVATF]-1659858701831
GPR[SPS]-1659858701831
[612310] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.PiePlot:1714.
GPR[EPS]-1659858702236
GPR[ESUN]-1659858702236
GPR[SSUN]-1659858702236
1087677550
GPR[SPVATF]-1659858702415
GPR[EPVATF]-1659858702597
GPR[SPS]-1659858702597
[613006] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.PiePlot:1713.
GPR[EPS]-1659858702932
GPR[ESUN]-1659858702932
GPR[SSUN]-1659858702932
1087677550
GPR[SPVATF]-1659858703116
GPR[EPVATF]-1659858703302
GPR[SPS]-1659858703302
[613715] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.PiePlot:1710.
GPR[EPS]-1659858703641
GPR[SPVATF]-1659858703641
GPR[EPVATF]-1659858703828
GPR[SPS]-1659858703828
[614238] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.PiePlot:1710.
GPR[EPS]-1659858704164
GPR[ESUN]-1659858704164
GPR[SSUN]-1659858704164
1087677550
GPR[ESUN]-1659858704344
GPR[SSUN]-1659858704344
1087677550
GPR[ESUN]-1659858704521
GPR[SSUN]-1659858704521
1087677550
GPR[ESUN]-1659858704697
GPR[SSUN]-1659858704697
68477
GPR[SPVATF]-1659858704798
GPR[EPVATF]-1659858704985
GPR[SPS]-1659858704985
[615184] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Day extends org.jfree.data.time.RegularTimePeriod implements java.io.Serializable {
    private static final long serialVersionUID = -7082667380758962755L;

    protected static final java.text.DateFormat DATE_FORMAT = new java.text.SimpleDateFormat("yyyy-MM-dd");

    protected static final java.text.DateFormat DATE_FORMAT_SHORT = java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT);

    protected static final java.text.DateFormat DATE_FORMAT_MEDIUM = java.text.DateFormat.getDateInstance(java.text.DateFormat.MEDIUM);

    protected static final java.text.DateFormat DATE_FORMAT_LONG = java.text.DateFormat.getDateInstance(java.text.DateFormat.LONG);

    private org.jfree.data.time.SerialDate serialDate;

    private long firstMillisecond;

    private long lastMillisecond;

    public Day() {
        this(new java.util.Date());
    }

    public Day(int day, int month, int year) {
        this.serialDate = org.jfree.data.time.SerialDate.createInstance(day, month, year);
        peg(java.util.Calendar.getInstance());
    }

    public Day(org.jfree.data.time.SerialDate serialDate) {
        if (serialDate == null) {
            throw new java.lang.IllegalArgumentException("Null 'serialDate' argument.");
        }
        this.serialDate = serialDate;
        peg(java.util.Calendar.getInstance());
    }

    public Day(java.util.Date time) {
        this(time, java.util.TimeZone.getDefault());
    }

    public Day(java.util.Date time, java.util.TimeZone zone) {
        if (time == null) {
            throw new java.lang.IllegalArgumentException("Null 'time' argument.");
        }
        if (zone == null) {
            throw new java.lang.IllegalArgumentException("Null 'zone' argument.");
        }
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(time);
        int d = calendar.get(java.util.Calendar.DAY_OF_MONTH);
        int m = calendar.get(java.util.Calendar.MONTH) + 1;
        int y = calendar.get(java.util.Calendar.YEAR);
        this.serialDate = org.jfree.data.time.SerialDate.createInstance(d, m, y);
        peg(calendar);
    }

    public org.jfree.data.time.SerialDate getSerialDate() {
        return this.serialDate;
    }

    public int getYear() {
        return this.serialDate.getYYYY();
    }

    public int getMonth() {
        return this.serialDate.getMonth();
    }

    public int getDayOfMonth() {
        return this.serialDate.getDayOfMonth();
    }

    public long getFirstMillisecond() {
        return this.firstMillisecond;
    }

    public long getLastMillisecond() {
        return this.lastMillisecond;
    }

    public void peg(java.util.Calendar calendar) {
        this.firstMillisecond = getFirstMillisecond(calendar);
        this.lastMillisecond = getLastMillisecond(calendar);
    }

    public org.jfree.data.time.RegularTimePeriod previous() {
        org.jfree.data.time.Day result;
        int serial = this.serialDate.toSerial();
        if (serial > org.jfree.data.time.SerialDate.SERIAL_LOWER_BOUND) {
            org.jfree.data.time.SerialDate yesterday = org.jfree.data.time.SerialDate.createInstance(serial - 1);
            return new org.jfree.data.time.Day(yesterday);
        } else {
            result = null;
        }
        return result;
    }

    public org.jfree.data.time.RegularTimePeriod next() {
        org.jfree.data.time.Day result;
        int serial = this.serialDate.toSerial();
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(572).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(572).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(572).collectInput("serial < org.jfree.data.time.SerialDate.SERIAL_UPPER_BOUND",serial < org.jfree.data.time.SerialDate.SERIAL_UPPER_BOUND);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(572).collectInput("org.jfree.data.time.Day.this.firstMillisecond",org.jfree.data.time.Day.this.firstMillisecond);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(572).collectInput("org.jfree.data.time.Day.DATE_FORMAT_SHORT",org.jfree.data.time.Day.DATE_FORMAT_SHORT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(572).collectInput("serial",serial);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(572).collectInput("org.jfree.data.time.Day.DATE_FORMAT_LONG",org.jfree.data.time.Day.DATE_FORMAT_LONG);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(572).collectInput("org.jfree.data.time.Day.this.serialDate",org.jfree.data.time.Day.this.serialDate);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(572).collectInput("org.jfree.data.time.Day.DATE_FORMAT_MEDIUM",org.jfree.data.time.Day.DATE_FORMAT_MEDIUM);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(572).collectInput("org.jfree.data.time.Day.DATE_FORMAT",org.jfree.data.time.Day.DATE_FORMAT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(572).collectInput("org.jfree.data.time.Day.this.lastMillisecond",org.jfree.data.time.Day.this.lastMillisecond);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(572).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(572).collectionEnds();
        }
        if (runtimeAngelicValue) if (serial < org.jfree.data.time.SerialDate.SERIAL_UPPER_BOUND) {
            org.jfree.data.time.SerialDate tomorrow = org.jfree.data.time.SerialDate.createInstance(serial + 1);
            return new org.jfree.data.time.Day(tomorrow);
        } else {
            result = null;
        }
        return result;
    }

    public long getSerialIndex() {
        return this.serialDate.toSerial();
    }

    public long getFirstMillisecond(java.util.Calendar calendar) {
        int year = this.serialDate.getYYYY();
        int month = this.serialDate.getMonth();
        int day = this.serialDate.getDayOfMonth();
        calendar.clear();
        calendar.set(year, month - 1, day, 0, 0, 0);
        calendar.set(java.util.Calendar.MILLISECOND, 0);
        return calendar.getTime().getTime();
    }

    public long getLastMillisecond(java.util.Calendar calendar) {
        int year = this.serialDate.getYYYY();
        int month = this.serialDate.getMonth();
        int day = this.serialDate.getDayOfMonth();
        calendar.clear();
        calendar.set(year, month - 1, day, 23, 59, 59);
        calendar.set(java.util.Calendar.MILLISECOND, 999);
        return calendar.getTime().getTime();
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.time.Day)) {
            return false;
        }
        org.jfree.data.time.Day that = ((org.jfree.data.time.Day) (obj));
        if (!this.serialDate.equals(that.getSerialDate())) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        return this.serialDate.hashCode();
    }

    public int compareTo(java.lang.Object o1) {
        int result;
        if (o1 instanceof org.jfree.data.time.Day) {
            org.jfree.data.time.Day d = ((org.jfree.data.time.Day) (o1));
            result = -d.getSerialDate().compare(this.serialDate);
        } else if (o1 instanceof org.jfree.data.time.RegularTimePeriod) {
            result = 0;
        } else {
            result = 1;
        }
        return result;
    }

    public java.lang.String toString() {
        return this.serialDate.toString();
    }

    public static org.jfree.data.time.Day parseDay(java.lang.String s) {
        try {
            return new org.jfree.data.time.Day(org.jfree.data.time.Day.DATE_FORMAT.parse(s));
        } catch (java.text.ParseException e1) {
            try {
                return new org.jfree.data.time.Day(org.jfree.data.time.Day.DATE_FORMAT_SHORT.parse(s));
            } catch (java.text.ParseException e2) {
            }
        }
        return null;
    }
}
[615184] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659858705110
GPR[EPVATF]-1659858705296
GPR[SPS]-1659858705297
[615586] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Day:289.
GPR[EPS]-1659858705512
GPR[ESUN]-1659858705512
GPR[SSUN]-1659858705512
68477
GPR[ESUN]-1659858705610
GPR[SSUN]-1659858705610
1355738515
GPR[SPVATF]-1659858705739
GPR[EPVATF]-1659858705992
GPR[SPS]-1659858705992
[616275] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class DatasetUtilities {
    private DatasetUtilities() {
    }

    public static double calculatePieDatasetTotal(org.jfree.data.general.PieDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        java.util.List keys = dataset.getKeys();
        double totalValue = 0;
        java.util.Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            java.lang.Comparable current = ((java.lang.Comparable) (iterator.next()));
            if (current != null) {
                java.lang.Number value = dataset.getValue(current);
                double v = 0.0;
                if (value != null) {
                    v = value.doubleValue();
                }
                if (v > 0) {
                    totalValue = totalValue + v;
                }
            }
        } 
        return totalValue;
    }

    public static org.jfree.data.general.PieDataset createPieDatasetForRow(org.jfree.data.category.CategoryDataset dataset, java.lang.Comparable rowKey) {
        int row = dataset.getRowIndex(rowKey);
        return org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(dataset, row);
    }

    public static org.jfree.data.general.PieDataset createPieDatasetForRow(org.jfree.data.category.CategoryDataset dataset, int row) {
        org.jfree.data.general.DefaultPieDataset result = new org.jfree.data.general.DefaultPieDataset();
        int columnCount = dataset.getColumnCount();
        for (int current = 0; current < columnCount; current++) {
            java.lang.Comparable columnKey = dataset.getColumnKey(current);
            result.setValue(columnKey, dataset.getValue(row, current));
        }
        return result;
    }

    public static org.jfree.data.general.PieDataset createPieDatasetForColumn(org.jfree.data.category.CategoryDataset dataset, java.lang.Comparable columnKey) {
        int column = dataset.getColumnIndex(columnKey);
        return org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(dataset, column);
    }

    public static org.jfree.data.general.PieDataset createPieDatasetForColumn(org.jfree.data.category.CategoryDataset dataset, int column) {
        org.jfree.data.general.DefaultPieDataset result = new org.jfree.data.general.DefaultPieDataset();
        int rowCount = dataset.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            java.lang.Comparable rowKey = dataset.getRowKey(i);
            result.setValue(rowKey, dataset.getValue(i, column));
        }
        return result;
    }

    public static org.jfree.data.general.PieDataset createConsolidatedPieDataset(org.jfree.data.general.PieDataset source, java.lang.Comparable key, double minimumPercent) {
        return org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(source, key, minimumPercent, 2);
    }

    public static org.jfree.data.general.PieDataset createConsolidatedPieDataset(org.jfree.data.general.PieDataset source, java.lang.Comparable key, double minimumPercent, int minItems) {
        org.jfree.data.general.DefaultPieDataset result = new org.jfree.data.general.DefaultPieDataset();
        double total = org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(source);
        java.util.List keys = source.getKeys();
        java.util.ArrayList otherKeys = new java.util.ArrayList();
        java.util.Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            java.lang.Comparable currentKey = ((java.lang.Comparable) (iterator.next()));
            java.lang.Number dataValue = source.getValue(currentKey);
            if (dataValue != null) {
                double value = dataValue.doubleValue();
                if ((value / total) < minimumPercent) {
                    otherKeys.add(currentKey);
                }
            }
        } 
        iterator = keys.iterator();
        double otherValue = 0;
        while (iterator.hasNext()) {
            java.lang.Comparable currentKey = ((java.lang.Comparable) (iterator.next()));
            java.lang.Number dataValue = source.getValue(currentKey);
            if (dataValue != null) {
                if (otherKeys.contains(currentKey) && (otherKeys.size() >= minItems)) {
                    otherValue += dataValue.doubleValue();
                } else {
                    result.setValue(currentKey, dataValue);
                }
            }
        } 
        if (otherKeys.size() >= minItems) {
            result.setValue(key, otherValue);
        }
        return result;
    }

    public static org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.String rowKeyPrefix, java.lang.String columnKeyPrefix, double[][] data) {
        org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset();
        for (int r = 0; r < data.length; r++) {
            java.lang.String rowKey = rowKeyPrefix + (r + 1);
            for (int c = 0; c < data[r].length; c++) {
                java.lang.String columnKey = columnKeyPrefix + (c + 1);
                result.addValue(new java.lang.Double(data[r][c]), rowKey, columnKey);
            }
        }
        return result;
    }

    public static org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.String rowKeyPrefix, java.lang.String columnKeyPrefix, java.lang.Number[][] data) {
        org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset();
        for (int r = 0; r < data.length; r++) {
            java.lang.String rowKey = rowKeyPrefix + (r + 1);
            for (int c = 0; c < data[r].length; c++) {
                java.lang.String columnKey = columnKeyPrefix + (c + 1);
                result.addValue(data[r][c], rowKey, columnKey);
            }
        }
        return result;
    }

    public static org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.Comparable[] rowKeys, java.lang.Comparable[] columnKeys, double[][] data) {
        if (rowKeys == null) {
            throw new java.lang.IllegalArgumentException("Null 'rowKeys' argument.");
        }
        if (columnKeys == null) {
            throw new java.lang.IllegalArgumentException("Null 'columnKeys' argument.");
        }
        if (org.jfree.chart.util.ArrayUtilities.hasDuplicateItems(rowKeys)) {
            throw new java.lang.IllegalArgumentException("Duplicate items in 'rowKeys'.");
        }
        if (org.jfree.chart.util.ArrayUtilities.hasDuplicateItems(columnKeys)) {
            throw new java.lang.IllegalArgumentException("Duplicate items in 'columnKeys'.");
        }
        if (rowKeys.length != data.length) {
            throw new java.lang.IllegalArgumentException("The number of row keys does not match the number of rows in " + "the data array.");
        }
        int columnCount = 0;
        for (int r = 0; r < data.length; r++) {
            columnCount = java.lang.Math.max(columnCount, data[r].length);
        }
        if (columnKeys.length != columnCount) {
            throw new java.lang.IllegalArgumentException("The number of column keys does not match the number of " + "columns in the data array.");
        }
        org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset();
        for (int r = 0; r < data.length; r++) {
            java.lang.Comparable rowKey = rowKeys[r];
            for (int c = 0; c < data[r].length; c++) {
                java.lang.Comparable columnKey = columnKeys[c];
                result.addValue(new java.lang.Double(data[r][c]), rowKey, columnKey);
            }
        }
        return result;
    }

    public static org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.Comparable rowKey, org.jfree.data.KeyedValues rowData) {
        if (rowKey == null) {
            throw new java.lang.IllegalArgumentException("Null 'rowKey' argument.");
        }
        if (rowData == null) {
            throw new java.lang.IllegalArgumentException("Null 'rowData' argument.");
        }
        org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset();
        for (int i = 0; i < rowData.getItemCount(); i++) {
            result.addValue(rowData.getValue(i), rowKey, rowData.getKey(i));
        }
        return result;
    }

    public static org.jfree.data.xy.XYDataset sampleFunction2D(org.jfree.data.function.Function2D f, double start, double end, int samples, java.lang.Comparable seriesKey) {
        org.jfree.data.xy.XYSeries series = org.jfree.data.general.DatasetUtilities.sampleFunction2DToSeries(f, start, end, samples, seriesKey);
        org.jfree.data.xy.XYSeriesCollection collection = new org.jfree.data.xy.XYSeriesCollection(series);
        return collection;
    }

    public static org.jfree.data.xy.XYSeries sampleFunction2DToSeries(org.jfree.data.function.Function2D f, double start, double end, int samples, java.lang.Comparable seriesKey) {
        if (f == null) {
            throw new java.lang.IllegalArgumentException("Null 'f' argument.");
        }
        if (seriesKey == null) {
            throw new java.lang.IllegalArgumentException("Null 'seriesKey' argument.");
        }
        if (start >= end) {
            throw new java.lang.IllegalArgumentException("Requires 'start' < 'end'.");
        }
        if (samples < 2) {
            throw new java.lang.IllegalArgumentException("Requires 'samples' > 1");
        }
        org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries(seriesKey);
        double step = (end - start) / (samples - 1);
        for (int i = 0; i < samples; i++) {
            double x = start + (step * i);
            series.add(x, f.getValue(x));
        }
        return series;
    }

    public static boolean isEmptyOrNull(org.jfree.data.general.PieDataset dataset) {
        if (dataset == null) {
            return true;
        }
        int itemCount = dataset.getItemCount();
        if (itemCount == 0) {
            return true;
        }
        for (int item = 0; item < itemCount; item++) {
            java.lang.Number y = dataset.getValue(item);
            if (y != null) {
                double yy = y.doubleValue();
                if (yy > 0.0) {
                    return false;
                }
            }
        }
        return true;
    }

    public static boolean isEmptyOrNull(org.jfree.data.category.CategoryDataset dataset) {
        if (dataset == null) {
            return true;
        }
        int rowCount = dataset.getRowCount();
        int columnCount = dataset.getColumnCount();
        if ((rowCount == 0) || (columnCount == 0)) {
            return true;
        }
        for (int r = 0; r < rowCount; r++) {
            for (int c = 0; c < columnCount; c++) {
                if (dataset.getValue(r, c) != null) {
                    return false;
                }
            }
        }
        return true;
    }

    public static boolean isEmptyOrNull(org.jfree.data.xy.XYDataset dataset) {
        if (dataset != null) {
            for (int s = 0; s < dataset.getSeriesCount(); s++) {
                if (dataset.getItemCount(s) > 0) {
                    return false;
                }
            }
        }
        return true;
    }

    public static org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.findDomainBounds(dataset, true);
    }

    public static org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset dataset, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        if (dataset instanceof org.jfree.data.DomainInfo) {
            org.jfree.data.DomainInfo info = ((org.jfree.data.DomainInfo) (dataset));
            result = info.getDomainBounds(includeInterval);
        } else {
            result = org.jfree.data.general.DatasetUtilities.iterateDomainBounds(dataset, includeInterval);
        }
        return result;
    }

    public static org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset dataset, java.util.List visibleSeriesKeys, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        if (dataset instanceof org.jfree.data.xy.XYDomainInfo) {
            org.jfree.data.xy.XYDomainInfo info = ((org.jfree.data.xy.XYDomainInfo) (dataset));
            result = info.getDomainBounds(visibleSeriesKeys, includeInterval);
        } else {
            result = org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds(dataset, visibleSeriesKeys, includeInterval);
        }
        return result;
    }

    public static org.jfree.data.Range iterateDomainBounds(org.jfree.data.xy.XYDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.iterateDomainBounds(dataset, true);
    }

    public static org.jfree.data.Range iterateDomainBounds(org.jfree.data.xy.XYDataset dataset, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        int seriesCount = dataset.getSeriesCount();
        double lvalue;
        double uvalue;
        if (includeInterval && (dataset instanceof org.jfree.data.xy.IntervalXYDataset)) {
            org.jfree.data.xy.IntervalXYDataset intervalXYData = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    lvalue = intervalXYData.getStartXValue(series, item);
                    uvalue = intervalXYData.getEndXValue(series, item);
                    if (!java.lang.Double.isNaN(lvalue)) {
                        minimum = java.lang.Math.min(minimum, lvalue);
                    }
                    if (!java.lang.Double.isNaN(uvalue)) {
                        maximum = java.lang.Math.max(maximum, uvalue);
                    }
                }
            }
        } else {
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    lvalue = dataset.getXValue(series, item);
                    uvalue = lvalue;
                    if (!java.lang.Double.isNaN(lvalue)) {
                        minimum = java.lang.Math.min(minimum, lvalue);
                        maximum = java.lang.Math.max(maximum, uvalue);
                    }
                }
            }
        }
        if (minimum > maximum) {
            return null;
        } else {
            return new org.jfree.data.Range(minimum, maximum);
        }
    }

    public static org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.findRangeBounds(dataset, true);
    }

    public static org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset dataset, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        if (dataset instanceof org.jfree.data.RangeInfo) {
            org.jfree.data.RangeInfo info = ((org.jfree.data.RangeInfo) (dataset));
            result = info.getRangeBounds(includeInterval);
        } else {
            result = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(dataset, includeInterval);
        }
        return result;
    }

    public static org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset dataset, java.util.List visibleSeriesKeys, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        if (dataset instanceof org.jfree.data.category.CategoryRangeInfo) {
            org.jfree.data.category.CategoryRangeInfo info = ((org.jfree.data.category.CategoryRangeInfo) (dataset));
            result = info.getRangeBounds(visibleSeriesKeys, includeInterval);
        } else {
            result = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, includeInterval);
        }
        return result;
    }

    public static org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.findRangeBounds(dataset, true);
    }

    public static org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset dataset, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        if (dataset instanceof org.jfree.data.RangeInfo) {
            org.jfree.data.RangeInfo info = ((org.jfree.data.RangeInfo) (dataset));
            result = info.getRangeBounds(includeInterval);
        } else {
            result = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(dataset, includeInterval);
        }
        return result;
    }

    public static org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset dataset, java.util.List visibleSeriesKeys, org.jfree.data.Range xRange, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        if (dataset instanceof org.jfree.data.xy.XYRangeInfo) {
            org.jfree.data.xy.XYRangeInfo info = ((org.jfree.data.xy.XYRangeInfo) (dataset));
            result = info.getRangeBounds(visibleSeriesKeys, xRange, includeInterval);
        } else {
            result = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, xRange, includeInterval);
        }
        return result;
    }

    public static org.jfree.data.Range iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset dataset, boolean includeInterval) {
        return org.jfree.data.general.DatasetUtilities.iterateRangeBounds(dataset, includeInterval);
    }

    public static org.jfree.data.Range iterateRangeBounds(org.jfree.data.category.CategoryDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.iterateRangeBounds(dataset, true);
    }

    public static org.jfree.data.Range iterateRangeBounds(org.jfree.data.category.CategoryDataset dataset, boolean includeInterval) {
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        int rowCount = dataset.getRowCount();
        int columnCount = dataset.getColumnCount();
        if (includeInterval && (dataset instanceof org.jfree.data.category.IntervalCategoryDataset)) {
            org.jfree.data.category.IntervalCategoryDataset icd = ((org.jfree.data.category.IntervalCategoryDataset) (dataset));
            java.lang.Number lvalue;
            java.lang.Number uvalue;
            for (int row = 0; row < rowCount; row++) {
                for (int column = 0; column < columnCount; column++) {
                    lvalue = icd.getStartValue(row, column);
                    uvalue = icd.getEndValue(row, column);
                    if ((lvalue != null) && (!java.lang.Double.isNaN(lvalue.doubleValue()))) {
                        minimum = java.lang.Math.min(minimum, lvalue.doubleValue());
                    }
                    if ((uvalue != null) && (!java.lang.Double.isNaN(uvalue.doubleValue()))) {
                        maximum = java.lang.Math.max(maximum, uvalue.doubleValue());
                    }
                }
            }
        } else {
            for (int row = 0; row < rowCount; row++) {
                for (int column = 0; column < columnCount; column++) {
                    java.lang.Number value = dataset.getValue(row, column);
                    if (value != null) {
                        double v = value.doubleValue();
                        if (!java.lang.Double.isNaN(v)) {
                            minimum = java.lang.Math.min(minimum, v);
                            maximum = java.lang.Math.max(maximum, v);
                        }
                    }
                }
            }
        }
        if (minimum == java.lang.Double.POSITIVE_INFINITY) {
            return null;
        } else {
            return new org.jfree.data.Range(minimum, maximum);
        }
    }

    public static org.jfree.data.Range iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset dataset, java.util.List visibleSeriesKeys, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (visibleSeriesKeys == null) {
            throw new java.lang.IllegalArgumentException("Null 'visibleSeriesKeys' argument.");
        }
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        int columnCount = dataset.getColumnCount();
        if (includeInterval && (dataset instanceof org.jfree.data.statistics.BoxAndWhiskerCategoryDataset)) {
            org.jfree.data.statistics.BoxAndWhiskerCategoryDataset bx = ((org.jfree.data.statistics.BoxAndWhiskerCategoryDataset) (dataset));
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.getRowIndex(seriesKey);
                int itemCount = dataset.getColumnCount();
                for (int item = 0; item < itemCount; item++) {
                    java.lang.Number lvalue = bx.getMinRegularValue(series, item);
                    if (lvalue == null) {
                        lvalue = bx.getValue(series, item);
                    }
                    java.lang.Number uvalue = bx.getMaxRegularValue(series, item);
                    if (uvalue == null) {
                        uvalue = bx.getValue(series, item);
                    }
                    if (lvalue != null) {
                        minimum = java.lang.Math.min(minimum, lvalue.doubleValue());
                    }
                    if (uvalue != null) {
                        maximum = java.lang.Math.max(maximum, uvalue.doubleValue());
                    }
                }
            } 
        } else if (includeInterval && (dataset instanceof org.jfree.data.category.IntervalCategoryDataset)) {
            org.jfree.data.category.IntervalCategoryDataset icd = ((org.jfree.data.category.IntervalCategoryDataset) (dataset));
            java.lang.Number lvalue;
            java.lang.Number uvalue;
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.getRowIndex(seriesKey);
                for (int column = 0; column < columnCount; column++) {
                    lvalue = icd.getStartValue(series, column);
                    uvalue = icd.getEndValue(series, column);
                    if ((lvalue != null) && (!java.lang.Double.isNaN(lvalue.doubleValue()))) {
                        minimum = java.lang.Math.min(minimum, lvalue.doubleValue());
                    }
                    if ((uvalue != null) && (!java.lang.Double.isNaN(uvalue.doubleValue()))) {
                        maximum = java.lang.Math.max(maximum, uvalue.doubleValue());
                    }
                }
            } 
        } else if (includeInterval && (dataset instanceof org.jfree.data.statistics.MultiValueCategoryDataset)) {
            org.jfree.data.statistics.MultiValueCategoryDataset mvcd = ((org.jfree.data.statistics.MultiValueCategoryDataset) (dataset));
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.getRowIndex(seriesKey);
                for (int column = 0; column < columnCount; column++) {
                    java.util.List values = mvcd.getValues(series, column);
                    java.util.Iterator valueIterator = values.iterator();
                    while (valueIterator.hasNext()) {
                        java.lang.Object o = valueIterator.next();
                        if (o instanceof java.lang.Number) {
                            double v = ((java.lang.Number) (o)).doubleValue();
                            if (!java.lang.Double.isNaN(v)) {
                                minimum = java.lang.Math.min(minimum, v);
                                maximum = java.lang.Math.max(maximum, v);
                            }
                        }
                    } 
                }
            } 
        } else if (includeInterval && (dataset instanceof org.jfree.data.statistics.StatisticalCategoryDataset)) {
            org.jfree.data.statistics.StatisticalCategoryDataset scd = ((org.jfree.data.statistics.StatisticalCategoryDataset) (dataset));
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.getRowIndex(seriesKey);
                for (int column = 0; column < columnCount; column++) {
                    java.lang.Number meanN = scd.getMeanValue(series, column);
                    if (meanN != null) {
                        double std = 0.0;
                        java.lang.Number stdN = scd.getStdDevValue(series, column);
                        if (stdN != null) {
                            std = stdN.doubleValue();
                            if (java.lang.Double.isNaN(std)) {
                                std = 0.0;
                            }
                        }
                        double mean = meanN.doubleValue();
                        if (!java.lang.Double.isNaN(mean)) {
                            minimum = java.lang.Math.min(minimum, mean - std);
                            maximum = java.lang.Math.max(maximum, mean + std);
                        }
                    }
                }
            } 
        } else {
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.getRowIndex(seriesKey);
                for (int column = 0; column < columnCount; column++) {
                    java.lang.Number value = dataset.getValue(series, column);
                    if (value != null) {
                        double v = value.doubleValue();
                        if (!java.lang.Double.isNaN(v)) {
                            minimum = java.lang.Math.min(minimum, v);
                            maximum = java.lang.Math.max(maximum, v);
                        }
                    }
                }
            } 
        }
        if (minimum == java.lang.Double.POSITIVE_INFINITY) {
            return null;
        } else {
            return new org.jfree.data.Range(minimum, maximum);
        }
    }

    public static org.jfree.data.Range iterateXYRangeBounds(org.jfree.data.xy.XYDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.iterateRangeBounds(dataset);
    }

    public static org.jfree.data.Range iterateRangeBounds(org.jfree.data.xy.XYDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.iterateRangeBounds(dataset, true);
    }

    public static org.jfree.data.Range iterateRangeBounds(org.jfree.data.xy.XYDataset dataset, boolean includeInterval) {
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        int seriesCount = dataset.getSeriesCount();
        if (includeInterval && (dataset instanceof org.jfree.data.xy.IntervalXYDataset)) {
            org.jfree.data.xy.IntervalXYDataset ixyd = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double lvalue = ixyd.getStartYValue(series, item);
                    double uvalue = ixyd.getEndYValue(series, item);
                    if (!java.lang.Double.isNaN(lvalue)) {
                        minimum = java.lang.Math.min(minimum, lvalue);
                    }
                    if (!java.lang.Double.isNaN(uvalue)) {
                        maximum = java.lang.Math.max(maximum, uvalue);
                    }
                }
            }
        } else if (includeInterval && (dataset instanceof org.jfree.data.xy.OHLCDataset)) {
            org.jfree.data.xy.OHLCDataset ohlc = ((org.jfree.data.xy.OHLCDataset) (dataset));
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double lvalue = ohlc.getLowValue(series, item);
                    double uvalue = ohlc.getHighValue(series, item);
                    if (!java.lang.Double.isNaN(lvalue)) {
                        minimum = java.lang.Math.min(minimum, lvalue);
                    }
                    if (!java.lang.Double.isNaN(uvalue)) {
                        maximum = java.lang.Math.max(maximum, uvalue);
                    }
                }
            }
        } else {
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double value = dataset.getYValue(series, item);
                    if (!java.lang.Double.isNaN(value)) {
                        minimum = java.lang.Math.min(minimum, value);
                        maximum = java.lang.Math.max(maximum, value);
                    }
                }
            }
        }
        if (minimum == java.lang.Double.POSITIVE_INFINITY) {
            return null;
        } else {
            return new org.jfree.data.Range(minimum, maximum);
        }
    }

    public static org.jfree.data.Range iterateToFindDomainBounds(org.jfree.data.xy.XYDataset dataset, java.util.List visibleSeriesKeys, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (visibleSeriesKeys == null) {
            throw new java.lang.IllegalArgumentException("Null 'visibleSeriesKeys' argument.");
        }
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        if (includeInterval && (dataset instanceof org.jfree.data.xy.IntervalXYDataset)) {
            org.jfree.data.xy.IntervalXYDataset ixyd = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.indexOf(seriesKey);
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double lvalue = ixyd.getStartXValue(series, item);
                    double uvalue = ixyd.getEndXValue(series, item);
                    if (!java.lang.Double.isNaN(lvalue)) {
                        minimum = java.lang.Math.min(minimum, lvalue);
                    }
                    if (!java.lang.Double.isNaN(uvalue)) {
                        maximum = java.lang.Math.max(maximum, uvalue);
                    }
                }
            } 
        } else {
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.indexOf(seriesKey);
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double x = dataset.getXValue(series, item);
                    if (!java.lang.Double.isNaN(x)) {
                        minimum = java.lang.Math.min(minimum, x);
                        maximum = java.lang.Math.max(maximum, x);
                    }
                }
            } 
        }
        if (minimum == java.lang.Double.POSITIVE_INFINITY) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(574).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(574).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(574).collectInput("maximum",maximum);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(574).collectInput("minimum",minimum);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(574).collectInput("dataset",dataset);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(574).collectInput("includeInterval",includeInterval);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(574).collectInput("visibleSeriesKeys",visibleSeriesKeys);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(574).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(574).collectionEnds();
            }
            if (runtimeAngelicValue)
                return null;

        } else {
            return new org.jfree.data.Range(minimum, maximum);
        }
    }

    public static org.jfree.data.Range iterateToFindRangeBounds(org.jfree.data.xy.XYDataset dataset, java.util.List visibleSeriesKeys, org.jfree.data.Range xRange, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (visibleSeriesKeys == null) {
            throw new java.lang.IllegalArgumentException("Null 'visibleSeriesKeys' argument.");
        }
        if (xRange == null) {
            throw new java.lang.IllegalArgumentException("Null 'xRange' argument");
        }
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        if (includeInterval && (dataset instanceof org.jfree.data.xy.OHLCDataset)) {
            org.jfree.data.xy.OHLCDataset ohlc = ((org.jfree.data.xy.OHLCDataset) (dataset));
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.indexOf(seriesKey);
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double x = ohlc.getXValue(series, item);
                    if (xRange.contains(x)) {
                        double lvalue = ohlc.getLowValue(series, item);
                        double uvalue = ohlc.getHighValue(series, item);
                        if (!java.lang.Double.isNaN(lvalue)) {
                            minimum = java.lang.Math.min(minimum, lvalue);
                        }
                        if (!java.lang.Double.isNaN(uvalue)) {
                            maximum = java.lang.Math.max(maximum, uvalue);
                        }
                    }
                }
            } 
        } else if (includeInterval && (dataset instanceof org.jfree.data.statistics.BoxAndWhiskerXYDataset)) {
            org.jfree.data.statistics.BoxAndWhiskerXYDataset bx = ((org.jfree.data.statistics.BoxAndWhiskerXYDataset) (dataset));
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.indexOf(seriesKey);
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double x = bx.getXValue(series, item);
                    if (xRange.contains(x)) {
                        java.lang.Number lvalue = bx.getMinRegularValue(series, item);
                        java.lang.Number uvalue = bx.getMaxRegularValue(series, item);
                        if (lvalue != null) {
                            minimum = java.lang.Math.min(minimum, lvalue.doubleValue());
                        }
                        if (uvalue != null) {
                            maximum = java.lang.Math.max(maximum, uvalue.doubleValue());
                        }
                    }
                }
            } 
        } else if (includeInterval && (dataset instanceof org.jfree.data.xy.IntervalXYDataset)) {
            org.jfree.data.xy.IntervalXYDataset ixyd = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.indexOf(seriesKey);
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double x = ixyd.getXValue(series, item);
                    if (xRange.contains(x)) {
                        double lvalue = ixyd.getStartYValue(series, item);
                        double uvalue = ixyd.getEndYValue(series, item);
                        if (!java.lang.Double.isNaN(lvalue)) {
                            minimum = java.lang.Math.min(minimum, lvalue);
                        }
                        if (!java.lang.Double.isNaN(uvalue)) {
                            maximum = java.lang.Math.max(maximum, uvalue);
                        }
                    }
                }
            } 
        } else {
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.indexOf(seriesKey);
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double x = dataset.getXValue(series, item);
                    double y = dataset.getYValue(series, item);
                    if (xRange.contains(x)) {
                        if (!java.lang.Double.isNaN(y)) {
                            minimum = java.lang.Math.min(minimum, y);
                            maximum = java.lang.Math.max(maximum, y);
                        }
                    }
                }
            } 
        }
        if (minimum == java.lang.Double.POSITIVE_INFINITY) {
            return null;
        } else {
            return new org.jfree.data.Range(minimum, maximum);
        }
    }

    public static java.lang.Number findMinimumDomainValue(org.jfree.data.xy.XYDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        java.lang.Number result = null;
        if (dataset instanceof org.jfree.data.DomainInfo) {
            org.jfree.data.DomainInfo info = ((org.jfree.data.DomainInfo) (dataset));
            return new java.lang.Double(info.getDomainLowerBound(true));
        } else {
            double minimum = java.lang.Double.POSITIVE_INFINITY;
            int seriesCount = dataset.getSeriesCount();
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double value;
                    if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {
                        org.jfree.data.xy.IntervalXYDataset intervalXYData = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
                        value = intervalXYData.getStartXValue(series, item);
                    } else {
                        value = dataset.getXValue(series, item);
                    }
                    if (!java.lang.Double.isNaN(value)) {
                        minimum = java.lang.Math.min(minimum, value);
                    }
                }
            }
            if (minimum == java.lang.Double.POSITIVE_INFINITY) {
                result = null;
            } else {
                result = new java.lang.Double(minimum);
            }
        }
        return result;
    }

    public static java.lang.Number findMaximumDomainValue(org.jfree.data.xy.XYDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        java.lang.Number result = null;
        if (dataset instanceof org.jfree.data.DomainInfo) {
            org.jfree.data.DomainInfo info = ((org.jfree.data.DomainInfo) (dataset));
            return new java.lang.Double(info.getDomainUpperBound(true));
        } else {
            double maximum = java.lang.Double.NEGATIVE_INFINITY;
            int seriesCount = dataset.getSeriesCount();
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double value;
                    if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {
                        org.jfree.data.xy.IntervalXYDataset intervalXYData = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
                        value = intervalXYData.getEndXValue(series, item);
                    } else {
                        value = dataset.getXValue(series, item);
                    }
                    if (!java.lang.Double.isNaN(value)) {
                        maximum = java.lang.Math.max(maximum, value);
                    }
                }
            }
            if (maximum == java.lang.Double.NEGATIVE_INFINITY) {
                result = null;
            } else {
                result = new java.lang.Double(maximum);
            }
        }
        return result;
    }

    public static java.lang.Number findMinimumRangeValue(org.jfree.data.category.CategoryDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (dataset instanceof org.jfree.data.RangeInfo) {
            org.jfree.data.RangeInfo info = ((org.jfree.data.RangeInfo) (dataset));
            return new java.lang.Double(info.getRangeLowerBound(true));
        } else {
            double minimum = java.lang.Double.POSITIVE_INFINITY;
            int seriesCount = dataset.getRowCount();
            int itemCount = dataset.getColumnCount();
            for (int series = 0; series < seriesCount; series++) {
                for (int item = 0; item < itemCount; item++) {
                    java.lang.Number value;
                    if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {
                        org.jfree.data.category.IntervalCategoryDataset icd = ((org.jfree.data.category.IntervalCategoryDataset) (dataset));
                        value = icd.getStartValue(series, item);
                    } else {
                        value = dataset.getValue(series, item);
                    }
                    if (value != null) {
                        minimum = java.lang.Math.min(minimum, value.doubleValue());
                    }
                }
            }
            if (minimum == java.lang.Double.POSITIVE_INFINITY) {
                return null;
            } else {
                return new java.lang.Double(minimum);
            }
        }
    }

    public static java.lang.Number findMinimumRangeValue(org.jfree.data.xy.XYDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (dataset instanceof org.jfree.data.RangeInfo) {
            org.jfree.data.RangeInfo info = ((org.jfree.data.RangeInfo) (dataset));
            return new java.lang.Double(info.getRangeLowerBound(true));
        } else {
            double minimum = java.lang.Double.POSITIVE_INFINITY;
            int seriesCount = dataset.getSeriesCount();
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double value;
                    if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {
                        org.jfree.data.xy.IntervalXYDataset intervalXYData = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
                        value = intervalXYData.getStartYValue(series, item);
                    } else if (dataset instanceof org.jfree.data.xy.OHLCDataset) {
                        org.jfree.data.xy.OHLCDataset highLowData = ((org.jfree.data.xy.OHLCDataset) (dataset));
                        value = highLowData.getLowValue(series, item);
                    } else {
                        value = dataset.getYValue(series, item);
                    }
                    if (!java.lang.Double.isNaN(value)) {
                        minimum = java.lang.Math.min(minimum, value);
                    }
                }
            }
            if (minimum == java.lang.Double.POSITIVE_INFINITY) {
                return null;
            } else {
                return new java.lang.Double(minimum);
            }
        }
    }

    public static java.lang.Number findMaximumRangeValue(org.jfree.data.category.CategoryDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (dataset instanceof org.jfree.data.RangeInfo) {
            org.jfree.data.RangeInfo info = ((org.jfree.data.RangeInfo) (dataset));
            return new java.lang.Double(info.getRangeUpperBound(true));
        } else {
            double maximum = java.lang.Double.NEGATIVE_INFINITY;
            int seriesCount = dataset.getRowCount();
            int itemCount = dataset.getColumnCount();
            for (int series = 0; series < seriesCount; series++) {
                for (int item = 0; item < itemCount; item++) {
                    java.lang.Number value;
                    if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {
                        org.jfree.data.category.IntervalCategoryDataset icd = ((org.jfree.data.category.IntervalCategoryDataset) (dataset));
                        value = icd.getEndValue(series, item);
                    } else {
                        value = dataset.getValue(series, item);
                    }
                    if (value != null) {
                        maximum = java.lang.Math.max(maximum, value.doubleValue());
                    }
                }
            }
            if (maximum == java.lang.Double.NEGATIVE_INFINITY) {
                return null;
            } else {
                return new java.lang.Double(maximum);
            }
        }
    }

    public static java.lang.Number findMaximumRangeValue(org.jfree.data.xy.XYDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (dataset instanceof org.jfree.data.RangeInfo) {
            org.jfree.data.RangeInfo info = ((org.jfree.data.RangeInfo) (dataset));
            return new java.lang.Double(info.getRangeUpperBound(true));
        } else {
            double maximum = java.lang.Double.NEGATIVE_INFINITY;
            int seriesCount = dataset.getSeriesCount();
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double value;
                    if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {
                        org.jfree.data.xy.IntervalXYDataset intervalXYData = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
                        value = intervalXYData.getEndYValue(series, item);
                    } else if (dataset instanceof org.jfree.data.xy.OHLCDataset) {
                        org.jfree.data.xy.OHLCDataset highLowData = ((org.jfree.data.xy.OHLCDataset) (dataset));
                        value = highLowData.getHighValue(series, item);
                    } else {
                        value = dataset.getYValue(series, item);
                    }
                    if (!java.lang.Double.isNaN(value)) {
                        maximum = java.lang.Math.max(maximum, value);
                    }
                }
            }
            if (maximum == java.lang.Double.NEGATIVE_INFINITY) {
                return null;
            } else {
                return new java.lang.Double(maximum);
            }
        }
    }

    public static org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(dataset, 0.0);
    }

    public static org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset dataset, double base) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        int categoryCount = dataset.getColumnCount();
        for (int item = 0; item < categoryCount; item++) {
            double positive = base;
            double negative = base;
            int seriesCount = dataset.getRowCount();
            for (int series = 0; series < seriesCount; series++) {
                java.lang.Number number = dataset.getValue(series, item);
                if (number != null) {
                    double value = number.doubleValue();
                    if (value > 0.0) {
                        positive = positive + value;
                    }
                    if (value < 0.0) {
                        negative = negative + value;
                    }
                }
            }
            minimum = java.lang.Math.min(minimum, negative);
            maximum = java.lang.Math.max(maximum, positive);
        }
        if (minimum <= maximum) {
            result = new org.jfree.data.Range(minimum, maximum);
        }
        return result;
    }

    public static org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset dataset, org.jfree.data.KeyToGroupMap map) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        boolean hasValidData = false;
        org.jfree.data.Range result = null;
        int[] groupIndex = new int[dataset.getRowCount()];
        for (int i = 0; i < dataset.getRowCount(); i++) {
            groupIndex[i] = map.getGroupIndex(map.getGroup(dataset.getRowKey(i)));
        }
        int groupCount = map.getGroupCount();
        double[] minimum = new double[groupCount];
        double[] maximum = new double[groupCount];
        int categoryCount = dataset.getColumnCount();
        for (int item = 0; item < categoryCount; item++) {
            double[] positive = new double[groupCount];
            double[] negative = new double[groupCount];
            int seriesCount = dataset.getRowCount();
            for (int series = 0; series < seriesCount; series++) {
                java.lang.Number number = dataset.getValue(series, item);
                if (number != null) {
                    hasValidData = true;
                    double value = number.doubleValue();
                    if (value > 0.0) {
                        positive[groupIndex[series]] = positive[groupIndex[series]] + value;
                    }
                    if (value < 0.0) {
                        negative[groupIndex[series]] = negative[groupIndex[series]] + value;
                    }
                }
            }
            for (int g = 0; g < groupCount; g++) {
                minimum[g] = java.lang.Math.min(minimum[g], negative[g]);
                maximum[g] = java.lang.Math.max(maximum[g], positive[g]);
            }
        }
        if (hasValidData) {
            for (int j = 0; j < groupCount; j++) {
                result = org.jfree.data.Range.combine(result, new org.jfree.data.Range(minimum[j], maximum[j]));
            }
        }
        return result;
    }

    public static java.lang.Number findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        java.lang.Number result = null;
        boolean hasValidData = false;
        double minimum = 0.0;
        int categoryCount = dataset.getColumnCount();
        for (int item = 0; item < categoryCount; item++) {
            double total = 0.0;
            int seriesCount = dataset.getRowCount();
            for (int series = 0; series < seriesCount; series++) {
                java.lang.Number number = dataset.getValue(series, item);
                if (number != null) {
                    hasValidData = true;
                    double value = number.doubleValue();
                    if (value < 0.0) {
                        total = total + value;
                    }
                }
            }
            minimum = java.lang.Math.min(minimum, total);
        }
        if (hasValidData) {
            result = new java.lang.Double(minimum);
        }
        return result;
    }

    public static java.lang.Number findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        java.lang.Number result = null;
        boolean hasValidData = false;
        double maximum = 0.0;
        int categoryCount = dataset.getColumnCount();
        for (int item = 0; item < categoryCount; item++) {
            double total = 0.0;
            int seriesCount = dataset.getRowCount();
            for (int series = 0; series < seriesCount; series++) {
                java.lang.Number number = dataset.getValue(series, item);
                if (number != null) {
                    hasValidData = true;
                    double value = number.doubleValue();
                    if (value > 0.0) {
                        total = total + value;
                    }
                }
            }
            maximum = java.lang.Math.max(maximum, total);
        }
        if (hasValidData) {
            result = new java.lang.Double(maximum);
        }
        return result;
    }

    public static org.jfree.data.Range findStackedRangeBounds(org.jfree.data.xy.TableXYDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(dataset, 0.0);
    }

    public static org.jfree.data.Range findStackedRangeBounds(org.jfree.data.xy.TableXYDataset dataset, double base) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        double minimum = base;
        double maximum = base;
        for (int itemNo = 0; itemNo < dataset.getItemCount(); itemNo++) {
            double positive = base;
            double negative = base;
            int seriesCount = dataset.getSeriesCount();
            for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {
                double y = dataset.getYValue(seriesNo, itemNo);
                if (!java.lang.Double.isNaN(y)) {
                    if (y > 0.0) {
                        positive += y;
                    } else {
                        negative += y;
                    }
                }
            }
            if (positive > maximum) {
                maximum = positive;
            }
            if (negative < minimum) {
                minimum = negative;
            }
        }
        if (minimum <= maximum) {
            return new org.jfree.data.Range(minimum, maximum);
        } else {
            return null;
        }
    }

    public static double calculateStackTotal(org.jfree.data.xy.TableXYDataset dataset, int item) {
        double total = 0.0;
        int seriesCount = dataset.getSeriesCount();
        for (int s = 0; s < seriesCount; s++) {
            double value = dataset.getYValue(s, item);
            if (!java.lang.Double.isNaN(value)) {
                total = total + value;
            }
        }
        return total;
    }

    public static org.jfree.data.Range findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        boolean allItemsNull = true;
        double minimum = 0.0;
        double maximum = 0.0;
        for (int row = 0; row < dataset.getRowCount(); row++) {
            double runningTotal = 0.0;
            for (int column = 0; column <= (dataset.getColumnCount() - 1); column++) {
                java.lang.Number n = dataset.getValue(row, column);
                if (n != null) {
                    allItemsNull = false;
                    double value = n.doubleValue();
                    if (!java.lang.Double.isNaN(value)) {
                        runningTotal = runningTotal + value;
                        minimum = java.lang.Math.min(minimum, runningTotal);
                        maximum = java.lang.Math.max(maximum, runningTotal);
                    }
                }
            }
        }
        if (!allItemsNull) {
            return new org.jfree.data.Range(minimum, maximum);
        } else {
            return null;
        }
    }
}
[616275] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858706201
GPR[SSUN]-1659858706201
1256214381
GPR[ESUN]-1659858706517
GPR[SSUN]-1659858706517
1256214381
GPR[SPVATF]-1659858706825
GPR[EPVATF]-1659858707073
GPR[SPS]-1659858707073
[617611] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1744.
GPR[EPS]-1659858707537
GPR[ESUN]-1659858707537
GPR[SSUN]-1659858707537
1256214381
GPR[ESUN]-1659858707849
GPR[SSUN]-1659858707849
1256214381
GPR[SPVATF]-1659858708170
GPR[EPVATF]-1659858708506
GPR[SPS]-1659858708507
[619037] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1738.
GPR[EPS]-1659858708963
GPR[SPVATF]-1659858708963
GPR[EPVATF]-1659858709213
GPR[SPS]-1659858709213
[619747] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1738.
GPR[EPS]-1659858709673
GPR[ESUN]-1659858709673
GPR[SSUN]-1659858709673
1256214381
GPR[SPVATF]-1659858710001
GPR[EPVATF]-1659858710255
GPR[SPS]-1659858710255
[620795] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1735.
GPR[EPS]-1659858710721
GPR[SPVATF]-1659858710721
GPR[EPVATF]-1659858710976
GPR[SPS]-1659858710976
[621518] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1735.
GPR[EPS]-1659858711444
GPR[ESUN]-1659858711444
GPR[SSUN]-1659858711444
1256214381
GPR[SPVATF]-1659858711758
GPR[EPVATF]-1659858712012
GPR[SPS]-1659858712012
[622550] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1734.
GPR[EPS]-1659858712476
GPR[ESUN]-1659858712477
GPR[SSUN]-1659858712477
1256214381
GPR[ESUN]-1659858712784
GPR[SSUN]-1659858712784
1256214381
GPR[ESUN]-1659858713095
GPR[SSUN]-1659858713095
1256214381
GPR[ESUN]-1659858713404
GPR[SSUN]-1659858713404
1256214381
GPR[SPVATF]-1659858713776
GPR[EPVATF]-1659858714036
GPR[SPS]-1659858714036
[624593] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1730.
GPR[EPS]-1659858714519
GPR[ESUN]-1659858714519
GPR[SSUN]-1659858714519
1256214381
GPR[ESUN]-1659858714830
GPR[SSUN]-1659858714830
1256214381
GPR[SPVATF]-1659858715140
GPR[EPVATF]-1659858715394
GPR[SPS]-1659858715394
[625937] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1726.
GPR[EPS]-1659858715863
GPR[SPVATF]-1659858715863
GPR[EPVATF]-1659858716122
GPR[SPS]-1659858716122
[626676] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.ChartFactory:1726.
GPR[EPS]-1659858716602
GPR[ESUN]-1659858716602
GPR[SSUN]-1659858716602
1355738515
GPR[SPVATF]-1659858716735
GPR[EPVATF]-1659858716994
GPR[SPS]-1659858716994
[627252] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class DatasetUtilities {
    private DatasetUtilities() {
    }

    public static double calculatePieDatasetTotal(org.jfree.data.general.PieDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        java.util.List keys = dataset.getKeys();
        double totalValue = 0;
        java.util.Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            java.lang.Comparable current = ((java.lang.Comparable) (iterator.next()));
            if (current != null) {
                java.lang.Number value = dataset.getValue(current);
                double v = 0.0;
                if (value != null) {
                    v = value.doubleValue();
                }
                if (v > 0) {
                    totalValue = totalValue + v;
                }
            }
        } 
        return totalValue;
    }

    public static org.jfree.data.general.PieDataset createPieDatasetForRow(org.jfree.data.category.CategoryDataset dataset, java.lang.Comparable rowKey) {
        int row = dataset.getRowIndex(rowKey);
        return org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(dataset, row);
    }

    public static org.jfree.data.general.PieDataset createPieDatasetForRow(org.jfree.data.category.CategoryDataset dataset, int row) {
        org.jfree.data.general.DefaultPieDataset result = new org.jfree.data.general.DefaultPieDataset();
        int columnCount = dataset.getColumnCount();
        for (int current = 0; current < columnCount; current++) {
            java.lang.Comparable columnKey = dataset.getColumnKey(current);
            result.setValue(columnKey, dataset.getValue(row, current));
        }
        return result;
    }

    public static org.jfree.data.general.PieDataset createPieDatasetForColumn(org.jfree.data.category.CategoryDataset dataset, java.lang.Comparable columnKey) {
        int column = dataset.getColumnIndex(columnKey);
        return org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(dataset, column);
    }

    public static org.jfree.data.general.PieDataset createPieDatasetForColumn(org.jfree.data.category.CategoryDataset dataset, int column) {
        org.jfree.data.general.DefaultPieDataset result = new org.jfree.data.general.DefaultPieDataset();
        int rowCount = dataset.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            java.lang.Comparable rowKey = dataset.getRowKey(i);
            result.setValue(rowKey, dataset.getValue(i, column));
        }
        return result;
    }

    public static org.jfree.data.general.PieDataset createConsolidatedPieDataset(org.jfree.data.general.PieDataset source, java.lang.Comparable key, double minimumPercent) {
        return org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(source, key, minimumPercent, 2);
    }

    public static org.jfree.data.general.PieDataset createConsolidatedPieDataset(org.jfree.data.general.PieDataset source, java.lang.Comparable key, double minimumPercent, int minItems) {
        org.jfree.data.general.DefaultPieDataset result = new org.jfree.data.general.DefaultPieDataset();
        double total = org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(source);
        java.util.List keys = source.getKeys();
        java.util.ArrayList otherKeys = new java.util.ArrayList();
        java.util.Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            java.lang.Comparable currentKey = ((java.lang.Comparable) (iterator.next()));
            java.lang.Number dataValue = source.getValue(currentKey);
            if (dataValue != null) {
                double value = dataValue.doubleValue();
                if ((value / total) < minimumPercent) {
                    otherKeys.add(currentKey);
                }
            }
        } 
        iterator = keys.iterator();
        double otherValue = 0;
        while (iterator.hasNext()) {
            java.lang.Comparable currentKey = ((java.lang.Comparable) (iterator.next()));
            java.lang.Number dataValue = source.getValue(currentKey);
            if (dataValue != null) {
                if (otherKeys.contains(currentKey) && (otherKeys.size() >= minItems)) {
                    otherValue += dataValue.doubleValue();
                } else {
                    result.setValue(currentKey, dataValue);
                }
            }
        } 
        if (otherKeys.size() >= minItems) {
            result.setValue(key, otherValue);
        }
        return result;
    }

    public static org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.String rowKeyPrefix, java.lang.String columnKeyPrefix, double[][] data) {
        org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset();
        for (int r = 0; r < data.length; r++) {
            java.lang.String rowKey = rowKeyPrefix + (r + 1);
            for (int c = 0; c < data[r].length; c++) {
                java.lang.String columnKey = columnKeyPrefix + (c + 1);
                result.addValue(new java.lang.Double(data[r][c]), rowKey, columnKey);
            }
        }
        return result;
    }

    public static org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.String rowKeyPrefix, java.lang.String columnKeyPrefix, java.lang.Number[][] data) {
        org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset();
        for (int r = 0; r < data.length; r++) {
            java.lang.String rowKey = rowKeyPrefix + (r + 1);
            for (int c = 0; c < data[r].length; c++) {
                java.lang.String columnKey = columnKeyPrefix + (c + 1);
                result.addValue(data[r][c], rowKey, columnKey);
            }
        }
        return result;
    }

    public static org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.Comparable[] rowKeys, java.lang.Comparable[] columnKeys, double[][] data) {
        if (rowKeys == null) {
            throw new java.lang.IllegalArgumentException("Null 'rowKeys' argument.");
        }
        if (columnKeys == null) {
            throw new java.lang.IllegalArgumentException("Null 'columnKeys' argument.");
        }
        if (org.jfree.chart.util.ArrayUtilities.hasDuplicateItems(rowKeys)) {
            throw new java.lang.IllegalArgumentException("Duplicate items in 'rowKeys'.");
        }
        if (org.jfree.chart.util.ArrayUtilities.hasDuplicateItems(columnKeys)) {
            throw new java.lang.IllegalArgumentException("Duplicate items in 'columnKeys'.");
        }
        if (rowKeys.length != data.length) {
            throw new java.lang.IllegalArgumentException("The number of row keys does not match the number of rows in " + "the data array.");
        }
        int columnCount = 0;
        for (int r = 0; r < data.length; r++) {
            columnCount = java.lang.Math.max(columnCount, data[r].length);
        }
        if (columnKeys.length != columnCount) {
            throw new java.lang.IllegalArgumentException("The number of column keys does not match the number of " + "columns in the data array.");
        }
        org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset();
        for (int r = 0; r < data.length; r++) {
            java.lang.Comparable rowKey = rowKeys[r];
            for (int c = 0; c < data[r].length; c++) {
                java.lang.Comparable columnKey = columnKeys[c];
                result.addValue(new java.lang.Double(data[r][c]), rowKey, columnKey);
            }
        }
        return result;
    }

    public static org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.Comparable rowKey, org.jfree.data.KeyedValues rowData) {
        if (rowKey == null) {
            throw new java.lang.IllegalArgumentException("Null 'rowKey' argument.");
        }
        if (rowData == null) {
            throw new java.lang.IllegalArgumentException("Null 'rowData' argument.");
        }
        org.jfree.data.category.DefaultCategoryDataset result = new org.jfree.data.category.DefaultCategoryDataset();
        for (int i = 0; i < rowData.getItemCount(); i++) {
            result.addValue(rowData.getValue(i), rowKey, rowData.getKey(i));
        }
        return result;
    }

    public static org.jfree.data.xy.XYDataset sampleFunction2D(org.jfree.data.function.Function2D f, double start, double end, int samples, java.lang.Comparable seriesKey) {
        org.jfree.data.xy.XYSeries series = org.jfree.data.general.DatasetUtilities.sampleFunction2DToSeries(f, start, end, samples, seriesKey);
        org.jfree.data.xy.XYSeriesCollection collection = new org.jfree.data.xy.XYSeriesCollection(series);
        return collection;
    }

    public static org.jfree.data.xy.XYSeries sampleFunction2DToSeries(org.jfree.data.function.Function2D f, double start, double end, int samples, java.lang.Comparable seriesKey) {
        if (f == null) {
            throw new java.lang.IllegalArgumentException("Null 'f' argument.");
        }
        if (seriesKey == null) {
            throw new java.lang.IllegalArgumentException("Null 'seriesKey' argument.");
        }
        if (start >= end) {
            throw new java.lang.IllegalArgumentException("Requires 'start' < 'end'.");
        }
        if (samples < 2) {
            throw new java.lang.IllegalArgumentException("Requires 'samples' > 1");
        }
        org.jfree.data.xy.XYSeries series = new org.jfree.data.xy.XYSeries(seriesKey);
        double step = (end - start) / (samples - 1);
        for (int i = 0; i < samples; i++) {
            double x = start + (step * i);
            series.add(x, f.getValue(x));
        }
        return series;
    }

    public static boolean isEmptyOrNull(org.jfree.data.general.PieDataset dataset) {
        if (dataset == null) {
            return true;
        }
        int itemCount = dataset.getItemCount();
        if (itemCount == 0) {
            return true;
        }
        for (int item = 0; item < itemCount; item++) {
            java.lang.Number y = dataset.getValue(item);
            if (y != null) {
                double yy = y.doubleValue();
                if (yy > 0.0) {
                    return false;
                }
            }
        }
        return true;
    }

    public static boolean isEmptyOrNull(org.jfree.data.category.CategoryDataset dataset) {
        if (dataset == null) {
            return true;
        }
        int rowCount = dataset.getRowCount();
        int columnCount = dataset.getColumnCount();
        if ((rowCount == 0) || (columnCount == 0)) {
            return true;
        }
        for (int r = 0; r < rowCount; r++) {
            for (int c = 0; c < columnCount; c++) {
                if (dataset.getValue(r, c) != null) {
                    return false;
                }
            }
        }
        return true;
    }

    public static boolean isEmptyOrNull(org.jfree.data.xy.XYDataset dataset) {
        if (dataset != null) {
            for (int s = 0; s < dataset.getSeriesCount(); s++) {
                if (dataset.getItemCount(s) > 0) {
                    return false;
                }
            }
        }
        return true;
    }

    public static org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.findDomainBounds(dataset, true);
    }

    public static org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset dataset, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        if (dataset instanceof org.jfree.data.DomainInfo) {
            org.jfree.data.DomainInfo info = ((org.jfree.data.DomainInfo) (dataset));
            result = info.getDomainBounds(includeInterval);
        } else {
            result = org.jfree.data.general.DatasetUtilities.iterateDomainBounds(dataset, includeInterval);
        }
        return result;
    }

    public static org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset dataset, java.util.List visibleSeriesKeys, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        if (dataset instanceof org.jfree.data.xy.XYDomainInfo) {
            org.jfree.data.xy.XYDomainInfo info = ((org.jfree.data.xy.XYDomainInfo) (dataset));
            result = info.getDomainBounds(visibleSeriesKeys, includeInterval);
        } else {
            result = org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds(dataset, visibleSeriesKeys, includeInterval);
        }
        return result;
    }

    public static org.jfree.data.Range iterateDomainBounds(org.jfree.data.xy.XYDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.iterateDomainBounds(dataset, true);
    }

    public static org.jfree.data.Range iterateDomainBounds(org.jfree.data.xy.XYDataset dataset, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        int seriesCount = dataset.getSeriesCount();
        double lvalue;
        double uvalue;
        if (includeInterval && (dataset instanceof org.jfree.data.xy.IntervalXYDataset)) {
            org.jfree.data.xy.IntervalXYDataset intervalXYData = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    lvalue = intervalXYData.getStartXValue(series, item);
                    uvalue = intervalXYData.getEndXValue(series, item);
                    if (!java.lang.Double.isNaN(lvalue)) {
                        minimum = java.lang.Math.min(minimum, lvalue);
                    }
                    if (!java.lang.Double.isNaN(uvalue)) {
                        maximum = java.lang.Math.max(maximum, uvalue);
                    }
                }
            }
        } else {
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    lvalue = dataset.getXValue(series, item);
                    uvalue = lvalue;
                    if (!java.lang.Double.isNaN(lvalue)) {
                        minimum = java.lang.Math.min(minimum, lvalue);
                        maximum = java.lang.Math.max(maximum, uvalue);
                    }
                }
            }
        }
        if (minimum > maximum) {
            return null;
        } else {
            return new org.jfree.data.Range(minimum, maximum);
        }
    }

    public static org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.findRangeBounds(dataset, true);
    }

    public static org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset dataset, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        if (dataset instanceof org.jfree.data.RangeInfo) {
            org.jfree.data.RangeInfo info = ((org.jfree.data.RangeInfo) (dataset));
            result = info.getRangeBounds(includeInterval);
        } else {
            result = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(dataset, includeInterval);
        }
        return result;
    }

    public static org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset dataset, java.util.List visibleSeriesKeys, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        if (dataset instanceof org.jfree.data.category.CategoryRangeInfo) {
            org.jfree.data.category.CategoryRangeInfo info = ((org.jfree.data.category.CategoryRangeInfo) (dataset));
            result = info.getRangeBounds(visibleSeriesKeys, includeInterval);
        } else {
            result = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, includeInterval);
        }
        return result;
    }

    public static org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.findRangeBounds(dataset, true);
    }

    public static org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset dataset, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        if (dataset instanceof org.jfree.data.RangeInfo) {
            org.jfree.data.RangeInfo info = ((org.jfree.data.RangeInfo) (dataset));
            result = info.getRangeBounds(includeInterval);
        } else {
            result = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(dataset, includeInterval);
        }
        return result;
    }

    public static org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset dataset, java.util.List visibleSeriesKeys, org.jfree.data.Range xRange, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        if (dataset instanceof org.jfree.data.xy.XYRangeInfo) {
            org.jfree.data.xy.XYRangeInfo info = ((org.jfree.data.xy.XYRangeInfo) (dataset));
            result = info.getRangeBounds(visibleSeriesKeys, xRange, includeInterval);
        } else {
            result = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(dataset, visibleSeriesKeys, xRange, includeInterval);
        }
        return result;
    }

    public static org.jfree.data.Range iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset dataset, boolean includeInterval) {
        return org.jfree.data.general.DatasetUtilities.iterateRangeBounds(dataset, includeInterval);
    }

    public static org.jfree.data.Range iterateRangeBounds(org.jfree.data.category.CategoryDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.iterateRangeBounds(dataset, true);
    }

    public static org.jfree.data.Range iterateRangeBounds(org.jfree.data.category.CategoryDataset dataset, boolean includeInterval) {
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        int rowCount = dataset.getRowCount();
        int columnCount = dataset.getColumnCount();
        if (includeInterval && (dataset instanceof org.jfree.data.category.IntervalCategoryDataset)) {
            org.jfree.data.category.IntervalCategoryDataset icd = ((org.jfree.data.category.IntervalCategoryDataset) (dataset));
            java.lang.Number lvalue;
            java.lang.Number uvalue;
            for (int row = 0; row < rowCount; row++) {
                for (int column = 0; column < columnCount; column++) {
                    lvalue = icd.getStartValue(row, column);
                    uvalue = icd.getEndValue(row, column);
                    if ((lvalue != null) && (!java.lang.Double.isNaN(lvalue.doubleValue()))) {
                        minimum = java.lang.Math.min(minimum, lvalue.doubleValue());
                    }
                    if ((uvalue != null) && (!java.lang.Double.isNaN(uvalue.doubleValue()))) {
                        maximum = java.lang.Math.max(maximum, uvalue.doubleValue());
                    }
                }
            }
        } else {
            for (int row = 0; row < rowCount; row++) {
                for (int column = 0; column < columnCount; column++) {
                    java.lang.Number value = dataset.getValue(row, column);
                    if (value != null) {
                        double v = value.doubleValue();
                        if (!java.lang.Double.isNaN(v)) {
                            minimum = java.lang.Math.min(minimum, v);
                            maximum = java.lang.Math.max(maximum, v);
                        }
                    }
                }
            }
        }
        if (minimum == java.lang.Double.POSITIVE_INFINITY) {
            return null;
        } else {
            return new org.jfree.data.Range(minimum, maximum);
        }
    }

    public static org.jfree.data.Range iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset dataset, java.util.List visibleSeriesKeys, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (visibleSeriesKeys == null) {
            throw new java.lang.IllegalArgumentException("Null 'visibleSeriesKeys' argument.");
        }
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        int columnCount = dataset.getColumnCount();
        if (includeInterval && (dataset instanceof org.jfree.data.statistics.BoxAndWhiskerCategoryDataset)) {
            org.jfree.data.statistics.BoxAndWhiskerCategoryDataset bx = ((org.jfree.data.statistics.BoxAndWhiskerCategoryDataset) (dataset));
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.getRowIndex(seriesKey);
                int itemCount = dataset.getColumnCount();
                for (int item = 0; item < itemCount; item++) {
                    java.lang.Number lvalue = bx.getMinRegularValue(series, item);
                    if (lvalue == null) {
                        lvalue = bx.getValue(series, item);
                    }
                    java.lang.Number uvalue = bx.getMaxRegularValue(series, item);
                    if (uvalue == null) {
                        uvalue = bx.getValue(series, item);
                    }
                    if (lvalue != null) {
                        minimum = java.lang.Math.min(minimum, lvalue.doubleValue());
                    }
                    if (uvalue != null) {
                        maximum = java.lang.Math.max(maximum, uvalue.doubleValue());
                    }
                }
            } 
        } else if (includeInterval && (dataset instanceof org.jfree.data.category.IntervalCategoryDataset)) {
            org.jfree.data.category.IntervalCategoryDataset icd = ((org.jfree.data.category.IntervalCategoryDataset) (dataset));
            java.lang.Number lvalue;
            java.lang.Number uvalue;
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.getRowIndex(seriesKey);
                for (int column = 0; column < columnCount; column++) {
                    lvalue = icd.getStartValue(series, column);
                    uvalue = icd.getEndValue(series, column);
                    if ((lvalue != null) && (!java.lang.Double.isNaN(lvalue.doubleValue()))) {
                        minimum = java.lang.Math.min(minimum, lvalue.doubleValue());
                    }
                    if ((uvalue != null) && (!java.lang.Double.isNaN(uvalue.doubleValue()))) {
                        maximum = java.lang.Math.max(maximum, uvalue.doubleValue());
                    }
                }
            } 
        } else if (includeInterval && (dataset instanceof org.jfree.data.statistics.MultiValueCategoryDataset)) {
            org.jfree.data.statistics.MultiValueCategoryDataset mvcd = ((org.jfree.data.statistics.MultiValueCategoryDataset) (dataset));
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.getRowIndex(seriesKey);
                for (int column = 0; column < columnCount; column++) {
                    java.util.List values = mvcd.getValues(series, column);
                    java.util.Iterator valueIterator = values.iterator();
                    while (valueIterator.hasNext()) {
                        java.lang.Object o = valueIterator.next();
                        if (o instanceof java.lang.Number) {
                            double v = ((java.lang.Number) (o)).doubleValue();
                            if (!java.lang.Double.isNaN(v)) {
                                minimum = java.lang.Math.min(minimum, v);
                                maximum = java.lang.Math.max(maximum, v);
                            }
                        }
                    } 
                }
            } 
        } else if (includeInterval && (dataset instanceof org.jfree.data.statistics.StatisticalCategoryDataset)) {
            org.jfree.data.statistics.StatisticalCategoryDataset scd = ((org.jfree.data.statistics.StatisticalCategoryDataset) (dataset));
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.getRowIndex(seriesKey);
                for (int column = 0; column < columnCount; column++) {
                    java.lang.Number meanN = scd.getMeanValue(series, column);
                    if (meanN != null) {
                        double std = 0.0;
                        java.lang.Number stdN = scd.getStdDevValue(series, column);
                        if (stdN != null) {
                            std = stdN.doubleValue();
                            if (java.lang.Double.isNaN(std)) {
                                std = 0.0;
                            }
                        }
                        double mean = meanN.doubleValue();
                        if (!java.lang.Double.isNaN(mean)) {
                            minimum = java.lang.Math.min(minimum, mean - std);
                            maximum = java.lang.Math.max(maximum, mean + std);
                        }
                    }
                }
            } 
        } else {
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.getRowIndex(seriesKey);
                for (int column = 0; column < columnCount; column++) {
                    java.lang.Number value = dataset.getValue(series, column);
                    if (value != null) {
                        double v = value.doubleValue();
                        if (!java.lang.Double.isNaN(v)) {
                            minimum = java.lang.Math.min(minimum, v);
                            maximum = java.lang.Math.max(maximum, v);
                        }
                    }
                }
            } 
        }
        if (minimum == java.lang.Double.POSITIVE_INFINITY) {
            return null;
        } else {
            return new org.jfree.data.Range(minimum, maximum);
        }
    }

    public static org.jfree.data.Range iterateXYRangeBounds(org.jfree.data.xy.XYDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.iterateRangeBounds(dataset);
    }

    public static org.jfree.data.Range iterateRangeBounds(org.jfree.data.xy.XYDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.iterateRangeBounds(dataset, true);
    }

    public static org.jfree.data.Range iterateRangeBounds(org.jfree.data.xy.XYDataset dataset, boolean includeInterval) {
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        int seriesCount = dataset.getSeriesCount();
        if (includeInterval && (dataset instanceof org.jfree.data.xy.IntervalXYDataset)) {
            org.jfree.data.xy.IntervalXYDataset ixyd = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double lvalue = ixyd.getStartYValue(series, item);
                    double uvalue = ixyd.getEndYValue(series, item);
                    if (!java.lang.Double.isNaN(lvalue)) {
                        minimum = java.lang.Math.min(minimum, lvalue);
                    }
                    if (!java.lang.Double.isNaN(uvalue)) {
                        maximum = java.lang.Math.max(maximum, uvalue);
                    }
                }
            }
        } else if (includeInterval && (dataset instanceof org.jfree.data.xy.OHLCDataset)) {
            org.jfree.data.xy.OHLCDataset ohlc = ((org.jfree.data.xy.OHLCDataset) (dataset));
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double lvalue = ohlc.getLowValue(series, item);
                    double uvalue = ohlc.getHighValue(series, item);
                    if (!java.lang.Double.isNaN(lvalue)) {
                        minimum = java.lang.Math.min(minimum, lvalue);
                    }
                    if (!java.lang.Double.isNaN(uvalue)) {
                        maximum = java.lang.Math.max(maximum, uvalue);
                    }
                }
            }
        } else {
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double value = dataset.getYValue(series, item);
                    if (!java.lang.Double.isNaN(value)) {
                        minimum = java.lang.Math.min(minimum, value);
                        maximum = java.lang.Math.max(maximum, value);
                    }
                }
            }
        }
        if (minimum == java.lang.Double.POSITIVE_INFINITY) {
            return null;
        } else {
            return new org.jfree.data.Range(minimum, maximum);
        }
    }

    public static org.jfree.data.Range iterateToFindDomainBounds(org.jfree.data.xy.XYDataset dataset, java.util.List visibleSeriesKeys, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (visibleSeriesKeys == null) {
            throw new java.lang.IllegalArgumentException("Null 'visibleSeriesKeys' argument.");
        }
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        if (includeInterval && (dataset instanceof org.jfree.data.xy.IntervalXYDataset)) {
            org.jfree.data.xy.IntervalXYDataset ixyd = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.indexOf(seriesKey);
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double lvalue = ixyd.getStartXValue(series, item);
                    double uvalue = ixyd.getEndXValue(series, item);
                    if (!java.lang.Double.isNaN(lvalue)) {
                        minimum = java.lang.Math.min(minimum, lvalue);
                    }
                    if (!java.lang.Double.isNaN(uvalue)) {
                        maximum = java.lang.Math.max(maximum, uvalue);
                    }
                }
            } 
        } else {
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.indexOf(seriesKey);
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double x = dataset.getXValue(series, item);
                    if (!java.lang.Double.isNaN(x)) {
                        minimum = java.lang.Math.min(minimum, x);
                        maximum = java.lang.Math.max(maximum, x);
                    }
                }
            } 
        }
        if (minimum == java.lang.Double.POSITIVE_INFINITY) {
            return null;
        } else {
            return new org.jfree.data.Range(minimum, maximum);
        }
    }

    public static org.jfree.data.Range iterateToFindRangeBounds(org.jfree.data.xy.XYDataset dataset, java.util.List visibleSeriesKeys, org.jfree.data.Range xRange, boolean includeInterval) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (visibleSeriesKeys == null) {
            throw new java.lang.IllegalArgumentException("Null 'visibleSeriesKeys' argument.");
        }
        if (xRange == null) {
            throw new java.lang.IllegalArgumentException("Null 'xRange' argument");
        }
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        if (includeInterval && (dataset instanceof org.jfree.data.xy.OHLCDataset)) {
            org.jfree.data.xy.OHLCDataset ohlc = ((org.jfree.data.xy.OHLCDataset) (dataset));
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.indexOf(seriesKey);
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double x = ohlc.getXValue(series, item);
                    if (xRange.contains(x)) {
                        double lvalue = ohlc.getLowValue(series, item);
                        double uvalue = ohlc.getHighValue(series, item);
                        if (!java.lang.Double.isNaN(lvalue)) {
                            minimum = java.lang.Math.min(minimum, lvalue);
                        }
                        if (!java.lang.Double.isNaN(uvalue)) {
                            maximum = java.lang.Math.max(maximum, uvalue);
                        }
                    }
                }
            } 
        } else if (includeInterval && (dataset instanceof org.jfree.data.statistics.BoxAndWhiskerXYDataset)) {
            org.jfree.data.statistics.BoxAndWhiskerXYDataset bx = ((org.jfree.data.statistics.BoxAndWhiskerXYDataset) (dataset));
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.indexOf(seriesKey);
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double x = bx.getXValue(series, item);
                    if (xRange.contains(x)) {
                        java.lang.Number lvalue = bx.getMinRegularValue(series, item);
                        java.lang.Number uvalue = bx.getMaxRegularValue(series, item);
                        if (lvalue != null) {
                            minimum = java.lang.Math.min(minimum, lvalue.doubleValue());
                        }
                        if (uvalue != null) {
                            maximum = java.lang.Math.max(maximum, uvalue.doubleValue());
                        }
                    }
                }
            } 
        } else if (includeInterval && (dataset instanceof org.jfree.data.xy.IntervalXYDataset)) {
            org.jfree.data.xy.IntervalXYDataset ixyd = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.indexOf(seriesKey);
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double x = ixyd.getXValue(series, item);
                    if (xRange.contains(x)) {
                        double lvalue = ixyd.getStartYValue(series, item);
                        double uvalue = ixyd.getEndYValue(series, item);
                        if (!java.lang.Double.isNaN(lvalue)) {
                            minimum = java.lang.Math.min(minimum, lvalue);
                        }
                        if (!java.lang.Double.isNaN(uvalue)) {
                            maximum = java.lang.Math.max(maximum, uvalue);
                        }
                    }
                }
            } 
        } else {
            java.util.Iterator iterator = visibleSeriesKeys.iterator();
            while (iterator.hasNext()) {
                java.lang.Comparable seriesKey = ((java.lang.Comparable) (iterator.next()));
                int series = dataset.indexOf(seriesKey);
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double x = dataset.getXValue(series, item);
                    double y = dataset.getYValue(series, item);
                    if (xRange.contains(x)) {
                        if (!java.lang.Double.isNaN(y)) {
                            minimum = java.lang.Math.min(minimum, y);
                            maximum = java.lang.Math.max(maximum, y);
                        }
                    }
                }
            } 
        }
        if (minimum == java.lang.Double.POSITIVE_INFINITY) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(584).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(584).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(584).collectInput("maximum",maximum);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(584).collectInput("xRange",xRange);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(584).collectInput("minimum",minimum);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(584).collectInput("dataset",dataset);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(584).collectInput("includeInterval",includeInterval);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(584).collectInput("visibleSeriesKeys",visibleSeriesKeys);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(584).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(584).collectionEnds();
            }
            if (runtimeAngelicValue)
                return null;

        } else {
            return new org.jfree.data.Range(minimum, maximum);
        }
    }

    public static java.lang.Number findMinimumDomainValue(org.jfree.data.xy.XYDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        java.lang.Number result = null;
        if (dataset instanceof org.jfree.data.DomainInfo) {
            org.jfree.data.DomainInfo info = ((org.jfree.data.DomainInfo) (dataset));
            return new java.lang.Double(info.getDomainLowerBound(true));
        } else {
            double minimum = java.lang.Double.POSITIVE_INFINITY;
            int seriesCount = dataset.getSeriesCount();
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double value;
                    if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {
                        org.jfree.data.xy.IntervalXYDataset intervalXYData = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
                        value = intervalXYData.getStartXValue(series, item);
                    } else {
                        value = dataset.getXValue(series, item);
                    }
                    if (!java.lang.Double.isNaN(value)) {
                        minimum = java.lang.Math.min(minimum, value);
                    }
                }
            }
            if (minimum == java.lang.Double.POSITIVE_INFINITY) {
                result = null;
            } else {
                result = new java.lang.Double(minimum);
            }
        }
        return result;
    }

    public static java.lang.Number findMaximumDomainValue(org.jfree.data.xy.XYDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        java.lang.Number result = null;
        if (dataset instanceof org.jfree.data.DomainInfo) {
            org.jfree.data.DomainInfo info = ((org.jfree.data.DomainInfo) (dataset));
            return new java.lang.Double(info.getDomainUpperBound(true));
        } else {
            double maximum = java.lang.Double.NEGATIVE_INFINITY;
            int seriesCount = dataset.getSeriesCount();
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double value;
                    if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {
                        org.jfree.data.xy.IntervalXYDataset intervalXYData = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
                        value = intervalXYData.getEndXValue(series, item);
                    } else {
                        value = dataset.getXValue(series, item);
                    }
                    if (!java.lang.Double.isNaN(value)) {
                        maximum = java.lang.Math.max(maximum, value);
                    }
                }
            }
            if (maximum == java.lang.Double.NEGATIVE_INFINITY) {
                result = null;
            } else {
                result = new java.lang.Double(maximum);
            }
        }
        return result;
    }

    public static java.lang.Number findMinimumRangeValue(org.jfree.data.category.CategoryDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (dataset instanceof org.jfree.data.RangeInfo) {
            org.jfree.data.RangeInfo info = ((org.jfree.data.RangeInfo) (dataset));
            return new java.lang.Double(info.getRangeLowerBound(true));
        } else {
            double minimum = java.lang.Double.POSITIVE_INFINITY;
            int seriesCount = dataset.getRowCount();
            int itemCount = dataset.getColumnCount();
            for (int series = 0; series < seriesCount; series++) {
                for (int item = 0; item < itemCount; item++) {
                    java.lang.Number value;
                    if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {
                        org.jfree.data.category.IntervalCategoryDataset icd = ((org.jfree.data.category.IntervalCategoryDataset) (dataset));
                        value = icd.getStartValue(series, item);
                    } else {
                        value = dataset.getValue(series, item);
                    }
                    if (value != null) {
                        minimum = java.lang.Math.min(minimum, value.doubleValue());
                    }
                }
            }
            if (minimum == java.lang.Double.POSITIVE_INFINITY) {
                return null;
            } else {
                return new java.lang.Double(minimum);
            }
        }
    }

    public static java.lang.Number findMinimumRangeValue(org.jfree.data.xy.XYDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (dataset instanceof org.jfree.data.RangeInfo) {
            org.jfree.data.RangeInfo info = ((org.jfree.data.RangeInfo) (dataset));
            return new java.lang.Double(info.getRangeLowerBound(true));
        } else {
            double minimum = java.lang.Double.POSITIVE_INFINITY;
            int seriesCount = dataset.getSeriesCount();
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double value;
                    if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {
                        org.jfree.data.xy.IntervalXYDataset intervalXYData = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
                        value = intervalXYData.getStartYValue(series, item);
                    } else if (dataset instanceof org.jfree.data.xy.OHLCDataset) {
                        org.jfree.data.xy.OHLCDataset highLowData = ((org.jfree.data.xy.OHLCDataset) (dataset));
                        value = highLowData.getLowValue(series, item);
                    } else {
                        value = dataset.getYValue(series, item);
                    }
                    if (!java.lang.Double.isNaN(value)) {
                        minimum = java.lang.Math.min(minimum, value);
                    }
                }
            }
            if (minimum == java.lang.Double.POSITIVE_INFINITY) {
                return null;
            } else {
                return new java.lang.Double(minimum);
            }
        }
    }

    public static java.lang.Number findMaximumRangeValue(org.jfree.data.category.CategoryDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (dataset instanceof org.jfree.data.RangeInfo) {
            org.jfree.data.RangeInfo info = ((org.jfree.data.RangeInfo) (dataset));
            return new java.lang.Double(info.getRangeUpperBound(true));
        } else {
            double maximum = java.lang.Double.NEGATIVE_INFINITY;
            int seriesCount = dataset.getRowCount();
            int itemCount = dataset.getColumnCount();
            for (int series = 0; series < seriesCount; series++) {
                for (int item = 0; item < itemCount; item++) {
                    java.lang.Number value;
                    if (dataset instanceof org.jfree.data.category.IntervalCategoryDataset) {
                        org.jfree.data.category.IntervalCategoryDataset icd = ((org.jfree.data.category.IntervalCategoryDataset) (dataset));
                        value = icd.getEndValue(series, item);
                    } else {
                        value = dataset.getValue(series, item);
                    }
                    if (value != null) {
                        maximum = java.lang.Math.max(maximum, value.doubleValue());
                    }
                }
            }
            if (maximum == java.lang.Double.NEGATIVE_INFINITY) {
                return null;
            } else {
                return new java.lang.Double(maximum);
            }
        }
    }

    public static java.lang.Number findMaximumRangeValue(org.jfree.data.xy.XYDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        if (dataset instanceof org.jfree.data.RangeInfo) {
            org.jfree.data.RangeInfo info = ((org.jfree.data.RangeInfo) (dataset));
            return new java.lang.Double(info.getRangeUpperBound(true));
        } else {
            double maximum = java.lang.Double.NEGATIVE_INFINITY;
            int seriesCount = dataset.getSeriesCount();
            for (int series = 0; series < seriesCount; series++) {
                int itemCount = dataset.getItemCount(series);
                for (int item = 0; item < itemCount; item++) {
                    double value;
                    if (dataset instanceof org.jfree.data.xy.IntervalXYDataset) {
                        org.jfree.data.xy.IntervalXYDataset intervalXYData = ((org.jfree.data.xy.IntervalXYDataset) (dataset));
                        value = intervalXYData.getEndYValue(series, item);
                    } else if (dataset instanceof org.jfree.data.xy.OHLCDataset) {
                        org.jfree.data.xy.OHLCDataset highLowData = ((org.jfree.data.xy.OHLCDataset) (dataset));
                        value = highLowData.getHighValue(series, item);
                    } else {
                        value = dataset.getYValue(series, item);
                    }
                    if (!java.lang.Double.isNaN(value)) {
                        maximum = java.lang.Math.max(maximum, value);
                    }
                }
            }
            if (maximum == java.lang.Double.NEGATIVE_INFINITY) {
                return null;
            } else {
                return new java.lang.Double(maximum);
            }
        }
    }

    public static org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(dataset, 0.0);
    }

    public static org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset dataset, double base) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        org.jfree.data.Range result = null;
        double minimum = java.lang.Double.POSITIVE_INFINITY;
        double maximum = java.lang.Double.NEGATIVE_INFINITY;
        int categoryCount = dataset.getColumnCount();
        for (int item = 0; item < categoryCount; item++) {
            double positive = base;
            double negative = base;
            int seriesCount = dataset.getRowCount();
            for (int series = 0; series < seriesCount; series++) {
                java.lang.Number number = dataset.getValue(series, item);
                if (number != null) {
                    double value = number.doubleValue();
                    if (value > 0.0) {
                        positive = positive + value;
                    }
                    if (value < 0.0) {
                        negative = negative + value;
                    }
                }
            }
            minimum = java.lang.Math.min(minimum, negative);
            maximum = java.lang.Math.max(maximum, positive);
        }
        if (minimum <= maximum) {
            result = new org.jfree.data.Range(minimum, maximum);
        }
        return result;
    }

    public static org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset dataset, org.jfree.data.KeyToGroupMap map) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        boolean hasValidData = false;
        org.jfree.data.Range result = null;
        int[] groupIndex = new int[dataset.getRowCount()];
        for (int i = 0; i < dataset.getRowCount(); i++) {
            groupIndex[i] = map.getGroupIndex(map.getGroup(dataset.getRowKey(i)));
        }
        int groupCount = map.getGroupCount();
        double[] minimum = new double[groupCount];
        double[] maximum = new double[groupCount];
        int categoryCount = dataset.getColumnCount();
        for (int item = 0; item < categoryCount; item++) {
            double[] positive = new double[groupCount];
            double[] negative = new double[groupCount];
            int seriesCount = dataset.getRowCount();
            for (int series = 0; series < seriesCount; series++) {
                java.lang.Number number = dataset.getValue(series, item);
                if (number != null) {
                    hasValidData = true;
                    double value = number.doubleValue();
                    if (value > 0.0) {
                        positive[groupIndex[series]] = positive[groupIndex[series]] + value;
                    }
                    if (value < 0.0) {
                        negative[groupIndex[series]] = negative[groupIndex[series]] + value;
                    }
                }
            }
            for (int g = 0; g < groupCount; g++) {
                minimum[g] = java.lang.Math.min(minimum[g], negative[g]);
                maximum[g] = java.lang.Math.max(maximum[g], positive[g]);
            }
        }
        if (hasValidData) {
            for (int j = 0; j < groupCount; j++) {
                result = org.jfree.data.Range.combine(result, new org.jfree.data.Range(minimum[j], maximum[j]));
            }
        }
        return result;
    }

    public static java.lang.Number findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        java.lang.Number result = null;
        boolean hasValidData = false;
        double minimum = 0.0;
        int categoryCount = dataset.getColumnCount();
        for (int item = 0; item < categoryCount; item++) {
            double total = 0.0;
            int seriesCount = dataset.getRowCount();
            for (int series = 0; series < seriesCount; series++) {
                java.lang.Number number = dataset.getValue(series, item);
                if (number != null) {
                    hasValidData = true;
                    double value = number.doubleValue();
                    if (value < 0.0) {
                        total = total + value;
                    }
                }
            }
            minimum = java.lang.Math.min(minimum, total);
        }
        if (hasValidData) {
            result = new java.lang.Double(minimum);
        }
        return result;
    }

    public static java.lang.Number findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        java.lang.Number result = null;
        boolean hasValidData = false;
        double maximum = 0.0;
        int categoryCount = dataset.getColumnCount();
        for (int item = 0; item < categoryCount; item++) {
            double total = 0.0;
            int seriesCount = dataset.getRowCount();
            for (int series = 0; series < seriesCount; series++) {
                java.lang.Number number = dataset.getValue(series, item);
                if (number != null) {
                    hasValidData = true;
                    double value = number.doubleValue();
                    if (value > 0.0) {
                        total = total + value;
                    }
                }
            }
            maximum = java.lang.Math.max(maximum, total);
        }
        if (hasValidData) {
            result = new java.lang.Double(maximum);
        }
        return result;
    }

    public static org.jfree.data.Range findStackedRangeBounds(org.jfree.data.xy.TableXYDataset dataset) {
        return org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(dataset, 0.0);
    }

    public static org.jfree.data.Range findStackedRangeBounds(org.jfree.data.xy.TableXYDataset dataset, double base) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        double minimum = base;
        double maximum = base;
        for (int itemNo = 0; itemNo < dataset.getItemCount(); itemNo++) {
            double positive = base;
            double negative = base;
            int seriesCount = dataset.getSeriesCount();
            for (int seriesNo = 0; seriesNo < seriesCount; seriesNo++) {
                double y = dataset.getYValue(seriesNo, itemNo);
                if (!java.lang.Double.isNaN(y)) {
                    if (y > 0.0) {
                        positive += y;
                    } else {
                        negative += y;
                    }
                }
            }
            if (positive > maximum) {
                maximum = positive;
            }
            if (negative < minimum) {
                minimum = negative;
            }
        }
        if (minimum <= maximum) {
            return new org.jfree.data.Range(minimum, maximum);
        } else {
            return null;
        }
    }

    public static double calculateStackTotal(org.jfree.data.xy.TableXYDataset dataset, int item) {
        double total = 0.0;
        int seriesCount = dataset.getSeriesCount();
        for (int s = 0; s < seriesCount; s++) {
            double value = dataset.getYValue(s, item);
            if (!java.lang.Double.isNaN(value)) {
                total = total + value;
            }
        }
        return total;
    }

    public static org.jfree.data.Range findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset dataset) {
        if (dataset == null) {
            throw new java.lang.IllegalArgumentException("Null 'dataset' argument.");
        }
        boolean allItemsNull = true;
        double minimum = 0.0;
        double maximum = 0.0;
        for (int row = 0; row < dataset.getRowCount(); row++) {
            double runningTotal = 0.0;
            for (int column = 0; column <= (dataset.getColumnCount() - 1); column++) {
                java.lang.Number n = dataset.getValue(row, column);
                if (n != null) {
                    allItemsNull = false;
                    double value = n.doubleValue();
                    if (!java.lang.Double.isNaN(value)) {
                        runningTotal = runningTotal + value;
                        minimum = java.lang.Math.min(minimum, runningTotal);
                        maximum = java.lang.Math.max(maximum, runningTotal);
                    }
                }
            }
        }
        if (!allItemsNull) {
            return new org.jfree.data.Range(minimum, maximum);
        } else {
            return null;
        }
    }
}
[627252] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858717178
GPR[SSUN]-1659858717178
-112801879
GPR[ESUN]-1659858717403
GPR[SSUN]-1659858717403
-112801879
GPR[SPVATF]-1659858717623
GPR[EPVATF]-1659858717939
GPR[SPS]-1659858717939
[628403] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.JFreeChart:1573.
GPR[EPS]-1659858718329
GPR[ESUN]-1659858718329
GPR[SSUN]-1659858718329
-112801879
GPR[SPVATF]-1659858718552
GPR[EPVATF]-1659858718871
GPR[SPS]-1659858718871
[629334] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.JFreeChart:1572.
GPR[EPS]-1659858719260
GPR[ESUN]-1659858719260
GPR[SSUN]-1659858719260
-112801879
GPR[ESUN]-1659858719560
GPR[SSUN]-1659858719560
2490626
GPR[SPVATF]-1659858719715
GPR[EPVATF]-1659858720034
GPR[SPS]-1659858720034
[630455] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:575.
GPR[EPS]-1659858720381
GPR[ESUN]-1659858720381
GPR[SSUN]-1659858720381
2490626
GPR[ESUN]-1659858720541
GPR[SSUN]-1659858720541
1848383305
GPR[ESUN]-1659858720835
GPR[SSUN]-1659858720835
1848383305
GPR[SPVATF]-1659858721128
GPR[EPVATF]-1659858721449
GPR[SPS]-1659858721449
[631987] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1251.
GPR[EPS]-1659858721913
GPR[SPVATF]-1659858721913
GPR[EPVATF]-1659858722224
GPR[SPS]-1659858722224
[632772] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1251.
GPR[EPS]-1659858722698
GPR[ESUN]-1659858722699
GPR[SSUN]-1659858722699
1848383305
GPR[SPVATF]-1659858722995
GPR[EPVATF]-1659858723313
GPR[SPS]-1659858723313
[633850] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1245.
GPR[EPS]-1659858723776
GPR[ESUN]-1659858723776
GPR[SSUN]-1659858723776
1848383305
GPR[SPVATF]-1659858724072
GPR[EPVATF]-1659858724391
GPR[SPS]-1659858724391
[635010] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1243.
GPR[EPS]-1659858724936
GPR[ESUN]-1659858724937
GPR[SSUN]-1659858724937
1848383305
GPR[SPVATF]-1659858725238
GPR[EPVATF]-1659858725557
GPR[SPS]-1659858725557
[636147] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1242.
GPR[EPS]-1659858726073
GPR[SPVATF]-1659858726073
GPR[EPVATF]-1659858726394
GPR[SPS]-1659858726394
[636940] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1242.
GPR[EPS]-1659858726866
GPR[ESUN]-1659858726866
GPR[SSUN]-1659858726866
1848383305
GPR[SPVATF]-1659858727170
GPR[EPVATF]-1659858727493
GPR[SPS]-1659858727493
[638044] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1240.
GPR[EPS]-1659858727970
GPR[ESUN]-1659858727971
GPR[SSUN]-1659858727971
1848383305
GPR[SPVATF]-1659858728266
GPR[EPVATF]-1659858728590
GPR[SPS]-1659858728590
[639136] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1239.
GPR[EPS]-1659858729062
GPR[SPVATF]-1659858729062
GPR[EPVATF]-1659858729377
GPR[SPS]-1659858729377
[639921] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1239.
GPR[EPS]-1659858729847
GPR[ESUN]-1659858729847
GPR[SSUN]-1659858729847
1848383305
GPR[SPVATF]-1659858730215
GPR[EPVATF]-1659858730543
GPR[SPS]-1659858730544
[641114] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1236.
GPR[EPS]-1659858731040
GPR[SPVATF]-1659858731040
GPR[EPVATF]-1659858731364
GPR[SPS]-1659858731365
[641904] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1236.
GPR[EPS]-1659858731830
GPR[ESUN]-1659858731830
GPR[SSUN]-1659858731830
1848383305
GPR[ESUN]-1659858732125
GPR[SSUN]-1659858732125
1848383305
GPR[SPVATF]-1659858732419
GPR[EPVATF]-1659858732744
GPR[SPS]-1659858732744
[643290] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1153.
GPR[EPS]-1659858733216
GPR[ESUN]-1659858733216
GPR[SSUN]-1659858733216
1848383305
GPR[SPVATF]-1659858733514
GPR[EPVATF]-1659858733835
GPR[SPS]-1659858733835
[644406] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1152.
GPR[EPS]-1659858734332
GPR[SPVATF]-1659858734332
GPR[EPVATF]-1659858734684
GPR[SPS]-1659858734684
[645237] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1152.
GPR[EPS]-1659858735164
GPR[ESUN]-1659858735164
GPR[SSUN]-1659858735164
1848383305
GPR[ESUN]-1659858735556
GPR[SSUN]-1659858735556
1848383305
GPR[SPVATF]-1659858735870
GPR[EPVATF]-1659858736191
GPR[SPS]-1659858736191
[646749] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1148.
GPR[EPS]-1659858736675
GPR[ESUN]-1659858736675
GPR[SSUN]-1659858736675
1848383305
GPR[SPVATF]-1659858736977
GPR[EPVATF]-1659858737302
GPR[SPS]-1659858737302
[647863] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1144.
GPR[EPS]-1659858737789
GPR[ESUN]-1659858737789
GPR[SSUN]-1659858737789
1848383305
GPR[ESUN]-1659858738087
GPR[SSUN]-1659858738087
1848383305
GPR[SPVATF]-1659858738382
GPR[EPVATF]-1659858738706
GPR[SPS]-1659858738706
[649255] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1140.
GPR[EPS]-1659858739181
GPR[ESUN]-1659858739181
GPR[SSUN]-1659858739181
1848383305
GPR[SPVATF]-1659858739482
GPR[EPVATF]-1659858739803
GPR[SPS]-1659858739803
[650423] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1139.
GPR[EPS]-1659858740349
GPR[ESUN]-1659858740349
GPR[SSUN]-1659858740349
1848383305
GPR[SPVATF]-1659858740672
GPR[EPVATF]-1659858741001
GPR[SPS]-1659858741001
[651552] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1138.
GPR[EPS]-1659858741478
GPR[SPVATF]-1659858741478
GPR[EPVATF]-1659858741805
GPR[SPS]-1659858741805
[652358] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1138.
GPR[EPS]-1659858742284
GPR[ESUN]-1659858742284
GPR[SSUN]-1659858742284
1848383305
GPR[ESUN]-1659858742592
GPR[SSUN]-1659858742592
1848383305
GPR[SPVATF]-1659858742888
GPR[EPVATF]-1659858743213
GPR[SPS]-1659858743213
[653771] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1134.
GPR[EPS]-1659858743697
GPR[SPVATF]-1659858743697
GPR[EPVATF]-1659858744019
GPR[SPS]-1659858744019
[654589] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1134.
GPR[EPS]-1659858744515
GPR[ESUN]-1659858744515
GPR[SSUN]-1659858744515
1848383305
GPR[ESUN]-1659858744813
GPR[SSUN]-1659858744813
1848383305
GPR[ESUN]-1659858745165
GPR[SSUN]-1659858745165
1848383305
GPR[SPVATF]-1659858745461
GPR[EPVATF]-1659858745785
GPR[SPS]-1659858745785
[656328] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1105.
GPR[EPS]-1659858746254
GPR[ESUN]-1659858746254
GPR[SSUN]-1659858746254
1848383305
GPR[ESUN]-1659858746566
GPR[SSUN]-1659858746566
1848383305
GPR[SPVATF]-1659858746857
GPR[EPVATF]-1659858747180
GPR[SPS]-1659858747180
[657723] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1102.
GPR[EPS]-1659858747649
GPR[SPVATF]-1659858747649
GPR[EPVATF]-1659858747998
GPR[SPS]-1659858747998
[658538] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1102.
GPR[EPS]-1659858748464
GPR[ESUN]-1659858748464
GPR[SSUN]-1659858748464
1848383305
GPR[ESUN]-1659858748788
GPR[SSUN]-1659858748788
80818745
GPR[SPVATF]-1659858748904
GPR[EPVATF]-1659858749228
GPR[SPS]-1659858749228
[659590] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.Title:398.
GPR[EPS]-1659858749516
GPR[ESUN]-1659858749516
GPR[SSUN]-1659858749516
80818745
GPR[SPVATF]-1659858749651
GPR[EPVATF]-1659858750035
GPR[SPS]-1659858750035
[660401] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.Title:397.
GPR[EPS]-1659858750328
GPR[SPVATF]-1659858750328
GPR[EPVATF]-1659858750738
GPR[SPS]-1659858750738
[661074] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.Title:397.
GPR[EPS]-1659858751000
GPR[ESUN]-1659858751000
GPR[SSUN]-1659858751000
2490626
GPR[ESUN]-1659858751173
GPR[SSUN]-1659858751173
2490626
GPR[SPVATF]-1659858751328
GPR[EPVATF]-1659858751659
GPR[SPS]-1659858751659
[662064] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:859.
GPR[EPS]-1659858751990
GPR[ESUN]-1659858751991
GPR[SSUN]-1659858751991
2490626
GPR[SPVATF]-1659858752149
GPR[EPVATF]-1659858752474
GPR[SPS]-1659858752474
[662880] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:858.
GPR[EPS]-1659858752806
GPR[ESUN]-1659858752806
GPR[SSUN]-1659858752806
2490626
GPR[SPVATF]-1659858752966
GPR[EPVATF]-1659858753292
GPR[SPS]-1659858753292
[663690] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:854.
GPR[EPS]-1659858753616
GPR[SPVATF]-1659858753616
GPR[EPVATF]-1659858753948
GPR[SPS]-1659858753948
[664347] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:854.
GPR[EPS]-1659858754273
GPR[ESUN]-1659858754273
GPR[SSUN]-1659858754273
2490626
GPR[SPVATF]-1659858754430
GPR[EPVATF]-1659858754757
GPR[SPS]-1659858754757
[665155] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:853.
GPR[EPS]-1659858755081
GPR[SPVATF]-1659858755081
GPR[EPVATF]-1659858755414
GPR[SPS]-1659858755414
[665838] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:853.
GPR[EPS]-1659858755764
GPR[ESUN]-1659858755764
GPR[SSUN]-1659858755764
2490626
GPR[SPVATF]-1659858755922
GPR[EPVATF]-1659858756251
GPR[SPS]-1659858756251
[666650] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:846.
GPR[EPS]-1659858756576
GPR[SPVATF]-1659858756577
GPR[EPVATF]-1659858756910
GPR[SPS]-1659858756910
[667310] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:846.
GPR[EPS]-1659858757236
GPR[ESUN]-1659858757236
GPR[SSUN]-1659858757237
2490626
GPR[ESUN]-1659858757394
GPR[SSUN]-1659858757394
2490626
GPR[SPVATF]-1659858757548
GPR[EPVATF]-1659858757883
GPR[SPS]-1659858757883
[668283] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:643.
GPR[EPS]-1659858758209
GPR[ESUN]-1659858758209
GPR[SSUN]-1659858758209
2490626
GPR[SPVATF]-1659858758371
GPR[EPVATF]-1659858758720
GPR[SPS]-1659858758720
[669121] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:642.
GPR[EPS]-1659858759047
GPR[ESUN]-1659858759047
GPR[SSUN]-1659858759047
-1873545929
GPR[ESUN]-1659858759215
GPR[SSUN]-1659858759215
955924748
GPR[ESUN]-1659858759374
GPR[SSUN]-1659858759374
955924748
GPR[SPVATF]-1659858759513
GPR[EPVATF]-1659858759854
GPR[SPS]-1659858759854
[670232] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.TextTitle:355.
GPR[EPS]-1659858760158
GPR[SPVATF]-1659858760158
GPR[EPVATF]-1659858760492
GPR[SPS]-1659858760492
[670887] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.TextTitle:355.
GPR[EPS]-1659858760813
GPR[ESUN]-1659858760813
GPR[SSUN]-1659858760813
955924748
GPR[SPVATF]-1659858760950
GPR[EPVATF]-1659858761284
GPR[SPS]-1659858761284
[671691] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.TextTitle:352.
GPR[EPS]-1659858761617
GPR[SPVATF]-1659858761617
GPR[EPVATF]-1659858761952
GPR[SPS]-1659858761952
[672322] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.TextTitle:352.
GPR[EPS]-1659858762248
GPR[ESUN]-1659858762249
GPR[SSUN]-1659858762249
955924748
GPR[ESUN]-1659858762384
GPR[SSUN]-1659858762384
955924748
GPR[SPVATF]-1659858762522
GPR[EPVATF]-1659858762860
GPR[SPS]-1659858762860
[673229] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.TextTitle:328.
GPR[EPS]-1659858763155
GPR[ESUN]-1659858763156
GPR[SSUN]-1659858763156
955924748
GPR[SPVATF]-1659858763291
GPR[EPVATF]-1659858763626
GPR[SPS]-1659858763626
[673992] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.TextTitle:327.
GPR[EPS]-1659858763918
GPR[ESUN]-1659858763918
GPR[SSUN]-1659858763918
955924748
GPR[SPVATF]-1659858764054
GPR[EPVATF]-1659858764390
GPR[SPS]-1659858764390
[674797] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.TextTitle:326.
GPR[EPS]-1659858764724
GPR[SPVATF]-1659858764724
GPR[EPVATF]-1659858765057
GPR[SPS]-1659858765057
[675427] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.TextTitle:326.
GPR[EPS]-1659858765353
GPR[ESUN]-1659858765353
GPR[SSUN]-1659858765353
955924748
GPR[SPVATF]-1659858765489
GPR[EPVATF]-1659858765829
GPR[SPS]-1659858765829
[676224] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.TextTitle:323.
GPR[EPS]-1659858766150
GPR[SPVATF]-1659858766150
GPR[EPVATF]-1659858766486
GPR[SPS]-1659858766486
[676849] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.TextTitle:323.
GPR[EPS]-1659858766775
GPR[ESUN]-1659858766775
GPR[SSUN]-1659858766775
-112801879
GPR[ESUN]-1659858767001
GPR[SSUN]-1659858767001
-112801879
GPR[ESUN]-1659858767223
GPR[SSUN]-1659858767223
-112801879
GPR[ESUN]-1659858767445
GPR[SSUN]-1659858767445
-112801879
GPR[SPVATF]-1659858767739
GPR[EPVATF]-1659858768084
GPR[SPS]-1659858768084
[678556] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.JFreeChart:973.
GPR[EPS]-1659858768482
GPR[SPVATF]-1659858768483
GPR[EPVATF]-1659858768824
GPR[SPS]-1659858768824
[679295] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.JFreeChart:973.
GPR[EPS]-1659858769221
GPR[ESUN]-1659858769221
GPR[SSUN]-1659858769221
-112801879
GPR[SPVATF]-1659858769450
GPR[EPVATF]-1659858769789
GPR[SPS]-1659858769789
[680262] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.JFreeChart:972.
GPR[EPS]-1659858770188
GPR[SPVATF]-1659858770188
GPR[EPVATF]-1659858770525
GPR[SPS]-1659858770525
[680995] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.JFreeChart:972.
GPR[EPS]-1659858770921
GPR[ESUN]-1659858770921
GPR[SSUN]-1659858770921
2490626
GPR[SPVATF]-1659858771084
GPR[EPVATF]-1659858771427
GPR[SPS]-1659858771427
[681835] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:574.
GPR[EPS]-1659858771761
GPR[SPVATF]-1659858771761
GPR[EPVATF]-1659858772103
GPR[SPS]-1659858772103
[682509] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:574.
GPR[EPS]-1659858772436
GPR[ESUN]-1659858772436
GPR[SSUN]-1659858772436
2490626
GPR[SPVATF]-1659858772605
GPR[EPVATF]-1659858772948
GPR[SPS]-1659858772948
[683359] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:573.
GPR[EPS]-1659858773285
GPR[SPVATF]-1659858773285
GPR[EPVATF]-1659858773625
GPR[SPS]-1659858773625
[684064] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:573.
GPR[EPS]-1659858773990
GPR[ESUN]-1659858773990
GPR[SSUN]-1659858773990
2490626
GPR[SPVATF]-1659858774213
GPR[EPVATF]-1659858774555
GPR[SPS]-1659858774555
[684983] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:566.
GPR[EPS]-1659858774909
GPR[SPVATF]-1659858774909
GPR[EPVATF]-1659858775252
GPR[SPS]-1659858775252
[685679] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:566.
GPR[EPS]-1659858775605
GPR[ESUN]-1659858775605
GPR[SSUN]-1659858775605
-779068883
GPR[ESUN]-1659858775734
GPR[SSUN]-1659858775734
-779068883
GPR[SPVATF]-1659858775855
GPR[EPVATF]-1659858776202
GPR[SPS]-1659858776202
[686536] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.event.ChartChangeEvent:113.
GPR[EPS]-1659858776462
GPR[ESUN]-1659858776462
GPR[SSUN]-1659858776462
-112801879
GPR[ESUN]-1659858776697
GPR[SSUN]-1659858776697
-112801879
GPR[SPVATF]-1659858776925
GPR[EPVATF]-1659858777282
GPR[SPS]-1659858777282
[687766] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.JFreeChart:1584.
GPR[EPS]-1659858777692
GPR[ESUN]-1659858777693
GPR[SSUN]-1659858777693
-112801879
GPR[SPVATF]-1659858777926
GPR[EPVATF]-1659858778269
GPR[SPS]-1659858778269
[688788] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.JFreeChart:1583.
GPR[EPS]-1659858778714
GPR[ESUN]-1659858778714
GPR[SSUN]-1659858778714
-112801879
GPR[ESUN]-1659858778947
GPR[SSUN]-1659858778947
-112801879
GPR[SPVATF]-1659858779173
GPR[EPVATF]-1659858779512
GPR[SPS]-1659858779512
[689988] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.JFreeChart:1516.
GPR[EPS]-1659858779914
GPR[ESUN]-1659858779915
GPR[SSUN]-1659858779915
-112801879
GPR[ESUN]-1659858780144
GPR[SSUN]-1659858780144
-112801879
GPR[SPVATF]-1659858780459
GPR[EPVATF]-1659858780800
GPR[SPS]-1659858780800
[691278] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.JFreeChart:1514.
GPR[EPS]-1659858781204
GPR[SPVATF]-1659858781205
GPR[EPVATF]-1659858781551
GPR[SPS]-1659858781551
[692041] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.JFreeChart:1514.
GPR[EPS]-1659858781967
GPR[ESUN]-1659858781967
GPR[SSUN]-1659858781967
2490626
GPR[SPVATF]-1659858782135
GPR[EPVATF]-1659858782483
GPR[SPS]-1659858782483
[692918] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:968.
GPR[EPS]-1659858782844
GPR[ESUN]-1659858782844
GPR[SSUN]-1659858782844
2490626
GPR[SPVATF]-1659858783005
GPR[EPVATF]-1659858783352
GPR[SPS]-1659858783352
[693762] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:967.
GPR[EPS]-1659858783688
GPR[SPVATF]-1659858783689
GPR[EPVATF]-1659858784030
GPR[SPS]-1659858784030
[694440] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:967.
GPR[EPS]-1659858784366
GPR[ESUN]-1659858784367
GPR[SSUN]-1659858784367
1655691854
GPR[ESUN]-1659858784485
GPR[SSUN]-1659858784485
1655691854
GPR[SPVATF]-1659858784603
GPR[EPVATF]-1659858784810
GPR[SPS]-1659858784810
[695136] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DefaultPieDataset:198.
GPR[EPS]-1659858785062
GPR[ESUN]-1659858785063
GPR[SSUN]-1659858785063
1655691854
GPR[SPVATF]-1659858785180
GPR[EPVATF]-1659858785385
GPR[SPS]-1659858785385
[695704] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DefaultPieDataset:197.
GPR[EPS]-1659858785630
GPR[ESUN]-1659858785630
GPR[SSUN]-1659858785630
-1690918013
GPR[ESUN]-1659858785917
GPR[SSUN]-1659858785917
-1690918013
GPR[SPVATF]-1659858786168
GPR[EPVATF]-1659858786452
GPR[SPS]-1659858786452
[696967] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4707.
GPR[EPS]-1659858786893
GPR[ESUN]-1659858786893
GPR[SSUN]-1659858786893
-1690918013
GPR[SPVATF]-1659858787212
GPR[EPVATF]-1659858787492
GPR[SPS]-1659858787492
[698007] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4706.
GPR[EPS]-1659858787933
GPR[ESUN]-1659858787933
GPR[SSUN]-1659858787933
-1690918013
GPR[SPVATF]-1659858788189
GPR[EPVATF]-1659858788474
GPR[SPS]-1659858788474
[699013] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4703.
GPR[EPS]-1659858788939
GPR[SPVATF]-1659858788939
GPR[EPVATF]-1659858789215
GPR[SPS]-1659858789215
[699725] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4703.
GPR[EPS]-1659858789651
GPR[ESUN]-1659858789652
GPR[SSUN]-1659858789652
-1690918013
GPR[ESUN]-1659858789907
GPR[SSUN]-1659858789907
-1690918013
GPR[SPVATF]-1659858790155
GPR[EPVATF]-1659858790433
GPR[SPS]-1659858790433
[700944] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:2253.
GPR[EPS]-1659858790870
GPR[ESUN]-1659858790870
GPR[SSUN]-1659858790870
-1690918013
GPR[SPVATF]-1659858791132
GPR[EPVATF]-1659858791412
GPR[SPS]-1659858791412
[701927] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:2252.
GPR[EPS]-1659858791853
GPR[ESUN]-1659858791853
GPR[SSUN]-1659858791853
-1690918013
GPR[SPVATF]-1659858792108
GPR[EPVATF]-1659858792390
GPR[SPS]-1659858792390
[702966] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:2249.
GPR[EPS]-1659858792892
GPR[SPVATF]-1659858792892
GPR[EPVATF]-1659858793183
GPR[SPS]-1659858793183
[703713] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:2249.
GPR[EPS]-1659858793639
GPR[ESUN]-1659858793639
GPR[SSUN]-1659858793639
-1690918013
GPR[ESUN]-1659858793904
GPR[SSUN]-1659858793904
-1690918013
GPR[ESUN]-1659858794156
GPR[SSUN]-1659858794156
1848383305
GPR[ESUN]-1659858794465
GPR[SSUN]-1659858794465
1848383305
GPR[SPVATF]-1659858794766
GPR[EPVATF]-1659858795055
GPR[SPS]-1659858795055
[705587] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1662.
GPR[EPS]-1659858795514
GPR[SPVATF]-1659858795514
GPR[EPVATF]-1659858795791
GPR[SPS]-1659858795791
[706323] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1662.
GPR[EPS]-1659858796249
GPR[ESUN]-1659858796249
GPR[SSUN]-1659858796249
1848383305
GPR[SPVATF]-1659858796554
GPR[EPVATF]-1659858796837
GPR[SPS]-1659858796837
[707396] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1661.
GPR[EPS]-1659858797322
GPR[ESUN]-1659858797322
GPR[SSUN]-1659858797322
1848383305
GPR[SPVATF]-1659858797631
GPR[EPVATF]-1659858797916
GPR[SPS]-1659858797916
[708517] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1660.
GPR[EPS]-1659858798443
GPR[ESUN]-1659858798443
GPR[SSUN]-1659858798443
1848383305
GPR[SPVATF]-1659858798752
GPR[EPVATF]-1659858799036
GPR[SPS]-1659858799036
[709580] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1658.
GPR[EPS]-1659858799506
GPR[ESUN]-1659858799506
GPR[SSUN]-1659858799506
1848383305
GPR[SPVATF]-1659858799814
GPR[EPVATF]-1659858800111
GPR[SPS]-1659858800111
[710655] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1657.
GPR[EPS]-1659858800581
GPR[SPVATF]-1659858800581
GPR[EPVATF]-1659858800866
GPR[SPS]-1659858800866
[711405] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1657.
GPR[EPS]-1659858801331
GPR[ESUN]-1659858801332
GPR[SSUN]-1659858801332
1848383305
GPR[SPVATF]-1659858801637
GPR[EPVATF]-1659858801922
GPR[SPS]-1659858801922
[712455] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1654.
GPR[EPS]-1659858802381
GPR[SPVATF]-1659858802382
GPR[EPVATF]-1659858802664
GPR[SPS]-1659858802664
[714023] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1654.
GPR[EPS]-1659858803949
GPR[ESUN]-1659858803949
GPR[SSUN]-1659858803949
1848383305
GPR[ESUN]-1659858804254
GPR[SSUN]-1659858804254
1848383305
GPR[SPVATF]-1659858804550
GPR[EPVATF]-1659858804822
GPR[SPS]-1659858804822
[715356] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1431.
GPR[EPS]-1659858805282
GPR[SPVATF]-1659858805282
GPR[EPVATF]-1659858805549
GPR[SPS]-1659858805549
[716103] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1431.
GPR[EPS]-1659858806029
GPR[ESUN]-1659858806029
GPR[SSUN]-1659858806029
1848383305
GPR[SPVATF]-1659858806329
GPR[EPVATF]-1659858806599
GPR[SPS]-1659858806599
[717129] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1421.
GPR[EPS]-1659858807055
GPR[SPVATF]-1659858807055
GPR[EPVATF]-1659858807324
GPR[SPS]-1659858807324
[717848] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1421.
GPR[EPS]-1659858807774
GPR[ESUN]-1659858807774
GPR[SSUN]-1659858807774
1848383305
GPR[SPVATF]-1659858808071
GPR[EPVATF]-1659858808341
GPR[SPS]-1659858808341
[718918] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1416.
GPR[EPS]-1659858808844
GPR[ESUN]-1659858808844
GPR[SSUN]-1659858808844
1848383305
GPR[ESUN]-1659858809149
GPR[SSUN]-1659858809149
1848383305
GPR[SPVATF]-1659858809446
GPR[EPVATF]-1659858809727
GPR[SPS]-1659858809727
[720255] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1410.
GPR[EPS]-1659858810181
GPR[ESUN]-1659858810181
GPR[SSUN]-1659858810181
1848383305
GPR[SPVATF]-1659858810481
GPR[EPVATF]-1659858810756
GPR[SPS]-1659858810756
[721328] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1409.
GPR[EPS]-1659858811254
GPR[SPVATF]-1659858811254
GPR[EPVATF]-1659858811528
GPR[SPS]-1659858811528
[722197] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1409.
GPR[EPS]-1659858812123
GPR[ESUN]-1659858812123
GPR[SSUN]-1659858812123
1848383305
GPR[ESUN]-1659858812516
GPR[SSUN]-1659858812516
1848383305
GPR[SPVATF]-1659858812819
GPR[EPVATF]-1659858813100
GPR[SPS]-1659858813100
[723631] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1407.
GPR[EPS]-1659858813557
GPR[ESUN]-1659858813557
GPR[SSUN]-1659858813557
1848383305
GPR[ESUN]-1659858813853
GPR[SSUN]-1659858813853
1848383305
GPR[SPVATF]-1659858814195
GPR[EPVATF]-1659858814476
GPR[SPS]-1659858814476
[725004] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1401.
GPR[EPS]-1659858814930
GPR[ESUN]-1659858814930
GPR[SSUN]-1659858814930
1848383305
GPR[SPVATF]-1659858815231
GPR[EPVATF]-1659858815509
GPR[SPS]-1659858815509
[726041] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1400.
GPR[EPS]-1659858815967
GPR[SPVATF]-1659858815967
GPR[EPVATF]-1659858816243
GPR[SPS]-1659858816243
[726796] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1400.
GPR[EPS]-1659858816722
GPR[ESUN]-1659858816722
GPR[SSUN]-1659858816722
1848383305
GPR[ESUN]-1659858817025
GPR[SSUN]-1659858817025
1848383305
GPR[SPVATF]-1659858817330
GPR[EPVATF]-1659858817611
GPR[SPS]-1659858817611
[728142] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1398.
GPR[EPS]-1659858818068
GPR[ESUN]-1659858818068
GPR[SSUN]-1659858818068
1848383305
GPR[ESUN]-1659858818378
GPR[SSUN]-1659858818378
1848383305
GPR[SPVATF]-1659858818681
GPR[EPVATF]-1659858818957
GPR[SPS]-1659858818957
[729546] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1392.
GPR[EPS]-1659858819472
GPR[ESUN]-1659858819472
GPR[SSUN]-1659858819472
1848383305
GPR[SPVATF]-1659858819782
GPR[EPVATF]-1659858820059
GPR[SPS]-1659858820059
[730594] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1391.
GPR[EPS]-1659858820520
GPR[SPVATF]-1659858820520
GPR[EPVATF]-1659858820795
GPR[SPS]-1659858820795
[731326] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1391.
GPR[EPS]-1659858821252
GPR[ESUN]-1659858821252
GPR[SSUN]-1659858821252
1848383305
GPR[ESUN]-1659858821563
GPR[SSUN]-1659858821563
1848383305
GPR[SPVATF]-1659858821869
GPR[EPVATF]-1659858822150
GPR[SPS]-1659858822150
[732684] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1389.
GPR[EPS]-1659858822610
GPR[ESUN]-1659858822610
GPR[SSUN]-1659858822610
1848383305
GPR[ESUN]-1659858822916
GPR[SSUN]-1659858822916
1848383305
GPR[SPVATF]-1659858823220
GPR[EPVATF]-1659858823499
GPR[SPS]-1659858823499
[734043] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1386.
GPR[EPS]-1659858823969
GPR[ESUN]-1659858823969
GPR[SSUN]-1659858823969
1848383305
GPR[SPVATF]-1659858824319
GPR[EPVATF]-1659858824598
GPR[SPS]-1659858824598
[735143] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1385.
GPR[EPS]-1659858825069
GPR[ESUN]-1659858825069
GPR[SSUN]-1659858825069
1848383305
GPR[SPVATF]-1659858825374
GPR[EPVATF]-1659858825652
GPR[SPS]-1659858825652
[736203] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1384.
GPR[EPS]-1659858826129
GPR[ESUN]-1659858826129
GPR[SSUN]-1659858826129
1848383305
GPR[SPVATF]-1659858826435
GPR[EPVATF]-1659858826713
GPR[SPS]-1659858826713
[737249] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1383.
GPR[EPS]-1659858827175
GPR[ESUN]-1659858827175
GPR[SSUN]-1659858827175
1848383305
GPR[SPVATF]-1659858827480
GPR[EPVATF]-1659858827757
GPR[SPS]-1659858827757
[738302] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1382.
GPR[EPS]-1659858828228
GPR[ESUN]-1659858828228
GPR[SSUN]-1659858828228
1848383305
GPR[SPVATF]-1659858828532
GPR[EPVATF]-1659858828814
GPR[SPS]-1659858828814
[739346] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1381.
GPR[EPS]-1659858829272
GPR[ESUN]-1659858829272
GPR[SSUN]-1659858829272
1848383305
GPR[SPVATF]-1659858829627
GPR[EPVATF]-1659858829912
GPR[SPS]-1659858829912
[740456] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1380.
GPR[EPS]-1659858830382
GPR[ESUN]-1659858830382
GPR[SSUN]-1659858830382
1848383305
GPR[SPVATF]-1659858830703
GPR[EPVATF]-1659858830990
GPR[SPS]-1659858830990
[741519] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1261.
GPR[EPS]-1659858831445
GPR[ESUN]-1659858831445
GPR[SSUN]-1659858831445
1848383305
GPR[SPVATF]-1659858831749
GPR[EPVATF]-1659858832031
GPR[SPS]-1659858832031
[742582] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1260.
GPR[EPS]-1659858832508
GPR[SPVATF]-1659858832508
GPR[EPVATF]-1659858832784
GPR[SPS]-1659858832784
[743348] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1260.
GPR[EPS]-1659858833274
GPR[ESUN]-1659858833274
GPR[SSUN]-1659858833274
68477
GPR[ESUN]-1659858833399
GPR[SSUN]-1659858833399
-1522070587
GPR[ESUN]-1659858833535
GPR[SSUN]-1659858833535
-1522070587
GPR[SPVATF]-1659858833663
GPR[EPVATF]-1659858833876
GPR[SPS]-1659858833876
[744231] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:666.
GPR[EPS]-1659858834157
GPR[ESUN]-1659858834157
GPR[SSUN]-1659858834158
-1522070587
GPR[ESUN]-1659858834285
GPR[SSUN]-1659858834285
-1522070587
GPR[ESUN]-1659858834415
GPR[SSUN]-1659858834415
-1522070587
GPR[SPVATF]-1659858834540
GPR[EPVATF]-1659858834752
GPR[SPS]-1659858834752
[745102] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:652.
GPR[EPS]-1659858835028
GPR[ESUN]-1659858835028
GPR[SSUN]-1659858835028
-1690918013
GPR[SPVATF]-1659858835290
GPR[EPVATF]-1659858835572
GPR[SPS]-1659858835572
[746136] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:5310.
GPR[EPS]-1659858836062
GPR[SPVATF]-1659858836062
GPR[EPVATF]-1659858836342
GPR[SPS]-1659858836342
[746862] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:5310.
GPR[EPS]-1659858836788
GPR[ESUN]-1659858836788
GPR[SSUN]-1659858836788
-1690918013
GPR[ESUN]-1659858837046
GPR[SSUN]-1659858837046
-1690918013
GPR[SPVATF]-1659858837298
GPR[EPVATF]-1659858837581
GPR[SPS]-1659858837581
[748096] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4864.
GPR[EPS]-1659858838022
GPR[ESUN]-1659858838023
GPR[SSUN]-1659858838023
-1690918013
GPR[SPVATF]-1659858838280
GPR[EPVATF]-1659858838562
GPR[SPS]-1659858838562
[749086] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4863.
GPR[EPS]-1659858839012
GPR[ESUN]-1659858839012
GPR[SSUN]-1659858839012
-1690918013
GPR[SPVATF]-1659858839268
GPR[EPVATF]-1659858839552
GPR[SPS]-1659858839552
[750085] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4860.
GPR[EPS]-1659858840011
GPR[SPVATF]-1659858840011
GPR[EPVATF]-1659858840296
GPR[SPS]-1659858840296
[750813] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4860.
GPR[EPS]-1659858840739
GPR[ESUN]-1659858840739
GPR[SSUN]-1659858840739
-1690918013
GPR[ESUN]-1659858840993
GPR[SSUN]-1659858840993
-1690918013
GPR[ESUN]-1659858841251
GPR[SSUN]-1659858841251
-1690918013
GPR[SPVATF]-1659858841502
GPR[EPVATF]-1659858841787
GPR[SPS]-1659858841787
[752351] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:2334.
GPR[EPS]-1659858842277
GPR[ESUN]-1659858842278
GPR[SSUN]-1659858842278
-1690918013
GPR[SPVATF]-1659858842531
GPR[EPVATF]-1659858842824
GPR[SPS]-1659858842824
[753345] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:2333.
GPR[EPS]-1659858843271
GPR[ESUN]-1659858843271
GPR[SSUN]-1659858843271
-1690918013
GPR[SPVATF]-1659858843528
GPR[EPVATF]-1659858843815
GPR[SPS]-1659858843815
[754334] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:2330.
GPR[EPS]-1659858844260
GPR[SPVATF]-1659858844261
GPR[EPVATF]-1659858844545
GPR[SPS]-1659858844545
[755062] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:2330.
GPR[EPS]-1659858844988
GPR[ESUN]-1659858844988
GPR[SSUN]-1659858844988
-1690918013
GPR[ESUN]-1659858845245
GPR[SSUN]-1659858845245
-1690918013
GPR[SPVATF]-1659858845511
GPR[EPVATF]-1659858845799
GPR[SPS]-1659858845799
[756352] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:2062.
GPR[EPS]-1659858846278
GPR[ESUN]-1659858846278
GPR[SSUN]-1659858846278
-1690918013
GPR[SPVATF]-1659858846531
GPR[EPVATF]-1659858846820
GPR[SPS]-1659858846820
[757345] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:2061.
GPR[EPS]-1659858847271
GPR[ESUN]-1659858847271
GPR[SSUN]-1659858847271
-1690918013
GPR[SPVATF]-1659858847523
GPR[EPVATF]-1659858847807
GPR[SPS]-1659858847807
[758323] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:2058.
GPR[EPS]-1659858848249
GPR[SPVATF]-1659858848249
GPR[EPVATF]-1659858848588
GPR[SPS]-1659858848588
[759104] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:2058.
GPR[EPS]-1659858849030
GPR[ESUN]-1659858849030
GPR[SSUN]-1659858849030
-1690918013
GPR[ESUN]-1659858849289
GPR[SSUN]-1659858849289
-1690918013
GPR[SPVATF]-1659858849545
GPR[EPVATF]-1659858849830
GPR[SPS]-1659858849830
[760345] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1941.
GPR[EPS]-1659858850271
GPR[ESUN]-1659858850271
GPR[SSUN]-1659858850271
-1690918013
GPR[SPVATF]-1659858850522
GPR[EPVATF]-1659858850806
GPR[SPS]-1659858850806
[761321] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1940.
GPR[EPS]-1659858851247
GPR[ESUN]-1659858851247
GPR[SSUN]-1659858851247
-1690918013
GPR[SPVATF]-1659858851497
GPR[EPVATF]-1659858851782
GPR[SPS]-1659858851782
[762320] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1937.
GPR[EPS]-1659858852246
GPR[SPVATF]-1659858852246
GPR[EPVATF]-1659858852534
GPR[SPS]-1659858852534
[763055] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1937.
GPR[EPS]-1659858852981
GPR[ESUN]-1659858852981
GPR[SSUN]-1659858852981
-1690918013
GPR[ESUN]-1659858853242
GPR[SSUN]-1659858853242
-1690918013
GPR[SPVATF]-1659858853495
GPR[EPVATF]-1659858853780
GPR[SPS]-1659858853780
[764295] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:774.
GPR[EPS]-1659858854221
GPR[ESUN]-1659858854221
GPR[SSUN]-1659858854221
-1690918013
GPR[SPVATF]-1659858854471
GPR[EPVATF]-1659858854818
GPR[SPS]-1659858854818
[765335] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:773.
GPR[EPS]-1659858855261
GPR[ESUN]-1659858855261
GPR[SSUN]-1659858855261
-1690918013
GPR[SPVATF]-1659858855512
GPR[EPVATF]-1659858855802
GPR[SPS]-1659858855802
[766327] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:770.
GPR[EPS]-1659858856253
GPR[SPVATF]-1659858856253
GPR[EPVATF]-1659858856538
GPR[SPS]-1659858856538
[767060] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:770.
GPR[EPS]-1659858856986
GPR[ESUN]-1659858856986
GPR[SSUN]-1659858856986
-1204308054
GPR[ESUN]-1659858857108
GPR[SSUN]-1659858857108
-1204308054
GPR[ESUN]-1659858857226
GPR[SSUN]-1659858857226
-1690918013
GPR[ESUN]-1659858857481
GPR[SSUN]-1659858857481
-1690918013
GPR[SPVATF]-1659858857736
GPR[EPVATF]-1659858858025
GPR[SPS]-1659858858026
[768545] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4553.
GPR[EPS]-1659858858471
GPR[ESUN]-1659858858471
GPR[SSUN]-1659858858471
-1690918013
GPR[SPVATF]-1659858858725
GPR[EPVATF]-1659858859037
GPR[SPS]-1659858859038
[769574] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4549.
GPR[EPS]-1659858859500
GPR[SPVATF]-1659858859501
GPR[EPVATF]-1659858859789
GPR[SPS]-1659858859789
[770339] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4549.
GPR[EPS]-1659858860265
GPR[ESUN]-1659858860265
GPR[SSUN]-1659858860265
-1030069272
GPR[ESUN]-1659858860358
GPR[SSUN]-1659858860358
80818745
GPR[ESUN]-1659858860479
GPR[SSUN]-1659858860479
80818745
GPR[SPVATF]-1659858860599
GPR[EPVATF]-1659858860969
GPR[SPS]-1659858860969
[771317] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.Title:259.
GPR[EPS]-1659858861243
GPR[ESUN]-1659858861243
GPR[SSUN]-1659858861243
80818745
GPR[SPVATF]-1659858861359
GPR[EPVATF]-1659858861783
GPR[SPS]-1659858861783
[772132] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.Title:258.
GPR[EPS]-1659858862058
GPR[ESUN]-1659858862058
GPR[SSUN]-1659858862058
80818745
GPR[SPVATF]-1659858862176
GPR[EPVATF]-1659858862542
GPR[SPS]-1659858862542
[772895] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.Title:257.
GPR[EPS]-1659858862821
GPR[SPVATF]-1659858862821
GPR[EPVATF]-1659858863186
GPR[SPS]-1659858863186
[773532] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.Title:257.
GPR[EPS]-1659858863459
GPR[ESUN]-1659858863459
GPR[SSUN]-1659858863459
80818745
GPR[SPVATF]-1659858863578
GPR[EPVATF]-1659858863943
GPR[SPS]-1659858863943
[774290] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.Title:254.
GPR[EPS]-1659858864216
GPR[SPVATF]-1659858864217
GPR[EPVATF]-1659858864572
GPR[SPS]-1659858864572
[774918] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.Title:254.
GPR[EPS]-1659858864844
GPR[ESUN]-1659858864844
GPR[SSUN]-1659858864844
2490626
GPR[SPVATF]-1659858865007
GPR[EPVATF]-1659858865223
GPR[SPS]-1659858865223
[775654] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:539.
GPR[EPS]-1659858865580
GPR[ESUN]-1659858865580
GPR[SSUN]-1659858865580
2490626
GPR[ESUN]-1659858865748
GPR[SSUN]-1659858865748
2490626
GPR[SPVATF]-1659858865909
GPR[EPVATF]-1659858866127
GPR[SPS]-1659858866127
[776523] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:518.
GPR[EPS]-1659858866449
GPR[ESUN]-1659858866450
GPR[SSUN]-1659858866450
-1226516116
GPR[ESUN]-1659858866565
GPR[SSUN]-1659858866565
-1226516116
GPR[SPVATF]-1659858866679
GPR[EPVATF]-1659858867041
GPR[SPS]-1659858867041
[777388] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.block.AbstractBlock:254.
GPR[EPS]-1659858867314
GPR[ESUN]-1659858867314
GPR[SSUN]-1659858867314
-1226516116
GPR[SPVATF]-1659858867436
GPR[EPVATF]-1659858867798
GPR[SPS]-1659858867798
[778161] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.block.AbstractBlock:251.
GPR[EPS]-1659858868087
GPR[SPVATF]-1659858868087
GPR[EPVATF]-1659858868454
GPR[SPS]-1659858868454
[778801] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.block.AbstractBlock:251.
GPR[EPS]-1659858868727
GPR[ESUN]-1659858868727
GPR[SSUN]-1659858868727
-1566484948
GPR[ESUN]-1659858868869
GPR[SSUN]-1659858868869
-1566484948
GPR[SPVATF]-1659858869007
GPR[EPVATF]-1659858869369
GPR[SPS]-1659858869369
[779747] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.LegendTitle:245.
GPR[EPS]-1659858869673
GPR[ESUN]-1659858869673
GPR[SSUN]-1659858869673
-1566484948
GPR[SPVATF]-1659858869818
GPR[EPVATF]-1659858870177
GPR[SPS]-1659858870177
[780558] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.LegendTitle:244.
GPR[EPS]-1659858870484
GPR[ESUN]-1659858870484
GPR[SSUN]-1659858870484
-1226516116
GPR[ESUN]-1659858870603
GPR[SSUN]-1659858870603
-1226516116
GPR[SPVATF]-1659858870718
GPR[EPVATF]-1659858871084
GPR[SPS]-1659858871084
[781488] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.block.AbstractBlock:212.
GPR[EPS]-1659858871414
GPR[ESUN]-1659858871415
GPR[SSUN]-1659858871415
-1226516116
GPR[SPVATF]-1659858871533
GPR[EPVATF]-1659858871910
GPR[SPS]-1659858871910
[782261] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.block.AbstractBlock:209.
GPR[EPS]-1659858872187
GPR[SPVATF]-1659858872188
GPR[EPVATF]-1659858872569
GPR[SPS]-1659858872569
[782911] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.block.AbstractBlock:209.
GPR[EPS]-1659858872837
GPR[ESUN]-1659858872837
GPR[SSUN]-1659858872837
2490626
GPR[ESUN]-1659858873001
GPR[SSUN]-1659858873001
2490626
GPR[SPVATF]-1659858873164
GPR[EPVATF]-1659858873382
GPR[SPS]-1659858873382
[783800] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:538.
GPR[EPS]-1659858873726
GPR[SPVATF]-1659858873726
GPR[EPVATF]-1659858873938
GPR[SPS]-1659858873938
[784334] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:538.
GPR[EPS]-1659858874260
GPR[ESUN]-1659858874260
GPR[SSUN]-1659858874260
2490626
GPR[SPVATF]-1659858874424
GPR[EPVATF]-1659858874640
GPR[SPS]-1659858874640
[785039] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:537.
GPR[EPS]-1659858874965
GPR[ESUN]-1659858874965
GPR[SSUN]-1659858874965
2490626
GPR[SPVATF]-1659858875128
GPR[EPVATF]-1659858875346
GPR[SPS]-1659858875346
[785744] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:536.
GPR[EPS]-1659858875670
GPR[SPVATF]-1659858875670
GPR[EPVATF]-1659858875884
GPR[SPS]-1659858875884
[786282] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:536.
GPR[EPS]-1659858876208
GPR[ESUN]-1659858876208
GPR[SSUN]-1659858876208
2490626
GPR[SPVATF]-1659858876372
GPR[EPVATF]-1659858876593
GPR[SPS]-1659858876593
[786995] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:533.
GPR[EPS]-1659858876921
GPR[SPVATF]-1659858876921
GPR[EPVATF]-1659858877136
GPR[SPS]-1659858877136
[787533] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:533.
GPR[EPS]-1659858877459
GPR[ESUN]-1659858877459
GPR[SSUN]-1659858877459
-1690918013
GPR[ESUN]-1659858877719
GPR[SSUN]-1659858877719
-1690918013
GPR[SPVATF]-1659858877978
GPR[EPVATF]-1659858878273
GPR[SPS]-1659858878273
[788803] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:744.
GPR[EPS]-1659858878729
GPR[SPVATF]-1659858878729
GPR[EPVATF]-1659858879018
GPR[SPS]-1659858879018
[789540] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:744.
GPR[EPS]-1659858879466
GPR[ESUN]-1659858879466
GPR[SSUN]-1659858879466
-1690918013
GPR[SPVATF]-1659858879779
GPR[EPVATF]-1659858880081
GPR[SPS]-1659858880081
[790606] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:741.
GPR[EPS]-1659858880532
GPR[SPVATF]-1659858880532
GPR[EPVATF]-1659858880821
GPR[SPS]-1659858880821
[791352] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:741.
GPR[EPS]-1659858881278
GPR[ESUN]-1659858881278
GPR[SSUN]-1659858881278
2490626
GPR[ESUN]-1659858881445
GPR[SSUN]-1659858881445
2490626
GPR[SPVATF]-1659858881608
GPR[EPVATF]-1659858881981
GPR[SPS]-1659858881981
[792413] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:624.
GPR[EPS]-1659858882339
GPR[ESUN]-1659858882339
GPR[SSUN]-1659858882339
2490626
GPR[SPVATF]-1659858882505
GPR[EPVATF]-1659858882876
GPR[SPS]-1659858882876
[793300] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:620.
GPR[EPS]-1659858883226
GPR[SPVATF]-1659858883226
GPR[EPVATF]-1659858883597
GPR[SPS]-1659858883597
[794021] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:620.
GPR[EPS]-1659858883947
GPR[ESUN]-1659858883947
GPR[SSUN]-1659858883947
2490626
GPR[ESUN]-1659858884112
GPR[SSUN]-1659858884112
2490626
GPR[ESUN]-1659858884276
GPR[SSUN]-1659858884276
80818745
GPR[ESUN]-1659858884392
GPR[SSUN]-1659858884392
80818745
GPR[SPVATF]-1659858884515
GPR[EPVATF]-1659858884890
GPR[SPS]-1659858884890
[795244] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.Title:374.
GPR[EPS]-1659858885170
GPR[ESUN]-1659858885170
GPR[SSUN]-1659858885170
-1522070587
GPR[SPVATF]-1659858885301
GPR[EPVATF]-1659858885525
GPR[SPS]-1659858885525
[795767] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TimeSeries extends org.jfree.data.general.Series implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = -5032960206869675528L;

    protected static final java.lang.String DEFAULT_DOMAIN_DESCRIPTION = "Time";

    protected static final java.lang.String DEFAULT_RANGE_DESCRIPTION = "Value";

    private java.lang.String domain;

    private java.lang.String range;

    protected java.lang.Class timePeriodClass;

    protected java.util.List data;

    private int maximumItemCount;

    private long maximumItemAge;

    private double minY;

    private double maxY;

    public TimeSeries(java.lang.Comparable name) {
        this(name, org.jfree.data.time.TimeSeries.DEFAULT_DOMAIN_DESCRIPTION, org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION);
    }

    public TimeSeries(java.lang.Comparable name, java.lang.String domain, java.lang.String range) {
        super(name);
        this.domain = domain;
        this.range = range;
        this.timePeriodClass = null;
        this.data = new java.util.ArrayList();
        this.maximumItemCount = java.lang.Integer.MAX_VALUE;
        this.maximumItemAge = java.lang.Long.MAX_VALUE;
        this.minY = java.lang.Double.NaN;
        this.maxY = java.lang.Double.NaN;
    }

    public java.lang.String getDomainDescription() {
        return this.domain;
    }

    public void setDomainDescription(java.lang.String description) {
        java.lang.String old = this.domain;
        this.domain = description;
        firePropertyChange("Domain", old, description);
    }

    public java.lang.String getRangeDescription() {
        return this.range;
    }

    public void setRangeDescription(java.lang.String description) {
        java.lang.String old = this.range;
        this.range = description;
        firePropertyChange("Range", old, description);
    }

    public int getItemCount() {
        return this.data.size();
    }

    public java.util.List getItems() {
        return java.util.Collections.unmodifiableList(this.data);
    }

    public int getMaximumItemCount() {
        return this.maximumItemCount;
    }

    public void setMaximumItemCount(int maximum) {
        if (maximum < 0) {
            throw new java.lang.IllegalArgumentException("Negative 'maximum' argument.");
        }
        this.maximumItemCount = maximum;
        int count = this.data.size();
        if (count > maximum) {
            delete(0, (count - maximum) - 1);
        }
    }

    public long getMaximumItemAge() {
        return this.maximumItemAge;
    }

    public void setMaximumItemAge(long periods) {
        if (periods < 0) {
            throw new java.lang.IllegalArgumentException("Negative 'periods' argument.");
        }
        this.maximumItemAge = periods;
        removeAgedItems(true);
    }

    public double getMinY() {
        return this.minY;
    }

    public double getMaxY() {
        return this.maxY;
    }

    public java.lang.Class getTimePeriodClass() {
        return this.timePeriodClass;
    }

    public org.jfree.data.time.TimeSeriesDataItem getDataItem(int index) {
        org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
        return ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
    }

    public org.jfree.data.time.TimeSeriesDataItem getDataItem(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            return getDataItem(index);
        } else {
            return null;
        }
    }

    org.jfree.data.time.TimeSeriesDataItem getRawDataItem(int index) {
        return ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
    }

    org.jfree.data.time.TimeSeriesDataItem getRawDataItem(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            return ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
        } else {
            return null;
        }
    }

    public org.jfree.data.time.RegularTimePeriod getTimePeriod(int index) {
        return getRawDataItem(index).getPeriod();
    }

    public org.jfree.data.time.RegularTimePeriod getNextTimePeriod() {
        org.jfree.data.time.RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
        return last.next();
    }

    public java.util.Collection getTimePeriods() {
        java.util.Collection result = new java.util.ArrayList();
        for (int i = 0; i < getItemCount(); i++) {
            result.add(getTimePeriod(i));
        }
        return result;
    }

    public java.util.Collection getTimePeriodsUniqueToOtherSeries(org.jfree.data.time.TimeSeries series) {
        java.util.Collection result = new java.util.ArrayList();
        for (int i = 0; i < series.getItemCount(); i++) {
            org.jfree.data.time.RegularTimePeriod period = series.getTimePeriod(i);
            int index = getIndex(period);
            if (index < 0) {
                result.add(period);
            }
        }
        return result;
    }

    public int getIndex(org.jfree.data.time.RegularTimePeriod period) {
        if (period == null) {
            throw new java.lang.IllegalArgumentException("Null 'period' argument.");
        }
        org.jfree.data.time.TimeSeriesDataItem dummy = new org.jfree.data.time.TimeSeriesDataItem(period, java.lang.Integer.MIN_VALUE);
        return java.util.Collections.binarySearch(this.data, dummy);
    }

    public java.lang.Number getValue(int index) {
        return getRawDataItem(index).getValue();
    }

    public java.lang.Number getValue(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            return getValue(index);
        } else {
            return null;
        }
    }

    public void add(org.jfree.data.time.TimeSeriesDataItem item) {
        add(item, true);
    }

    public void add(org.jfree.data.time.TimeSeriesDataItem item, boolean notify) {
        if (item == null) {
            throw new java.lang.IllegalArgumentException("Null 'item' argument.");
        }
        item = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
        java.lang.Class c = item.getPeriod().getClass();
        if (this.timePeriodClass == null) {
            this.timePeriodClass = c;
        } else if (!this.timePeriodClass.equals(c)) {
            java.lang.StringBuffer b = new java.lang.StringBuffer();
            b.append("You are trying to add data where the time period class ");
            b.append("is ");
            b.append(item.getPeriod().getClass().getName());
            b.append(", but the TimeSeries is expecting an instance of ");
            b.append(this.timePeriodClass.getName());
            b.append(".");
            throw new org.jfree.data.general.SeriesException(b.toString());
        }
        boolean added = false;
        int count = getItemCount();
        if (count == 0) {
            this.data.add(item);
            added = true;
        } else {
            org.jfree.data.time.RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
            if (item.getPeriod().compareTo(last) > 0) {
                this.data.add(item);
                added = true;
            } else {
                int index = java.util.Collections.binarySearch(this.data, item);
                if (index < 0) {
                    this.data.add((-index) - 1, item);
                    added = true;
                } else {
                    java.lang.StringBuffer b = new java.lang.StringBuffer();
                    b.append("You are attempting to add an observation for ");
                    b.append("the time period ");
                    b.append(item.getPeriod().toString());
                    b.append(" but the series already contains an observation");
                    b.append(" for that time period. Duplicates are not ");
                    b.append("permitted.  Try using the addOrUpdate() method.");
                    throw new org.jfree.data.general.SeriesException(b.toString());
                }
            }
        }
        if (added) {
            updateBoundsForAddedItem(item);
            if (getItemCount() > this.maximumItemCount) {
                org.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0)));
                updateBoundsForRemovedItem(d);
            }
            removeAgedItems(false);
            if (notify) {
                fireSeriesChanged();
            }
        }
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, double value) {
        add(period, value, true);
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, double value, boolean notify) {
        org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);
        add(item, notify);
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
        add(period, value, true);
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value, boolean notify) {
        org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);
        add(item, notify);
    }

    public void update(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
        org.jfree.data.time.TimeSeriesDataItem temp = new org.jfree.data.time.TimeSeriesDataItem(period, value);
        int index = java.util.Collections.binarySearch(this.data, temp);
        if (index < 0) {
            throw new org.jfree.data.general.SeriesException("There is no existing value for the " + "specified 'period'.");
        }
        update(index, value);
    }

    public void update(int index, java.lang.Number value) {
        org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
        boolean iterate = false;
        java.lang.Number oldYN = item.getValue();
        if (oldYN != null) {
            double oldY = oldYN.doubleValue();
            if (!java.lang.Double.isNaN(oldY)) {
                iterate = (oldY <= this.minY) || (oldY >= this.maxY);
            }
        }
        item.setValue(value);
        if (iterate) {
            findBoundsByIteration();
        } else if (value != null) {
            double yy = value.doubleValue();
            this.minY = minIgnoreNaN(this.minY, yy);
            this.maxY = maxIgnoreNaN(this.maxY, yy);
        }
        fireSeriesChanged();
    }

    public org.jfree.data.time.TimeSeries addAndOrUpdate(org.jfree.data.time.TimeSeries series) {
        org.jfree.data.time.TimeSeries overwritten = new org.jfree.data.time.TimeSeries("Overwritten values from: " + getKey());
        for (int i = 0; i < series.getItemCount(); i++) {
            org.jfree.data.time.TimeSeriesDataItem item = series.getRawDataItem(i);
            org.jfree.data.time.TimeSeriesDataItem oldItem = addOrUpdate(item.getPeriod(), item.getValue());
            if (oldItem != null) {
                overwritten.add(oldItem);
            }
        }
        return overwritten;
    }

    public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, double value) {
        return addOrUpdate(period, new java.lang.Double(value));
    }

    public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
        return addOrUpdate(new org.jfree.data.time.TimeSeriesDataItem(period, value));
    }

    public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.TimeSeriesDataItem item) {
        if (item == null) {
            throw new java.lang.IllegalArgumentException("Null 'period' argument.");
        }
        java.lang.Class periodClass = item.getPeriod().getClass();
        if (this.timePeriodClass == null) {
            this.timePeriodClass = periodClass;
        } else if (!this.timePeriodClass.equals(periodClass)) {
            java.lang.String msg = (((("You are trying to add data where the time " + "period class is ") + periodClass.getName()) + ", but the TimeSeries is expecting an instance of ") + this.timePeriodClass.getName()) + ".";
            throw new org.jfree.data.general.SeriesException(msg);
        }
        org.jfree.data.time.TimeSeriesDataItem overwritten = null;
        int index = java.util.Collections.binarySearch(this.data, item);
        if (index >= 0) {
            org.jfree.data.time.TimeSeriesDataItem existing = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
            overwritten = ((org.jfree.data.time.TimeSeriesDataItem) (existing.clone()));
            boolean iterate = false;
            java.lang.Number oldYN = existing.getValue();
            double oldY = (oldYN != null) ? oldYN.doubleValue() : java.lang.Double.NaN;
            if (!java.lang.Double.isNaN(oldY)) {
                iterate = (oldY <= this.minY) || (oldY >= this.maxY);
            }
            existing.setValue(item.getValue());
            if (iterate) {
                findBoundsByIteration();
            } else if (item.getValue() != null) {
                double yy = item.getValue().doubleValue();
                this.minY = minIgnoreNaN(this.minY, yy);
                this.maxY = minIgnoreNaN(this.maxY, yy);
            }
        } else {
            item = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
            this.data.add((-index) - 1, item);
            updateBoundsForAddedItem(item);
            if (getItemCount() > this.maximumItemCount) {
                org.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0)));
                updateBoundsForRemovedItem(d);
            }
        }
        removeAgedItems(false);
        fireSeriesChanged();
        return overwritten;
    }

    public void removeAgedItems(boolean notify) {
        if (getItemCount() > 1) {
            long latest = getTimePeriod(getItemCount() - 1).getSerialIndex();
            boolean removed = false;
            while ((latest - getTimePeriod(0).getSerialIndex()) > this.maximumItemAge) {
                this.data.remove(0);
                removed = true;
            } 
            if (removed) {
                findBoundsByIteration();
                if (notify) {
                    fireSeriesChanged();
                }
            }
        }
    }

    public void removeAgedItems(long latest, boolean notify) {
        if (this.data.isEmpty()) {
            return;
        }
        long index = java.lang.Long.MAX_VALUE;
        try {
            java.lang.reflect.Method m = org.jfree.data.time.RegularTimePeriod.class.getDeclaredMethod("createInstance", new java.lang.Class[]{ java.lang.Class.class, java.util.Date.class, java.util.TimeZone.class });
            org.jfree.data.time.RegularTimePeriod newest = ((org.jfree.data.time.RegularTimePeriod) (m.invoke(this.timePeriodClass, new java.lang.Object[]{ this.timePeriodClass, new java.util.Date(latest), java.util.TimeZone.getDefault() })));
            index = newest.getSerialIndex();
        } catch (java.lang.NoSuchMethodException e) {
            e.printStackTrace();
        } catch (java.lang.IllegalAccessException e) {
            e.printStackTrace();
        } catch (java.lang.reflect.InvocationTargetException e) {
            e.printStackTrace();
        }
        boolean removed = false;
        while ((getItemCount() > 0) && ((index - getTimePeriod(0).getSerialIndex()) > this.maximumItemAge)) {
            this.data.remove(0);
            removed = true;
        } 
        if (removed) {
            findBoundsByIteration();
            if (notify) {
                fireSeriesChanged();
            }
        }
    }

    public void clear() {
        if (this.data.size() > 0) {
            this.data.clear();
            this.timePeriodClass = null;
            this.minY = java.lang.Double.NaN;
            this.maxY = java.lang.Double.NaN;
            fireSeriesChanged();
        }
    }

    public void delete(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(index)));
            updateBoundsForRemovedItem(item);
            if (this.data.isEmpty()) {
                this.timePeriodClass = null;
            }
            fireSeriesChanged();
        }
    }

    public void delete(int start, int end) {
        delete(start, end, true);
    }

    public void delete(int start, int end, boolean notify) {
        if (end < start) {
            throw new java.lang.IllegalArgumentException("Requires start <= end.");
        }
        for (int i = 0; i <= (end - start); i++) {
            this.data.remove(start);
        }
        findBoundsByIteration();
        if (this.data.isEmpty()) {
            this.timePeriodClass = null;
        }
        if (notify) {
            fireSeriesChanged();
        }
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.data.time.TimeSeries clone = ((org.jfree.data.time.TimeSeries) (super.clone()));
        clone.data = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.data)));
        return clone;
    }

    public org.jfree.data.time.TimeSeries createCopy(int start, int end) throws java.lang.CloneNotSupportedException {
        if (start < 0) {
            throw new java.lang.IllegalArgumentException("Requires start >= 0.");
        }
        if (end < start) {
            throw new java.lang.IllegalArgumentException("Requires start <= end.");
        }
        org.jfree.data.time.TimeSeries copy = ((org.jfree.data.time.TimeSeries) (super.clone()));
        copy.data = new java.util.ArrayList();
        if (this.data.size() > 0) {
            for (int index = start; index <= end; index++) {
                org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
                org.jfree.data.time.TimeSeriesDataItem clone = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
                try {
                    copy.add(clone);
                } catch (org.jfree.data.general.SeriesException e) {
                    e.printStackTrace();
                }
            }
        }
        return copy;
    }

    public org.jfree.data.time.TimeSeries createCopy(org.jfree.data.time.RegularTimePeriod start, org.jfree.data.time.RegularTimePeriod end) throws java.lang.CloneNotSupportedException {
        if (start == null) {
            throw new java.lang.IllegalArgumentException("Null 'start' argument.");
        }
        if (end == null) {
            throw new java.lang.IllegalArgumentException("Null 'end' argument.");
        }
        if (start.compareTo(end) > 0) {
            throw new java.lang.IllegalArgumentException("Requires start on or before end.");
        }
        boolean emptyRange = false;
        int startIndex = getIndex(start);
        if (startIndex < 0) {
            startIndex = -(startIndex + 1);
            if (startIndex == this.data.size()) {
                emptyRange = true;
            }
        }
        int endIndex = getIndex(end);
        if (endIndex < 0) {
            endIndex = -(endIndex + 1);
            endIndex = endIndex - 1;
        }
        if ((endIndex < 0) || (endIndex < startIndex)) {
            emptyRange = true;
        }
        if (emptyRange) {
            org.jfree.data.time.TimeSeries copy = ((org.jfree.data.time.TimeSeries) (super.clone()));
            copy.data = new java.util.ArrayList();
            return copy;
        } else {
            return createCopy(startIndex, endIndex);
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.time.TimeSeries)) {
            return false;
        }
        org.jfree.data.time.TimeSeries that = ((org.jfree.data.time.TimeSeries) (obj));
        if (!org.jfree.chart.util.ObjectUtilities.equal(getDomainDescription(), that.getDomainDescription())) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(getRangeDescription(), that.getRangeDescription())) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.timePeriodClass, that.timePeriodClass)) {
            return false;
        }
        if (getMaximumItemAge() != that.getMaximumItemAge()) {
            return false;
        }
        if (getMaximumItemCount() != that.getMaximumItemCount()) {
            return false;
        }
        int count = getItemCount();
        if (count != that.getItemCount()) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.data, that.data)) {
            return false;
        }
        return super.equals(obj);
    }

    public int hashCode() {
        int result = super.hashCode();
        result = (29 * result) + (this.domain != null ? this.domain.hashCode() : 0);
        result = (29 * result) + (this.range != null ? this.range.hashCode() : 0);
        result = (29 * result) + (this.timePeriodClass != null ? this.timePeriodClass.hashCode() : 0);
        int count = getItemCount();
        if (count > 0) {
            org.jfree.data.time.TimeSeriesDataItem item = getRawDataItem(0);
            result = (29 * result) + item.hashCode();
        }
        if (count > 1) {
            org.jfree.data.time.TimeSeriesDataItem item = getRawDataItem(count - 1);
            result = (29 * result) + item.hashCode();
        }
        if (count > 2) {
            org.jfree.data.time.TimeSeriesDataItem item = getRawDataItem(count / 2);
            result = (29 * result) + item.hashCode();
        }
        result = (29 * result) + this.maximumItemCount;
        result = (29 * result) + ((int) (this.maximumItemAge));
        return result;
    }

    private void updateBoundsForAddedItem(org.jfree.data.time.TimeSeriesDataItem item) {
        java.lang.Number yN = item.getValue();
        if (item.getValue() != null) {
            double y = yN.doubleValue();
            this.minY = minIgnoreNaN(this.minY, y);
            this.maxY = maxIgnoreNaN(this.maxY, y);
        }
    }

    private void updateBoundsForRemovedItem(org.jfree.data.time.TimeSeriesDataItem item) {
        java.lang.Number yN = item.getValue();
        if (yN != null) {
            double y = yN.doubleValue();
            if (!java.lang.Double.isNaN(y)) {
                if ((y <= this.minY) || (y >= this.maxY)) {
                    findBoundsByIteration();
                }
            }
        }
    }

    private void findBoundsByIteration() {
        this.minY = java.lang.Double.NaN;
        this.maxY = java.lang.Double.NaN;
        java.util.Iterator iterator = this.data.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (iterator.next()));
            updateBoundsForAddedItem(item);
        } 
    }

    private double minIgnoreNaN(double a, double b) {
        if (java.lang.Double.isNaN(a)) {
            return b;
        } else if (java.lang.Double.isNaN(b)) {
            return a;
        } else {
            return java.lang.Math.min(a, b);
        }
    }

    private double maxIgnoreNaN(double a, double b) {
        if (java.lang.Double.isNaN(a)) {
            return b;
        } else if (java.lang.Double.isNaN(b)) {
            return a;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(759).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(759).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(759).collectInput("org.jfree.data.time.TimeSeries.this.data",org.jfree.data.time.TimeSeries.this.data);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(759).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(759).collectInput("org.jfree.data.time.TimeSeries.this.maximumItemCount",org.jfree.data.time.TimeSeries.this.maximumItemCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(759).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(759).collectInput("org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION",org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(759).collectInput("org.jfree.data.time.TimeSeries.this.domain",org.jfree.data.time.TimeSeries.this.domain);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(759).collectInput("org.jfree.data.time.TimeSeries.this.maxY",org.jfree.data.time.TimeSeries.this.maxY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(759).collectInput("org.jfree.data.time.TimeSeries.this.maximumItemAge",org.jfree.data.time.TimeSeries.this.maximumItemAge);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(759).collectInput("org.jfree.data.time.TimeSeries.DEFAULT_DOMAIN_DESCRIPTION",org.jfree.data.time.TimeSeries.DEFAULT_DOMAIN_DESCRIPTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(759).collectInput("org.jfree.data.time.TimeSeries.this.timePeriodClass",org.jfree.data.time.TimeSeries.this.timePeriodClass);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(759).collectInput("org.jfree.data.time.TimeSeries.this.range",org.jfree.data.time.TimeSeries.this.range);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(759).collectInput("org.jfree.data.time.TimeSeries.this.minY",org.jfree.data.time.TimeSeries.this.minY);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(759).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(759).collectionEnds();
            }
            if (runtimeAngelicValue)
                return java.lang.Math.max(a, b);

        }
    }
}
[795767] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858885693
GPR[SSUN]-1659858885693
-1522070587
GPR[SPVATF]-1659858885824
GPR[EPVATF]-1659858886055
GPR[SPS]-1659858886055
[796294] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TimeSeries extends org.jfree.data.general.Series implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = -5032960206869675528L;

    protected static final java.lang.String DEFAULT_DOMAIN_DESCRIPTION = "Time";

    protected static final java.lang.String DEFAULT_RANGE_DESCRIPTION = "Value";

    private java.lang.String domain;

    private java.lang.String range;

    protected java.lang.Class timePeriodClass;

    protected java.util.List data;

    private int maximumItemCount;

    private long maximumItemAge;

    private double minY;

    private double maxY;

    public TimeSeries(java.lang.Comparable name) {
        this(name, org.jfree.data.time.TimeSeries.DEFAULT_DOMAIN_DESCRIPTION, org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION);
    }

    public TimeSeries(java.lang.Comparable name, java.lang.String domain, java.lang.String range) {
        super(name);
        this.domain = domain;
        this.range = range;
        this.timePeriodClass = null;
        this.data = new java.util.ArrayList();
        this.maximumItemCount = java.lang.Integer.MAX_VALUE;
        this.maximumItemAge = java.lang.Long.MAX_VALUE;
        this.minY = java.lang.Double.NaN;
        this.maxY = java.lang.Double.NaN;
    }

    public java.lang.String getDomainDescription() {
        return this.domain;
    }

    public void setDomainDescription(java.lang.String description) {
        java.lang.String old = this.domain;
        this.domain = description;
        firePropertyChange("Domain", old, description);
    }

    public java.lang.String getRangeDescription() {
        return this.range;
    }

    public void setRangeDescription(java.lang.String description) {
        java.lang.String old = this.range;
        this.range = description;
        firePropertyChange("Range", old, description);
    }

    public int getItemCount() {
        return this.data.size();
    }

    public java.util.List getItems() {
        return java.util.Collections.unmodifiableList(this.data);
    }

    public int getMaximumItemCount() {
        return this.maximumItemCount;
    }

    public void setMaximumItemCount(int maximum) {
        if (maximum < 0) {
            throw new java.lang.IllegalArgumentException("Negative 'maximum' argument.");
        }
        this.maximumItemCount = maximum;
        int count = this.data.size();
        if (count > maximum) {
            delete(0, (count - maximum) - 1);
        }
    }

    public long getMaximumItemAge() {
        return this.maximumItemAge;
    }

    public void setMaximumItemAge(long periods) {
        if (periods < 0) {
            throw new java.lang.IllegalArgumentException("Negative 'periods' argument.");
        }
        this.maximumItemAge = periods;
        removeAgedItems(true);
    }

    public double getMinY() {
        return this.minY;
    }

    public double getMaxY() {
        return this.maxY;
    }

    public java.lang.Class getTimePeriodClass() {
        return this.timePeriodClass;
    }

    public org.jfree.data.time.TimeSeriesDataItem getDataItem(int index) {
        org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
        return ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
    }

    public org.jfree.data.time.TimeSeriesDataItem getDataItem(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            return getDataItem(index);
        } else {
            return null;
        }
    }

    org.jfree.data.time.TimeSeriesDataItem getRawDataItem(int index) {
        return ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
    }

    org.jfree.data.time.TimeSeriesDataItem getRawDataItem(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            return ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
        } else {
            return null;
        }
    }

    public org.jfree.data.time.RegularTimePeriod getTimePeriod(int index) {
        return getRawDataItem(index).getPeriod();
    }

    public org.jfree.data.time.RegularTimePeriod getNextTimePeriod() {
        org.jfree.data.time.RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
        return last.next();
    }

    public java.util.Collection getTimePeriods() {
        java.util.Collection result = new java.util.ArrayList();
        for (int i = 0; i < getItemCount(); i++) {
            result.add(getTimePeriod(i));
        }
        return result;
    }

    public java.util.Collection getTimePeriodsUniqueToOtherSeries(org.jfree.data.time.TimeSeries series) {
        java.util.Collection result = new java.util.ArrayList();
        for (int i = 0; i < series.getItemCount(); i++) {
            org.jfree.data.time.RegularTimePeriod period = series.getTimePeriod(i);
            int index = getIndex(period);
            if (index < 0) {
                result.add(period);
            }
        }
        return result;
    }

    public int getIndex(org.jfree.data.time.RegularTimePeriod period) {
        if (period == null) {
            throw new java.lang.IllegalArgumentException("Null 'period' argument.");
        }
        org.jfree.data.time.TimeSeriesDataItem dummy = new org.jfree.data.time.TimeSeriesDataItem(period, java.lang.Integer.MIN_VALUE);
        return java.util.Collections.binarySearch(this.data, dummy);
    }

    public java.lang.Number getValue(int index) {
        return getRawDataItem(index).getValue();
    }

    public java.lang.Number getValue(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            return getValue(index);
        } else {
            return null;
        }
    }

    public void add(org.jfree.data.time.TimeSeriesDataItem item) {
        add(item, true);
    }

    public void add(org.jfree.data.time.TimeSeriesDataItem item, boolean notify) {
        if (item == null) {
            throw new java.lang.IllegalArgumentException("Null 'item' argument.");
        }
        item = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
        java.lang.Class c = item.getPeriod().getClass();
        if (this.timePeriodClass == null) {
            this.timePeriodClass = c;
        } else if (!this.timePeriodClass.equals(c)) {
            java.lang.StringBuffer b = new java.lang.StringBuffer();
            b.append("You are trying to add data where the time period class ");
            b.append("is ");
            b.append(item.getPeriod().getClass().getName());
            b.append(", but the TimeSeries is expecting an instance of ");
            b.append(this.timePeriodClass.getName());
            b.append(".");
            throw new org.jfree.data.general.SeriesException(b.toString());
        }
        boolean added = false;
        int count = getItemCount();
        if (count == 0) {
            this.data.add(item);
            added = true;
        } else {
            org.jfree.data.time.RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
            if (item.getPeriod().compareTo(last) > 0) {
                this.data.add(item);
                added = true;
            } else {
                int index = java.util.Collections.binarySearch(this.data, item);
                if (index < 0) {
                    this.data.add((-index) - 1, item);
                    added = true;
                } else {
                    java.lang.StringBuffer b = new java.lang.StringBuffer();
                    b.append("You are attempting to add an observation for ");
                    b.append("the time period ");
                    b.append(item.getPeriod().toString());
                    b.append(" but the series already contains an observation");
                    b.append(" for that time period. Duplicates are not ");
                    b.append("permitted.  Try using the addOrUpdate() method.");
                    throw new org.jfree.data.general.SeriesException(b.toString());
                }
            }
        }
        if (added) {
            updateBoundsForAddedItem(item);
            if (getItemCount() > this.maximumItemCount) {
                org.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0)));
                updateBoundsForRemovedItem(d);
            }
            removeAgedItems(false);
            if (notify) {
                fireSeriesChanged();
            }
        }
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, double value) {
        add(period, value, true);
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, double value, boolean notify) {
        org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);
        add(item, notify);
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
        add(period, value, true);
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value, boolean notify) {
        org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);
        add(item, notify);
    }

    public void update(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
        org.jfree.data.time.TimeSeriesDataItem temp = new org.jfree.data.time.TimeSeriesDataItem(period, value);
        int index = java.util.Collections.binarySearch(this.data, temp);
        if (index < 0) {
            throw new org.jfree.data.general.SeriesException("There is no existing value for the " + "specified 'period'.");
        }
        update(index, value);
    }

    public void update(int index, java.lang.Number value) {
        org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
        boolean iterate = false;
        java.lang.Number oldYN = item.getValue();
        if (oldYN != null) {
            double oldY = oldYN.doubleValue();
            if (!java.lang.Double.isNaN(oldY)) {
                iterate = (oldY <= this.minY) || (oldY >= this.maxY);
            }
        }
        item.setValue(value);
        if (iterate) {
            findBoundsByIteration();
        } else if (value != null) {
            double yy = value.doubleValue();
            this.minY = minIgnoreNaN(this.minY, yy);
            this.maxY = maxIgnoreNaN(this.maxY, yy);
        }
        fireSeriesChanged();
    }

    public org.jfree.data.time.TimeSeries addAndOrUpdate(org.jfree.data.time.TimeSeries series) {
        org.jfree.data.time.TimeSeries overwritten = new org.jfree.data.time.TimeSeries("Overwritten values from: " + getKey());
        for (int i = 0; i < series.getItemCount(); i++) {
            org.jfree.data.time.TimeSeriesDataItem item = series.getRawDataItem(i);
            org.jfree.data.time.TimeSeriesDataItem oldItem = addOrUpdate(item.getPeriod(), item.getValue());
            if (oldItem != null) {
                overwritten.add(oldItem);
            }
        }
        return overwritten;
    }

    public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, double value) {
        return addOrUpdate(period, new java.lang.Double(value));
    }

    public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
        return addOrUpdate(new org.jfree.data.time.TimeSeriesDataItem(period, value));
    }

    public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.TimeSeriesDataItem item) {
        if (item == null) {
            throw new java.lang.IllegalArgumentException("Null 'period' argument.");
        }
        java.lang.Class periodClass = item.getPeriod().getClass();
        if (this.timePeriodClass == null) {
            this.timePeriodClass = periodClass;
        } else if (!this.timePeriodClass.equals(periodClass)) {
            java.lang.String msg = (((("You are trying to add data where the time " + "period class is ") + periodClass.getName()) + ", but the TimeSeries is expecting an instance of ") + this.timePeriodClass.getName()) + ".";
            throw new org.jfree.data.general.SeriesException(msg);
        }
        org.jfree.data.time.TimeSeriesDataItem overwritten = null;
        int index = java.util.Collections.binarySearch(this.data, item);
        if (index >= 0) {
            org.jfree.data.time.TimeSeriesDataItem existing = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
            overwritten = ((org.jfree.data.time.TimeSeriesDataItem) (existing.clone()));
            boolean iterate = false;
            java.lang.Number oldYN = existing.getValue();
            double oldY = (oldYN != null) ? oldYN.doubleValue() : java.lang.Double.NaN;
            if (!java.lang.Double.isNaN(oldY)) {
                iterate = (oldY <= this.minY) || (oldY >= this.maxY);
            }
            existing.setValue(item.getValue());
            if (iterate) {
                findBoundsByIteration();
            } else if (item.getValue() != null) {
                double yy = item.getValue().doubleValue();
                this.minY = minIgnoreNaN(this.minY, yy);
                this.maxY = minIgnoreNaN(this.maxY, yy);
            }
        } else {
            item = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
            this.data.add((-index) - 1, item);
            updateBoundsForAddedItem(item);
            if (getItemCount() > this.maximumItemCount) {
                org.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0)));
                updateBoundsForRemovedItem(d);
            }
        }
        removeAgedItems(false);
        fireSeriesChanged();
        return overwritten;
    }

    public void removeAgedItems(boolean notify) {
        if (getItemCount() > 1) {
            long latest = getTimePeriod(getItemCount() - 1).getSerialIndex();
            boolean removed = false;
            while ((latest - getTimePeriod(0).getSerialIndex()) > this.maximumItemAge) {
                this.data.remove(0);
                removed = true;
            } 
            if (removed) {
                findBoundsByIteration();
                if (notify) {
                    fireSeriesChanged();
                }
            }
        }
    }

    public void removeAgedItems(long latest, boolean notify) {
        if (this.data.isEmpty()) {
            return;
        }
        long index = java.lang.Long.MAX_VALUE;
        try {
            java.lang.reflect.Method m = org.jfree.data.time.RegularTimePeriod.class.getDeclaredMethod("createInstance", new java.lang.Class[]{ java.lang.Class.class, java.util.Date.class, java.util.TimeZone.class });
            org.jfree.data.time.RegularTimePeriod newest = ((org.jfree.data.time.RegularTimePeriod) (m.invoke(this.timePeriodClass, new java.lang.Object[]{ this.timePeriodClass, new java.util.Date(latest), java.util.TimeZone.getDefault() })));
            index = newest.getSerialIndex();
        } catch (java.lang.NoSuchMethodException e) {
            e.printStackTrace();
        } catch (java.lang.IllegalAccessException e) {
            e.printStackTrace();
        } catch (java.lang.reflect.InvocationTargetException e) {
            e.printStackTrace();
        }
        boolean removed = false;
        while ((getItemCount() > 0) && ((index - getTimePeriod(0).getSerialIndex()) > this.maximumItemAge)) {
            this.data.remove(0);
            removed = true;
        } 
        if (removed) {
            findBoundsByIteration();
            if (notify) {
                fireSeriesChanged();
            }
        }
    }

    public void clear() {
        if (this.data.size() > 0) {
            this.data.clear();
            this.timePeriodClass = null;
            this.minY = java.lang.Double.NaN;
            this.maxY = java.lang.Double.NaN;
            fireSeriesChanged();
        }
    }

    public void delete(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(index)));
            updateBoundsForRemovedItem(item);
            if (this.data.isEmpty()) {
                this.timePeriodClass = null;
            }
            fireSeriesChanged();
        }
    }

    public void delete(int start, int end) {
        delete(start, end, true);
    }

    public void delete(int start, int end, boolean notify) {
        if (end < start) {
            throw new java.lang.IllegalArgumentException("Requires start <= end.");
        }
        for (int i = 0; i <= (end - start); i++) {
            this.data.remove(start);
        }
        findBoundsByIteration();
        if (this.data.isEmpty()) {
            this.timePeriodClass = null;
        }
        if (notify) {
            fireSeriesChanged();
        }
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.data.time.TimeSeries clone = ((org.jfree.data.time.TimeSeries) (super.clone()));
        clone.data = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.data)));
        return clone;
    }

    public org.jfree.data.time.TimeSeries createCopy(int start, int end) throws java.lang.CloneNotSupportedException {
        if (start < 0) {
            throw new java.lang.IllegalArgumentException("Requires start >= 0.");
        }
        if (end < start) {
            throw new java.lang.IllegalArgumentException("Requires start <= end.");
        }
        org.jfree.data.time.TimeSeries copy = ((org.jfree.data.time.TimeSeries) (super.clone()));
        copy.data = new java.util.ArrayList();
        if (this.data.size() > 0) {
            for (int index = start; index <= end; index++) {
                org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
                org.jfree.data.time.TimeSeriesDataItem clone = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
                try {
                    copy.add(clone);
                } catch (org.jfree.data.general.SeriesException e) {
                    e.printStackTrace();
                }
            }
        }
        return copy;
    }

    public org.jfree.data.time.TimeSeries createCopy(org.jfree.data.time.RegularTimePeriod start, org.jfree.data.time.RegularTimePeriod end) throws java.lang.CloneNotSupportedException {
        if (start == null) {
            throw new java.lang.IllegalArgumentException("Null 'start' argument.");
        }
        if (end == null) {
            throw new java.lang.IllegalArgumentException("Null 'end' argument.");
        }
        if (start.compareTo(end) > 0) {
            throw new java.lang.IllegalArgumentException("Requires start on or before end.");
        }
        boolean emptyRange = false;
        int startIndex = getIndex(start);
        if (startIndex < 0) {
            startIndex = -(startIndex + 1);
            if (startIndex == this.data.size()) {
                emptyRange = true;
            }
        }
        int endIndex = getIndex(end);
        if (endIndex < 0) {
            endIndex = -(endIndex + 1);
            endIndex = endIndex - 1;
        }
        if ((endIndex < 0) || (endIndex < startIndex)) {
            emptyRange = true;
        }
        if (emptyRange) {
            org.jfree.data.time.TimeSeries copy = ((org.jfree.data.time.TimeSeries) (super.clone()));
            copy.data = new java.util.ArrayList();
            return copy;
        } else {
            return createCopy(startIndex, endIndex);
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.time.TimeSeries)) {
            return false;
        }
        org.jfree.data.time.TimeSeries that = ((org.jfree.data.time.TimeSeries) (obj));
        if (!org.jfree.chart.util.ObjectUtilities.equal(getDomainDescription(), that.getDomainDescription())) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(getRangeDescription(), that.getRangeDescription())) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.timePeriodClass, that.timePeriodClass)) {
            return false;
        }
        if (getMaximumItemAge() != that.getMaximumItemAge()) {
            return false;
        }
        if (getMaximumItemCount() != that.getMaximumItemCount()) {
            return false;
        }
        int count = getItemCount();
        if (count != that.getItemCount()) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.data, that.data)) {
            return false;
        }
        return super.equals(obj);
    }

    public int hashCode() {
        int result = super.hashCode();
        result = (29 * result) + (this.domain != null ? this.domain.hashCode() : 0);
        result = (29 * result) + (this.range != null ? this.range.hashCode() : 0);
        result = (29 * result) + (this.timePeriodClass != null ? this.timePeriodClass.hashCode() : 0);
        int count = getItemCount();
        if (count > 0) {
            org.jfree.data.time.TimeSeriesDataItem item = getRawDataItem(0);
            result = (29 * result) + item.hashCode();
        }
        if (count > 1) {
            org.jfree.data.time.TimeSeriesDataItem item = getRawDataItem(count - 1);
            result = (29 * result) + item.hashCode();
        }
        if (count > 2) {
            org.jfree.data.time.TimeSeriesDataItem item = getRawDataItem(count / 2);
            result = (29 * result) + item.hashCode();
        }
        result = (29 * result) + this.maximumItemCount;
        result = (29 * result) + ((int) (this.maximumItemAge));
        return result;
    }

    private void updateBoundsForAddedItem(org.jfree.data.time.TimeSeriesDataItem item) {
        java.lang.Number yN = item.getValue();
        if (item.getValue() != null) {
            double y = yN.doubleValue();
            this.minY = minIgnoreNaN(this.minY, y);
            this.maxY = maxIgnoreNaN(this.maxY, y);
        }
    }

    private void updateBoundsForRemovedItem(org.jfree.data.time.TimeSeriesDataItem item) {
        java.lang.Number yN = item.getValue();
        if (yN != null) {
            double y = yN.doubleValue();
            if (!java.lang.Double.isNaN(y)) {
                if ((y <= this.minY) || (y >= this.maxY)) {
                    findBoundsByIteration();
                }
            }
        }
    }

    private void findBoundsByIteration() {
        this.minY = java.lang.Double.NaN;
        this.maxY = java.lang.Double.NaN;
        java.util.Iterator iterator = this.data.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (iterator.next()));
            updateBoundsForAddedItem(item);
        } 
    }

    private double minIgnoreNaN(double a, double b) {
        if (java.lang.Double.isNaN(a)) {
            return b;
        } else if (java.lang.Double.isNaN(b)) {
            return a;
        } else {
            return java.lang.Math.min(a, b);
        }
    }

    private double maxIgnoreNaN(double a, double b) {
        if (java.lang.Double.isNaN(a)) {
            return b;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(760).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(760).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(760).collectInput("org.jfree.data.time.TimeSeries.this.data",org.jfree.data.time.TimeSeries.this.data);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(760).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(760).collectInput("org.jfree.data.time.TimeSeries.this.maximumItemCount",org.jfree.data.time.TimeSeries.this.maximumItemCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(760).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(760).collectInput("org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION",org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(760).collectInput("org.jfree.data.time.TimeSeries.this.domain",org.jfree.data.time.TimeSeries.this.domain);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(760).collectInput("org.jfree.data.time.TimeSeries.this.maxY",org.jfree.data.time.TimeSeries.this.maxY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(760).collectInput("org.jfree.data.time.TimeSeries.this.maximumItemAge",org.jfree.data.time.TimeSeries.this.maximumItemAge);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(760).collectInput("org.jfree.data.time.TimeSeries.DEFAULT_DOMAIN_DESCRIPTION",org.jfree.data.time.TimeSeries.DEFAULT_DOMAIN_DESCRIPTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(760).collectInput("org.jfree.data.time.TimeSeries.this.timePeriodClass",org.jfree.data.time.TimeSeries.this.timePeriodClass);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(760).collectInput("org.jfree.data.time.TimeSeries.this.range",org.jfree.data.time.TimeSeries.this.range);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(760).collectInput("org.jfree.data.time.TimeSeries.this.minY",org.jfree.data.time.TimeSeries.this.minY);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(760).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(760).collectionEnds();
            }
            if (runtimeAngelicValue) if (java.lang.Double.isNaN(b)) {
                return a;
            } else {
                return java.lang.Math.max(a, b);
            }
        }
    }
}
[796295] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659858886221
GPR[EPVATF]-1659858886460
GPR[SPS]-1659858886460
[796815] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:1293.
GPR[EPS]-1659858886742
GPR[ESUN]-1659858886742
GPR[SSUN]-1659858886742
-1522070587
GPR[SPVATF]-1659858886874
GPR[EPVATF]-1659858887103
GPR[SPS]-1659858887103
[797343] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TimeSeries extends org.jfree.data.general.Series implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = -5032960206869675528L;

    protected static final java.lang.String DEFAULT_DOMAIN_DESCRIPTION = "Time";

    protected static final java.lang.String DEFAULT_RANGE_DESCRIPTION = "Value";

    private java.lang.String domain;

    private java.lang.String range;

    protected java.lang.Class timePeriodClass;

    protected java.util.List data;

    private int maximumItemCount;

    private long maximumItemAge;

    private double minY;

    private double maxY;

    public TimeSeries(java.lang.Comparable name) {
        this(name, org.jfree.data.time.TimeSeries.DEFAULT_DOMAIN_DESCRIPTION, org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION);
    }

    public TimeSeries(java.lang.Comparable name, java.lang.String domain, java.lang.String range) {
        super(name);
        this.domain = domain;
        this.range = range;
        this.timePeriodClass = null;
        this.data = new java.util.ArrayList();
        this.maximumItemCount = java.lang.Integer.MAX_VALUE;
        this.maximumItemAge = java.lang.Long.MAX_VALUE;
        this.minY = java.lang.Double.NaN;
        this.maxY = java.lang.Double.NaN;
    }

    public java.lang.String getDomainDescription() {
        return this.domain;
    }

    public void setDomainDescription(java.lang.String description) {
        java.lang.String old = this.domain;
        this.domain = description;
        firePropertyChange("Domain", old, description);
    }

    public java.lang.String getRangeDescription() {
        return this.range;
    }

    public void setRangeDescription(java.lang.String description) {
        java.lang.String old = this.range;
        this.range = description;
        firePropertyChange("Range", old, description);
    }

    public int getItemCount() {
        return this.data.size();
    }

    public java.util.List getItems() {
        return java.util.Collections.unmodifiableList(this.data);
    }

    public int getMaximumItemCount() {
        return this.maximumItemCount;
    }

    public void setMaximumItemCount(int maximum) {
        if (maximum < 0) {
            throw new java.lang.IllegalArgumentException("Negative 'maximum' argument.");
        }
        this.maximumItemCount = maximum;
        int count = this.data.size();
        if (count > maximum) {
            delete(0, (count - maximum) - 1);
        }
    }

    public long getMaximumItemAge() {
        return this.maximumItemAge;
    }

    public void setMaximumItemAge(long periods) {
        if (periods < 0) {
            throw new java.lang.IllegalArgumentException("Negative 'periods' argument.");
        }
        this.maximumItemAge = periods;
        removeAgedItems(true);
    }

    public double getMinY() {
        return this.minY;
    }

    public double getMaxY() {
        return this.maxY;
    }

    public java.lang.Class getTimePeriodClass() {
        return this.timePeriodClass;
    }

    public org.jfree.data.time.TimeSeriesDataItem getDataItem(int index) {
        org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
        return ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
    }

    public org.jfree.data.time.TimeSeriesDataItem getDataItem(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            return getDataItem(index);
        } else {
            return null;
        }
    }

    org.jfree.data.time.TimeSeriesDataItem getRawDataItem(int index) {
        return ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
    }

    org.jfree.data.time.TimeSeriesDataItem getRawDataItem(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            return ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
        } else {
            return null;
        }
    }

    public org.jfree.data.time.RegularTimePeriod getTimePeriod(int index) {
        return getRawDataItem(index).getPeriod();
    }

    public org.jfree.data.time.RegularTimePeriod getNextTimePeriod() {
        org.jfree.data.time.RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
        return last.next();
    }

    public java.util.Collection getTimePeriods() {
        java.util.Collection result = new java.util.ArrayList();
        for (int i = 0; i < getItemCount(); i++) {
            result.add(getTimePeriod(i));
        }
        return result;
    }

    public java.util.Collection getTimePeriodsUniqueToOtherSeries(org.jfree.data.time.TimeSeries series) {
        java.util.Collection result = new java.util.ArrayList();
        for (int i = 0; i < series.getItemCount(); i++) {
            org.jfree.data.time.RegularTimePeriod period = series.getTimePeriod(i);
            int index = getIndex(period);
            if (index < 0) {
                result.add(period);
            }
        }
        return result;
    }

    public int getIndex(org.jfree.data.time.RegularTimePeriod period) {
        if (period == null) {
            throw new java.lang.IllegalArgumentException("Null 'period' argument.");
        }
        org.jfree.data.time.TimeSeriesDataItem dummy = new org.jfree.data.time.TimeSeriesDataItem(period, java.lang.Integer.MIN_VALUE);
        return java.util.Collections.binarySearch(this.data, dummy);
    }

    public java.lang.Number getValue(int index) {
        return getRawDataItem(index).getValue();
    }

    public java.lang.Number getValue(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            return getValue(index);
        } else {
            return null;
        }
    }

    public void add(org.jfree.data.time.TimeSeriesDataItem item) {
        add(item, true);
    }

    public void add(org.jfree.data.time.TimeSeriesDataItem item, boolean notify) {
        if (item == null) {
            throw new java.lang.IllegalArgumentException("Null 'item' argument.");
        }
        item = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
        java.lang.Class c = item.getPeriod().getClass();
        if (this.timePeriodClass == null) {
            this.timePeriodClass = c;
        } else if (!this.timePeriodClass.equals(c)) {
            java.lang.StringBuffer b = new java.lang.StringBuffer();
            b.append("You are trying to add data where the time period class ");
            b.append("is ");
            b.append(item.getPeriod().getClass().getName());
            b.append(", but the TimeSeries is expecting an instance of ");
            b.append(this.timePeriodClass.getName());
            b.append(".");
            throw new org.jfree.data.general.SeriesException(b.toString());
        }
        boolean added = false;
        int count = getItemCount();
        if (count == 0) {
            this.data.add(item);
            added = true;
        } else {
            org.jfree.data.time.RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
            if (item.getPeriod().compareTo(last) > 0) {
                this.data.add(item);
                added = true;
            } else {
                int index = java.util.Collections.binarySearch(this.data, item);
                if (index < 0) {
                    this.data.add((-index) - 1, item);
                    added = true;
                } else {
                    java.lang.StringBuffer b = new java.lang.StringBuffer();
                    b.append("You are attempting to add an observation for ");
                    b.append("the time period ");
                    b.append(item.getPeriod().toString());
                    b.append(" but the series already contains an observation");
                    b.append(" for that time period. Duplicates are not ");
                    b.append("permitted.  Try using the addOrUpdate() method.");
                    throw new org.jfree.data.general.SeriesException(b.toString());
                }
            }
        }
        if (added) {
            updateBoundsForAddedItem(item);
            if (getItemCount() > this.maximumItemCount) {
                org.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0)));
                updateBoundsForRemovedItem(d);
            }
            removeAgedItems(false);
            if (notify) {
                fireSeriesChanged();
            }
        }
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, double value) {
        add(period, value, true);
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, double value, boolean notify) {
        org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);
        add(item, notify);
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
        add(period, value, true);
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value, boolean notify) {
        org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);
        add(item, notify);
    }

    public void update(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
        org.jfree.data.time.TimeSeriesDataItem temp = new org.jfree.data.time.TimeSeriesDataItem(period, value);
        int index = java.util.Collections.binarySearch(this.data, temp);
        if (index < 0) {
            throw new org.jfree.data.general.SeriesException("There is no existing value for the " + "specified 'period'.");
        }
        update(index, value);
    }

    public void update(int index, java.lang.Number value) {
        org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
        boolean iterate = false;
        java.lang.Number oldYN = item.getValue();
        if (oldYN != null) {
            double oldY = oldYN.doubleValue();
            if (!java.lang.Double.isNaN(oldY)) {
                iterate = (oldY <= this.minY) || (oldY >= this.maxY);
            }
        }
        item.setValue(value);
        if (iterate) {
            findBoundsByIteration();
        } else if (value != null) {
            double yy = value.doubleValue();
            this.minY = minIgnoreNaN(this.minY, yy);
            this.maxY = maxIgnoreNaN(this.maxY, yy);
        }
        fireSeriesChanged();
    }

    public org.jfree.data.time.TimeSeries addAndOrUpdate(org.jfree.data.time.TimeSeries series) {
        org.jfree.data.time.TimeSeries overwritten = new org.jfree.data.time.TimeSeries("Overwritten values from: " + getKey());
        for (int i = 0; i < series.getItemCount(); i++) {
            org.jfree.data.time.TimeSeriesDataItem item = series.getRawDataItem(i);
            org.jfree.data.time.TimeSeriesDataItem oldItem = addOrUpdate(item.getPeriod(), item.getValue());
            if (oldItem != null) {
                overwritten.add(oldItem);
            }
        }
        return overwritten;
    }

    public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, double value) {
        return addOrUpdate(period, new java.lang.Double(value));
    }

    public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
        return addOrUpdate(new org.jfree.data.time.TimeSeriesDataItem(period, value));
    }

    public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.TimeSeriesDataItem item) {
        if (item == null) {
            throw new java.lang.IllegalArgumentException("Null 'period' argument.");
        }
        java.lang.Class periodClass = item.getPeriod().getClass();
        if (this.timePeriodClass == null) {
            this.timePeriodClass = periodClass;
        } else if (!this.timePeriodClass.equals(periodClass)) {
            java.lang.String msg = (((("You are trying to add data where the time " + "period class is ") + periodClass.getName()) + ", but the TimeSeries is expecting an instance of ") + this.timePeriodClass.getName()) + ".";
            throw new org.jfree.data.general.SeriesException(msg);
        }
        org.jfree.data.time.TimeSeriesDataItem overwritten = null;
        int index = java.util.Collections.binarySearch(this.data, item);
        if (index >= 0) {
            org.jfree.data.time.TimeSeriesDataItem existing = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
            overwritten = ((org.jfree.data.time.TimeSeriesDataItem) (existing.clone()));
            boolean iterate = false;
            java.lang.Number oldYN = existing.getValue();
            double oldY = (oldYN != null) ? oldYN.doubleValue() : java.lang.Double.NaN;
            if (!java.lang.Double.isNaN(oldY)) {
                iterate = (oldY <= this.minY) || (oldY >= this.maxY);
            }
            existing.setValue(item.getValue());
            if (iterate) {
                findBoundsByIteration();
            } else if (item.getValue() != null) {
                double yy = item.getValue().doubleValue();
                this.minY = minIgnoreNaN(this.minY, yy);
                this.maxY = minIgnoreNaN(this.maxY, yy);
            }
        } else {
            item = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
            this.data.add((-index) - 1, item);
            updateBoundsForAddedItem(item);
            if (getItemCount() > this.maximumItemCount) {
                org.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0)));
                updateBoundsForRemovedItem(d);
            }
        }
        removeAgedItems(false);
        fireSeriesChanged();
        return overwritten;
    }

    public void removeAgedItems(boolean notify) {
        if (getItemCount() > 1) {
            long latest = getTimePeriod(getItemCount() - 1).getSerialIndex();
            boolean removed = false;
            while ((latest - getTimePeriod(0).getSerialIndex()) > this.maximumItemAge) {
                this.data.remove(0);
                removed = true;
            } 
            if (removed) {
                findBoundsByIteration();
                if (notify) {
                    fireSeriesChanged();
                }
            }
        }
    }

    public void removeAgedItems(long latest, boolean notify) {
        if (this.data.isEmpty()) {
            return;
        }
        long index = java.lang.Long.MAX_VALUE;
        try {
            java.lang.reflect.Method m = org.jfree.data.time.RegularTimePeriod.class.getDeclaredMethod("createInstance", new java.lang.Class[]{ java.lang.Class.class, java.util.Date.class, java.util.TimeZone.class });
            org.jfree.data.time.RegularTimePeriod newest = ((org.jfree.data.time.RegularTimePeriod) (m.invoke(this.timePeriodClass, new java.lang.Object[]{ this.timePeriodClass, new java.util.Date(latest), java.util.TimeZone.getDefault() })));
            index = newest.getSerialIndex();
        } catch (java.lang.NoSuchMethodException e) {
            e.printStackTrace();
        } catch (java.lang.IllegalAccessException e) {
            e.printStackTrace();
        } catch (java.lang.reflect.InvocationTargetException e) {
            e.printStackTrace();
        }
        boolean removed = false;
        while ((getItemCount() > 0) && ((index - getTimePeriod(0).getSerialIndex()) > this.maximumItemAge)) {
            this.data.remove(0);
            removed = true;
        } 
        if (removed) {
            findBoundsByIteration();
            if (notify) {
                fireSeriesChanged();
            }
        }
    }

    public void clear() {
        if (this.data.size() > 0) {
            this.data.clear();
            this.timePeriodClass = null;
            this.minY = java.lang.Double.NaN;
            this.maxY = java.lang.Double.NaN;
            fireSeriesChanged();
        }
    }

    public void delete(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(index)));
            updateBoundsForRemovedItem(item);
            if (this.data.isEmpty()) {
                this.timePeriodClass = null;
            }
            fireSeriesChanged();
        }
    }

    public void delete(int start, int end) {
        delete(start, end, true);
    }

    public void delete(int start, int end, boolean notify) {
        if (end < start) {
            throw new java.lang.IllegalArgumentException("Requires start <= end.");
        }
        for (int i = 0; i <= (end - start); i++) {
            this.data.remove(start);
        }
        findBoundsByIteration();
        if (this.data.isEmpty()) {
            this.timePeriodClass = null;
        }
        if (notify) {
            fireSeriesChanged();
        }
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.data.time.TimeSeries clone = ((org.jfree.data.time.TimeSeries) (super.clone()));
        clone.data = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.data)));
        return clone;
    }

    public org.jfree.data.time.TimeSeries createCopy(int start, int end) throws java.lang.CloneNotSupportedException {
        if (start < 0) {
            throw new java.lang.IllegalArgumentException("Requires start >= 0.");
        }
        if (end < start) {
            throw new java.lang.IllegalArgumentException("Requires start <= end.");
        }
        org.jfree.data.time.TimeSeries copy = ((org.jfree.data.time.TimeSeries) (super.clone()));
        copy.data = new java.util.ArrayList();
        if (this.data.size() > 0) {
            for (int index = start; index <= end; index++) {
                org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
                org.jfree.data.time.TimeSeriesDataItem clone = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
                try {
                    copy.add(clone);
                } catch (org.jfree.data.general.SeriesException e) {
                    e.printStackTrace();
                }
            }
        }
        return copy;
    }

    public org.jfree.data.time.TimeSeries createCopy(org.jfree.data.time.RegularTimePeriod start, org.jfree.data.time.RegularTimePeriod end) throws java.lang.CloneNotSupportedException {
        if (start == null) {
            throw new java.lang.IllegalArgumentException("Null 'start' argument.");
        }
        if (end == null) {
            throw new java.lang.IllegalArgumentException("Null 'end' argument.");
        }
        if (start.compareTo(end) > 0) {
            throw new java.lang.IllegalArgumentException("Requires start on or before end.");
        }
        boolean emptyRange = false;
        int startIndex = getIndex(start);
        if (startIndex < 0) {
            startIndex = -(startIndex + 1);
            if (startIndex == this.data.size()) {
                emptyRange = true;
            }
        }
        int endIndex = getIndex(end);
        if (endIndex < 0) {
            endIndex = -(endIndex + 1);
            endIndex = endIndex - 1;
        }
        if ((endIndex < 0) || (endIndex < startIndex)) {
            emptyRange = true;
        }
        if (emptyRange) {
            org.jfree.data.time.TimeSeries copy = ((org.jfree.data.time.TimeSeries) (super.clone()));
            copy.data = new java.util.ArrayList();
            return copy;
        } else {
            return createCopy(startIndex, endIndex);
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.time.TimeSeries)) {
            return false;
        }
        org.jfree.data.time.TimeSeries that = ((org.jfree.data.time.TimeSeries) (obj));
        if (!org.jfree.chart.util.ObjectUtilities.equal(getDomainDescription(), that.getDomainDescription())) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(getRangeDescription(), that.getRangeDescription())) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.timePeriodClass, that.timePeriodClass)) {
            return false;
        }
        if (getMaximumItemAge() != that.getMaximumItemAge()) {
            return false;
        }
        if (getMaximumItemCount() != that.getMaximumItemCount()) {
            return false;
        }
        int count = getItemCount();
        if (count != that.getItemCount()) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.data, that.data)) {
            return false;
        }
        return super.equals(obj);
    }

    public int hashCode() {
        int result = super.hashCode();
        result = (29 * result) + (this.domain != null ? this.domain.hashCode() : 0);
        result = (29 * result) + (this.range != null ? this.range.hashCode() : 0);
        result = (29 * result) + (this.timePeriodClass != null ? this.timePeriodClass.hashCode() : 0);
        int count = getItemCount();
        if (count > 0) {
            org.jfree.data.time.TimeSeriesDataItem item = getRawDataItem(0);
            result = (29 * result) + item.hashCode();
        }
        if (count > 1) {
            org.jfree.data.time.TimeSeriesDataItem item = getRawDataItem(count - 1);
            result = (29 * result) + item.hashCode();
        }
        if (count > 2) {
            org.jfree.data.time.TimeSeriesDataItem item = getRawDataItem(count / 2);
            result = (29 * result) + item.hashCode();
        }
        result = (29 * result) + this.maximumItemCount;
        result = (29 * result) + ((int) (this.maximumItemAge));
        return result;
    }

    private void updateBoundsForAddedItem(org.jfree.data.time.TimeSeriesDataItem item) {
        java.lang.Number yN = item.getValue();
        if (item.getValue() != null) {
            double y = yN.doubleValue();
            this.minY = minIgnoreNaN(this.minY, y);
            this.maxY = maxIgnoreNaN(this.maxY, y);
        }
    }

    private void updateBoundsForRemovedItem(org.jfree.data.time.TimeSeriesDataItem item) {
        java.lang.Number yN = item.getValue();
        if (yN != null) {
            double y = yN.doubleValue();
            if (!java.lang.Double.isNaN(y)) {
                if ((y <= this.minY) || (y >= this.maxY)) {
                    findBoundsByIteration();
                }
            }
        }
    }

    private void findBoundsByIteration() {
        this.minY = java.lang.Double.NaN;
        this.maxY = java.lang.Double.NaN;
        java.util.Iterator iterator = this.data.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (iterator.next()));
            updateBoundsForAddedItem(item);
        } 
    }

    private double minIgnoreNaN(double a, double b) {
        if (java.lang.Double.isNaN(a)) {
            return b;
        } else if (java.lang.Double.isNaN(b)) {
            return a;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(762).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(762).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(762).collectInput("org.jfree.data.time.TimeSeries.this.data",org.jfree.data.time.TimeSeries.this.data);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(762).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(762).collectInput("org.jfree.data.time.TimeSeries.this.maximumItemCount",org.jfree.data.time.TimeSeries.this.maximumItemCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(762).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(762).collectInput("org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION",org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(762).collectInput("org.jfree.data.time.TimeSeries.this.domain",org.jfree.data.time.TimeSeries.this.domain);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(762).collectInput("org.jfree.data.time.TimeSeries.this.maxY",org.jfree.data.time.TimeSeries.this.maxY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(762).collectInput("org.jfree.data.time.TimeSeries.this.maximumItemAge",org.jfree.data.time.TimeSeries.this.maximumItemAge);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(762).collectInput("org.jfree.data.time.TimeSeries.DEFAULT_DOMAIN_DESCRIPTION",org.jfree.data.time.TimeSeries.DEFAULT_DOMAIN_DESCRIPTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(762).collectInput("org.jfree.data.time.TimeSeries.this.timePeriodClass",org.jfree.data.time.TimeSeries.this.timePeriodClass);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(762).collectInput("org.jfree.data.time.TimeSeries.this.range",org.jfree.data.time.TimeSeries.this.range);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(762).collectInput("org.jfree.data.time.TimeSeries.this.minY",org.jfree.data.time.TimeSeries.this.minY);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(762).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(762).collectionEnds();
            }
            if (runtimeAngelicValue)
                return java.lang.Math.min(a, b);

        }
    }

    private double maxIgnoreNaN(double a, double b) {
        if (java.lang.Double.isNaN(a)) {
            return b;
        } else if (java.lang.Double.isNaN(b)) {
            return a;
        } else {
            return java.lang.Math.max(a, b);
        }
    }
}
[797343] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858887269
GPR[SSUN]-1659858887269
-1522070587
GPR[SPVATF]-1659858887399
GPR[EPVATF]-1659858887630
GPR[SPS]-1659858887630
[797870] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TimeSeries extends org.jfree.data.general.Series implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = -5032960206869675528L;

    protected static final java.lang.String DEFAULT_DOMAIN_DESCRIPTION = "Time";

    protected static final java.lang.String DEFAULT_RANGE_DESCRIPTION = "Value";

    private java.lang.String domain;

    private java.lang.String range;

    protected java.lang.Class timePeriodClass;

    protected java.util.List data;

    private int maximumItemCount;

    private long maximumItemAge;

    private double minY;

    private double maxY;

    public TimeSeries(java.lang.Comparable name) {
        this(name, org.jfree.data.time.TimeSeries.DEFAULT_DOMAIN_DESCRIPTION, org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION);
    }

    public TimeSeries(java.lang.Comparable name, java.lang.String domain, java.lang.String range) {
        super(name);
        this.domain = domain;
        this.range = range;
        this.timePeriodClass = null;
        this.data = new java.util.ArrayList();
        this.maximumItemCount = java.lang.Integer.MAX_VALUE;
        this.maximumItemAge = java.lang.Long.MAX_VALUE;
        this.minY = java.lang.Double.NaN;
        this.maxY = java.lang.Double.NaN;
    }

    public java.lang.String getDomainDescription() {
        return this.domain;
    }

    public void setDomainDescription(java.lang.String description) {
        java.lang.String old = this.domain;
        this.domain = description;
        firePropertyChange("Domain", old, description);
    }

    public java.lang.String getRangeDescription() {
        return this.range;
    }

    public void setRangeDescription(java.lang.String description) {
        java.lang.String old = this.range;
        this.range = description;
        firePropertyChange("Range", old, description);
    }

    public int getItemCount() {
        return this.data.size();
    }

    public java.util.List getItems() {
        return java.util.Collections.unmodifiableList(this.data);
    }

    public int getMaximumItemCount() {
        return this.maximumItemCount;
    }

    public void setMaximumItemCount(int maximum) {
        if (maximum < 0) {
            throw new java.lang.IllegalArgumentException("Negative 'maximum' argument.");
        }
        this.maximumItemCount = maximum;
        int count = this.data.size();
        if (count > maximum) {
            delete(0, (count - maximum) - 1);
        }
    }

    public long getMaximumItemAge() {
        return this.maximumItemAge;
    }

    public void setMaximumItemAge(long periods) {
        if (periods < 0) {
            throw new java.lang.IllegalArgumentException("Negative 'periods' argument.");
        }
        this.maximumItemAge = periods;
        removeAgedItems(true);
    }

    public double getMinY() {
        return this.minY;
    }

    public double getMaxY() {
        return this.maxY;
    }

    public java.lang.Class getTimePeriodClass() {
        return this.timePeriodClass;
    }

    public org.jfree.data.time.TimeSeriesDataItem getDataItem(int index) {
        org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
        return ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
    }

    public org.jfree.data.time.TimeSeriesDataItem getDataItem(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            return getDataItem(index);
        } else {
            return null;
        }
    }

    org.jfree.data.time.TimeSeriesDataItem getRawDataItem(int index) {
        return ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
    }

    org.jfree.data.time.TimeSeriesDataItem getRawDataItem(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            return ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
        } else {
            return null;
        }
    }

    public org.jfree.data.time.RegularTimePeriod getTimePeriod(int index) {
        return getRawDataItem(index).getPeriod();
    }

    public org.jfree.data.time.RegularTimePeriod getNextTimePeriod() {
        org.jfree.data.time.RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
        return last.next();
    }

    public java.util.Collection getTimePeriods() {
        java.util.Collection result = new java.util.ArrayList();
        for (int i = 0; i < getItemCount(); i++) {
            result.add(getTimePeriod(i));
        }
        return result;
    }

    public java.util.Collection getTimePeriodsUniqueToOtherSeries(org.jfree.data.time.TimeSeries series) {
        java.util.Collection result = new java.util.ArrayList();
        for (int i = 0; i < series.getItemCount(); i++) {
            org.jfree.data.time.RegularTimePeriod period = series.getTimePeriod(i);
            int index = getIndex(period);
            if (index < 0) {
                result.add(period);
            }
        }
        return result;
    }

    public int getIndex(org.jfree.data.time.RegularTimePeriod period) {
        if (period == null) {
            throw new java.lang.IllegalArgumentException("Null 'period' argument.");
        }
        org.jfree.data.time.TimeSeriesDataItem dummy = new org.jfree.data.time.TimeSeriesDataItem(period, java.lang.Integer.MIN_VALUE);
        return java.util.Collections.binarySearch(this.data, dummy);
    }

    public java.lang.Number getValue(int index) {
        return getRawDataItem(index).getValue();
    }

    public java.lang.Number getValue(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            return getValue(index);
        } else {
            return null;
        }
    }

    public void add(org.jfree.data.time.TimeSeriesDataItem item) {
        add(item, true);
    }

    public void add(org.jfree.data.time.TimeSeriesDataItem item, boolean notify) {
        if (item == null) {
            throw new java.lang.IllegalArgumentException("Null 'item' argument.");
        }
        item = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
        java.lang.Class c = item.getPeriod().getClass();
        if (this.timePeriodClass == null) {
            this.timePeriodClass = c;
        } else if (!this.timePeriodClass.equals(c)) {
            java.lang.StringBuffer b = new java.lang.StringBuffer();
            b.append("You are trying to add data where the time period class ");
            b.append("is ");
            b.append(item.getPeriod().getClass().getName());
            b.append(", but the TimeSeries is expecting an instance of ");
            b.append(this.timePeriodClass.getName());
            b.append(".");
            throw new org.jfree.data.general.SeriesException(b.toString());
        }
        boolean added = false;
        int count = getItemCount();
        if (count == 0) {
            this.data.add(item);
            added = true;
        } else {
            org.jfree.data.time.RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
            if (item.getPeriod().compareTo(last) > 0) {
                this.data.add(item);
                added = true;
            } else {
                int index = java.util.Collections.binarySearch(this.data, item);
                if (index < 0) {
                    this.data.add((-index) - 1, item);
                    added = true;
                } else {
                    java.lang.StringBuffer b = new java.lang.StringBuffer();
                    b.append("You are attempting to add an observation for ");
                    b.append("the time period ");
                    b.append(item.getPeriod().toString());
                    b.append(" but the series already contains an observation");
                    b.append(" for that time period. Duplicates are not ");
                    b.append("permitted.  Try using the addOrUpdate() method.");
                    throw new org.jfree.data.general.SeriesException(b.toString());
                }
            }
        }
        if (added) {
            updateBoundsForAddedItem(item);
            if (getItemCount() > this.maximumItemCount) {
                org.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0)));
                updateBoundsForRemovedItem(d);
            }
            removeAgedItems(false);
            if (notify) {
                fireSeriesChanged();
            }
        }
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, double value) {
        add(period, value, true);
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, double value, boolean notify) {
        org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);
        add(item, notify);
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
        add(period, value, true);
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value, boolean notify) {
        org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);
        add(item, notify);
    }

    public void update(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
        org.jfree.data.time.TimeSeriesDataItem temp = new org.jfree.data.time.TimeSeriesDataItem(period, value);
        int index = java.util.Collections.binarySearch(this.data, temp);
        if (index < 0) {
            throw new org.jfree.data.general.SeriesException("There is no existing value for the " + "specified 'period'.");
        }
        update(index, value);
    }

    public void update(int index, java.lang.Number value) {
        org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
        boolean iterate = false;
        java.lang.Number oldYN = item.getValue();
        if (oldYN != null) {
            double oldY = oldYN.doubleValue();
            if (!java.lang.Double.isNaN(oldY)) {
                iterate = (oldY <= this.minY) || (oldY >= this.maxY);
            }
        }
        item.setValue(value);
        if (iterate) {
            findBoundsByIteration();
        } else if (value != null) {
            double yy = value.doubleValue();
            this.minY = minIgnoreNaN(this.minY, yy);
            this.maxY = maxIgnoreNaN(this.maxY, yy);
        }
        fireSeriesChanged();
    }

    public org.jfree.data.time.TimeSeries addAndOrUpdate(org.jfree.data.time.TimeSeries series) {
        org.jfree.data.time.TimeSeries overwritten = new org.jfree.data.time.TimeSeries("Overwritten values from: " + getKey());
        for (int i = 0; i < series.getItemCount(); i++) {
            org.jfree.data.time.TimeSeriesDataItem item = series.getRawDataItem(i);
            org.jfree.data.time.TimeSeriesDataItem oldItem = addOrUpdate(item.getPeriod(), item.getValue());
            if (oldItem != null) {
                overwritten.add(oldItem);
            }
        }
        return overwritten;
    }

    public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, double value) {
        return addOrUpdate(period, new java.lang.Double(value));
    }

    public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
        return addOrUpdate(new org.jfree.data.time.TimeSeriesDataItem(period, value));
    }

    public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.TimeSeriesDataItem item) {
        if (item == null) {
            throw new java.lang.IllegalArgumentException("Null 'period' argument.");
        }
        java.lang.Class periodClass = item.getPeriod().getClass();
        if (this.timePeriodClass == null) {
            this.timePeriodClass = periodClass;
        } else if (!this.timePeriodClass.equals(periodClass)) {
            java.lang.String msg = (((("You are trying to add data where the time " + "period class is ") + periodClass.getName()) + ", but the TimeSeries is expecting an instance of ") + this.timePeriodClass.getName()) + ".";
            throw new org.jfree.data.general.SeriesException(msg);
        }
        org.jfree.data.time.TimeSeriesDataItem overwritten = null;
        int index = java.util.Collections.binarySearch(this.data, item);
        if (index >= 0) {
            org.jfree.data.time.TimeSeriesDataItem existing = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
            overwritten = ((org.jfree.data.time.TimeSeriesDataItem) (existing.clone()));
            boolean iterate = false;
            java.lang.Number oldYN = existing.getValue();
            double oldY = (oldYN != null) ? oldYN.doubleValue() : java.lang.Double.NaN;
            if (!java.lang.Double.isNaN(oldY)) {
                iterate = (oldY <= this.minY) || (oldY >= this.maxY);
            }
            existing.setValue(item.getValue());
            if (iterate) {
                findBoundsByIteration();
            } else if (item.getValue() != null) {
                double yy = item.getValue().doubleValue();
                this.minY = minIgnoreNaN(this.minY, yy);
                this.maxY = minIgnoreNaN(this.maxY, yy);
            }
        } else {
            item = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
            this.data.add((-index) - 1, item);
            updateBoundsForAddedItem(item);
            if (getItemCount() > this.maximumItemCount) {
                org.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0)));
                updateBoundsForRemovedItem(d);
            }
        }
        removeAgedItems(false);
        fireSeriesChanged();
        return overwritten;
    }

    public void removeAgedItems(boolean notify) {
        if (getItemCount() > 1) {
            long latest = getTimePeriod(getItemCount() - 1).getSerialIndex();
            boolean removed = false;
            while ((latest - getTimePeriod(0).getSerialIndex()) > this.maximumItemAge) {
                this.data.remove(0);
                removed = true;
            } 
            if (removed) {
                findBoundsByIteration();
                if (notify) {
                    fireSeriesChanged();
                }
            }
        }
    }

    public void removeAgedItems(long latest, boolean notify) {
        if (this.data.isEmpty()) {
            return;
        }
        long index = java.lang.Long.MAX_VALUE;
        try {
            java.lang.reflect.Method m = org.jfree.data.time.RegularTimePeriod.class.getDeclaredMethod("createInstance", new java.lang.Class[]{ java.lang.Class.class, java.util.Date.class, java.util.TimeZone.class });
            org.jfree.data.time.RegularTimePeriod newest = ((org.jfree.data.time.RegularTimePeriod) (m.invoke(this.timePeriodClass, new java.lang.Object[]{ this.timePeriodClass, new java.util.Date(latest), java.util.TimeZone.getDefault() })));
            index = newest.getSerialIndex();
        } catch (java.lang.NoSuchMethodException e) {
            e.printStackTrace();
        } catch (java.lang.IllegalAccessException e) {
            e.printStackTrace();
        } catch (java.lang.reflect.InvocationTargetException e) {
            e.printStackTrace();
        }
        boolean removed = false;
        while ((getItemCount() > 0) && ((index - getTimePeriod(0).getSerialIndex()) > this.maximumItemAge)) {
            this.data.remove(0);
            removed = true;
        } 
        if (removed) {
            findBoundsByIteration();
            if (notify) {
                fireSeriesChanged();
            }
        }
    }

    public void clear() {
        if (this.data.size() > 0) {
            this.data.clear();
            this.timePeriodClass = null;
            this.minY = java.lang.Double.NaN;
            this.maxY = java.lang.Double.NaN;
            fireSeriesChanged();
        }
    }

    public void delete(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(index)));
            updateBoundsForRemovedItem(item);
            if (this.data.isEmpty()) {
                this.timePeriodClass = null;
            }
            fireSeriesChanged();
        }
    }

    public void delete(int start, int end) {
        delete(start, end, true);
    }

    public void delete(int start, int end, boolean notify) {
        if (end < start) {
            throw new java.lang.IllegalArgumentException("Requires start <= end.");
        }
        for (int i = 0; i <= (end - start); i++) {
            this.data.remove(start);
        }
        findBoundsByIteration();
        if (this.data.isEmpty()) {
            this.timePeriodClass = null;
        }
        if (notify) {
            fireSeriesChanged();
        }
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.data.time.TimeSeries clone = ((org.jfree.data.time.TimeSeries) (super.clone()));
        clone.data = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.data)));
        return clone;
    }

    public org.jfree.data.time.TimeSeries createCopy(int start, int end) throws java.lang.CloneNotSupportedException {
        if (start < 0) {
            throw new java.lang.IllegalArgumentException("Requires start >= 0.");
        }
        if (end < start) {
            throw new java.lang.IllegalArgumentException("Requires start <= end.");
        }
        org.jfree.data.time.TimeSeries copy = ((org.jfree.data.time.TimeSeries) (super.clone()));
        copy.data = new java.util.ArrayList();
        if (this.data.size() > 0) {
            for (int index = start; index <= end; index++) {
                org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
                org.jfree.data.time.TimeSeriesDataItem clone = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
                try {
                    copy.add(clone);
                } catch (org.jfree.data.general.SeriesException e) {
                    e.printStackTrace();
                }
            }
        }
        return copy;
    }

    public org.jfree.data.time.TimeSeries createCopy(org.jfree.data.time.RegularTimePeriod start, org.jfree.data.time.RegularTimePeriod end) throws java.lang.CloneNotSupportedException {
        if (start == null) {
            throw new java.lang.IllegalArgumentException("Null 'start' argument.");
        }
        if (end == null) {
            throw new java.lang.IllegalArgumentException("Null 'end' argument.");
        }
        if (start.compareTo(end) > 0) {
            throw new java.lang.IllegalArgumentException("Requires start on or before end.");
        }
        boolean emptyRange = false;
        int startIndex = getIndex(start);
        if (startIndex < 0) {
            startIndex = -(startIndex + 1);
            if (startIndex == this.data.size()) {
                emptyRange = true;
            }
        }
        int endIndex = getIndex(end);
        if (endIndex < 0) {
            endIndex = -(endIndex + 1);
            endIndex = endIndex - 1;
        }
        if ((endIndex < 0) || (endIndex < startIndex)) {
            emptyRange = true;
        }
        if (emptyRange) {
            org.jfree.data.time.TimeSeries copy = ((org.jfree.data.time.TimeSeries) (super.clone()));
            copy.data = new java.util.ArrayList();
            return copy;
        } else {
            return createCopy(startIndex, endIndex);
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.time.TimeSeries)) {
            return false;
        }
        org.jfree.data.time.TimeSeries that = ((org.jfree.data.time.TimeSeries) (obj));
        if (!org.jfree.chart.util.ObjectUtilities.equal(getDomainDescription(), that.getDomainDescription())) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(getRangeDescription(), that.getRangeDescription())) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.timePeriodClass, that.timePeriodClass)) {
            return false;
        }
        if (getMaximumItemAge() != that.getMaximumItemAge()) {
            return false;
        }
        if (getMaximumItemCount() != that.getMaximumItemCount()) {
            return false;
        }
        int count = getItemCount();
        if (count != that.getItemCount()) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.data, that.data)) {
            return false;
        }
        return super.equals(obj);
    }

    public int hashCode() {
        int result = super.hashCode();
        result = (29 * result) + (this.domain != null ? this.domain.hashCode() : 0);
        result = (29 * result) + (this.range != null ? this.range.hashCode() : 0);
        result = (29 * result) + (this.timePeriodClass != null ? this.timePeriodClass.hashCode() : 0);
        int count = getItemCount();
        if (count > 0) {
            org.jfree.data.time.TimeSeriesDataItem item = getRawDataItem(0);
            result = (29 * result) + item.hashCode();
        }
        if (count > 1) {
            org.jfree.data.time.TimeSeriesDataItem item = getRawDataItem(count - 1);
            result = (29 * result) + item.hashCode();
        }
        if (count > 2) {
            org.jfree.data.time.TimeSeriesDataItem item = getRawDataItem(count / 2);
            result = (29 * result) + item.hashCode();
        }
        result = (29 * result) + this.maximumItemCount;
        result = (29 * result) + ((int) (this.maximumItemAge));
        return result;
    }

    private void updateBoundsForAddedItem(org.jfree.data.time.TimeSeriesDataItem item) {
        java.lang.Number yN = item.getValue();
        if (item.getValue() != null) {
            double y = yN.doubleValue();
            this.minY = minIgnoreNaN(this.minY, y);
            this.maxY = maxIgnoreNaN(this.maxY, y);
        }
    }

    private void updateBoundsForRemovedItem(org.jfree.data.time.TimeSeriesDataItem item) {
        java.lang.Number yN = item.getValue();
        if (yN != null) {
            double y = yN.doubleValue();
            if (!java.lang.Double.isNaN(y)) {
                if ((y <= this.minY) || (y >= this.maxY)) {
                    findBoundsByIteration();
                }
            }
        }
    }

    private void findBoundsByIteration() {
        this.minY = java.lang.Double.NaN;
        this.maxY = java.lang.Double.NaN;
        java.util.Iterator iterator = this.data.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (iterator.next()));
            updateBoundsForAddedItem(item);
        } 
    }

    private double minIgnoreNaN(double a, double b) {
        if (java.lang.Double.isNaN(a)) {
            return b;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(763).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(763).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(763).collectInput("org.jfree.data.time.TimeSeries.this.data",org.jfree.data.time.TimeSeries.this.data);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(763).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(763).collectInput("org.jfree.data.time.TimeSeries.this.maximumItemCount",org.jfree.data.time.TimeSeries.this.maximumItemCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(763).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(763).collectInput("org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION",org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(763).collectInput("org.jfree.data.time.TimeSeries.this.domain",org.jfree.data.time.TimeSeries.this.domain);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(763).collectInput("org.jfree.data.time.TimeSeries.this.maxY",org.jfree.data.time.TimeSeries.this.maxY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(763).collectInput("org.jfree.data.time.TimeSeries.this.maximumItemAge",org.jfree.data.time.TimeSeries.this.maximumItemAge);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(763).collectInput("org.jfree.data.time.TimeSeries.DEFAULT_DOMAIN_DESCRIPTION",org.jfree.data.time.TimeSeries.DEFAULT_DOMAIN_DESCRIPTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(763).collectInput("org.jfree.data.time.TimeSeries.this.timePeriodClass",org.jfree.data.time.TimeSeries.this.timePeriodClass);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(763).collectInput("org.jfree.data.time.TimeSeries.this.range",org.jfree.data.time.TimeSeries.this.range);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(763).collectInput("org.jfree.data.time.TimeSeries.this.minY",org.jfree.data.time.TimeSeries.this.minY);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(763).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(763).collectionEnds();
            }
            if (runtimeAngelicValue) if (java.lang.Double.isNaN(b)) {
                return a;
            } else {
                return java.lang.Math.min(a, b);
            }
        }
    }

    private double maxIgnoreNaN(double a, double b) {
        if (java.lang.Double.isNaN(a)) {
            return b;
        } else if (java.lang.Double.isNaN(b)) {
            return a;
        } else {
            return java.lang.Math.max(a, b);
        }
    }
}
[797871] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659858887797
GPR[EPVATF]-1659858888025
GPR[SPS]-1659858888025
[798383] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:1270.
GPR[EPS]-1659858888310
GPR[ESUN]-1659858888310
GPR[SSUN]-1659858888310
-1522070587
GPR[SPVATF]-1659858888439
GPR[EPVATF]-1659858888667
GPR[SPS]-1659858888667
[799082] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:884.
GPR[EPS]-1659858889008
GPR[SPVATF]-1659858889008
GPR[EPVATF]-1659858889225
GPR[SPS]-1659858889225
[799577] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:884.
GPR[EPS]-1659858889503
GPR[ESUN]-1659858889503
GPR[SSUN]-1659858889503
-1522070587
GPR[ESUN]-1659858889633
GPR[SSUN]-1659858889633
-1522070587
GPR[ESUN]-1659858889761
GPR[SSUN]-1659858889761
-1522070587
GPR[ESUN]-1659858889888
GPR[SSUN]-1659858889888
-1522070587
GPR[SPVATF]-1659858890016
GPR[EPVATF]-1659858890246
GPR[SPS]-1659858890246
[800595] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:605.
GPR[EPS]-1659858890521
GPR[ESUN]-1659858890521
GPR[SSUN]-1659858890521
-1522070587
GPR[SPVATF]-1659858890650
GPR[EPVATF]-1659858890880
GPR[SPS]-1659858890880
[801234] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:604.
GPR[EPS]-1659858891160
GPR[ESUN]-1659858891161
GPR[SSUN]-1659858891161
-1522070587
GPR[SPVATF]-1659858891290
GPR[EPVATF]-1659858891519
GPR[SPS]-1659858891519
[801871] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:603.
GPR[EPS]-1659858891797
GPR[SPVATF]-1659858891798
GPR[EPVATF]-1659858892015
GPR[SPS]-1659858892015
[802367] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:603.
GPR[EPS]-1659858892293
GPR[ESUN]-1659858892293
GPR[SSUN]-1659858892293
-1522070587
GPR[ESUN]-1659858892425
GPR[SSUN]-1659858892425
-1522070587
GPR[SPVATF]-1659858892554
GPR[EPVATF]-1659858892784
GPR[SPS]-1659858892784
[803139] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:583.
GPR[EPS]-1659858893065
GPR[SPVATF]-1659858893066
GPR[EPVATF]-1659858893287
GPR[SPS]-1659858893287
[803638] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:583.
GPR[EPS]-1659858893564
GPR[ESUN]-1659858893564
GPR[SSUN]-1659858893564
-1522070587
GPR[ESUN]-1659858893694
GPR[SSUN]-1659858893694
-1522070587
GPR[ESUN]-1659858893826
GPR[SSUN]-1659858893826
1374250434
GPR[ESUN]-1659858893929
GPR[SSUN]-1659858893929
1374250434
GPR[ESUN]-1659858894026
GPR[SSUN]-1659858894026
1374250434
GPR[SPVATF]-1659858894127
GPR[EPVATF]-1659858894356
GPR[SPS]-1659858894356
[804660] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeriesDataItem:268.
GPR[EPS]-1659858894586
GPR[ESUN]-1659858894587
GPR[SSUN]-1659858894587
1374250434
GPR[ESUN]-1659858894689
GPR[SSUN]-1659858894689
1374250434
GPR[ESUN]-1659858894787
GPR[SSUN]-1659858894787
1374250434
GPR[ESUN]-1659858894887
GPR[SSUN]-1659858894887
-1522070587
GPR[SPVATF]-1659858895016
GPR[EPVATF]-1659858895246
GPR[SPS]-1659858895246
[805487] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TimeSeries extends org.jfree.data.general.Series implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = -5032960206869675528L;

    protected static final java.lang.String DEFAULT_DOMAIN_DESCRIPTION = "Time";

    protected static final java.lang.String DEFAULT_RANGE_DESCRIPTION = "Value";

    private java.lang.String domain;

    private java.lang.String range;

    protected java.lang.Class timePeriodClass;

    protected java.util.List data;

    private int maximumItemCount;

    private long maximumItemAge;

    private double minY;

    private double maxY;

    public TimeSeries(java.lang.Comparable name) {
        this(name, org.jfree.data.time.TimeSeries.DEFAULT_DOMAIN_DESCRIPTION, org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION);
    }

    public TimeSeries(java.lang.Comparable name, java.lang.String domain, java.lang.String range) {
        super(name);
        this.domain = domain;
        this.range = range;
        this.timePeriodClass = null;
        this.data = new java.util.ArrayList();
        this.maximumItemCount = java.lang.Integer.MAX_VALUE;
        this.maximumItemAge = java.lang.Long.MAX_VALUE;
        this.minY = java.lang.Double.NaN;
        this.maxY = java.lang.Double.NaN;
    }

    public java.lang.String getDomainDescription() {
        return this.domain;
    }

    public void setDomainDescription(java.lang.String description) {
        java.lang.String old = this.domain;
        this.domain = description;
        firePropertyChange("Domain", old, description);
    }

    public java.lang.String getRangeDescription() {
        return this.range;
    }

    public void setRangeDescription(java.lang.String description) {
        java.lang.String old = this.range;
        this.range = description;
        firePropertyChange("Range", old, description);
    }

    public int getItemCount() {
        return this.data.size();
    }

    public java.util.List getItems() {
        return java.util.Collections.unmodifiableList(this.data);
    }

    public int getMaximumItemCount() {
        return this.maximumItemCount;
    }

    public void setMaximumItemCount(int maximum) {
        if (maximum < 0) {
            throw new java.lang.IllegalArgumentException("Negative 'maximum' argument.");
        }
        this.maximumItemCount = maximum;
        int count = this.data.size();
        if (count > maximum) {
            delete(0, (count - maximum) - 1);
        }
    }

    public long getMaximumItemAge() {
        return this.maximumItemAge;
    }

    public void setMaximumItemAge(long periods) {
        if (periods < 0) {
            throw new java.lang.IllegalArgumentException("Negative 'periods' argument.");
        }
        this.maximumItemAge = periods;
        removeAgedItems(true);
    }

    public double getMinY() {
        return this.minY;
    }

    public double getMaxY() {
        return this.maxY;
    }

    public java.lang.Class getTimePeriodClass() {
        return this.timePeriodClass;
    }

    public org.jfree.data.time.TimeSeriesDataItem getDataItem(int index) {
        org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
        return ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
    }

    public org.jfree.data.time.TimeSeriesDataItem getDataItem(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            return getDataItem(index);
        } else {
            return null;
        }
    }

    org.jfree.data.time.TimeSeriesDataItem getRawDataItem(int index) {
        return ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
    }

    org.jfree.data.time.TimeSeriesDataItem getRawDataItem(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            return ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
        } else {
            return null;
        }
    }

    public org.jfree.data.time.RegularTimePeriod getTimePeriod(int index) {
        return getRawDataItem(index).getPeriod();
    }

    public org.jfree.data.time.RegularTimePeriod getNextTimePeriod() {
        org.jfree.data.time.RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
        return last.next();
    }

    public java.util.Collection getTimePeriods() {
        java.util.Collection result = new java.util.ArrayList();
        for (int i = 0; i < getItemCount(); i++) {
            result.add(getTimePeriod(i));
        }
        return result;
    }

    public java.util.Collection getTimePeriodsUniqueToOtherSeries(org.jfree.data.time.TimeSeries series) {
        java.util.Collection result = new java.util.ArrayList();
        for (int i = 0; i < series.getItemCount(); i++) {
            org.jfree.data.time.RegularTimePeriod period = series.getTimePeriod(i);
            int index = getIndex(period);
            if (index < 0) {
                result.add(period);
            }
        }
        return result;
    }

    public int getIndex(org.jfree.data.time.RegularTimePeriod period) {
        if (period == null) {
            throw new java.lang.IllegalArgumentException("Null 'period' argument.");
        }
        org.jfree.data.time.TimeSeriesDataItem dummy = new org.jfree.data.time.TimeSeriesDataItem(period, java.lang.Integer.MIN_VALUE);
        return java.util.Collections.binarySearch(this.data, dummy);
    }

    public java.lang.Number getValue(int index) {
        return getRawDataItem(index).getValue();
    }

    public java.lang.Number getValue(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            return getValue(index);
        } else {
            return null;
        }
    }

    public void add(org.jfree.data.time.TimeSeriesDataItem item) {
        add(item, true);
    }

    public void add(org.jfree.data.time.TimeSeriesDataItem item, boolean notify) {
        if (item == null) {
            throw new java.lang.IllegalArgumentException("Null 'item' argument.");
        }
        item = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
        java.lang.Class c = item.getPeriod().getClass();
        if (this.timePeriodClass == null) {
            this.timePeriodClass = c;
        } else if (!this.timePeriodClass.equals(c)) {
            java.lang.StringBuffer b = new java.lang.StringBuffer();
            b.append("You are trying to add data where the time period class ");
            b.append("is ");
            b.append(item.getPeriod().getClass().getName());
            b.append(", but the TimeSeries is expecting an instance of ");
            b.append(this.timePeriodClass.getName());
            b.append(".");
            throw new org.jfree.data.general.SeriesException(b.toString());
        }
        boolean added = false;
        int count = getItemCount();
        if (count == 0) {
            this.data.add(item);
            added = true;
        } else {
            org.jfree.data.time.RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
            if (item.getPeriod().compareTo(last) > 0) {
                this.data.add(item);
                added = true;
            } else {
                int index = java.util.Collections.binarySearch(this.data, item);
                if (index < 0) {
                    this.data.add((-index) - 1, item);
                    added = true;
                } else {
                    java.lang.StringBuffer b = new java.lang.StringBuffer();
                    b.append("You are attempting to add an observation for ");
                    b.append("the time period ");
                    b.append(item.getPeriod().toString());
                    b.append(" but the series already contains an observation");
                    b.append(" for that time period. Duplicates are not ");
                    b.append("permitted.  Try using the addOrUpdate() method.");
                    throw new org.jfree.data.general.SeriesException(b.toString());
                }
            }
        }
        if (added) {
            updateBoundsForAddedItem(item);
            if (getItemCount() > this.maximumItemCount) {
                org.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0)));
                updateBoundsForRemovedItem(d);
            }
            removeAgedItems(false);
            if (notify) {
                fireSeriesChanged();
            }
        }
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, double value) {
        add(period, value, true);
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, double value, boolean notify) {
        org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);
        add(item, notify);
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
        add(period, value, true);
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value, boolean notify) {
        org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);
        add(item, notify);
    }

    public void update(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
        org.jfree.data.time.TimeSeriesDataItem temp = new org.jfree.data.time.TimeSeriesDataItem(period, value);
        int index = java.util.Collections.binarySearch(this.data, temp);
        if (index < 0) {
            throw new org.jfree.data.general.SeriesException("There is no existing value for the " + "specified 'period'.");
        }
        update(index, value);
    }

    public void update(int index, java.lang.Number value) {
        org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
        boolean iterate = false;
        java.lang.Number oldYN = item.getValue();
        if (oldYN != null) {
            double oldY = oldYN.doubleValue();
            if (!java.lang.Double.isNaN(oldY)) {
                iterate = (oldY <= this.minY) || (oldY >= this.maxY);
            }
        }
        item.setValue(value);
        if (iterate) {
            findBoundsByIteration();
        } else if (value != null) {
            double yy = value.doubleValue();
            this.minY = minIgnoreNaN(this.minY, yy);
            this.maxY = maxIgnoreNaN(this.maxY, yy);
        }
        fireSeriesChanged();
    }

    public org.jfree.data.time.TimeSeries addAndOrUpdate(org.jfree.data.time.TimeSeries series) {
        org.jfree.data.time.TimeSeries overwritten = new org.jfree.data.time.TimeSeries("Overwritten values from: " + getKey());
        for (int i = 0; i < series.getItemCount(); i++) {
            org.jfree.data.time.TimeSeriesDataItem item = series.getRawDataItem(i);
            org.jfree.data.time.TimeSeriesDataItem oldItem = addOrUpdate(item.getPeriod(), item.getValue());
            if (oldItem != null) {
                overwritten.add(oldItem);
            }
        }
        return overwritten;
    }

    public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, double value) {
        return addOrUpdate(period, new java.lang.Double(value));
    }

    public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
        return addOrUpdate(new org.jfree.data.time.TimeSeriesDataItem(period, value));
    }

    public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.TimeSeriesDataItem item) {
        if (item == null) {
            throw new java.lang.IllegalArgumentException("Null 'period' argument.");
        }
        java.lang.Class periodClass = item.getPeriod().getClass();
        if (this.timePeriodClass == null) {
            this.timePeriodClass = periodClass;
        } else if (!this.timePeriodClass.equals(periodClass)) {
            java.lang.String msg = (((("You are trying to add data where the time " + "period class is ") + periodClass.getName()) + ", but the TimeSeries is expecting an instance of ") + this.timePeriodClass.getName()) + ".";
            throw new org.jfree.data.general.SeriesException(msg);
        }
        org.jfree.data.time.TimeSeriesDataItem overwritten = null;
        int index = java.util.Collections.binarySearch(this.data, item);
        if (index >= 0) {
            org.jfree.data.time.TimeSeriesDataItem existing = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
            overwritten = ((org.jfree.data.time.TimeSeriesDataItem) (existing.clone()));
            boolean iterate = false;
            java.lang.Number oldYN = existing.getValue();
            double oldY = (oldYN != null) ? oldYN.doubleValue() : java.lang.Double.NaN;
            if (!java.lang.Double.isNaN(oldY)) {
                iterate = (oldY <= this.minY) || (oldY >= this.maxY);
            }
            existing.setValue(item.getValue());
            if (iterate) {
                findBoundsByIteration();
            } else if (item.getValue() != null) {
                double yy = item.getValue().doubleValue();
                this.minY = minIgnoreNaN(this.minY, yy);
                this.maxY = minIgnoreNaN(this.maxY, yy);
            }
        } else {
            item = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
            this.data.add((-index) - 1, item);
            updateBoundsForAddedItem(item);
            if (getItemCount() > this.maximumItemCount) {
                org.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0)));
                updateBoundsForRemovedItem(d);
            }
        }
        removeAgedItems(false);
        fireSeriesChanged();
        return overwritten;
    }

    public void removeAgedItems(boolean notify) {
        if (getItemCount() > 1) {
            long latest = getTimePeriod(getItemCount() - 1).getSerialIndex();
            boolean removed = false;
            while ((latest - getTimePeriod(0).getSerialIndex()) > this.maximumItemAge) {
                this.data.remove(0);
                removed = true;
            } 
            if (removed) {
                findBoundsByIteration();
                if (notify) {
                    fireSeriesChanged();
                }
            }
        }
    }

    public void removeAgedItems(long latest, boolean notify) {
        if (this.data.isEmpty()) {
            return;
        }
        long index = java.lang.Long.MAX_VALUE;
        try {
            java.lang.reflect.Method m = org.jfree.data.time.RegularTimePeriod.class.getDeclaredMethod("createInstance", new java.lang.Class[]{ java.lang.Class.class, java.util.Date.class, java.util.TimeZone.class });
            org.jfree.data.time.RegularTimePeriod newest = ((org.jfree.data.time.RegularTimePeriod) (m.invoke(this.timePeriodClass, new java.lang.Object[]{ this.timePeriodClass, new java.util.Date(latest), java.util.TimeZone.getDefault() })));
            index = newest.getSerialIndex();
        } catch (java.lang.NoSuchMethodException e) {
            e.printStackTrace();
        } catch (java.lang.IllegalAccessException e) {
            e.printStackTrace();
        } catch (java.lang.reflect.InvocationTargetException e) {
            e.printStackTrace();
        }
        boolean removed = false;
        while ((getItemCount() > 0) && ((index - getTimePeriod(0).getSerialIndex()) > this.maximumItemAge)) {
            this.data.remove(0);
            removed = true;
        } 
        if (removed) {
            findBoundsByIteration();
            if (notify) {
                fireSeriesChanged();
            }
        }
    }

    public void clear() {
        if (this.data.size() > 0) {
            this.data.clear();
            this.timePeriodClass = null;
            this.minY = java.lang.Double.NaN;
            this.maxY = java.lang.Double.NaN;
            fireSeriesChanged();
        }
    }

    public void delete(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(index)));
            updateBoundsForRemovedItem(item);
            if (this.data.isEmpty()) {
                this.timePeriodClass = null;
            }
            fireSeriesChanged();
        }
    }

    public void delete(int start, int end) {
        delete(start, end, true);
    }

    public void delete(int start, int end, boolean notify) {
        if (end < start) {
            throw new java.lang.IllegalArgumentException("Requires start <= end.");
        }
        for (int i = 0; i <= (end - start); i++) {
            this.data.remove(start);
        }
        findBoundsByIteration();
        if (this.data.isEmpty()) {
            this.timePeriodClass = null;
        }
        if (notify) {
            fireSeriesChanged();
        }
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.data.time.TimeSeries clone = ((org.jfree.data.time.TimeSeries) (super.clone()));
        clone.data = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.data)));
        return clone;
    }

    public org.jfree.data.time.TimeSeries createCopy(int start, int end) throws java.lang.CloneNotSupportedException {
        if (start < 0) {
            throw new java.lang.IllegalArgumentException("Requires start >= 0.");
        }
        if (end < start) {
            throw new java.lang.IllegalArgumentException("Requires start <= end.");
        }
        org.jfree.data.time.TimeSeries copy = ((org.jfree.data.time.TimeSeries) (super.clone()));
        copy.data = new java.util.ArrayList();
        if (this.data.size() > 0) {
            for (int index = start; index <= end; index++) {
                org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
                org.jfree.data.time.TimeSeriesDataItem clone = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
                try {
                    copy.add(clone);
                } catch (org.jfree.data.general.SeriesException e) {
                    e.printStackTrace();
                }
            }
        }
        return copy;
    }

    public org.jfree.data.time.TimeSeries createCopy(org.jfree.data.time.RegularTimePeriod start, org.jfree.data.time.RegularTimePeriod end) throws java.lang.CloneNotSupportedException {
        if (start == null) {
            throw new java.lang.IllegalArgumentException("Null 'start' argument.");
        }
        if (end == null) {
            throw new java.lang.IllegalArgumentException("Null 'end' argument.");
        }
        if (start.compareTo(end) > 0) {
            throw new java.lang.IllegalArgumentException("Requires start on or before end.");
        }
        boolean emptyRange = false;
        int startIndex = getIndex(start);
        if (startIndex < 0) {
            startIndex = -(startIndex + 1);
            if (startIndex == this.data.size()) {
                emptyRange = true;
            }
        }
        int endIndex = getIndex(end);
        if (endIndex < 0) {
            endIndex = -(endIndex + 1);
            endIndex = endIndex - 1;
        }
        if ((endIndex < 0) || (endIndex < startIndex)) {
            emptyRange = true;
        }
        if (emptyRange) {
            org.jfree.data.time.TimeSeries copy = ((org.jfree.data.time.TimeSeries) (super.clone()));
            copy.data = new java.util.ArrayList();
            return copy;
        } else {
            return createCopy(startIndex, endIndex);
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.time.TimeSeries)) {
            return false;
        }
        org.jfree.data.time.TimeSeries that = ((org.jfree.data.time.TimeSeries) (obj));
        if (!org.jfree.chart.util.ObjectUtilities.equal(getDomainDescription(), that.getDomainDescription())) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(getRangeDescription(), that.getRangeDescription())) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.timePeriodClass, that.timePeriodClass)) {
            return false;
        }
        if (getMaximumItemAge() != that.getMaximumItemAge()) {
            return false;
        }
        if (getMaximumItemCount() != that.getMaximumItemCount()) {
            return false;
        }
        int count = getItemCount();
        if (count != that.getItemCount()) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.data, that.data)) {
            return false;
        }
        return super.equals(obj);
    }

    public int hashCode() {
        int result = super.hashCode();
        result = (29 * result) + (this.domain != null ? this.domain.hashCode() : 0);
        result = (29 * result) + (this.range != null ? this.range.hashCode() : 0);
        result = (29 * result) + (this.timePeriodClass != null ? this.timePeriodClass.hashCode() : 0);
        int count = getItemCount();
        if (count > 0) {
            org.jfree.data.time.TimeSeriesDataItem item = getRawDataItem(0);
            result = (29 * result) + item.hashCode();
        }
        if (count > 1) {
            org.jfree.data.time.TimeSeriesDataItem item = getRawDataItem(count - 1);
            result = (29 * result) + item.hashCode();
        }
        if (count > 2) {
            org.jfree.data.time.TimeSeriesDataItem item = getRawDataItem(count / 2);
            result = (29 * result) + item.hashCode();
        }
        result = (29 * result) + this.maximumItemCount;
        result = (29 * result) + ((int) (this.maximumItemAge));
        return result;
    }

    private void updateBoundsForAddedItem(org.jfree.data.time.TimeSeriesDataItem item) {
        java.lang.Number yN = item.getValue();
        if (item.getValue() != null) {
            double y = yN.doubleValue();
            this.minY = minIgnoreNaN(this.minY, y);
            this.maxY = maxIgnoreNaN(this.maxY, y);
        }
    }

    private void updateBoundsForRemovedItem(org.jfree.data.time.TimeSeriesDataItem item) {
        java.lang.Number yN = item.getValue();
        if (yN != null) {
            double y = yN.doubleValue();
            if (!java.lang.Double.isNaN(y)) {
                if ((y <= this.minY) || (y >= this.maxY)) {
                    findBoundsByIteration();
                }
            }
        }
    }

    private void findBoundsByIteration() {
        this.minY = java.lang.Double.NaN;
        this.maxY = java.lang.Double.NaN;
        java.util.Iterator iterator = this.data.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (iterator.next()));
            updateBoundsForAddedItem(item);
        } 
    }

    private double minIgnoreNaN(double a, double b) {
        if (java.lang.Double.isNaN(a)) {
            return b;
        } else if (java.lang.Double.isNaN(b)) {
            return a;
        } else {
            return java.lang.Math.min(a, b);
        }
    }

    private double maxIgnoreNaN(double a, double b) {
        if (java.lang.Double.isNaN(a)) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(774).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(774).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(774).collectInput("org.jfree.data.time.TimeSeries.this.data",org.jfree.data.time.TimeSeries.this.data);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(774).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(774).collectInput("org.jfree.data.time.TimeSeries.this.maximumItemCount",org.jfree.data.time.TimeSeries.this.maximumItemCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(774).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(774).collectInput("org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION",org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(774).collectInput("org.jfree.data.time.TimeSeries.this.domain",org.jfree.data.time.TimeSeries.this.domain);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(774).collectInput("org.jfree.data.time.TimeSeries.this.maxY",org.jfree.data.time.TimeSeries.this.maxY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(774).collectInput("org.jfree.data.time.TimeSeries.this.maximumItemAge",org.jfree.data.time.TimeSeries.this.maximumItemAge);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(774).collectInput("org.jfree.data.time.TimeSeries.DEFAULT_DOMAIN_DESCRIPTION",org.jfree.data.time.TimeSeries.DEFAULT_DOMAIN_DESCRIPTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(774).collectInput("org.jfree.data.time.TimeSeries.this.timePeriodClass",org.jfree.data.time.TimeSeries.this.timePeriodClass);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(774).collectInput("org.jfree.data.time.TimeSeries.this.range",org.jfree.data.time.TimeSeries.this.range);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(774).collectInput("org.jfree.data.time.TimeSeries.this.minY",org.jfree.data.time.TimeSeries.this.minY);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(774).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(774).collectionEnds();
            }
            if (runtimeAngelicValue)
                return b;

        } else if (java.lang.Double.isNaN(b)) {
            return a;
        } else {
            return java.lang.Math.max(a, b);
        }
    }
}
[805487] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858895413
GPR[SSUN]-1659858895413
-1522070587
GPR[SPVATF]-1659858895547
GPR[EPVATF]-1659858895777
GPR[SPS]-1659858895777
[806133] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:1289.
GPR[EPS]-1659858896060
GPR[ESUN]-1659858896060
GPR[SSUN]-1659858896060
-1522070587
GPR[SPVATF]-1659858896194
GPR[EPVATF]-1659858896421
GPR[SPS]-1659858896421
[806665] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TimeSeries extends org.jfree.data.general.Series implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = -5032960206869675528L;

    protected static final java.lang.String DEFAULT_DOMAIN_DESCRIPTION = "Time";

    protected static final java.lang.String DEFAULT_RANGE_DESCRIPTION = "Value";

    private java.lang.String domain;

    private java.lang.String range;

    protected java.lang.Class timePeriodClass;

    protected java.util.List data;

    private int maximumItemCount;

    private long maximumItemAge;

    private double minY;

    private double maxY;

    public TimeSeries(java.lang.Comparable name) {
        this(name, org.jfree.data.time.TimeSeries.DEFAULT_DOMAIN_DESCRIPTION, org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION);
    }

    public TimeSeries(java.lang.Comparable name, java.lang.String domain, java.lang.String range) {
        super(name);
        this.domain = domain;
        this.range = range;
        this.timePeriodClass = null;
        this.data = new java.util.ArrayList();
        this.maximumItemCount = java.lang.Integer.MAX_VALUE;
        this.maximumItemAge = java.lang.Long.MAX_VALUE;
        this.minY = java.lang.Double.NaN;
        this.maxY = java.lang.Double.NaN;
    }

    public java.lang.String getDomainDescription() {
        return this.domain;
    }

    public void setDomainDescription(java.lang.String description) {
        java.lang.String old = this.domain;
        this.domain = description;
        firePropertyChange("Domain", old, description);
    }

    public java.lang.String getRangeDescription() {
        return this.range;
    }

    public void setRangeDescription(java.lang.String description) {
        java.lang.String old = this.range;
        this.range = description;
        firePropertyChange("Range", old, description);
    }

    public int getItemCount() {
        return this.data.size();
    }

    public java.util.List getItems() {
        return java.util.Collections.unmodifiableList(this.data);
    }

    public int getMaximumItemCount() {
        return this.maximumItemCount;
    }

    public void setMaximumItemCount(int maximum) {
        if (maximum < 0) {
            throw new java.lang.IllegalArgumentException("Negative 'maximum' argument.");
        }
        this.maximumItemCount = maximum;
        int count = this.data.size();
        if (count > maximum) {
            delete(0, (count - maximum) - 1);
        }
    }

    public long getMaximumItemAge() {
        return this.maximumItemAge;
    }

    public void setMaximumItemAge(long periods) {
        if (periods < 0) {
            throw new java.lang.IllegalArgumentException("Negative 'periods' argument.");
        }
        this.maximumItemAge = periods;
        removeAgedItems(true);
    }

    public double getMinY() {
        return this.minY;
    }

    public double getMaxY() {
        return this.maxY;
    }

    public java.lang.Class getTimePeriodClass() {
        return this.timePeriodClass;
    }

    public org.jfree.data.time.TimeSeriesDataItem getDataItem(int index) {
        org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
        return ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
    }

    public org.jfree.data.time.TimeSeriesDataItem getDataItem(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            return getDataItem(index);
        } else {
            return null;
        }
    }

    org.jfree.data.time.TimeSeriesDataItem getRawDataItem(int index) {
        return ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
    }

    org.jfree.data.time.TimeSeriesDataItem getRawDataItem(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            return ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
        } else {
            return null;
        }
    }

    public org.jfree.data.time.RegularTimePeriod getTimePeriod(int index) {
        return getRawDataItem(index).getPeriod();
    }

    public org.jfree.data.time.RegularTimePeriod getNextTimePeriod() {
        org.jfree.data.time.RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
        return last.next();
    }

    public java.util.Collection getTimePeriods() {
        java.util.Collection result = new java.util.ArrayList();
        for (int i = 0; i < getItemCount(); i++) {
            result.add(getTimePeriod(i));
        }
        return result;
    }

    public java.util.Collection getTimePeriodsUniqueToOtherSeries(org.jfree.data.time.TimeSeries series) {
        java.util.Collection result = new java.util.ArrayList();
        for (int i = 0; i < series.getItemCount(); i++) {
            org.jfree.data.time.RegularTimePeriod period = series.getTimePeriod(i);
            int index = getIndex(period);
            if (index < 0) {
                result.add(period);
            }
        }
        return result;
    }

    public int getIndex(org.jfree.data.time.RegularTimePeriod period) {
        if (period == null) {
            throw new java.lang.IllegalArgumentException("Null 'period' argument.");
        }
        org.jfree.data.time.TimeSeriesDataItem dummy = new org.jfree.data.time.TimeSeriesDataItem(period, java.lang.Integer.MIN_VALUE);
        return java.util.Collections.binarySearch(this.data, dummy);
    }

    public java.lang.Number getValue(int index) {
        return getRawDataItem(index).getValue();
    }

    public java.lang.Number getValue(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            return getValue(index);
        } else {
            return null;
        }
    }

    public void add(org.jfree.data.time.TimeSeriesDataItem item) {
        add(item, true);
    }

    public void add(org.jfree.data.time.TimeSeriesDataItem item, boolean notify) {
        if (item == null) {
            throw new java.lang.IllegalArgumentException("Null 'item' argument.");
        }
        item = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
        java.lang.Class c = item.getPeriod().getClass();
        if (this.timePeriodClass == null) {
            this.timePeriodClass = c;
        } else if (!this.timePeriodClass.equals(c)) {
            java.lang.StringBuffer b = new java.lang.StringBuffer();
            b.append("You are trying to add data where the time period class ");
            b.append("is ");
            b.append(item.getPeriod().getClass().getName());
            b.append(", but the TimeSeries is expecting an instance of ");
            b.append(this.timePeriodClass.getName());
            b.append(".");
            throw new org.jfree.data.general.SeriesException(b.toString());
        }
        boolean added = false;
        int count = getItemCount();
        if (count == 0) {
            this.data.add(item);
            added = true;
        } else {
            org.jfree.data.time.RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
            if (item.getPeriod().compareTo(last) > 0) {
                this.data.add(item);
                added = true;
            } else {
                int index = java.util.Collections.binarySearch(this.data, item);
                if (index < 0) {
                    this.data.add((-index) - 1, item);
                    added = true;
                } else {
                    java.lang.StringBuffer b = new java.lang.StringBuffer();
                    b.append("You are attempting to add an observation for ");
                    b.append("the time period ");
                    b.append(item.getPeriod().toString());
                    b.append(" but the series already contains an observation");
                    b.append(" for that time period. Duplicates are not ");
                    b.append("permitted.  Try using the addOrUpdate() method.");
                    throw new org.jfree.data.general.SeriesException(b.toString());
                }
            }
        }
        if (added) {
            updateBoundsForAddedItem(item);
            if (getItemCount() > this.maximumItemCount) {
                org.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0)));
                updateBoundsForRemovedItem(d);
            }
            removeAgedItems(false);
            if (notify) {
                fireSeriesChanged();
            }
        }
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, double value) {
        add(period, value, true);
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, double value, boolean notify) {
        org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);
        add(item, notify);
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
        add(period, value, true);
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value, boolean notify) {
        org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);
        add(item, notify);
    }

    public void update(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
        org.jfree.data.time.TimeSeriesDataItem temp = new org.jfree.data.time.TimeSeriesDataItem(period, value);
        int index = java.util.Collections.binarySearch(this.data, temp);
        if (index < 0) {
            throw new org.jfree.data.general.SeriesException("There is no existing value for the " + "specified 'period'.");
        }
        update(index, value);
    }

    public void update(int index, java.lang.Number value) {
        org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
        boolean iterate = false;
        java.lang.Number oldYN = item.getValue();
        if (oldYN != null) {
            double oldY = oldYN.doubleValue();
            if (!java.lang.Double.isNaN(oldY)) {
                iterate = (oldY <= this.minY) || (oldY >= this.maxY);
            }
        }
        item.setValue(value);
        if (iterate) {
            findBoundsByIteration();
        } else if (value != null) {
            double yy = value.doubleValue();
            this.minY = minIgnoreNaN(this.minY, yy);
            this.maxY = maxIgnoreNaN(this.maxY, yy);
        }
        fireSeriesChanged();
    }

    public org.jfree.data.time.TimeSeries addAndOrUpdate(org.jfree.data.time.TimeSeries series) {
        org.jfree.data.time.TimeSeries overwritten = new org.jfree.data.time.TimeSeries("Overwritten values from: " + getKey());
        for (int i = 0; i < series.getItemCount(); i++) {
            org.jfree.data.time.TimeSeriesDataItem item = series.getRawDataItem(i);
            org.jfree.data.time.TimeSeriesDataItem oldItem = addOrUpdate(item.getPeriod(), item.getValue());
            if (oldItem != null) {
                overwritten.add(oldItem);
            }
        }
        return overwritten;
    }

    public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, double value) {
        return addOrUpdate(period, new java.lang.Double(value));
    }

    public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
        return addOrUpdate(new org.jfree.data.time.TimeSeriesDataItem(period, value));
    }

    public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.TimeSeriesDataItem item) {
        if (item == null) {
            throw new java.lang.IllegalArgumentException("Null 'period' argument.");
        }
        java.lang.Class periodClass = item.getPeriod().getClass();
        if (this.timePeriodClass == null) {
            this.timePeriodClass = periodClass;
        } else if (!this.timePeriodClass.equals(periodClass)) {
            java.lang.String msg = (((("You are trying to add data where the time " + "period class is ") + periodClass.getName()) + ", but the TimeSeries is expecting an instance of ") + this.timePeriodClass.getName()) + ".";
            throw new org.jfree.data.general.SeriesException(msg);
        }
        org.jfree.data.time.TimeSeriesDataItem overwritten = null;
        int index = java.util.Collections.binarySearch(this.data, item);
        if (index >= 0) {
            org.jfree.data.time.TimeSeriesDataItem existing = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
            overwritten = ((org.jfree.data.time.TimeSeriesDataItem) (existing.clone()));
            boolean iterate = false;
            java.lang.Number oldYN = existing.getValue();
            double oldY = (oldYN != null) ? oldYN.doubleValue() : java.lang.Double.NaN;
            if (!java.lang.Double.isNaN(oldY)) {
                iterate = (oldY <= this.minY) || (oldY >= this.maxY);
            }
            existing.setValue(item.getValue());
            if (iterate) {
                findBoundsByIteration();
            } else if (item.getValue() != null) {
                double yy = item.getValue().doubleValue();
                this.minY = minIgnoreNaN(this.minY, yy);
                this.maxY = minIgnoreNaN(this.maxY, yy);
            }
        } else {
            item = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
            this.data.add((-index) - 1, item);
            updateBoundsForAddedItem(item);
            if (getItemCount() > this.maximumItemCount) {
                org.jfree.data.time.TimeSeriesDataItem d = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(0)));
                updateBoundsForRemovedItem(d);
            }
        }
        removeAgedItems(false);
        fireSeriesChanged();
        return overwritten;
    }

    public void removeAgedItems(boolean notify) {
        if (getItemCount() > 1) {
            long latest = getTimePeriod(getItemCount() - 1).getSerialIndex();
            boolean removed = false;
            while ((latest - getTimePeriod(0).getSerialIndex()) > this.maximumItemAge) {
                this.data.remove(0);
                removed = true;
            } 
            if (removed) {
                findBoundsByIteration();
                if (notify) {
                    fireSeriesChanged();
                }
            }
        }
    }

    public void removeAgedItems(long latest, boolean notify) {
        if (this.data.isEmpty()) {
            return;
        }
        long index = java.lang.Long.MAX_VALUE;
        try {
            java.lang.reflect.Method m = org.jfree.data.time.RegularTimePeriod.class.getDeclaredMethod("createInstance", new java.lang.Class[]{ java.lang.Class.class, java.util.Date.class, java.util.TimeZone.class });
            org.jfree.data.time.RegularTimePeriod newest = ((org.jfree.data.time.RegularTimePeriod) (m.invoke(this.timePeriodClass, new java.lang.Object[]{ this.timePeriodClass, new java.util.Date(latest), java.util.TimeZone.getDefault() })));
            index = newest.getSerialIndex();
        } catch (java.lang.NoSuchMethodException e) {
            e.printStackTrace();
        } catch (java.lang.IllegalAccessException e) {
            e.printStackTrace();
        } catch (java.lang.reflect.InvocationTargetException e) {
            e.printStackTrace();
        }
        boolean removed = false;
        while ((getItemCount() > 0) && ((index - getTimePeriod(0).getSerialIndex()) > this.maximumItemAge)) {
            this.data.remove(0);
            removed = true;
        } 
        if (removed) {
            findBoundsByIteration();
            if (notify) {
                fireSeriesChanged();
            }
        }
    }

    public void clear() {
        if (this.data.size() > 0) {
            this.data.clear();
            this.timePeriodClass = null;
            this.minY = java.lang.Double.NaN;
            this.maxY = java.lang.Double.NaN;
            fireSeriesChanged();
        }
    }

    public void delete(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.remove(index)));
            updateBoundsForRemovedItem(item);
            if (this.data.isEmpty()) {
                this.timePeriodClass = null;
            }
            fireSeriesChanged();
        }
    }

    public void delete(int start, int end) {
        delete(start, end, true);
    }

    public void delete(int start, int end, boolean notify) {
        if (end < start) {
            throw new java.lang.IllegalArgumentException("Requires start <= end.");
        }
        for (int i = 0; i <= (end - start); i++) {
            this.data.remove(start);
        }
        findBoundsByIteration();
        if (this.data.isEmpty()) {
            this.timePeriodClass = null;
        }
        if (notify) {
            fireSeriesChanged();
        }
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.data.time.TimeSeries clone = ((org.jfree.data.time.TimeSeries) (super.clone()));
        clone.data = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.data)));
        return clone;
    }

    public org.jfree.data.time.TimeSeries createCopy(int start, int end) throws java.lang.CloneNotSupportedException {
        if (start < 0) {
            throw new java.lang.IllegalArgumentException("Requires start >= 0.");
        }
        if (end < start) {
            throw new java.lang.IllegalArgumentException("Requires start <= end.");
        }
        org.jfree.data.time.TimeSeries copy = ((org.jfree.data.time.TimeSeries) (super.clone()));
        copy.data = new java.util.ArrayList();
        if (this.data.size() > 0) {
            for (int index = start; index <= end; index++) {
                org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
                org.jfree.data.time.TimeSeriesDataItem clone = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
                try {
                    copy.add(clone);
                } catch (org.jfree.data.general.SeriesException e) {
                    e.printStackTrace();
                }
            }
        }
        return copy;
    }

    public org.jfree.data.time.TimeSeries createCopy(org.jfree.data.time.RegularTimePeriod start, org.jfree.data.time.RegularTimePeriod end) throws java.lang.CloneNotSupportedException {
        if (start == null) {
            throw new java.lang.IllegalArgumentException("Null 'start' argument.");
        }
        if (end == null) {
            throw new java.lang.IllegalArgumentException("Null 'end' argument.");
        }
        if (start.compareTo(end) > 0) {
            throw new java.lang.IllegalArgumentException("Requires start on or before end.");
        }
        boolean emptyRange = false;
        int startIndex = getIndex(start);
        if (startIndex < 0) {
            startIndex = -(startIndex + 1);
            if (startIndex == this.data.size()) {
                emptyRange = true;
            }
        }
        int endIndex = getIndex(end);
        if (endIndex < 0) {
            endIndex = -(endIndex + 1);
            endIndex = endIndex - 1;
        }
        if ((endIndex < 0) || (endIndex < startIndex)) {
            emptyRange = true;
        }
        if (emptyRange) {
            org.jfree.data.time.TimeSeries copy = ((org.jfree.data.time.TimeSeries) (super.clone()));
            copy.data = new java.util.ArrayList();
            return copy;
        } else {
            return createCopy(startIndex, endIndex);
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.time.TimeSeries)) {
            return false;
        }
        org.jfree.data.time.TimeSeries that = ((org.jfree.data.time.TimeSeries) (obj));
        if (!org.jfree.chart.util.ObjectUtilities.equal(getDomainDescription(), that.getDomainDescription())) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(getRangeDescription(), that.getRangeDescription())) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.timePeriodClass, that.timePeriodClass)) {
            return false;
        }
        if (getMaximumItemAge() != that.getMaximumItemAge()) {
            return false;
        }
        if (getMaximumItemCount() != that.getMaximumItemCount()) {
            return false;
        }
        int count = getItemCount();
        if (count != that.getItemCount()) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.data, that.data)) {
            return false;
        }
        return super.equals(obj);
    }

    public int hashCode() {
        int result = super.hashCode();
        result = (29 * result) + (this.domain != null ? this.domain.hashCode() : 0);
        result = (29 * result) + (this.range != null ? this.range.hashCode() : 0);
        result = (29 * result) + (this.timePeriodClass != null ? this.timePeriodClass.hashCode() : 0);
        int count = getItemCount();
        if (count > 0) {
            org.jfree.data.time.TimeSeriesDataItem item = getRawDataItem(0);
            result = (29 * result) + item.hashCode();
        }
        if (count > 1) {
            org.jfree.data.time.TimeSeriesDataItem item = getRawDataItem(count - 1);
            result = (29 * result) + item.hashCode();
        }
        if (count > 2) {
            org.jfree.data.time.TimeSeriesDataItem item = getRawDataItem(count / 2);
            result = (29 * result) + item.hashCode();
        }
        result = (29 * result) + this.maximumItemCount;
        result = (29 * result) + ((int) (this.maximumItemAge));
        return result;
    }

    private void updateBoundsForAddedItem(org.jfree.data.time.TimeSeriesDataItem item) {
        java.lang.Number yN = item.getValue();
        if (item.getValue() != null) {
            double y = yN.doubleValue();
            this.minY = minIgnoreNaN(this.minY, y);
            this.maxY = maxIgnoreNaN(this.maxY, y);
        }
    }

    private void updateBoundsForRemovedItem(org.jfree.data.time.TimeSeriesDataItem item) {
        java.lang.Number yN = item.getValue();
        if (yN != null) {
            double y = yN.doubleValue();
            if (!java.lang.Double.isNaN(y)) {
                if ((y <= this.minY) || (y >= this.maxY)) {
                    findBoundsByIteration();
                }
            }
        }
    }

    private void findBoundsByIteration() {
        this.minY = java.lang.Double.NaN;
        this.maxY = java.lang.Double.NaN;
        java.util.Iterator iterator = this.data.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (iterator.next()));
            updateBoundsForAddedItem(item);
        } 
    }

    private double minIgnoreNaN(double a, double b) {
        if (java.lang.Double.isNaN(a)) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(776).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(776).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(776).collectInput("org.jfree.data.time.TimeSeries.this.data",org.jfree.data.time.TimeSeries.this.data);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(776).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(776).collectInput("org.jfree.data.time.TimeSeries.this.maximumItemCount",org.jfree.data.time.TimeSeries.this.maximumItemCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(776).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(776).collectInput("org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION",org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(776).collectInput("org.jfree.data.time.TimeSeries.this.domain",org.jfree.data.time.TimeSeries.this.domain);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(776).collectInput("org.jfree.data.time.TimeSeries.this.maxY",org.jfree.data.time.TimeSeries.this.maxY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(776).collectInput("org.jfree.data.time.TimeSeries.this.maximumItemAge",org.jfree.data.time.TimeSeries.this.maximumItemAge);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(776).collectInput("org.jfree.data.time.TimeSeries.DEFAULT_DOMAIN_DESCRIPTION",org.jfree.data.time.TimeSeries.DEFAULT_DOMAIN_DESCRIPTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(776).collectInput("org.jfree.data.time.TimeSeries.this.timePeriodClass",org.jfree.data.time.TimeSeries.this.timePeriodClass);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(776).collectInput("org.jfree.data.time.TimeSeries.this.range",org.jfree.data.time.TimeSeries.this.range);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(776).collectInput("org.jfree.data.time.TimeSeries.this.minY",org.jfree.data.time.TimeSeries.this.minY);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(776).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(776).collectionEnds();
            }
            if (runtimeAngelicValue)
                return b;

        } else if (java.lang.Double.isNaN(b)) {
            return a;
        } else {
            return java.lang.Math.min(a, b);
        }
    }

    private double maxIgnoreNaN(double a, double b) {
        if (java.lang.Double.isNaN(a)) {
            return b;
        } else if (java.lang.Double.isNaN(b)) {
            return a;
        } else {
            return java.lang.Math.max(a, b);
        }
    }
}
[806665] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858896591
GPR[SSUN]-1659858896591
-1522070587
GPR[SPVATF]-1659858896723
GPR[EPVATF]-1659858896954
GPR[SPS]-1659858896954
[807307] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:1266.
GPR[EPS]-1659858897233
GPR[ESUN]-1659858897233
GPR[SSUN]-1659858897233
-1522070587
GPR[ESUN]-1659858897363
GPR[SSUN]-1659858897363
-1522070587
GPR[SPVATF]-1659858897494
GPR[EPVATF]-1659858897722
GPR[SPS]-1659858897722
[808079] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:1216.
GPR[EPS]-1659858898005
GPR[ESUN]-1659858898005
GPR[SSUN]-1659858898005
-1522070587
GPR[SPVATF]-1659858898203
GPR[EPVATF]-1659858898431
GPR[SPS]-1659858898431
[808782] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:1215.
GPR[EPS]-1659858898708
GPR[ESUN]-1659858898708
GPR[SSUN]-1659858898708
-1522070587
GPR[ESUN]-1659858898840
GPR[SSUN]-1659858898840
-1522070587
GPR[SPVATF]-1659858898967
GPR[EPVATF]-1659858899197
GPR[SPS]-1659858899197
[809549] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:1213.
GPR[EPS]-1659858899475
GPR[SPVATF]-1659858899476
GPR[EPVATF]-1659858899701
GPR[SPS]-1659858899701
[810057] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:1213.
GPR[EPS]-1659858899983
GPR[ESUN]-1659858899983
GPR[SSUN]-1659858899983
-1522070587
GPR[ESUN]-1659858900112
GPR[SSUN]-1659858900112
-1522070587
GPR[ESUN]-1659858900245
GPR[SSUN]-1659858900245
-1522070587
GPR[SPVATF]-1659858900379
GPR[EPVATF]-1659858900610
GPR[SPS]-1659858900610
[810960] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:876.
GPR[EPS]-1659858900886
GPR[SPVATF]-1659858900886
GPR[EPVATF]-1659858901109
GPR[SPS]-1659858901109
[811462] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:876.
GPR[EPS]-1659858901388
GPR[ESUN]-1659858901388
GPR[SSUN]-1659858901388
-1522070587
GPR[ESUN]-1659858901527
GPR[SSUN]-1659858901527
-1522070587
GPR[SPVATF]-1659858901660
GPR[EPVATF]-1659858901892
GPR[SPS]-1659858901892
[812247] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:637.
GPR[EPS]-1659858902173
GPR[ESUN]-1659858902173
GPR[SSUN]-1659858902173
-1522070587
GPR[SPVATF]-1659858902302
GPR[EPVATF]-1659858902531
GPR[SPS]-1659858902531
[812887] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:636.
GPR[EPS]-1659858902813
GPR[SPVATF]-1659858902814
GPR[EPVATF]-1659858903042
GPR[SPS]-1659858903042
[813394] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:636.
GPR[EPS]-1659858903320
GPR[ESUN]-1659858903320
GPR[SSUN]-1659858903320
-1522070587
GPR[SPVATF]-1659858903450
GPR[EPVATF]-1659858903678
GPR[SPS]-1659858903678
[814038] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:633.
GPR[EPS]-1659858903964
GPR[ESUN]-1659858903964
GPR[SSUN]-1659858903964
-1522070587
GPR[SPVATF]-1659858904093
GPR[EPVATF]-1659858904318
GPR[SPS]-1659858904318
[814672] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:628.
GPR[EPS]-1659858904598
GPR[SPVATF]-1659858904598
GPR[EPVATF]-1659858904825
GPR[SPS]-1659858904825
[815178] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:628.
GPR[EPS]-1659858905104
GPR[ESUN]-1659858905104
GPR[SSUN]-1659858905104
-1522070587
GPR[SPVATF]-1659858905234
GPR[EPVATF]-1659858905463
GPR[SPS]-1659858905463
[815821] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:626.
GPR[EPS]-1659858905747
GPR[ESUN]-1659858905747
GPR[SSUN]-1659858905747
-1522070587
GPR[SPVATF]-1659858905880
GPR[EPVATF]-1659858906111
GPR[SPS]-1659858906111
[816496] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:625.
GPR[EPS]-1659858906422
GPR[SPVATF]-1659858906422
GPR[EPVATF]-1659858906649
GPR[SPS]-1659858906649
[817007] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:625.
GPR[EPS]-1659858906933
GPR[ESUN]-1659858906933
GPR[SSUN]-1659858906933
-1522070587
GPR[SPVATF]-1659858907070
GPR[EPVATF]-1659858907298
GPR[SPS]-1659858907298
[817657] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:599.
GPR[EPS]-1659858907583
GPR[ESUN]-1659858907583
GPR[SSUN]-1659858907583
-1522070587
GPR[SPVATF]-1659858907714
GPR[EPVATF]-1659858907945
GPR[SPS]-1659858907945
[818381] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:598.
GPR[EPS]-1659858908307
GPR[ESUN]-1659858908307
GPR[SSUN]-1659858908307
-1522070587
GPR[SPVATF]-1659858908445
GPR[EPVATF]-1659858908674
GPR[SPS]-1659858908674
[819028] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:597.
GPR[EPS]-1659858908955
GPR[SPVATF]-1659858908955
GPR[EPVATF]-1659858909183
GPR[SPS]-1659858909183
[819541] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:597.
GPR[EPS]-1659858909467
GPR[ESUN]-1659858909467
GPR[SSUN]-1659858909467
-1522070587
GPR[ESUN]-1659858909598
GPR[SSUN]-1659858909598
-1522070587
GPR[ESUN]-1659858909729
GPR[SSUN]-1659858909729
-1522070587
GPR[SPVATF]-1659858909861
GPR[EPVATF]-1659858910099
GPR[SPS]-1659858910099
[820461] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:581.
GPR[EPS]-1659858910387
GPR[ESUN]-1659858910388
GPR[SSUN]-1659858910388
-1522070587
GPR[SPVATF]-1659858910521
GPR[EPVATF]-1659858910754
GPR[SPS]-1659858910754
[821117] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:580.
GPR[EPS]-1659858911043
GPR[SPVATF]-1659858911043
GPR[EPVATF]-1659858911272
GPR[SPS]-1659858911272
[821635] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:580.
GPR[EPS]-1659858911561
GPR[ESUN]-1659858911561
GPR[SSUN]-1659858911561
-1522070587
GPR[ESUN]-1659858911690
GPR[SSUN]-1659858911690
-1522070587
GPR[SPVATF]-1659858911819
GPR[EPVATF]-1659858912053
GPR[SPS]-1659858912053
[822411] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:578.
GPR[EPS]-1659858912337
GPR[ESUN]-1659858912337
GPR[SSUN]-1659858912337
-1522070587
GPR[SPVATF]-1659858912467
GPR[EPVATF]-1659858912699
GPR[SPS]-1659858912699
[823057] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:575.
GPR[EPS]-1659858912983
GPR[SPVATF]-1659858912983
GPR[EPVATF]-1659858913209
GPR[SPS]-1659858913209
[823568] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:575.
GPR[EPS]-1659858913494
GPR[ESUN]-1659858913494
GPR[SSUN]-1659858913494
80818745
GPR[ESUN]-1659858913612
GPR[SSUN]-1659858913612
80818745
GPR[SPVATF]-1659858913732
GPR[EPVATF]-1659858914117
GPR[SPS]-1659858914117
[824478] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.Title:396.
GPR[EPS]-1659858914404
GPR[ESUN]-1659858914404
GPR[SSUN]-1659858914405
80818745
GPR[ESUN]-1659858914524
GPR[SSUN]-1659858914524
80818745
GPR[SPVATF]-1659858914645
GPR[EPVATF]-1659858915032
GPR[SPS]-1659858915032
[825396] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.Title:394.
GPR[EPS]-1659858915322
GPR[SPVATF]-1659858915322
GPR[EPVATF]-1659858915703
GPR[SPS]-1659858915703
[826065] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.title.Title:394.
GPR[EPS]-1659858915991
GPR[ESUN]-1659858915991
GPR[SSUN]-1659858915991
2490626
GPR[ESUN]-1659858916161
GPR[SSUN]-1659858916161
2490626
GPR[SPVATF]-1659858916326
GPR[EPVATF]-1659858916710
GPR[SPS]-1659858916710
[827142] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:940.
GPR[EPS]-1659858917068
GPR[ESUN]-1659858917068
GPR[SSUN]-1659858917068
-1522070587
GPR[ESUN]-1659858917198
GPR[SSUN]-1659858917198
-417399974
GPR[SPVATF]-1659858917407
GPR[EPVATF]-1659858917792
GPR[SPS]-1659858917792
[828253] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:896.
GPR[EPS]-1659858918179
GPR[ESUN]-1659858918179
GPR[SSUN]-1659858918179
-1690918013
GPR[ESUN]-1659858918439
GPR[SSUN]-1659858918439
-417399974
GPR[SPVATF]-1659858918646
GPR[EPVATF]-1659858918956
GPR[SPS]-1659858918956
[829418] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:895.
GPR[EPS]-1659858919344
GPR[SPVATF]-1659858919345
GPR[EPVATF]-1659858919652
GPR[SPS]-1659858919652
[830114] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:895.
GPR[EPS]-1659858920040
GPR[ESUN]-1659858920040
GPR[SSUN]-1659858920040
-417399974
GPR[SPVATF]-1659858920275
GPR[EPVATF]-1659858920589
GPR[SPS]-1659858920589
[831049] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:893.
GPR[EPS]-1659858920975
GPR[ESUN]-1659858920975
GPR[SSUN]-1659858920975
-417399974
GPR[SPVATF]-1659858921184
GPR[EPVATF]-1659858921497
GPR[SPS]-1659858921497
[831963] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:892.
GPR[EPS]-1659858921889
GPR[SPVATF]-1659858921889
GPR[EPVATF]-1659858922207
GPR[SPS]-1659858922207
[832668] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:892.
GPR[EPS]-1659858922594
GPR[ESUN]-1659858922594
GPR[SSUN]-1659858922594
-417399974
GPR[ESUN]-1659858922804
GPR[SSUN]-1659858922804
-417399974
GPR[ESUN]-1659858923012
GPR[SSUN]-1659858923012
-417399974
GPR[ESUN]-1659858923220
GPR[SSUN]-1659858923220
-597949146
GPR[SPVATF]-1659858923319
GPR[EPVATF]-1659858923557
GPR[SPS]-1659858923557
[833870] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.RectangleInsets:192.
GPR[EPS]-1659858923796
GPR[ESUN]-1659858923796
GPR[SSUN]-1659858923796
1355738515
GPR[SPVATF]-1659858923934
GPR[EPVATF]-1659858924246
GPR[SPS]-1659858924246
[834611] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:1458.
GPR[EPS]-1659858924537
GPR[ESUN]-1659858924537
GPR[SSUN]-1659858924537
1355738515
GPR[ESUN]-1659858924677
GPR[SSUN]-1659858924677
1355738515
GPR[ESUN]-1659858924811
GPR[SSUN]-1659858924811
1355738515
GPR[SPVATF]-1659858924945
GPR[EPVATF]-1659858925257
GPR[SPS]-1659858925257
[835706] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:918.
GPR[EPS]-1659858925632
GPR[ESUN]-1659858925632
GPR[SSUN]-1659858925632
1355738515
GPR[SPVATF]-1659858925771
GPR[EPVATF]-1659858926087
GPR[SPS]-1659858926087
[836450] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:912.
GPR[EPS]-1659858926376
GPR[SPVATF]-1659858926376
GPR[EPVATF]-1659858926687
GPR[SPS]-1659858926687
[837046] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:912.
GPR[EPS]-1659858926972
GPR[ESUN]-1659858926972
GPR[SSUN]-1659858926972
1355738515
GPR[ESUN]-1659858927109
GPR[SSUN]-1659858927109
1355738515
GPR[SPVATF]-1659858927250
GPR[EPVATF]-1659858927565
GPR[SPS]-1659858927565
[837930] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:908.
GPR[EPS]-1659858927856
GPR[SPVATF]-1659858927856
GPR[EPVATF]-1659858928164
GPR[SPS]-1659858928164
[838533] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:908.
GPR[EPS]-1659858928459
GPR[ESUN]-1659858928459
GPR[SSUN]-1659858928459
-417399974
GPR[SPVATF]-1659858928675
GPR[EPVATF]-1659858928995
GPR[SPS]-1659858928995
[839372] ERROR ConstraintModelBuilder - Unable to compile the change: 
public abstract class AbstractXYItemRenderer extends org.jfree.chart.renderer.AbstractRenderer implements org.jfree.chart.renderer.xy.XYItemRenderer , java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 8019124836026607990L;

    private org.jfree.chart.plot.XYPlot plot;

    private org.jfree.chart.util.ObjectList itemLabelGeneratorList;

    private org.jfree.chart.labels.XYItemLabelGenerator baseItemLabelGenerator;

    private org.jfree.chart.util.ObjectList toolTipGeneratorList;

    private org.jfree.chart.labels.XYToolTipGenerator baseToolTipGenerator;

    private org.jfree.chart.util.ObjectList urlGeneratorList;

    private org.jfree.chart.urls.XYURLGenerator baseURLGenerator;

    private java.util.List backgroundAnnotations;

    private java.util.List foregroundAnnotations;

    private org.jfree.chart.labels.XYSeriesLabelGenerator legendItemLabelGenerator;

    private org.jfree.chart.labels.XYSeriesLabelGenerator legendItemToolTipGenerator;

    private org.jfree.chart.labels.XYSeriesLabelGenerator legendItemURLGenerator;

    protected AbstractXYItemRenderer() {
        super();
        this.itemLabelGeneratorList = new org.jfree.chart.util.ObjectList();
        this.toolTipGeneratorList = new org.jfree.chart.util.ObjectList();
        this.urlGeneratorList = new org.jfree.chart.util.ObjectList();
        this.baseURLGenerator = null;
        this.backgroundAnnotations = new java.util.ArrayList();
        this.foregroundAnnotations = new java.util.ArrayList();
        this.legendItemLabelGenerator = new org.jfree.chart.labels.StandardXYSeriesLabelGenerator("{0}");
    }

    public int getPassCount() {
        return 1;
    }

    public org.jfree.chart.plot.XYPlot getPlot() {
        return this.plot;
    }

    public void setPlot(org.jfree.chart.plot.XYPlot plot) {
        this.plot = plot;
    }

    public org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.XYPlot plot, org.jfree.data.xy.XYDataset data, org.jfree.chart.plot.PlotRenderingInfo info) {
        org.jfree.chart.renderer.xy.XYItemRendererState state = new org.jfree.chart.renderer.xy.XYItemRendererState(info);
        return state;
    }

    public org.jfree.chart.labels.XYItemLabelGenerator getItemLabelGenerator(int series, int item, boolean selected) {
        org.jfree.chart.labels.XYItemLabelGenerator generator = ((org.jfree.chart.labels.XYItemLabelGenerator) (this.itemLabelGeneratorList.get(series)));
        if (generator == null) {
            generator = this.baseItemLabelGenerator;
        }
        return generator;
    }

    public org.jfree.chart.labels.XYItemLabelGenerator getSeriesItemLabelGenerator(int series) {
        return ((org.jfree.chart.labels.XYItemLabelGenerator) (this.itemLabelGeneratorList.get(series)));
    }

    public void setSeriesItemLabelGenerator(int series, org.jfree.chart.labels.XYItemLabelGenerator generator) {
        this.itemLabelGeneratorList.set(series, generator);
        fireChangeEvent();
    }

    public void setSeriesItemLabelGenerator(int series, org.jfree.chart.labels.XYItemLabelGenerator generator, boolean notify) {
        this.itemLabelGeneratorList.set(series, generator);
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.labels.XYItemLabelGenerator getBaseItemLabelGenerator() {
        return this.baseItemLabelGenerator;
    }

    public void setBaseItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator generator) {
        setBaseItemLabelGenerator(generator, true);
    }

    public void setBaseItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator generator, boolean notify) {
        this.baseItemLabelGenerator = generator;
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.labels.XYToolTipGenerator getToolTipGenerator(int series, int item, boolean selected) {
        org.jfree.chart.labels.XYToolTipGenerator generator = ((org.jfree.chart.labels.XYToolTipGenerator) (this.toolTipGeneratorList.get(series)));
        if (generator == null) {
            generator = this.baseToolTipGenerator;
        }
        return generator;
    }

    public org.jfree.chart.labels.XYToolTipGenerator getSeriesToolTipGenerator(int series) {
        return ((org.jfree.chart.labels.XYToolTipGenerator) (this.toolTipGeneratorList.get(series)));
    }

    public void setSeriesToolTipGenerator(int series, org.jfree.chart.labels.XYToolTipGenerator generator) {
        setSeriesToolTipGenerator(series, generator, true);
    }

    public void setSeriesToolTipGenerator(int series, org.jfree.chart.labels.XYToolTipGenerator generator, boolean notify) {
        this.toolTipGeneratorList.set(series, generator);
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.labels.XYToolTipGenerator getBaseToolTipGenerator() {
        return this.baseToolTipGenerator;
    }

    public void setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator generator) {
        setBaseToolTipGenerator(generator, true);
    }

    public void setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator generator, boolean notify) {
        this.baseToolTipGenerator = generator;
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.urls.XYURLGenerator getURLGenerator(int series, int item, boolean selected) {
        org.jfree.chart.urls.XYURLGenerator generator = ((org.jfree.chart.urls.XYURLGenerator) (this.urlGeneratorList.get(series)));
        if (generator == null) {
            generator = this.baseURLGenerator;
        }
        return generator;
    }

    public org.jfree.chart.urls.XYURLGenerator getSeriesURLGenerator(int series) {
        return ((org.jfree.chart.urls.XYURLGenerator) (this.urlGeneratorList.get(series)));
    }

    public void setSeriesURLGenerator(int series, org.jfree.chart.urls.XYURLGenerator generator) {
        setSeriesURLGenerator(series, generator, true);
    }

    public void setSeriesURLGenerator(int series, org.jfree.chart.urls.XYURLGenerator generator, boolean notify) {
        this.toolTipGeneratorList.set(series, generator);
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.urls.XYURLGenerator getBaseURLGenerator() {
        return this.baseURLGenerator;
    }

    public void setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator generator) {
        setBaseURLGenerator(generator, true);
    }

    public void setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator generator, boolean notify) {
        this.baseURLGenerator = generator;
        if (notify) {
            fireChangeEvent();
        }
    }

    public void addAnnotation(org.jfree.chart.annotations.XYAnnotation annotation) {
        addAnnotation(annotation, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public void addAnnotation(org.jfree.chart.annotations.XYAnnotation annotation, org.jfree.chart.util.Layer layer) {
        if (annotation == null) {
            throw new java.lang.IllegalArgumentException("Null 'annotation' argument.");
        }
        if (layer.equals(org.jfree.chart.util.Layer.FOREGROUND)) {
            this.foregroundAnnotations.add(annotation);
            fireChangeEvent();
        } else if (layer.equals(org.jfree.chart.util.Layer.BACKGROUND)) {
            this.backgroundAnnotations.add(annotation);
            fireChangeEvent();
        } else {
            throw new java.lang.RuntimeException("Unknown layer.");
        }
    }

    public boolean removeAnnotation(org.jfree.chart.annotations.XYAnnotation annotation) {
        boolean removed = this.foregroundAnnotations.remove(annotation);
        removed = removed & this.backgroundAnnotations.remove(annotation);
        fireChangeEvent();
        return removed;
    }

    public void removeAnnotations() {
        this.foregroundAnnotations.clear();
        this.backgroundAnnotations.clear();
        fireChangeEvent();
    }

    public java.util.Collection getAnnotations() {
        java.util.List result = new java.util.ArrayList(this.foregroundAnnotations);
        result.addAll(this.backgroundAnnotations);
        return result;
    }

    public org.jfree.chart.labels.XYSeriesLabelGenerator getLegendItemLabelGenerator() {
        return this.legendItemLabelGenerator;
    }

    public void setLegendItemLabelGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator generator) {
        if (generator == null) {
            throw new java.lang.IllegalArgumentException("Null 'generator' argument.");
        }
        this.legendItemLabelGenerator = generator;
        fireChangeEvent();
    }

    public org.jfree.chart.labels.XYSeriesLabelGenerator getLegendItemToolTipGenerator() {
        return this.legendItemToolTipGenerator;
    }

    public void setLegendItemToolTipGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator generator) {
        this.legendItemToolTipGenerator = generator;
        fireChangeEvent();
    }

    public org.jfree.chart.labels.XYSeriesLabelGenerator getLegendItemURLGenerator() {
        return this.legendItemURLGenerator;
    }

    public void setLegendItemURLGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator generator) {
        this.legendItemURLGenerator = generator;
        fireChangeEvent();
    }

    public org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset dataset) {
        return findDomainBounds(dataset, false);
    }

    protected org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset dataset, boolean includeInterval) {
        if (dataset == null) {
            return null;
        }
        if (getDataBoundsIncludesVisibleSeriesOnly()) {
            java.util.List visibleSeriesKeys = new java.util.ArrayList();
            int seriesCount = dataset.getSeriesCount();
            for (int s = 0; s < seriesCount; s++) {
                if (isSeriesVisible(s)) {
                    visibleSeriesKeys.add(dataset.getSeriesKey(s));
                }
            }
            return org.jfree.data.general.DatasetUtilities.findDomainBounds(dataset, visibleSeriesKeys, includeInterval);
        } else {
            return org.jfree.data.general.DatasetUtilities.findDomainBounds(dataset, includeInterval);
        }
    }

    public org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset dataset) {
        return findRangeBounds(dataset, false);
    }

    protected org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset dataset, boolean includeInterval) {
        if (dataset == null) {
            return null;
        }
        if (getDataBoundsIncludesVisibleSeriesOnly()) {
            java.util.List visibleSeriesKeys = new java.util.ArrayList();
            int seriesCount = dataset.getSeriesCount();
            for (int s = 0; s < seriesCount; s++) {
                if (isSeriesVisible(s)) {
                    visibleSeriesKeys.add(dataset.getSeriesKey(s));
                }
            }
            org.jfree.data.Range xRange = null;
            org.jfree.chart.plot.XYPlot p = getPlot();
            if (p != null) {
                org.jfree.chart.axis.ValueAxis xAxis = null;
                int index = p.getIndexOf(this);
                if (index >= 0) {
                    xAxis = plot.getDomainAxisForDataset(index);
                }
                if (xAxis != null) {
                    xRange = xAxis.getRange();
                }
            }
            if (xRange == null) {
                xRange = new org.jfree.data.Range(java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY);
            }
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(820).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(820).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(820).collectInput("org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.baseItemLabelGenerator",org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.baseItemLabelGenerator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(820).collectInput("org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.plot",org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.plot);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(820).collectInput("org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.legendItemToolTipGenerator",org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.legendItemToolTipGenerator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(820).collectInput("org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.legendItemURLGenerator",org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.legendItemURLGenerator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(820).collectInput("visibleSeriesKeys",visibleSeriesKeys);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(820).collectInput("org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.urlGeneratorList",org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.urlGeneratorList);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(820).collectInput("p",p);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(820).collectInput("xRange",xRange);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(820).collectInput("org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.baseURLGenerator",org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.baseURLGenerator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(820).collectInput("includeInterval",includeInterval);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(820).collectInput("org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.itemLabelGeneratorList",org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.itemLabelGeneratorList);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(820).collectInput("org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.foregroundAnnotations",org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.foregroundAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(820).collectInput("org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.legendItemLabelGenerator",org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.legendItemLabelGenerator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(820).collectInput("seriesCount",seriesCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(820).collectInput("org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.backgroundAnnotations",org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.backgroundAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(820).collectInput("org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.baseToolTipGenerator",org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.baseToolTipGenerator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(820).collectInput("org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.toolTipGeneratorList",org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.toolTipGeneratorList);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(820).collectInput("dataset",dataset);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(820).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(820).collectionEnds();
            }
            if (runtimeAngelicValue)
                return org.jfree.data.general.DatasetUtilities.findRangeBounds(dataset, visibleSeriesKeys, xRange, includeInterval);

        } else {
            return org.jfree.data.general.DatasetUtilities.findRangeBounds(dataset, includeInterval);
        }
    }

    public org.jfree.chart.LegendItemCollection getLegendItems() {
        if (this.plot == null) {
            return new org.jfree.chart.LegendItemCollection();
        }
        org.jfree.chart.LegendItemCollection result = new org.jfree.chart.LegendItemCollection();
        int index = this.plot.getIndexOf(this);
        org.jfree.data.xy.XYDataset dataset = this.plot.getDataset(index);
        if (dataset != null) {
            int seriesCount = dataset.getSeriesCount();
            for (int i = 0; i < seriesCount; i++) {
                if (isSeriesVisibleInLegend(i)) {
                    org.jfree.chart.LegendItem item = getLegendItem(index, i);
                    if (item != null) {
                        result.add(item);
                    }
                }
            }
        }
        return result;
    }

    public org.jfree.chart.LegendItem getLegendItem(int datasetIndex, int series) {
        org.jfree.chart.plot.XYPlot xyplot = getPlot();
        if (xyplot == null) {
            return null;
        }
        org.jfree.data.xy.XYDataset dataset = xyplot.getDataset(datasetIndex);
        if (dataset == null) {
            return null;
        }
        java.lang.String label = this.legendItemLabelGenerator.generateLabel(dataset, series);
        java.lang.String description = label;
        java.lang.String toolTipText = null;
        if (getLegendItemToolTipGenerator() != null) {
            toolTipText = getLegendItemToolTipGenerator().generateLabel(dataset, series);
        }
        java.lang.String urlText = null;
        if (getLegendItemURLGenerator() != null) {
            urlText = getLegendItemURLGenerator().generateLabel(dataset, series);
        }
        java.awt.Shape shape = lookupLegendShape(series);
        java.awt.Paint paint = lookupSeriesPaint(series);
        org.jfree.chart.LegendItem item = new org.jfree.chart.LegendItem(label, paint);
        item.setToolTipText(toolTipText);
        item.setURLText(urlText);
        item.setLabelFont(lookupLegendTextFont(series));
        java.awt.Paint labelPaint = lookupLegendTextPaint(series);
        if (labelPaint != null) {
            item.setLabelPaint(labelPaint);
        }
        item.setSeriesKey(dataset.getSeriesKey(series));
        item.setSeriesIndex(series);
        item.setDataset(dataset);
        item.setDatasetIndex(datasetIndex);
        if (getTreatLegendShapeAsLine()) {
            item.setLineVisible(true);
            item.setLine(shape);
            item.setLinePaint(paint);
            item.setShapeVisible(false);
        } else {
            java.awt.Paint outlinePaint = lookupSeriesOutlinePaint(series);
            java.awt.Stroke outlineStroke = lookupSeriesOutlineStroke(series);
            item.setOutlinePaint(outlinePaint);
            item.setOutlineStroke(outlineStroke);
        }
        return item;
    }

    public void fillDomainGridBand(java.awt.Graphics2D g2, org.jfree.chart.plot.XYPlot plot, org.jfree.chart.axis.ValueAxis axis, java.awt.geom.Rectangle2D dataArea, double start, double end) {
        double x1 = axis.valueToJava2D(start, dataArea, plot.getDomainAxisEdge());
        double x2 = axis.valueToJava2D(end, dataArea, plot.getDomainAxisEdge());
        java.awt.geom.Rectangle2D band;
        if (plot.getOrientation() == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
            band = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(x1, x2), dataArea.getMinY(), java.lang.Math.abs(x2 - x1), dataArea.getWidth());
        } else {
            band = new java.awt.geom.Rectangle2D.Double(dataArea.getMinX(), java.lang.Math.min(x1, x2), dataArea.getWidth(), java.lang.Math.abs(x2 - x1));
        }
        java.awt.Paint paint = plot.getDomainTickBandPaint();
        if (paint != null) {
            g2.setPaint(paint);
            g2.fill(band);
        }
    }

    public void fillRangeGridBand(java.awt.Graphics2D g2, org.jfree.chart.plot.XYPlot plot, org.jfree.chart.axis.ValueAxis axis, java.awt.geom.Rectangle2D dataArea, double start, double end) {
        double y1 = axis.valueToJava2D(start, dataArea, plot.getRangeAxisEdge());
        double y2 = axis.valueToJava2D(end, dataArea, plot.getRangeAxisEdge());
        java.awt.geom.Rectangle2D band;
        if (plot.getOrientation() == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
            band = new java.awt.geom.Rectangle2D.Double(dataArea.getMinX(), java.lang.Math.min(y1, y2), dataArea.getWidth(), java.lang.Math.abs(y2 - y1));
        } else {
            band = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(y1, y2), dataArea.getMinY(), java.lang.Math.abs(y2 - y1), dataArea.getHeight());
        }
        java.awt.Paint paint = plot.getRangeTickBandPaint();
        if (paint != null) {
            g2.setPaint(paint);
            g2.fill(band);
        }
    }

    public void drawDomainGridLine(java.awt.Graphics2D g2, org.jfree.chart.plot.XYPlot plot, org.jfree.chart.axis.ValueAxis axis, java.awt.geom.Rectangle2D dataArea, double value) {
        org.jfree.data.Range range = axis.getRange();
        if (!range.contains(value)) {
            return;
        }
        org.jfree.chart.plot.PlotOrientation orientation = plot.getOrientation();
        double v = axis.valueToJava2D(value, dataArea, plot.getDomainAxisEdge());
        java.awt.geom.Line2D line = null;
        if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v);
        } else if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
            line = new java.awt.geom.Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY());
        }
        java.awt.Paint paint = plot.getDomainGridlinePaint();
        java.awt.Stroke stroke = plot.getDomainGridlineStroke();
        g2.setPaint(paint != null ? paint : org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT);
        g2.setStroke(stroke != null ? stroke : org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE);
        g2.draw(line);
    }

    public void drawDomainLine(java.awt.Graphics2D g2, org.jfree.chart.plot.XYPlot plot, org.jfree.chart.axis.ValueAxis axis, java.awt.geom.Rectangle2D dataArea, double value, java.awt.Paint paint, java.awt.Stroke stroke) {
        org.jfree.data.Range range = axis.getRange();
        if (!range.contains(value)) {
            return;
        }
        org.jfree.chart.plot.PlotOrientation orientation = plot.getOrientation();
        java.awt.geom.Line2D line = null;
        double v = axis.valueToJava2D(value, dataArea, plot.getDomainAxisEdge());
        if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v);
        } else if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
            line = new java.awt.geom.Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY());
        }
        g2.setPaint(paint);
        g2.setStroke(stroke);
        g2.draw(line);
    }

    public void drawRangeLine(java.awt.Graphics2D g2, org.jfree.chart.plot.XYPlot plot, org.jfree.chart.axis.ValueAxis axis, java.awt.geom.Rectangle2D dataArea, double value, java.awt.Paint paint, java.awt.Stroke stroke) {
        org.jfree.data.Range range = axis.getRange();
        if (!range.contains(value)) {
            return;
        }
        org.jfree.chart.plot.PlotOrientation orientation = plot.getOrientation();
        java.awt.geom.Line2D line = null;
        double v = axis.valueToJava2D(value, dataArea, plot.getRangeAxisEdge());
        if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            line = new java.awt.geom.Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY());
        } else if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
            line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v);
        }
        g2.setPaint(paint);
        g2.setStroke(stroke);
        g2.draw(line);
    }

    public void drawDomainMarker(java.awt.Graphics2D g2, org.jfree.chart.plot.XYPlot plot, org.jfree.chart.axis.ValueAxis domainAxis, org.jfree.chart.plot.Marker marker, java.awt.geom.Rectangle2D dataArea) {
        if (marker instanceof org.jfree.chart.plot.ValueMarker) {
            org.jfree.chart.plot.ValueMarker vm = ((org.jfree.chart.plot.ValueMarker) (marker));
            double value = vm.getValue();
            org.jfree.data.Range range = domainAxis.getRange();
            if (!range.contains(value)) {
                return;
            }
            double v = domainAxis.valueToJava2D(value, dataArea, plot.getDomainAxisEdge());
            org.jfree.chart.plot.PlotOrientation orientation = plot.getOrientation();
            java.awt.geom.Line2D line = null;
            if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v);
            } else if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                line = new java.awt.geom.Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY());
            }
            final java.awt.Composite originalComposite = g2.getComposite();
            g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, marker.getAlpha()));
            g2.setPaint(marker.getPaint());
            g2.setStroke(marker.getStroke());
            g2.draw(line);
            java.lang.String label = marker.getLabel();
            org.jfree.chart.util.RectangleAnchor anchor = marker.getLabelAnchor();
            if (label != null) {
                java.awt.Font labelFont = marker.getLabelFont();
                g2.setFont(labelFont);
                g2.setPaint(marker.getLabelPaint());
                java.awt.geom.Point2D coordinates = calculateDomainMarkerTextAnchorPoint(g2, orientation, dataArea, line.getBounds2D(), marker.getLabelOffset(), org.jfree.chart.util.LengthAdjustmentType.EXPAND, anchor);
                org.jfree.chart.text.TextUtilities.drawAlignedString(label, g2, ((float) (coordinates.getX())), ((float) (coordinates.getY())), marker.getLabelTextAnchor());
            }
            g2.setComposite(originalComposite);
        } else if (marker instanceof org.jfree.chart.plot.IntervalMarker) {
            org.jfree.chart.plot.IntervalMarker im = ((org.jfree.chart.plot.IntervalMarker) (marker));
            double start = im.getStartValue();
            double end = im.getEndValue();
            org.jfree.data.Range range = domainAxis.getRange();
            if (!range.intersects(start, end)) {
                return;
            }
            double start2d = domainAxis.valueToJava2D(start, dataArea, plot.getDomainAxisEdge());
            double end2d = domainAxis.valueToJava2D(end, dataArea, plot.getDomainAxisEdge());
            double low = java.lang.Math.min(start2d, end2d);
            double high = java.lang.Math.max(start2d, end2d);
            org.jfree.chart.plot.PlotOrientation orientation = plot.getOrientation();
            java.awt.geom.Rectangle2D rect = null;
            if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                low = java.lang.Math.max(low, dataArea.getMinY());
                high = java.lang.Math.min(high, dataArea.getMaxY());
                rect = new java.awt.geom.Rectangle2D.Double(dataArea.getMinX(), low, dataArea.getWidth(), high - low);
            } else if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                low = java.lang.Math.max(low, dataArea.getMinX());
                high = java.lang.Math.min(high, dataArea.getMaxX());
                rect = new java.awt.geom.Rectangle2D.Double(low, dataArea.getMinY(), high - low, dataArea.getHeight());
            }
            final java.awt.Composite originalComposite = g2.getComposite();
            g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, marker.getAlpha()));
            java.awt.Paint p = marker.getPaint();
            if (p instanceof java.awt.GradientPaint) {
                java.awt.GradientPaint gp = ((java.awt.GradientPaint) (p));
                org.jfree.chart.util.GradientPaintTransformer t = im.getGradientPaintTransformer();
                if (t != null) {
                    gp = t.transform(gp, rect);
                }
                g2.setPaint(gp);
            } else {
                g2.setPaint(p);
            }
            g2.fill(rect);
            if ((im.getOutlinePaint() != null) && (im.getOutlineStroke() != null)) {
                if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    java.awt.geom.Line2D line = new java.awt.geom.Line2D.Double();
                    double y0 = dataArea.getMinY();
                    double y1 = dataArea.getMaxY();
                    g2.setPaint(im.getOutlinePaint());
                    g2.setStroke(im.getOutlineStroke());
                    if (range.contains(start)) {
                        line.setLine(start2d, y0, start2d, y1);
                        g2.draw(line);
                    }
                    if (range.contains(end)) {
                        line.setLine(end2d, y0, end2d, y1);
                        g2.draw(line);
                    }
                } else {
                    java.awt.geom.Line2D line = new java.awt.geom.Line2D.Double();
                    double x0 = dataArea.getMinX();
                    double x1 = dataArea.getMaxX();
                    g2.setPaint(im.getOutlinePaint());
                    g2.setStroke(im.getOutlineStroke());
                    if (range.contains(start)) {
                        line.setLine(x0, start2d, x1, start2d);
                        g2.draw(line);
                    }
                    if (range.contains(end)) {
                        line.setLine(x0, end2d, x1, end2d);
                        g2.draw(line);
                    }
                }
            }
            java.lang.String label = marker.getLabel();
            org.jfree.chart.util.RectangleAnchor anchor = marker.getLabelAnchor();
            if (label != null) {
                java.awt.Font labelFont = marker.getLabelFont();
                g2.setFont(labelFont);
                g2.setPaint(marker.getLabelPaint());
                java.awt.geom.Point2D coordinates = calculateDomainMarkerTextAnchorPoint(g2, orientation, dataArea, rect, marker.getLabelOffset(), marker.getLabelOffsetType(), anchor);
                org.jfree.chart.text.TextUtilities.drawAlignedString(label, g2, ((float) (coordinates.getX())), ((float) (coordinates.getY())), marker.getLabelTextAnchor());
            }
            g2.setComposite(originalComposite);
        }
    }

    protected java.awt.geom.Point2D calculateDomainMarkerTextAnchorPoint(java.awt.Graphics2D g2, org.jfree.chart.plot.PlotOrientation orientation, java.awt.geom.Rectangle2D dataArea, java.awt.geom.Rectangle2D markerArea, org.jfree.chart.util.RectangleInsets markerOffset, org.jfree.chart.util.LengthAdjustmentType labelOffsetType, org.jfree.chart.util.RectangleAnchor anchor) {
        java.awt.geom.Rectangle2D anchorRect = null;
        if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            anchorRect = markerOffset.createAdjustedRectangle(markerArea, org.jfree.chart.util.LengthAdjustmentType.CONTRACT, labelOffsetType);
        } else if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
            anchorRect = markerOffset.createAdjustedRectangle(markerArea, labelOffsetType, org.jfree.chart.util.LengthAdjustmentType.CONTRACT);
        }
        return org.jfree.chart.util.RectangleAnchor.coordinates(anchorRect, anchor);
    }

    public void drawRangeMarker(java.awt.Graphics2D g2, org.jfree.chart.plot.XYPlot plot, org.jfree.chart.axis.ValueAxis rangeAxis, org.jfree.chart.plot.Marker marker, java.awt.geom.Rectangle2D dataArea) {
        if (marker instanceof org.jfree.chart.plot.ValueMarker) {
            org.jfree.chart.plot.ValueMarker vm = ((org.jfree.chart.plot.ValueMarker) (marker));
            double value = vm.getValue();
            org.jfree.data.Range range = rangeAxis.getRange();
            if (!range.contains(value)) {
                return;
            }
            double v = rangeAxis.valueToJava2D(value, dataArea, plot.getRangeAxisEdge());
            org.jfree.chart.plot.PlotOrientation orientation = plot.getOrientation();
            java.awt.geom.Line2D line = null;
            if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                line = new java.awt.geom.Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY());
            } else if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v);
            }
            final java.awt.Composite originalComposite = g2.getComposite();
            g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, marker.getAlpha()));
            g2.setPaint(marker.getPaint());
            g2.setStroke(marker.getStroke());
            g2.draw(line);
            java.lang.String label = marker.getLabel();
            org.jfree.chart.util.RectangleAnchor anchor = marker.getLabelAnchor();
            if (label != null) {
                java.awt.Font labelFont = marker.getLabelFont();
                g2.setFont(labelFont);
                g2.setPaint(marker.getLabelPaint());
                java.awt.geom.Point2D coordinates = calculateRangeMarkerTextAnchorPoint(g2, orientation, dataArea, line.getBounds2D(), marker.getLabelOffset(), org.jfree.chart.util.LengthAdjustmentType.EXPAND, anchor);
                org.jfree.chart.text.TextUtilities.drawAlignedString(label, g2, ((float) (coordinates.getX())), ((float) (coordinates.getY())), marker.getLabelTextAnchor());
            }
            g2.setComposite(originalComposite);
        } else if (marker instanceof org.jfree.chart.plot.IntervalMarker) {
            org.jfree.chart.plot.IntervalMarker im = ((org.jfree.chart.plot.IntervalMarker) (marker));
            double start = im.getStartValue();
            double end = im.getEndValue();
            org.jfree.data.Range range = rangeAxis.getRange();
            if (!range.intersects(start, end)) {
                return;
            }
            double start2d = rangeAxis.valueToJava2D(start, dataArea, plot.getRangeAxisEdge());
            double end2d = rangeAxis.valueToJava2D(end, dataArea, plot.getRangeAxisEdge());
            double low = java.lang.Math.min(start2d, end2d);
            double high = java.lang.Math.max(start2d, end2d);
            org.jfree.chart.plot.PlotOrientation orientation = plot.getOrientation();
            java.awt.geom.Rectangle2D rect = null;
            if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                low = java.lang.Math.max(low, dataArea.getMinX());
                high = java.lang.Math.min(high, dataArea.getMaxX());
                rect = new java.awt.geom.Rectangle2D.Double(low, dataArea.getMinY(), high - low, dataArea.getHeight());
            } else if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                low = java.lang.Math.max(low, dataArea.getMinY());
                high = java.lang.Math.min(high, dataArea.getMaxY());
                rect = new java.awt.geom.Rectangle2D.Double(dataArea.getMinX(), low, dataArea.getWidth(), high - low);
            }
            final java.awt.Composite originalComposite = g2.getComposite();
            g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, marker.getAlpha()));
            java.awt.Paint p = marker.getPaint();
            if (p instanceof java.awt.GradientPaint) {
                java.awt.GradientPaint gp = ((java.awt.GradientPaint) (p));
                org.jfree.chart.util.GradientPaintTransformer t = im.getGradientPaintTransformer();
                if (t != null) {
                    gp = t.transform(gp, rect);
                }
                g2.setPaint(gp);
            } else {
                g2.setPaint(p);
            }
            g2.fill(rect);
            if ((im.getOutlinePaint() != null) && (im.getOutlineStroke() != null)) {
                if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    java.awt.geom.Line2D line = new java.awt.geom.Line2D.Double();
                    double x0 = dataArea.getMinX();
                    double x1 = dataArea.getMaxX();
                    g2.setPaint(im.getOutlinePaint());
                    g2.setStroke(im.getOutlineStroke());
                    if (range.contains(start)) {
                        line.setLine(x0, start2d, x1, start2d);
                        g2.draw(line);
                    }
                    if (range.contains(end)) {
                        line.setLine(x0, end2d, x1, end2d);
                        g2.draw(line);
                    }
                } else {
                    java.awt.geom.Line2D line = new java.awt.geom.Line2D.Double();
                    double y0 = dataArea.getMinY();
                    double y1 = dataArea.getMaxY();
                    g2.setPaint(im.getOutlinePaint());
                    g2.setStroke(im.getOutlineStroke());
                    if (range.contains(start)) {
                        line.setLine(start2d, y0, start2d, y1);
                        g2.draw(line);
                    }
                    if (range.contains(end)) {
                        line.setLine(end2d, y0, end2d, y1);
                        g2.draw(line);
                    }
                }
            }
            java.lang.String label = marker.getLabel();
            org.jfree.chart.util.RectangleAnchor anchor = marker.getLabelAnchor();
            if (label != null) {
                java.awt.Font labelFont = marker.getLabelFont();
                g2.setFont(labelFont);
                g2.setPaint(marker.getLabelPaint());
                java.awt.geom.Point2D coordinates = calculateRangeMarkerTextAnchorPoint(g2, orientation, dataArea, rect, marker.getLabelOffset(), marker.getLabelOffsetType(), anchor);
                org.jfree.chart.text.TextUtilities.drawAlignedString(label, g2, ((float) (coordinates.getX())), ((float) (coordinates.getY())), marker.getLabelTextAnchor());
            }
            g2.setComposite(originalComposite);
        }
    }

    private java.awt.geom.Point2D calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D g2, org.jfree.chart.plot.PlotOrientation orientation, java.awt.geom.Rectangle2D dataArea, java.awt.geom.Rectangle2D markerArea, org.jfree.chart.util.RectangleInsets markerOffset, org.jfree.chart.util.LengthAdjustmentType labelOffsetForRange, org.jfree.chart.util.RectangleAnchor anchor) {
        java.awt.geom.Rectangle2D anchorRect = null;
        if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            anchorRect = markerOffset.createAdjustedRectangle(markerArea, labelOffsetForRange, org.jfree.chart.util.LengthAdjustmentType.CONTRACT);
        } else if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
            anchorRect = markerOffset.createAdjustedRectangle(markerArea, org.jfree.chart.util.LengthAdjustmentType.CONTRACT, labelOffsetForRange);
        }
        return org.jfree.chart.util.RectangleAnchor.coordinates(anchorRect, anchor);
    }

    protected java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.chart.renderer.xy.AbstractXYItemRenderer clone = ((org.jfree.chart.renderer.xy.AbstractXYItemRenderer) (super.clone()));
        clone.itemLabelGeneratorList = ((org.jfree.chart.util.ObjectList) (this.itemLabelGeneratorList.clone()));
        if ((this.baseItemLabelGenerator != null) && (this.baseItemLabelGenerator instanceof org.jfree.chart.util.PublicCloneable)) {
            org.jfree.chart.util.PublicCloneable pc = ((org.jfree.chart.util.PublicCloneable) (this.baseItemLabelGenerator));
            clone.baseItemLabelGenerator = ((org.jfree.chart.labels.XYItemLabelGenerator) (pc.clone()));
        }
        clone.toolTipGeneratorList = ((org.jfree.chart.util.ObjectList) (this.toolTipGeneratorList.clone()));
        if ((this.baseToolTipGenerator != null) && (this.baseToolTipGenerator instanceof org.jfree.chart.util.PublicCloneable)) {
            org.jfree.chart.util.PublicCloneable pc = ((org.jfree.chart.util.PublicCloneable) (this.baseToolTipGenerator));
            clone.baseToolTipGenerator = ((org.jfree.chart.labels.XYToolTipGenerator) (pc.clone()));
        }
        if (clone.legendItemLabelGenerator instanceof org.jfree.chart.util.PublicCloneable) {
            clone.legendItemLabelGenerator = ((org.jfree.chart.labels.XYSeriesLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendItemLabelGenerator)));
        }
        if (clone.legendItemToolTipGenerator instanceof org.jfree.chart.util.PublicCloneable) {
            clone.legendItemToolTipGenerator = ((org.jfree.chart.labels.XYSeriesLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendItemToolTipGenerator)));
        }
        if (clone.legendItemURLGenerator instanceof org.jfree.chart.util.PublicCloneable) {
            clone.legendItemURLGenerator = ((org.jfree.chart.labels.XYSeriesLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendItemURLGenerator)));
        }
        clone.foregroundAnnotations = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.foregroundAnnotations)));
        clone.backgroundAnnotations = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.backgroundAnnotations)));
        if (clone.legendItemLabelGenerator instanceof org.jfree.chart.util.PublicCloneable) {
            clone.legendItemLabelGenerator = ((org.jfree.chart.labels.XYSeriesLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendItemLabelGenerator)));
        }
        if (clone.legendItemToolTipGenerator instanceof org.jfree.chart.util.PublicCloneable) {
            clone.legendItemToolTipGenerator = ((org.jfree.chart.labels.XYSeriesLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendItemToolTipGenerator)));
        }
        if (clone.legendItemURLGenerator instanceof org.jfree.chart.util.PublicCloneable) {
            clone.legendItemURLGenerator = ((org.jfree.chart.labels.XYSeriesLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendItemURLGenerator)));
        }
        return clone;
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.renderer.xy.AbstractXYItemRenderer)) {
            return false;
        }
        org.jfree.chart.renderer.xy.AbstractXYItemRenderer that = ((org.jfree.chart.renderer.xy.AbstractXYItemRenderer) (obj));
        if (!this.itemLabelGeneratorList.equals(that.itemLabelGeneratorList)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.baseItemLabelGenerator, that.baseItemLabelGenerator)) {
            return false;
        }
        if (!this.toolTipGeneratorList.equals(that.toolTipGeneratorList)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.baseToolTipGenerator, that.baseToolTipGenerator)) {
            return false;
        }
        if (!this.urlGeneratorList.equals(that.urlGeneratorList)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.baseURLGenerator, that.baseURLGenerator)) {
            return false;
        }
        if (!this.foregroundAnnotations.equals(that.foregroundAnnotations)) {
            return false;
        }
        if (!this.backgroundAnnotations.equals(that.backgroundAnnotations)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendItemLabelGenerator, that.legendItemLabelGenerator)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendItemToolTipGenerator, that.legendItemToolTipGenerator)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendItemURLGenerator, that.legendItemURLGenerator)) {
            return false;
        }
        return super.equals(obj);
    }

    public org.jfree.chart.plot.DrawingSupplier getDrawingSupplier() {
        org.jfree.chart.plot.DrawingSupplier result = null;
        org.jfree.chart.plot.XYPlot p = getPlot();
        if (p != null) {
            result = p.getDrawingSupplier();
        }
        return result;
    }

    protected void updateCrosshairValues(org.jfree.chart.plot.CrosshairState crosshairState, double x, double y, int domainAxisIndex, int rangeAxisIndex, double transX, double transY, org.jfree.chart.plot.PlotOrientation orientation) {
        if (orientation == null) {
            throw new java.lang.IllegalArgumentException("Null 'orientation' argument.");
        }
        if (crosshairState != null) {
            if (this.plot.isDomainCrosshairLockedOnData()) {
                if (this.plot.isRangeCrosshairLockedOnData()) {
                    crosshairState.updateCrosshairPoint(x, y, domainAxisIndex, rangeAxisIndex, transX, transY, orientation);
                } else {
                    crosshairState.updateCrosshairX(x, domainAxisIndex);
                }
            } else if (this.plot.isRangeCrosshairLockedOnData()) {
                crosshairState.updateCrosshairY(y, rangeAxisIndex);
            }
        }
    }

    protected void drawItemLabel(java.awt.Graphics2D g2, org.jfree.chart.plot.PlotOrientation orientation, org.jfree.data.xy.XYDataset dataset, int series, int item, boolean selected, double x, double y, boolean negative) {
        org.jfree.chart.labels.XYItemLabelGenerator generator = getItemLabelGenerator(series, item, selected);
        if (generator != null) {
            java.awt.Font labelFont = getItemLabelFont(series, item, selected);
            java.awt.Paint paint = getItemLabelPaint(series, item, selected);
            g2.setFont(labelFont);
            g2.setPaint(paint);
            java.lang.String label = generator.generateLabel(dataset, series, item);
            org.jfree.chart.labels.ItemLabelPosition position = null;
            if (!negative) {
                position = getPositiveItemLabelPosition(series, item, selected);
            } else {
                position = getNegativeItemLabelPosition(series, item, selected);
            }
            java.awt.geom.Point2D anchorPoint = calculateLabelAnchorPoint(position.getItemLabelAnchor(), x, y, orientation);
            org.jfree.chart.text.TextUtilities.drawRotatedString(label, g2, ((float) (anchorPoint.getX())), ((float) (anchorPoint.getY())), position.getTextAnchor(), position.getAngle(), position.getRotationAnchor());
        }
    }

    public void drawAnnotations(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.axis.ValueAxis domainAxis, org.jfree.chart.axis.ValueAxis rangeAxis, org.jfree.chart.util.Layer layer, org.jfree.chart.plot.PlotRenderingInfo info) {
        java.util.Iterator iterator = null;
        if (layer.equals(org.jfree.chart.util.Layer.FOREGROUND)) {
            iterator = this.foregroundAnnotations.iterator();
        } else if (layer.equals(org.jfree.chart.util.Layer.BACKGROUND)) {
            iterator = this.backgroundAnnotations.iterator();
        } else {
            throw new java.lang.RuntimeException("Unknown layer.");
        }
        while (iterator.hasNext()) {
            org.jfree.chart.annotations.XYAnnotation annotation = ((org.jfree.chart.annotations.XYAnnotation) (iterator.next()));
            annotation.draw(g2, this.plot, dataArea, domainAxis, rangeAxis, 0, info);
        } 
    }

    protected void addEntity(org.jfree.chart.entity.EntityCollection entities, java.awt.Shape area, org.jfree.data.xy.XYDataset dataset, int series, int item, boolean selected, double entityX, double entityY) {
        if (!getItemCreateEntity(series, item, selected)) {
            return;
        }
        java.awt.Shape hotspot = area;
        if (hotspot == null) {
            double r = getDefaultEntityRadius();
            double w = r * 2;
            if (getPlot().getOrientation() == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                hotspot = new java.awt.geom.Ellipse2D.Double(entityX - r, entityY - r, w, w);
            } else {
                hotspot = new java.awt.geom.Ellipse2D.Double(entityY - r, entityX - r, w, w);
            }
        }
        java.lang.String tip = null;
        org.jfree.chart.labels.XYToolTipGenerator generator = getToolTipGenerator(series, item, selected);
        if (generator != null) {
            tip = generator.generateToolTip(dataset, series, item);
        }
        java.lang.String url = null;
        org.jfree.chart.urls.XYURLGenerator urlster = getURLGenerator(series, item, selected);
        if (urlster != null) {
            url = urlster.generateURL(dataset, series, item);
        }
        org.jfree.chart.entity.XYItemEntity entity = new org.jfree.chart.entity.XYItemEntity(hotspot, dataset, series, item, tip, url);
        entities.add(entity);
    }
}
[839372] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858929298
GPR[SSUN]-1659858929298
-417399974
GPR[SPVATF]-1659858929513
GPR[EPVATF]-1659858929828
GPR[SPS]-1659858929828
[840298] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:899.
GPR[EPS]-1659858930224
GPR[SPVATF]-1659858930224
GPR[EPVATF]-1659858930540
GPR[SPS]-1659858930540
[841010] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:899.
GPR[EPS]-1659858930936
GPR[ESUN]-1659858930936
GPR[SSUN]-1659858930936
-417399974
GPR[SPVATF]-1659858931151
GPR[EPVATF]-1659858931469
GPR[SPS]-1659858931469
[841933] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:889.
GPR[EPS]-1659858931859
GPR[SPVATF]-1659858931860
GPR[EPVATF]-1659858932174
GPR[SPS]-1659858932174
[842637] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:889.
GPR[EPS]-1659858932563
GPR[ESUN]-1659858932563
GPR[SSUN]-1659858932563
-417399974
GPR[ESUN]-1659858932775
GPR[SSUN]-1659858932775
-417399974
GPR[ESUN]-1659858932983
GPR[SSUN]-1659858932983
-417399974
GPR[SPVATF]-1659858933192
GPR[EPVATF]-1659858933509
GPR[SPS]-1659858933509
[844063] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:880.
GPR[EPS]-1659858933989
GPR[ESUN]-1659858933989
GPR[SSUN]-1659858933989
-417399974
GPR[ESUN]-1659858934200
GPR[SSUN]-1659858934200
-417399974
GPR[ESUN]-1659858934410
GPR[SSUN]-1659858934410
-417399974
GPR[SPVATF]-1659858934619
GPR[EPVATF]-1659858934932
GPR[SPS]-1659858934932
[845395] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:877.
GPR[EPS]-1659858935321
GPR[ESUN]-1659858935321
GPR[SSUN]-1659858935321
-1690918013
GPR[SPVATF]-1659858935585
GPR[EPVATF]-1659858935900
GPR[SPS]-1659858935900
[846442] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1167.
GPR[EPS]-1659858936369
GPR[ESUN]-1659858936369
GPR[SSUN]-1659858936369
2490626
GPR[ESUN]-1659858936539
GPR[SSUN]-1659858936539
2490626
GPR[SPVATF]-1659858936710
GPR[EPVATF]-1659858937098
GPR[SPS]-1659858937098
[847533] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:979.
GPR[EPS]-1659858937459
GPR[ESUN]-1659858937459
GPR[SSUN]-1659858937459
1355738515
GPR[SPVATF]-1659858937603
GPR[EPVATF]-1659858937920
GPR[SPS]-1659858937920
[848278] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:1432.
GPR[EPS]-1659858938204
GPR[SPVATF]-1659858938204
GPR[EPVATF]-1659858938516
GPR[SPS]-1659858938516
[848878] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:1432.
GPR[EPS]-1659858938804
GPR[ESUN]-1659858938804
GPR[SSUN]-1659858938804
1355738515
GPR[SPVATF]-1659858938949
GPR[EPVATF]-1659858939260
GPR[SPS]-1659858939260
[849621] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:1409.
GPR[EPS]-1659858939547
GPR[SPVATF]-1659858939547
GPR[EPVATF]-1659858939854
GPR[SPS]-1659858939854
[850213] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:1409.
GPR[EPS]-1659858940139
GPR[ESUN]-1659858940139
GPR[SSUN]-1659858940139
-417399974
GPR[SPVATF]-1659858940351
GPR[EPVATF]-1659858940664
GPR[SPS]-1659858940664
[851123] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:874.
GPR[EPS]-1659858941049
GPR[SPVATF]-1659858941049
GPR[EPVATF]-1659858941364
GPR[SPS]-1659858941364
[851915] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:874.
GPR[EPS]-1659858941841
GPR[ESUN]-1659858941841
GPR[SSUN]-1659858941841
-1690918013
GPR[ESUN]-1659858942107
GPR[SSUN]-1659858942107
-1690918013
GPR[SPVATF]-1659858942370
GPR[EPVATF]-1659858942685
GPR[SPS]-1659858942685
[853233] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1169.
GPR[EPS]-1659858943159
GPR[SPVATF]-1659858943159
GPR[EPVATF]-1659858943474
GPR[SPS]-1659858943474
[854019] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1169.
GPR[EPS]-1659858943945
GPR[ESUN]-1659858943945
GPR[SSUN]-1659858943945
-1690918013
GPR[SPVATF]-1659858944206
GPR[EPVATF]-1659858944526
GPR[SPS]-1659858944526
[855062] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1166.
GPR[EPS]-1659858944988
GPR[SPVATF]-1659858944988
GPR[EPVATF]-1659858945301
GPR[SPS]-1659858945301
[855839] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1166.
GPR[EPS]-1659858945765
GPR[ESUN]-1659858945765
GPR[SSUN]-1659858945765
-1690918013
GPR[ESUN]-1659858946025
GPR[SSUN]-1659858946025
-1226516116
GPR[ESUN]-1659858946141
GPR[SSUN]-1659858946141
-1226516116
GPR[SPVATF]-1659858946259
GPR[EPVATF]-1659858946656
GPR[SPS]-1659858946656
[857014] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.block.AbstractBlock:280.
GPR[EPS]-1659858946940
GPR[ESUN]-1659858946940
GPR[SSUN]-1659858946940
-1226516116
GPR[SPVATF]-1659858947062
GPR[EPVATF]-1659858947455
GPR[SPS]-1659858947455
[857812] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.block.AbstractBlock:277.
GPR[EPS]-1659858947738
GPR[SPVATF]-1659858947738
GPR[EPVATF]-1659858948133
GPR[SPS]-1659858948133
[858487] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.block.AbstractBlock:277.
GPR[EPS]-1659858948413
GPR[ESUN]-1659858948413
GPR[SSUN]-1659858948413
1355738515
GPR[SPVATF]-1659858948549
GPR[EPVATF]-1659858948867
GPR[SPS]-1659858948867
[859233] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:1474.
GPR[EPS]-1659858949159
GPR[ESUN]-1659858949159
GPR[SSUN]-1659858949159
1355738515
GPR[SPVATF]-1659858949382
GPR[EPVATF]-1659858949703
GPR[SPS]-1659858949703
[860064] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:1386.
GPR[EPS]-1659858949990
GPR[SPVATF]-1659858949991
GPR[EPVATF]-1659858950310
GPR[SPS]-1659858950310
[860677] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:1386.
GPR[EPS]-1659858950603
GPR[ESUN]-1659858950603
GPR[SSUN]-1659858950603
1355738515
GPR[ESUN]-1659858950738
GPR[SSUN]-1659858950738
1355738515
GPR[ESUN]-1659858950871
GPR[SSUN]-1659858950871
-1690918013
GPR[ESUN]-1659858951134
GPR[SSUN]-1659858951135
-1690918013
GPR[ESUN]-1659858951463
GPR[SSUN]-1659858951463
-1690918013
GPR[SPVATF]-1659858951730
GPR[EPVATF]-1659858952051
GPR[SPS]-1659858952051
[862596] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:3820.
GPR[EPS]-1659858952522
GPR[ESUN]-1659858952522
GPR[SSUN]-1659858952522
-1690918013
GPR[ESUN]-1659858952794
GPR[SSUN]-1659858952794
-1690918013
GPR[SPVATF]-1659858953060
GPR[EPVATF]-1659858953378
GPR[SPS]-1659858953378
[863928] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:3817.
GPR[EPS]-1659858953854
GPR[SPVATF]-1659858953855
GPR[EPVATF]-1659858954177
GPR[SPS]-1659858954177
[864717] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:3817.
GPR[EPS]-1659858954643
GPR[ESUN]-1659858954643
GPR[SSUN]-1659858954643
-1690918013
GPR[ESUN]-1659858954915
GPR[SSUN]-1659858954915
-1690918013
GPR[ESUN]-1659858955186
GPR[SSUN]-1659858955186
-1690918013
GPR[SPVATF]-1659858955450
GPR[EPVATF]-1659858955768
GPR[SPS]-1659858955768
[866394] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:3810.
GPR[EPS]-1659858956320
GPR[SPVATF]-1659858956321
GPR[EPVATF]-1659858956638
GPR[SPS]-1659858956638
[867185] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:3810.
GPR[EPS]-1659858957111
GPR[ESUN]-1659858957111
GPR[SSUN]-1659858957111
-1690918013
GPR[ESUN]-1659858957380
GPR[SSUN]-1659858957380
-1690918013
GPR[ESUN]-1659858957642
GPR[SSUN]-1659858957642
1355738515
GPR[SPVATF]-1659858957783
GPR[EPVATF]-1659858958105
GPR[SPS]-1659858958105
[868469] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:1378.
GPR[EPS]-1659858958395
GPR[SPVATF]-1659858958395
GPR[EPVATF]-1659858958717
GPR[SPS]-1659858958717
[869079] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:1378.
GPR[EPS]-1659858959005
GPR[ESUN]-1659858959005
GPR[SSUN]-1659858959005
1355738515
GPR[SPVATF]-1659858959142
GPR[EPVATF]-1659858959461
GPR[SPS]-1659858959461
[869823] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:1374.
GPR[EPS]-1659858959749
GPR[SPVATF]-1659858959750
GPR[EPVATF]-1659858960069
GPR[SPS]-1659858960069
[870434] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:1374.
GPR[EPS]-1659858960360
GPR[ESUN]-1659858960360
GPR[SSUN]-1659858960360
1355738515
GPR[SPVATF]-1659858960499
GPR[EPVATF]-1659858960824
GPR[SPS]-1659858960824
[871187] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:1371.
GPR[EPS]-1659858961113
GPR[SPVATF]-1659858961114
GPR[EPVATF]-1659858961437
GPR[SPS]-1659858961437
[871801] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:1371.
GPR[EPS]-1659858961727
GPR[ESUN]-1659858961727
GPR[SSUN]-1659858961727
-417399974
GPR[ESUN]-1659858961939
GPR[SSUN]-1659858961939
1776071035
GPR[ESUN]-1659858962036
GPR[SSUN]-1659858962036
1355738515
GPR[SPVATF]-1659858962171
GPR[EPVATF]-1659858962498
GPR[SPS]-1659858962498
[872866] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:1343.
GPR[EPS]-1659858962792
GPR[ESUN]-1659858962792
GPR[SSUN]-1659858962792
1355738515
GPR[SPVATF]-1659858962933
GPR[EPVATF]-1659858963256
GPR[SPS]-1659858963256
[873622] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:1329.
GPR[EPS]-1659858963548
GPR[ESUN]-1659858963548
GPR[SSUN]-1659858963548
1355738515
GPR[ESUN]-1659858963683
GPR[SSUN]-1659858963683
1355738515
GPR[SPVATF]-1659858963818
GPR[EPVATF]-1659858964143
GPR[SPS]-1659858964143
[874508] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:1306.
GPR[EPS]-1659858964434
GPR[SPVATF]-1659858964434
GPR[EPVATF]-1659858964754
GPR[SPS]-1659858964755
[875118] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:1306.
GPR[EPS]-1659858965044
GPR[ESUN]-1659858965044
GPR[SSUN]-1659858965044
1355738515
GPR[ESUN]-1659858965259
GPR[SSUN]-1659858965259
1355738515
GPR[ESUN]-1659858965395
GPR[SSUN]-1659858965395
1355738515
GPR[SPVATF]-1659858965531
GPR[EPVATF]-1659858965860
GPR[SPS]-1659858965860
[876223] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:1298.
GPR[EPS]-1659858966150
GPR[SPVATF]-1659858966150
GPR[EPVATF]-1659858966473
GPR[SPS]-1659858966473
[876865] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:1298.
GPR[EPS]-1659858966791
GPR[ESUN]-1659858966791
GPR[SSUN]-1659858966791
1355738515
GPR[SPVATF]-1659858966929
GPR[EPVATF]-1659858967256
GPR[SPS]-1659858967256
[877619] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:1295.
GPR[EPS]-1659858967545
GPR[SPVATF]-1659858967545
GPR[EPVATF]-1659858967868
GPR[SPS]-1659858967868
[878232] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:1295.
GPR[EPS]-1659858968158
GPR[ESUN]-1659858968158
GPR[SSUN]-1659858968158
1355738515
GPR[ESUN]-1659858968297
GPR[SSUN]-1659858968297
1355738515
GPR[SPVATF]-1659858968432
GPR[EPVATF]-1659858968762
GPR[SPS]-1659858968762
[879123] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:706.
GPR[EPS]-1659858969049
GPR[ESUN]-1659858969049
GPR[SSUN]-1659858969049
1355738515
GPR[SPVATF]-1659858969186
GPR[EPVATF]-1659858969515
GPR[SPS]-1659858969515
[879883] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:701.
GPR[EPS]-1659858969809
GPR[SPVATF]-1659858969810
GPR[EPVATF]-1659858970131
GPR[SPS]-1659858970131
[880493] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:701.
GPR[EPS]-1659858970419
GPR[ESUN]-1659858970419
GPR[SSUN]-1659858970419
1355738515
GPR[ESUN]-1659858970554
GPR[SSUN]-1659858970554
1355738515
GPR[SPVATF]-1659858970689
GPR[EPVATF]-1659858971022
GPR[SPS]-1659858971022
[881387] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:697.
GPR[EPS]-1659858971313
GPR[SPVATF]-1659858971313
GPR[EPVATF]-1659858971637
GPR[SPS]-1659858971637
[882000] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.DatasetUtilities:697.
GPR[EPS]-1659858971926
GPR[ESUN]-1659858971926
GPR[SSUN]-1659858971926
-417399974
GPR[SPVATF]-1659858972140
GPR[EPVATF]-1659858972472
GPR[SPS]-1659858972472
[882844] ERROR ConstraintModelBuilder - Unable to compile the change: 
public abstract class AbstractXYItemRenderer extends org.jfree.chart.renderer.AbstractRenderer implements org.jfree.chart.renderer.xy.XYItemRenderer , java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 8019124836026607990L;

    private org.jfree.chart.plot.XYPlot plot;

    private org.jfree.chart.util.ObjectList itemLabelGeneratorList;

    private org.jfree.chart.labels.XYItemLabelGenerator baseItemLabelGenerator;

    private org.jfree.chart.util.ObjectList toolTipGeneratorList;

    private org.jfree.chart.labels.XYToolTipGenerator baseToolTipGenerator;

    private org.jfree.chart.util.ObjectList urlGeneratorList;

    private org.jfree.chart.urls.XYURLGenerator baseURLGenerator;

    private java.util.List backgroundAnnotations;

    private java.util.List foregroundAnnotations;

    private org.jfree.chart.labels.XYSeriesLabelGenerator legendItemLabelGenerator;

    private org.jfree.chart.labels.XYSeriesLabelGenerator legendItemToolTipGenerator;

    private org.jfree.chart.labels.XYSeriesLabelGenerator legendItemURLGenerator;

    protected AbstractXYItemRenderer() {
        super();
        this.itemLabelGeneratorList = new org.jfree.chart.util.ObjectList();
        this.toolTipGeneratorList = new org.jfree.chart.util.ObjectList();
        this.urlGeneratorList = new org.jfree.chart.util.ObjectList();
        this.baseURLGenerator = null;
        this.backgroundAnnotations = new java.util.ArrayList();
        this.foregroundAnnotations = new java.util.ArrayList();
        this.legendItemLabelGenerator = new org.jfree.chart.labels.StandardXYSeriesLabelGenerator("{0}");
    }

    public int getPassCount() {
        return 1;
    }

    public org.jfree.chart.plot.XYPlot getPlot() {
        return this.plot;
    }

    public void setPlot(org.jfree.chart.plot.XYPlot plot) {
        this.plot = plot;
    }

    public org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.XYPlot plot, org.jfree.data.xy.XYDataset data, org.jfree.chart.plot.PlotRenderingInfo info) {
        org.jfree.chart.renderer.xy.XYItemRendererState state = new org.jfree.chart.renderer.xy.XYItemRendererState(info);
        return state;
    }

    public org.jfree.chart.labels.XYItemLabelGenerator getItemLabelGenerator(int series, int item, boolean selected) {
        org.jfree.chart.labels.XYItemLabelGenerator generator = ((org.jfree.chart.labels.XYItemLabelGenerator) (this.itemLabelGeneratorList.get(series)));
        if (generator == null) {
            generator = this.baseItemLabelGenerator;
        }
        return generator;
    }

    public org.jfree.chart.labels.XYItemLabelGenerator getSeriesItemLabelGenerator(int series) {
        return ((org.jfree.chart.labels.XYItemLabelGenerator) (this.itemLabelGeneratorList.get(series)));
    }

    public void setSeriesItemLabelGenerator(int series, org.jfree.chart.labels.XYItemLabelGenerator generator) {
        this.itemLabelGeneratorList.set(series, generator);
        fireChangeEvent();
    }

    public void setSeriesItemLabelGenerator(int series, org.jfree.chart.labels.XYItemLabelGenerator generator, boolean notify) {
        this.itemLabelGeneratorList.set(series, generator);
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.labels.XYItemLabelGenerator getBaseItemLabelGenerator() {
        return this.baseItemLabelGenerator;
    }

    public void setBaseItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator generator) {
        setBaseItemLabelGenerator(generator, true);
    }

    public void setBaseItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator generator, boolean notify) {
        this.baseItemLabelGenerator = generator;
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.labels.XYToolTipGenerator getToolTipGenerator(int series, int item, boolean selected) {
        org.jfree.chart.labels.XYToolTipGenerator generator = ((org.jfree.chart.labels.XYToolTipGenerator) (this.toolTipGeneratorList.get(series)));
        if (generator == null) {
            generator = this.baseToolTipGenerator;
        }
        return generator;
    }

    public org.jfree.chart.labels.XYToolTipGenerator getSeriesToolTipGenerator(int series) {
        return ((org.jfree.chart.labels.XYToolTipGenerator) (this.toolTipGeneratorList.get(series)));
    }

    public void setSeriesToolTipGenerator(int series, org.jfree.chart.labels.XYToolTipGenerator generator) {
        setSeriesToolTipGenerator(series, generator, true);
    }

    public void setSeriesToolTipGenerator(int series, org.jfree.chart.labels.XYToolTipGenerator generator, boolean notify) {
        this.toolTipGeneratorList.set(series, generator);
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.labels.XYToolTipGenerator getBaseToolTipGenerator() {
        return this.baseToolTipGenerator;
    }

    public void setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator generator) {
        setBaseToolTipGenerator(generator, true);
    }

    public void setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator generator, boolean notify) {
        this.baseToolTipGenerator = generator;
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.urls.XYURLGenerator getURLGenerator(int series, int item, boolean selected) {
        org.jfree.chart.urls.XYURLGenerator generator = ((org.jfree.chart.urls.XYURLGenerator) (this.urlGeneratorList.get(series)));
        if (generator == null) {
            generator = this.baseURLGenerator;
        }
        return generator;
    }

    public org.jfree.chart.urls.XYURLGenerator getSeriesURLGenerator(int series) {
        return ((org.jfree.chart.urls.XYURLGenerator) (this.urlGeneratorList.get(series)));
    }

    public void setSeriesURLGenerator(int series, org.jfree.chart.urls.XYURLGenerator generator) {
        setSeriesURLGenerator(series, generator, true);
    }

    public void setSeriesURLGenerator(int series, org.jfree.chart.urls.XYURLGenerator generator, boolean notify) {
        this.toolTipGeneratorList.set(series, generator);
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.urls.XYURLGenerator getBaseURLGenerator() {
        return this.baseURLGenerator;
    }

    public void setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator generator) {
        setBaseURLGenerator(generator, true);
    }

    public void setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator generator, boolean notify) {
        this.baseURLGenerator = generator;
        if (notify) {
            fireChangeEvent();
        }
    }

    public void addAnnotation(org.jfree.chart.annotations.XYAnnotation annotation) {
        addAnnotation(annotation, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public void addAnnotation(org.jfree.chart.annotations.XYAnnotation annotation, org.jfree.chart.util.Layer layer) {
        if (annotation == null) {
            throw new java.lang.IllegalArgumentException("Null 'annotation' argument.");
        }
        if (layer.equals(org.jfree.chart.util.Layer.FOREGROUND)) {
            this.foregroundAnnotations.add(annotation);
            fireChangeEvent();
        } else if (layer.equals(org.jfree.chart.util.Layer.BACKGROUND)) {
            this.backgroundAnnotations.add(annotation);
            fireChangeEvent();
        } else {
            throw new java.lang.RuntimeException("Unknown layer.");
        }
    }

    public boolean removeAnnotation(org.jfree.chart.annotations.XYAnnotation annotation) {
        boolean removed = this.foregroundAnnotations.remove(annotation);
        removed = removed & this.backgroundAnnotations.remove(annotation);
        fireChangeEvent();
        return removed;
    }

    public void removeAnnotations() {
        this.foregroundAnnotations.clear();
        this.backgroundAnnotations.clear();
        fireChangeEvent();
    }

    public java.util.Collection getAnnotations() {
        java.util.List result = new java.util.ArrayList(this.foregroundAnnotations);
        result.addAll(this.backgroundAnnotations);
        return result;
    }

    public org.jfree.chart.labels.XYSeriesLabelGenerator getLegendItemLabelGenerator() {
        return this.legendItemLabelGenerator;
    }

    public void setLegendItemLabelGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator generator) {
        if (generator == null) {
            throw new java.lang.IllegalArgumentException("Null 'generator' argument.");
        }
        this.legendItemLabelGenerator = generator;
        fireChangeEvent();
    }

    public org.jfree.chart.labels.XYSeriesLabelGenerator getLegendItemToolTipGenerator() {
        return this.legendItemToolTipGenerator;
    }

    public void setLegendItemToolTipGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator generator) {
        this.legendItemToolTipGenerator = generator;
        fireChangeEvent();
    }

    public org.jfree.chart.labels.XYSeriesLabelGenerator getLegendItemURLGenerator() {
        return this.legendItemURLGenerator;
    }

    public void setLegendItemURLGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator generator) {
        this.legendItemURLGenerator = generator;
        fireChangeEvent();
    }

    public org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset dataset) {
        return findDomainBounds(dataset, false);
    }

    protected org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset dataset, boolean includeInterval) {
        if (dataset == null) {
            return null;
        }
        if (getDataBoundsIncludesVisibleSeriesOnly()) {
            java.util.List visibleSeriesKeys = new java.util.ArrayList();
            int seriesCount = dataset.getSeriesCount();
            for (int s = 0; s < seriesCount; s++) {
                if (isSeriesVisible(s)) {
                    visibleSeriesKeys.add(dataset.getSeriesKey(s));
                }
            }
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(869).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(869).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(869).collectInput("org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.baseItemLabelGenerator",org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.baseItemLabelGenerator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(869).collectInput("org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.plot",org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.plot);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(869).collectInput("org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.legendItemToolTipGenerator",org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.legendItemToolTipGenerator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(869).collectInput("org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.legendItemURLGenerator",org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.legendItemURLGenerator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(869).collectInput("visibleSeriesKeys",visibleSeriesKeys);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(869).collectInput("org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.urlGeneratorList",org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.urlGeneratorList);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(869).collectInput("org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.baseURLGenerator",org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.baseURLGenerator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(869).collectInput("includeInterval",includeInterval);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(869).collectInput("org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.itemLabelGeneratorList",org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.itemLabelGeneratorList);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(869).collectInput("org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.foregroundAnnotations",org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.foregroundAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(869).collectInput("org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.legendItemLabelGenerator",org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.legendItemLabelGenerator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(869).collectInput("seriesCount",seriesCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(869).collectInput("org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.backgroundAnnotations",org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.backgroundAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(869).collectInput("org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.baseToolTipGenerator",org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.baseToolTipGenerator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(869).collectInput("org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.toolTipGeneratorList",org.jfree.chart.renderer.xy.AbstractXYItemRenderer.this.toolTipGeneratorList);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(869).collectInput("dataset",dataset);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(869).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(869).collectionEnds();
            }
            if (runtimeAngelicValue)
                return org.jfree.data.general.DatasetUtilities.findDomainBounds(dataset, visibleSeriesKeys, includeInterval);

        } else {
            return org.jfree.data.general.DatasetUtilities.findDomainBounds(dataset, includeInterval);
        }
    }

    public org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset dataset) {
        return findRangeBounds(dataset, false);
    }

    protected org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset dataset, boolean includeInterval) {
        if (dataset == null) {
            return null;
        }
        if (getDataBoundsIncludesVisibleSeriesOnly()) {
            java.util.List visibleSeriesKeys = new java.util.ArrayList();
            int seriesCount = dataset.getSeriesCount();
            for (int s = 0; s < seriesCount; s++) {
                if (isSeriesVisible(s)) {
                    visibleSeriesKeys.add(dataset.getSeriesKey(s));
                }
            }
            org.jfree.data.Range xRange = null;
            org.jfree.chart.plot.XYPlot p = getPlot();
            if (p != null) {
                org.jfree.chart.axis.ValueAxis xAxis = null;
                int index = p.getIndexOf(this);
                if (index >= 0) {
                    xAxis = plot.getDomainAxisForDataset(index);
                }
                if (xAxis != null) {
                    xRange = xAxis.getRange();
                }
            }
            if (xRange == null) {
                xRange = new org.jfree.data.Range(java.lang.Double.NEGATIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY);
            }
            return org.jfree.data.general.DatasetUtilities.findRangeBounds(dataset, visibleSeriesKeys, xRange, includeInterval);
        } else {
            return org.jfree.data.general.DatasetUtilities.findRangeBounds(dataset, includeInterval);
        }
    }

    public org.jfree.chart.LegendItemCollection getLegendItems() {
        if (this.plot == null) {
            return new org.jfree.chart.LegendItemCollection();
        }
        org.jfree.chart.LegendItemCollection result = new org.jfree.chart.LegendItemCollection();
        int index = this.plot.getIndexOf(this);
        org.jfree.data.xy.XYDataset dataset = this.plot.getDataset(index);
        if (dataset != null) {
            int seriesCount = dataset.getSeriesCount();
            for (int i = 0; i < seriesCount; i++) {
                if (isSeriesVisibleInLegend(i)) {
                    org.jfree.chart.LegendItem item = getLegendItem(index, i);
                    if (item != null) {
                        result.add(item);
                    }
                }
            }
        }
        return result;
    }

    public org.jfree.chart.LegendItem getLegendItem(int datasetIndex, int series) {
        org.jfree.chart.plot.XYPlot xyplot = getPlot();
        if (xyplot == null) {
            return null;
        }
        org.jfree.data.xy.XYDataset dataset = xyplot.getDataset(datasetIndex);
        if (dataset == null) {
            return null;
        }
        java.lang.String label = this.legendItemLabelGenerator.generateLabel(dataset, series);
        java.lang.String description = label;
        java.lang.String toolTipText = null;
        if (getLegendItemToolTipGenerator() != null) {
            toolTipText = getLegendItemToolTipGenerator().generateLabel(dataset, series);
        }
        java.lang.String urlText = null;
        if (getLegendItemURLGenerator() != null) {
            urlText = getLegendItemURLGenerator().generateLabel(dataset, series);
        }
        java.awt.Shape shape = lookupLegendShape(series);
        java.awt.Paint paint = lookupSeriesPaint(series);
        org.jfree.chart.LegendItem item = new org.jfree.chart.LegendItem(label, paint);
        item.setToolTipText(toolTipText);
        item.setURLText(urlText);
        item.setLabelFont(lookupLegendTextFont(series));
        java.awt.Paint labelPaint = lookupLegendTextPaint(series);
        if (labelPaint != null) {
            item.setLabelPaint(labelPaint);
        }
        item.setSeriesKey(dataset.getSeriesKey(series));
        item.setSeriesIndex(series);
        item.setDataset(dataset);
        item.setDatasetIndex(datasetIndex);
        if (getTreatLegendShapeAsLine()) {
            item.setLineVisible(true);
            item.setLine(shape);
            item.setLinePaint(paint);
            item.setShapeVisible(false);
        } else {
            java.awt.Paint outlinePaint = lookupSeriesOutlinePaint(series);
            java.awt.Stroke outlineStroke = lookupSeriesOutlineStroke(series);
            item.setOutlinePaint(outlinePaint);
            item.setOutlineStroke(outlineStroke);
        }
        return item;
    }

    public void fillDomainGridBand(java.awt.Graphics2D g2, org.jfree.chart.plot.XYPlot plot, org.jfree.chart.axis.ValueAxis axis, java.awt.geom.Rectangle2D dataArea, double start, double end) {
        double x1 = axis.valueToJava2D(start, dataArea, plot.getDomainAxisEdge());
        double x2 = axis.valueToJava2D(end, dataArea, plot.getDomainAxisEdge());
        java.awt.geom.Rectangle2D band;
        if (plot.getOrientation() == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
            band = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(x1, x2), dataArea.getMinY(), java.lang.Math.abs(x2 - x1), dataArea.getWidth());
        } else {
            band = new java.awt.geom.Rectangle2D.Double(dataArea.getMinX(), java.lang.Math.min(x1, x2), dataArea.getWidth(), java.lang.Math.abs(x2 - x1));
        }
        java.awt.Paint paint = plot.getDomainTickBandPaint();
        if (paint != null) {
            g2.setPaint(paint);
            g2.fill(band);
        }
    }

    public void fillRangeGridBand(java.awt.Graphics2D g2, org.jfree.chart.plot.XYPlot plot, org.jfree.chart.axis.ValueAxis axis, java.awt.geom.Rectangle2D dataArea, double start, double end) {
        double y1 = axis.valueToJava2D(start, dataArea, plot.getRangeAxisEdge());
        double y2 = axis.valueToJava2D(end, dataArea, plot.getRangeAxisEdge());
        java.awt.geom.Rectangle2D band;
        if (plot.getOrientation() == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
            band = new java.awt.geom.Rectangle2D.Double(dataArea.getMinX(), java.lang.Math.min(y1, y2), dataArea.getWidth(), java.lang.Math.abs(y2 - y1));
        } else {
            band = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(y1, y2), dataArea.getMinY(), java.lang.Math.abs(y2 - y1), dataArea.getHeight());
        }
        java.awt.Paint paint = plot.getRangeTickBandPaint();
        if (paint != null) {
            g2.setPaint(paint);
            g2.fill(band);
        }
    }

    public void drawDomainGridLine(java.awt.Graphics2D g2, org.jfree.chart.plot.XYPlot plot, org.jfree.chart.axis.ValueAxis axis, java.awt.geom.Rectangle2D dataArea, double value) {
        org.jfree.data.Range range = axis.getRange();
        if (!range.contains(value)) {
            return;
        }
        org.jfree.chart.plot.PlotOrientation orientation = plot.getOrientation();
        double v = axis.valueToJava2D(value, dataArea, plot.getDomainAxisEdge());
        java.awt.geom.Line2D line = null;
        if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v);
        } else if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
            line = new java.awt.geom.Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY());
        }
        java.awt.Paint paint = plot.getDomainGridlinePaint();
        java.awt.Stroke stroke = plot.getDomainGridlineStroke();
        g2.setPaint(paint != null ? paint : org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT);
        g2.setStroke(stroke != null ? stroke : org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE);
        g2.draw(line);
    }

    public void drawDomainLine(java.awt.Graphics2D g2, org.jfree.chart.plot.XYPlot plot, org.jfree.chart.axis.ValueAxis axis, java.awt.geom.Rectangle2D dataArea, double value, java.awt.Paint paint, java.awt.Stroke stroke) {
        org.jfree.data.Range range = axis.getRange();
        if (!range.contains(value)) {
            return;
        }
        org.jfree.chart.plot.PlotOrientation orientation = plot.getOrientation();
        java.awt.geom.Line2D line = null;
        double v = axis.valueToJava2D(value, dataArea, plot.getDomainAxisEdge());
        if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v);
        } else if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
            line = new java.awt.geom.Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY());
        }
        g2.setPaint(paint);
        g2.setStroke(stroke);
        g2.draw(line);
    }

    public void drawRangeLine(java.awt.Graphics2D g2, org.jfree.chart.plot.XYPlot plot, org.jfree.chart.axis.ValueAxis axis, java.awt.geom.Rectangle2D dataArea, double value, java.awt.Paint paint, java.awt.Stroke stroke) {
        org.jfree.data.Range range = axis.getRange();
        if (!range.contains(value)) {
            return;
        }
        org.jfree.chart.plot.PlotOrientation orientation = plot.getOrientation();
        java.awt.geom.Line2D line = null;
        double v = axis.valueToJava2D(value, dataArea, plot.getRangeAxisEdge());
        if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            line = new java.awt.geom.Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY());
        } else if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
            line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v);
        }
        g2.setPaint(paint);
        g2.setStroke(stroke);
        g2.draw(line);
    }

    public void drawDomainMarker(java.awt.Graphics2D g2, org.jfree.chart.plot.XYPlot plot, org.jfree.chart.axis.ValueAxis domainAxis, org.jfree.chart.plot.Marker marker, java.awt.geom.Rectangle2D dataArea) {
        if (marker instanceof org.jfree.chart.plot.ValueMarker) {
            org.jfree.chart.plot.ValueMarker vm = ((org.jfree.chart.plot.ValueMarker) (marker));
            double value = vm.getValue();
            org.jfree.data.Range range = domainAxis.getRange();
            if (!range.contains(value)) {
                return;
            }
            double v = domainAxis.valueToJava2D(value, dataArea, plot.getDomainAxisEdge());
            org.jfree.chart.plot.PlotOrientation orientation = plot.getOrientation();
            java.awt.geom.Line2D line = null;
            if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v);
            } else if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                line = new java.awt.geom.Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY());
            }
            final java.awt.Composite originalComposite = g2.getComposite();
            g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, marker.getAlpha()));
            g2.setPaint(marker.getPaint());
            g2.setStroke(marker.getStroke());
            g2.draw(line);
            java.lang.String label = marker.getLabel();
            org.jfree.chart.util.RectangleAnchor anchor = marker.getLabelAnchor();
            if (label != null) {
                java.awt.Font labelFont = marker.getLabelFont();
                g2.setFont(labelFont);
                g2.setPaint(marker.getLabelPaint());
                java.awt.geom.Point2D coordinates = calculateDomainMarkerTextAnchorPoint(g2, orientation, dataArea, line.getBounds2D(), marker.getLabelOffset(), org.jfree.chart.util.LengthAdjustmentType.EXPAND, anchor);
                org.jfree.chart.text.TextUtilities.drawAlignedString(label, g2, ((float) (coordinates.getX())), ((float) (coordinates.getY())), marker.getLabelTextAnchor());
            }
            g2.setComposite(originalComposite);
        } else if (marker instanceof org.jfree.chart.plot.IntervalMarker) {
            org.jfree.chart.plot.IntervalMarker im = ((org.jfree.chart.plot.IntervalMarker) (marker));
            double start = im.getStartValue();
            double end = im.getEndValue();
            org.jfree.data.Range range = domainAxis.getRange();
            if (!range.intersects(start, end)) {
                return;
            }
            double start2d = domainAxis.valueToJava2D(start, dataArea, plot.getDomainAxisEdge());
            double end2d = domainAxis.valueToJava2D(end, dataArea, plot.getDomainAxisEdge());
            double low = java.lang.Math.min(start2d, end2d);
            double high = java.lang.Math.max(start2d, end2d);
            org.jfree.chart.plot.PlotOrientation orientation = plot.getOrientation();
            java.awt.geom.Rectangle2D rect = null;
            if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                low = java.lang.Math.max(low, dataArea.getMinY());
                high = java.lang.Math.min(high, dataArea.getMaxY());
                rect = new java.awt.geom.Rectangle2D.Double(dataArea.getMinX(), low, dataArea.getWidth(), high - low);
            } else if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                low = java.lang.Math.max(low, dataArea.getMinX());
                high = java.lang.Math.min(high, dataArea.getMaxX());
                rect = new java.awt.geom.Rectangle2D.Double(low, dataArea.getMinY(), high - low, dataArea.getHeight());
            }
            final java.awt.Composite originalComposite = g2.getComposite();
            g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, marker.getAlpha()));
            java.awt.Paint p = marker.getPaint();
            if (p instanceof java.awt.GradientPaint) {
                java.awt.GradientPaint gp = ((java.awt.GradientPaint) (p));
                org.jfree.chart.util.GradientPaintTransformer t = im.getGradientPaintTransformer();
                if (t != null) {
                    gp = t.transform(gp, rect);
                }
                g2.setPaint(gp);
            } else {
                g2.setPaint(p);
            }
            g2.fill(rect);
            if ((im.getOutlinePaint() != null) && (im.getOutlineStroke() != null)) {
                if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    java.awt.geom.Line2D line = new java.awt.geom.Line2D.Double();
                    double y0 = dataArea.getMinY();
                    double y1 = dataArea.getMaxY();
                    g2.setPaint(im.getOutlinePaint());
                    g2.setStroke(im.getOutlineStroke());
                    if (range.contains(start)) {
                        line.setLine(start2d, y0, start2d, y1);
                        g2.draw(line);
                    }
                    if (range.contains(end)) {
                        line.setLine(end2d, y0, end2d, y1);
                        g2.draw(line);
                    }
                } else {
                    java.awt.geom.Line2D line = new java.awt.geom.Line2D.Double();
                    double x0 = dataArea.getMinX();
                    double x1 = dataArea.getMaxX();
                    g2.setPaint(im.getOutlinePaint());
                    g2.setStroke(im.getOutlineStroke());
                    if (range.contains(start)) {
                        line.setLine(x0, start2d, x1, start2d);
                        g2.draw(line);
                    }
                    if (range.contains(end)) {
                        line.setLine(x0, end2d, x1, end2d);
                        g2.draw(line);
                    }
                }
            }
            java.lang.String label = marker.getLabel();
            org.jfree.chart.util.RectangleAnchor anchor = marker.getLabelAnchor();
            if (label != null) {
                java.awt.Font labelFont = marker.getLabelFont();
                g2.setFont(labelFont);
                g2.setPaint(marker.getLabelPaint());
                java.awt.geom.Point2D coordinates = calculateDomainMarkerTextAnchorPoint(g2, orientation, dataArea, rect, marker.getLabelOffset(), marker.getLabelOffsetType(), anchor);
                org.jfree.chart.text.TextUtilities.drawAlignedString(label, g2, ((float) (coordinates.getX())), ((float) (coordinates.getY())), marker.getLabelTextAnchor());
            }
            g2.setComposite(originalComposite);
        }
    }

    protected java.awt.geom.Point2D calculateDomainMarkerTextAnchorPoint(java.awt.Graphics2D g2, org.jfree.chart.plot.PlotOrientation orientation, java.awt.geom.Rectangle2D dataArea, java.awt.geom.Rectangle2D markerArea, org.jfree.chart.util.RectangleInsets markerOffset, org.jfree.chart.util.LengthAdjustmentType labelOffsetType, org.jfree.chart.util.RectangleAnchor anchor) {
        java.awt.geom.Rectangle2D anchorRect = null;
        if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            anchorRect = markerOffset.createAdjustedRectangle(markerArea, org.jfree.chart.util.LengthAdjustmentType.CONTRACT, labelOffsetType);
        } else if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
            anchorRect = markerOffset.createAdjustedRectangle(markerArea, labelOffsetType, org.jfree.chart.util.LengthAdjustmentType.CONTRACT);
        }
        return org.jfree.chart.util.RectangleAnchor.coordinates(anchorRect, anchor);
    }

    public void drawRangeMarker(java.awt.Graphics2D g2, org.jfree.chart.plot.XYPlot plot, org.jfree.chart.axis.ValueAxis rangeAxis, org.jfree.chart.plot.Marker marker, java.awt.geom.Rectangle2D dataArea) {
        if (marker instanceof org.jfree.chart.plot.ValueMarker) {
            org.jfree.chart.plot.ValueMarker vm = ((org.jfree.chart.plot.ValueMarker) (marker));
            double value = vm.getValue();
            org.jfree.data.Range range = rangeAxis.getRange();
            if (!range.contains(value)) {
                return;
            }
            double v = rangeAxis.valueToJava2D(value, dataArea, plot.getRangeAxisEdge());
            org.jfree.chart.plot.PlotOrientation orientation = plot.getOrientation();
            java.awt.geom.Line2D line = null;
            if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                line = new java.awt.geom.Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY());
            } else if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v);
            }
            final java.awt.Composite originalComposite = g2.getComposite();
            g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, marker.getAlpha()));
            g2.setPaint(marker.getPaint());
            g2.setStroke(marker.getStroke());
            g2.draw(line);
            java.lang.String label = marker.getLabel();
            org.jfree.chart.util.RectangleAnchor anchor = marker.getLabelAnchor();
            if (label != null) {
                java.awt.Font labelFont = marker.getLabelFont();
                g2.setFont(labelFont);
                g2.setPaint(marker.getLabelPaint());
                java.awt.geom.Point2D coordinates = calculateRangeMarkerTextAnchorPoint(g2, orientation, dataArea, line.getBounds2D(), marker.getLabelOffset(), org.jfree.chart.util.LengthAdjustmentType.EXPAND, anchor);
                org.jfree.chart.text.TextUtilities.drawAlignedString(label, g2, ((float) (coordinates.getX())), ((float) (coordinates.getY())), marker.getLabelTextAnchor());
            }
            g2.setComposite(originalComposite);
        } else if (marker instanceof org.jfree.chart.plot.IntervalMarker) {
            org.jfree.chart.plot.IntervalMarker im = ((org.jfree.chart.plot.IntervalMarker) (marker));
            double start = im.getStartValue();
            double end = im.getEndValue();
            org.jfree.data.Range range = rangeAxis.getRange();
            if (!range.intersects(start, end)) {
                return;
            }
            double start2d = rangeAxis.valueToJava2D(start, dataArea, plot.getRangeAxisEdge());
            double end2d = rangeAxis.valueToJava2D(end, dataArea, plot.getRangeAxisEdge());
            double low = java.lang.Math.min(start2d, end2d);
            double high = java.lang.Math.max(start2d, end2d);
            org.jfree.chart.plot.PlotOrientation orientation = plot.getOrientation();
            java.awt.geom.Rectangle2D rect = null;
            if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                low = java.lang.Math.max(low, dataArea.getMinX());
                high = java.lang.Math.min(high, dataArea.getMaxX());
                rect = new java.awt.geom.Rectangle2D.Double(low, dataArea.getMinY(), high - low, dataArea.getHeight());
            } else if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                low = java.lang.Math.max(low, dataArea.getMinY());
                high = java.lang.Math.min(high, dataArea.getMaxY());
                rect = new java.awt.geom.Rectangle2D.Double(dataArea.getMinX(), low, dataArea.getWidth(), high - low);
            }
            final java.awt.Composite originalComposite = g2.getComposite();
            g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, marker.getAlpha()));
            java.awt.Paint p = marker.getPaint();
            if (p instanceof java.awt.GradientPaint) {
                java.awt.GradientPaint gp = ((java.awt.GradientPaint) (p));
                org.jfree.chart.util.GradientPaintTransformer t = im.getGradientPaintTransformer();
                if (t != null) {
                    gp = t.transform(gp, rect);
                }
                g2.setPaint(gp);
            } else {
                g2.setPaint(p);
            }
            g2.fill(rect);
            if ((im.getOutlinePaint() != null) && (im.getOutlineStroke() != null)) {
                if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    java.awt.geom.Line2D line = new java.awt.geom.Line2D.Double();
                    double x0 = dataArea.getMinX();
                    double x1 = dataArea.getMaxX();
                    g2.setPaint(im.getOutlinePaint());
                    g2.setStroke(im.getOutlineStroke());
                    if (range.contains(start)) {
                        line.setLine(x0, start2d, x1, start2d);
                        g2.draw(line);
                    }
                    if (range.contains(end)) {
                        line.setLine(x0, end2d, x1, end2d);
                        g2.draw(line);
                    }
                } else {
                    java.awt.geom.Line2D line = new java.awt.geom.Line2D.Double();
                    double y0 = dataArea.getMinY();
                    double y1 = dataArea.getMaxY();
                    g2.setPaint(im.getOutlinePaint());
                    g2.setStroke(im.getOutlineStroke());
                    if (range.contains(start)) {
                        line.setLine(start2d, y0, start2d, y1);
                        g2.draw(line);
                    }
                    if (range.contains(end)) {
                        line.setLine(end2d, y0, end2d, y1);
                        g2.draw(line);
                    }
                }
            }
            java.lang.String label = marker.getLabel();
            org.jfree.chart.util.RectangleAnchor anchor = marker.getLabelAnchor();
            if (label != null) {
                java.awt.Font labelFont = marker.getLabelFont();
                g2.setFont(labelFont);
                g2.setPaint(marker.getLabelPaint());
                java.awt.geom.Point2D coordinates = calculateRangeMarkerTextAnchorPoint(g2, orientation, dataArea, rect, marker.getLabelOffset(), marker.getLabelOffsetType(), anchor);
                org.jfree.chart.text.TextUtilities.drawAlignedString(label, g2, ((float) (coordinates.getX())), ((float) (coordinates.getY())), marker.getLabelTextAnchor());
            }
            g2.setComposite(originalComposite);
        }
    }

    private java.awt.geom.Point2D calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D g2, org.jfree.chart.plot.PlotOrientation orientation, java.awt.geom.Rectangle2D dataArea, java.awt.geom.Rectangle2D markerArea, org.jfree.chart.util.RectangleInsets markerOffset, org.jfree.chart.util.LengthAdjustmentType labelOffsetForRange, org.jfree.chart.util.RectangleAnchor anchor) {
        java.awt.geom.Rectangle2D anchorRect = null;
        if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            anchorRect = markerOffset.createAdjustedRectangle(markerArea, labelOffsetForRange, org.jfree.chart.util.LengthAdjustmentType.CONTRACT);
        } else if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
            anchorRect = markerOffset.createAdjustedRectangle(markerArea, org.jfree.chart.util.LengthAdjustmentType.CONTRACT, labelOffsetForRange);
        }
        return org.jfree.chart.util.RectangleAnchor.coordinates(anchorRect, anchor);
    }

    protected java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.chart.renderer.xy.AbstractXYItemRenderer clone = ((org.jfree.chart.renderer.xy.AbstractXYItemRenderer) (super.clone()));
        clone.itemLabelGeneratorList = ((org.jfree.chart.util.ObjectList) (this.itemLabelGeneratorList.clone()));
        if ((this.baseItemLabelGenerator != null) && (this.baseItemLabelGenerator instanceof org.jfree.chart.util.PublicCloneable)) {
            org.jfree.chart.util.PublicCloneable pc = ((org.jfree.chart.util.PublicCloneable) (this.baseItemLabelGenerator));
            clone.baseItemLabelGenerator = ((org.jfree.chart.labels.XYItemLabelGenerator) (pc.clone()));
        }
        clone.toolTipGeneratorList = ((org.jfree.chart.util.ObjectList) (this.toolTipGeneratorList.clone()));
        if ((this.baseToolTipGenerator != null) && (this.baseToolTipGenerator instanceof org.jfree.chart.util.PublicCloneable)) {
            org.jfree.chart.util.PublicCloneable pc = ((org.jfree.chart.util.PublicCloneable) (this.baseToolTipGenerator));
            clone.baseToolTipGenerator = ((org.jfree.chart.labels.XYToolTipGenerator) (pc.clone()));
        }
        if (clone.legendItemLabelGenerator instanceof org.jfree.chart.util.PublicCloneable) {
            clone.legendItemLabelGenerator = ((org.jfree.chart.labels.XYSeriesLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendItemLabelGenerator)));
        }
        if (clone.legendItemToolTipGenerator instanceof org.jfree.chart.util.PublicCloneable) {
            clone.legendItemToolTipGenerator = ((org.jfree.chart.labels.XYSeriesLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendItemToolTipGenerator)));
        }
        if (clone.legendItemURLGenerator instanceof org.jfree.chart.util.PublicCloneable) {
            clone.legendItemURLGenerator = ((org.jfree.chart.labels.XYSeriesLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendItemURLGenerator)));
        }
        clone.foregroundAnnotations = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.foregroundAnnotations)));
        clone.backgroundAnnotations = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.backgroundAnnotations)));
        if (clone.legendItemLabelGenerator instanceof org.jfree.chart.util.PublicCloneable) {
            clone.legendItemLabelGenerator = ((org.jfree.chart.labels.XYSeriesLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendItemLabelGenerator)));
        }
        if (clone.legendItemToolTipGenerator instanceof org.jfree.chart.util.PublicCloneable) {
            clone.legendItemToolTipGenerator = ((org.jfree.chart.labels.XYSeriesLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendItemToolTipGenerator)));
        }
        if (clone.legendItemURLGenerator instanceof org.jfree.chart.util.PublicCloneable) {
            clone.legendItemURLGenerator = ((org.jfree.chart.labels.XYSeriesLabelGenerator) (org.jfree.chart.util.ObjectUtilities.clone(this.legendItemURLGenerator)));
        }
        return clone;
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.renderer.xy.AbstractXYItemRenderer)) {
            return false;
        }
        org.jfree.chart.renderer.xy.AbstractXYItemRenderer that = ((org.jfree.chart.renderer.xy.AbstractXYItemRenderer) (obj));
        if (!this.itemLabelGeneratorList.equals(that.itemLabelGeneratorList)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.baseItemLabelGenerator, that.baseItemLabelGenerator)) {
            return false;
        }
        if (!this.toolTipGeneratorList.equals(that.toolTipGeneratorList)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.baseToolTipGenerator, that.baseToolTipGenerator)) {
            return false;
        }
        if (!this.urlGeneratorList.equals(that.urlGeneratorList)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.baseURLGenerator, that.baseURLGenerator)) {
            return false;
        }
        if (!this.foregroundAnnotations.equals(that.foregroundAnnotations)) {
            return false;
        }
        if (!this.backgroundAnnotations.equals(that.backgroundAnnotations)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendItemLabelGenerator, that.legendItemLabelGenerator)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendItemToolTipGenerator, that.legendItemToolTipGenerator)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.legendItemURLGenerator, that.legendItemURLGenerator)) {
            return false;
        }
        return super.equals(obj);
    }

    public org.jfree.chart.plot.DrawingSupplier getDrawingSupplier() {
        org.jfree.chart.plot.DrawingSupplier result = null;
        org.jfree.chart.plot.XYPlot p = getPlot();
        if (p != null) {
            result = p.getDrawingSupplier();
        }
        return result;
    }

    protected void updateCrosshairValues(org.jfree.chart.plot.CrosshairState crosshairState, double x, double y, int domainAxisIndex, int rangeAxisIndex, double transX, double transY, org.jfree.chart.plot.PlotOrientation orientation) {
        if (orientation == null) {
            throw new java.lang.IllegalArgumentException("Null 'orientation' argument.");
        }
        if (crosshairState != null) {
            if (this.plot.isDomainCrosshairLockedOnData()) {
                if (this.plot.isRangeCrosshairLockedOnData()) {
                    crosshairState.updateCrosshairPoint(x, y, domainAxisIndex, rangeAxisIndex, transX, transY, orientation);
                } else {
                    crosshairState.updateCrosshairX(x, domainAxisIndex);
                }
            } else if (this.plot.isRangeCrosshairLockedOnData()) {
                crosshairState.updateCrosshairY(y, rangeAxisIndex);
            }
        }
    }

    protected void drawItemLabel(java.awt.Graphics2D g2, org.jfree.chart.plot.PlotOrientation orientation, org.jfree.data.xy.XYDataset dataset, int series, int item, boolean selected, double x, double y, boolean negative) {
        org.jfree.chart.labels.XYItemLabelGenerator generator = getItemLabelGenerator(series, item, selected);
        if (generator != null) {
            java.awt.Font labelFont = getItemLabelFont(series, item, selected);
            java.awt.Paint paint = getItemLabelPaint(series, item, selected);
            g2.setFont(labelFont);
            g2.setPaint(paint);
            java.lang.String label = generator.generateLabel(dataset, series, item);
            org.jfree.chart.labels.ItemLabelPosition position = null;
            if (!negative) {
                position = getPositiveItemLabelPosition(series, item, selected);
            } else {
                position = getNegativeItemLabelPosition(series, item, selected);
            }
            java.awt.geom.Point2D anchorPoint = calculateLabelAnchorPoint(position.getItemLabelAnchor(), x, y, orientation);
            org.jfree.chart.text.TextUtilities.drawRotatedString(label, g2, ((float) (anchorPoint.getX())), ((float) (anchorPoint.getY())), position.getTextAnchor(), position.getAngle(), position.getRotationAnchor());
        }
    }

    public void drawAnnotations(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.axis.ValueAxis domainAxis, org.jfree.chart.axis.ValueAxis rangeAxis, org.jfree.chart.util.Layer layer, org.jfree.chart.plot.PlotRenderingInfo info) {
        java.util.Iterator iterator = null;
        if (layer.equals(org.jfree.chart.util.Layer.FOREGROUND)) {
            iterator = this.foregroundAnnotations.iterator();
        } else if (layer.equals(org.jfree.chart.util.Layer.BACKGROUND)) {
            iterator = this.backgroundAnnotations.iterator();
        } else {
            throw new java.lang.RuntimeException("Unknown layer.");
        }
        while (iterator.hasNext()) {
            org.jfree.chart.annotations.XYAnnotation annotation = ((org.jfree.chart.annotations.XYAnnotation) (iterator.next()));
            annotation.draw(g2, this.plot, dataArea, domainAxis, rangeAxis, 0, info);
        } 
    }

    protected void addEntity(org.jfree.chart.entity.EntityCollection entities, java.awt.Shape area, org.jfree.data.xy.XYDataset dataset, int series, int item, boolean selected, double entityX, double entityY) {
        if (!getItemCreateEntity(series, item, selected)) {
            return;
        }
        java.awt.Shape hotspot = area;
        if (hotspot == null) {
            double r = getDefaultEntityRadius();
            double w = r * 2;
            if (getPlot().getOrientation() == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                hotspot = new java.awt.geom.Ellipse2D.Double(entityX - r, entityY - r, w, w);
            } else {
                hotspot = new java.awt.geom.Ellipse2D.Double(entityY - r, entityX - r, w, w);
            }
        }
        java.lang.String tip = null;
        org.jfree.chart.labels.XYToolTipGenerator generator = getToolTipGenerator(series, item, selected);
        if (generator != null) {
            tip = generator.generateToolTip(dataset, series, item);
        }
        java.lang.String url = null;
        org.jfree.chart.urls.XYURLGenerator urlster = getURLGenerator(series, item, selected);
        if (urlster != null) {
            url = urlster.generateURL(dataset, series, item);
        }
        org.jfree.chart.entity.XYItemEntity entity = new org.jfree.chart.entity.XYItemEntity(hotspot, dataset, series, item, tip, url);
        entities.add(entity);
    }
}
[882845] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659858972771
GPR[SSUN]-1659858972771
-417399974
GPR[SPVATF]-1659858972996
GPR[EPVATF]-1659858973326
GPR[SPS]-1659858973326
[883795] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:832.
GPR[EPS]-1659858973722
GPR[ESUN]-1659858973722
GPR[SSUN]-1659858973722
-417399974
GPR[ESUN]-1659858973935
GPR[SSUN]-1659858973935
-417399974
GPR[ESUN]-1659858974227
GPR[SSUN]-1659858974227
-417399974
GPR[SPVATF]-1659858974444
GPR[EPVATF]-1659858974773
GPR[SPS]-1659858974773
[885243] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:829.
GPR[EPS]-1659858975169
GPR[ESUN]-1659858975169
GPR[SSUN]-1659858975169
-417399974
GPR[SPVATF]-1659858975387
GPR[EPVATF]-1659858975726
GPR[SPS]-1659858975726
[886197] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:826.
GPR[EPS]-1659858976123
GPR[SPVATF]-1659858976123
GPR[EPVATF]-1659858976453
GPR[SPS]-1659858976453
[886920] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:826.
GPR[EPS]-1659858976846
GPR[ESUN]-1659858976846
GPR[SSUN]-1659858976846
-417399974
GPR[ESUN]-1659858977062
GPR[SSUN]-1659858977062
-1690918013
GPR[ESUN]-1659858977329
GPR[SSUN]-1659858977329
-1690918013
GPR[SPVATF]-1659858977596
GPR[EPVATF]-1659858977923
GPR[SPS]-1659858977923
[888477] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4485.
GPR[EPS]-1659858978403
GPR[ESUN]-1659858978403
GPR[SSUN]-1659858978403
-1690918013
GPR[SPVATF]-1659858978675
GPR[EPVATF]-1659858979004
GPR[SPS]-1659858979004
[889549] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4484.
GPR[EPS]-1659858979475
GPR[SPVATF]-1659858979476
GPR[EPVATF]-1659858979799
GPR[SPS]-1659858979799
[890356] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4484.
GPR[EPS]-1659858980282
GPR[ESUN]-1659858980282
GPR[SSUN]-1659858980282
-1690918013
GPR[SPVATF]-1659858980556
GPR[EPVATF]-1659858980965
GPR[SPS]-1659858980965
[891517] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4495.
GPR[EPS]-1659858981443
GPR[ESUN]-1659858981443
GPR[SSUN]-1659858981443
-1690918013
GPR[ESUN]-1659858981713
GPR[SSUN]-1659858981713
-1690918013
GPR[SPVATF]-1659858981982
GPR[EPVATF]-1659858982309
GPR[SPS]-1659858982309
[892873] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4476.
GPR[EPS]-1659858982799
GPR[ESUN]-1659858982799
GPR[SSUN]-1659858982799
-417399974
GPR[ESUN]-1659858983016
GPR[SSUN]-1659858983016
-417399974
GPR[SPVATF]-1659858983232
GPR[EPVATF]-1659858983562
GPR[SPS]-1659858983562
[894036] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:717.
GPR[EPS]-1659858983962
GPR[ESUN]-1659858983962
GPR[SSUN]-1659858983962
-417399974
GPR[ESUN]-1659858984178
GPR[SSUN]-1659858984178
1600734891
GPR[SPVATF]-1659858984323
GPR[EPVATF]-1659858984656
GPR[SPS]-1659858984656
[895033] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:436.
GPR[EPS]-1659858984959
GPR[ESUN]-1659858984959
GPR[SSUN]-1659858984959
-1690918013
GPR[ESUN]-1659858985231
GPR[SSUN]-1659858985231
-1690918013
GPR[SPVATF]-1659858985495
GPR[EPVATF]-1659858985833
GPR[SPS]-1659858985833
[896391] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:805.
GPR[EPS]-1659858986317
GPR[SPVATF]-1659858986318
GPR[EPVATF]-1659858986652
GPR[SPS]-1659858986652
[897205] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:805.
GPR[EPS]-1659858987131
GPR[ESUN]-1659858987131
GPR[SSUN]-1659858987131
-1690918013
GPR[SPVATF]-1659858987472
GPR[EPVATF]-1659858987808
GPR[SPS]-1659858987808
[898361] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:803.
GPR[EPS]-1659858988287
GPR[ESUN]-1659858988287
GPR[SSUN]-1659858988287
-1690918013
GPR[SPVATF]-1659858988556
GPR[EPVATF]-1659858988897
GPR[SPS]-1659858988897
[899444] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:802.
GPR[EPS]-1659858989370
GPR[SPVATF]-1659858989370
GPR[EPVATF]-1659858989701
GPR[SPS]-1659858989701
[900257] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:802.
GPR[EPS]-1659858990183
GPR[ESUN]-1659858990183
GPR[SSUN]-1659858990183
-1690918013
GPR[ESUN]-1659858990450
GPR[SSUN]-1659858990450
1237707923
GPR[ESUN]-1659858990595
GPR[SSUN]-1659858990595
-1690918013
GPR[SPVATF]-1659858990867
GPR[EPVATF]-1659858991207
GPR[SPS]-1659858991207
[901762] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4458.
GPR[EPS]-1659858991688
GPR[ESUN]-1659858991688
GPR[SSUN]-1659858991688
-1690918013
GPR[ESUN]-1659858991962
GPR[SSUN]-1659858991962
-1690918013
GPR[SPVATF]-1659858992239
GPR[EPVATF]-1659858992577
GPR[SPS]-1659858992577
[903127] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4456.
GPR[EPS]-1659858993053
GPR[SPVATF]-1659858993053
GPR[EPVATF]-1659858993387
GPR[SPS]-1659858993387
[903940] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4456.
GPR[EPS]-1659858993866
GPR[ESUN]-1659858993866
GPR[SSUN]-1659858993866
-1690918013
GPR[SPVATF]-1659858994205
GPR[EPVATF]-1659858994538
GPR[SPS]-1659858994539
[905093] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4454.
GPR[EPS]-1659858995019
GPR[ESUN]-1659858995019
GPR[SSUN]-1659858995019
-1690918013
GPR[SPVATF]-1659858995288
GPR[EPVATF]-1659858995628
GPR[SPS]-1659858995628
[906177] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4453.
GPR[EPS]-1659858996103
GPR[ESUN]-1659858996103
GPR[SSUN]-1659858996103
-1690918013
GPR[ESUN]-1659858996376
GPR[SSUN]-1659858996376
-1690918013
GPR[SPVATF]-1659858996649
GPR[EPVATF]-1659858996988
GPR[SPS]-1659858996988
[907538] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4367.
GPR[EPS]-1659858997464
GPR[ESUN]-1659858997464
GPR[SSUN]-1659858997464
-1690918013
GPR[SPVATF]-1659858997735
GPR[EPVATF]-1659858998074
GPR[SPS]-1659858998074
[908628] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4366.
GPR[EPS]-1659858998555
GPR[SPVATF]-1659858998555
GPR[EPVATF]-1659858998895
GPR[SPS]-1659858998895
[909449] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4366.
GPR[EPS]-1659858999375
GPR[ESUN]-1659858999375
GPR[SSUN]-1659858999375
-1690918013
GPR[SPVATF]-1659858999647
GPR[EPVATF]-1659858999988
GPR[SPS]-1659858999988
[910542] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4360.
GPR[EPS]-1659859000468
GPR[SPVATF]-1659859000468
GPR[EPVATF]-1659859000869
GPR[SPS]-1659859000869
[911436] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4360.
GPR[EPS]-1659859001362
GPR[ESUN]-1659859001362
GPR[SSUN]-1659859001362
-1690918013
GPR[ESUN]-1659859001637
GPR[SSUN]-1659859001637
-1690918013
GPR[SPVATF]-1659859001908
GPR[EPVATF]-1659859002248
GPR[SPS]-1659859002248
[912805] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4357.
GPR[EPS]-1659859002731
GPR[ESUN]-1659859002731
GPR[SSUN]-1659859002731
-1690918013
GPR[ESUN]-1659859003004
GPR[SSUN]-1659859003004
-1690918013
GPR[SPVATF]-1659859003275
GPR[EPVATF]-1659859003614
GPR[SPS]-1659859003614
[914169] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4353.
GPR[EPS]-1659859004095
GPR[SPVATF]-1659859004095
GPR[EPVATF]-1659859004430
GPR[SPS]-1659859004430
[914985] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4353.
GPR[EPS]-1659859004911
GPR[ESUN]-1659859004911
GPR[SSUN]-1659859004911
-1690918013
GPR[SPVATF]-1659859005180
GPR[EPVATF]-1659859005519
GPR[SPS]-1659859005519
[916072] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1272.
GPR[EPS]-1659859005998
GPR[ESUN]-1659859005998
GPR[SSUN]-1659859005998
-1690918013
GPR[SPVATF]-1659859006271
GPR[EPVATF]-1659859006616
GPR[SPS]-1659859006616
[917172] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4388.
GPR[EPS]-1659859007098
GPR[SPVATF]-1659859007098
GPR[EPVATF]-1659859007438
GPR[SPS]-1659859007438
[918057] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4388.
GPR[EPS]-1659859007983
GPR[ESUN]-1659859007983
GPR[SSUN]-1659859007983
-1690918013
GPR[ESUN]-1659859008257
GPR[SSUN]-1659859008257
-1690918013
GPR[ESUN]-1659859008533
GPR[SSUN]-1659859008533
-1690918013
GPR[SPVATF]-1659859008810
GPR[EPVATF]-1659859009149
GPR[SPS]-1659859009149
[919706] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4505.
GPR[EPS]-1659859009632
GPR[ESUN]-1659859009632
GPR[SSUN]-1659859009632
-1690918013
GPR[ESUN]-1659859009909
GPR[SSUN]-1659859009909
-1690918013
GPR[ESUN]-1659859010188
GPR[SSUN]-1659859010188
-417399974
GPR[ESUN]-1659859010409
GPR[SSUN]-1659859010409
-417399974
GPR[SPVATF]-1659859010624
GPR[EPVATF]-1659859010963
GPR[SPS]-1659859010963
[921441] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.xy.AbstractXYItemRenderer:269.
GPR[EPS]-1659859011367
GPR[ESUN]-1659859011367
GPR[SSUN]-1659859011367
-232368544
GPR[ESUN]-1659859011481
GPR[SSUN]-1659859011481
-232368544
GPR[SPVATF]-1659859011592
GPR[EPVATF]-1659859011938
GPR[SPS]-1659859011938
[922257] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.AbstractObjectList:140.
GPR[EPS]-1659859012183
GPR[ESUN]-1659859012183
GPR[SSUN]-1659859012183
-232368544
GPR[SPVATF]-1659859012292
GPR[EPVATF]-1659859012634
GPR[SPS]-1659859012634
[922951] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.AbstractObjectList:139.
GPR[EPS]-1659859012877
GPR[ESUN]-1659859012878
GPR[SSUN]-1659859012878
2055106
GPR[ESUN]-1659859013047
GPR[SSUN]-1659859013047
2055106
GPR[SPVATF]-1659859013211
GPR[EPVATF]-1659859013551
GPR[SPS]-1659859013551
[923944] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:796.
GPR[EPS]-1659859013870
GPR[ESUN]-1659859013870
GPR[SSUN]-1659859013870
2055106
GPR[SPVATF]-1659859014038
GPR[EPVATF]-1659859014401
GPR[SPS]-1659859014401
[924879] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:795.
GPR[EPS]-1659859014805
GPR[ESUN]-1659859014806
GPR[SSUN]-1659859014806
2055106
GPR[SPVATF]-1659859014968
GPR[EPVATF]-1659859015305
GPR[SPS]-1659859015305
[925705] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:792.
GPR[EPS]-1659859015631
GPR[SPVATF]-1659859015632
GPR[EPVATF]-1659859015973
GPR[SPS]-1659859015973
[926369] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:792.
GPR[EPS]-1659859016295
GPR[ESUN]-1659859016295
GPR[SSUN]-1659859016295
2055106
GPR[ESUN]-1659859016461
GPR[SSUN]-1659859016461
2055106
GPR[SPVATF]-1659859016627
GPR[EPVATF]-1659859016962
GPR[SPS]-1659859016962
[927363] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:765.
GPR[EPS]-1659859017289
GPR[SPVATF]-1659859017289
GPR[EPVATF]-1659859017628
GPR[SPS]-1659859017628
[928028] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:765.
GPR[EPS]-1659859017954
GPR[ESUN]-1659859017954
GPR[SSUN]-1659859017954
2055106
GPR[SPVATF]-1659859018116
GPR[EPVATF]-1659859018454
GPR[SPS]-1659859018454
[928853] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:761.
GPR[EPS]-1659859018780
GPR[SPVATF]-1659859018780
GPR[EPVATF]-1659859019119
GPR[SPS]-1659859019119
[929521] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:761.
GPR[EPS]-1659859019447
GPR[ESUN]-1659859019447
GPR[SSUN]-1659859019447
2055106
GPR[ESUN]-1659859019613
GPR[SSUN]-1659859019613
2055106
GPR[SPVATF]-1659859019775
GPR[EPVATF]-1659859020113
GPR[SPS]-1659859020113
[930509] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:464.
GPR[EPS]-1659859020435
GPR[ESUN]-1659859020435
GPR[SSUN]-1659859020435
2055106
GPR[SPVATF]-1659859020599
GPR[EPVATF]-1659859020943
GPR[SPS]-1659859020943
[931344] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:463.
GPR[EPS]-1659859021270
GPR[ESUN]-1659859021270
GPR[SSUN]-1659859021270
2055106
GPR[SPVATF]-1659859021438
GPR[EPVATF]-1659859021777
GPR[SPS]-1659859021777
[932174] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:460.
GPR[EPS]-1659859022100
GPR[SPVATF]-1659859022101
GPR[EPVATF]-1659859022439
GPR[SPS]-1659859022439
[932836] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:460.
GPR[EPS]-1659859022762
GPR[ESUN]-1659859022763
GPR[SSUN]-1659859022763
2055106
GPR[ESUN]-1659859022927
GPR[SSUN]-1659859022927
2055106
GPR[SPVATF]-1659859023087
GPR[EPVATF]-1659859023431
GPR[SPS]-1659859023431
[933896] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:436.
GPR[EPS]-1659859023822
GPR[ESUN]-1659859023822
GPR[SSUN]-1659859023822
2055106
GPR[SPVATF]-1659859023984
GPR[EPVATF]-1659859024333
GPR[SPS]-1659859024333
[934741] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:435.
GPR[EPS]-1659859024667
GPR[ESUN]-1659859024667
GPR[SSUN]-1659859024667
2055106
GPR[SPVATF]-1659859024828
GPR[EPVATF]-1659859025169
GPR[SPS]-1659859025169
[935567] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:434.
GPR[EPS]-1659859025493
GPR[SPVATF]-1659859025493
GPR[EPVATF]-1659859025835
GPR[SPS]-1659859025835
[936234] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:434.
GPR[EPS]-1659859026160
GPR[ESUN]-1659859026160
GPR[SSUN]-1659859026161
2055106
GPR[SPVATF]-1659859026323
GPR[EPVATF]-1659859026668
GPR[SPS]-1659859026668
[937097] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:431.
GPR[EPS]-1659859027023
GPR[SPVATF]-1659859027023
GPR[EPVATF]-1659859027364
GPR[SPS]-1659859027364
[937761] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:431.
GPR[EPS]-1659859027687
GPR[ESUN]-1659859027687
GPR[SSUN]-1659859027687
1848383305
GPR[ESUN]-1659859028015
GPR[SSUN]-1659859028015
1848383305
GPR[SPVATF]-1659859028342
GPR[EPVATF]-1659859028695
GPR[SPS]-1659859028695
[939274] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1592.
GPR[EPS]-1659859029200
GPR[ESUN]-1659859029201
GPR[SSUN]-1659859029201
1848383305
GPR[SPVATF]-1659859029530
GPR[EPVATF]-1659859029883
GPR[SPS]-1659859029883
[940463] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1591.
GPR[EPS]-1659859030390
GPR[SPVATF]-1659859030390
GPR[EPVATF]-1659859030735
GPR[SPS]-1659859030735
[941387] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1591.
GPR[EPS]-1659859031313
GPR[ESUN]-1659859031313
GPR[SSUN]-1659859031313
1848383305
GPR[SPVATF]-1659859031648
GPR[EPVATF]-1659859031990
GPR[SPS]-1659859031990
[942569] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1589.
GPR[EPS]-1659859032496
GPR[ESUN]-1659859032496
GPR[SSUN]-1659859032496
1848383305
GPR[SPVATF]-1659859032834
GPR[EPVATF]-1659859033179
GPR[SPS]-1659859033179
[943766] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1588.
GPR[EPS]-1659859033692
GPR[SPVATF]-1659859033692
GPR[EPVATF]-1659859034039
GPR[SPS]-1659859034039
[944625] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1588.
GPR[EPS]-1659859034551
GPR[ESUN]-1659859034551
GPR[SSUN]-1659859034551
1848383305
GPR[ESUN]-1659859034886
GPR[SSUN]-1659859034886
1848383305
GPR[SPVATF]-1659859035219
GPR[EPVATF]-1659859035559
GPR[SPS]-1659859035559
[946145] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1549.
GPR[EPS]-1659859036071
GPR[SPVATF]-1659859036071
GPR[EPVATF]-1659859036415
GPR[SPS]-1659859036415
[946998] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1549.
GPR[EPS]-1659859036924
GPR[ESUN]-1659859036924
GPR[SSUN]-1659859036924
1848383305
GPR[SPVATF]-1659859037335
GPR[EPVATF]-1659859037683
GPR[SPS]-1659859037683
[948278] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1546.
GPR[EPS]-1659859038204
GPR[SPVATF]-1659859038204
GPR[EPVATF]-1659859038544
GPR[SPS]-1659859038544
[949132] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1546.
GPR[EPS]-1659859039058
GPR[ESUN]-1659859039058
GPR[SSUN]-1659859039058
1848383305
GPR[SPVATF]-1659859039396
GPR[EPVATF]-1659859039743
GPR[SPS]-1659859039743
[950326] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1545.
GPR[EPS]-1659859040252
GPR[ESUN]-1659859040252
GPR[SSUN]-1659859040252
1848383305
GPR[SPVATF]-1659859040585
GPR[EPVATF]-1659859040934
GPR[SPS]-1659859040934
[951522] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1544.
GPR[EPS]-1659859041448
GPR[ESUN]-1659859041448
GPR[SSUN]-1659859041448
1848383305
GPR[SPVATF]-1659859041782
GPR[EPVATF]-1659859042133
GPR[SPS]-1659859042133
[952720] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1543.
GPR[EPS]-1659859042646
GPR[ESUN]-1659859042646
GPR[SSUN]-1659859042646
1848383305
GPR[SPVATF]-1659859042977
GPR[EPVATF]-1659859043395
GPR[SPS]-1659859043395
[953981] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1542.
GPR[EPS]-1659859043907
GPR[ESUN]-1659859043907
GPR[SSUN]-1659859043907
1848383305
GPR[SPVATF]-1659859044238
GPR[EPVATF]-1659859044585
GPR[SPS]-1659859044585
[955170] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1257.
GPR[EPS]-1659859045096
GPR[SPVATF]-1659859045096
GPR[EPVATF]-1659859045449
GPR[SPS]-1659859045449
[956036] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1257.
GPR[EPS]-1659859045962
GPR[ESUN]-1659859045963
GPR[SSUN]-1659859045963
1848383305
GPR[SPVATF]-1659859046297
GPR[EPVATF]-1659859046651
GPR[SPS]-1659859046651
[957235] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1254.
GPR[EPS]-1659859047161
GPR[SPVATF]-1659859047161
GPR[EPVATF]-1659859047511
GPR[SPS]-1659859047511
[958097] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.StandardChartTheme:1254.
GPR[EPS]-1659859048023
GPR[ESUN]-1659859048023
GPR[SSUN]-1659859048023
-1685022938
GPR[ESUN]-1659859048191
GPR[SSUN]-1659859048191
-1685022938
GPR[SPVATF]-1659859048354
GPR[EPVATF]-1659859048711
GPR[SPS]-1659859048711
[959129] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:1298.
GPR[EPS]-1659859049055
GPR[SPVATF]-1659859049056
GPR[EPVATF]-1659859049403
GPR[SPS]-1659859049404
[959816] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:1298.
GPR[EPS]-1659859049742
GPR[ESUN]-1659859049742
GPR[SSUN]-1659859049742
-1685022938
GPR[SPVATF]-1659859049908
GPR[EPVATF]-1659859050263
GPR[SPS]-1659859050263
[960748] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:1297.
GPR[EPS]-1659859050674
GPR[ESUN]-1659859050674
GPR[SSUN]-1659859050674
-1685022938
GPR[ESUN]-1659859050844
GPR[SSUN]-1659859050844
-1685022938
GPR[SPVATF]-1659859051011
GPR[EPVATF]-1659859051367
GPR[SPS]-1659859051367
[961784] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:800.
GPR[EPS]-1659859051710
GPR[SPVATF]-1659859051711
GPR[EPVATF]-1659859052062
GPR[SPS]-1659859052062
[962476] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:800.
GPR[EPS]-1659859052402
GPR[ESUN]-1659859052402
GPR[SSUN]-1659859052402
-1685022938
GPR[SPVATF]-1659859052571
GPR[EPVATF]-1659859052925
GPR[SPS]-1659859052925
[963341] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:799.
GPR[EPS]-1659859053267
GPR[ESUN]-1659859053268
GPR[SSUN]-1659859053268
-1685022938
GPR[ESUN]-1659859053440
GPR[SSUN]-1659859053440
-1685022938
GPR[ESUN]-1659859053609
GPR[SSUN]-1659859053609
-1685022938
GPR[ESUN]-1659859053778
GPR[SSUN]-1659859053778
-1685022938
GPR[SPVATF]-1659859053943
GPR[EPVATF]-1659859054300
GPR[SPS]-1659859054300
[964718] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:2043.
GPR[EPS]-1659859054644
GPR[ESUN]-1659859054644
GPR[SSUN]-1659859054644
-1685022938
GPR[SPVATF]-1659859054813
GPR[EPVATF]-1659859055174
GPR[SPS]-1659859055174
[965590] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:2042.
GPR[EPS]-1659859055516
GPR[SPVATF]-1659859055516
GPR[EPVATF]-1659859055866
GPR[SPS]-1659859055866
[966280] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:2042.
GPR[EPS]-1659859056206
GPR[ESUN]-1659859056206
GPR[SSUN]-1659859056206
-1685022938
GPR[SPVATF]-1659859056376
GPR[EPVATF]-1659859056737
GPR[SPS]-1659859056737
[967158] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:2041.
GPR[EPS]-1659859057084
GPR[ESUN]-1659859057084
GPR[SSUN]-1659859057084
-1685022938
GPR[SPVATF]-1659859057256
GPR[EPVATF]-1659859057621
GPR[SPS]-1659859057621
[968037] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:2038.
GPR[EPS]-1659859057963
GPR[SPVATF]-1659859057963
GPR[EPVATF]-1659859058323
GPR[SPS]-1659859058323
[968737] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:2038.
GPR[EPS]-1659859058664
GPR[ESUN]-1659859058664
GPR[SSUN]-1659859058664
-1685022938
GPR[ESUN]-1659859058835
GPR[SSUN]-1659859058835
-1685022938
GPR[SPVATF]-1659859058999
GPR[EPVATF]-1659859059431
GPR[SPS]-1659859059431
[969845] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:2024.
GPR[EPS]-1659859059771
GPR[ESUN]-1659859059771
GPR[SSUN]-1659859059771
-1685022938
GPR[ESUN]-1659859059942
GPR[SSUN]-1659859059942
-1685022938
GPR[SPVATF]-1659859060114
GPR[EPVATF]-1659859060469
GPR[SPS]-1659859060469
[970884] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:1933.
GPR[EPS]-1659859060810
GPR[ESUN]-1659859060810
GPR[SSUN]-1659859060810
-1685022938
GPR[SPVATF]-1659859060983
GPR[EPVATF]-1659859061337
GPR[SPS]-1659859061337
[971751] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:1932.
GPR[EPS]-1659859061677
GPR[SPVATF]-1659859061678
GPR[EPVATF]-1659859062027
GPR[SPS]-1659859062027
[972435] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:1932.
GPR[EPS]-1659859062361
GPR[ESUN]-1659859062361
GPR[SSUN]-1659859062361
-1685022938
GPR[SPVATF]-1659859062530
GPR[EPVATF]-1659859062881
GPR[SPS]-1659859062881
[973296] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:1931.
GPR[EPS]-1659859063222
GPR[ESUN]-1659859063223
GPR[SSUN]-1659859063223
-1685022938
GPR[ESUN]-1659859063393
GPR[SSUN]-1659859063393
-1685022938
GPR[SPVATF]-1659859063562
GPR[EPVATF]-1659859063917
GPR[SPS]-1659859063917
[974333] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:1917.
GPR[EPS]-1659859064259
GPR[ESUN]-1659859064259
GPR[SSUN]-1659859064259
-1685022938
GPR[SPVATF]-1659859064430
GPR[EPVATF]-1659859064789
GPR[SPS]-1659859064789
[975208] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:1914.
GPR[EPS]-1659859065134
GPR[SPVATF]-1659859065134
GPR[EPVATF]-1659859065490
GPR[SPS]-1659859065490
[975913] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:1914.
GPR[EPS]-1659859065839
GPR[ESUN]-1659859065839
GPR[SSUN]-1659859065839
-1690918013
GPR[ESUN]-1659859066121
GPR[SSUN]-1659859066121
-1690918013
GPR[SPVATF]-1659859066396
GPR[EPVATF]-1659859066757
GPR[SPS]-1659859066757
[977326] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1522.
GPR[EPS]-1659859067252
GPR[ESUN]-1659859067252
GPR[SSUN]-1659859067252
-1690918013
GPR[SPVATF]-1659859067595
GPR[EPVATF]-1659859067959
GPR[SPS]-1659859067959
[978531] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1520.
GPR[EPS]-1659859068457
GPR[ESUN]-1659859068457
GPR[SSUN]-1659859068457
-1690918013
GPR[ESUN]-1659859068734
GPR[SSUN]-1659859068734
-1690918013
GPR[SPVATF]-1659859069011
GPR[EPVATF]-1659859069365
GPR[SPS]-1659859069365
[979952] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1518.
GPR[EPS]-1659859069878
GPR[ESUN]-1659859069878
GPR[SSUN]-1659859069878
-1690918013
GPR[SPVATF]-1659859070158
GPR[EPVATF]-1659859070513
GPR[SPS]-1659859070513
[981085] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1515.
GPR[EPS]-1659859071011
GPR[SPVATF]-1659859071012
GPR[EPVATF]-1659859071363
GPR[SPS]-1659859071363
[981937] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1515.
GPR[EPS]-1659859071863
GPR[ESUN]-1659859071863
GPR[SSUN]-1659859071863
-1690918013
GPR[ESUN]-1659859072145
GPR[SSUN]-1659859072145
-1690918013
GPR[SPVATF]-1659859072419
GPR[EPVATF]-1659859072771
GPR[SPS]-1659859072771
[983337] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1501.
GPR[EPS]-1659859073263
GPR[ESUN]-1659859073264
GPR[SSUN]-1659859073264
-1690918013
GPR[SPVATF]-1659859073542
GPR[EPVATF]-1659859073897
GPR[SPS]-1659859073897
[984463] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1500.
GPR[EPS]-1659859074389
GPR[ESUN]-1659859074389
GPR[SSUN]-1659859074389
-1690918013
GPR[ESUN]-1659859074672
GPR[SSUN]-1659859074672
-1690918013
GPR[SPVATF]-1659859075024
GPR[EPVATF]-1659859075388
GPR[SPS]-1659859075388
[985960] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1271.
GPR[EPS]-1659859075886
GPR[SPVATF]-1659859075886
GPR[EPVATF]-1659859076244
GPR[SPS]-1659859076244
[986804] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1271.
GPR[EPS]-1659859076730
GPR[ESUN]-1659859076730
GPR[SSUN]-1659859076730
-1690918013
GPR[ESUN]-1659859077003
GPR[SSUN]-1659859077003
-1685022938
GPR[SPVATF]-1659859077170
GPR[EPVATF]-1659859077534
GPR[SPS]-1659859077534
[987952] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:2907.
GPR[EPS]-1659859077878
GPR[ESUN]-1659859077878
GPR[SSUN]-1659859077878
-1685022938
GPR[SPVATF]-1659859078052
GPR[EPVATF]-1659859078417
GPR[SPS]-1659859078417
[988842] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:2906.
GPR[EPS]-1659859078768
GPR[SPVATF]-1659859078768
GPR[EPVATF]-1659859079128
GPR[SPS]-1659859079128
[989549] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:2906.
GPR[EPS]-1659859079475
GPR[ESUN]-1659859079475
GPR[SSUN]-1659859079475
2055106
GPR[ESUN]-1659859079648
GPR[SSUN]-1659859079648
2055106
GPR[SPVATF]-1659859079812
GPR[EPVATF]-1659859080171
GPR[SPS]-1659859080171
[990580] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:1236.
GPR[EPS]-1659859080506
GPR[ESUN]-1659859080506
GPR[SSUN]-1659859080506
2490626
GPR[ESUN]-1659859080684
GPR[SSUN]-1659859080684
2490626
GPR[SPVATF]-1659859080862
GPR[EPVATF]-1659859081226
GPR[SPS]-1659859081226
[991664] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:1201.
GPR[EPS]-1659859081590
GPR[ESUN]-1659859081590
GPR[SSUN]-1659859081590
2055106
GPR[SPVATF]-1659859081755
GPR[EPVATF]-1659859082116
GPR[SPS]-1659859082116
[992524] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:1225.
GPR[EPS]-1659859082450
GPR[ESUN]-1659859082450
GPR[SSUN]-1659859082450
2055106
GPR[SPVATF]-1659859082614
GPR[EPVATF]-1659859082972
GPR[SPS]-1659859082972
[993384] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:1224.
GPR[EPS]-1659859083310
GPR[SPVATF]-1659859083310
GPR[EPVATF]-1659859083663
GPR[SPS]-1659859083663
[994147] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:1224.
GPR[EPS]-1659859084073
GPR[ESUN]-1659859084074
GPR[SSUN]-1659859084074
1776071035
GPR[SPVATF]-1659859084172
GPR[EPVATF]-1659859084444
GPR[SPS]-1659859084444
[994778] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.SpreadsheetDate:452.
GPR[EPS]-1659859084704
GPR[SPVATF]-1659859084704
GPR[EPVATF]-1659859084973
GPR[SPS]-1659859084973
[995305] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.SpreadsheetDate:452.
GPR[EPS]-1659859085231
GPR[ESUN]-1659859085232
GPR[SSUN]-1659859085232
1394353123
GPR[SPVATF]-1659859085334
GPR[EPVATF]-1659859085606
GPR[SPS]-1659859085606
[995817] ERROR ConstraintModelBuilder - Unable to compile the change: 
public abstract class SerialDate implements java.lang.Comparable , java.io.Serializable , org.jfree.data.time.MonthConstants {
    private static final long serialVersionUID = -293716040467423637L;

    public static final java.text.DateFormatSymbols DATE_FORMAT_SYMBOLS = new java.text.SimpleDateFormat().getDateFormatSymbols();

    public static final int SERIAL_LOWER_BOUND = 2;

    public static final int SERIAL_UPPER_BOUND = 2958465;

    public static final int MINIMUM_YEAR_SUPPORTED = 1900;

    public static final int MAXIMUM_YEAR_SUPPORTED = 9999;

    public static final int MONDAY = java.util.Calendar.MONDAY;

    public static final int TUESDAY = java.util.Calendar.TUESDAY;

    public static final int WEDNESDAY = java.util.Calendar.WEDNESDAY;

    public static final int THURSDAY = java.util.Calendar.THURSDAY;

    public static final int FRIDAY = java.util.Calendar.FRIDAY;

    public static final int SATURDAY = java.util.Calendar.SATURDAY;

    public static final int SUNDAY = java.util.Calendar.SUNDAY;

    static final int[] LAST_DAY_OF_MONTH = new int[]{ 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

    static final int[] AGGREGATE_DAYS_TO_END_OF_MONTH = new int[]{ 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365 };

    static final int[] AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH = new int[]{ 0, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365 };

    static final int[] LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH = new int[]{ 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366 };

    static final int[] LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH = new int[]{ 0, 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366 };

    public static final int FIRST_WEEK_IN_MONTH = 1;

    public static final int SECOND_WEEK_IN_MONTH = 2;

    public static final int THIRD_WEEK_IN_MONTH = 3;

    public static final int FOURTH_WEEK_IN_MONTH = 4;

    public static final int LAST_WEEK_IN_MONTH = 0;

    public static final int INCLUDE_NONE = 0;

    public static final int INCLUDE_FIRST = 1;

    public static final int INCLUDE_SECOND = 2;

    public static final int INCLUDE_BOTH = 3;

    public static final int PRECEDING = -1;

    public static final int NEAREST = 0;

    public static final int FOLLOWING = 1;

    private java.lang.String description;

    protected SerialDate() {
    }

    public static boolean isValidWeekdayCode(final int code) {
        switch (code) {
            case org.jfree.data.time.SerialDate.SUNDAY :
            case org.jfree.data.time.SerialDate.MONDAY :
            case org.jfree.data.time.SerialDate.TUESDAY :
            case org.jfree.data.time.SerialDate.WEDNESDAY :
            case org.jfree.data.time.SerialDate.THURSDAY :
            case org.jfree.data.time.SerialDate.FRIDAY :
            case org.jfree.data.time.SerialDate.SATURDAY :
                return true;
            default :
                return false;
        }
    }

    public static int stringToWeekdayCode(java.lang.String s) {
        final java.lang.String[] shortWeekdayNames = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getShortWeekdays();
        final java.lang.String[] weekDayNames = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getWeekdays();
        int result = -1;
        s = s.trim();
        for (int i = 0; i < weekDayNames.length; i++) {
            if (s.equals(shortWeekdayNames[i])) {
                result = i;
                break;
            }
            if (s.equals(weekDayNames[i])) {
                result = i;
                break;
            }
        }
        return result;
    }

    public static java.lang.String weekdayCodeToString(final int weekday) {
        final java.lang.String[] weekdays = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getWeekdays();
        return weekdays[weekday];
    }

    public static java.lang.String[] getMonths() {
        return org.jfree.data.time.SerialDate.getMonths(false);
    }

    public static java.lang.String[] getMonths(final boolean shortened) {
        if (shortened) {
            return org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getShortMonths();
        } else {
            return org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getMonths();
        }
    }

    public static boolean isValidMonthCode(final int code) {
        switch (code) {
            case org.jfree.data.time.MonthConstants.JANUARY :
            case org.jfree.data.time.MonthConstants.FEBRUARY :
            case org.jfree.data.time.MonthConstants.MARCH :
            case org.jfree.data.time.MonthConstants.APRIL :
            case org.jfree.data.time.MonthConstants.MAY :
            case org.jfree.data.time.MonthConstants.JUNE :
            case org.jfree.data.time.MonthConstants.JULY :
            case org.jfree.data.time.MonthConstants.AUGUST :
            case org.jfree.data.time.MonthConstants.SEPTEMBER :
            case org.jfree.data.time.MonthConstants.OCTOBER :
            case org.jfree.data.time.MonthConstants.NOVEMBER :
            case org.jfree.data.time.MonthConstants.DECEMBER :
                return true;
            default :
                return false;
        }
    }

    public static int monthCodeToQuarter(final int code) {
        switch (code) {
            case org.jfree.data.time.MonthConstants.JANUARY :
            case org.jfree.data.time.MonthConstants.FEBRUARY :
            case org.jfree.data.time.MonthConstants.MARCH :
                return 1;
            case org.jfree.data.time.MonthConstants.APRIL :
            case org.jfree.data.time.MonthConstants.MAY :
            case org.jfree.data.time.MonthConstants.JUNE :
                return 2;
            case org.jfree.data.time.MonthConstants.JULY :
            case org.jfree.data.time.MonthConstants.AUGUST :
            case org.jfree.data.time.MonthConstants.SEPTEMBER :
                return 3;
            case org.jfree.data.time.MonthConstants.OCTOBER :
            case org.jfree.data.time.MonthConstants.NOVEMBER :
            case org.jfree.data.time.MonthConstants.DECEMBER :
                return 4;
            default :
                throw new java.lang.IllegalArgumentException("SerialDate.monthCodeToQuarter: invalid month code.");
        }
    }

    public static java.lang.String monthCodeToString(final int month) {
        return org.jfree.data.time.SerialDate.monthCodeToString(month, false);
    }

    public static java.lang.String monthCodeToString(final int month, final boolean shortened) {
        if (!org.jfree.data.time.SerialDate.isValidMonthCode(month)) {
            throw new java.lang.IllegalArgumentException("SerialDate.monthCodeToString: month outside valid range.");
        }
        final java.lang.String[] months;
        if (shortened) {
            months = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getShortMonths();
        } else {
            months = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getMonths();
        }
        return months[month - 1];
    }

    public static int stringToMonthCode(java.lang.String s) {
        final java.lang.String[] shortMonthNames = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getShortMonths();
        final java.lang.String[] monthNames = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getMonths();
        int result = -1;
        s = s.trim();
        try {
            result = java.lang.Integer.parseInt(s);
        } catch (java.lang.NumberFormatException e) {
        }
        if ((result < 1) || (result > 12)) {
            for (int i = 0; i < monthNames.length; i++) {
                if (s.equals(shortMonthNames[i])) {
                    result = i + 1;
                    break;
                }
                if (s.equals(monthNames[i])) {
                    result = i + 1;
                    break;
                }
            }
        }
        return result;
    }

    public static boolean isValidWeekInMonthCode(final int code) {
        switch (code) {
            case org.jfree.data.time.SerialDate.FIRST_WEEK_IN_MONTH :
            case org.jfree.data.time.SerialDate.SECOND_WEEK_IN_MONTH :
            case org.jfree.data.time.SerialDate.THIRD_WEEK_IN_MONTH :
            case org.jfree.data.time.SerialDate.FOURTH_WEEK_IN_MONTH :
            case org.jfree.data.time.SerialDate.LAST_WEEK_IN_MONTH :
                return true;
            default :
                return false;
        }
    }

    public static boolean isLeapYear(final int yyyy) {
        if ((yyyy % 4) != 0) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(981).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.SERIAL_UPPER_BOUND",org.jfree.data.time.SerialDate.SERIAL_UPPER_BOUND);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.THURSDAY",org.jfree.data.time.SerialDate.THURSDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS",org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.INCLUDE_NONE",org.jfree.data.time.SerialDate.INCLUDE_NONE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.FIRST_WEEK_IN_MONTH",org.jfree.data.time.SerialDate.FIRST_WEEK_IN_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.LAST_WEEK_IN_MONTH",org.jfree.data.time.SerialDate.LAST_WEEK_IN_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.MAXIMUM_YEAR_SUPPORTED",org.jfree.data.time.SerialDate.MAXIMUM_YEAR_SUPPORTED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.LAST_DAY_OF_MONTH",org.jfree.data.time.SerialDate.LAST_DAY_OF_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.THIRD_WEEK_IN_MONTH",org.jfree.data.time.SerialDate.THIRD_WEEK_IN_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.WEDNESDAY",org.jfree.data.time.SerialDate.WEDNESDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH",org.jfree.data.time.SerialDate.LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.INCLUDE_FIRST",org.jfree.data.time.SerialDate.INCLUDE_FIRST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.SECOND_WEEK_IN_MONTH",org.jfree.data.time.SerialDate.SECOND_WEEK_IN_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH",org.jfree.data.time.SerialDate.LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.AGGREGATE_DAYS_TO_END_OF_MONTH",org.jfree.data.time.SerialDate.AGGREGATE_DAYS_TO_END_OF_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.TUESDAY",org.jfree.data.time.SerialDate.TUESDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.MINIMUM_YEAR_SUPPORTED",org.jfree.data.time.SerialDate.MINIMUM_YEAR_SUPPORTED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.NEAREST",org.jfree.data.time.SerialDate.NEAREST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.SUNDAY",org.jfree.data.time.SerialDate.SUNDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH",org.jfree.data.time.SerialDate.AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.FOURTH_WEEK_IN_MONTH",org.jfree.data.time.SerialDate.FOURTH_WEEK_IN_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.SATURDAY",org.jfree.data.time.SerialDate.SATURDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.SERIAL_LOWER_BOUND",org.jfree.data.time.SerialDate.SERIAL_LOWER_BOUND);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.PRECEDING",org.jfree.data.time.SerialDate.PRECEDING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.INCLUDE_SECOND",org.jfree.data.time.SerialDate.INCLUDE_SECOND);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.INCLUDE_BOTH",org.jfree.data.time.SerialDate.INCLUDE_BOTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.FOLLOWING",org.jfree.data.time.SerialDate.FOLLOWING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.FRIDAY",org.jfree.data.time.SerialDate.FRIDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("org.jfree.data.time.SerialDate.MONDAY",org.jfree.data.time.SerialDate.MONDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectInput("yyyy",yyyy);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(981).collectionEnds();
            }
            if (runtimeAngelicValue)
                return false;

        } else if ((yyyy % 400) == 0) {
            return true;
        } else if ((yyyy % 100) == 0) {
            return false;
        } else {
            return true;
        }
    }

    public static int leapYearCount(final int yyyy) {
        final int leap4 = (yyyy - 1896) / 4;
        final int leap100 = (yyyy - 1800) / 100;
        final int leap400 = (yyyy - 1600) / 400;
        return (leap4 - leap100) + leap400;
    }

    public static int lastDayOfMonth(final int month, final int yyyy) {
        final int result = org.jfree.data.time.SerialDate.LAST_DAY_OF_MONTH[month];
        if (month != org.jfree.data.time.MonthConstants.FEBRUARY) {
            return result;
        } else if (org.jfree.data.time.SerialDate.isLeapYear(yyyy)) {
            return result + 1;
        } else {
            return result;
        }
    }

    public static org.jfree.data.time.SerialDate addDays(final int days, final org.jfree.data.time.SerialDate base) {
        final int serialDayNumber = base.toSerial() + days;
        return org.jfree.data.time.SerialDate.createInstance(serialDayNumber);
    }

    public static org.jfree.data.time.SerialDate addMonths(final int months, final org.jfree.data.time.SerialDate base) {
        final int yy = ((((12 * base.getYYYY()) + base.getMonth()) + months) - 1) / 12;
        final int mm = (((((12 * base.getYYYY()) + base.getMonth()) + months) - 1) % 12) + 1;
        final int dd = java.lang.Math.min(base.getDayOfMonth(), org.jfree.data.time.SerialDate.lastDayOfMonth(mm, yy));
        return org.jfree.data.time.SerialDate.createInstance(dd, mm, yy);
    }

    public static org.jfree.data.time.SerialDate addYears(final int years, final org.jfree.data.time.SerialDate base) {
        final int baseY = base.getYYYY();
        final int baseM = base.getMonth();
        final int baseD = base.getDayOfMonth();
        final int targetY = baseY + years;
        final int targetD = java.lang.Math.min(baseD, org.jfree.data.time.SerialDate.lastDayOfMonth(baseM, targetY));
        return org.jfree.data.time.SerialDate.createInstance(targetD, baseM, targetY);
    }

    public static org.jfree.data.time.SerialDate getPreviousDayOfWeek(final int targetWeekday, final org.jfree.data.time.SerialDate base) {
        if (!org.jfree.data.time.SerialDate.isValidWeekdayCode(targetWeekday)) {
            throw new java.lang.IllegalArgumentException("Invalid day-of-the-week code.");
        }
        final int adjust;
        final int baseDOW = base.getDayOfWeek();
        if (baseDOW > targetWeekday) {
            adjust = java.lang.Math.min(0, targetWeekday - baseDOW);
        } else {
            adjust = (-7) + java.lang.Math.max(0, targetWeekday - baseDOW);
        }
        return org.jfree.data.time.SerialDate.addDays(adjust, base);
    }

    public static org.jfree.data.time.SerialDate getFollowingDayOfWeek(final int targetWeekday, final org.jfree.data.time.SerialDate base) {
        if (!org.jfree.data.time.SerialDate.isValidWeekdayCode(targetWeekday)) {
            throw new java.lang.IllegalArgumentException("Invalid day-of-the-week code.");
        }
        final int adjust;
        final int baseDOW = base.getDayOfWeek();
        if (baseDOW > targetWeekday) {
            adjust = 7 + java.lang.Math.min(0, targetWeekday - baseDOW);
        } else {
            adjust = java.lang.Math.max(0, targetWeekday - baseDOW);
        }
        return org.jfree.data.time.SerialDate.addDays(adjust, base);
    }

    public static org.jfree.data.time.SerialDate getNearestDayOfWeek(final int targetDOW, final org.jfree.data.time.SerialDate base) {
        if (!org.jfree.data.time.SerialDate.isValidWeekdayCode(targetDOW)) {
            throw new java.lang.IllegalArgumentException("Invalid day-of-the-week code.");
        }
        final int baseDOW = base.getDayOfWeek();
        int adjust = -java.lang.Math.abs(targetDOW - baseDOW);
        if (adjust >= 4) {
            adjust = 7 - adjust;
        }
        if (adjust <= (-4)) {
            adjust = 7 + adjust;
        }
        return org.jfree.data.time.SerialDate.addDays(adjust, base);
    }

    public org.jfree.data.time.SerialDate getEndOfCurrentMonth(final org.jfree.data.time.SerialDate base) {
        final int last = org.jfree.data.time.SerialDate.lastDayOfMonth(base.getMonth(), base.getYYYY());
        return org.jfree.data.time.SerialDate.createInstance(last, base.getMonth(), base.getYYYY());
    }

    public static java.lang.String weekInMonthToString(final int count) {
        switch (count) {
            case org.jfree.data.time.SerialDate.FIRST_WEEK_IN_MONTH :
                return "First";
            case org.jfree.data.time.SerialDate.SECOND_WEEK_IN_MONTH :
                return "Second";
            case org.jfree.data.time.SerialDate.THIRD_WEEK_IN_MONTH :
                return "Third";
            case org.jfree.data.time.SerialDate.FOURTH_WEEK_IN_MONTH :
                return "Fourth";
            case org.jfree.data.time.SerialDate.LAST_WEEK_IN_MONTH :
                return "Last";
            default :
                return "SerialDate.weekInMonthToString(): invalid code.";
        }
    }

    public static java.lang.String relativeToString(final int relative) {
        switch (relative) {
            case org.jfree.data.time.SerialDate.PRECEDING :
                return "Preceding";
            case org.jfree.data.time.SerialDate.NEAREST :
                return "Nearest";
            case org.jfree.data.time.SerialDate.FOLLOWING :
                return "Following";
            default :
                return "ERROR : Relative To String";
        }
    }

    public static org.jfree.data.time.SerialDate createInstance(final int day, final int month, final int yyyy) {
        return new org.jfree.data.time.SpreadsheetDate(day, month, yyyy);
    }

    public static org.jfree.data.time.SerialDate createInstance(final int serial) {
        return new org.jfree.data.time.SpreadsheetDate(serial);
    }

    public static org.jfree.data.time.SerialDate createInstance(final java.util.Date date) {
        final java.util.GregorianCalendar calendar = new java.util.GregorianCalendar();
        calendar.setTime(date);
        return new org.jfree.data.time.SpreadsheetDate(calendar.get(java.util.Calendar.DATE), calendar.get(java.util.Calendar.MONTH) + 1, calendar.get(java.util.Calendar.YEAR));
    }

    public abstract int toSerial();

    public abstract java.util.Date toDate();

    public java.lang.String getDescription() {
        return this.description;
    }

    public void setDescription(final java.lang.String description) {
        this.description = description;
    }

    public java.lang.String toString() {
        return (((getDayOfMonth() + "-") + org.jfree.data.time.SerialDate.monthCodeToString(getMonth())) + "-") + getYYYY();
    }

    public abstract int getYYYY();

    public abstract int getMonth();

    public abstract int getDayOfMonth();

    public abstract int getDayOfWeek();

    public abstract int compare(org.jfree.data.time.SerialDate other);

    public abstract boolean isOn(org.jfree.data.time.SerialDate other);

    public abstract boolean isBefore(org.jfree.data.time.SerialDate other);

    public abstract boolean isOnOrBefore(org.jfree.data.time.SerialDate other);

    public abstract boolean isAfter(org.jfree.data.time.SerialDate other);

    public abstract boolean isOnOrAfter(org.jfree.data.time.SerialDate other);

    public abstract boolean isInRange(org.jfree.data.time.SerialDate d1, org.jfree.data.time.SerialDate d2);

    public abstract boolean isInRange(org.jfree.data.time.SerialDate d1, org.jfree.data.time.SerialDate d2, int include);

    public org.jfree.data.time.SerialDate getPreviousDayOfWeek(final int targetDOW) {
        return org.jfree.data.time.SerialDate.getPreviousDayOfWeek(targetDOW, this);
    }

    public org.jfree.data.time.SerialDate getFollowingDayOfWeek(final int targetDOW) {
        return org.jfree.data.time.SerialDate.getFollowingDayOfWeek(targetDOW, this);
    }

    public org.jfree.data.time.SerialDate getNearestDayOfWeek(final int targetDOW) {
        return org.jfree.data.time.SerialDate.getNearestDayOfWeek(targetDOW, this);
    }
}
[995818] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659859085744
GPR[SSUN]-1659859085744
1237707923
GPR[ESUN]-1659859085900
GPR[SSUN]-1659859085900
-597949146
GPR[SPVATF]-1659859085995
GPR[EPVATF]-1659859086276
GPR[SPS]-1659859086276
[996606] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.RectangleInsets:191.
GPR[EPS]-1659859086533
GPR[SPVATF]-1659859086533
GPR[EPVATF]-1659859086809
GPR[SPS]-1659859086809
[997172] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.RectangleInsets:191.
GPR[EPS]-1659859087098
GPR[ESUN]-1659859087098
GPR[SSUN]-1659859087098
-597949146
GPR[SPVATF]-1659859087195
GPR[EPVATF]-1659859087467
GPR[SPS]-1659859087467
[997800] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.RectangleInsets:188.
GPR[EPS]-1659859087726
GPR[SPVATF]-1659859087726
GPR[EPVATF]-1659859087999
GPR[SPS]-1659859087999
[998343] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.RectangleInsets:188.
GPR[EPS]-1659859088269
GPR[ESUN]-1659859088269
GPR[SSUN]-1659859088269
-597949146
GPR[ESUN]-1659859088369
GPR[SSUN]-1659859088369
-597949146
GPR[SPVATF]-1659859088464
GPR[EPVATF]-1659859088743
GPR[SPS]-1659859088743
[999072] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.RectangleInsets:184.
GPR[EPS]-1659859088998
GPR[SPVATF]-1659859088998
GPR[EPVATF]-1659859089272
GPR[SPS]-1659859089272
[999610] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.RectangleInsets:184.
GPR[EPS]-1659859089536
GPR[ESUN]-1659859089536
GPR[SSUN]-1659859089536
-1685022938
GPR[ESUN]-1659859089709
GPR[SSUN]-1659859089709
1600734891
GPR[SPVATF]-1659859089862
GPR[EPVATF]-1659859090226
GPR[SPS]-1659859090226
[1000618] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:495.
GPR[EPS]-1659859090544
GPR[ESUN]-1659859090544
GPR[SSUN]-1659859090544
1394353123
GPR[SPVATF]-1659859090649
GPR[EPVATF]-1659859090934
GPR[SPS]-1659859090934
[1001281] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.SerialDate:499.
GPR[EPS]-1659859091207
GPR[ESUN]-1659859091207
GPR[SSUN]-1659859091207
68477
GPR[ESUN]-1659859091307
GPR[SSUN]-1659859091307
68477
GPR[SPVATF]-1659859091404
GPR[EPVATF]-1659859091682
GPR[SPS]-1659859091683
[1002017] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Day:348.
GPR[EPS]-1659859091943
GPR[ESUN]-1659859091943
GPR[SSUN]-1659859091943
68477
GPR[SPVATF]-1659859092047
GPR[EPVATF]-1659859092320
GPR[SPS]-1659859092320
[1002655] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Day:347.
GPR[EPS]-1659859092581
GPR[ESUN]-1659859092582
GPR[SSUN]-1659859092582
68477
GPR[SPVATF]-1659859092681
GPR[EPVATF]-1659859092957
GPR[SPS]-1659859092957
[1003301] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Day:346.
GPR[EPS]-1659859093227
GPR[ESUN]-1659859093227
GPR[SSUN]-1659859093227
68477
GPR[ESUN]-1659859093331
GPR[SSUN]-1659859093331
68477
GPR[ESUN]-1659859093429
GPR[SSUN]-1659859093429
68477
GPR[ESUN]-1659859093525
GPR[SSUN]-1659859093525
68477
GPR[ESUN]-1659859093622
GPR[SSUN]-1659859093622
68477
GPR[SPVATF]-1659859093718
GPR[EPVATF]-1659859094000
GPR[SPS]-1659859094000
[1004335] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Day:326.
GPR[EPS]-1659859094261
GPR[ESUN]-1659859094262
GPR[SSUN]-1659859094262
68477
GPR[SPVATF]-1659859094368
GPR[EPVATF]-1659859094645
GPR[SPS]-1659859094645
[1004978] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Day:325.
GPR[EPS]-1659859094904
GPR[ESUN]-1659859094904
GPR[SSUN]-1659859094904
68477
GPR[SPVATF]-1659859095086
GPR[EPVATF]-1659859095368
GPR[SPS]-1659859095368
[1005702] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Day:324.
GPR[EPS]-1659859095628
GPR[ESUN]-1659859095628
GPR[SSUN]-1659859095628
68477
GPR[ESUN]-1659859095727
GPR[SSUN]-1659859095727
68477
GPR[ESUN]-1659859095824
GPR[SSUN]-1659859095824
68477
GPR[ESUN]-1659859095922
GPR[SSUN]-1659859095922
68477
GPR[ESUN]-1659859096025
GPR[SSUN]-1659859096025
68477
GPR[SPVATF]-1659859096126
GPR[EPVATF]-1659859096409
GPR[SPS]-1659859096409
[1006743] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Day:255.
GPR[EPS]-1659859096669
GPR[ESUN]-1659859096669
GPR[SSUN]-1659859096669
68477
GPR[SPVATF]-1659859096771
GPR[EPVATF]-1659859097048
GPR[SPS]-1659859097048
[1007385] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Day:254.
GPR[EPS]-1659859097311
GPR[ESUN]-1659859097312
GPR[SSUN]-1659859097312
1394353123
GPR[ESUN]-1659859097415
GPR[SSUN]-1659859097415
1394353123
GPR[ESUN]-1659859097517
GPR[SSUN]-1659859097517
1394353123
GPR[ESUN]-1659859097619
GPR[SSUN]-1659859097619
1394353123
GPR[ESUN]-1659859097718
GPR[SSUN]-1659859097718
1394353123
GPR[ESUN]-1659859097816
GPR[SSUN]-1659859097816
1776071035
GPR[ESUN]-1659859097911
GPR[SSUN]-1659859097911
1776071035
GPR[ESUN]-1659859098006
GPR[SSUN]-1659859098006
1776071035
GPR[SPVATF]-1659859098106
GPR[EPVATF]-1659859098388
GPR[SPS]-1659859098388
[1008719] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.SpreadsheetDate:451.
GPR[EPS]-1659859098645
GPR[SPVATF]-1659859098645
GPR[EPVATF]-1659859098921
GPR[SPS]-1659859098921
[1009253] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.SpreadsheetDate:451.
GPR[EPS]-1659859099179
GPR[ESUN]-1659859099179
GPR[SSUN]-1659859099179
1776071035
GPR[ESUN]-1659859099281
GPR[SSUN]-1659859099281
1776071035
GPR[ESUN]-1659859099376
GPR[SSUN]-1659859099376
1776071035
GPR[ESUN]-1659859099472
GPR[SSUN]-1659859099472
1776071035
GPR[ESUN]-1659859099567
GPR[SSUN]-1659859099567
1776071035
GPR[ESUN]-1659859099662
GPR[SSUN]-1659859099662
-597949146
GPR[SPVATF]-1659859099755
GPR[EPVATF]-1659859100039
GPR[SPS]-1659859100039
[1010372] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.RectangleInsets:181.
GPR[EPS]-1659859100298
GPR[SPVATF]-1659859100298
GPR[EPVATF]-1659859100573
GPR[SPS]-1659859100573
[1010905] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.RectangleInsets:181.
GPR[EPS]-1659859100831
GPR[ESUN]-1659859100831
GPR[SSUN]-1659859100831
-1685022938
GPR[ESUN]-1659859100998
GPR[SSUN]-1659859100998
-1685022938
GPR[SPVATF]-1659859101167
GPR[EPVATF]-1659859101534
GPR[SPS]-1659859101534
[1011955] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:2847.
GPR[EPS]-1659859101881
GPR[ESUN]-1659859101881
GPR[SSUN]-1659859101881
-1685022938
GPR[SPVATF]-1659859102050
GPR[EPVATF]-1659859102420
GPR[SPS]-1659859102420
[1012840] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:2844.
GPR[EPS]-1659859102766
GPR[SPVATF]-1659859102766
GPR[EPVATF]-1659859103134
GPR[SPS]-1659859103134
[1013556] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.renderer.AbstractRenderer:2844.
GPR[EPS]-1659859103482
GPR[ESUN]-1659859103482
GPR[SSUN]-1659859103482
1600734891
GPR[ESUN]-1659859103632
GPR[SSUN]-1659859103632
1600734891
GPR[SPVATF]-1659859103783
GPR[EPVATF]-1659859104154
GPR[SPS]-1659859104154
[1014626] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:507.
GPR[EPS]-1659859104552
GPR[ESUN]-1659859104552
GPR[SSUN]-1659859104552
1600734891
GPR[SPVATF]-1659859104701
GPR[EPVATF]-1659859105065
GPR[SPS]-1659859105065
[1015461] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:494.
GPR[EPS]-1659859105387
GPR[SPVATF]-1659859105387
GPR[EPVATF]-1659859105756
GPR[SPS]-1659859105756
[1016155] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:494.
GPR[EPS]-1659859106081
GPR[ESUN]-1659859106081
GPR[SSUN]-1659859106081
1600734891
GPR[SPVATF]-1659859106230
GPR[EPVATF]-1659859106602
GPR[SPS]-1659859106602
[1016996] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:492.
GPR[EPS]-1659859106922
GPR[ESUN]-1659859106922
GPR[SSUN]-1659859106922
1600734891
GPR[SPVATF]-1659859107076
GPR[EPVATF]-1659859107449
GPR[SPS]-1659859107449
[1017844] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:488.
GPR[EPS]-1659859107770
GPR[SPVATF]-1659859107771
GPR[EPVATF]-1659859108141
GPR[SPS]-1659859108141
[1018537] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:488.
GPR[EPS]-1659859108463
GPR[ESUN]-1659859108463
GPR[SSUN]-1659859108463
1600734891
GPR[SPVATF]-1659859108613
GPR[EPVATF]-1659859108982
GPR[SPS]-1659859108982
[1019384] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:487.
GPR[EPS]-1659859109310
GPR[SPVATF]-1659859109310
GPR[EPVATF]-1659859109681
GPR[SPS]-1659859109681
[1020077] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:487.
GPR[EPS]-1659859110003
GPR[ESUN]-1659859110003
GPR[SSUN]-1659859110003
1600734891
GPR[SPVATF]-1659859110155
GPR[EPVATF]-1659859110529
GPR[SPS]-1659859110529
[1020924] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:464.
GPR[EPS]-1659859110850
GPR[SPVATF]-1659859110850
GPR[EPVATF]-1659859111222
GPR[SPS]-1659859111223
[1021622] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:464.
GPR[EPS]-1659859111548
GPR[ESUN]-1659859111548
GPR[SSUN]-1659859111548
1600734891
GPR[ESUN]-1659859111699
GPR[SSUN]-1659859111699
1600734891
GPR[SPVATF]-1659859111846
GPR[EPVATF]-1659859112219
GPR[SPS]-1659859112219
[1022620] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:458.
GPR[EPS]-1659859112546
GPR[SPVATF]-1659859112546
GPR[EPVATF]-1659859112915
GPR[SPS]-1659859112915
[1023309] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:458.
GPR[EPS]-1659859113235
GPR[ESUN]-1659859113235
GPR[SSUN]-1659859113235
1600734891
GPR[ESUN]-1659859113385
GPR[SSUN]-1659859113385
1600734891
GPR[ESUN]-1659859113535
GPR[SSUN]-1659859113535
1600734891
GPR[SPVATF]-1659859113687
GPR[EPVATF]-1659859114061
GPR[SPS]-1659859114061
[1024453] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:452.
GPR[EPS]-1659859114379
GPR[ESUN]-1659859114379
GPR[SSUN]-1659859114379
1600734891
GPR[SPVATF]-1659859114529
GPR[EPVATF]-1659859114903
GPR[SPS]-1659859114903
[1025381] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:451.
GPR[EPS]-1659859115307
GPR[ESUN]-1659859115307
GPR[SSUN]-1659859115307
1600734891
GPR[SPVATF]-1659859115460
GPR[EPVATF]-1659859115830
GPR[SPS]-1659859115830
[1026230] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:450.
GPR[EPS]-1659859116156
GPR[SPVATF]-1659859116156
GPR[EPVATF]-1659859116523
GPR[SPS]-1659859116523
[1026918] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:450.
GPR[EPS]-1659859116844
GPR[ESUN]-1659859116844
GPR[SSUN]-1659859116844
1600734891
GPR[SPVATF]-1659859116994
GPR[EPVATF]-1659859117367
GPR[SPS]-1659859117367
[1027760] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:445.
GPR[EPS]-1659859117686
GPR[SPVATF]-1659859117686
GPR[EPVATF]-1659859118060
GPR[SPS]-1659859118060
[1028456] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:445.
GPR[EPS]-1659859118382
GPR[ESUN]-1659859118382
GPR[SSUN]-1659859118383
1600734891
GPR[SPVATF]-1659859118531
GPR[EPVATF]-1659859118909
GPR[SPS]-1659859118909
[1029302] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:441.
GPR[EPS]-1659859119228
GPR[SPVATF]-1659859119228
GPR[EPVATF]-1659859119594
GPR[SPS]-1659859119594
[1029986] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:441.
GPR[EPS]-1659859119912
GPR[ESUN]-1659859119912
GPR[SSUN]-1659859119912
1600734891
GPR[ESUN]-1659859120059
GPR[SSUN]-1659859120059
1600734891
GPR[ESUN]-1659859120205
GPR[SSUN]-1659859120205
1600734891
GPR[SPVATF]-1659859120355
GPR[EPVATF]-1659859120730
GPR[SPS]-1659859120730
[1031131] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:435.
GPR[EPS]-1659859121057
GPR[SPVATF]-1659859121058
GPR[EPVATF]-1659859121424
GPR[SPS]-1659859121424
[1031824] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.NumberAxis:435.
GPR[EPS]-1659859121750
GPR[ESUN]-1659859121750
GPR[SSUN]-1659859121750
1600734891
GPR[ESUN]-1659859121901
GPR[SSUN]-1659859121901
1600734891
GPR[ESUN]-1659859122047
GPR[SSUN]-1659859122047
1394353123
GPR[SPVATF]-1659859122147
GPR[EPVATF]-1659859122428
GPR[SPS]-1659859122428
[1032630] ERROR ConstraintModelBuilder - Unable to compile the change: 
public abstract class SerialDate implements java.lang.Comparable , java.io.Serializable , org.jfree.data.time.MonthConstants {
    private static final long serialVersionUID = -293716040467423637L;

    public static final java.text.DateFormatSymbols DATE_FORMAT_SYMBOLS = new java.text.SimpleDateFormat().getDateFormatSymbols();

    public static final int SERIAL_LOWER_BOUND = 2;

    public static final int SERIAL_UPPER_BOUND = 2958465;

    public static final int MINIMUM_YEAR_SUPPORTED = 1900;

    public static final int MAXIMUM_YEAR_SUPPORTED = 9999;

    public static final int MONDAY = java.util.Calendar.MONDAY;

    public static final int TUESDAY = java.util.Calendar.TUESDAY;

    public static final int WEDNESDAY = java.util.Calendar.WEDNESDAY;

    public static final int THURSDAY = java.util.Calendar.THURSDAY;

    public static final int FRIDAY = java.util.Calendar.FRIDAY;

    public static final int SATURDAY = java.util.Calendar.SATURDAY;

    public static final int SUNDAY = java.util.Calendar.SUNDAY;

    static final int[] LAST_DAY_OF_MONTH = new int[]{ 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

    static final int[] AGGREGATE_DAYS_TO_END_OF_MONTH = new int[]{ 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365 };

    static final int[] AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH = new int[]{ 0, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365 };

    static final int[] LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH = new int[]{ 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366 };

    static final int[] LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH = new int[]{ 0, 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366 };

    public static final int FIRST_WEEK_IN_MONTH = 1;

    public static final int SECOND_WEEK_IN_MONTH = 2;

    public static final int THIRD_WEEK_IN_MONTH = 3;

    public static final int FOURTH_WEEK_IN_MONTH = 4;

    public static final int LAST_WEEK_IN_MONTH = 0;

    public static final int INCLUDE_NONE = 0;

    public static final int INCLUDE_FIRST = 1;

    public static final int INCLUDE_SECOND = 2;

    public static final int INCLUDE_BOTH = 3;

    public static final int PRECEDING = -1;

    public static final int NEAREST = 0;

    public static final int FOLLOWING = 1;

    private java.lang.String description;

    protected SerialDate() {
    }

    public static boolean isValidWeekdayCode(final int code) {
        switch (code) {
            case org.jfree.data.time.SerialDate.SUNDAY :
            case org.jfree.data.time.SerialDate.MONDAY :
            case org.jfree.data.time.SerialDate.TUESDAY :
            case org.jfree.data.time.SerialDate.WEDNESDAY :
            case org.jfree.data.time.SerialDate.THURSDAY :
            case org.jfree.data.time.SerialDate.FRIDAY :
            case org.jfree.data.time.SerialDate.SATURDAY :
                return true;
            default :
                return false;
        }
    }

    public static int stringToWeekdayCode(java.lang.String s) {
        final java.lang.String[] shortWeekdayNames = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getShortWeekdays();
        final java.lang.String[] weekDayNames = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getWeekdays();
        int result = -1;
        s = s.trim();
        for (int i = 0; i < weekDayNames.length; i++) {
            if (s.equals(shortWeekdayNames[i])) {
                result = i;
                break;
            }
            if (s.equals(weekDayNames[i])) {
                result = i;
                break;
            }
        }
        return result;
    }

    public static java.lang.String weekdayCodeToString(final int weekday) {
        final java.lang.String[] weekdays = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getWeekdays();
        return weekdays[weekday];
    }

    public static java.lang.String[] getMonths() {
        return org.jfree.data.time.SerialDate.getMonths(false);
    }

    public static java.lang.String[] getMonths(final boolean shortened) {
        if (shortened) {
            return org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getShortMonths();
        } else {
            return org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getMonths();
        }
    }

    public static boolean isValidMonthCode(final int code) {
        switch (code) {
            case org.jfree.data.time.MonthConstants.JANUARY :
            case org.jfree.data.time.MonthConstants.FEBRUARY :
            case org.jfree.data.time.MonthConstants.MARCH :
            case org.jfree.data.time.MonthConstants.APRIL :
            case org.jfree.data.time.MonthConstants.MAY :
            case org.jfree.data.time.MonthConstants.JUNE :
            case org.jfree.data.time.MonthConstants.JULY :
            case org.jfree.data.time.MonthConstants.AUGUST :
            case org.jfree.data.time.MonthConstants.SEPTEMBER :
            case org.jfree.data.time.MonthConstants.OCTOBER :
            case org.jfree.data.time.MonthConstants.NOVEMBER :
            case org.jfree.data.time.MonthConstants.DECEMBER :
                return true;
            default :
                return false;
        }
    }

    public static int monthCodeToQuarter(final int code) {
        switch (code) {
            case org.jfree.data.time.MonthConstants.JANUARY :
            case org.jfree.data.time.MonthConstants.FEBRUARY :
            case org.jfree.data.time.MonthConstants.MARCH :
                return 1;
            case org.jfree.data.time.MonthConstants.APRIL :
            case org.jfree.data.time.MonthConstants.MAY :
            case org.jfree.data.time.MonthConstants.JUNE :
                return 2;
            case org.jfree.data.time.MonthConstants.JULY :
            case org.jfree.data.time.MonthConstants.AUGUST :
            case org.jfree.data.time.MonthConstants.SEPTEMBER :
                return 3;
            case org.jfree.data.time.MonthConstants.OCTOBER :
            case org.jfree.data.time.MonthConstants.NOVEMBER :
            case org.jfree.data.time.MonthConstants.DECEMBER :
                return 4;
            default :
                throw new java.lang.IllegalArgumentException("SerialDate.monthCodeToQuarter: invalid month code.");
        }
    }

    public static java.lang.String monthCodeToString(final int month) {
        return org.jfree.data.time.SerialDate.monthCodeToString(month, false);
    }

    public static java.lang.String monthCodeToString(final int month, final boolean shortened) {
        if (!org.jfree.data.time.SerialDate.isValidMonthCode(month)) {
            throw new java.lang.IllegalArgumentException("SerialDate.monthCodeToString: month outside valid range.");
        }
        final java.lang.String[] months;
        if (shortened) {
            months = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getShortMonths();
        } else {
            months = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getMonths();
        }
        return months[month - 1];
    }

    public static int stringToMonthCode(java.lang.String s) {
        final java.lang.String[] shortMonthNames = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getShortMonths();
        final java.lang.String[] monthNames = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getMonths();
        int result = -1;
        s = s.trim();
        try {
            result = java.lang.Integer.parseInt(s);
        } catch (java.lang.NumberFormatException e) {
        }
        if ((result < 1) || (result > 12)) {
            for (int i = 0; i < monthNames.length; i++) {
                if (s.equals(shortMonthNames[i])) {
                    result = i + 1;
                    break;
                }
                if (s.equals(monthNames[i])) {
                    result = i + 1;
                    break;
                }
            }
        }
        return result;
    }

    public static boolean isValidWeekInMonthCode(final int code) {
        switch (code) {
            case org.jfree.data.time.SerialDate.FIRST_WEEK_IN_MONTH :
            case org.jfree.data.time.SerialDate.SECOND_WEEK_IN_MONTH :
            case org.jfree.data.time.SerialDate.THIRD_WEEK_IN_MONTH :
            case org.jfree.data.time.SerialDate.FOURTH_WEEK_IN_MONTH :
            case org.jfree.data.time.SerialDate.LAST_WEEK_IN_MONTH :
                return true;
            default :
                return false;
        }
    }

    public static boolean isLeapYear(final int yyyy) {
        if ((yyyy % 4) != 0) {
            return false;
        } else if ((yyyy % 400) == 0) {
            return true;
        } else if ((yyyy % 100) == 0) {
            return false;
        } else {
            return true;
        }
    }

    public static int leapYearCount(final int yyyy) {
        final int leap4 = (yyyy - 1896) / 4;
        final int leap100 = (yyyy - 1800) / 100;
        final int leap400 = (yyyy - 1600) / 400;
        return (leap4 - leap100) + leap400;
    }

    public static int lastDayOfMonth(final int month, final int yyyy) {
        final int result = org.jfree.data.time.SerialDate.LAST_DAY_OF_MONTH[month];
        if (month != org.jfree.data.time.MonthConstants.FEBRUARY) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(1027).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.SERIAL_UPPER_BOUND",org.jfree.data.time.SerialDate.SERIAL_UPPER_BOUND);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.THURSDAY",org.jfree.data.time.SerialDate.THURSDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS",org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.INCLUDE_NONE",org.jfree.data.time.SerialDate.INCLUDE_NONE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.FIRST_WEEK_IN_MONTH",org.jfree.data.time.SerialDate.FIRST_WEEK_IN_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.LAST_WEEK_IN_MONTH",org.jfree.data.time.SerialDate.LAST_WEEK_IN_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.MAXIMUM_YEAR_SUPPORTED",org.jfree.data.time.SerialDate.MAXIMUM_YEAR_SUPPORTED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("result",result);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.LAST_DAY_OF_MONTH",org.jfree.data.time.SerialDate.LAST_DAY_OF_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.THIRD_WEEK_IN_MONTH",org.jfree.data.time.SerialDate.THIRD_WEEK_IN_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.WEDNESDAY",org.jfree.data.time.SerialDate.WEDNESDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH",org.jfree.data.time.SerialDate.LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.INCLUDE_FIRST",org.jfree.data.time.SerialDate.INCLUDE_FIRST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.SECOND_WEEK_IN_MONTH",org.jfree.data.time.SerialDate.SECOND_WEEK_IN_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH",org.jfree.data.time.SerialDate.LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.AGGREGATE_DAYS_TO_END_OF_MONTH",org.jfree.data.time.SerialDate.AGGREGATE_DAYS_TO_END_OF_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.TUESDAY",org.jfree.data.time.SerialDate.TUESDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.MINIMUM_YEAR_SUPPORTED",org.jfree.data.time.SerialDate.MINIMUM_YEAR_SUPPORTED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.NEAREST",org.jfree.data.time.SerialDate.NEAREST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.SUNDAY",org.jfree.data.time.SerialDate.SUNDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH",org.jfree.data.time.SerialDate.AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.FOURTH_WEEK_IN_MONTH",org.jfree.data.time.SerialDate.FOURTH_WEEK_IN_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.SATURDAY",org.jfree.data.time.SerialDate.SATURDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.SERIAL_LOWER_BOUND",org.jfree.data.time.SerialDate.SERIAL_LOWER_BOUND);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.PRECEDING",org.jfree.data.time.SerialDate.PRECEDING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.INCLUDE_SECOND",org.jfree.data.time.SerialDate.INCLUDE_SECOND);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("month",month);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.INCLUDE_BOTH",org.jfree.data.time.SerialDate.INCLUDE_BOTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.FOLLOWING",org.jfree.data.time.SerialDate.FOLLOWING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.FRIDAY",org.jfree.data.time.SerialDate.FRIDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("org.jfree.data.time.SerialDate.MONDAY",org.jfree.data.time.SerialDate.MONDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectInput("yyyy",yyyy);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(1027).collectionEnds();
            }
            if (runtimeAngelicValue)
                return result;

        } else if (org.jfree.data.time.SerialDate.isLeapYear(yyyy)) {
            return result + 1;
        } else {
            return result;
        }
    }

    public static org.jfree.data.time.SerialDate addDays(final int days, final org.jfree.data.time.SerialDate base) {
        final int serialDayNumber = base.toSerial() + days;
        return org.jfree.data.time.SerialDate.createInstance(serialDayNumber);
    }

    public static org.jfree.data.time.SerialDate addMonths(final int months, final org.jfree.data.time.SerialDate base) {
        final int yy = ((((12 * base.getYYYY()) + base.getMonth()) + months) - 1) / 12;
        final int mm = (((((12 * base.getYYYY()) + base.getMonth()) + months) - 1) % 12) + 1;
        final int dd = java.lang.Math.min(base.getDayOfMonth(), org.jfree.data.time.SerialDate.lastDayOfMonth(mm, yy));
        return org.jfree.data.time.SerialDate.createInstance(dd, mm, yy);
    }

    public static org.jfree.data.time.SerialDate addYears(final int years, final org.jfree.data.time.SerialDate base) {
        final int baseY = base.getYYYY();
        final int baseM = base.getMonth();
        final int baseD = base.getDayOfMonth();
        final int targetY = baseY + years;
        final int targetD = java.lang.Math.min(baseD, org.jfree.data.time.SerialDate.lastDayOfMonth(baseM, targetY));
        return org.jfree.data.time.SerialDate.createInstance(targetD, baseM, targetY);
    }

    public static org.jfree.data.time.SerialDate getPreviousDayOfWeek(final int targetWeekday, final org.jfree.data.time.SerialDate base) {
        if (!org.jfree.data.time.SerialDate.isValidWeekdayCode(targetWeekday)) {
            throw new java.lang.IllegalArgumentException("Invalid day-of-the-week code.");
        }
        final int adjust;
        final int baseDOW = base.getDayOfWeek();
        if (baseDOW > targetWeekday) {
            adjust = java.lang.Math.min(0, targetWeekday - baseDOW);
        } else {
            adjust = (-7) + java.lang.Math.max(0, targetWeekday - baseDOW);
        }
        return org.jfree.data.time.SerialDate.addDays(adjust, base);
    }

    public static org.jfree.data.time.SerialDate getFollowingDayOfWeek(final int targetWeekday, final org.jfree.data.time.SerialDate base) {
        if (!org.jfree.data.time.SerialDate.isValidWeekdayCode(targetWeekday)) {
            throw new java.lang.IllegalArgumentException("Invalid day-of-the-week code.");
        }
        final int adjust;
        final int baseDOW = base.getDayOfWeek();
        if (baseDOW > targetWeekday) {
            adjust = 7 + java.lang.Math.min(0, targetWeekday - baseDOW);
        } else {
            adjust = java.lang.Math.max(0, targetWeekday - baseDOW);
        }
        return org.jfree.data.time.SerialDate.addDays(adjust, base);
    }

    public static org.jfree.data.time.SerialDate getNearestDayOfWeek(final int targetDOW, final org.jfree.data.time.SerialDate base) {
        if (!org.jfree.data.time.SerialDate.isValidWeekdayCode(targetDOW)) {
            throw new java.lang.IllegalArgumentException("Invalid day-of-the-week code.");
        }
        final int baseDOW = base.getDayOfWeek();
        int adjust = -java.lang.Math.abs(targetDOW - baseDOW);
        if (adjust >= 4) {
            adjust = 7 - adjust;
        }
        if (adjust <= (-4)) {
            adjust = 7 + adjust;
        }
        return org.jfree.data.time.SerialDate.addDays(adjust, base);
    }

    public org.jfree.data.time.SerialDate getEndOfCurrentMonth(final org.jfree.data.time.SerialDate base) {
        final int last = org.jfree.data.time.SerialDate.lastDayOfMonth(base.getMonth(), base.getYYYY());
        return org.jfree.data.time.SerialDate.createInstance(last, base.getMonth(), base.getYYYY());
    }

    public static java.lang.String weekInMonthToString(final int count) {
        switch (count) {
            case org.jfree.data.time.SerialDate.FIRST_WEEK_IN_MONTH :
                return "First";
            case org.jfree.data.time.SerialDate.SECOND_WEEK_IN_MONTH :
                return "Second";
            case org.jfree.data.time.SerialDate.THIRD_WEEK_IN_MONTH :
                return "Third";
            case org.jfree.data.time.SerialDate.FOURTH_WEEK_IN_MONTH :
                return "Fourth";
            case org.jfree.data.time.SerialDate.LAST_WEEK_IN_MONTH :
                return "Last";
            default :
                return "SerialDate.weekInMonthToString(): invalid code.";
        }
    }

    public static java.lang.String relativeToString(final int relative) {
        switch (relative) {
            case org.jfree.data.time.SerialDate.PRECEDING :
                return "Preceding";
            case org.jfree.data.time.SerialDate.NEAREST :
                return "Nearest";
            case org.jfree.data.time.SerialDate.FOLLOWING :
                return "Following";
            default :
                return "ERROR : Relative To String";
        }
    }

    public static org.jfree.data.time.SerialDate createInstance(final int day, final int month, final int yyyy) {
        return new org.jfree.data.time.SpreadsheetDate(day, month, yyyy);
    }

    public static org.jfree.data.time.SerialDate createInstance(final int serial) {
        return new org.jfree.data.time.SpreadsheetDate(serial);
    }

    public static org.jfree.data.time.SerialDate createInstance(final java.util.Date date) {
        final java.util.GregorianCalendar calendar = new java.util.GregorianCalendar();
        calendar.setTime(date);
        return new org.jfree.data.time.SpreadsheetDate(calendar.get(java.util.Calendar.DATE), calendar.get(java.util.Calendar.MONTH) + 1, calendar.get(java.util.Calendar.YEAR));
    }

    public abstract int toSerial();

    public abstract java.util.Date toDate();

    public java.lang.String getDescription() {
        return this.description;
    }

    public void setDescription(final java.lang.String description) {
        this.description = description;
    }

    public java.lang.String toString() {
        return (((getDayOfMonth() + "-") + org.jfree.data.time.SerialDate.monthCodeToString(getMonth())) + "-") + getYYYY();
    }

    public abstract int getYYYY();

    public abstract int getMonth();

    public abstract int getDayOfMonth();

    public abstract int getDayOfWeek();

    public abstract int compare(org.jfree.data.time.SerialDate other);

    public abstract boolean isOn(org.jfree.data.time.SerialDate other);

    public abstract boolean isBefore(org.jfree.data.time.SerialDate other);

    public abstract boolean isOnOrBefore(org.jfree.data.time.SerialDate other);

    public abstract boolean isAfter(org.jfree.data.time.SerialDate other);

    public abstract boolean isOnOrAfter(org.jfree.data.time.SerialDate other);

    public abstract boolean isInRange(org.jfree.data.time.SerialDate d1, org.jfree.data.time.SerialDate d2);

    public abstract boolean isInRange(org.jfree.data.time.SerialDate d1, org.jfree.data.time.SerialDate d2, int include);

    public org.jfree.data.time.SerialDate getPreviousDayOfWeek(final int targetDOW) {
        return org.jfree.data.time.SerialDate.getPreviousDayOfWeek(targetDOW, this);
    }

    public org.jfree.data.time.SerialDate getFollowingDayOfWeek(final int targetDOW) {
        return org.jfree.data.time.SerialDate.getFollowingDayOfWeek(targetDOW, this);
    }

    public org.jfree.data.time.SerialDate getNearestDayOfWeek(final int targetDOW) {
        return org.jfree.data.time.SerialDate.getNearestDayOfWeek(targetDOW, this);
    }
}
[1032630] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659859122556
GPR[SSUN]-1659859122557
1237707923
GPR[ESUN]-1659859122711
GPR[SSUN]-1659859122711
1237707923
GPR[ESUN]-1659859122866
GPR[SSUN]-1659859122866
1237707923
GPR[ESUN]-1659859123017
GPR[SSUN]-1659859123017
1237707923
GPR[ESUN]-1659859123165
GPR[SSUN]-1659859123165
2055106
GPR[ESUN]-1659859123329
GPR[SSUN]-1659859123329
2055106
GPR[ESUN]-1659859123494
GPR[SSUN]-1659859123494
2055106
GPR[SPVATF]-1659859123658
GPR[EPVATF]-1659859124028
GPR[SPS]-1659859124028
[1034436] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.axis.Axis:1187.
GPR[EPS]-1659859124362
GPR[ESUN]-1659859124362
GPR[SSUN]-1659859124362
1394353123
GPR[SPVATF]-1659859124469
GPR[EPVATF]-1659859124751
GPR[SPS]-1659859124751
[1035166] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.SerialDate:545.
GPR[EPS]-1659859125092
GPR[ESUN]-1659859125092
GPR[SSUN]-1659859125092
1394353123
GPR[ESUN]-1659859125195
GPR[SSUN]-1659859125195
-1634992864
GPR[ESUN]-1659859125313
GPR[SSUN]-1659859125313
-1634992864
GPR[SPVATF]-1659859125432
GPR[EPVATF]-1659859125719
GPR[SPS]-1659859125719
[1036077] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.DefaultKeyedValues:239.
GPR[EPS]-1659859126004
GPR[ESUN]-1659859126004
GPR[SSUN]-1659859126004
-1634992864
GPR[SPVATF]-1659859126122
GPR[EPVATF]-1659859126410
GPR[SPS]-1659859126410
[1036769] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.DefaultKeyedValues:238.
GPR[EPS]-1659859126695
GPR[ESUN]-1659859126695
GPR[SSUN]-1659859126695
-1634992864
GPR[SPVATF]-1659859126817
GPR[EPVATF]-1659859127097
GPR[SPS]-1659859127097
[1037453] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.DefaultKeyedValues:237.
GPR[EPS]-1659859127379
GPR[ESUN]-1659859127379
GPR[SSUN]-1659859127379
-1634992864
GPR[SPVATF]-1659859127496
GPR[EPVATF]-1659859127784
GPR[SPS]-1659859127784
[1038151] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.DefaultKeyedValues:232.
GPR[EPS]-1659859128077
GPR[SPVATF]-1659859128077
GPR[EPVATF]-1659859128357
GPR[SPS]-1659859128357
[1038727] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.DefaultKeyedValues:232.
GPR[EPS]-1659859128653
GPR[ESUN]-1659859128653
GPR[SSUN]-1659859128653
-1634992864
GPR[ESUN]-1659859128773
GPR[SSUN]-1659859128773
-1634992864
GPR[SPVATF]-1659859128890
GPR[EPVATF]-1659859129184
GPR[SPS]-1659859129184
[1039544] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.DefaultKeyedValues:228.
GPR[EPS]-1659859129470
GPR[SPVATF]-1659859129470
GPR[EPVATF]-1659859129749
GPR[SPS]-1659859129749
[1040113] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.DefaultKeyedValues:228.
GPR[EPS]-1659859130039
GPR[ESUN]-1659859130039
GPR[SSUN]-1659859130039
-1634992864
GPR[SPVATF]-1659859130158
GPR[EPVATF]-1659859130448
GPR[SPS]-1659859130448
[1040809] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.DefaultKeyedValues:154.
GPR[EPS]-1659859130735
GPR[ESUN]-1659859130735
GPR[SSUN]-1659859130735
-1634992864
GPR[SPVATF]-1659859130853
GPR[EPVATF]-1659859131143
GPR[SPS]-1659859131143
[1041501] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.DefaultKeyedValues:153.
GPR[EPS]-1659859131427
GPR[SPVATF]-1659859131427
GPR[EPVATF]-1659859131706
GPR[SPS]-1659859131706
[1042065] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.DefaultKeyedValues:153.
GPR[EPS]-1659859131991
GPR[ESUN]-1659859131991
GPR[SSUN]-1659859131991
-1634992864
GPR[ESUN]-1659859132111
GPR[SSUN]-1659859132111
-1634992864
GPR[SPVATF]-1659859132234
GPR[EPVATF]-1659859132526
GPR[SPS]-1659859132526
[1042888] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.DefaultKeyedValues:149.
GPR[EPS]-1659859132814
GPR[SPVATF]-1659859132814
GPR[EPVATF]-1659859133099
GPR[SPS]-1659859133099
[1043462] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.DefaultKeyedValues:149.
GPR[EPS]-1659859133388
GPR[ESUN]-1659859133388
[1043467] INFO NoPol - ----INFORMATION----
[1043593] INFO NoPol - Nb classes : 635
[1043593] INFO NoPol - Nb methods : 7103
[1043593] INFO NoPol - Nb Statements Analyzed : 1042
[1043593] INFO NoPol - Nb Statements with Angelic Value Found : 3
[1043593] INFO NoPol - Nb inputs in SMT : 6
[1043593] INFO NoPol - Nb SMT level: 1
[1043593] INFO NoPol - Nb SMT components: [0] []
[1043593] INFO NoPol - Nb variables in SMT : 87
[1043593] INFO NoPol - NoPol Execution time : 1043468ms
[1043594] INFO NoPol - 
[1043594] INFO NoPol - ----PATCH FOUND----
[1043594] INFO NoPol - renderer!=null
[1043672] INFO NoPol - Nb test that executes the patch: 18
[1043673] INFO NoPol - org.jfree.chart.plot.XYPlot:1607: PRECONDITION
[1043710] INFO NoPol - --- a/source/org/jfree/chart/plot/XYPlot.java
+++ b/source/org/jfree/chart/plot/XYPlot.java
@@ -1606,3 +1606,5 @@
     public void setRenderer(XYItemRenderer renderer) {
-        setRenderer(0, renderer);
+        if (renderer!=null) {
+            setRenderer(0, renderer);
+        }
     }

[1043712] INFO NoPol - renderer!=null
[1043779] INFO NoPol - Nb test that executes the patch: 30
[1043779] INFO NoPol - org.jfree.chart.plot.XYPlot:1639: PRECONDITION
[1043816] INFO NoPol - --- a/source/org/jfree/chart/plot/XYPlot.java
+++ b/source/org/jfree/chart/plot/XYPlot.java
@@ -1638,3 +1638,5 @@
         }
-        this.renderers.set(index, renderer);
+        if (renderer!=null) {
+            this.renderers.set(index, renderer);
+        }
         if (renderer != null) {

[1043817] INFO NoPol - renderer!=null
[1043863] INFO NoPol - Nb test that executes the patch: 30
[1043863] INFO NoPol - org.jfree.chart.plot.XYPlot:1620: PRECONDITION
[1043902] INFO NoPol - --- a/source/org/jfree/chart/plot/XYPlot.java
+++ b/source/org/jfree/chart/plot/XYPlot.java
@@ -1619,3 +1619,5 @@
     public void setRenderer(int index, XYItemRenderer renderer) {
-        setRenderer(index, renderer, true);
+        if (renderer!=null) {
+            setRenderer(index, renderer, true);
+        }
     }

GPR[EFP]-1659859134085
PATCH
\n\nNode: host-44\n
\n\nDate: Sun 07 Aug 2022 12:58:54 AM PDT\n
End running Nopol Chart/4 results at /experiment_home///results/Nopol/Chart/4/seed_260/
Removing checked out dir script/workingdir/Nopol/Chart_4
GPR[SSLE]-1659859135274
GPR[ESLE]-1659859195278
