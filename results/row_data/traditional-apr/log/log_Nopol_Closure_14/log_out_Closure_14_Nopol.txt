Sleep 1m start
GPR[SSLI]-1659921033586
GPR[ESLI]-1659921093591
Running Nopol Closure 14b with approach: smt
Timezone: America/Los_Angeles
Seed 261
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/14/seed_261/
The file script/workingdir/Nopol/Closure_14 does not exist!
script/workingdir/Nopol/Closure_14
script/workingdir/Nopol/Closure_14
classpath:  script/workingdir/Nopol/Closure_14/build/classes:script/workingdir/Nopol/Closure_14/lib/args4j.jar:script/workingdir/Nopol/Closure_14/lib/guava.jar:script/workingdir/Nopol/Closure_14/lib/json.jar:script/workingdir/Nopol/Closure_14/lib/jsr305.jar:script/workingdir/Nopol/Closure_14/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_14/build/lib/rhino.jar:script/workingdir/Nopol/Closure_14/lib/ant.jar:script/workingdir/Nopol/Closure_14/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_14/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_14/lib/jarjar.jar:script/workingdir/Nopol/Closure_14/lib/junit.jar:script/workingdir/Nopol/Closure_14/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659921112880
GPR[ESLB]-1659921172883
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_14//build/classes:script/workingdir/Nopol/Closure_14//build/test:script/workingdir/Nopol/Closure_14/build/classes:script/workingdir/Nopol/Closure_14/lib/args4j.jar:script/workingdir/Nopol/Closure_14/lib/guava.jar:script/workingdir/Nopol/Closure_14/lib/json.jar:script/workingdir/Nopol/Closure_14/lib/jsr305.jar:script/workingdir/Nopol/Closure_14/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_14/build/lib/rhino.jar:script/workingdir/Nopol/Closure_14/lib/ant.jar:script/workingdir/Nopol/Closure_14/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_14/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_14/lib/jarjar.jar:script/workingdir/Nopol/Closure_14/lib/junit.jar:script/workingdir/Nopol/Closure_14/build/test
Node: host-48
Date init: Sun 07 Aug 2022 06:12:52 PM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_14/src]
[0] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_14/build/classes/, file:script/workingdir/Nopol/Closure_14/build/test/, file:script/workingdir/Nopol/Closure_14/build/classes/, file:script/workingdir/Nopol/Closure_14/lib/args4j.jar, file:script/workingdir/Nopol/Closure_14/lib/guava.jar, file:script/workingdir/Nopol/Closure_14/lib/json.jar, file:script/workingdir/Nopol/Closure_14/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_14/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_14/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_14/lib/ant.jar, file:script/workingdir/Nopol/Closure_14/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_14/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_14/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_14/lib/junit.jar, file:script/workingdir/Nopol/Closure_14/build/test/]
[0] INFO NoPol - Statement type: PRE_THEN_COND
[0] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_14/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/14/seed_261/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[7] INFO NoPol - Free memory: 1 GB
[7] INFO NoPol - Maximum memory: 7 GB
[7] INFO NoPol - Total memory available to JVM: 1 GB
[8] INFO NoPol - Java version: 1.8.0_45
[9] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[9] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659921178118
GPR[ESUP]-1659921178118
GPR[SFL]-1659921178118
GPR[EFL]-1659921218411
GPR[SFP]-1659921218411
GPR[SSUN]-1659921220152
-283827935
GPR[SPVATF]-1659921220673
GPR[EPVATF]-1659921220710
[47029] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921220711
GPR[SSUN]-1659921220711
160819208
GPR[SPVATF]-1659921220974
GPR[EPVATF]-1659921221152
GPR[SPS]-1659921221152
[48866] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:579.
GPR[EPS]-1659921222548
GPR[ESUN]-1659921222548
GPR[SSUN]-1659921222548
-711686510
GPR[ESUN]-1659921222791
GPR[SSUN]-1659921222791
-711686510
GPR[ESUN]-1659921223026
GPR[SSUN]-1659921223026
-1966087783
GPR[ESUN]-1659921223222
GPR[SSUN]-1659921223222
-1966087783
GPR[SPVATF]-1659921223417
GPR[EPVATF]-1659921223445
[49763] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921223445
GPR[SSUN]-1659921223445
160819208
GPR[ESUN]-1659921223693
GPR[SSUN]-1659921223693
160819208
GPR[SPVATF]-1659921223934
GPR[EPVATF]-1659921224241
GPR[SPS]-1659921224241
[53536] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:767.
GPR[EPS]-1659921227218
GPR[ESUN]-1659921227218
GPR[SSUN]-1659921227218
-1659631726
GPR[ESUN]-1659921227415
GPR[SSUN]-1659921227416
130004992
GPR[ESUN]-1659921227595
GPR[SSUN]-1659921227595
130004992
GPR[SPVATF]-1659921227771
GPR[EPVATF]-1659921227797
[54115] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921227797
GPR[SSUN]-1659921227797
130004992
GPR[ESUN]-1659921227974
GPR[SSUN]-1659921227974
160819208
GPR[SPVATF]-1659921228213
GPR[EPVATF]-1659921228354
GPR[SPS]-1659921228354
[55190] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:844.
GPR[EPS]-1659921228873
GPR[ESUN]-1659921228873
GPR[SSUN]-1659921228873
-1966087783
GPR[SPVATF]-1659921229065
GPR[EPVATF]-1659921229084
[55402] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921229084
GPR[SSUN]-1659921229084
-1966087783
GPR[SPVATF]-1659921229273
GPR[EPVATF]-1659921229292
[55611] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921229293
GPR[SSUN]-1659921229293
160819208
GPR[SPVATF]-1659921229527
GPR[EPVATF]-1659921229824
GPR[SPS]-1659921229824
[56705] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:491.
GPR[EPS]-1659921230387
GPR[ESUN]-1659921230387
GPR[SSUN]-1659921230387
890942016
GPR[ESUN]-1659921230582
GPR[SSUN]-1659921230582
890942016
GPR[SPVATF]-1659921230773
GPR[EPVATF]-1659921230791
[57109] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921230791
GPR[SSUN]-1659921230791
890942016
GPR[SPVATF]-1659921230984
GPR[EPVATF]-1659921231003
[57321] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921231003
GPR[EPVATF]-1659921231021
[57340] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921231022
GPR[SSUN]-1659921231022
890942016
GPR[ESUN]-1659921231213
GPR[SSUN]-1659921231213
890942016
GPR[ESUN]-1659921231403
GPR[SSUN]-1659921231403
-1966087783
GPR[ESUN]-1659921231593
GPR[SSUN]-1659921231593
-1966087783
GPR[SPVATF]-1659921231782
GPR[EPVATF]-1659921231801
[58119] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921231802
GPR[EPVATF]-1659921231820
[58138] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921231820
GPR[SSUN]-1659921231820
-1966087783
GPR[ESUN]-1659921232012
GPR[SSUN]-1659921232012
-1966087783
GPR[SPVATF]-1659921232200
GPR[EPVATF]-1659921232219
[58537] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921232219
GPR[EPVATF]-1659921232238
[58556] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921232238
GPR[SSUN]-1659921232238
-1966087783
GPR[ESUN]-1659921232429
GPR[SSUN]-1659921232429
-1966087783
GPR[ESUN]-1659921232624
GPR[SSUN]-1659921232624
-1966087783
GPR[ESUN]-1659921232813
GPR[SSUN]-1659921232814
160819208
GPR[SPVATF]-1659921233049
GPR[EPVATF]-1659921233343
GPR[SPS]-1659921233343
[60226] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:766.
GPR[EPS]-1659921233908
GPR[ESUN]-1659921233908
GPR[SSUN]-1659921233908
160819208
GPR[SPVATF]-1659921234155
GPR[EPVATF]-1659921234448
GPR[SPS]-1659921234448
[61303] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:770.
GPR[EPS]-1659921234985
GPR[ESUN]-1659921234985
GPR[SSUN]-1659921234985
160819208
GPR[SPVATF]-1659921235265
GPR[EPVATF]-1659921236177
GPR[SPS]-1659921236177
[63065] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:765.
GPR[EPS]-1659921236747
GPR[SPVATF]-1659921236748
GPR[EPVATF]-1659921237038
GPR[SPS]-1659921237038
[63914] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:765.
GPR[EPS]-1659921237596
GPR[ESUN]-1659921237596
GPR[SSUN]-1659921237596
160819208
GPR[SPVATF]-1659921237831
GPR[EPVATF]-1659921238124
GPR[SPS]-1659921238124
[64981] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:764.
GPR[EPS]-1659921238663
GPR[SPVATF]-1659921238663
GPR[EPVATF]-1659921238961
GPR[SPS]-1659921238961
[65828] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:764.
GPR[EPS]-1659921239510
GPR[ESUN]-1659921239510
GPR[SSUN]-1659921239510
160819208
GPR[SPVATF]-1659921239745
GPR[EPVATF]-1659921240039
GPR[SPS]-1659921240039
[66895] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:752.
GPR[EPS]-1659921240577
GPR[ESUN]-1659921240577
GPR[SSUN]-1659921240577
1613130706
GPR[ESUN]-1659921240784
GPR[SSUN]-1659921240784
1613130706
GPR[ESUN]-1659921240990
GPR[SSUN]-1659921240990
1613130706
GPR[SPVATF]-1659921241195
GPR[EPVATF]-1659921241361
[67679] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921241361
GPR[SSUN]-1659921241361
160819208
GPR[ESUN]-1659921241599
GPR[SSUN]-1659921241599
160819208
GPR[SPVATF]-1659921241850
GPR[EPVATF]-1659921242126
GPR[SPS]-1659921242126
[68980] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:854.
GPR[EPS]-1659921242662
GPR[ESUN]-1659921242662
GPR[SSUN]-1659921242662
160819208
GPR[SPVATF]-1659921242896
GPR[EPVATF]-1659921243176
GPR[SPS]-1659921243176
[70051] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:842.
GPR[EPS]-1659921243733
GPR[ESUN]-1659921243733
GPR[SSUN]-1659921243733
160819208
GPR[SPVATF]-1659921243967
GPR[EPVATF]-1659921244252
GPR[SPS]-1659921244253
[71881] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:841.
GPR[EPS]-1659921245563
GPR[SPVATF]-1659921245564
GPR[EPVATF]-1659921245842
GPR[SPS]-1659921245842
[72744] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:841.
GPR[EPS]-1659921246426
GPR[ESUN]-1659921246426
GPR[SSUN]-1659921246426
234947553
GPR[ESUN]-1659921246615
GPR[SSUN]-1659921246615
234947553
GPR[SPVATF]-1659921246803
GPR[EPVATF]-1659921246819
[73137] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921246819
GPR[EPVATF]-1659921246834
[73152] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921246834
GPR[SSUN]-1659921246834
234947553
GPR[ESUN]-1659921247020
GPR[SSUN]-1659921247020
234947553
GPR[SPVATF]-1659921247207
GPR[EPVATF]-1659921247222
[73540] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921247223
GPR[EPVATF]-1659921247237
[73555] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921247237
GPR[SSUN]-1659921247237
234947553
GPR[SPVATF]-1659921247424
GPR[EPVATF]-1659921247439
[73757] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921247439
GPR[SSUN]-1659921247439
234947553
GPR[ESUN]-1659921247631
GPR[SSUN]-1659921247631
234947553
GPR[ESUN]-1659921247817
GPR[SSUN]-1659921247817
234947553
GPR[SPVATF]-1659921248004
GPR[EPVATF]-1659921248020
[74338] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921248020
GPR[SSUN]-1659921248020
234947553
GPR[SPVATF]-1659921248215
GPR[EPVATF]-1659921248230
[74548] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921248230
GPR[SSUN]-1659921248230
234947553
GPR[SPVATF]-1659921248420
GPR[EPVATF]-1659921248435
[74753] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921248435
GPR[SSUN]-1659921248435
234947553
GPR[ESUN]-1659921248622
GPR[SSUN]-1659921248622
234947553
GPR[ESUN]-1659921248809
GPR[SSUN]-1659921248809
234947553
GPR[SPVATF]-1659921248996
GPR[EPVATF]-1659921249011
[75329] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921249011
GPR[SSUN]-1659921249011
234947553
GPR[SPVATF]-1659921249203
GPR[EPVATF]-1659921249218
[75536] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921249218
GPR[SSUN]-1659921249218
234947553
GPR[ESUN]-1659921249411
GPR[SSUN]-1659921249411
234947553
GPR[SPVATF]-1659921249602
GPR[EPVATF]-1659921249617
[75935] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921249617
GPR[SSUN]-1659921249617
234947553
GPR[SPVATF]-1659921249804
GPR[EPVATF]-1659921249819
[76137] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921249819
GPR[SSUN]-1659921249819
234947553
GPR[ESUN]-1659921250006
GPR[SSUN]-1659921250006
890942016
GPR[SPVATF]-1659921250194
GPR[EPVATF]-1659921250212
[76530] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921250212
GPR[EPVATF]-1659921250229
[76547] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921250229
GPR[SSUN]-1659921250229
890942016
GPR[SPVATF]-1659921250421
GPR[EPVATF]-1659921250440
[76758] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921250440
GPR[SSUN]-1659921250440
890942016
GPR[ESUN]-1659921250627
GPR[SSUN]-1659921250627
890942016
GPR[SPVATF]-1659921250815
GPR[EPVATF]-1659921250833
[77151] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921250833
GPR[SSUN]-1659921250833
890942016
GPR[SPVATF]-1659921251033
GPR[EPVATF]-1659921251051
[77369] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921251051
GPR[EPVATF]-1659921251068
[77386] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921251068
GPR[SSUN]-1659921251068
890942016
GPR[SPVATF]-1659921251257
GPR[EPVATF]-1659921251274
[77592] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921251274
GPR[SSUN]-1659921251274
890942016
GPR[SPVATF]-1659921251468
GPR[EPVATF]-1659921251486
[77804] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921251486
GPR[EPVATF]-1659921251503
[77821] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921251503
GPR[SSUN]-1659921251503
890942016
GPR[ESUN]-1659921251692
GPR[SSUN]-1659921251692
890942016
GPR[SPVATF]-1659921251879
GPR[EPVATF]-1659921251896
[78214] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921251896
GPR[SSUN]-1659921251896
890942016
GPR[SPVATF]-1659921252084
GPR[EPVATF]-1659921252101
[78419] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921252101
GPR[SSUN]-1659921252101
890942016
GPR[SPVATF]-1659921252289
GPR[EPVATF]-1659921252306
[78624] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921252306
GPR[SSUN]-1659921252306
890942016
GPR[ESUN]-1659921252494
GPR[SSUN]-1659921252494
1613130706
GPR[SPVATF]-1659921252703
GPR[EPVATF]-1659921252867
[79186] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921252868
GPR[EPVATF]-1659921253032
[79351] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921253033
GPR[SSUN]-1659921253033
1613130706
GPR[SPVATF]-1659921253241
GPR[EPVATF]-1659921253405
[79723] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921253405
GPR[SSUN]-1659921253405
1613130706
GPR[SPVATF]-1659921253612
GPR[EPVATF]-1659921253777
[80095] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921253786
GPR[EPVATF]-1659921253954
[80272] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921253954
GPR[SSUN]-1659921253954
GPR[ESUN]-1659921253954
GPR[SSUN]-1659921253955
GPR[ESUN]-1659921253955
GPR[SSUN]-1659921253955
-1345859678
GPR[SPVATF]-1659921254203
GPR[EPVATF]-1659921254487
GPR[SPS]-1659921254487
[81442] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1014.
GPR[EPS]-1659921255124
GPR[ESUN]-1659921255124
GPR[SSUN]-1659921255124
-1345859678
GPR[SPVATF]-1659921255370
GPR[EPVATF]-1659921255652
GPR[SPS]-1659921255653
[82571] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1013.
GPR[EPS]-1659921256253
GPR[ESUN]-1659921256253
GPR[SSUN]-1659921256253
160819208
GPR[SPVATF]-1659921256484
GPR[EPVATF]-1659921256768
GPR[SPS]-1659921256768
[83632] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:757.
GPR[EPS]-1659921257314
GPR[SPVATF]-1659921257315
GPR[EPVATF]-1659921257601
GPR[SPS]-1659921257601
[84435] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:757.
GPR[EPS]-1659921258118
GPR[ESUN]-1659921258118
GPR[SSUN]-1659921258118
160819208
GPR[SPVATF]-1659921258350
GPR[EPVATF]-1659921258631
GPR[SPS]-1659921258631
[85473] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:751.
GPR[EPS]-1659921259155
GPR[SPVATF]-1659921259155
GPR[EPVATF]-1659921259440
GPR[SPS]-1659921259440
[86309] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:751.
GPR[EPS]-1659921259991
GPR[ESUN]-1659921259991
GPR[SSUN]-1659921259991
160819208
GPR[ESUN]-1659921260223
GPR[SSUN]-1659921260223
160819208
GPR[SPVATF]-1659921260451
GPR[EPVATF]-1659921260735
GPR[SPS]-1659921260735
[89075] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:544.
GPR[EPS]-1659921262757
GPR[ESUN]-1659921262757
GPR[SSUN]-1659921262757
160819208
GPR[ESUN]-1659921262989
GPR[SSUN]-1659921262989
160819208
GPR[SPVATF]-1659921263211
GPR[EPVATF]-1659921263596
GPR[SPS]-1659921263596
[90433] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:332.
GPR[EPS]-1659921264115
GPR[ESUN]-1659921264116
GPR[SSUN]-1659921264116
160819208
GPR[SPVATF]-1659921264343
GPR[EPVATF]-1659921264624
GPR[SPS]-1659921264624
[91450] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:287.
GPR[EPS]-1659921265132
GPR[ESUN]-1659921265132
GPR[SSUN]-1659921265132
160819208
GPR[SPVATF]-1659921265372
GPR[EPVATF]-1659921265663
GPR[SPS]-1659921265663
[92512] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:286.
GPR[EPS]-1659921266194
GPR[ESUN]-1659921266194
GPR[SSUN]-1659921266194
160819208
GPR[SPVATF]-1659921266413
GPR[EPVATF]-1659921266700
GPR[SPS]-1659921266700
[93525] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:285.
GPR[EPS]-1659921267207
GPR[SPVATF]-1659921267207
GPR[EPVATF]-1659921267492
GPR[SPS]-1659921267492
[94313] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:285.
GPR[EPS]-1659921267995
GPR[ESUN]-1659921267995
GPR[SSUN]-1659921267995
160819208
GPR[ESUN]-1659921268218
GPR[SSUN]-1659921268218
160819208
GPR[SPVATF]-1659921268474
GPR[EPVATF]-1659921268754
GPR[SPS]-1659921268754
[95581] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:230.
GPR[EPS]-1659921269263
GPR[ESUN]-1659921269263
GPR[SSUN]-1659921269263
160819208
GPR[SPVATF]-1659921269492
GPR[EPVATF]-1659921269775
GPR[SPS]-1659921269775
[96615] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:750.
GPR[EPS]-1659921270297
GPR[SPVATF]-1659921270297
GPR[EPVATF]-1659921270585
GPR[SPS]-1659921270585
[97443] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:750.
GPR[EPS]-1659921271125
GPR[ESUN]-1659921271125
GPR[SSUN]-1659921271125
160819208
GPR[SPVATF]-1659921271352
GPR[EPVATF]-1659921271491
GPR[SPS]-1659921271491
[98299] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:597.
GPR[EPS]-1659921271981
GPR[ESUN]-1659921271981
GPR[SSUN]-1659921271981
160819208
GPR[SPVATF]-1659921272207
GPR[EPVATF]-1659921272348
GPR[SPS]-1659921272348
[99134] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:581.
GPR[EPS]-1659921272816
GPR[ESUN]-1659921272816
GPR[SSUN]-1659921272816
160819208
GPR[SPVATF]-1659921273041
GPR[EPVATF]-1659921273183
GPR[SPS]-1659921273183
[99969] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:576.
GPR[EPS]-1659921273651
GPR[ESUN]-1659921273651
GPR[SSUN]-1659921273651
160819208
GPR[SPVATF]-1659921273878
GPR[EPVATF]-1659921274043
GPR[SPS]-1659921274043
[100845] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:575.
GPR[EPS]-1659921274527
GPR[SPVATF]-1659921274527
GPR[EPVATF]-1659921274664
GPR[SPS]-1659921274664
[101437] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:575.
GPR[EPS]-1659921275119
GPR[ESUN]-1659921275119
GPR[SSUN]-1659921275119
GPR[ESUN]-1659921275119
GPR[SSUN]-1659921275119
GPR[ESUN]-1659921275119
GPR[SSUN]-1659921275119
GPR[ESUN]-1659921275119
GPR[SSUN]-1659921275119
GPR[ESUN]-1659921275119
GPR[SSUN]-1659921275119
GPR[ESUN]-1659921275119
GPR[SSUN]-1659921275119
GPR[ESUN]-1659921275119
GPR[SSUN]-1659921275119
GPR[ESUN]-1659921275119
GPR[SSUN]-1659921275119
-1345859678
GPR[SPVATF]-1659921275368
GPR[EPVATF]-1659921276361
GPR[SPS]-1659921276361
[103302] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1006.
GPR[EPS]-1659921276985
GPR[ESUN]-1659921276985
GPR[SSUN]-1659921276985
1187751237
GPR[ESUN]-1659921277258
GPR[SSUN]-1659921277258
1187751237
GPR[SPVATF]-1659921277525
GPR[EPVATF]-1659921277813
GPR[SPS]-1659921277813
[104795] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2768.
GPR[EPS]-1659921278477
GPR[ESUN]-1659921278477
GPR[SSUN]-1659921278477
1187751237
GPR[ESUN]-1659921278761
GPR[SSUN]-1659921278761
1187751237
GPR[SPVATF]-1659921279030
GPR[EPVATF]-1659921279314
GPR[SPS]-1659921279314
[106277] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2759.
GPR[EPS]-1659921279959
GPR[ESUN]-1659921279959
GPR[SSUN]-1659921279959
1187751237
GPR[ESUN]-1659921280230
GPR[SSUN]-1659921280230
1187751237
GPR[SPVATF]-1659921280501
GPR[EPVATF]-1659921280781
GPR[SPS]-1659921280781
[107740] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2750.
GPR[EPS]-1659921281422
GPR[ESUN]-1659921281422
GPR[SSUN]-1659921281422
-1007410555
GPR[ESUN]-1659921281612
GPR[SSUN]-1659921281612
160819208
GPR[SPVATF]-1659921281835
GPR[EPVATF]-1659921282084
GPR[SPS]-1659921282084
GPR[EPS]-1659921283109
GPR[SPVATR]-1659921283109
[109427] INFO TestPatch - Applying patch: com.google.javascript.jscomp.ControlFlowAnalysis:664: PRECONDITION com.google.javascript.jscomp.ControlFlowAnalysis.this.shouldTraverseFunctions
[109754] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.ControlFlowAnalysis.this.shouldTraverseFunctions" is working
GPR[EPVATR]-1659921283735
[110053] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659921283735
[110067] INFO NoPol - --- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java
+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java
@@ -663,3 +663,5 @@
     } else {
-      finallyMap.put(lastJump, null);
+      if (com.google.javascript.jscomp.ControlFlowAnalysis.this.shouldTraverseFunctions) {
+        finallyMap.put(lastJump, null);
+      }
     }

Saving patch at /experiment_home///results/Nopol/Closure/14/seed_261/patch_105631_1ts_1659921283749.diff
GPR[ESUN]-1659921283750
GPR[SSUN]-1659921283750
160819208
GPR[SPVATF]-1659921283998
GPR[EPVATF]-1659921284267
GPR[SPS]-1659921284267
GPR[EPS]-1659921285234
GPR[SPVATR]-1659921285234
[111552] INFO TestPatch - Applying patch: com.google.javascript.jscomp.ControlFlowAnalysis:653: PRECONDITION com.google.javascript.jscomp.ControlFlowAnalysis.this.shouldTraverseFunctions
[111888] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.ControlFlowAnalysis.this.shouldTraverseFunctions" is working
GPR[EPVATR]-1659921285869
[112188] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659921285870
[112193] INFO NoPol - --- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java
+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java
@@ -652,3 +652,5 @@
         }
-        lastJump = curHandler;
+        if (com.google.javascript.jscomp.ControlFlowAnalysis.this.shouldTraverseFunctions) {
+          lastJump = curHandler;
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/14/seed_261/patch_107757_2ts_1659921285875.diff
GPR[ESUN]-1659921285875
GPR[SSUN]-1659921285875
160819208
GPR[SPVATF]-1659921286114
GPR[EPVATF]-1659921286363
GPR[SPS]-1659921286363
[113175] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:648.
GPR[EPS]-1659921286857
GPR[ESUN]-1659921286858
GPR[SSUN]-1659921286858
160819208
GPR[SPVATF]-1659921287087
GPR[EPVATF]-1659921287338
GPR[SPS]-1659921287338
[114182] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:647.
GPR[EPS]-1659921287864
GPR[SPVATF]-1659921287864
GPR[EPVATF]-1659921288119
GPR[SPS]-1659921288119
[114936] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:647.
GPR[EPS]-1659921288618
GPR[ESUN]-1659921288618
GPR[SSUN]-1659921288618
1613130706
GPR[SPVATF]-1659921288826
GPR[EPVATF]-1659921288995
[115314] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921288996
GPR[EPVATF]-1659921289164
[115482] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921289164
GPR[SSUN]-1659921289164
1613130706
GPR[SPVATF]-1659921289369
GPR[EPVATF]-1659921289542
[115860] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921289542
GPR[EPVATF]-1659921289709
[116027] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921289709
GPR[SSUN]-1659921289709
1613130706
GPR[ESUN]-1659921289914
GPR[SSUN]-1659921289914
1613130706
GPR[ESUN]-1659921290116
GPR[SSUN]-1659921290116
1613130706
GPR[ESUN]-1659921290317
GPR[SSUN]-1659921290317
1613130706
GPR[ESUN]-1659921290514
GPR[SSUN]-1659921290514
1613130706
GPR[SPVATF]-1659921290713
GPR[EPVATF]-1659921290884
[117202] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921290884
GPR[EPVATF]-1659921291053
[117371] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921291053
GPR[SSUN]-1659921291053
795998767
GPR[SPVATF]-1659921291274
GPR[EPVATF]-1659921291564
GPR[SPS]-1659921291564
GPR[EPS]-1659921299816
GPR[ESUN]-1659921299817
GPR[SSUN]-1659921299817
-1516948592
GPR[SPVATF]-1659921300003
GPR[EPVATF]-1659921300328
GPR[SPS]-1659921300328
[127078] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:143.
GPR[EPS]-1659921300760
GPR[ESUN]-1659921300760
GPR[SSUN]-1659921300760
160819208
GPR[SPVATF]-1659921300990
GPR[EPVATF]-1659921301267
GPR[SPS]-1659921301267
[128100] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:840.
GPR[EPS]-1659921301783
GPR[SPVATF]-1659921301783
GPR[EPVATF]-1659921302056
GPR[SPS]-1659921302056
[128881] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:840.
GPR[EPS]-1659921302563
GPR[ESUN]-1659921302563
GPR[SSUN]-1659921302563
160819208
GPR[ESUN]-1659921302789
GPR[SSUN]-1659921302789
160819208
GPR[SPVATF]-1659921303033
GPR[EPVATF]-1659921303312
GPR[SPS]-1659921303312
[130133] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:837.
GPR[EPS]-1659921303815
GPR[ESUN]-1659921303816
GPR[SSUN]-1659921303816
160819208
GPR[SPVATF]-1659921304040
GPR[EPVATF]-1659921304177
GPR[SPS]-1659921304177
[130949] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:555.
GPR[EPS]-1659921304631
GPR[ESUN]-1659921304631
GPR[SSUN]-1659921304631
1613130706
GPR[SPVATF]-1659921304861
GPR[EPVATF]-1659921305025
[131343] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921305026
GPR[SSUN]-1659921305026
1613130706
GPR[ESUN]-1659921305227
GPR[SSUN]-1659921305227
1613130706
GPR[SPVATF]-1659921305427
GPR[EPVATF]-1659921305595
[131913] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921305596
GPR[EPVATF]-1659921305762
[132080] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921305763
GPR[SSUN]-1659921305763
1613130706
GPR[ESUN]-1659921305968
GPR[SSUN]-1659921305968
1613130706
GPR[SPVATF]-1659921306177
GPR[EPVATF]-1659921306346
[132664] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921306347
GPR[EPVATF]-1659921306514
[132832] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921306514
GPR[SSUN]-1659921306515
160819208
GPR[ESUN]-1659921306760
GPR[SSUN]-1659921306760
160819208
GPR[SPVATF]-1659921306983
GPR[EPVATF]-1659921307242
GPR[SPS]-1659921307242
GPR[EPS]-1659921308337
GPR[SPVATR]-1659921308337
[134655] INFO TestPatch - Applying patch: com.google.javascript.jscomp.ControlFlowAnalysis:646: PRECONDITION (!((com.google.javascript.jscomp.ControlFlowAnalysis.this.root!=null) && ((com.google.javascript.jscomp.ControlFlowAnalysis.this.astPositionCounter) != (10)))) || (com.google.javascript.jscomp.ControlFlowAnalysis.this.shouldTraverseFunctions)
[134983] INFO TestPatch - Running test suite to check the patch "(!((com.google.javascript.jscomp.ControlFlowAnalysis.this.root!=null) && ((com.google.javascript.jscomp.ControlFlowAnalysis.this.astPositionCounter) != (10)))) || (com.google.javascript.jscomp.ControlFlowAnalysis.this.shouldTraverseFunctions)" is working
GPR[EPVATR]-1659921308974
[135292] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659921308974
[135296] INFO NoPol - --- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java
+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java
@@ -645,10 +645,12 @@
       }
-      if (NodeUtil.hasFinally(curHandler)) {
-        if (lastJump == null) {
-          createEdge(node, Branch.UNCOND, curHandler.getLastChild());
-        } else {
-          finallyMap.put(lastJump,
-              computeFallThrough(curHandler.getLastChild()));
+      if ((!((com.google.javascript.jscomp.ControlFlowAnalysis.this.root!=null) && ((com.google.javascript.jscomp.ControlFlowAnalysis.this.astPositionCounter) != (10)))) || (com.google.javascript.jscomp.ControlFlowAnalysis.this.shouldTraverseFunctions)) {
+        if (NodeUtil.hasFinally(curHandler)) {
+          if (lastJump == null) {
+            createEdge(node, Branch.UNCOND, curHandler.getLastChild());
+          } else {
+            finallyMap.put(lastJump,
+            computeFallThrough(curHandler.getLastChild()));
+          }
+          lastJump = curHandler;
         }
-        lastJump = curHandler;
       }

Saving patch at /experiment_home///results/Nopol/Closure/14/seed_261/patch_130860_3ts_1659921308978.diff
GPR[SPVATF]-1659921308979
GPR[EPVATF]-1659921309235
GPR[SPS]-1659921309235
GPR[EPS]-1659921322271
GPR[ESUN]-1659921322271
GPR[SSUN]-1659921322271
795998767
GPR[SPVATF]-1659921322491
GPR[EPVATF]-1659921322750
GPR[SPS]-1659921322750
GPR[EPS]-1659921328412
GPR[ESUN]-1659921328412
GPR[SSUN]-1659921328412
795998767
GPR[ESUN]-1659921328646
GPR[SSUN]-1659921328646
795998767
GPR[SPVATF]-1659921328864
GPR[EPVATF]-1659921329122
GPR[SPS]-1659921329122
GPR[EPS]-1659921336594
GPR[SPVATF]-1659921336594
GPR[EPVATF]-1659921336859
GPR[SPS]-1659921336860
GPR[EPS]-1659921344299
GPR[ESUN]-1659921344299
GPR[SSUN]-1659921344299
795998767
GPR[ESUN]-1659921344519
GPR[SSUN]-1659921344519
160819208
GPR[SPVATF]-1659921344744
GPR[EPVATF]-1659921345038
GPR[SPS]-1659921345038
[171868] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:515.
GPR[EPS]-1659921345550
GPR[ESUN]-1659921345550
GPR[SSUN]-1659921345550
-1966087783
GPR[ESUN]-1659921345741
GPR[SSUN]-1659921345741
-1966087783
GPR[SPVATF]-1659921345925
GPR[EPVATF]-1659921345945
[172263] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921345946
GPR[EPVATF]-1659921345965
[172283] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921345965
GPR[SSUN]-1659921345965
-1966087783
GPR[SPVATF]-1659921346149
GPR[EPVATF]-1659921346168
[172486] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921346168
GPR[SSUN]-1659921346168
160819208
GPR[ESUN]-1659921346428
GPR[SSUN]-1659921346428
795998767
GPR[SPVATF]-1659921346641
GPR[EPVATF]-1659921346895
GPR[SPS]-1659921346895
GPR[EPS]-1659921357510
GPR[ESUN]-1659921357510
GPR[SSUN]-1659921357510
795998767
GPR[SPVATF]-1659921357825
GPR[EPVATF]-1659921358259
GPR[SPS]-1659921358259
GPR[EPS]-1659921363931
GPR[SPVATF]-1659921363931
GPR[EPVATF]-1659921364195
GPR[SPS]-1659921364195
GPR[EPS]-1659921369884
GPR[ESUN]-1659921369884
GPR[SSUN]-1659921369884
795998767
GPR[SPVATF]-1659921370104
GPR[EPVATF]-1659921370363
GPR[SPS]-1659921370363
GPR[EPS]-1659921376022
GPR[ESUN]-1659921376022
GPR[SSUN]-1659921376022
795998767
GPR[SPVATF]-1659921376241
GPR[EPVATF]-1659921376505
GPR[SPS]-1659921376505
[203293] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckMissingReturn:98.
GPR[EPS]-1659921376975
GPR[SPVATF]-1659921376975
GPR[EPVATF]-1659921377236
GPR[SPS]-1659921377236
GPR[EPS]-1659921386066
GPR[ESUN]-1659921386066
GPR[SSUN]-1659921386066
GPR[ESUN]-1659921386066
GPR[SSUN]-1659921386066
160819208
GPR[ESUN]-1659921386302
GPR[SSUN]-1659921386302
160819208
GPR[SPVATF]-1659921386526
GPR[EPVATF]-1659921386690
GPR[SPS]-1659921386690
[213467] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:170.
GPR[EPS]-1659921387149
GPR[SPVATF]-1659921387149
GPR[EPVATF]-1659921387304
GPR[SPS]-1659921387304
[214141] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:170.
GPR[EPS]-1659921387823
GPR[ESUN]-1659921387824
GPR[SSUN]-1659921387824
160819208
GPR[ESUN]-1659921388049
GPR[SSUN]-1659921388049
160819208
GPR[SPVATF]-1659921388278
GPR[EPVATF]-1659921388469
GPR[SPS]-1659921388469
[215269] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:168.
GPR[EPS]-1659921388951
GPR[ESUN]-1659921388951
GPR[SSUN]-1659921388952
160819208
GPR[SPVATF]-1659921389182
GPR[EPVATF]-1659921389328
GPR[SPS]-1659921389328
[216109] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:900.
GPR[EPS]-1659921389791
GPR[ESUN]-1659921389791
GPR[SSUN]-1659921389791
160819208
GPR[SPVATF]-1659921390025
GPR[EPVATF]-1659921390195
GPR[SPS]-1659921390195
[216981] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:899.
GPR[EPS]-1659921390663
GPR[SPVATF]-1659921390664
GPR[EPVATF]-1659921390804
GPR[SPS]-1659921390804
[217586] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:899.
GPR[EPS]-1659921391268
GPR[ESUN]-1659921391268
GPR[SSUN]-1659921391268
160819208
GPR[SPVATF]-1659921391494
GPR[EPVATF]-1659921391633
GPR[SPS]-1659921391633
[218438] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:898.
GPR[EPS]-1659921392120
GPR[ESUN]-1659921392120
GPR[SSUN]-1659921392120
-1516948592
GPR[ESUN]-1659921392304
GPR[SSUN]-1659921392304
-1966087783
GPR[SPVATF]-1659921392486
GPR[EPVATF]-1659921392508
[218826] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921392509
GPR[EPVATF]-1659921392531
[218849] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921392531
GPR[SSUN]-1659921392531
-1966087783
GPR[SPVATF]-1659921392715
GPR[EPVATF]-1659921392737
[219055] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921392737
GPR[EPVATF]-1659921392758
[219076] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921392758
GPR[SSUN]-1659921392758
-1966087783
GPR[SPVATF]-1659921392945
GPR[EPVATF]-1659921392967
[219285] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921392967
GPR[EPVATF]-1659921392988
[219306] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921392988
GPR[SSUN]-1659921392988
-1966087783
GPR[ESUN]-1659921393172
GPR[SSUN]-1659921393172
-1966087783
GPR[ESUN]-1659921393356
GPR[SSUN]-1659921393356
-1966087783
GPR[SPVATF]-1659921393542
GPR[EPVATF]-1659921393564
[219882] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921393564
GPR[EPVATF]-1659921393586
[219904] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921393586
GPR[SSUN]-1659921393586
-1966087783
GPR[SPVATF]-1659921393771
GPR[EPVATF]-1659921393793
[220111] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921393793
GPR[EPVATF]-1659921393814
[220132] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921393814
GPR[SSUN]-1659921393814
-1966087783
GPR[ESUN]-1659921394001
GPR[SSUN]-1659921394001
-1966087783
GPR[SPVATF]-1659921394198
GPR[EPVATF]-1659921394219
[220537] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921394219
GPR[SSUN]-1659921394219
-1516948592
GPR[ESUN]-1659921394411
GPR[SSUN]-1659921394411
-1966087783
GPR[SPVATF]-1659921394595
GPR[EPVATF]-1659921394617
[220935] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921394617
GPR[SSUN]-1659921394617
-1966087783
GPR[ESUN]-1659921394799
GPR[SSUN]-1659921394799
-1966087783
GPR[SPVATF]-1659921394983
GPR[EPVATF]-1659921395052
[221370] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921395052
GPR[SSUN]-1659921395052
-1966087783
GPR[ESUN]-1659921395234
GPR[SSUN]-1659921395234
-1966087783
GPR[ESUN]-1659921395419
GPR[SSUN]-1659921395419
-1966087783
GPR[SPVATF]-1659921395602
GPR[EPVATF]-1659921395624
[221943] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921395625
GPR[SSUN]-1659921395625
-1966087783
GPR[SPVATF]-1659921395811
GPR[EPVATF]-1659921395833
[222151] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921395833
GPR[SSUN]-1659921395833
-1516948592
GPR[SPVATF]-1659921396036
GPR[EPVATF]-1659921396296
GPR[SPS]-1659921396296
[223052] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:148.
GPR[EPS]-1659921396734
GPR[SPVATF]-1659921396734
GPR[EPVATF]-1659921397010
GPR[SPS]-1659921397010
[223753] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:148.
GPR[EPS]-1659921397435
GPR[ESUN]-1659921397435
GPR[SSUN]-1659921397435
-1516948592
GPR[SPVATF]-1659921397616
GPR[EPVATF]-1659921397909
GPR[SPS]-1659921397909
GPR[EPS]-1659921417524
GPR[ESUN]-1659921417525
GPR[SSUN]-1659921417525
-1516948592
GPR[SPVATF]-1659921417804
GPR[EPVATF]-1659921418070
GPR[SPS]-1659921418070
GPR[EPS]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
GPR[ESUN]-1659921441419
GPR[SSUN]-1659921441419
1537627151
GPR[ESUN]-1659921441631
GPR[SSUN]-1659921441633
-1345859678
GPR[ESUN]-1659921441882
GPR[SSUN]-1659921441882
-1345859678
GPR[ESUN]-1659921442129
GPR[SSUN]-1659921442129
-1345859678
GPR[SPVATF]-1659921442371
GPR[EPVATF]-1659921442685
GPR[SPS]-1659921442685
[269578] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1012.
GPR[EPS]-1659921443260
GPR[SPVATF]-1659921443260
GPR[EPVATF]-1659921443556
GPR[SPS]-1659921443556
[270454] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1012.
GPR[EPS]-1659921444136
GPR[ESUN]-1659921444136
GPR[SSUN]-1659921444136
-1345859678
GPR[SPVATF]-1659921444383
GPR[EPVATF]-1659921445426
GPR[SPS]-1659921445426
[272418] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1005.
GPR[EPS]-1659921446100
GPR[SPVATF]-1659921446101
GPR[EPVATF]-1659921446571
GPR[SPS]-1659921446571
[273486] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1005.
GPR[EPS]-1659921447168
GPR[ESUN]-1659921447169
GPR[SSUN]-1659921447169
-1345859678
GPR[ESUN]-1659921447411
GPR[SSUN]-1659921447411
-1345859678
GPR[SPVATF]-1659921447652
GPR[EPVATF]-1659921447955
GPR[SPS]-1659921447955
[274827] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1002.
GPR[EPS]-1659921448509
GPR[ESUN]-1659921448509
GPR[SSUN]-1659921448509
-1345859678
GPR[SPVATF]-1659921448766
GPR[EPVATF]-1659921449058
GPR[SPS]-1659921449058
[275949] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:992.
GPR[EPS]-1659921449631
GPR[ESUN]-1659921449631
GPR[SSUN]-1659921449631
-1345859678
GPR[ESUN]-1659921449874
GPR[SSUN]-1659921449874
-1345859678
GPR[ESUN]-1659921450112
GPR[SSUN]-1659921450112
-1345859678
GPR[ESUN]-1659921450350
GPR[SSUN]-1659921450350
-534884160
GPR[ESUN]-1659921450685
GPR[SSUN]-1659921450685
-534884160
GPR[SPVATF]-1659921451014
GPR[EPVATF]-1659921451173
GPR[SPS]-1659921451174
[278216] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1533.
GPR[EPS]-1659921451898
GPR[ESUN]-1659921451899
GPR[SSUN]-1659921451899
-534884160
GPR[ESUN]-1659921452253
GPR[SSUN]-1659921452253
-534884160
GPR[SPVATF]-1659921452579
GPR[EPVATF]-1659921452738
GPR[SPS]-1659921452738
[279769] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1502.
GPR[EPS]-1659921453451
GPR[ESUN]-1659921453451
GPR[SSUN]-1659921453451
-534884160
GPR[SPVATF]-1659921453779
GPR[EPVATF]-1659921453936
GPR[SPS]-1659921453936
[280949] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1501.
GPR[EPS]-1659921454631
GPR[ESUN]-1659921454631
GPR[SSUN]-1659921454631
-1516948592
GPR[SPVATF]-1659921454811
GPR[EPVATF]-1659921455086
GPR[SPS]-1659921455086
[281841] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:167.
GPR[EPS]-1659921455523
GPR[ESUN]-1659921455523
GPR[SSUN]-1659921455523
-1516948592
GPR[SPVATF]-1659921455702
GPR[EPVATF]-1659921455966
GPR[SPS]-1659921455966
GPR[EPS]-1659921475517
GPR[SPVATF]-1659921475517
GPR[EPVATF]-1659921475786
GPR[SPS]-1659921475786
GPR[EPS]-1659921495357
GPR[ESUN]-1659921495357
GPR[SSUN]-1659921495357
-1516948592
GPR[ESUN]-1659921495637
GPR[SSUN]-1659921495637
-1516948592
GPR[SPVATF]-1659921495815
GPR[EPVATF]-1659921496079
GPR[SPS]-1659921496079
[322826] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:183.
GPR[EPS]-1659921496508
GPR[SPVATF]-1659921496509
GPR[EPVATF]-1659921496771
GPR[SPS]-1659921496771
GPR[EPS]-1659921501606
GPR[ESUN]-1659921501606
GPR[SSUN]-1659921501606
-1516948592
GPR[SPVATF]-1659921501794
GPR[EPVATF]-1659921502062
GPR[SPS]-1659921502062
[328801] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:180.
GPR[EPS]-1659921502483
GPR[SPVATF]-1659921502483
GPR[EPVATF]-1659921502739
GPR[SPS]-1659921502739
GPR[EPS]-1659921506769
GPR[ESUN]-1659921506769
GPR[SSUN]-1659921506769
-1516948592
GPR[SPVATF]-1659921506952
GPR[EPVATF]-1659921507210
GPR[SPS]-1659921507210
[333947] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:178.
GPR[EPS]-1659921507629
GPR[ESUN]-1659921507629
GPR[SSUN]-1659921507629
-1516948592
GPR[SPVATF]-1659921507810
GPR[EPVATF]-1659921508068
GPR[SPS]-1659921508068
[334806] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:175.
GPR[EPS]-1659921508488
GPR[SPVATF]-1659921508488
GPR[EPVATF]-1659921508763
GPR[SPS]-1659921508763
GPR[EPS]-1659921513671
GPR[ESUN]-1659921513671
GPR[SSUN]-1659921513671
-1516948592
GPR[SPVATF]-1659921513854
GPR[EPVATF]-1659921514122
GPR[SPS]-1659921514122
GPR[EPS]-1659921537469
GPR[ESUN]-1659921537469
GPR[SSUN]-1659921537469
-1516948592
GPR[SPVATF]-1659921537650
GPR[EPVATF]-1659921537931
GPR[SPS]-1659921537931
GPR[EPS]-1659921548461
GPR[SPVATF]-1659921548462
GPR[EPVATF]-1659921548736
GPR[SPS]-1659921548736
GPR[EPS]-1659921556310
GPR[ESUN]-1659921556310
GPR[SSUN]-1659921556310
-1516948592
GPR[SPVATF]-1659921556599
GPR[EPVATF]-1659921557665
GPR[SPS]-1659921557665
[384421] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:165.
GPR[EPS]-1659921558103
GPR[SPVATF]-1659921558104
GPR[EPVATF]-1659921558378
GPR[SPS]-1659921558378
GPR[EPS]-1659921570793
GPR[ESUN]-1659921570793
GPR[SSUN]-1659921570793
-1516948592
GPR[ESUN]-1659921570992
GPR[SSUN]-1659921570992
-1516948592
GPR[SPVATF]-1659921571170
GPR[EPVATF]-1659921571452
GPR[SPS]-1659921571452
[398200] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:113.
GPR[EPS]-1659921571883
GPR[ESUN]-1659921571883
GPR[SSUN]-1659921571883
-1516948592
GPR[ESUN]-1659921572062
GPR[SSUN]-1659921572062
-1516948592
GPR[SPVATF]-1659921572237
GPR[EPVATF]-1659921572506
GPR[SPS]-1659921572506
[399245] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:111.
GPR[EPS]-1659921572927
GPR[ESUN]-1659921572927
GPR[SSUN]-1659921572927
-1966087783
GPR[SPVATF]-1659921573115
GPR[EPVATF]-1659921573132
[399450] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921573132
GPR[SSUN]-1659921573132
-1966087783
GPR[SPVATF]-1659921573321
GPR[EPVATF]-1659921573339
[399657] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921573339
GPR[SSUN]-1659921573339
-1966087783
GPR[SPVATF]-1659921573522
GPR[EPVATF]-1659921573538
[399856] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921573538
GPR[SSUN]-1659921573538
-1966087783
GPR[SPVATF]-1659921573723
GPR[EPVATF]-1659921573740
[400058] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921573740
GPR[SSUN]-1659921573740
-1966087783
GPR[SPVATF]-1659921573924
GPR[EPVATF]-1659921573940
[400258] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921573940
GPR[SSUN]-1659921573940
-1966087783
GPR[SPVATF]-1659921574124
GPR[EPVATF]-1659921574141
[400459] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921574141
GPR[SSUN]-1659921574141
-1966087783
GPR[SPVATF]-1659921574327
GPR[EPVATF]-1659921574345
[400663] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921574345
GPR[EPVATF]-1659921574361
[400679] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921574361
GPR[SSUN]-1659921574361
-1966087783
GPR[ESUN]-1659921574549
GPR[SSUN]-1659921574549
-711686510
GPR[ESUN]-1659921574806
GPR[SSUN]-1659921574806
1965452846
GPR[ESUN]-1659921575031
GPR[SSUN]-1659921575031
1965452846
GPR[SPVATF]-1659921575239
GPR[EPVATF]-1659921575511
GPR[SPS]-1659921575511
[402344] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph$AnnotatedLinkedDirectedGraphEdge:578.
GPR[EPS]-1659921576026
GPR[ESUN]-1659921576026
GPR[SSUN]-1659921576026
1965452846
GPR[ESUN]-1659921576235
GPR[SSUN]-1659921576235
-1516948592
GPR[ESUN]-1659921576415
GPR[SSUN]-1659921576415
-1516948592
GPR[ESUN]-1659921576593
GPR[SSUN]-1659921576593
-1516948592
GPR[SPVATF]-1659921576770
GPR[EPVATF]-1659921577042
GPR[SPS]-1659921577042
[403785] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:147.
GPR[EPS]-1659921577467
GPR[ESUN]-1659921577467
GPR[SSUN]-1659921577467
-1516948592
GPR[SPVATF]-1659921577648
GPR[EPVATF]-1659921577913
GPR[SPS]-1659921577914
[404711] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:146.
GPR[EPS]-1659921578393
GPR[SPVATF]-1659921578393
GPR[EPVATF]-1659921578665
GPR[SPS]-1659921578665
[405406] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:146.
GPR[EPS]-1659921579088
GPR[ESUN]-1659921579088
GPR[SSUN]-1659921579088
-1516948592
GPR[ESUN]-1659921579270
GPR[SSUN]-1659921579270
-1516948592
GPR[SPVATF]-1659921579448
GPR[EPVATF]-1659921579718
GPR[SPS]-1659921579718
[406460] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:142.
GPR[EPS]-1659921580142
GPR[SPVATF]-1659921580142
GPR[EPVATF]-1659921580406
GPR[SPS]-1659921580406
[407148] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:142.
GPR[EPS]-1659921580830
GPR[ESUN]-1659921580830
GPR[SSUN]-1659921580830
1965452846
GPR[ESUN]-1659921581039
GPR[SSUN]-1659921581039
1965452846
GPR[SPVATF]-1659921581280
GPR[EPVATF]-1659921581554
GPR[SPS]-1659921581554
[408384] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:316.
GPR[EPS]-1659921582066
GPR[ESUN]-1659921582066
GPR[SSUN]-1659921582066
-1696950979
GPR[SPVATF]-1659921582288
GPR[EPVATF]-1659921582562
GPR[SPS]-1659921582562
[409376] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:236.
GPR[EPS]-1659921583058
GPR[ESUN]-1659921583058
GPR[SSUN]-1659921583058
-1696950979
GPR[SPVATF]-1659921583283
GPR[EPVATF]-1659921583558
GPR[SPS]-1659921583558
[410370] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:235.
GPR[EPS]-1659921584052
GPR[SPVATF]-1659921584052
GPR[EPVATF]-1659921584320
GPR[SPS]-1659921584320
[411138] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:235.
GPR[EPS]-1659921584820
GPR[ESUN]-1659921584820
GPR[SSUN]-1659921584820
-1516948592
GPR[ESUN]-1659921584999
GPR[SSUN]-1659921584999
-1516948592
GPR[SPVATF]-1659921585177
GPR[EPVATF]-1659921585446
GPR[SPS]-1659921585446
[412192] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:152.
GPR[EPS]-1659921585874
GPR[ESUN]-1659921585874
GPR[SSUN]-1659921585874
-1516948592
GPR[SPVATF]-1659921586055
GPR[EPVATF]-1659921586330
GPR[SPS]-1659921586330
[413077] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:141.
GPR[EPS]-1659921586759
GPR[ESUN]-1659921586759
GPR[SSUN]-1659921586760
-1516948592
GPR[SPVATF]-1659921586941
GPR[EPVATF]-1659921587220
GPR[SPS]-1659921587220
[414006] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:140.
GPR[EPS]-1659921587688
GPR[ESUN]-1659921587688
GPR[SSUN]-1659921587688
-1516948592
GPR[ESUN]-1659921587875
GPR[SSUN]-1659921587875
-1516948592
GPR[SPVATF]-1659921588054
GPR[EPVATF]-1659921588332
GPR[SPS]-1659921588333
[415082] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:136.
GPR[EPS]-1659921588764
GPR[ESUN]-1659921588764
GPR[SSUN]-1659921588764
-1516948592
GPR[SPVATF]-1659921588947
GPR[EPVATF]-1659921589221
GPR[SPS]-1659921589221
[415966] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:135.
GPR[EPS]-1659921589648
GPR[ESUN]-1659921589648
GPR[SSUN]-1659921589648
-1516948592
GPR[ESUN]-1659921589829
GPR[SSUN]-1659921589829
-1516948592
GPR[SPVATF]-1659921590008
GPR[EPVATF]-1659921590285
GPR[SPS]-1659921590285
[417031] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:131.
GPR[EPS]-1659921590713
GPR[ESUN]-1659921590714
GPR[SSUN]-1659921590714
-1516948592
GPR[SPVATF]-1659921590923
GPR[EPVATF]-1659921591196
GPR[SPS]-1659921591196
[417945] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:130.
GPR[EPS]-1659921591627
GPR[ESUN]-1659921591627
GPR[SSUN]-1659921591627
-1516948592
GPR[SPVATF]-1659921591805
GPR[EPVATF]-1659921592082
GPR[SPS]-1659921592082
[418834] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:129.
GPR[EPS]-1659921592516
GPR[ESUN]-1659921592516
GPR[SSUN]-1659921592516
1965452846
GPR[ESUN]-1659921592722
GPR[SSUN]-1659921592722
1965452846
GPR[ESUN]-1659921592929
GPR[SSUN]-1659921592929
1965452846
GPR[SPVATF]-1659921593137
GPR[EPVATF]-1659921593412
GPR[SPS]-1659921593412
[420232] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:315.
GPR[EPS]-1659921593914
GPR[ESUN]-1659921593914
GPR[SSUN]-1659921593914
1965452846
GPR[SPVATF]-1659921594163
GPR[EPVATF]-1659921594437
GPR[SPS]-1659921594437
[421265] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:314.
GPR[EPS]-1659921594947
GPR[ESUN]-1659921594947
GPR[SSUN]-1659921594947
1965452846
GPR[ESUN]-1659921595162
GPR[SSUN]-1659921595162
69062959
GPR[ESUN]-1659921595345
GPR[SSUN]-1659921595345
69062959
GPR[ESUN]-1659921595524
GPR[SSUN]-1659921595524
69062959
GPR[ESUN]-1659921595705
GPR[SSUN]-1659921595705
69062959
GPR[SPVATF]-1659921595891
GPR[EPVATF]-1659921596967
GPR[SPS]-1659921596967
[423792] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:350.
GPR[EPS]-1659921597474
GPR[ESUN]-1659921597474
GPR[SSUN]-1659921597474
69062959
GPR[SPVATF]-1659921597661
GPR[EPVATF]-1659921598350
GPR[SPS]-1659921598350
[425102] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:349.
GPR[EPS]-1659921598784
GPR[ESUN]-1659921598784
GPR[SSUN]-1659921598784
69062959
GPR[ESUN]-1659921598972
GPR[SSUN]-1659921598972
69062959
GPR[ESUN]-1659921599155
GPR[SSUN]-1659921599155
69062959
GPR[SPVATF]-1659921599339
GPR[EPVATF]-1659921599615
GPR[SPS]-1659921599615
[426376] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:341.
GPR[EPS]-1659921600058
GPR[ESUN]-1659921600058
GPR[SSUN]-1659921600058
69062959
GPR[SPVATF]-1659921600241
GPR[EPVATF]-1659921600513
GPR[SPS]-1659921600513
[427266] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:340.
GPR[EPS]-1659921600948
GPR[ESUN]-1659921600948
GPR[SSUN]-1659921600948
69062959
GPR[SPVATF]-1659921601132
GPR[EPVATF]-1659921601408
GPR[SPS]-1659921601408
[428164] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:339.
GPR[EPS]-1659921601846
GPR[ESUN]-1659921601846
GPR[SSUN]-1659921601846
69062959
GPR[SPVATF]-1659921602029
GPR[EPVATF]-1659921602298
GPR[SPS]-1659921602298
[429056] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:338.
GPR[EPS]-1659921602738
GPR[ESUN]-1659921602738
GPR[SSUN]-1659921602738
69062959
GPR[ESUN]-1659921602924
GPR[SSUN]-1659921602924
69062959
GPR[SPVATF]-1659921603104
GPR[EPVATF]-1659921603372
GPR[SPS]-1659921603372
[430125] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:280.
GPR[EPS]-1659921603807
GPR[ESUN]-1659921603807
GPR[SSUN]-1659921603807
69062959
GPR[SPVATF]-1659921604020
GPR[EPVATF]-1659921604290
GPR[SPS]-1659921604290
[431043] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:278.
GPR[EPS]-1659921604725
GPR[ESUN]-1659921604725
GPR[SSUN]-1659921604725
69062959
GPR[ESUN]-1659921604909
GPR[SSUN]-1659921604909
69062959
GPR[SPVATF]-1659921605090
GPR[EPVATF]-1659921605358
GPR[SPS]-1659921605358
[432101] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:270.
GPR[EPS]-1659921605783
GPR[ESUN]-1659921605783
GPR[SSUN]-1659921605783
69062959
GPR[SPVATF]-1659921605968
GPR[EPVATF]-1659921606236
GPR[SPS]-1659921606236
[432991] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:268.
GPR[EPS]-1659921606673
GPR[ESUN]-1659921606674
GPR[SSUN]-1659921606674
69062959
GPR[SPVATF]-1659921606858
GPR[EPVATF]-1659921607124
GPR[SPS]-1659921607124
[433883] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:267.
GPR[EPS]-1659921607565
GPR[SPVATF]-1659921607565
GPR[EPVATF]-1659921607827
GPR[SPS]-1659921607827
[434579] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:267.
GPR[EPS]-1659921608261
GPR[ESUN]-1659921608261
GPR[SSUN]-1659921608261
69062959
GPR[ESUN]-1659921608442
GPR[SSUN]-1659921608442
69062959
GPR[SPVATF]-1659921608623
GPR[EPVATF]-1659921608888
GPR[SPS]-1659921608888
[435635] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:259.
GPR[EPS]-1659921609317
GPR[ESUN]-1659921609317
GPR[SSUN]-1659921609317
69062959
GPR[SPVATF]-1659921609500
GPR[EPVATF]-1659921609763
GPR[SPS]-1659921609763
[436517] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:257.
GPR[EPS]-1659921610199
GPR[ESUN]-1659921610199
GPR[SSUN]-1659921610199
69062959
GPR[ESUN]-1659921610382
GPR[SSUN]-1659921610382
69062959
GPR[SPVATF]-1659921610601
GPR[EPVATF]-1659921610874
GPR[SPS]-1659921610874
[437626] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:249.
GPR[EPS]-1659921611308
GPR[ESUN]-1659921611308
GPR[SSUN]-1659921611308
69062959
GPR[SPVATF]-1659921611492
GPR[EPVATF]-1659921611763
GPR[SPS]-1659921611763
[438524] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:247.
GPR[EPS]-1659921612206
GPR[ESUN]-1659921612206
GPR[SSUN]-1659921612206
69062959
GPR[SPVATF]-1659921612389
GPR[EPVATF]-1659921612650
GPR[SPS]-1659921612650
[439401] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:246.
GPR[EPS]-1659921613083
GPR[SPVATF]-1659921613083
GPR[EPVATF]-1659921613351
GPR[SPS]-1659921613351
[440106] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:246.
GPR[EPS]-1659921613788
GPR[ESUN]-1659921613788
GPR[SSUN]-1659921613788
-1797850673
GPR[SPVATF]-1659921614037
GPR[EPVATF]-1659921614300
GPR[SPS]-1659921614300
[441158] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:646.
GPR[EPS]-1659921614840
GPR[ESUN]-1659921614840
GPR[SSUN]-1659921614840
-132053243
GPR[SPVATF]-1659921615031
GPR[EPVATF]-1659921615049
[441367] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921615049
GPR[SSUN]-1659921615049
-132053243
GPR[SPVATF]-1659921615236
GPR[EPVATF]-1659921615253
[441571] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921615253
GPR[SSUN]-1659921615253
-132053243
GPR[SPVATF]-1659921615440
GPR[EPVATF]-1659921615457
[441775] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921615457
GPR[SSUN]-1659921615457
160819208
GPR[ESUN]-1659921615681
GPR[SSUN]-1659921615681
160819208
GPR[SPVATF]-1659921615907
GPR[EPVATF]-1659921616052
GPR[SPS]-1659921616052
[442920] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:540.
GPR[EPS]-1659921616602
GPR[ESUN]-1659921616602
GPR[SSUN]-1659921616602
160819208
GPR[ESUN]-1659921616896
GPR[SSUN]-1659921616896
160819208
GPR[SPVATF]-1659921617120
GPR[EPVATF]-1659921617264
GPR[SPS]-1659921617264
[444032] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:329.
GPR[EPS]-1659921617714
GPR[ESUN]-1659921617714
GPR[SSUN]-1659921617714
-1117079791
GPR[SPVATF]-1659921617908
GPR[EPVATF]-1659921618175
GPR[SPS]-1659921618175
[444938] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:528.
GPR[EPS]-1659921618620
GPR[ESUN]-1659921618620
GPR[SSUN]-1659921618620
-1117079791
GPR[SPVATF]-1659921618814
GPR[EPVATF]-1659921619086
GPR[SPS]-1659921619086
[445860] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:527.
GPR[EPS]-1659921619542
GPR[ESUN]-1659921619542
GPR[SSUN]-1659921619542
795998767
GPR[ESUN]-1659921619759
GPR[SSUN]-1659921619759
795998767
GPR[ESUN]-1659921619974
GPR[SSUN]-1659921619974
795998767
GPR[SPVATF]-1659921620190
GPR[EPVATF]-1659921620456
GPR[SPS]-1659921620456
GPR[EPS]-1659921630721
GPR[SPVATF]-1659921630721
GPR[EPVATF]-1659921630994
GPR[SPS]-1659921630994
GPR[EPS]-1659921641200
GPR[ESUN]-1659921641200
GPR[SSUN]-1659921641200
795998767
GPR[SPVATF]-1659921641423
GPR[EPVATF]-1659921641710
GPR[SPS]-1659921641710
[468511] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckMissingReturn:163.
GPR[EPS]-1659921642193
GPR[SPVATF]-1659921642193
GPR[EPVATF]-1659921642472
GPR[SPS]-1659921642472
GPR[EPS]-1659921650278
GPR[ESUN]-1659921650278
GPR[SSUN]-1659921650278
795998767
GPR[ESUN]-1659921650502
GPR[SSUN]-1659921650502
-132053243
GPR[SPVATF]-1659921650691
GPR[EPVATF]-1659921650708
[477026] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921650709
GPR[EPVATF]-1659921650725
[477043] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921650726
GPR[SSUN]-1659921650726
-132053243
GPR[ESUN]-1659921650918
GPR[SSUN]-1659921650918
GPR[ESUN]-1659921650918
GPR[SSUN]-1659921650918
160819208
GPR[ESUN]-1659921651145
GPR[SSUN]-1659921651145
-132053243
GPR[ESUN]-1659921651329
GPR[SSUN]-1659921651329
-132053243
GPR[SPVATF]-1659921651512
GPR[EPVATF]-1659921651530
[477848] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921651530
GPR[EPVATF]-1659921651546
[477864] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921651546
GPR[SSUN]-1659921651546
-132053243
GPR[ESUN]-1659921651731
GPR[SSUN]-1659921651731
-132053243
GPR[ESUN]-1659921651915
GPR[SSUN]-1659921651915
-132053243
GPR[ESUN]-1659921652099
GPR[SSUN]-1659921652099
-132053243
GPR[SPVATF]-1659921652279
GPR[EPVATF]-1659921652296
[478614] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921652296
GPR[EPVATF]-1659921652312
[478631] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921652313
GPR[SSUN]-1659921652313
-132053243
GPR[SPVATF]-1659921652497
GPR[EPVATF]-1659921652514
[478832] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921652514
GPR[SSUN]-1659921652514
1187751237
GPR[ESUN]-1659921652785
GPR[SSUN]-1659921652785
-132053243
GPR[SPVATF]-1659921652969
GPR[EPVATF]-1659921652985
[479304] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921652986
GPR[EPVATF]-1659921653002
[479320] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921653002
GPR[SSUN]-1659921653002
-132053243
GPR[SPVATF]-1659921653202
GPR[EPVATF]-1659921653219
[479537] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921653219
GPR[SSUN]-1659921653219
-132053243
GPR[SPVATF]-1659921653405
GPR[EPVATF]-1659921653423
[479741] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921653423
GPR[SSUN]-1659921653423
GPR[ESUN]-1659921653423
GPR[SSUN]-1659921653423
GPR[ESUN]-1659921653423
GPR[SSUN]-1659921653423
GPR[ESUN]-1659921653423
GPR[SSUN]-1659921653423
GPR[ESUN]-1659921653423
GPR[SSUN]-1659921653423
GPR[ESUN]-1659921653423
GPR[SSUN]-1659921653423
GPR[ESUN]-1659921653423
GPR[SSUN]-1659921653423
GPR[ESUN]-1659921653423
GPR[SSUN]-1659921653423
GPR[ESUN]-1659921653423
GPR[SSUN]-1659921653423
GPR[ESUN]-1659921653423
GPR[SSUN]-1659921653423
GPR[ESUN]-1659921653423
GPR[SSUN]-1659921653423
-1007410555
GPR[ESUN]-1659921653607
GPR[SSUN]-1659921653607
-711686510
GPR[ESUN]-1659921653829
GPR[SSUN]-1659921653829
GPR[ESUN]-1659921653829
GPR[SSUN]-1659921653829
GPR[ESUN]-1659921653829
GPR[SSUN]-1659921653829
-1345859678
GPR[SPVATF]-1659921654065
GPR[EPVATF]-1659921654207
GPR[SPS]-1659921654207
[481032] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:508.
GPR[EPS]-1659921654714
GPR[ESUN]-1659921654714
GPR[SSUN]-1659921654714
-1345859678
GPR[SPVATF]-1659921654955
GPR[EPVATF]-1659921655097
GPR[SPS]-1659921655097
[481916] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:507.
GPR[EPS]-1659921655598
GPR[ESUN]-1659921655598
GPR[SSUN]-1659921655598
-1345859678
GPR[ESUN]-1659921655839
GPR[SSUN]-1659921655839
GPR[ESUN]-1659921655839
GPR[SSUN]-1659921655839
-132053243
GPR[ESUN]-1659921656023
GPR[SSUN]-1659921656023
-132053243
GPR[SPVATF]-1659921656207
GPR[EPVATF]-1659921656225
[482543] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921656225
GPR[EPVATF]-1659921656243
[482561] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921656243
GPR[SSUN]-1659921656243
-132053243
GPR[ESUN]-1659921656428
GPR[SSUN]-1659921656428
1187751237
GPR[SPVATF]-1659921656692
GPR[EPVATF]-1659921656988
GPR[SPS]-1659921656988
[483934] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1680.
GPR[EPS]-1659921657616
GPR[ESUN]-1659921657616
GPR[SSUN]-1659921657617
-132053243
GPR[SPVATF]-1659921657803
GPR[EPVATF]-1659921657822
[484140] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921657822
GPR[SSUN]-1659921657822
-132053243
GPR[SPVATF]-1659921658005
GPR[EPVATF]-1659921658024
[484342] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921658024
GPR[SSUN]-1659921658024
-132053243
GPR[SPVATF]-1659921658207
GPR[EPVATF]-1659921658224
[484542] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921658224
GPR[SSUN]-1659921658224
-132053243
GPR[SPVATF]-1659921658432
GPR[EPVATF]-1659921658449
[484767] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921658450
GPR[SSUN]-1659921658450
-132053243
GPR[SPVATF]-1659921658636
GPR[EPVATF]-1659921658654
[484972] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921658654
GPR[SSUN]-1659921658654
-132053243
GPR[ESUN]-1659921658841
GPR[SSUN]-1659921658841
160819208
GPR[ESUN]-1659921659061
GPR[SSUN]-1659921659061
160819208
GPR[ESUN]-1659921659286
GPR[SSUN]-1659921659286
160819208
GPR[SPVATF]-1659921659513
GPR[EPVATF]-1659921659657
GPR[SPS]-1659921659657
[486422] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:594.
GPR[EPS]-1659921660104
GPR[SPVATF]-1659921660104
GPR[EPVATF]-1659921660245
GPR[SPS]-1659921660245
[487008] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:594.
GPR[EPS]-1659921660690
GPR[ESUN]-1659921660690
GPR[SSUN]-1659921660690
160819208
GPR[SPVATF]-1659921660914
GPR[EPVATF]-1659921661057
GPR[SPS]-1659921661057
[487823] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:592.
GPR[EPS]-1659921661505
GPR[ESUN]-1659921661505
GPR[SSUN]-1659921661505
160819208
GPR[SPVATF]-1659921661727
GPR[EPVATF]-1659921661870
GPR[SPS]-1659921661870
[488639] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:583.
GPR[EPS]-1659921662321
GPR[SPVATF]-1659921662321
GPR[EPVATF]-1659921662463
GPR[SPS]-1659921662463
[489229] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:583.
GPR[EPS]-1659921662911
GPR[ESUN]-1659921662911
GPR[SSUN]-1659921662911
160819208
GPR[SPVATF]-1659921663136
GPR[EPVATF]-1659921663278
GPR[SPS]-1659921663278
[490081] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:573.
GPR[EPS]-1659921663763
GPR[SPVATF]-1659921663763
GPR[EPVATF]-1659921663905
GPR[SPS]-1659921663905
[490680] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:573.
GPR[EPS]-1659921664362
GPR[ESUN]-1659921664362
GPR[SSUN]-1659921664362
160819208
GPR[ESUN]-1659921664590
GPR[SSUN]-1659921664590
160819208
GPR[SPVATF]-1659921664813
GPR[EPVATF]-1659921664952
GPR[SPS]-1659921664952
[491681] ERROR ConstraintModelBuilder - Unable to compile the change: 
final class ControlFlowAnalysis implements com.google.javascript.jscomp.NodeTraversal.Callback , com.google.javascript.jscomp.CompilerPass {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> cfg;

    private java.util.Map<com.google.javascript.rhino.Node, java.lang.Integer> astPosition;

    private java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer> nodePriorities;

    private final java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> priorityComparator = new java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>() {
        @java.lang.Override
        public int compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> a, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> b) {
            return astPosition.get(a.getValue()) - astPosition.get(b.getValue());
        }
    };

    private int astPositionCounter;

    private int priorityCounter;

    private final boolean shouldTraverseFunctions;

    private final boolean edgeAnnotations;

    private com.google.javascript.rhino.Node root;

    private final java.util.Deque<com.google.javascript.rhino.Node> exceptionHandler = new java.util.ArrayDeque<com.google.javascript.rhino.Node>();

    private final com.google.common.collect.Multimap<com.google.javascript.rhino.Node, com.google.javascript.rhino.Node> finallyMap = com.google.common.collect.HashMultimap.create();

    ControlFlowAnalysis(com.google.javascript.jscomp.AbstractCompiler compiler, boolean shouldTraverseFunctions, boolean edgeAnnotations) {
        this.compiler = compiler;
        this.shouldTraverseFunctions = shouldTraverseFunctions;
        this.edgeAnnotations = edgeAnnotations;
    }

    com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> getCfg() {
        return cfg;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        this.root = root;
        astPositionCounter = 0;
        astPosition = com.google.common.collect.Maps.newHashMap();
        nodePriorities = com.google.common.collect.Maps.newHashMap();
        cfg = new com.google.javascript.jscomp.ControlFlowAnalysis.AstControlFlowGraph(com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(root), nodePriorities, edgeAnnotations);
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, this);
        astPosition.put(null, ++astPositionCounter);
        priorityCounter = 0;
        com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> entry = cfg.getEntry();
        prioritizeFromEntryNode(entry);
        if (shouldTraverseFunctions) {
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> candidate : cfg.getDirectedGraphNodes()) {
                com.google.javascript.rhino.Node value = candidate.getValue();
                if ((value != null) && value.isFunction()) {
                    com.google.common.base.Preconditions.checkState((!nodePriorities.containsKey(candidate)) || (candidate == entry));
                    prioritizeFromEntryNode(candidate);
                }
            }
        }
        for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> candidate : cfg.getDirectedGraphNodes()) {
            if (!nodePriorities.containsKey(candidate)) {
                nodePriorities.put(candidate, ++priorityCounter);
            }
        }
        nodePriorities.put(cfg.getImplicitReturn(), ++priorityCounter);
    }

    private void prioritizeFromEntryNode(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> entry) {
        java.util.PriorityQueue<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> worklist = new java.util.PriorityQueue<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>(10, priorityComparator);
        worklist.add(entry);
        while (!worklist.isEmpty()) {
            com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> current = worklist.remove();
            if (nodePriorities.containsKey(current)) {
                continue;
            }
            nodePriorities.put(current, ++priorityCounter);
            java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> successors = cfg.getDirectedSuccNodes(current);
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> candidate : successors) {
                worklist.add(candidate);
            }
        } 
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        astPosition.put(n, astPositionCounter++);
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                if (shouldTraverseFunctions || (n == cfg.getEntry().getValue())) {
                    exceptionHandler.push(n);
                    return true;
                }
                return false;
            case com.google.javascript.rhino.Token.TRY :
                exceptionHandler.push(n);
                return true;
        }
        if (parent != null) {
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.FOR :
                    return n == parent.getLastChild();
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.WITH :
                    return n != parent.getFirstChild();
                case com.google.javascript.rhino.Token.DO :
                    return n != parent.getFirstChild().getNext();
                case com.google.javascript.rhino.Token.SWITCH :
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.CATCH :
                case com.google.javascript.rhino.Token.LABEL :
                    return n != parent.getFirstChild();
                case com.google.javascript.rhino.Token.FUNCTION :
                    return n == parent.getFirstChild().getNext().getNext();
                case com.google.javascript.rhino.Token.CONTINUE :
                case com.google.javascript.rhino.Token.BREAK :
                case com.google.javascript.rhino.Token.EXPR_RESULT :
                case com.google.javascript.rhino.Token.VAR :
                case com.google.javascript.rhino.Token.RETURN :
                case com.google.javascript.rhino.Token.THROW :
                    return false;
                case com.google.javascript.rhino.Token.TRY :
                    if (n == parent.getFirstChild().getNext()) {
                        com.google.common.base.Preconditions.checkState(exceptionHandler.peek() == parent);
                        exceptionHandler.pop();
                    }
            }
        }
        return true;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.IF :
                handleIf(n);
                return;
            case com.google.javascript.rhino.Token.WHILE :
                handleWhile(n);
                return;
            case com.google.javascript.rhino.Token.DO :
                handleDo(n);
                return;
            case com.google.javascript.rhino.Token.FOR :
                handleFor(n);
                return;
            case com.google.javascript.rhino.Token.SWITCH :
                handleSwitch(n);
                return;
            case com.google.javascript.rhino.Token.CASE :
                handleCase(n);
                return;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                handleDefault(n);
                return;
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.SCRIPT :
                handleStmtList(n);
                return;
            case com.google.javascript.rhino.Token.FUNCTION :
                handleFunction(n);
                return;
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                handleExpr(n);
                return;
            case com.google.javascript.rhino.Token.THROW :
                handleThrow(n);
                return;
            case com.google.javascript.rhino.Token.TRY :
                handleTry(n);
                return;
            case com.google.javascript.rhino.Token.CATCH :
                handleCatch(n);
                return;
            case com.google.javascript.rhino.Token.BREAK :
                handleBreak(n);
                return;
            case com.google.javascript.rhino.Token.CONTINUE :
                handleContinue(n);
                return;
            case com.google.javascript.rhino.Token.RETURN :
                handleReturn(n);
                return;
            case com.google.javascript.rhino.Token.WITH :
                handleWith(n);
                return;
            case com.google.javascript.rhino.Token.LABEL :
                return;
            default :
                handleStmt(n);
                return;
        }
    }

    private void handleIf(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node thenBlock = node.getFirstChild().getNext();
        com.google.javascript.rhino.Node elseBlock = thenBlock.getNext();
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(thenBlock));
        if (elseBlock == null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        } else {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(elseBlock));
        }
        connectToPossibleExceptionHandler(node, com.google.javascript.jscomp.NodeUtil.getConditionExpression(node));
    }

    private void handleWhile(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getFirstChild().getNext()));
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, com.google.javascript.jscomp.NodeUtil.getConditionExpression(node));
    }

    private void handleDo(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getFirstChild()));
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, com.google.javascript.jscomp.NodeUtil.getConditionExpression(node));
    }

    private void handleFor(com.google.javascript.rhino.Node forNode) {
        if (forNode.getChildCount() == 4) {
            com.google.javascript.rhino.Node init = forNode.getFirstChild();
            com.google.javascript.rhino.Node cond = init.getNext();
            com.google.javascript.rhino.Node iter = cond.getNext();
            com.google.javascript.rhino.Node body = iter.getNext();
            createEdge(init, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, forNode);
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(body));
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(forNode, this));
            createEdge(iter, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, forNode);
            connectToPossibleExceptionHandler(init, init);
            connectToPossibleExceptionHandler(forNode, cond);
            connectToPossibleExceptionHandler(iter, iter);
        } else {
            com.google.javascript.rhino.Node item = forNode.getFirstChild();
            com.google.javascript.rhino.Node collection = item.getNext();
            com.google.javascript.rhino.Node body = collection.getNext();
            createEdge(collection, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, forNode);
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(body));
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(forNode, this));
            connectToPossibleExceptionHandler(forNode, collection);
        }
    }

    private void handleSwitch(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node next = com.google.javascript.jscomp.ControlFlowAnalysis.getNextSiblingOfType(node.getFirstChild().getNext(), com.google.javascript.rhino.Token.CASE, com.google.javascript.rhino.Token.EMPTY);
        if (next != null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, next);
        } else if (node.getFirstChild().getNext() != null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getFirstChild().getNext());
        } else {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        }
        connectToPossibleExceptionHandler(node, node.getFirstChild());
    }

    private void handleCase(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, node.getFirstChild().getNext());
        com.google.javascript.rhino.Node next = com.google.javascript.jscomp.ControlFlowAnalysis.getNextSiblingOfType(node.getNext(), com.google.javascript.rhino.Token.CASE);
        if (next != null) {
            com.google.common.base.Preconditions.checkState(next.isCase());
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, next);
        } else {
            com.google.javascript.rhino.Node parent = node.getParent();
            com.google.javascript.rhino.Node deflt = com.google.javascript.jscomp.ControlFlowAnalysis.getNextSiblingOfType(parent.getFirstChild().getNext(), com.google.javascript.rhino.Token.DEFAULT_CASE);
            if (deflt != null) {
                createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, deflt);
            } else {
                createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
            }
        }
        connectToPossibleExceptionHandler(node, node.getFirstChild());
    }

    private void handleDefault(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getFirstChild());
    }

    private void handleWith(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getLastChild());
        connectToPossibleExceptionHandler(node, node.getFirstChild());
    }

    private void handleStmtList(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node parent = node.getParent();
        if ((((node.isBlock() && (parent != null)) && parent.isTry()) && (com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent) == node)) && (!com.google.javascript.jscomp.NodeUtil.hasCatchHandler(node))) {
            return;
        }
        com.google.javascript.rhino.Node child = node.getFirstChild();
        while ((child != null) && child.isFunction()) {
            child = child.getNext();
        } 
        if (child != null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(child));
        } else {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        }
        if (parent != null) {
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.DEFAULT_CASE :
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.TRY :
                    break;
                default :
                    if (node.isBlock() && node.isSyntheticBlock()) {
                        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.SYN_BLOCK, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
                    }
                    break;
            }
        }
    }

    private void handleFunction(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkState(node.getChildCount() >= 3);
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getFirstChild().getNext().getNext()));
        com.google.common.base.Preconditions.checkState(exceptionHandler.peek() == node);
        exceptionHandler.pop();
    }

    private void handleExpr(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, node);
    }

    private void handleThrow(com.google.javascript.rhino.Node node) {
        connectToPossibleExceptionHandler(node, node);
    }

    private void handleTry(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getFirstChild());
    }

    private void handleCatch(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getLastChild());
    }

    private void handleBreak(com.google.javascript.rhino.Node node) {
        java.lang.String label = null;
        if (node.hasChildren()) {
            label = node.getFirstChild().getString();
        }
        com.google.javascript.rhino.Node cur;
        com.google.javascript.rhino.Node previous = null;
        com.google.javascript.rhino.Node lastJump;
        com.google.javascript.rhino.Node parent = node.getParent();
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(156).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(156).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(156).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(156).collectInput("previous",previous);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(156).collectInput("com.google.javascript.jscomp.ControlFlowAnalysis.this.compiler",com.google.javascript.jscomp.ControlFlowAnalysis.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(156).collectInput("com.google.javascript.jscomp.ControlFlowAnalysis.this.exceptionHandler",com.google.javascript.jscomp.ControlFlowAnalysis.this.exceptionHandler);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(156).collectInput("com.google.javascript.jscomp.ControlFlowAnalysis.this.priorityCounter",com.google.javascript.jscomp.ControlFlowAnalysis.this.priorityCounter);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(156).collectInput("label",label);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(156).collectInput("com.google.javascript.jscomp.ControlFlowAnalysis.this.astPosition",com.google.javascript.jscomp.ControlFlowAnalysis.this.astPosition);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(156).collectInput("com.google.javascript.jscomp.ControlFlowAnalysis.this.shouldTraverseFunctions",com.google.javascript.jscomp.ControlFlowAnalysis.this.shouldTraverseFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(156).collectInput("com.google.javascript.jscomp.ControlFlowAnalysis.this.astPositionCounter",com.google.javascript.jscomp.ControlFlowAnalysis.this.astPositionCounter);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(156).collectInput("com.google.javascript.jscomp.ControlFlowAnalysis.this.cfg",com.google.javascript.jscomp.ControlFlowAnalysis.this.cfg);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(156).collectInput("com.google.javascript.jscomp.ControlFlowAnalysis.this.finallyMap",com.google.javascript.jscomp.ControlFlowAnalysis.this.finallyMap);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(156).collectInput("com.google.javascript.jscomp.ControlFlowAnalysis.this.root",com.google.javascript.jscomp.ControlFlowAnalysis.this.root);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(156).collectInput("node",node);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(156).collectInput("com.google.javascript.jscomp.ControlFlowAnalysis.this.priorityComparator",com.google.javascript.jscomp.ControlFlowAnalysis.this.priorityComparator);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(156).collectInput("com.google.javascript.jscomp.ControlFlowAnalysis.this.edgeAnnotations",com.google.javascript.jscomp.ControlFlowAnalysis.this.edgeAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(156).collectInput("com.google.javascript.jscomp.ControlFlowAnalysis.this.nodePriorities",com.google.javascript.jscomp.ControlFlowAnalysis.this.nodePriorities);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(156).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(156).collectionEnds();
        }
        if (runtimeAngelicValue)
            for (cur = node, lastJump = node; !com.google.javascript.jscomp.ControlFlowAnalysis.isBreakTarget(cur, label); cur = parent , parent = parent.getParent()) {
                if ((cur.isTry() && com.google.javascript.jscomp.NodeUtil.hasFinally(cur)) && (cur.getLastChild() != previous)) {
                    if (lastJump == node) {
                        createEdge(lastJump, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));
                    } else {
                        finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));
                    }
                    lastJump = cur;
                }
                if (parent == null) {
                    if (compiler.isIdeMode()) {
                        return;
                    } else {
                        throw new java.lang.IllegalStateException("Cannot find break target.");
                    }
                }
                previous = cur;
            }

        if (lastJump == node) {
            createEdge(lastJump, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(cur, this));
        } else {
            finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(cur, this));
        }
    }

    private void handleContinue(com.google.javascript.rhino.Node node) {
        java.lang.String label = null;
        if (node.hasChildren()) {
            label = node.getFirstChild().getString();
        }
        com.google.javascript.rhino.Node cur;
        com.google.javascript.rhino.Node previous = null;
        com.google.javascript.rhino.Node lastJump;
        com.google.javascript.rhino.Node parent = node.getParent();
        for (cur = node, lastJump = node; !com.google.javascript.jscomp.ControlFlowAnalysis.isContinueTarget(cur, parent, label); cur = parent , parent = parent.getParent()) {
            if ((cur.isTry() && com.google.javascript.jscomp.NodeUtil.hasFinally(cur)) && (cur.getLastChild() != previous)) {
                if (lastJump == node) {
                    createEdge(lastJump, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, cur.getLastChild());
                } else {
                    finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));
                }
                lastJump = cur;
            }
            com.google.common.base.Preconditions.checkState(parent != null, "Cannot find continue target.");
            previous = cur;
        }
        com.google.javascript.rhino.Node iter = cur;
        if (cur.getChildCount() == 4) {
            iter = cur.getFirstChild().getNext().getNext();
        }
        if (lastJump == node) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, iter);
        } else {
            finallyMap.put(lastJump, iter);
        }
    }

    private void handleReturn(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node lastJump = null;
        for (java.util.Iterator<com.google.javascript.rhino.Node> iter = exceptionHandler.iterator(); iter.hasNext();) {
            com.google.javascript.rhino.Node curHandler = iter.next();
            if (curHandler.isFunction()) {
                break;
            }
            if (com.google.javascript.jscomp.NodeUtil.hasFinally(curHandler)) {
                if (lastJump == null) {
                    createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, curHandler.getLastChild());
                } else {
                    finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(curHandler.getLastChild()));
                }
                lastJump = curHandler;
            }
        }
        if (node.hasChildren()) {
            connectToPossibleExceptionHandler(node, node.getFirstChild());
        }
        if (lastJump == null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, null);
        } else {
            finallyMap.put(lastJump, null);
        }
    }

    private void handleStmt(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, node);
    }

    static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.ControlFlowAnalysis cfa) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, node, cfa);
    }

    static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node node) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, node, null);
    }

    private static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node fromNode, com.google.javascript.rhino.Node node, com.google.javascript.jscomp.ControlFlowAnalysis cfa) {
        com.google.javascript.rhino.Node parent = node.getParent();
        if (((parent == null) || parent.isFunction()) || ((cfa != null) && (node == cfa.root))) {
            return null;
        }
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.IF :
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
            case com.google.javascript.rhino.Token.CASE :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                if (parent.getNext() != null) {
                    if (parent.getNext().isCase()) {
                        return parent.getNext().getFirstChild().getNext();
                    } else if (parent.getNext().isDefaultCase()) {
                        return parent.getNext().getFirstChild();
                    } else {
                        com.google.common.base.Preconditions.checkState(false, "Not reachable");
                    }
                } else {
                    return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                }
                break;
            case com.google.javascript.rhino.Token.FOR :
                if (com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                    return parent;
                } else {
                    return parent.getFirstChild().getNext().getNext();
                }
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
                return parent;
            case com.google.javascript.rhino.Token.TRY :
                if (parent.getFirstChild() == node) {
                    if (com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(parent.getLastChild());
                    } else {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                    }
                } else if (com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent) == node) {
                    if (com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getNext());
                    } else {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                    }
                } else if (parent.getLastChild() == node) {
                    if (cfa != null) {
                        for (com.google.javascript.rhino.Node finallyNode : cfa.finallyMap.get(parent)) {
                            cfa.createEdge(fromNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, finallyNode);
                        }
                    }
                    return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                }
        }
        com.google.javascript.rhino.Node nextSibling = node.getNext();
        while ((nextSibling != null) && nextSibling.isFunction()) {
            nextSibling = nextSibling.getNext();
        } 
        if (nextSibling != null) {
            return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(nextSibling);
        } else {
            return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
        }
    }

    static com.google.javascript.rhino.Node computeFallThrough(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.DO :
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(n.getFirstChild());
            case com.google.javascript.rhino.Token.FOR :
                if (com.google.javascript.jscomp.NodeUtil.isForIn(n)) {
                    return n.getFirstChild().getNext();
                }
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(n.getFirstChild());
            case com.google.javascript.rhino.Token.LABEL :
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(n.getLastChild());
            default :
                return n;
        }
    }

    private void createEdge(com.google.javascript.rhino.Node fromNode, com.google.javascript.jscomp.ControlFlowGraph.Branch branch, com.google.javascript.rhino.Node toNode) {
        cfg.createNode(fromNode);
        cfg.createNode(toNode);
        cfg.connectIfNotFound(fromNode, branch, toNode);
    }

    private void connectToPossibleExceptionHandler(com.google.javascript.rhino.Node cfgNode, com.google.javascript.rhino.Node target) {
        if (com.google.javascript.jscomp.ControlFlowAnalysis.mayThrowException(target) && (!exceptionHandler.isEmpty())) {
            com.google.javascript.rhino.Node lastJump = cfgNode;
            for (com.google.javascript.rhino.Node handler : exceptionHandler) {
                if (handler.isFunction()) {
                    return;
                }
                com.google.common.base.Preconditions.checkState(handler.isTry());
                com.google.javascript.rhino.Node catchBlock = com.google.javascript.jscomp.NodeUtil.getCatchBlock(handler);
                if (!com.google.javascript.jscomp.NodeUtil.hasCatchHandler(catchBlock)) {
                    if (lastJump == cfgNode) {
                        createEdge(cfgNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_EX, handler.getLastChild());
                    } else {
                        finallyMap.put(lastJump, handler.getLastChild());
                    }
                } else if (lastJump == cfgNode) {
                    createEdge(cfgNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_EX, catchBlock);
                    return;
                } else {
                    finallyMap.put(lastJump, catchBlock);
                }
                lastJump = handler;
            }
        }
    }

    private static com.google.javascript.rhino.Node getNextSiblingOfType(com.google.javascript.rhino.Node first, int... types) {
        for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
            for (int type : types) {
                if (c.getType() == type) {
                    return c;
                }
            }
        }
        return null;
    }

    public static boolean isBreakTarget(com.google.javascript.rhino.Node target, java.lang.String label) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.isBreakStructure(target, label != null) && com.google.javascript.jscomp.ControlFlowAnalysis.matchLabel(target.getParent(), label);
    }

    private static boolean isContinueTarget(com.google.javascript.rhino.Node target, com.google.javascript.rhino.Node parent, java.lang.String label) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.isContinueStructure(target) && com.google.javascript.jscomp.ControlFlowAnalysis.matchLabel(parent, label);
    }

    private static boolean matchLabel(com.google.javascript.rhino.Node target, java.lang.String label) {
        if (label == null) {
            return true;
        }
        while (target.isLabel()) {
            if (target.getFirstChild().getString().equals(label)) {
                return true;
            }
            target = target.getParent();
        } 
        return false;
    }

    public static boolean mayThrowException(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.THROW :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                return false;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if ((!com.google.javascript.jscomp.ControlFlowGraph.isEnteringNewCfgNode(c)) && com.google.javascript.jscomp.ControlFlowAnalysis.mayThrowException(c)) {
                return true;
            }
        }
        return false;
    }

    static boolean isBreakStructure(com.google.javascript.rhino.Node n, boolean labeled) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.SWITCH :
                return true;
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.TRY :
                return labeled;
            default :
                return false;
        }
    }

    static boolean isContinueStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node getExceptionHandler(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node cur = n; (!cur.isScript()) && (!cur.isFunction()); cur = cur.getParent()) {
            com.google.javascript.rhino.Node catchNode = com.google.javascript.jscomp.ControlFlowAnalysis.getCatchHandlerForBlock(cur);
            if (catchNode != null) {
                return catchNode;
            }
        }
        return null;
    }

    static com.google.javascript.rhino.Node getCatchHandlerForBlock(com.google.javascript.rhino.Node block) {
        if ((block.isBlock() && block.getParent().isTry()) && (block.getParent().getFirstChild() == block)) {
            for (com.google.javascript.rhino.Node s = block.getNext(); s != null; s = s.getNext()) {
                if (com.google.javascript.jscomp.NodeUtil.hasCatchHandler(s)) {
                    return s.getFirstChild();
                }
            }
        }
        return null;
    }

    private static class AstControlFlowGraph extends com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> {
        private final java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer> priorities;

        private AstControlFlowGraph(com.google.javascript.rhino.Node entry, java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer> priorities, boolean edgeAnnotations) {
            super(entry, true, edgeAnnotations);
            this.priorities = priorities;
        }

        @java.lang.Override
        public java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> getOptionalNodeComparator(boolean isForward) {
            if (isForward) {
                return new java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>() {
                    @java.lang.Override
                    public int compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n1, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n2) {
                        return getPosition(n1) - getPosition(n2);
                    }
                };
            } else {
                return new java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>() {
                    @java.lang.Override
                    public int compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n1, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n2) {
                        return getPosition(n2) - getPosition(n1);
                    }
                };
            }
        }

        private int getPosition(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n) {
            java.lang.Integer priority = priorities.get(n);
            com.google.common.base.Preconditions.checkNotNull(priority);
            return priority;
        }
    }
}
[491682] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659921665364
GPR[SSUN]-1659921665364
160819208
GPR[ESUN]-1659921665590
GPR[SSUN]-1659921665590
160819208
GPR[ESUN]-1659921665815
GPR[SSUN]-1659921665815
160819208
GPR[SPVATF]-1659921666039
GPR[EPVATF]-1659921666189
GPR[SPS]-1659921666189
[492963] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:554.
GPR[EPS]-1659921666646
GPR[SPVATF]-1659921666646
GPR[EPVATF]-1659921666790
GPR[SPS]-1659921666790
[493560] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:554.
GPR[EPS]-1659921667242
GPR[ESUN]-1659921667242
GPR[SSUN]-1659921667242
160819208
GPR[ESUN]-1659921667466
GPR[SSUN]-1659921667466
160819208
GPR[ESUN]-1659921667690
GPR[SSUN]-1659921667690
160819208
GPR[SPVATF]-1659921667913
GPR[EPVATF]-1659921668055
GPR[SPS]-1659921668055
[494832] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:338.
GPR[EPS]-1659921668514
GPR[ESUN]-1659921668514
GPR[SSUN]-1659921668514
-1966087783
GPR[ESUN]-1659921668703
GPR[SSUN]-1659921668703
GPR[ESUN]-1659921668703
GPR[SSUN]-1659921668703
-1966087783
GPR[SPVATF]-1659921668923
GPR[EPVATF]-1659921668943
[495261] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921668943
GPR[EPVATF]-1659921668962
[495280] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921668962
GPR[SSUN]-1659921668963
GPR[ESUN]-1659921668963
GPR[SSUN]-1659921668963
-1797850673
GPR[SPVATF]-1659921669210
GPR[EPVATF]-1659921669467
GPR[SPS]-1659921669467
[496317] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:668.
GPR[EPS]-1659921669999
GPR[ESUN]-1659921669999
GPR[SSUN]-1659921669999
-1797850673
GPR[SPVATF]-1659921670247
GPR[EPVATF]-1659921670508
GPR[SPS]-1659921670508
[497356] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:667.
GPR[EPS]-1659921671038
GPR[ESUN]-1659921671038
GPR[SSUN]-1659921671038
-1797850673
GPR[SPVATF]-1659921671283
GPR[EPVATF]-1659921671541
GPR[SPS]-1659921671541
[498404] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:645.
GPR[EPS]-1659921672086
GPR[SPVATF]-1659921672087
GPR[EPVATF]-1659921672356
GPR[SPS]-1659921672356
[499219] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:645.
GPR[EPS]-1659921672901
GPR[ESUN]-1659921672901
GPR[SSUN]-1659921672901
-1797850673
GPR[SPVATF]-1659921673148
GPR[EPVATF]-1659921673413
GPR[SPS]-1659921673413
[500132] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TypeCheck implements com.google.javascript.jscomp.NodeTraversal.Callback , com.google.javascript.jscomp.CompilerPass {
    static final com.google.javascript.jscomp.DiagnosticType UNEXPECTED_TOKEN = com.google.javascript.jscomp.DiagnosticType.error("JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN", "Internal Error: Don't know how to handle {0}");

    static final com.google.javascript.jscomp.DiagnosticType BAD_DELETE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_DELETE_OPERAND", "delete operator needs a reference operand");

    protected static final java.lang.String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT = "overriding prototype with non-object";

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST", "condition always evaluates to {2}\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST_NO_RESULT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST_NO_RESULT", "condition always evaluates to the same value\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_ENUM_ELEMENT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INEXISTENT_ENUM_ELEMENT", "element {0} does not exist on this enum");

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_PROPERTY = com.google.javascript.jscomp.DiagnosticType.disabled("JSC_INEXISTENT_PROPERTY", "Property {0} never defined on {1}");

    protected static final com.google.javascript.jscomp.DiagnosticType NOT_A_CONSTRUCTOR = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_A_CONSTRUCTOR", "cannot instantiate non-constructor");

    static final com.google.javascript.jscomp.DiagnosticType BIT_OPERATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_TYPE_FOR_BIT_OPERATION", "operator {0} cannot be applied to {1}");

    static final com.google.javascript.jscomp.DiagnosticType NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_FUNCTION_TYPE", "{0} expressions are not callable");

    static final com.google.javascript.jscomp.DiagnosticType CONSTRUCTOR_NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONSTRUCTOR_NOT_CALLABLE", "Constructor {0} should be called with the \"new\" keyword");

    static final com.google.javascript.jscomp.DiagnosticType FUNCTION_MASKS_VARIABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_FUNCTION_MASKS_VARIABLE", "function {0} masks variable (IE bug)");

    static final com.google.javascript.jscomp.DiagnosticType MULTIPLE_VAR_DEF = com.google.javascript.jscomp.DiagnosticType.warning("JSC_MULTIPLE_VAR_DEF", "declaration of multiple variables with shared type information");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_DUP = com.google.javascript.jscomp.DiagnosticType.error("JSC_ENUM_DUP", "enum element {0} already defined");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_NOT_CONSTANT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ENUM_NOT_CONSTANT", "enum key {0} must be a syntactic constant");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INVALID_INTERFACE_MEMBER_DECLARATION", "interface members can only be empty property declarations," + " empty functions{0}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_FUNCTION_NOT_EMPTY", "interface member functions must have an empty body");

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_EXTENDED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_EXTENDED_TYPE", "{0} cannot extend this type; " + ("a constructor can only extend objects " + "and an interface can only extend interfaces"));

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_IMPLEMENTED_TYPE", "{0} cannot implement this type; " + "an interface can only extend, but not implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType BAD_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_IMPLEMENTS_NON_INTERFACE", "can only implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY", "property {0} already defined on superclass {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_INTERFACE_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_INTERFACE_PROPERTY", "property {0} already defined on interface {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", "mismatch of the {0} property type and the type " + (("of the property it overrides from superclass {1}\n" + "original: {2}\n") + "override: {3}"));

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_OVERRIDE", "property {0} not defined on any superclass of {1}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_METHOD_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_METHOD_OVERRIDE", "property {0} is already defined by the {1} extended interface");

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_EXPR_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_EXPR_TYPE", "could not determine the type of this expression");

    static final com.google.javascript.jscomp.DiagnosticType UNRESOLVED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNRESOLVED_TYPE", "could not resolve the name {0} to a type");

    static final com.google.javascript.jscomp.DiagnosticType WRONG_ARGUMENT_COUNT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_WRONG_ARGUMENT_COUNT", "Function {0}: called with {1} argument(s). " + "Function requires at least {2} argument(s){3}.");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_IMPLICIT_CAST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ILLEGAL_IMPLICIT_CAST", "Illegal annotation on {0}. @implicitCast may only be used in " + "externs.");

    static final com.google.javascript.jscomp.DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", "Interface {0} has a property {1} with incompatible types in " + "its super interfaces {2} and {3}");

    static final com.google.javascript.jscomp.DiagnosticType EXPECTED_THIS_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_EXPECTED_THIS_TYPE", "\"{0}\" must be called with a \"this\" type");

    static final com.google.javascript.jscomp.DiagnosticGroup ALL_DIAGNOSTICS = new com.google.javascript.jscomp.DiagnosticGroup(com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF, com.google.javascript.jscomp.TypeCheck.ENUM_DUP, com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE, com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR, com.google.javascript.jscomp.TypedScopeCreator.UNKNOWN_LENDS, com.google.javascript.jscomp.TypedScopeCreator.LENDS_ON_NON_OBJECT, com.google.javascript.jscomp.TypedScopeCreator.CTOR_INITIALIZER, com.google.javascript.jscomp.TypedScopeCreator.IFACE_INITIALIZER, com.google.javascript.jscomp.FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.TypeValidator validator;

    private final com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private com.google.javascript.jscomp.Scope topScope;

    private com.google.javascript.jscomp.ScopeCreator scopeCreator;

    private final com.google.javascript.jscomp.CheckLevel reportMissingOverride;

    private final com.google.javascript.jscomp.CheckLevel reportUnknownTypes;

    private boolean reportMissingProperties = true;

    private com.google.javascript.jscomp.InferJSDocInfo inferJSDocInfo = null;

    private int typedCount = 0;

    private int nullCount = 0;

    private int unknownCount = 0;

    private boolean inExterns;

    private int noTypeCheckSection = 0;

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.Scope topScope, com.google.javascript.jscomp.ScopeCreator scopeCreator, com.google.javascript.jscomp.CheckLevel reportMissingOverride, com.google.javascript.jscomp.CheckLevel reportUnknownTypes) {
        this.compiler = compiler;
        this.validator = compiler.getTypeValidator();
        this.reverseInterpreter = reverseInterpreter;
        this.typeRegistry = typeRegistry;
        this.topScope = topScope;
        this.scopeCreator = scopeCreator;
        this.reportMissingOverride = reportMissingOverride;
        this.reportUnknownTypes = reportUnknownTypes;
        this.inferJSDocInfo = new com.google.javascript.jscomp.InferJSDocInfo(compiler);
    }

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.CheckLevel reportMissingOverride, com.google.javascript.jscomp.CheckLevel reportUnknownTypes) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, reportMissingOverride, reportUnknownTypes);
    }

    TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, com.google.javascript.jscomp.CheckLevel.WARNING, com.google.javascript.jscomp.CheckLevel.OFF);
    }

    com.google.javascript.jscomp.TypeCheck reportMissingProperties(boolean report) {
        reportMissingProperties = report;
        return this;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkNotNull(scopeCreator);
        com.google.common.base.Preconditions.checkNotNull(topScope);
        com.google.javascript.rhino.Node externsAndJs = jsRoot.getParent();
        com.google.common.base.Preconditions.checkState(externsAndJs != null);
        com.google.common.base.Preconditions.checkState((externsRoot == null) || externsAndJs.hasChild(externsRoot));
        if (externsRoot != null) {
            check(externsRoot, true);
        }
        check(jsRoot, false);
    }

    public com.google.javascript.jscomp.Scope processForTesting(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkState(scopeCreator == null);
        com.google.common.base.Preconditions.checkState(topScope == null);
        com.google.common.base.Preconditions.checkState(jsRoot.getParent() != null);
        com.google.javascript.rhino.Node externsAndJsRoot = jsRoot.getParent();
        scopeCreator = new com.google.javascript.jscomp.MemoizedScopeCreator(new com.google.javascript.jscomp.TypedScopeCreator(compiler));
        topScope = scopeCreator.createScope(externsAndJsRoot, null);
        com.google.javascript.jscomp.TypeInferencePass inference = new com.google.javascript.jscomp.TypeInferencePass(compiler, reverseInterpreter, topScope, scopeCreator);
        inference.process(externsRoot, jsRoot);
        process(externsRoot, jsRoot);
        return topScope;
    }

    public void check(com.google.javascript.rhino.Node node, boolean externs) {
        com.google.common.base.Preconditions.checkNotNull(node);
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, this, scopeCreator);
        inExterns = externs;
        t.traverseWithScope(node, topScope);
        if (externs) {
            inferJSDocInfo.process(node, null);
        } else {
            inferJSDocInfo.process(null, node);
        }
    }

    private void checkNoTypeCheckSection(com.google.javascript.rhino.Node n, boolean enterSection) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.ASSIGN :
                com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
                if ((info != null) && info.isNoTypeCheck()) {
                    if (enterSection) {
                        noTypeCheckSection++;
                    } else {
                        noTypeCheckSection--;
                    }
                }
                validator.setShouldReport(noTypeCheckSection == 0);
                break;
        }
    }

    private void report(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType diagnosticType, java.lang.String... arguments) {
        if (noTypeCheckSection == 0) {
            t.report(n, diagnosticType, arguments);
        }
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        checkNoTypeCheckSection(n, true);
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                final com.google.javascript.jscomp.Scope outerScope = t.getScope();
                final java.lang.String functionPrivateName = n.getFirstChild().getString();
                if ((((functionPrivateName != null) && (functionPrivateName.length() > 0)) && outerScope.isDeclared(functionPrivateName, false)) && (!(outerScope.getVar(functionPrivateName).getType() instanceof com.google.javascript.rhino.jstype.FunctionType))) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, functionPrivateName);
                }
                break;
        }
        return true;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.jstype.JSType childType;
        com.google.javascript.rhino.jstype.JSType leftType;
        com.google.javascript.rhino.jstype.JSType rightType;
        com.google.javascript.rhino.Node left;
        com.google.javascript.rhino.Node right;
        boolean typeable = true;
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                typeable = visitName(t, n, parent);
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                if (!parent.isFunction()) {
                    ensureTyped(t, n, getJSType(n.getFirstChild()));
                } else {
                    typeable = false;
                }
                break;
            case com.google.javascript.rhino.Token.COMMA :
                ensureTyped(t, n, getJSType(n.getLastChild()));
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.THIS :
                ensureTyped(t, n, t.getScope().getTypeOfThis());
                break;
            case com.google.javascript.rhino.Token.NULL :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING_KEY :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE);
                break;
            case com.google.javascript.rhino.Token.REGEXP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                visitGetProp(t, n, parent);
                typeable = !(parent.isAssign() && (parent.getFirstChild() == n));
                break;
            case com.google.javascript.rhino.Token.GETELEM :
                visitGetElem(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.VAR :
                visitVar(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.NEW :
                visitNew(t, n);
                typeable = true;
                break;
            case com.google.javascript.rhino.Token.CALL :
                visitCall(t, n);
                typeable = !parent.isExprResult();
                break;
            case com.google.javascript.rhino.Token.RETURN :
                visitReturn(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "increment/decrement");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.NOT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.VOID :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.BITNOT :
                childType = getJSType(n.getFirstChild());
                if (!childType.matchesInt32Context()) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), childType.toString());
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "sign operator");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                {
                    leftType = getJSType(n.getFirstChild());
                    rightType = getJSType(n.getLastChild());
                    com.google.javascript.rhino.jstype.JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.TernaryValue result = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                    if ((n.getType() == com.google.javascript.rhino.Token.EQ) || (n.getType() == com.google.javascript.rhino.Token.NE)) {
                        result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                        if (n.isNE()) {
                            result = result.not();
                        }
                    } else if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                        result = (n.getType() == com.google.javascript.rhino.Token.SHEQ) ? com.google.javascript.rhino.jstype.TernaryValue.FALSE : com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                    }
                    if (result != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                    }
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                    break;
                }
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
                leftType = getJSType(n.getFirstChild());
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(164).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST",com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT",com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride",com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT",com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_DELETE",com.google.javascript.jscomp.TypeCheck.BAD_DELETE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.this.typeRegistry",com.google.javascript.jscomp.TypeCheck.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.this.typedCount",com.google.javascript.jscomp.TypeCheck.this.typedCount);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY",com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE",com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.this.nullCount",com.google.javascript.jscomp.TypeCheck.this.nullCount);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.this.inExterns",com.google.javascript.jscomp.TypeCheck.this.inExterns);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS",com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("typeable",typeable);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT",com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE",com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY",com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR",com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF",com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter",com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.BIT_OPERATION",com.google.javascript.jscomp.TypeCheck.BIT_OPERATION);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE",com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE",com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT",com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.this.compiler",com.google.javascript.jscomp.TypeCheck.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE",com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_DUP",com.google.javascript.jscomp.TypeCheck.ENUM_DUP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.this.scopeCreator",com.google.javascript.jscomp.TypeCheck.this.scopeCreator);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION",com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.this.validator",com.google.javascript.jscomp.TypeCheck.this.validator);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection",com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties",com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo",com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.this.topScope",com.google.javascript.jscomp.TypeCheck.this.topScope);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN",com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes",com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.TypeCheck.this.unknownCount",com.google.javascript.jscomp.TypeCheck.this.unknownCount);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectionEnds();
                }
                if (runtimeAngelicValue)
                    rightType = getJSType(n.getLastChild());

                if (rightType.isNumber()) {
                    validator.expectNumber(t, n, leftType, "left side of numeric comparison");
                } else if (leftType.isNumber()) {
                    validator.expectNumber(t, n, rightType, "right side of numeric comparison");
                } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                } else {
                    java.lang.String message = "left side of comparison";
                    validator.expectString(t, n, leftType, message);
                    validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                    message = "right side of comparison";
                    validator.expectString(t, n, rightType, message);
                    validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.IN :
                left = n.getFirstChild();
                right = n.getLastChild();
                leftType = getJSType(left);
                rightType = getJSType(right);
                validator.expectObject(t, n, rightType, "'in' requires an object");
                validator.expectString(t, left, leftType, "left side of 'in'");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                left = n.getFirstChild();
                right = n.getLastChild();
                leftType = getJSType(left);
                rightType = getJSType(right).restrictByNotNullOrUndefined();
                validator.expectAnyObject(t, left, leftType, "deterministic instanceof yields false");
                validator.expectActualObject(t, right, rightType, "instanceof requires an object");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.ASSIGN :
                visitAssign(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.MUL :
                visitBinaryOperator(n.getType(), t, n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.jstype.JSType switchType = getJSType(parent.getFirstChild());
                com.google.javascript.rhino.jstype.JSType caseType = getJSType(n.getFirstChild());
                validator.expectSwitchMatchesCase(t, n, switchType, caseType);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.WITH :
                {
                    com.google.javascript.rhino.Node child = n.getFirstChild();
                    childType = getJSType(child);
                    validator.expectObject(t, child, childType, "with requires an object");
                    typeable = false;
                    break;
                }
            case com.google.javascript.rhino.Token.FUNCTION :
                visitFunction(t, n);
                break;
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.LABEL_NAME :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.DEBUGGER :
            case com.google.javascript.rhino.Token.THROW :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.OR :
                if (n.getJSType() != null) {
                    ensureTyped(t, n);
                } else if (n.isObjectLit() && (parent.getJSType() instanceof com.google.javascript.rhino.jstype.EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
                if (n.isObjectLit()) {
                    for (com.google.javascript.rhino.Node key : n.children()) {
                        visitObjLitKey(t, key, n);
                    }
                }
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(n.getType()));
                ensureTyped(t, n);
                break;
        }
        typeable = typeable && (!inExterns);
        if (typeable) {
            doPercentTypedAccounting(t, n);
        }
        checkNoTypeCheckSection(n, false);
    }

    private void doPercentTypedAccounting(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            nullCount++;
        } else if (type.isUnknownType()) {
            if (reportUnknownTypes.isOn()) {
                compiler.report(t.makeError(n, reportUnknownTypes, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE));
            }
            unknownCount++;
        } else {
            typedCount++;
        }
    }

    private void visitAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign) {
        com.google.javascript.rhino.JSDocInfo info = assign.getJSDocInfo();
        com.google.javascript.rhino.Node lvalue = assign.getFirstChild();
        com.google.javascript.rhino.Node rvalue = assign.getLastChild();
        if (lvalue.isGetProp()) {
            com.google.javascript.rhino.Node object = lvalue.getFirstChild();
            com.google.javascript.rhino.jstype.JSType objectJsType = getJSType(object);
            java.lang.String property = lvalue.getLastChild().getString();
            if (object.isGetProp()) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object.getFirstChild());
                if (jsType.isInterface() && object.getLastChild().getString().equals("prototype")) {
                    visitInterfaceGetprop(t, assign, object, property, lvalue, rvalue);
                }
            }
            checkEnumAlias(t, info, rvalue);
            if (property.equals("prototype")) {
                if ((objectJsType != null) && objectJsType.isFunctionType()) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = objectJsType.toMaybeFunctionType();
                    if (functionType.isConstructor()) {
                        com.google.javascript.rhino.jstype.JSType rvalueType = rvalue.getJSType();
                        validator.expectObject(t, rvalue, rvalueType, com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
                        return;
                    }
                }
            }
            com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objectJsType.restrictByNotNullOrUndefined());
            if (type != null) {
                if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!propertyIsImplicitCast(type, property))) {
                    com.google.javascript.rhino.jstype.JSType expectedType = type.getPropertyType(property);
                    if (!expectedType.isUnknownType()) {
                        validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), expectedType, object, property);
                        checkPropertyInheritanceOnGetpropAssign(t, assign, object, property, info, expectedType);
                        return;
                    }
                }
            }
            checkPropertyInheritanceOnGetpropAssign(t, assign, object, property, info, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
        }
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(lvalue);
        if (lvalue.isQualifiedName()) {
            com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(assign.getLastChild());
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(lvalue.getQualifiedName());
            if (var != null) {
                if (var.isTypeInferred()) {
                    return;
                }
                if (com.google.javascript.jscomp.NodeUtil.getRootOfQualifiedName(lvalue).isThis() && (t.getScope() != var.getScope())) {
                    return;
                }
                if (var.getType() != null) {
                    leftType = var.getType();
                }
            }
        }
        com.google.javascript.rhino.Node rightChild = assign.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(rightChild);
        if (validator.expectCanAssignTo(t, assign, rightType, leftType, "assignment")) {
            ensureTyped(t, assign, rightType);
        } else {
            ensureTyped(t, assign);
        }
    }

    private void checkPropertyInheritanceOnGetpropAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (object.isGetProp()) {
            com.google.javascript.rhino.Node object2 = object.getFirstChild();
            java.lang.String property2 = com.google.javascript.jscomp.NodeUtil.getStringValue(object.getLastChild());
            if ("prototype".equals(property2)) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object2);
                if (jsType.isFunctionType()) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
                    if (functionType.isConstructor() || functionType.isInterface()) {
                        checkDeclaredPropertyInheritance(t, assign, functionType, property, info, propertyType);
                    }
                }
            }
        }
    }

    private void visitObjLitKey(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node key, com.google.javascript.rhino.Node objlit) {
        if (objlit.isFromExterns()) {
            ensureTyped(t, key);
            return;
        }
        com.google.javascript.rhino.Node rvalue = key.getFirstChild();
        com.google.javascript.rhino.jstype.JSType rightType = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyTypeFromValueType(key, getJSType(rvalue));
        if (rightType == null) {
            rightType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        com.google.javascript.rhino.Node owner = objlit;
        com.google.javascript.rhino.jstype.JSType keyType = getJSType(key);
        com.google.javascript.rhino.jstype.JSType allowedValueType = keyType;
        if (allowedValueType.isEnumElementType()) {
            allowedValueType = allowedValueType.toMaybeEnumElementType().getPrimitiveType();
        }
        boolean valid = validator.expectCanAssignToPropertyOf(t, key, rightType, allowedValueType, owner, com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key));
        if (valid) {
            ensureTyped(t, key, rightType);
        } else {
            ensureTyped(t, key);
        }
        com.google.javascript.rhino.jstype.JSType objlitType = getJSType(objlit);
        com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objlitType.restrictByNotNullOrUndefined());
        if (type != null) {
            java.lang.String property = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key);
            if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!propertyIsImplicitCast(type, property))) {
                validator.expectCanAssignToPropertyOf(t, key, keyType, type.getPropertyType(property), owner, property);
            }
            return;
        }
    }

    private boolean propertyIsImplicitCast(com.google.javascript.rhino.jstype.ObjectType type, java.lang.String prop) {
        for (; type != null; type = type.getImplicitPrototype()) {
            com.google.javascript.rhino.JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);
            if ((docInfo != null) && docInfo.isImplicitCast()) {
                return true;
            }
        }
        return false;
    }

    private void checkDeclaredPropertyInheritance(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.FunctionType ctorType, java.lang.String propertyName, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (com.google.javascript.jscomp.TypeCheck.hasUnknownOrEmptySupertype(ctorType)) {
            return;
        }
        com.google.javascript.rhino.jstype.FunctionType superClass = ctorType.getSuperClassConstructor();
        boolean superClassHasProperty = (superClass != null) && superClass.getInstanceType().hasProperty(propertyName);
        boolean superClassHasDeclaredProperty = (superClass != null) && superClass.getInstanceType().isPropertyTypeDeclared(propertyName);
        boolean superInterfaceHasProperty = false;
        boolean superInterfaceHasDeclaredProperty = false;
        if (ctorType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                superInterfaceHasProperty = superInterfaceHasProperty || interfaceType.hasProperty(propertyName);
                superInterfaceHasDeclaredProperty = superInterfaceHasDeclaredProperty || interfaceType.isPropertyTypeDeclared(propertyName);
            }
        }
        boolean declaredOverride = (info != null) && info.isOverride();
        boolean foundInterfaceProperty = false;
        if (ctorType.isConstructor()) {
            for (com.google.javascript.rhino.jstype.JSType implementedInterface : ctorType.getAllImplementedInterfaces()) {
                if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {
                    continue;
                }
                com.google.javascript.rhino.jstype.FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();
                com.google.common.base.Preconditions.checkNotNull(interfaceType);
                boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);
                foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;
                if ((reportMissingOverride.isOn() && (!declaredOverride)) && interfaceHasProperty) {
                    compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));
                }
            }
        }
        if (((!declaredOverride) && (!superClassHasProperty)) && (!superInterfaceHasProperty)) {
            return;
        }
        com.google.javascript.rhino.jstype.ObjectType topInstanceType = (superClassHasDeclaredProperty) ? superClass.getTopMostDefiningType(propertyName) : null;
        boolean declaredLocally = ctorType.isConstructor() && (ctorType.getPrototype().hasOwnProperty(propertyName) || ctorType.getInstanceType().hasOwnProperty(propertyName));
        if (((reportMissingOverride.isOn() && (!declaredOverride)) && superClassHasDeclaredProperty) && declaredLocally) {
            compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));
        }
        if (superClassHasDeclaredProperty) {
            com.google.javascript.rhino.jstype.JSType superClassPropType = superClass.getInstanceType().getPropertyType(propertyName);
            if (!propertyType.canAssignTo(superClassPropType)) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));
            }
        } else if (superInterfaceHasDeclaredProperty) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                if (interfaceType.hasProperty(propertyName)) {
                    com.google.javascript.rhino.jstype.JSType superPropertyType = interfaceType.getPropertyType(propertyName);
                    if (!propertyType.canAssignTo(superPropertyType)) {
                        topInstanceType = interfaceType.getConstructor().getTopMostDefiningType(propertyName);
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superPropertyType.toString(), propertyType.toString()));
                    }
                }
            }
        } else if (((!foundInterfaceProperty) && (!superClassHasProperty)) && (!superInterfaceHasProperty)) {
            compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));
        }
    }

    private static boolean hasUnknownOrEmptySupertype(com.google.javascript.rhino.jstype.FunctionType ctor) {
        com.google.common.base.Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());
        com.google.common.base.Preconditions.checkArgument(!ctor.isUnknownType());
        while (true) {
            com.google.javascript.rhino.jstype.ObjectType maybeSuperInstanceType = ctor.getPrototype().getImplicitPrototype();
            if (maybeSuperInstanceType == null) {
                return false;
            }
            if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {
                return true;
            }
            ctor = maybeSuperInstanceType.getConstructor();
            if (ctor == null) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());
        } 
    }

    private void visitInterfaceGetprop(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.Node lvalue, com.google.javascript.rhino.Node rvalue) {
        com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(rvalue);
        java.lang.String abstractMethodName = compiler.getCodingConvention().getAbstractMethodName();
        if (!rvalueType.isFunctionType()) {
            java.lang.String abstractMethodMessage = (abstractMethodName != null) ? ", or " + abstractMethodName : "";
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, abstractMethodMessage));
        }
        if (assign.getLastChild().isFunction() && (!com.google.javascript.jscomp.NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))) {
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, abstractMethodName));
        }
    }

    boolean visitName(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        int parentNodeType = parent.getType();
        if ((((parentNodeType == com.google.javascript.rhino.Token.FUNCTION) || (parentNodeType == com.google.javascript.rhino.Token.CATCH)) || (parentNodeType == com.google.javascript.rhino.Token.PARAM_LIST)) || (parentNodeType == com.google.javascript.rhino.Token.VAR)) {
            return false;
        }
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            type = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(n.getString());
            if (var != null) {
                com.google.javascript.rhino.jstype.JSType varType = var.getType();
                if (varType != null) {
                    type = varType;
                }
            }
        }
        ensureTyped(t, n, type);
        return true;
    }

    private void visitGetProp(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if ((n.getJSType() != null) && parent.isAssign()) {
            return;
        }
        com.google.javascript.rhino.Node property = n.getLastChild();
        com.google.javascript.rhino.Node objNode = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(objNode);
        if (!validator.expectNotNullOrUndefined(t, n, childType, "No properties on this expression", getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE))) {
            ensureTyped(t, n);
            return;
        }
        checkPropertyAccess(childType, property.getString(), t, n);
        ensureTyped(t, n);
    }

    private void checkPropertyAccess(com.google.javascript.rhino.jstype.JSType childType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType propType = getJSType(n);
        if (propType.equals(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
            childType = childType.autobox();
            com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(childType);
            if (objectType != null) {
                if ((!objectType.hasProperty(propName)) || objectType.equals(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
                    if (objectType instanceof com.google.javascript.rhino.jstype.EnumType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, propName);
                    } else {
                        checkPropertyAccessHelper(objectType, propName, t, n);
                    }
                }
            } else {
                checkPropertyAccessHelper(childType, propName, t, n);
            }
        }
    }

    private void checkPropertyAccessHelper(com.google.javascript.rhino.jstype.JSType objectType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        if (((!objectType.isEmptyType()) && reportMissingProperties) && (!isPropertyTest(n))) {
            if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, propName, validator.getReadableJSTypeName(n.getFirstChild(), true));
            }
        }
    }

    private boolean isPropertyTest(com.google.javascript.rhino.Node getProp) {
        com.google.javascript.rhino.Node parent = getProp.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.CALL :
                return (parent.getFirstChild() != getProp) && compiler.getCodingConvention().isPropertyTestFunction(parent);
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
                return com.google.javascript.jscomp.NodeUtil.getConditionExpression(parent) == getProp;
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.TYPEOF :
                return true;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
                return parent.getFirstChild() == getProp;
            case com.google.javascript.rhino.Token.NOT :
                return parent.getParent().isOr() && (parent.getParent().getFirstChild() == parent);
        }
        return false;
    }

    private void visitGetElem(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node right = n.getLastChild();
        validator.expectIndexMatch(t, n, getJSType(left), getJSType(right));
        ensureTyped(t, n);
    }

    private void visitVar(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo varInfo = (n.hasOneChild()) ? n.getJSDocInfo() : null;
        for (com.google.javascript.rhino.Node name : n.children()) {
            com.google.javascript.rhino.Node value = name.getFirstChild();
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(name.getString());
            if (value != null) {
                com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
                com.google.javascript.rhino.jstype.JSType nameType = var.getType();
                nameType = (nameType == null) ? getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE) : nameType;
                com.google.javascript.rhino.JSDocInfo info = name.getJSDocInfo();
                if (info == null) {
                    info = varInfo;
                }
                checkEnumAlias(t, info, value);
                if (var.isTypeInferred()) {
                    ensureTyped(t, name, valueType);
                } else {
                    validator.expectCanAssignTo(t, value, valueType, nameType, "initializing variable");
                }
            }
        }
    }

    private void visitNew(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node constructor = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
        if ((type.isConstructor() || type.isEmptyType()) || type.isUnknownType()) {
            com.google.javascript.rhino.jstype.FunctionType fnType = type.toMaybeFunctionType();
            if (fnType != null) {
                visitParameterList(t, n, fnType);
                ensureTyped(t, n, fnType.getInstanceType());
            } else {
                ensureTyped(t, n);
            }
        } else {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);
            ensureTyped(t, n);
        }
    }

    private void checkInterfaceConflictProperties(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String functionName, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties, com.google.javascript.rhino.jstype.ObjectType interfaceType) {
        java.util.Set<java.lang.String> currentPropertyNames = interfaceType.getPropertyNames();
        for (java.lang.String name : currentPropertyNames) {
            com.google.javascript.rhino.jstype.ObjectType oType = properties.get(name);
            if (oType != null) {
                if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));
                }
            }
            currentProperties.put(name, interfaceType);
        }
        for (com.google.javascript.rhino.jstype.ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
            checkInterfaceConflictProperties(t, n, functionName, properties, currentProperties, iType);
        }
    }

    private void visitFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.FunctionType functionType = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(n.getJSType());
        java.lang.String functionPrivateName = n.getFirstChild().getString();
        if (functionType.isConstructor()) {
            com.google.javascript.rhino.jstype.FunctionType baseConstructor = functionType.getSuperClassConstructor();
            if (((baseConstructor != null) && (baseConstructor != getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE))) && (baseConstructor.isInterface() && functionType.isConstructor())) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, functionPrivateName));
            } else {
                for (com.google.javascript.rhino.jstype.JSType baseInterface : functionType.getImplementedInterfaces()) {
                    boolean badImplementedType = false;
                    com.google.javascript.rhino.jstype.ObjectType baseInterfaceObj = com.google.javascript.rhino.jstype.ObjectType.cast(baseInterface);
                    if (baseInterfaceObj != null) {
                        com.google.javascript.rhino.jstype.FunctionType interfaceConstructor = baseInterfaceObj.getConstructor();
                        if ((interfaceConstructor != null) && (!interfaceConstructor.isInterface())) {
                            badImplementedType = true;
                        }
                    } else {
                        badImplementedType = true;
                    }
                    if (badImplementedType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, functionPrivateName);
                    }
                }
                validator.expectAllInterfaceProperties(t, n, functionType);
            }
        } else if (functionType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType extInterface : functionType.getExtendedInterfaces()) {
                if ((extInterface.getConstructor() != null) && (!extInterface.getConstructor().isInterface())) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, functionPrivateName));
                }
            }
            if (functionType.hasImplementedInterfaces()) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));
            }
            if (functionType.getExtendedInterfacesCount() > 1) {
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                for (com.google.javascript.rhino.jstype.ObjectType interfaceType : functionType.getExtendedInterfaces()) {
                    currentProperties.clear();
                    checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);
                    properties.putAll(currentProperties);
                }
            }
        }
    }

    private void visitCall(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node child = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(child).restrictByNotNullOrUndefined();
        if (!childType.canBeCalled()) {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, childType.toString());
            ensureTyped(t, n);
            return;
        }
        if (childType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = childType.toMaybeFunctionType();
            boolean isExtern = false;
            com.google.javascript.rhino.JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
            if ((functionJSDocInfo != null) && (functionJSDocInfo.getAssociatedNode() != null)) {
                isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();
            }
            if ((functionType.isConstructor() && (!functionType.isNativeObjectType())) && ((functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType()) || (!isExtern))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, childType.toString());
            }
            if (((functionType.isOrdinaryFunction() && (!functionType.getTypeOfThis().isUnknownType())) && (!functionType.getTypeOfThis().isNativeObjectType())) && (!(child.isGetElem() || child.isGetProp()))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, functionType.toString());
            }
            visitParameterList(t, n, functionType);
            ensureTyped(t, n, functionType.getReturnType());
        } else {
            ensureTyped(t, n);
        }
    }

    private void visitParameterList(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node call, com.google.javascript.rhino.jstype.FunctionType functionType) {
        java.util.Iterator<com.google.javascript.rhino.Node> arguments = call.children().iterator();
        arguments.next();
        java.util.Iterator<com.google.javascript.rhino.Node> parameters = functionType.getParameters().iterator();
        int ordinal = 0;
        com.google.javascript.rhino.Node parameter = null;
        com.google.javascript.rhino.Node argument = null;
        while (arguments.hasNext() && (parameters.hasNext() || ((parameter != null) && parameter.isVarArgs()))) {
            if (parameters.hasNext()) {
                parameter = parameters.next();
            }
            argument = arguments.next();
            ordinal++;
            validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);
        } 
        int numArgs = call.getChildCount() - 1;
        int minArgs = functionType.getMinArguments();
        int maxArgs = functionType.getMaxArguments();
        if ((minArgs > numArgs) || (maxArgs < numArgs)) {
            report(t, call, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), java.lang.String.valueOf(numArgs), java.lang.String.valueOf(minArgs), maxArgs != java.lang.Integer.MAX_VALUE ? (" and no more than " + maxArgs) + " argument(s)" : "");
        }
    }

    private void visitReturn(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node function = t.getEnclosingFunction();
        if (function == null) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType jsType = getJSType(function);
        if (jsType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
            com.google.javascript.rhino.jstype.JSType returnType = functionType.getReturnType();
            if (returnType == null) {
                returnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
            }
            com.google.javascript.rhino.Node valueNode = n.getFirstChild();
            com.google.javascript.rhino.jstype.JSType actualReturnType;
            if (valueNode == null) {
                actualReturnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                valueNode = n;
            } else {
                actualReturnType = getJSType(valueNode);
            }
            validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType, "inconsistent return type");
        }
    }

    private void visitBinaryOperator(int op, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(left);
        com.google.javascript.rhino.Node right = n.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(right);
        switch (op) {
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.URSH :
                if (!leftType.matchesInt32Context()) {
                    report(t, left, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), leftType.toString());
                }
                if (!rightType.matchesUint32Context()) {
                    report(t, right, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), rightType.toString());
                }
                break;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.SUB :
                validator.expectNumber(t, left, leftType, "left operand");
                validator.expectNumber(t, right, rightType, "right operand");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITOR :
                validator.expectBitwiseable(t, left, leftType, "bad left operand to bitwise operator");
                validator.expectBitwiseable(t, right, rightType, "bad right operand to bitwise operator");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ADD :
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(op));
        }
        ensureTyped(t, n);
    }

    private void checkEnumAlias(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.JSDocInfo declInfo, com.google.javascript.rhino.Node value) {
        if ((declInfo == null) || (!declInfo.hasEnumParameterType())) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
        if (!valueType.isEnumType()) {
            return;
        }
        com.google.javascript.rhino.jstype.EnumType valueEnumType = valueType.toMaybeEnumType();
        com.google.javascript.rhino.jstype.JSType valueEnumPrimitiveType = valueEnumType.getElementsType().getPrimitiveType();
        validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry), "incompatible enum element types");
    }

    private com.google.javascript.rhino.jstype.JSType getJSType(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType jsType = n.getJSType();
        if (jsType == null) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        } else {
            return jsType;
        }
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        ensureTyped(t, n, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSTypeNative type) {
        ensureTyped(t, n, getNativeType(type));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type) {
        com.google.common.base.Preconditions.checkState(((!n.isFunction()) || type.isFunctionType()) || type.isUnknownType());
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info != null) {
            if (info.hasType()) {
                com.google.javascript.rhino.jstype.JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);
                validator.expectCanCast(t, n, infoType, type);
                type = infoType;
            }
            if (info.isImplicitCast() && (!inExterns)) {
                java.lang.String propName = (n.isGetProp()) ? n.getLastChild().getString() : "(missing)";
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, propName));
            }
        }
        if (n.getJSType() == null) {
            n.setJSType(type);
        }
    }

    double getTypedPercent() {
        int total = (nullCount + unknownCount) + typedCount;
        if (total == 0) {
            return 0.0;
        } else {
            return (100.0 * typedCount) / total;
        }
    }

    private com.google.javascript.rhino.jstype.JSType getNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return typeRegistry.getNativeType(typeId);
    }
}
[500133] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659921673815
GPR[SSUN]-1659921673815
-1797850673
GPR[SPVATF]-1659921674067
GPR[EPVATF]-1659921674329
GPR[SPS]-1659921674329
[501036] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TypeCheck implements com.google.javascript.jscomp.NodeTraversal.Callback , com.google.javascript.jscomp.CompilerPass {
    static final com.google.javascript.jscomp.DiagnosticType UNEXPECTED_TOKEN = com.google.javascript.jscomp.DiagnosticType.error("JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN", "Internal Error: Don't know how to handle {0}");

    static final com.google.javascript.jscomp.DiagnosticType BAD_DELETE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_DELETE_OPERAND", "delete operator needs a reference operand");

    protected static final java.lang.String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT = "overriding prototype with non-object";

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST", "condition always evaluates to {2}\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST_NO_RESULT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST_NO_RESULT", "condition always evaluates to the same value\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_ENUM_ELEMENT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INEXISTENT_ENUM_ELEMENT", "element {0} does not exist on this enum");

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_PROPERTY = com.google.javascript.jscomp.DiagnosticType.disabled("JSC_INEXISTENT_PROPERTY", "Property {0} never defined on {1}");

    protected static final com.google.javascript.jscomp.DiagnosticType NOT_A_CONSTRUCTOR = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_A_CONSTRUCTOR", "cannot instantiate non-constructor");

    static final com.google.javascript.jscomp.DiagnosticType BIT_OPERATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_TYPE_FOR_BIT_OPERATION", "operator {0} cannot be applied to {1}");

    static final com.google.javascript.jscomp.DiagnosticType NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_FUNCTION_TYPE", "{0} expressions are not callable");

    static final com.google.javascript.jscomp.DiagnosticType CONSTRUCTOR_NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONSTRUCTOR_NOT_CALLABLE", "Constructor {0} should be called with the \"new\" keyword");

    static final com.google.javascript.jscomp.DiagnosticType FUNCTION_MASKS_VARIABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_FUNCTION_MASKS_VARIABLE", "function {0} masks variable (IE bug)");

    static final com.google.javascript.jscomp.DiagnosticType MULTIPLE_VAR_DEF = com.google.javascript.jscomp.DiagnosticType.warning("JSC_MULTIPLE_VAR_DEF", "declaration of multiple variables with shared type information");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_DUP = com.google.javascript.jscomp.DiagnosticType.error("JSC_ENUM_DUP", "enum element {0} already defined");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_NOT_CONSTANT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ENUM_NOT_CONSTANT", "enum key {0} must be a syntactic constant");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INVALID_INTERFACE_MEMBER_DECLARATION", "interface members can only be empty property declarations," + " empty functions{0}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_FUNCTION_NOT_EMPTY", "interface member functions must have an empty body");

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_EXTENDED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_EXTENDED_TYPE", "{0} cannot extend this type; " + ("a constructor can only extend objects " + "and an interface can only extend interfaces"));

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_IMPLEMENTED_TYPE", "{0} cannot implement this type; " + "an interface can only extend, but not implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType BAD_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_IMPLEMENTS_NON_INTERFACE", "can only implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY", "property {0} already defined on superclass {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_INTERFACE_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_INTERFACE_PROPERTY", "property {0} already defined on interface {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", "mismatch of the {0} property type and the type " + (("of the property it overrides from superclass {1}\n" + "original: {2}\n") + "override: {3}"));

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_OVERRIDE", "property {0} not defined on any superclass of {1}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_METHOD_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_METHOD_OVERRIDE", "property {0} is already defined by the {1} extended interface");

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_EXPR_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_EXPR_TYPE", "could not determine the type of this expression");

    static final com.google.javascript.jscomp.DiagnosticType UNRESOLVED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNRESOLVED_TYPE", "could not resolve the name {0} to a type");

    static final com.google.javascript.jscomp.DiagnosticType WRONG_ARGUMENT_COUNT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_WRONG_ARGUMENT_COUNT", "Function {0}: called with {1} argument(s). " + "Function requires at least {2} argument(s){3}.");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_IMPLICIT_CAST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ILLEGAL_IMPLICIT_CAST", "Illegal annotation on {0}. @implicitCast may only be used in " + "externs.");

    static final com.google.javascript.jscomp.DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", "Interface {0} has a property {1} with incompatible types in " + "its super interfaces {2} and {3}");

    static final com.google.javascript.jscomp.DiagnosticType EXPECTED_THIS_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_EXPECTED_THIS_TYPE", "\"{0}\" must be called with a \"this\" type");

    static final com.google.javascript.jscomp.DiagnosticGroup ALL_DIAGNOSTICS = new com.google.javascript.jscomp.DiagnosticGroup(com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF, com.google.javascript.jscomp.TypeCheck.ENUM_DUP, com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE, com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR, com.google.javascript.jscomp.TypedScopeCreator.UNKNOWN_LENDS, com.google.javascript.jscomp.TypedScopeCreator.LENDS_ON_NON_OBJECT, com.google.javascript.jscomp.TypedScopeCreator.CTOR_INITIALIZER, com.google.javascript.jscomp.TypedScopeCreator.IFACE_INITIALIZER, com.google.javascript.jscomp.FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.TypeValidator validator;

    private final com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private com.google.javascript.jscomp.Scope topScope;

    private com.google.javascript.jscomp.ScopeCreator scopeCreator;

    private final com.google.javascript.jscomp.CheckLevel reportMissingOverride;

    private final com.google.javascript.jscomp.CheckLevel reportUnknownTypes;

    private boolean reportMissingProperties = true;

    private com.google.javascript.jscomp.InferJSDocInfo inferJSDocInfo = null;

    private int typedCount = 0;

    private int nullCount = 0;

    private int unknownCount = 0;

    private boolean inExterns;

    private int noTypeCheckSection = 0;

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.Scope topScope, com.google.javascript.jscomp.ScopeCreator scopeCreator, com.google.javascript.jscomp.CheckLevel reportMissingOverride, com.google.javascript.jscomp.CheckLevel reportUnknownTypes) {
        this.compiler = compiler;
        this.validator = compiler.getTypeValidator();
        this.reverseInterpreter = reverseInterpreter;
        this.typeRegistry = typeRegistry;
        this.topScope = topScope;
        this.scopeCreator = scopeCreator;
        this.reportMissingOverride = reportMissingOverride;
        this.reportUnknownTypes = reportUnknownTypes;
        this.inferJSDocInfo = new com.google.javascript.jscomp.InferJSDocInfo(compiler);
    }

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.CheckLevel reportMissingOverride, com.google.javascript.jscomp.CheckLevel reportUnknownTypes) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, reportMissingOverride, reportUnknownTypes);
    }

    TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, com.google.javascript.jscomp.CheckLevel.WARNING, com.google.javascript.jscomp.CheckLevel.OFF);
    }

    com.google.javascript.jscomp.TypeCheck reportMissingProperties(boolean report) {
        reportMissingProperties = report;
        return this;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkNotNull(scopeCreator);
        com.google.common.base.Preconditions.checkNotNull(topScope);
        com.google.javascript.rhino.Node externsAndJs = jsRoot.getParent();
        com.google.common.base.Preconditions.checkState(externsAndJs != null);
        com.google.common.base.Preconditions.checkState((externsRoot == null) || externsAndJs.hasChild(externsRoot));
        if (externsRoot != null) {
            check(externsRoot, true);
        }
        check(jsRoot, false);
    }

    public com.google.javascript.jscomp.Scope processForTesting(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkState(scopeCreator == null);
        com.google.common.base.Preconditions.checkState(topScope == null);
        com.google.common.base.Preconditions.checkState(jsRoot.getParent() != null);
        com.google.javascript.rhino.Node externsAndJsRoot = jsRoot.getParent();
        scopeCreator = new com.google.javascript.jscomp.MemoizedScopeCreator(new com.google.javascript.jscomp.TypedScopeCreator(compiler));
        topScope = scopeCreator.createScope(externsAndJsRoot, null);
        com.google.javascript.jscomp.TypeInferencePass inference = new com.google.javascript.jscomp.TypeInferencePass(compiler, reverseInterpreter, topScope, scopeCreator);
        inference.process(externsRoot, jsRoot);
        process(externsRoot, jsRoot);
        return topScope;
    }

    public void check(com.google.javascript.rhino.Node node, boolean externs) {
        com.google.common.base.Preconditions.checkNotNull(node);
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, this, scopeCreator);
        inExterns = externs;
        t.traverseWithScope(node, topScope);
        if (externs) {
            inferJSDocInfo.process(node, null);
        } else {
            inferJSDocInfo.process(null, node);
        }
    }

    private void checkNoTypeCheckSection(com.google.javascript.rhino.Node n, boolean enterSection) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.ASSIGN :
                com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
                if ((info != null) && info.isNoTypeCheck()) {
                    if (enterSection) {
                        noTypeCheckSection++;
                    } else {
                        noTypeCheckSection--;
                    }
                }
                validator.setShouldReport(noTypeCheckSection == 0);
                break;
        }
    }

    private void report(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType diagnosticType, java.lang.String... arguments) {
        if (noTypeCheckSection == 0) {
            t.report(n, diagnosticType, arguments);
        }
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        checkNoTypeCheckSection(n, true);
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                final com.google.javascript.jscomp.Scope outerScope = t.getScope();
                final java.lang.String functionPrivateName = n.getFirstChild().getString();
                if ((((functionPrivateName != null) && (functionPrivateName.length() > 0)) && outerScope.isDeclared(functionPrivateName, false)) && (!(outerScope.getVar(functionPrivateName).getType() instanceof com.google.javascript.rhino.jstype.FunctionType))) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, functionPrivateName);
                }
                break;
        }
        return true;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.jstype.JSType childType;
        com.google.javascript.rhino.jstype.JSType leftType;
        com.google.javascript.rhino.jstype.JSType rightType;
        com.google.javascript.rhino.Node left;
        com.google.javascript.rhino.Node right;
        boolean typeable = true;
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                typeable = visitName(t, n, parent);
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                if (!parent.isFunction()) {
                    ensureTyped(t, n, getJSType(n.getFirstChild()));
                } else {
                    typeable = false;
                }
                break;
            case com.google.javascript.rhino.Token.COMMA :
                ensureTyped(t, n, getJSType(n.getLastChild()));
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.THIS :
                ensureTyped(t, n, t.getScope().getTypeOfThis());
                break;
            case com.google.javascript.rhino.Token.NULL :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING_KEY :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE);
                break;
            case com.google.javascript.rhino.Token.REGEXP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                visitGetProp(t, n, parent);
                typeable = !(parent.isAssign() && (parent.getFirstChild() == n));
                break;
            case com.google.javascript.rhino.Token.GETELEM :
                visitGetElem(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.VAR :
                visitVar(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.NEW :
                visitNew(t, n);
                typeable = true;
                break;
            case com.google.javascript.rhino.Token.CALL :
                visitCall(t, n);
                typeable = !parent.isExprResult();
                break;
            case com.google.javascript.rhino.Token.RETURN :
                visitReturn(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "increment/decrement");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.NOT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.VOID :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.BITNOT :
                childType = getJSType(n.getFirstChild());
                if (!childType.matchesInt32Context()) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), childType.toString());
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "sign operator");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                {
                    leftType = getJSType(n.getFirstChild());
                    rightType = getJSType(n.getLastChild());
                    com.google.javascript.rhino.jstype.JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.TernaryValue result = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                    if ((n.getType() == com.google.javascript.rhino.Token.EQ) || (n.getType() == com.google.javascript.rhino.Token.NE)) {
                        result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                        if (n.isNE()) {
                            result = result.not();
                        }
                    } else if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                        result = (n.getType() == com.google.javascript.rhino.Token.SHEQ) ? com.google.javascript.rhino.jstype.TernaryValue.FALSE : com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                    }
                    if (result != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                    }
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                    break;
                }
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(165).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST",com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT",com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride",com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT",com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_DELETE",com.google.javascript.jscomp.TypeCheck.BAD_DELETE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.this.typeRegistry",com.google.javascript.jscomp.TypeCheck.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.this.typedCount",com.google.javascript.jscomp.TypeCheck.this.typedCount);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY",com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE",com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.this.nullCount",com.google.javascript.jscomp.TypeCheck.this.nullCount);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.this.inExterns",com.google.javascript.jscomp.TypeCheck.this.inExterns);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS",com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("typeable",typeable);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT",com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE",com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY",com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR",com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF",com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter",com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.BIT_OPERATION",com.google.javascript.jscomp.TypeCheck.BIT_OPERATION);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE",com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE",com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT",com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.this.compiler",com.google.javascript.jscomp.TypeCheck.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE",com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_DUP",com.google.javascript.jscomp.TypeCheck.ENUM_DUP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.this.scopeCreator",com.google.javascript.jscomp.TypeCheck.this.scopeCreator);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION",com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.this.validator",com.google.javascript.jscomp.TypeCheck.this.validator);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection",com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties",com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo",com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.this.topScope",com.google.javascript.jscomp.TypeCheck.this.topScope);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN",com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes",com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectInput("com.google.javascript.jscomp.TypeCheck.this.unknownCount",com.google.javascript.jscomp.TypeCheck.this.unknownCount);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(165).collectionEnds();
                }
                if (runtimeAngelicValue)
                    leftType = getJSType(n.getFirstChild());

                rightType = getJSType(n.getLastChild());
                if (rightType.isNumber()) {
                    validator.expectNumber(t, n, leftType, "left side of numeric comparison");
                } else if (leftType.isNumber()) {
                    validator.expectNumber(t, n, rightType, "right side of numeric comparison");
                } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                } else {
                    java.lang.String message = "left side of comparison";
                    validator.expectString(t, n, leftType, message);
                    validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                    message = "right side of comparison";
                    validator.expectString(t, n, rightType, message);
                    validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.IN :
                left = n.getFirstChild();
                right = n.getLastChild();
                leftType = getJSType(left);
                rightType = getJSType(right);
                validator.expectObject(t, n, rightType, "'in' requires an object");
                validator.expectString(t, left, leftType, "left side of 'in'");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                left = n.getFirstChild();
                right = n.getLastChild();
                leftType = getJSType(left);
                rightType = getJSType(right).restrictByNotNullOrUndefined();
                validator.expectAnyObject(t, left, leftType, "deterministic instanceof yields false");
                validator.expectActualObject(t, right, rightType, "instanceof requires an object");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.ASSIGN :
                visitAssign(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.MUL :
                visitBinaryOperator(n.getType(), t, n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.jstype.JSType switchType = getJSType(parent.getFirstChild());
                com.google.javascript.rhino.jstype.JSType caseType = getJSType(n.getFirstChild());
                validator.expectSwitchMatchesCase(t, n, switchType, caseType);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.WITH :
                {
                    com.google.javascript.rhino.Node child = n.getFirstChild();
                    childType = getJSType(child);
                    validator.expectObject(t, child, childType, "with requires an object");
                    typeable = false;
                    break;
                }
            case com.google.javascript.rhino.Token.FUNCTION :
                visitFunction(t, n);
                break;
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.LABEL_NAME :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.DEBUGGER :
            case com.google.javascript.rhino.Token.THROW :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.OR :
                if (n.getJSType() != null) {
                    ensureTyped(t, n);
                } else if (n.isObjectLit() && (parent.getJSType() instanceof com.google.javascript.rhino.jstype.EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
                if (n.isObjectLit()) {
                    for (com.google.javascript.rhino.Node key : n.children()) {
                        visitObjLitKey(t, key, n);
                    }
                }
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(n.getType()));
                ensureTyped(t, n);
                break;
        }
        typeable = typeable && (!inExterns);
        if (typeable) {
            doPercentTypedAccounting(t, n);
        }
        checkNoTypeCheckSection(n, false);
    }

    private void doPercentTypedAccounting(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            nullCount++;
        } else if (type.isUnknownType()) {
            if (reportUnknownTypes.isOn()) {
                compiler.report(t.makeError(n, reportUnknownTypes, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE));
            }
            unknownCount++;
        } else {
            typedCount++;
        }
    }

    private void visitAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign) {
        com.google.javascript.rhino.JSDocInfo info = assign.getJSDocInfo();
        com.google.javascript.rhino.Node lvalue = assign.getFirstChild();
        com.google.javascript.rhino.Node rvalue = assign.getLastChild();
        if (lvalue.isGetProp()) {
            com.google.javascript.rhino.Node object = lvalue.getFirstChild();
            com.google.javascript.rhino.jstype.JSType objectJsType = getJSType(object);
            java.lang.String property = lvalue.getLastChild().getString();
            if (object.isGetProp()) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object.getFirstChild());
                if (jsType.isInterface() && object.getLastChild().getString().equals("prototype")) {
                    visitInterfaceGetprop(t, assign, object, property, lvalue, rvalue);
                }
            }
            checkEnumAlias(t, info, rvalue);
            if (property.equals("prototype")) {
                if ((objectJsType != null) && objectJsType.isFunctionType()) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = objectJsType.toMaybeFunctionType();
                    if (functionType.isConstructor()) {
                        com.google.javascript.rhino.jstype.JSType rvalueType = rvalue.getJSType();
                        validator.expectObject(t, rvalue, rvalueType, com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
                        return;
                    }
                }
            }
            com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objectJsType.restrictByNotNullOrUndefined());
            if (type != null) {
                if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!propertyIsImplicitCast(type, property))) {
                    com.google.javascript.rhino.jstype.JSType expectedType = type.getPropertyType(property);
                    if (!expectedType.isUnknownType()) {
                        validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), expectedType, object, property);
                        checkPropertyInheritanceOnGetpropAssign(t, assign, object, property, info, expectedType);
                        return;
                    }
                }
            }
            checkPropertyInheritanceOnGetpropAssign(t, assign, object, property, info, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
        }
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(lvalue);
        if (lvalue.isQualifiedName()) {
            com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(assign.getLastChild());
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(lvalue.getQualifiedName());
            if (var != null) {
                if (var.isTypeInferred()) {
                    return;
                }
                if (com.google.javascript.jscomp.NodeUtil.getRootOfQualifiedName(lvalue).isThis() && (t.getScope() != var.getScope())) {
                    return;
                }
                if (var.getType() != null) {
                    leftType = var.getType();
                }
            }
        }
        com.google.javascript.rhino.Node rightChild = assign.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(rightChild);
        if (validator.expectCanAssignTo(t, assign, rightType, leftType, "assignment")) {
            ensureTyped(t, assign, rightType);
        } else {
            ensureTyped(t, assign);
        }
    }

    private void checkPropertyInheritanceOnGetpropAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (object.isGetProp()) {
            com.google.javascript.rhino.Node object2 = object.getFirstChild();
            java.lang.String property2 = com.google.javascript.jscomp.NodeUtil.getStringValue(object.getLastChild());
            if ("prototype".equals(property2)) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object2);
                if (jsType.isFunctionType()) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
                    if (functionType.isConstructor() || functionType.isInterface()) {
                        checkDeclaredPropertyInheritance(t, assign, functionType, property, info, propertyType);
                    }
                }
            }
        }
    }

    private void visitObjLitKey(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node key, com.google.javascript.rhino.Node objlit) {
        if (objlit.isFromExterns()) {
            ensureTyped(t, key);
            return;
        }
        com.google.javascript.rhino.Node rvalue = key.getFirstChild();
        com.google.javascript.rhino.jstype.JSType rightType = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyTypeFromValueType(key, getJSType(rvalue));
        if (rightType == null) {
            rightType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        com.google.javascript.rhino.Node owner = objlit;
        com.google.javascript.rhino.jstype.JSType keyType = getJSType(key);
        com.google.javascript.rhino.jstype.JSType allowedValueType = keyType;
        if (allowedValueType.isEnumElementType()) {
            allowedValueType = allowedValueType.toMaybeEnumElementType().getPrimitiveType();
        }
        boolean valid = validator.expectCanAssignToPropertyOf(t, key, rightType, allowedValueType, owner, com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key));
        if (valid) {
            ensureTyped(t, key, rightType);
        } else {
            ensureTyped(t, key);
        }
        com.google.javascript.rhino.jstype.JSType objlitType = getJSType(objlit);
        com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objlitType.restrictByNotNullOrUndefined());
        if (type != null) {
            java.lang.String property = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key);
            if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!propertyIsImplicitCast(type, property))) {
                validator.expectCanAssignToPropertyOf(t, key, keyType, type.getPropertyType(property), owner, property);
            }
            return;
        }
    }

    private boolean propertyIsImplicitCast(com.google.javascript.rhino.jstype.ObjectType type, java.lang.String prop) {
        for (; type != null; type = type.getImplicitPrototype()) {
            com.google.javascript.rhino.JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);
            if ((docInfo != null) && docInfo.isImplicitCast()) {
                return true;
            }
        }
        return false;
    }

    private void checkDeclaredPropertyInheritance(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.FunctionType ctorType, java.lang.String propertyName, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (com.google.javascript.jscomp.TypeCheck.hasUnknownOrEmptySupertype(ctorType)) {
            return;
        }
        com.google.javascript.rhino.jstype.FunctionType superClass = ctorType.getSuperClassConstructor();
        boolean superClassHasProperty = (superClass != null) && superClass.getInstanceType().hasProperty(propertyName);
        boolean superClassHasDeclaredProperty = (superClass != null) && superClass.getInstanceType().isPropertyTypeDeclared(propertyName);
        boolean superInterfaceHasProperty = false;
        boolean superInterfaceHasDeclaredProperty = false;
        if (ctorType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                superInterfaceHasProperty = superInterfaceHasProperty || interfaceType.hasProperty(propertyName);
                superInterfaceHasDeclaredProperty = superInterfaceHasDeclaredProperty || interfaceType.isPropertyTypeDeclared(propertyName);
            }
        }
        boolean declaredOverride = (info != null) && info.isOverride();
        boolean foundInterfaceProperty = false;
        if (ctorType.isConstructor()) {
            for (com.google.javascript.rhino.jstype.JSType implementedInterface : ctorType.getAllImplementedInterfaces()) {
                if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {
                    continue;
                }
                com.google.javascript.rhino.jstype.FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();
                com.google.common.base.Preconditions.checkNotNull(interfaceType);
                boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);
                foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;
                if ((reportMissingOverride.isOn() && (!declaredOverride)) && interfaceHasProperty) {
                    compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));
                }
            }
        }
        if (((!declaredOverride) && (!superClassHasProperty)) && (!superInterfaceHasProperty)) {
            return;
        }
        com.google.javascript.rhino.jstype.ObjectType topInstanceType = (superClassHasDeclaredProperty) ? superClass.getTopMostDefiningType(propertyName) : null;
        boolean declaredLocally = ctorType.isConstructor() && (ctorType.getPrototype().hasOwnProperty(propertyName) || ctorType.getInstanceType().hasOwnProperty(propertyName));
        if (((reportMissingOverride.isOn() && (!declaredOverride)) && superClassHasDeclaredProperty) && declaredLocally) {
            compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));
        }
        if (superClassHasDeclaredProperty) {
            com.google.javascript.rhino.jstype.JSType superClassPropType = superClass.getInstanceType().getPropertyType(propertyName);
            if (!propertyType.canAssignTo(superClassPropType)) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));
            }
        } else if (superInterfaceHasDeclaredProperty) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                if (interfaceType.hasProperty(propertyName)) {
                    com.google.javascript.rhino.jstype.JSType superPropertyType = interfaceType.getPropertyType(propertyName);
                    if (!propertyType.canAssignTo(superPropertyType)) {
                        topInstanceType = interfaceType.getConstructor().getTopMostDefiningType(propertyName);
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superPropertyType.toString(), propertyType.toString()));
                    }
                }
            }
        } else if (((!foundInterfaceProperty) && (!superClassHasProperty)) && (!superInterfaceHasProperty)) {
            compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));
        }
    }

    private static boolean hasUnknownOrEmptySupertype(com.google.javascript.rhino.jstype.FunctionType ctor) {
        com.google.common.base.Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());
        com.google.common.base.Preconditions.checkArgument(!ctor.isUnknownType());
        while (true) {
            com.google.javascript.rhino.jstype.ObjectType maybeSuperInstanceType = ctor.getPrototype().getImplicitPrototype();
            if (maybeSuperInstanceType == null) {
                return false;
            }
            if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {
                return true;
            }
            ctor = maybeSuperInstanceType.getConstructor();
            if (ctor == null) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());
        } 
    }

    private void visitInterfaceGetprop(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.Node lvalue, com.google.javascript.rhino.Node rvalue) {
        com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(rvalue);
        java.lang.String abstractMethodName = compiler.getCodingConvention().getAbstractMethodName();
        if (!rvalueType.isFunctionType()) {
            java.lang.String abstractMethodMessage = (abstractMethodName != null) ? ", or " + abstractMethodName : "";
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, abstractMethodMessage));
        }
        if (assign.getLastChild().isFunction() && (!com.google.javascript.jscomp.NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))) {
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, abstractMethodName));
        }
    }

    boolean visitName(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        int parentNodeType = parent.getType();
        if ((((parentNodeType == com.google.javascript.rhino.Token.FUNCTION) || (parentNodeType == com.google.javascript.rhino.Token.CATCH)) || (parentNodeType == com.google.javascript.rhino.Token.PARAM_LIST)) || (parentNodeType == com.google.javascript.rhino.Token.VAR)) {
            return false;
        }
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            type = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(n.getString());
            if (var != null) {
                com.google.javascript.rhino.jstype.JSType varType = var.getType();
                if (varType != null) {
                    type = varType;
                }
            }
        }
        ensureTyped(t, n, type);
        return true;
    }

    private void visitGetProp(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if ((n.getJSType() != null) && parent.isAssign()) {
            return;
        }
        com.google.javascript.rhino.Node property = n.getLastChild();
        com.google.javascript.rhino.Node objNode = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(objNode);
        if (!validator.expectNotNullOrUndefined(t, n, childType, "No properties on this expression", getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE))) {
            ensureTyped(t, n);
            return;
        }
        checkPropertyAccess(childType, property.getString(), t, n);
        ensureTyped(t, n);
    }

    private void checkPropertyAccess(com.google.javascript.rhino.jstype.JSType childType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType propType = getJSType(n);
        if (propType.equals(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
            childType = childType.autobox();
            com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(childType);
            if (objectType != null) {
                if ((!objectType.hasProperty(propName)) || objectType.equals(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
                    if (objectType instanceof com.google.javascript.rhino.jstype.EnumType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, propName);
                    } else {
                        checkPropertyAccessHelper(objectType, propName, t, n);
                    }
                }
            } else {
                checkPropertyAccessHelper(childType, propName, t, n);
            }
        }
    }

    private void checkPropertyAccessHelper(com.google.javascript.rhino.jstype.JSType objectType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        if (((!objectType.isEmptyType()) && reportMissingProperties) && (!isPropertyTest(n))) {
            if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, propName, validator.getReadableJSTypeName(n.getFirstChild(), true));
            }
        }
    }

    private boolean isPropertyTest(com.google.javascript.rhino.Node getProp) {
        com.google.javascript.rhino.Node parent = getProp.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.CALL :
                return (parent.getFirstChild() != getProp) && compiler.getCodingConvention().isPropertyTestFunction(parent);
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
                return com.google.javascript.jscomp.NodeUtil.getConditionExpression(parent) == getProp;
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.TYPEOF :
                return true;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
                return parent.getFirstChild() == getProp;
            case com.google.javascript.rhino.Token.NOT :
                return parent.getParent().isOr() && (parent.getParent().getFirstChild() == parent);
        }
        return false;
    }

    private void visitGetElem(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node right = n.getLastChild();
        validator.expectIndexMatch(t, n, getJSType(left), getJSType(right));
        ensureTyped(t, n);
    }

    private void visitVar(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo varInfo = (n.hasOneChild()) ? n.getJSDocInfo() : null;
        for (com.google.javascript.rhino.Node name : n.children()) {
            com.google.javascript.rhino.Node value = name.getFirstChild();
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(name.getString());
            if (value != null) {
                com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
                com.google.javascript.rhino.jstype.JSType nameType = var.getType();
                nameType = (nameType == null) ? getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE) : nameType;
                com.google.javascript.rhino.JSDocInfo info = name.getJSDocInfo();
                if (info == null) {
                    info = varInfo;
                }
                checkEnumAlias(t, info, value);
                if (var.isTypeInferred()) {
                    ensureTyped(t, name, valueType);
                } else {
                    validator.expectCanAssignTo(t, value, valueType, nameType, "initializing variable");
                }
            }
        }
    }

    private void visitNew(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node constructor = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
        if ((type.isConstructor() || type.isEmptyType()) || type.isUnknownType()) {
            com.google.javascript.rhino.jstype.FunctionType fnType = type.toMaybeFunctionType();
            if (fnType != null) {
                visitParameterList(t, n, fnType);
                ensureTyped(t, n, fnType.getInstanceType());
            } else {
                ensureTyped(t, n);
            }
        } else {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);
            ensureTyped(t, n);
        }
    }

    private void checkInterfaceConflictProperties(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String functionName, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties, com.google.javascript.rhino.jstype.ObjectType interfaceType) {
        java.util.Set<java.lang.String> currentPropertyNames = interfaceType.getPropertyNames();
        for (java.lang.String name : currentPropertyNames) {
            com.google.javascript.rhino.jstype.ObjectType oType = properties.get(name);
            if (oType != null) {
                if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));
                }
            }
            currentProperties.put(name, interfaceType);
        }
        for (com.google.javascript.rhino.jstype.ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
            checkInterfaceConflictProperties(t, n, functionName, properties, currentProperties, iType);
        }
    }

    private void visitFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.FunctionType functionType = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(n.getJSType());
        java.lang.String functionPrivateName = n.getFirstChild().getString();
        if (functionType.isConstructor()) {
            com.google.javascript.rhino.jstype.FunctionType baseConstructor = functionType.getSuperClassConstructor();
            if (((baseConstructor != null) && (baseConstructor != getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE))) && (baseConstructor.isInterface() && functionType.isConstructor())) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, functionPrivateName));
            } else {
                for (com.google.javascript.rhino.jstype.JSType baseInterface : functionType.getImplementedInterfaces()) {
                    boolean badImplementedType = false;
                    com.google.javascript.rhino.jstype.ObjectType baseInterfaceObj = com.google.javascript.rhino.jstype.ObjectType.cast(baseInterface);
                    if (baseInterfaceObj != null) {
                        com.google.javascript.rhino.jstype.FunctionType interfaceConstructor = baseInterfaceObj.getConstructor();
                        if ((interfaceConstructor != null) && (!interfaceConstructor.isInterface())) {
                            badImplementedType = true;
                        }
                    } else {
                        badImplementedType = true;
                    }
                    if (badImplementedType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, functionPrivateName);
                    }
                }
                validator.expectAllInterfaceProperties(t, n, functionType);
            }
        } else if (functionType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType extInterface : functionType.getExtendedInterfaces()) {
                if ((extInterface.getConstructor() != null) && (!extInterface.getConstructor().isInterface())) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, functionPrivateName));
                }
            }
            if (functionType.hasImplementedInterfaces()) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));
            }
            if (functionType.getExtendedInterfacesCount() > 1) {
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                for (com.google.javascript.rhino.jstype.ObjectType interfaceType : functionType.getExtendedInterfaces()) {
                    currentProperties.clear();
                    checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);
                    properties.putAll(currentProperties);
                }
            }
        }
    }

    private void visitCall(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node child = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(child).restrictByNotNullOrUndefined();
        if (!childType.canBeCalled()) {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, childType.toString());
            ensureTyped(t, n);
            return;
        }
        if (childType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = childType.toMaybeFunctionType();
            boolean isExtern = false;
            com.google.javascript.rhino.JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
            if ((functionJSDocInfo != null) && (functionJSDocInfo.getAssociatedNode() != null)) {
                isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();
            }
            if ((functionType.isConstructor() && (!functionType.isNativeObjectType())) && ((functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType()) || (!isExtern))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, childType.toString());
            }
            if (((functionType.isOrdinaryFunction() && (!functionType.getTypeOfThis().isUnknownType())) && (!functionType.getTypeOfThis().isNativeObjectType())) && (!(child.isGetElem() || child.isGetProp()))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, functionType.toString());
            }
            visitParameterList(t, n, functionType);
            ensureTyped(t, n, functionType.getReturnType());
        } else {
            ensureTyped(t, n);
        }
    }

    private void visitParameterList(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node call, com.google.javascript.rhino.jstype.FunctionType functionType) {
        java.util.Iterator<com.google.javascript.rhino.Node> arguments = call.children().iterator();
        arguments.next();
        java.util.Iterator<com.google.javascript.rhino.Node> parameters = functionType.getParameters().iterator();
        int ordinal = 0;
        com.google.javascript.rhino.Node parameter = null;
        com.google.javascript.rhino.Node argument = null;
        while (arguments.hasNext() && (parameters.hasNext() || ((parameter != null) && parameter.isVarArgs()))) {
            if (parameters.hasNext()) {
                parameter = parameters.next();
            }
            argument = arguments.next();
            ordinal++;
            validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);
        } 
        int numArgs = call.getChildCount() - 1;
        int minArgs = functionType.getMinArguments();
        int maxArgs = functionType.getMaxArguments();
        if ((minArgs > numArgs) || (maxArgs < numArgs)) {
            report(t, call, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), java.lang.String.valueOf(numArgs), java.lang.String.valueOf(minArgs), maxArgs != java.lang.Integer.MAX_VALUE ? (" and no more than " + maxArgs) + " argument(s)" : "");
        }
    }

    private void visitReturn(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node function = t.getEnclosingFunction();
        if (function == null) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType jsType = getJSType(function);
        if (jsType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
            com.google.javascript.rhino.jstype.JSType returnType = functionType.getReturnType();
            if (returnType == null) {
                returnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
            }
            com.google.javascript.rhino.Node valueNode = n.getFirstChild();
            com.google.javascript.rhino.jstype.JSType actualReturnType;
            if (valueNode == null) {
                actualReturnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                valueNode = n;
            } else {
                actualReturnType = getJSType(valueNode);
            }
            validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType, "inconsistent return type");
        }
    }

    private void visitBinaryOperator(int op, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(left);
        com.google.javascript.rhino.Node right = n.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(right);
        switch (op) {
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.URSH :
                if (!leftType.matchesInt32Context()) {
                    report(t, left, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), leftType.toString());
                }
                if (!rightType.matchesUint32Context()) {
                    report(t, right, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), rightType.toString());
                }
                break;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.SUB :
                validator.expectNumber(t, left, leftType, "left operand");
                validator.expectNumber(t, right, rightType, "right operand");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITOR :
                validator.expectBitwiseable(t, left, leftType, "bad left operand to bitwise operator");
                validator.expectBitwiseable(t, right, rightType, "bad right operand to bitwise operator");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ADD :
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(op));
        }
        ensureTyped(t, n);
    }

    private void checkEnumAlias(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.JSDocInfo declInfo, com.google.javascript.rhino.Node value) {
        if ((declInfo == null) || (!declInfo.hasEnumParameterType())) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
        if (!valueType.isEnumType()) {
            return;
        }
        com.google.javascript.rhino.jstype.EnumType valueEnumType = valueType.toMaybeEnumType();
        com.google.javascript.rhino.jstype.JSType valueEnumPrimitiveType = valueEnumType.getElementsType().getPrimitiveType();
        validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry), "incompatible enum element types");
    }

    private com.google.javascript.rhino.jstype.JSType getJSType(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType jsType = n.getJSType();
        if (jsType == null) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        } else {
            return jsType;
        }
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        ensureTyped(t, n, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSTypeNative type) {
        ensureTyped(t, n, getNativeType(type));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type) {
        com.google.common.base.Preconditions.checkState(((!n.isFunction()) || type.isFunctionType()) || type.isUnknownType());
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info != null) {
            if (info.hasType()) {
                com.google.javascript.rhino.jstype.JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);
                validator.expectCanCast(t, n, infoType, type);
                type = infoType;
            }
            if (info.isImplicitCast() && (!inExterns)) {
                java.lang.String propName = (n.isGetProp()) ? n.getLastChild().getString() : "(missing)";
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, propName));
            }
        }
        if (n.getJSType() == null) {
            n.setJSType(type);
        }
    }

    double getTypedPercent() {
        int total = (nullCount + unknownCount) + typedCount;
        if (total == 0) {
            return 0.0;
        } else {
            return (100.0 * typedCount) / total;
        }
    }

    private com.google.javascript.rhino.jstype.JSType getNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return typeRegistry.getNativeType(typeId);
    }
}
[501037] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659921674719
GPR[SSUN]-1659921674719
-1345859678
GPR[ESUN]-1659921674977
GPR[SSUN]-1659921674977
1601302084
GPR[ESUN]-1659921675186
GPR[SSUN]-1659921675186
GPR[ESUN]-1659921675186
GPR[SSUN]-1659921675186
GPR[ESUN]-1659921675186
GPR[SSUN]-1659921675186
GPR[ESUN]-1659921675186
GPR[SSUN]-1659921675186
GPR[ESUN]-1659921675186
GPR[SSUN]-1659921675186
160819208
GPR[ESUN]-1659921675411
GPR[SSUN]-1659921675411
160819208
GPR[SPVATF]-1659921675632
GPR[EPVATF]-1659921675776
GPR[SPS]-1659921675776
[502542] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:380.
GPR[EPS]-1659921676225
GPR[ESUN]-1659921676225
GPR[SSUN]-1659921676225
160819208
GPR[SPVATF]-1659921676453
GPR[EPVATF]-1659921676604
GPR[SPS]-1659921676604
[503492] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:378.
GPR[EPS]-1659921677174
GPR[ESUN]-1659921677174
GPR[SSUN]-1659921677174
160819208
GPR[SPVATF]-1659921677403
GPR[EPVATF]-1659921677547
GPR[SPS]-1659921677547
[504315] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:374.
GPR[EPS]-1659921677997
GPR[ESUN]-1659921677997
GPR[SSUN]-1659921677997
160819208
GPR[ESUN]-1659921678224
GPR[SSUN]-1659921678224
160819208
GPR[SPVATF]-1659921678453
GPR[EPVATF]-1659921678599
GPR[SPS]-1659921678599
[505373] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:301.
GPR[EPS]-1659921679055
GPR[ESUN]-1659921679055
GPR[SSUN]-1659921679055
160819208
GPR[SPVATF]-1659921679283
GPR[EPVATF]-1659921679566
GPR[SPS]-1659921679566
[506403] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:363.
GPR[EPS]-1659921680085
GPR[ESUN]-1659921680085
GPR[SSUN]-1659921680085
GPR[ESUN]-1659921680085
GPR[SSUN]-1659921680085
160819208
GPR[SPVATF]-1659921680315
GPR[EPVATF]-1659921680459
GPR[SPS]-1659921680459
[507290] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:895.
GPR[EPS]-1659921680972
GPR[SPVATF]-1659921680972
GPR[EPVATF]-1659921681119
GPR[SPS]-1659921681119
[507893] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:895.
GPR[EPS]-1659921681575
GPR[ESUN]-1659921681575
GPR[SSUN]-1659921681575
795998767
GPR[ESUN]-1659921681796
GPR[SSUN]-1659921681796
795998767
GPR[SPVATF]-1659921682019
GPR[EPVATF]-1659921683101
GPR[SPS]-1659921683101
[509910] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckMissingReturn:157.
GPR[EPS]-1659921683592
GPR[SPVATF]-1659921683592
GPR[EPVATF]-1659921684148
GPR[SPS]-1659921684148
GPR[EPS]-1659921708703
GPR[ESUN]-1659921708704
GPR[SSUN]-1659921708704
160819208
GPR[ESUN]-1659921708952
GPR[SSUN]-1659921708952
GPR[ESUN]-1659921708952
GPR[SSUN]-1659921708952
-2097135580
GPR[ESUN]-1659921709160
GPR[SSUN]-1659921709160
GPR[ESUN]-1659921709160
GPR[SSUN]-1659921709160
GPR[ESUN]-1659921709160
GPR[SSUN]-1659921709160
GPR[ESUN]-1659921709160
GPR[SSUN]-1659921709160
GPR[ESUN]-1659921709160
GPR[SSUN]-1659921709160
GPR[ESUN]-1659921709160
GPR[SSUN]-1659921709160
GPR[ESUN]-1659921709160
GPR[SSUN]-1659921709160
GPR[ESUN]-1659921709160
GPR[SSUN]-1659921709160
GPR[ESUN]-1659921709160
GPR[SSUN]-1659921709160
GPR[ESUN]-1659921709160
GPR[SSUN]-1659921709160
GPR[ESUN]-1659921709160
GPR[SSUN]-1659921709160
1537627151
GPR[ESUN]-1659921709355
GPR[SSUN]-1659921709355
-1345859678
GPR[ESUN]-1659921709596
GPR[SSUN]-1659921709596
GPR[ESUN]-1659921709596
GPR[SSUN]-1659921709596
GPR[ESUN]-1659921709596
GPR[SSUN]-1659921709596
GPR[ESUN]-1659921709596
GPR[SSUN]-1659921709596
GPR[ESUN]-1659921709596
GPR[SSUN]-1659921709596
GPR[ESUN]-1659921709596
GPR[SSUN]-1659921709596
GPR[ESUN]-1659921709596
GPR[SSUN]-1659921709596
160819208
GPR[ESUN]-1659921709820
GPR[SSUN]-1659921709820
160819208
GPR[SPVATF]-1659921710042
GPR[EPVATF]-1659921710324
GPR[SPS]-1659921710324
[537143] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:368.
GPR[EPS]-1659921710825
GPR[ESUN]-1659921710825
GPR[SSUN]-1659921710825
160819208
GPR[SPVATF]-1659921711047
GPR[EPVATF]-1659921711327
GPR[SPS]-1659921711327
[538151] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:362.
GPR[EPS]-1659921711833
GPR[SPVATF]-1659921711833
GPR[EPVATF]-1659921712116
GPR[SPS]-1659921712116
[538938] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:362.
GPR[EPS]-1659921712620
GPR[ESUN]-1659921712620
GPR[SSUN]-1659921712620
160819208
GPR[SPVATF]-1659921712845
GPR[EPVATF]-1659921713130
GPR[SPS]-1659921713130
[539977] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:360.
GPR[EPS]-1659921713659
GPR[ESUN]-1659921713659
GPR[SSUN]-1659921713659
160819208
GPR[ESUN]-1659921713886
GPR[SSUN]-1659921713886
160819208
GPR[ESUN]-1659921714108
GPR[SSUN]-1659921714108
160819208
GPR[ESUN]-1659921714331
GPR[SSUN]-1659921714331
160819208
GPR[SPVATF]-1659921714555
GPR[EPVATF]-1659921714850
GPR[SPS]-1659921714850
[541671] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:298.
GPR[EPS]-1659921715353
GPR[ESUN]-1659921715353
GPR[SSUN]-1659921715353
160819208
GPR[ESUN]-1659921715580
GPR[SSUN]-1659921715580
160819208
GPR[ESUN]-1659921715803
GPR[SSUN]-1659921715803
-600752576
GPR[ESUN]-1659921715990
GPR[SSUN]-1659921715990
795998767
GPR[SPVATF]-1659921716210
GPR[EPVATF]-1659921716470
GPR[SPS]-1659921716470
[543254] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckMissingReturn:154.
GPR[EPS]-1659921716936
GPR[ESUN]-1659921716936
GPR[SSUN]-1659921716937
795998767
GPR[SPVATF]-1659921717154
GPR[EPVATF]-1659921717420
GPR[SPS]-1659921717420
[544208] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckMissingReturn:153.
GPR[EPS]-1659921717890
GPR[SPVATF]-1659921717890
GPR[EPVATF]-1659921718149
GPR[SPS]-1659921718149
GPR[EPS]-1659921723749
GPR[ESUN]-1659921723749
GPR[SSUN]-1659921723749
795998767
GPR[ESUN]-1659921723996
GPR[SSUN]-1659921723996
795998767
GPR[ESUN]-1659921724215
GPR[SSUN]-1659921724215
795998767
GPR[ESUN]-1659921724430
GPR[SSUN]-1659921724430
795998767
GPR[ESUN]-1659921724645
GPR[SSUN]-1659921724645
795998767
GPR[SPVATF]-1659921724857
GPR[EPVATF]-1659921725123
GPR[SPS]-1659921725123
[551909] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckMissingReturn:95.
GPR[EPS]-1659921725591
GPR[ESUN]-1659921725591
GPR[SSUN]-1659921725591
795998767
GPR[SPVATF]-1659921725811
GPR[EPVATF]-1659921726078
GPR[SPS]-1659921726078
[552867] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckMissingReturn:94.
GPR[EPS]-1659921726549
GPR[SPVATF]-1659921726549
GPR[EPVATF]-1659921726810
GPR[SPS]-1659921726810
GPR[EPS]-1659921737563
GPR[ESUN]-1659921737563
GPR[SSUN]-1659921737563
795998767
GPR[ESUN]-1659921737887
GPR[SSUN]-1659921737887
-1605808871
GPR[ESUN]-1659921738118
GPR[SSUN]-1659921738118
-1605808871
GPR[SPVATF]-1659921738346
GPR[EPVATF]-1659921738624
GPR[SPS]-1659921738624
[565454] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:206.
GPR[EPS]-1659921739136
GPR[SPVATF]-1659921739136
GPR[EPVATF]-1659921739401
GPR[SPS]-1659921739401
[566227] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:206.
GPR[EPS]-1659921739909
GPR[ESUN]-1659921739909
GPR[SSUN]-1659921739909
GPR[ESUN]-1659921739909
GPR[SSUN]-1659921739909
GPR[ESUN]-1659921739909
GPR[SSUN]-1659921739909
GPR[ESUN]-1659921739909
GPR[SSUN]-1659921739909
GPR[ESUN]-1659921739909
GPR[SSUN]-1659921739909
GPR[ESUN]-1659921739909
GPR[SSUN]-1659921739909
GPR[ESUN]-1659921739909
GPR[SSUN]-1659921739909
GPR[ESUN]-1659921739909
GPR[SSUN]-1659921739909
GPR[ESUN]-1659921739909
GPR[SSUN]-1659921739909
-1966087783
GPR[SPVATF]-1659921740097
GPR[EPVATF]-1659921740114
[566432] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659921740114
GPR[EPVATF]-1659921740131
[566449] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659921740131
GPR[SSUN]-1659921740131
-1966087783
GPR[ESUN]-1659921740318
GPR[SSUN]-1659921740318
-1117079791
GPR[ESUN]-1659921740548
GPR[SSUN]-1659921740548
-1117079791
GPR[SPVATF]-1659921740737
GPR[EPVATF]-1659921741003
GPR[SPS]-1659921741003
[567760] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:531.
GPR[EPS]-1659921741442
GPR[SPVATF]-1659921741442
GPR[EPVATF]-1659921741712
GPR[SPS]-1659921741712
[568462] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:531.
GPR[EPS]-1659921742144
GPR[ESUN]-1659921742144
GPR[SSUN]-1659921742144
-1117079791
GPR[SPVATF]-1659921742343
GPR[EPVATF]-1659921742613
GPR[SPS]-1659921742613
[569369] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:526.
GPR[EPS]-1659921743051
GPR[SPVATF]-1659921743052
GPR[EPVATF]-1659921743316
GPR[SPS]-1659921743316
[570063] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:526.
GPR[EPS]-1659921743746
GPR[ESUN]-1659921743746
GPR[SSUN]-1659921743746
-1117079791
GPR[SPVATF]-1659921743939
GPR[EPVATF]-1659921744213
GPR[SPS]-1659921744213
[570969] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:520.
GPR[EPS]-1659921744651
GPR[SPVATF]-1659921744651
GPR[EPVATF]-1659921744922
GPR[SPS]-1659921744922
[571683] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:520.
GPR[EPS]-1659921745365
GPR[ESUN]-1659921745365
GPR[SSUN]-1659921745365
-1117079791
GPR[SPVATF]-1659921745559
GPR[EPVATF]-1659921745833
GPR[SPS]-1659921745834
[572592] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:519.
GPR[EPS]-1659921746274
GPR[ESUN]-1659921746274
GPR[SSUN]-1659921746274
-1117079791
GPR[SPVATF]-1659921746468
GPR[EPVATF]-1659921746737
GPR[SPS]-1659921746737
[573497] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:518.
GPR[EPS]-1659921747179
GPR[ESUN]-1659921747179
GPR[SSUN]-1659921747179
-1117079791
GPR[ESUN]-1659921747373
GPR[SSUN]-1659921747373
-1117079791
GPR[ESUN]-1659921747562
GPR[SSUN]-1659921747562
-1117079791
GPR[SPVATF]-1659921747754
GPR[EPVATF]-1659921748023
GPR[SPS]-1659921748023
[575590] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:512.
GPR[EPS]-1659921749272
GPR[ESUN]-1659921749272
GPR[SSUN]-1659921749272
-1117079791
GPR[SPVATF]-1659921749475
GPR[EPVATF]-1659921749743
GPR[SPS]-1659921749743
[576521] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:511.
GPR[EPS]-1659921750203
GPR[ESUN]-1659921750203
GPR[SSUN]-1659921750204
-1117079791
GPR[SPVATF]-1659921750397
GPR[EPVATF]-1659921750924
GPR[SPS]-1659921750924
[577686] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:510.
GPR[EPS]-1659921751368
GPR[ESUN]-1659921751368
GPR[SSUN]-1659921751368
-1117079791
GPR[SPVATF]-1659921751563
GPR[EPVATF]-1659921751848
GPR[SPS]-1659921751848
[578606] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:509.
GPR[EPS]-1659921752288
GPR[ESUN]-1659921752288
GPR[SSUN]-1659921752288
-1117079791
GPR[ESUN]-1659921752485
GPR[SSUN]-1659921752485
-1117079791
GPR[SPVATF]-1659921752675
GPR[EPVATF]-1659921752956
GPR[SPS]-1659921752956
[579712] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:134.
GPR[EPS]-1659921753394
GPR[ESUN]-1659921753394
GPR[SSUN]-1659921753394
-1696950979
GPR[SPVATF]-1659921753657
GPR[EPVATF]-1659921753977
GPR[SPS]-1659921753977
[580791] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:291.
GPR[EPS]-1659921754473
GPR[ESUN]-1659921754473
GPR[SSUN]-1659921754473
-1696950979
GPR[SPVATF]-1659921754703
GPR[EPVATF]-1659921754990
GPR[SPS]-1659921754990
[581647] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class SemanticReverseAbstractInterpreter extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter {
    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> EQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderEquality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> NE = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderInequality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> SHEQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderShallowEquality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> SHNE = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderShallowInequality(p.typeB);
        }
    };

    private final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> INEQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            return new com.google.javascript.rhino.jstype.JSType.TypePair(getRestrictedWithoutUndefined(p.typeA), getRestrictedWithoutUndefined(p.typeB));
        }
    };

    public SemanticReverseAbstractInterpreter(com.google.javascript.jscomp.CodingConvention convention, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        super(convention, typeRegistry);
    }

    @java.lang.Override
    public com.google.javascript.jscomp.type.FlowScope getPreciserScopeKnowingConditionOutcome(com.google.javascript.rhino.Node condition, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        int operatorToken = condition.getType();
        switch (operatorToken) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.Node left;
                com.google.javascript.rhino.Node right;
                if (operatorToken == com.google.javascript.rhino.Token.CASE) {
                    left = condition.getParent().getFirstChild();
                    right = condition.getFirstChild();
                } else {
                    left = condition.getFirstChild();
                    right = condition.getLastChild();
                }
                com.google.javascript.rhino.Node typeOfNode = null;
                com.google.javascript.rhino.Node stringNode = null;
                if (left.isTypeOf() && right.isString()) {
                    typeOfNode = left;
                    stringNode = right;
                } else if (right.isTypeOf() && left.isString()) {
                    typeOfNode = right;
                    stringNode = left;
                }
                if ((typeOfNode != null) && (stringNode != null)) {
                    com.google.javascript.rhino.Node operandNode = typeOfNode.getFirstChild();
                    com.google.javascript.rhino.jstype.JSType operandType = getTypeIfRefinable(operandNode, blindScope);
                    if (operandType != null) {
                        boolean resultEqualsValue = ((operatorToken == com.google.javascript.rhino.Token.EQ) || (operatorToken == com.google.javascript.rhino.Token.SHEQ)) || (operatorToken == com.google.javascript.rhino.Token.CASE);
                        if (!outcome) {
                            resultEqualsValue = !resultEqualsValue;
                        }
                        return caseTypeOf(operandNode, operandType, stringNode.getString(), resultEqualsValue, blindScope);
                    }
                }
        }
        switch (operatorToken) {
            case com.google.javascript.rhino.Token.AND :
                if (outcome) {
                    return caseAndOrNotShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, true);
                } else {
                    return caseAndOrMaybeShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, true);
                }
            case com.google.javascript.rhino.Token.OR :
                if (!outcome) {
                    return caseAndOrNotShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, false);
                } else {
                    return caseAndOrMaybeShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, false);
                }
            case com.google.javascript.rhino.Token.EQ :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);
                }
            case com.google.javascript.rhino.Token.NE :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);
                }
            case com.google.javascript.rhino.Token.SHEQ :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                }
            case com.google.javascript.rhino.Token.SHNE :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                }
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.GETPROP :
                return caseNameOrGetProp(condition, blindScope, outcome);
            case com.google.javascript.rhino.Token.ASSIGN :
                return firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild(), firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild().getNext(), blindScope, outcome), outcome);
            case com.google.javascript.rhino.Token.NOT :
                return firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild(), blindScope, !outcome);
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GT :
                if (outcome) {
                    return caseEquality(condition, blindScope, INEQ);
                }
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return caseInstanceOf(condition.getFirstChild(), condition.getLastChild(), blindScope, outcome);
            case com.google.javascript.rhino.Token.IN :
                if (outcome && condition.getFirstChild().isString()) {
                    return caseIn(condition.getLastChild(), condition.getFirstChild().getString(), blindScope);
                }
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.Node left = condition.getParent().getFirstChild();
                com.google.javascript.rhino.Node right = condition.getFirstChild();
                if (outcome) {
                    return caseEquality(left, right, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                } else {
                    return caseEquality(left, right, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                }
        }
        return nextPreciserScopeKnowingConditionOutcome(condition, blindScope, outcome);
    }

    private com.google.javascript.jscomp.type.FlowScope caseEquality(com.google.javascript.rhino.Node condition, com.google.javascript.jscomp.type.FlowScope blindScope, com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> merging) {
        return caseEquality(condition.getFirstChild(), condition.getLastChild(), blindScope, merging);
    }

    private com.google.javascript.jscomp.type.FlowScope caseEquality(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> merging) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        boolean leftIsRefineable;
        if (leftType != null) {
            leftIsRefineable = true;
        } else {
            leftIsRefineable = false;
            leftType = left.getJSType();
        }
        com.google.javascript.rhino.jstype.JSType rightType = getTypeIfRefinable(right, blindScope);
        boolean rightIsRefineable;
        if (rightType != null) {
            rightIsRefineable = true;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(202).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(202).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(202).collectInput("merging",merging);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(202).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(202).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.this.INEQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.this.INEQ);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(202).collectInput("left",left);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(202).collectInput("blindScope",blindScope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(202).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(202).collectInput("right",right);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(202).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(202).collectInput("leftType",leftType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(202).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(202).collectInput("rightType",rightType);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(202).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(202).collectionEnds();
            }
            if (runtimeAngelicValue)
                rightIsRefineable = false;

            rightType = right.getJSType();
        }
        com.google.javascript.rhino.jstype.JSType.TypePair merged = merging.apply(new com.google.javascript.rhino.jstype.JSType.TypePair(leftType, rightType));
        if ((merged != null) && ((leftIsRefineable && (merged.typeA != null)) || (rightIsRefineable && (merged.typeB != null)))) {
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            if (leftIsRefineable && (merged.typeA != null)) {
                declareNameInScope(informed, left, merged.typeA);
            }
            if (rightIsRefineable && (merged.typeB != null)) {
                declareNameInScope(informed, right, merged.typeB);
            }
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseAndOrNotShortCircuiting(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean condition) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        boolean leftIsRefineable;
        if (leftType != null) {
            leftIsRefineable = true;
        } else {
            leftIsRefineable = false;
            leftType = left.getJSType();
            blindScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, condition);
        }
        leftType = (leftType == null) ? null : leftType.getRestrictedTypeGivenToBooleanOutcome(condition);
        if (leftType == null) {
            return firstPreciserScopeKnowingConditionOutcome(right, blindScope, condition);
        }
        com.google.javascript.rhino.jstype.JSType rightType = getTypeIfRefinable(right, blindScope);
        boolean rightIsRefineable;
        if (rightType != null) {
            rightIsRefineable = true;
        } else {
            rightIsRefineable = false;
            rightType = right.getJSType();
            blindScope = firstPreciserScopeKnowingConditionOutcome(right, blindScope, condition);
        }
        if (condition) {
            rightType = (rightType == null) ? null : rightType.getRestrictedTypeGivenToBooleanOutcome(condition);
            if (((leftType != null) && leftIsRefineable) || ((rightType != null) && rightIsRefineable)) {
                com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
                if (leftIsRefineable && (leftType != null)) {
                    declareNameInScope(informed, left, leftType);
                }
                if (rightIsRefineable && (rightType != null)) {
                    declareNameInScope(informed, right, rightType);
                }
                return informed;
            }
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseAndOrMaybeShortCircuiting(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean condition) {
        com.google.javascript.jscomp.type.FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, !condition);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> leftVar = leftScope.findUniqueRefinedSlot(blindScope);
        if (leftVar == null) {
            return blindScope;
        }
        com.google.javascript.jscomp.type.FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, condition);
        rightScope = firstPreciserScopeKnowingConditionOutcome(right, rightScope, !condition);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> rightVar = rightScope.findUniqueRefinedSlot(blindScope);
        if ((rightVar == null) || (!leftVar.getName().equals(rightVar.getName()))) {
            return blindScope;
        }
        com.google.javascript.rhino.jstype.JSType type = leftVar.getType().getLeastSupertype(rightVar.getType());
        com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
        informed.inferSlotType(leftVar.getName(), type);
        return informed;
    }

    private com.google.javascript.jscomp.type.FlowScope caseNameOrGetProp(com.google.javascript.rhino.Node name, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        com.google.javascript.rhino.jstype.JSType type = getTypeIfRefinable(name, blindScope);
        if (type != null) {
            com.google.javascript.rhino.jstype.JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome(outcome);
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            declareNameInScope(informed, name, restrictedType);
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseTypeOf(com.google.javascript.rhino.Node node, com.google.javascript.rhino.jstype.JSType type, java.lang.String value, boolean resultEqualsValue, com.google.javascript.jscomp.type.FlowScope blindScope) {
        com.google.javascript.rhino.jstype.JSType restrictedType = getRestrictedByTypeOfResult(type, value, resultEqualsValue);
        if (restrictedType == null) {
            return blindScope;
        }
        com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
        declareNameInScope(informed, node, restrictedType);
        return informed;
    }

    private com.google.javascript.jscomp.type.FlowScope caseInstanceOf(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        if (leftType == null) {
            return blindScope;
        }
        com.google.javascript.rhino.jstype.JSType rightType = right.getJSType();
        com.google.javascript.rhino.jstype.ObjectType targetType = typeRegistry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        if ((rightType != null) && rightType.isFunctionType()) {
            targetType = rightType.toMaybeFunctionType();
        }
        com.google.javascript.rhino.jstype.Visitor<com.google.javascript.rhino.jstype.JSType> visitor;
        if (outcome) {
            visitor = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.RestrictByTrueInstanceOfResultVisitor(targetType);
        } else {
            visitor = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.RestrictByFalseInstanceOfResultVisitor(targetType);
        }
        com.google.javascript.rhino.jstype.JSType restrictedLeftType = leftType.visit(visitor);
        if ((restrictedLeftType != null) && (!restrictedLeftType.equals(leftType))) {
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            declareNameInScope(informed, left, restrictedLeftType);
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseIn(com.google.javascript.rhino.Node object, java.lang.String propertyName, com.google.javascript.jscomp.type.FlowScope blindScope) {
        com.google.javascript.rhino.jstype.JSType jsType = object.getJSType();
        jsType = this.getRestrictedWithoutNull(jsType);
        jsType = this.getRestrictedWithoutUndefined(jsType);
        boolean hasProperty = false;
        com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(jsType);
        if (objectType != null) {
            hasProperty = objectType.hasProperty(propertyName);
        }
        if (!hasProperty) {
            java.lang.String qualifiedName = object.getQualifiedName();
            if (qualifiedName != null) {
                java.lang.String propertyQualifiedName = (qualifiedName + ".") + propertyName;
                if (blindScope.getSlot(propertyQualifiedName) == null) {
                    com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
                    com.google.javascript.rhino.jstype.JSType unknownType = typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
                    informed.inferQualifiedSlot(object, propertyQualifiedName, unknownType, unknownType);
                    return informed;
                }
            }
        }
        return blindScope;
    }

    private class RestrictByTrueInstanceOfResultVisitor extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.RestrictByTrueTypeOfResultVisitor {
        private final com.google.javascript.rhino.jstype.ObjectType target;

        RestrictByTrueInstanceOfResultVisitor(com.google.javascript.rhino.jstype.ObjectType target) {
            this.target = target;
        }

        @java.lang.Override
        protected com.google.javascript.rhino.jstype.JSType caseTopType(com.google.javascript.rhino.jstype.JSType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnknownType() {
            com.google.javascript.rhino.jstype.FunctionType funcTarget = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(target);
            if ((funcTarget != null) && funcTarget.hasInstanceType()) {
                return funcTarget.getInstanceType();
            }
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseObjectType(com.google.javascript.rhino.jstype.ObjectType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnionType(com.google.javascript.rhino.jstype.UnionType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseFunctionType(com.google.javascript.rhino.jstype.FunctionType type) {
            return caseObjectType(type);
        }

        private com.google.javascript.rhino.jstype.JSType applyCommonRestriction(com.google.javascript.rhino.jstype.JSType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                return type.getGreatestSubtype(funcTarget.getInstanceType());
            }
            return null;
        }
    }

    private class RestrictByFalseInstanceOfResultVisitor extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.RestrictByFalseTypeOfResultVisitor {
        private final com.google.javascript.rhino.jstype.ObjectType target;

        RestrictByFalseInstanceOfResultVisitor(com.google.javascript.rhino.jstype.ObjectType target) {
            this.target = target;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseObjectType(com.google.javascript.rhino.jstype.ObjectType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                if (type.isSubtype(funcTarget.getInstanceType())) {
                    return null;
                }
                return type;
            }
            return null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnionType(com.google.javascript.rhino.jstype.UnionType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                return type.getRestrictedUnion(funcTarget.getInstanceType());
            }
            return null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseFunctionType(com.google.javascript.rhino.jstype.FunctionType type) {
            return caseObjectType(type);
        }
    }
}
[581647] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659921755329
GPR[SSUN]-1659921755329
1290590094
GPR[SPVATF]-1659921755553
GPR[EPVATF]-1659921755822
GPR[SPS]-1659921755822
[582651] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LinkedFlowScope:357.
GPR[EPS]-1659921756334
GPR[ESUN]-1659921756334
GPR[SSUN]-1659921756334
GPR[ESUN]-1659921756334
GPR[SSUN]-1659921756334
-1345859678
GPR[SPVATF]-1659921756587
GPR[EPVATF]-1659921756889
GPR[SPS]-1659921756889
[583766] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:224.
GPR[EPS]-1659921757448
GPR[SPVATF]-1659921757448
GPR[EPVATF]-1659921757782
GPR[SPS]-1659921757782
[584653] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:224.
GPR[EPS]-1659921758335
GPR[ESUN]-1659921758335
GPR[SSUN]-1659921758335
160819208
GPR[ESUN]-1659921758565
GPR[SSUN]-1659921758565
160819208
GPR[ESUN]-1659921758790
GPR[SSUN]-1659921758790
160819208
GPR[ESUN]-1659921759018
GPR[SSUN]-1659921759018
160819208
GPR[ESUN]-1659921759240
GPR[SSUN]-1659921759240
1187751237
GPR[ESUN]-1659921759507
GPR[SSUN]-1659921759507
1537627151
GPR[SPVATF]-1659921759707
GPR[EPVATF]-1659921760025
GPR[SPS]-1659921760025
[586796] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:176.
GPR[EPS]-1659921760478
GPR[ESUN]-1659921760478
GPR[SSUN]-1659921760478
1537627151
GPR[SPVATF]-1659921760681
GPR[EPVATF]-1659921760993
GPR[SPS]-1659921760993
[587767] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:175.
GPR[EPS]-1659921761449
GPR[SPVATF]-1659921761449
GPR[EPVATF]-1659921761759
GPR[SPS]-1659921761760
[588547] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:175.
GPR[EPS]-1659921762229
GPR[ESUN]-1659921762229
GPR[SSUN]-1659921762229
-1345859678
GPR[ESUN]-1659921762472
GPR[SSUN]-1659921762472
-1696950979
GPR[SPVATF]-1659921762695
GPR[EPVATF]-1659921762964
GPR[SPS]-1659921762964
[589771] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:303.
GPR[EPS]-1659921763453
GPR[ESUN]-1659921763453
GPR[SSUN]-1659921763453
-1696950979
GPR[SPVATF]-1659921763676
GPR[EPVATF]-1659921763950
GPR[SPS]-1659921763950
[590604] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class SemanticReverseAbstractInterpreter extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter {
    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> EQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderEquality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> NE = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderInequality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> SHEQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderShallowEquality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> SHNE = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderShallowInequality(p.typeB);
        }
    };

    private final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> INEQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            return new com.google.javascript.rhino.jstype.JSType.TypePair(getRestrictedWithoutUndefined(p.typeA), getRestrictedWithoutUndefined(p.typeB));
        }
    };

    public SemanticReverseAbstractInterpreter(com.google.javascript.jscomp.CodingConvention convention, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        super(convention, typeRegistry);
    }

    @java.lang.Override
    public com.google.javascript.jscomp.type.FlowScope getPreciserScopeKnowingConditionOutcome(com.google.javascript.rhino.Node condition, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        int operatorToken = condition.getType();
        switch (operatorToken) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.Node left;
                com.google.javascript.rhino.Node right;
                if (operatorToken == com.google.javascript.rhino.Token.CASE) {
                    left = condition.getParent().getFirstChild();
                    right = condition.getFirstChild();
                } else {
                    left = condition.getFirstChild();
                    right = condition.getLastChild();
                }
                com.google.javascript.rhino.Node typeOfNode = null;
                com.google.javascript.rhino.Node stringNode = null;
                if (left.isTypeOf() && right.isString()) {
                    typeOfNode = left;
                    stringNode = right;
                } else if (right.isTypeOf() && left.isString()) {
                    typeOfNode = right;
                    stringNode = left;
                }
                if ((typeOfNode != null) && (stringNode != null)) {
                    com.google.javascript.rhino.Node operandNode = typeOfNode.getFirstChild();
                    com.google.javascript.rhino.jstype.JSType operandType = getTypeIfRefinable(operandNode, blindScope);
                    if (operandType != null) {
                        boolean resultEqualsValue = ((operatorToken == com.google.javascript.rhino.Token.EQ) || (operatorToken == com.google.javascript.rhino.Token.SHEQ)) || (operatorToken == com.google.javascript.rhino.Token.CASE);
                        if (!outcome) {
                            resultEqualsValue = !resultEqualsValue;
                        }
                        return caseTypeOf(operandNode, operandType, stringNode.getString(), resultEqualsValue, blindScope);
                    }
                }
        }
        switch (operatorToken) {
            case com.google.javascript.rhino.Token.AND :
                if (outcome) {
                    return caseAndOrNotShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, true);
                } else {
                    return caseAndOrMaybeShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, true);
                }
            case com.google.javascript.rhino.Token.OR :
                if (!outcome) {
                    return caseAndOrNotShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, false);
                } else {
                    return caseAndOrMaybeShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, false);
                }
            case com.google.javascript.rhino.Token.EQ :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);
                }
            case com.google.javascript.rhino.Token.NE :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);
                }
            case com.google.javascript.rhino.Token.SHEQ :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                }
            case com.google.javascript.rhino.Token.SHNE :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                }
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.GETPROP :
                return caseNameOrGetProp(condition, blindScope, outcome);
            case com.google.javascript.rhino.Token.ASSIGN :
                return firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild(), firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild().getNext(), blindScope, outcome), outcome);
            case com.google.javascript.rhino.Token.NOT :
                return firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild(), blindScope, !outcome);
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GT :
                if (outcome) {
                    return caseEquality(condition, blindScope, INEQ);
                }
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return caseInstanceOf(condition.getFirstChild(), condition.getLastChild(), blindScope, outcome);
            case com.google.javascript.rhino.Token.IN :
                if (outcome && condition.getFirstChild().isString()) {
                    return caseIn(condition.getLastChild(), condition.getFirstChild().getString(), blindScope);
                }
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.Node left = condition.getParent().getFirstChild();
                com.google.javascript.rhino.Node right = condition.getFirstChild();
                if (outcome) {
                    return caseEquality(left, right, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                } else {
                    return caseEquality(left, right, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                }
        }
        return nextPreciserScopeKnowingConditionOutcome(condition, blindScope, outcome);
    }

    private com.google.javascript.jscomp.type.FlowScope caseEquality(com.google.javascript.rhino.Node condition, com.google.javascript.jscomp.type.FlowScope blindScope, com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> merging) {
        return caseEquality(condition.getFirstChild(), condition.getLastChild(), blindScope, merging);
    }

    private com.google.javascript.jscomp.type.FlowScope caseEquality(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> merging) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        boolean leftIsRefineable;
        if (leftType != null) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(210).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("merging",merging);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.this.INEQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.this.INEQ);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("left",left);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("blindScope",blindScope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("right",right);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("leftType",leftType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectionEnds();
            }
            if (runtimeAngelicValue)
                leftIsRefineable = true;

        } else {
            leftIsRefineable = false;
            leftType = left.getJSType();
        }
        com.google.javascript.rhino.jstype.JSType rightType = getTypeIfRefinable(right, blindScope);
        boolean rightIsRefineable;
        if (rightType != null) {
            rightIsRefineable = true;
        } else {
            rightIsRefineable = false;
            rightType = right.getJSType();
        }
        com.google.javascript.rhino.jstype.JSType.TypePair merged = merging.apply(new com.google.javascript.rhino.jstype.JSType.TypePair(leftType, rightType));
        if ((merged != null) && ((leftIsRefineable && (merged.typeA != null)) || (rightIsRefineable && (merged.typeB != null)))) {
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            if (leftIsRefineable && (merged.typeA != null)) {
                declareNameInScope(informed, left, merged.typeA);
            }
            if (rightIsRefineable && (merged.typeB != null)) {
                declareNameInScope(informed, right, merged.typeB);
            }
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseAndOrNotShortCircuiting(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean condition) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        boolean leftIsRefineable;
        if (leftType != null) {
            leftIsRefineable = true;
        } else {
            leftIsRefineable = false;
            leftType = left.getJSType();
            blindScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, condition);
        }
        leftType = (leftType == null) ? null : leftType.getRestrictedTypeGivenToBooleanOutcome(condition);
        if (leftType == null) {
            return firstPreciserScopeKnowingConditionOutcome(right, blindScope, condition);
        }
        com.google.javascript.rhino.jstype.JSType rightType = getTypeIfRefinable(right, blindScope);
        boolean rightIsRefineable;
        if (rightType != null) {
            rightIsRefineable = true;
        } else {
            rightIsRefineable = false;
            rightType = right.getJSType();
            blindScope = firstPreciserScopeKnowingConditionOutcome(right, blindScope, condition);
        }
        if (condition) {
            rightType = (rightType == null) ? null : rightType.getRestrictedTypeGivenToBooleanOutcome(condition);
            if (((leftType != null) && leftIsRefineable) || ((rightType != null) && rightIsRefineable)) {
                com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
                if (leftIsRefineable && (leftType != null)) {
                    declareNameInScope(informed, left, leftType);
                }
                if (rightIsRefineable && (rightType != null)) {
                    declareNameInScope(informed, right, rightType);
                }
                return informed;
            }
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseAndOrMaybeShortCircuiting(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean condition) {
        com.google.javascript.jscomp.type.FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, !condition);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> leftVar = leftScope.findUniqueRefinedSlot(blindScope);
        if (leftVar == null) {
            return blindScope;
        }
        com.google.javascript.jscomp.type.FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, condition);
        rightScope = firstPreciserScopeKnowingConditionOutcome(right, rightScope, !condition);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> rightVar = rightScope.findUniqueRefinedSlot(blindScope);
        if ((rightVar == null) || (!leftVar.getName().equals(rightVar.getName()))) {
            return blindScope;
        }
        com.google.javascript.rhino.jstype.JSType type = leftVar.getType().getLeastSupertype(rightVar.getType());
        com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
        informed.inferSlotType(leftVar.getName(), type);
        return informed;
    }

    private com.google.javascript.jscomp.type.FlowScope caseNameOrGetProp(com.google.javascript.rhino.Node name, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        com.google.javascript.rhino.jstype.JSType type = getTypeIfRefinable(name, blindScope);
        if (type != null) {
            com.google.javascript.rhino.jstype.JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome(outcome);
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            declareNameInScope(informed, name, restrictedType);
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseTypeOf(com.google.javascript.rhino.Node node, com.google.javascript.rhino.jstype.JSType type, java.lang.String value, boolean resultEqualsValue, com.google.javascript.jscomp.type.FlowScope blindScope) {
        com.google.javascript.rhino.jstype.JSType restrictedType = getRestrictedByTypeOfResult(type, value, resultEqualsValue);
        if (restrictedType == null) {
            return blindScope;
        }
        com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
        declareNameInScope(informed, node, restrictedType);
        return informed;
    }

    private com.google.javascript.jscomp.type.FlowScope caseInstanceOf(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        if (leftType == null) {
            return blindScope;
        }
        com.google.javascript.rhino.jstype.JSType rightType = right.getJSType();
        com.google.javascript.rhino.jstype.ObjectType targetType = typeRegistry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        if ((rightType != null) && rightType.isFunctionType()) {
            targetType = rightType.toMaybeFunctionType();
        }
        com.google.javascript.rhino.jstype.Visitor<com.google.javascript.rhino.jstype.JSType> visitor;
        if (outcome) {
            visitor = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.RestrictByTrueInstanceOfResultVisitor(targetType);
        } else {
            visitor = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.RestrictByFalseInstanceOfResultVisitor(targetType);
        }
        com.google.javascript.rhino.jstype.JSType restrictedLeftType = leftType.visit(visitor);
        if ((restrictedLeftType != null) && (!restrictedLeftType.equals(leftType))) {
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            declareNameInScope(informed, left, restrictedLeftType);
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseIn(com.google.javascript.rhino.Node object, java.lang.String propertyName, com.google.javascript.jscomp.type.FlowScope blindScope) {
        com.google.javascript.rhino.jstype.JSType jsType = object.getJSType();
        jsType = this.getRestrictedWithoutNull(jsType);
        jsType = this.getRestrictedWithoutUndefined(jsType);
        boolean hasProperty = false;
        com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(jsType);
        if (objectType != null) {
            hasProperty = objectType.hasProperty(propertyName);
        }
        if (!hasProperty) {
            java.lang.String qualifiedName = object.getQualifiedName();
            if (qualifiedName != null) {
                java.lang.String propertyQualifiedName = (qualifiedName + ".") + propertyName;
                if (blindScope.getSlot(propertyQualifiedName) == null) {
                    com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
                    com.google.javascript.rhino.jstype.JSType unknownType = typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
                    informed.inferQualifiedSlot(object, propertyQualifiedName, unknownType, unknownType);
                    return informed;
                }
            }
        }
        return blindScope;
    }

    private class RestrictByTrueInstanceOfResultVisitor extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.RestrictByTrueTypeOfResultVisitor {
        private final com.google.javascript.rhino.jstype.ObjectType target;

        RestrictByTrueInstanceOfResultVisitor(com.google.javascript.rhino.jstype.ObjectType target) {
            this.target = target;
        }

        @java.lang.Override
        protected com.google.javascript.rhino.jstype.JSType caseTopType(com.google.javascript.rhino.jstype.JSType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnknownType() {
            com.google.javascript.rhino.jstype.FunctionType funcTarget = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(target);
            if ((funcTarget != null) && funcTarget.hasInstanceType()) {
                return funcTarget.getInstanceType();
            }
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseObjectType(com.google.javascript.rhino.jstype.ObjectType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnionType(com.google.javascript.rhino.jstype.UnionType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseFunctionType(com.google.javascript.rhino.jstype.FunctionType type) {
            return caseObjectType(type);
        }

        private com.google.javascript.rhino.jstype.JSType applyCommonRestriction(com.google.javascript.rhino.jstype.JSType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                return type.getGreatestSubtype(funcTarget.getInstanceType());
            }
            return null;
        }
    }

    private class RestrictByFalseInstanceOfResultVisitor extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.RestrictByFalseTypeOfResultVisitor {
        private final com.google.javascript.rhino.jstype.ObjectType target;

        RestrictByFalseInstanceOfResultVisitor(com.google.javascript.rhino.jstype.ObjectType target) {
            this.target = target;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseObjectType(com.google.javascript.rhino.jstype.ObjectType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                if (type.isSubtype(funcTarget.getInstanceType())) {
                    return null;
                }
                return type;
            }
            return null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnionType(com.google.javascript.rhino.jstype.UnionType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                return type.getRestrictedUnion(funcTarget.getInstanceType());
            }
            return null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseFunctionType(com.google.javascript.rhino.jstype.FunctionType type) {
            return caseObjectType(type);
        }
    }
}
[590605] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659921764287
GPR[SSUN]-1659921764287
1187751237
GPR[ESUN]-1659921764550
GPR[SSUN]-1659921764550
GPR[ESUN]-1659921764550
GPR[SSUN]-1659921764550
GPR[ESUN]-1659921764550
GPR[SSUN]-1659921764550
GPR[ESUN]-1659921764550
GPR[SSUN]-1659921764550
GPR[ESUN]-1659921764550
GPR[SSUN]-1659921764550
GPR[ESUN]-1659921764550
GPR[SSUN]-1659921764550
GPR[ESUN]-1659921764550
GPR[SSUN]-1659921764550
GPR[ESUN]-1659921764550
GPR[SSUN]-1659921764550
GPR[ESUN]-1659921764550
GPR[SSUN]-1659921764550
GPR[ESUN]-1659921764550
GPR[SSUN]-1659921764550
GPR[ESUN]-1659921764550
GPR[SSUN]-1659921764550
GPR[ESUN]-1659921764550
GPR[SSUN]-1659921764550
GPR[ESUN]-1659921764550
GPR[SSUN]-1659921764550
GPR[ESUN]-1659921764550
GPR[SSUN]-1659921764550
GPR[ESUN]-1659921764550
GPR[SSUN]-1659921764550
GPR[ESUN]-1659921764550
GPR[SSUN]-1659921764550
GPR[ESUN]-1659921764550
GPR[SSUN]-1659921764550
GPR[ESUN]-1659921764550
GPR[SSUN]-1659921764550
GPR[ESUN]-1659921764550
GPR[SSUN]-1659921764550
GPR[ESUN]-1659921764550
GPR[SSUN]-1659921764550
-1345859678
GPR[ESUN]-1659921764827
GPR[SSUN]-1659921764827
-1345859678
GPR[ESUN]-1659921765066
GPR[SSUN]-1659921765066
-1345859678
GPR[SPVATF]-1659921765305
GPR[EPVATF]-1659921765639
GPR[SPS]-1659921765639
[592537] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:223.
GPR[EPS]-1659921766220
GPR[SPVATF]-1659921766220
GPR[EPVATF]-1659921766532
GPR[SPS]-1659921766532
[593413] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:223.
GPR[EPS]-1659921767095
GPR[ESUN]-1659921767095
GPR[SSUN]-1659921767095
-1345859678
GPR[ESUN]-1659921767335
GPR[SSUN]-1659921767335
GPR[ESUN]-1659921767335
GPR[SSUN]-1659921767335
1537627151
GPR[ESUN]-1659921767531
GPR[SSUN]-1659921767531
-1345859678
GPR[ESUN]-1659921767769
GPR[SSUN]-1659921767769
-1345859678
GPR[SPVATF]-1659921768011
GPR[EPVATF]-1659921768159
GPR[SPS]-1659921768159
[594984] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:504.
GPR[EPS]-1659921768666
GPR[SPVATF]-1659921768666
GPR[EPVATF]-1659921768808
GPR[SPS]-1659921768808
[595638] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:504.
GPR[EPS]-1659921769320
GPR[ESUN]-1659921769320
GPR[SSUN]-1659921769320
-1345859678
GPR[ESUN]-1659921769602
GPR[SSUN]-1659921769602
-1696950979
GPR[SPVATF]-1659921769824
GPR[EPVATF]-1659921770115
GPR[SPS]-1659921770115
[596925] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:308.
GPR[EPS]-1659921770607
GPR[ESUN]-1659921770607
GPR[SSUN]-1659921770607
-1696950979
GPR[SPVATF]-1659921770832
GPR[EPVATF]-1659921771114
GPR[SPS]-1659921771114
[597972] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:305.
GPR[EPS]-1659921771654
GPR[SPVATF]-1659921771654
GPR[EPVATF]-1659921771931
GPR[SPS]-1659921771931
[598736] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:305.
GPR[EPS]-1659921772418
GPR[ESUN]-1659921772418
GPR[SSUN]-1659921772418
-1696950979
GPR[SPVATF]-1659921772648
GPR[EPVATF]-1659921772920
GPR[SPS]-1659921772920
[599730] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:302.
GPR[EPS]-1659921773412
GPR[SPVATF]-1659921773412
GPR[EPVATF]-1659921773684
GPR[SPS]-1659921773685
[600495] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:302.
GPR[EPS]-1659921774177
GPR[ESUN]-1659921774177
GPR[SSUN]-1659921774177
-1696950979
GPR[ESUN]-1659921774405
GPR[SSUN]-1659921774405
-1696950979
GPR[ESUN]-1659921774625
GPR[SSUN]-1659921774625
GPR[ESUN]-1659921774625
GPR[SSUN]-1659921774625
GPR[ESUN]-1659921774625
GPR[SSUN]-1659921774625
GPR[ESUN]-1659921774625
GPR[SSUN]-1659921774625
GPR[ESUN]-1659921774625
GPR[SSUN]-1659921774625
GPR[ESUN]-1659921774625
GPR[SSUN]-1659921774625
GPR[ESUN]-1659921774625
GPR[SSUN]-1659921774625
GPR[ESUN]-1659921774625
GPR[SSUN]-1659921774625
GPR[ESUN]-1659921774625
GPR[SSUN]-1659921774625
GPR[ESUN]-1659921774625
GPR[SSUN]-1659921774625
GPR[ESUN]-1659921774625
GPR[SSUN]-1659921774625
GPR[ESUN]-1659921774625
GPR[SSUN]-1659921774625
GPR[ESUN]-1659921774625
GPR[SSUN]-1659921774625
GPR[ESUN]-1659921774625
GPR[SSUN]-1659921774625
GPR[ESUN]-1659921774625
GPR[SSUN]-1659921774625
GPR[ESUN]-1659921774625
GPR[SSUN]-1659921774625
GPR[ESUN]-1659921774625
GPR[SSUN]-1659921774625
GPR[ESUN]-1659921774625
GPR[SSUN]-1659921774625
GPR[ESUN]-1659921774625
GPR[SSUN]-1659921774625
711965926
GPR[ESUN]-1659921774798
GPR[SSUN]-1659921774798
711965926
GPR[SPVATF]-1659921774970
GPR[EPVATF]-1659921775322
GPR[SPS]-1659921775322
[602073] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractMessageFormatter:37.
GPR[EPS]-1659921775755
GPR[ESUN]-1659921775756
GPR[SSUN]-1659921775756
2433571
GPR[ESUN]-1659921775992
GPR[SSUN]-1659921775992
2433571
GPR[SPVATF]-1659921776228
GPR[EPVATF]-1659921776380
GPR[SPS]-1659921776380
[603267] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1966.
GPR[EPS]-1659921776949
GPR[ESUN]-1659921776949
GPR[SSUN]-1659921776949
-1345859678
GPR[SPVATF]-1659921777193
GPR[EPVATF]-1659921777338
GPR[SPS]-1659921777338
[604174] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:226.
GPR[EPS]-1659921777856
GPR[ESUN]-1659921777856
GPR[SSUN]-1659921777856
-1345859678
GPR[SPVATF]-1659921778097
GPR[EPVATF]-1659921778246
GPR[SPS]-1659921778246
[605117] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:225.
GPR[EPS]-1659921778799
GPR[ESUN]-1659921778799
GPR[SSUN]-1659921778799
GPR[ESUN]-1659921778799
GPR[SSUN]-1659921778799
GPR[ESUN]-1659921778799
GPR[SSUN]-1659921778799
GPR[ESUN]-1659921778799
GPR[SSUN]-1659921778799
GPR[ESUN]-1659921778799
GPR[SSUN]-1659921778799
GPR[ESUN]-1659921778799
GPR[SSUN]-1659921778799
GPR[ESUN]-1659921778799
GPR[SSUN]-1659921778799
GPR[ESUN]-1659921778799
GPR[SSUN]-1659921778799
GPR[ESUN]-1659921778799
GPR[SSUN]-1659921778799
GPR[ESUN]-1659921778799
GPR[SSUN]-1659921778799
2433571
GPR[ESUN]-1659921779034
GPR[SSUN]-1659921779034
2433571
GPR[SPVATF]-1659921779262
GPR[EPVATF]-1659921779497
GPR[SPS]-1659921779497
[606340] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:533.
GPR[EPS]-1659921780022
GPR[ESUN]-1659921780022
GPR[SSUN]-1659921780022
1331276989
GPR[ESUN]-1659921780229
GPR[SSUN]-1659921780229
GPR[ESUN]-1659921780229
GPR[SSUN]-1659921780229
GPR[ESUN]-1659921780229
GPR[SSUN]-1659921780229
GPR[ESUN]-1659921780229
GPR[SSUN]-1659921780229
GPR[ESUN]-1659921780230
GPR[SSUN]-1659921780230
GPR[ESUN]-1659921780230
GPR[SSUN]-1659921780230
GPR[ESUN]-1659921780230
GPR[SSUN]-1659921780230
GPR[ESUN]-1659921780230
GPR[SSUN]-1659921780230
GPR[ESUN]-1659921780230
GPR[SSUN]-1659921780230
GPR[ESUN]-1659921780230
GPR[SSUN]-1659921780230
1290590094
GPR[ESUN]-1659921780449
GPR[SSUN]-1659921780449
1290590094
GPR[SPVATF]-1659921780669
GPR[EPVATF]-1659921780958
GPR[SPS]-1659921780958
[607790] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LinkedFlowScope:356.
GPR[EPS]-1659921781472
GPR[SPVATF]-1659921781472
GPR[EPVATF]-1659921781749
GPR[SPS]-1659921781749
[608585] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LinkedFlowScope:356.
GPR[EPS]-1659921782267
GPR[ESUN]-1659921782267
GPR[SSUN]-1659921782267
-1797850673
GPR[SPVATF]-1659921782514
GPR[EPVATF]-1659921782793
GPR[SPS]-1659921782793
[610477] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1639.
GPR[EPS]-1659921784159
GPR[ESUN]-1659921784160
GPR[SSUN]-1659921784160
-1007410555
GPR[ESUN]-1659921784349
GPR[SSUN]-1659921784349
-534884160
GPR[SPVATF]-1659921784683
GPR[EPVATF]-1659921784846
GPR[SPS]-1659921784846
[611895] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1527.
GPR[EPS]-1659921785577
GPR[ESUN]-1659921785577
GPR[SSUN]-1659921785577
-534884160
GPR[ESUN]-1659921785910
GPR[SSUN]-1659921785910
GPR[ESUN]-1659921785910
GPR[SSUN]-1659921785910
GPR[ESUN]-1659921785910
GPR[SSUN]-1659921785910
GPR[ESUN]-1659921785910
GPR[SSUN]-1659921785910
GPR[ESUN]-1659921785910
GPR[SSUN]-1659921785910
GPR[ESUN]-1659921785910
GPR[SSUN]-1659921785910
GPR[ESUN]-1659921785910
GPR[SSUN]-1659921785910
GPR[ESUN]-1659921785910
GPR[SSUN]-1659921785910
GPR[ESUN]-1659921785910
GPR[SSUN]-1659921785910
-711686510
GPR[ESUN]-1659921786134
GPR[SSUN]-1659921786134
-1696950979
GPR[SPVATF]-1659921786351
GPR[EPVATF]-1659921786721
GPR[SPS]-1659921786721
[613565] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:298.
GPR[EPS]-1659921787247
GPR[SPVATF]-1659921787247
GPR[EPVATF]-1659921787530
GPR[SPS]-1659921787530
[614345] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:298.
GPR[EPS]-1659921788027
GPR[ESUN]-1659921788027
GPR[SSUN]-1659921788027
-1696950979
GPR[ESUN]-1659921788248
GPR[SSUN]-1659921788248
-1696950979
GPR[SPVATF]-1659921788463
GPR[EPVATF]-1659921788756
GPR[SPS]-1659921788756
[615415] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class SemanticReverseAbstractInterpreter extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter {
    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> EQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderEquality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> NE = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderInequality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> SHEQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderShallowEquality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> SHNE = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderShallowInequality(p.typeB);
        }
    };

    private final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> INEQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            return new com.google.javascript.rhino.jstype.JSType.TypePair(getRestrictedWithoutUndefined(p.typeA), getRestrictedWithoutUndefined(p.typeB));
        }
    };

    public SemanticReverseAbstractInterpreter(com.google.javascript.jscomp.CodingConvention convention, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        super(convention, typeRegistry);
    }

    @java.lang.Override
    public com.google.javascript.jscomp.type.FlowScope getPreciserScopeKnowingConditionOutcome(com.google.javascript.rhino.Node condition, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        int operatorToken = condition.getType();
        switch (operatorToken) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.Node left;
                com.google.javascript.rhino.Node right;
                if (operatorToken == com.google.javascript.rhino.Token.CASE) {
                    left = condition.getParent().getFirstChild();
                    right = condition.getFirstChild();
                } else {
                    left = condition.getFirstChild();
                    right = condition.getLastChild();
                }
                com.google.javascript.rhino.Node typeOfNode = null;
                com.google.javascript.rhino.Node stringNode = null;
                if (left.isTypeOf() && right.isString()) {
                    typeOfNode = left;
                    stringNode = right;
                } else if (right.isTypeOf() && left.isString()) {
                    typeOfNode = right;
                    stringNode = left;
                }
                if ((typeOfNode != null) && (stringNode != null)) {
                    com.google.javascript.rhino.Node operandNode = typeOfNode.getFirstChild();
                    com.google.javascript.rhino.jstype.JSType operandType = getTypeIfRefinable(operandNode, blindScope);
                    if (operandType != null) {
                        boolean resultEqualsValue = ((operatorToken == com.google.javascript.rhino.Token.EQ) || (operatorToken == com.google.javascript.rhino.Token.SHEQ)) || (operatorToken == com.google.javascript.rhino.Token.CASE);
                        if (!outcome) {
                            resultEqualsValue = !resultEqualsValue;
                        }
                        return caseTypeOf(operandNode, operandType, stringNode.getString(), resultEqualsValue, blindScope);
                    }
                }
        }
        switch (operatorToken) {
            case com.google.javascript.rhino.Token.AND :
                if (outcome) {
                    return caseAndOrNotShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, true);
                } else {
                    return caseAndOrMaybeShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, true);
                }
            case com.google.javascript.rhino.Token.OR :
                if (!outcome) {
                    return caseAndOrNotShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, false);
                } else {
                    return caseAndOrMaybeShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, false);
                }
            case com.google.javascript.rhino.Token.EQ :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);
                }
            case com.google.javascript.rhino.Token.NE :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);
                }
            case com.google.javascript.rhino.Token.SHEQ :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                }
            case com.google.javascript.rhino.Token.SHNE :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                }
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.GETPROP :
                return caseNameOrGetProp(condition, blindScope, outcome);
            case com.google.javascript.rhino.Token.ASSIGN :
                return firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild(), firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild().getNext(), blindScope, outcome), outcome);
            case com.google.javascript.rhino.Token.NOT :
                return firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild(), blindScope, !outcome);
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GT :
                if (outcome) {
                    return caseEquality(condition, blindScope, INEQ);
                }
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return caseInstanceOf(condition.getFirstChild(), condition.getLastChild(), blindScope, outcome);
            case com.google.javascript.rhino.Token.IN :
                if (outcome && condition.getFirstChild().isString()) {
                    return caseIn(condition.getLastChild(), condition.getFirstChild().getString(), blindScope);
                }
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.Node left = condition.getParent().getFirstChild();
                com.google.javascript.rhino.Node right = condition.getFirstChild();
                if (outcome) {
                    return caseEquality(left, right, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                } else {
                    return caseEquality(left, right, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                }
        }
        return nextPreciserScopeKnowingConditionOutcome(condition, blindScope, outcome);
    }

    private com.google.javascript.jscomp.type.FlowScope caseEquality(com.google.javascript.rhino.Node condition, com.google.javascript.jscomp.type.FlowScope blindScope, com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> merging) {
        return caseEquality(condition.getFirstChild(), condition.getLastChild(), blindScope, merging);
    }

    private com.google.javascript.jscomp.type.FlowScope caseEquality(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> merging) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        boolean leftIsRefineable;
        if (leftType != null) {
            leftIsRefineable = true;
        } else {
            leftIsRefineable = false;
            leftType = left.getJSType();
        }
        com.google.javascript.rhino.jstype.JSType rightType = getTypeIfRefinable(right, blindScope);
        boolean rightIsRefineable;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(231).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(231).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(231).collectInput("merging",merging);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(231).collectInput("right",right);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(231).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(231).collectInput("leftType",leftType);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(231).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(231).collectInput("rightType",rightType);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(231).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(231).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(231).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.this.INEQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.this.INEQ);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(231).collectInput("left",left);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(231).collectInput("blindScope",blindScope);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(231).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(231).collectInput("rightType != null",rightType != null);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(231).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(231).collectionEnds();
        }
        if (runtimeAngelicValue) if (rightType != null) {
            rightIsRefineable = true;
        } else {
            rightIsRefineable = false;
            rightType = right.getJSType();
        }
        com.google.javascript.rhino.jstype.JSType.TypePair merged = merging.apply(new com.google.javascript.rhino.jstype.JSType.TypePair(leftType, rightType));
        if ((merged != null) && ((leftIsRefineable && (merged.typeA != null)) || (rightIsRefineable && (merged.typeB != null)))) {
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            if (leftIsRefineable && (merged.typeA != null)) {
                declareNameInScope(informed, left, merged.typeA);
            }
            if (rightIsRefineable && (merged.typeB != null)) {
                declareNameInScope(informed, right, merged.typeB);
            }
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseAndOrNotShortCircuiting(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean condition) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        boolean leftIsRefineable;
        if (leftType != null) {
            leftIsRefineable = true;
        } else {
            leftIsRefineable = false;
            leftType = left.getJSType();
            blindScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, condition);
        }
        leftType = (leftType == null) ? null : leftType.getRestrictedTypeGivenToBooleanOutcome(condition);
        if (leftType == null) {
            return firstPreciserScopeKnowingConditionOutcome(right, blindScope, condition);
        }
        com.google.javascript.rhino.jstype.JSType rightType = getTypeIfRefinable(right, blindScope);
        boolean rightIsRefineable;
        if (rightType != null) {
            rightIsRefineable = true;
        } else {
            rightIsRefineable = false;
            rightType = right.getJSType();
            blindScope = firstPreciserScopeKnowingConditionOutcome(right, blindScope, condition);
        }
        if (condition) {
            rightType = (rightType == null) ? null : rightType.getRestrictedTypeGivenToBooleanOutcome(condition);
            if (((leftType != null) && leftIsRefineable) || ((rightType != null) && rightIsRefineable)) {
                com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
                if (leftIsRefineable && (leftType != null)) {
                    declareNameInScope(informed, left, leftType);
                }
                if (rightIsRefineable && (rightType != null)) {
                    declareNameInScope(informed, right, rightType);
                }
                return informed;
            }
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseAndOrMaybeShortCircuiting(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean condition) {
        com.google.javascript.jscomp.type.FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, !condition);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> leftVar = leftScope.findUniqueRefinedSlot(blindScope);
        if (leftVar == null) {
            return blindScope;
        }
        com.google.javascript.jscomp.type.FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, condition);
        rightScope = firstPreciserScopeKnowingConditionOutcome(right, rightScope, !condition);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> rightVar = rightScope.findUniqueRefinedSlot(blindScope);
        if ((rightVar == null) || (!leftVar.getName().equals(rightVar.getName()))) {
            return blindScope;
        }
        com.google.javascript.rhino.jstype.JSType type = leftVar.getType().getLeastSupertype(rightVar.getType());
        com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
        informed.inferSlotType(leftVar.getName(), type);
        return informed;
    }

    private com.google.javascript.jscomp.type.FlowScope caseNameOrGetProp(com.google.javascript.rhino.Node name, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        com.google.javascript.rhino.jstype.JSType type = getTypeIfRefinable(name, blindScope);
        if (type != null) {
            com.google.javascript.rhino.jstype.JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome(outcome);
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            declareNameInScope(informed, name, restrictedType);
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseTypeOf(com.google.javascript.rhino.Node node, com.google.javascript.rhino.jstype.JSType type, java.lang.String value, boolean resultEqualsValue, com.google.javascript.jscomp.type.FlowScope blindScope) {
        com.google.javascript.rhino.jstype.JSType restrictedType = getRestrictedByTypeOfResult(type, value, resultEqualsValue);
        if (restrictedType == null) {
            return blindScope;
        }
        com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
        declareNameInScope(informed, node, restrictedType);
        return informed;
    }

    private com.google.javascript.jscomp.type.FlowScope caseInstanceOf(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        if (leftType == null) {
            return blindScope;
        }
        com.google.javascript.rhino.jstype.JSType rightType = right.getJSType();
        com.google.javascript.rhino.jstype.ObjectType targetType = typeRegistry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        if ((rightType != null) && rightType.isFunctionType()) {
            targetType = rightType.toMaybeFunctionType();
        }
        com.google.javascript.rhino.jstype.Visitor<com.google.javascript.rhino.jstype.JSType> visitor;
        if (outcome) {
            visitor = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.RestrictByTrueInstanceOfResultVisitor(targetType);
        } else {
            visitor = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.RestrictByFalseInstanceOfResultVisitor(targetType);
        }
        com.google.javascript.rhino.jstype.JSType restrictedLeftType = leftType.visit(visitor);
        if ((restrictedLeftType != null) && (!restrictedLeftType.equals(leftType))) {
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            declareNameInScope(informed, left, restrictedLeftType);
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseIn(com.google.javascript.rhino.Node object, java.lang.String propertyName, com.google.javascript.jscomp.type.FlowScope blindScope) {
        com.google.javascript.rhino.jstype.JSType jsType = object.getJSType();
        jsType = this.getRestrictedWithoutNull(jsType);
        jsType = this.getRestrictedWithoutUndefined(jsType);
        boolean hasProperty = false;
        com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(jsType);
        if (objectType != null) {
            hasProperty = objectType.hasProperty(propertyName);
        }
        if (!hasProperty) {
            java.lang.String qualifiedName = object.getQualifiedName();
            if (qualifiedName != null) {
                java.lang.String propertyQualifiedName = (qualifiedName + ".") + propertyName;
                if (blindScope.getSlot(propertyQualifiedName) == null) {
                    com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
                    com.google.javascript.rhino.jstype.JSType unknownType = typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
                    informed.inferQualifiedSlot(object, propertyQualifiedName, unknownType, unknownType);
                    return informed;
                }
            }
        }
        return blindScope;
    }

    private class RestrictByTrueInstanceOfResultVisitor extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.RestrictByTrueTypeOfResultVisitor {
        private final com.google.javascript.rhino.jstype.ObjectType target;

        RestrictByTrueInstanceOfResultVisitor(com.google.javascript.rhino.jstype.ObjectType target) {
            this.target = target;
        }

        @java.lang.Override
        protected com.google.javascript.rhino.jstype.JSType caseTopType(com.google.javascript.rhino.jstype.JSType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnknownType() {
            com.google.javascript.rhino.jstype.FunctionType funcTarget = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(target);
            if ((funcTarget != null) && funcTarget.hasInstanceType()) {
                return funcTarget.getInstanceType();
            }
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseObjectType(com.google.javascript.rhino.jstype.ObjectType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnionType(com.google.javascript.rhino.jstype.UnionType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseFunctionType(com.google.javascript.rhino.jstype.FunctionType type) {
            return caseObjectType(type);
        }

        private com.google.javascript.rhino.jstype.JSType applyCommonRestriction(com.google.javascript.rhino.jstype.JSType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                return type.getGreatestSubtype(funcTarget.getInstanceType());
            }
            return null;
        }
    }

    private class RestrictByFalseInstanceOfResultVisitor extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.RestrictByFalseTypeOfResultVisitor {
        private final com.google.javascript.rhino.jstype.ObjectType target;

        RestrictByFalseInstanceOfResultVisitor(com.google.javascript.rhino.jstype.ObjectType target) {
            this.target = target;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseObjectType(com.google.javascript.rhino.jstype.ObjectType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                if (type.isSubtype(funcTarget.getInstanceType())) {
                    return null;
                }
                return type;
            }
            return null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnionType(com.google.javascript.rhino.jstype.UnionType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                return type.getRestrictedUnion(funcTarget.getInstanceType());
            }
            return null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseFunctionType(com.google.javascript.rhino.jstype.FunctionType type) {
            return caseObjectType(type);
        }
    }
}
[615415] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659921789097
GPR[EPVATF]-1659921789378
GPR[SPS]-1659921789378
[616181] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:287.
GPR[EPS]-1659921789863
GPR[ESUN]-1659921789863
GPR[SSUN]-1659921789863
-1696950979
GPR[ESUN]-1659921790084
GPR[SSUN]-1659921790084
-1696950979
GPR[SPVATF]-1659921790322
GPR[EPVATF]-1659921790600
GPR[SPS]-1659921790600
[617257] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class SemanticReverseAbstractInterpreter extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter {
    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> EQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderEquality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> NE = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderInequality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> SHEQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderShallowEquality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> SHNE = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderShallowInequality(p.typeB);
        }
    };

    private final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> INEQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            return new com.google.javascript.rhino.jstype.JSType.TypePair(getRestrictedWithoutUndefined(p.typeA), getRestrictedWithoutUndefined(p.typeB));
        }
    };

    public SemanticReverseAbstractInterpreter(com.google.javascript.jscomp.CodingConvention convention, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        super(convention, typeRegistry);
    }

    @java.lang.Override
    public com.google.javascript.jscomp.type.FlowScope getPreciserScopeKnowingConditionOutcome(com.google.javascript.rhino.Node condition, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        int operatorToken = condition.getType();
        switch (operatorToken) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.Node left;
                com.google.javascript.rhino.Node right;
                if (operatorToken == com.google.javascript.rhino.Token.CASE) {
                    left = condition.getParent().getFirstChild();
                    right = condition.getFirstChild();
                } else {
                    left = condition.getFirstChild();
                    right = condition.getLastChild();
                }
                com.google.javascript.rhino.Node typeOfNode = null;
                com.google.javascript.rhino.Node stringNode = null;
                if (left.isTypeOf() && right.isString()) {
                    typeOfNode = left;
                    stringNode = right;
                } else if (right.isTypeOf() && left.isString()) {
                    typeOfNode = right;
                    stringNode = left;
                }
                if ((typeOfNode != null) && (stringNode != null)) {
                    com.google.javascript.rhino.Node operandNode = typeOfNode.getFirstChild();
                    com.google.javascript.rhino.jstype.JSType operandType = getTypeIfRefinable(operandNode, blindScope);
                    if (operandType != null) {
                        boolean resultEqualsValue = ((operatorToken == com.google.javascript.rhino.Token.EQ) || (operatorToken == com.google.javascript.rhino.Token.SHEQ)) || (operatorToken == com.google.javascript.rhino.Token.CASE);
                        if (!outcome) {
                            resultEqualsValue = !resultEqualsValue;
                        }
                        return caseTypeOf(operandNode, operandType, stringNode.getString(), resultEqualsValue, blindScope);
                    }
                }
        }
        switch (operatorToken) {
            case com.google.javascript.rhino.Token.AND :
                if (outcome) {
                    return caseAndOrNotShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, true);
                } else {
                    return caseAndOrMaybeShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, true);
                }
            case com.google.javascript.rhino.Token.OR :
                if (!outcome) {
                    return caseAndOrNotShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, false);
                } else {
                    return caseAndOrMaybeShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, false);
                }
            case com.google.javascript.rhino.Token.EQ :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);
                }
            case com.google.javascript.rhino.Token.NE :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);
                }
            case com.google.javascript.rhino.Token.SHEQ :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                }
            case com.google.javascript.rhino.Token.SHNE :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                }
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.GETPROP :
                return caseNameOrGetProp(condition, blindScope, outcome);
            case com.google.javascript.rhino.Token.ASSIGN :
                return firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild(), firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild().getNext(), blindScope, outcome), outcome);
            case com.google.javascript.rhino.Token.NOT :
                return firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild(), blindScope, !outcome);
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GT :
                if (outcome) {
                    return caseEquality(condition, blindScope, INEQ);
                }
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return caseInstanceOf(condition.getFirstChild(), condition.getLastChild(), blindScope, outcome);
            case com.google.javascript.rhino.Token.IN :
                if (outcome && condition.getFirstChild().isString()) {
                    return caseIn(condition.getLastChild(), condition.getFirstChild().getString(), blindScope);
                }
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.Node left = condition.getParent().getFirstChild();
                com.google.javascript.rhino.Node right = condition.getFirstChild();
                if (outcome) {
                    return caseEquality(left, right, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                } else {
                    return caseEquality(left, right, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                }
        }
        return nextPreciserScopeKnowingConditionOutcome(condition, blindScope, outcome);
    }

    private com.google.javascript.jscomp.type.FlowScope caseEquality(com.google.javascript.rhino.Node condition, com.google.javascript.jscomp.type.FlowScope blindScope, com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> merging) {
        return caseEquality(condition.getFirstChild(), condition.getLastChild(), blindScope, merging);
    }

    private com.google.javascript.jscomp.type.FlowScope caseEquality(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> merging) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        boolean leftIsRefineable;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(233).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("leftType != null",leftType != null);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("merging",merging);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.this.INEQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.this.INEQ);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("left",left);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("blindScope",blindScope);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("right",right);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("leftType",leftType);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectionEnds();
        }
        if (runtimeAngelicValue) if (leftType != null) {
            leftIsRefineable = true;
        } else {
            leftIsRefineable = false;
            leftType = left.getJSType();
        }
        com.google.javascript.rhino.jstype.JSType rightType = getTypeIfRefinable(right, blindScope);
        boolean rightIsRefineable;
        if (rightType != null) {
            rightIsRefineable = true;
        } else {
            rightIsRefineable = false;
            rightType = right.getJSType();
        }
        com.google.javascript.rhino.jstype.JSType.TypePair merged = merging.apply(new com.google.javascript.rhino.jstype.JSType.TypePair(leftType, rightType));
        if ((merged != null) && ((leftIsRefineable && (merged.typeA != null)) || (rightIsRefineable && (merged.typeB != null)))) {
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            if (leftIsRefineable && (merged.typeA != null)) {
                declareNameInScope(informed, left, merged.typeA);
            }
            if (rightIsRefineable && (merged.typeB != null)) {
                declareNameInScope(informed, right, merged.typeB);
            }
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseAndOrNotShortCircuiting(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean condition) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        boolean leftIsRefineable;
        if (leftType != null) {
            leftIsRefineable = true;
        } else {
            leftIsRefineable = false;
            leftType = left.getJSType();
            blindScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, condition);
        }
        leftType = (leftType == null) ? null : leftType.getRestrictedTypeGivenToBooleanOutcome(condition);
        if (leftType == null) {
            return firstPreciserScopeKnowingConditionOutcome(right, blindScope, condition);
        }
        com.google.javascript.rhino.jstype.JSType rightType = getTypeIfRefinable(right, blindScope);
        boolean rightIsRefineable;
        if (rightType != null) {
            rightIsRefineable = true;
        } else {
            rightIsRefineable = false;
            rightType = right.getJSType();
            blindScope = firstPreciserScopeKnowingConditionOutcome(right, blindScope, condition);
        }
        if (condition) {
            rightType = (rightType == null) ? null : rightType.getRestrictedTypeGivenToBooleanOutcome(condition);
            if (((leftType != null) && leftIsRefineable) || ((rightType != null) && rightIsRefineable)) {
                com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
                if (leftIsRefineable && (leftType != null)) {
                    declareNameInScope(informed, left, leftType);
                }
                if (rightIsRefineable && (rightType != null)) {
                    declareNameInScope(informed, right, rightType);
                }
                return informed;
            }
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseAndOrMaybeShortCircuiting(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean condition) {
        com.google.javascript.jscomp.type.FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, !condition);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> leftVar = leftScope.findUniqueRefinedSlot(blindScope);
        if (leftVar == null) {
            return blindScope;
        }
        com.google.javascript.jscomp.type.FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, condition);
        rightScope = firstPreciserScopeKnowingConditionOutcome(right, rightScope, !condition);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> rightVar = rightScope.findUniqueRefinedSlot(blindScope);
        if ((rightVar == null) || (!leftVar.getName().equals(rightVar.getName()))) {
            return blindScope;
        }
        com.google.javascript.rhino.jstype.JSType type = leftVar.getType().getLeastSupertype(rightVar.getType());
        com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
        informed.inferSlotType(leftVar.getName(), type);
        return informed;
    }

    private com.google.javascript.jscomp.type.FlowScope caseNameOrGetProp(com.google.javascript.rhino.Node name, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        com.google.javascript.rhino.jstype.JSType type = getTypeIfRefinable(name, blindScope);
        if (type != null) {
            com.google.javascript.rhino.jstype.JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome(outcome);
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            declareNameInScope(informed, name, restrictedType);
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseTypeOf(com.google.javascript.rhino.Node node, com.google.javascript.rhino.jstype.JSType type, java.lang.String value, boolean resultEqualsValue, com.google.javascript.jscomp.type.FlowScope blindScope) {
        com.google.javascript.rhino.jstype.JSType restrictedType = getRestrictedByTypeOfResult(type, value, resultEqualsValue);
        if (restrictedType == null) {
            return blindScope;
        }
        com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
        declareNameInScope(informed, node, restrictedType);
        return informed;
    }

    private com.google.javascript.jscomp.type.FlowScope caseInstanceOf(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        if (leftType == null) {
            return blindScope;
        }
        com.google.javascript.rhino.jstype.JSType rightType = right.getJSType();
        com.google.javascript.rhino.jstype.ObjectType targetType = typeRegistry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        if ((rightType != null) && rightType.isFunctionType()) {
            targetType = rightType.toMaybeFunctionType();
        }
        com.google.javascript.rhino.jstype.Visitor<com.google.javascript.rhino.jstype.JSType> visitor;
        if (outcome) {
            visitor = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.RestrictByTrueInstanceOfResultVisitor(targetType);
        } else {
            visitor = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.RestrictByFalseInstanceOfResultVisitor(targetType);
        }
        com.google.javascript.rhino.jstype.JSType restrictedLeftType = leftType.visit(visitor);
        if ((restrictedLeftType != null) && (!restrictedLeftType.equals(leftType))) {
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            declareNameInScope(informed, left, restrictedLeftType);
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseIn(com.google.javascript.rhino.Node object, java.lang.String propertyName, com.google.javascript.jscomp.type.FlowScope blindScope) {
        com.google.javascript.rhino.jstype.JSType jsType = object.getJSType();
        jsType = this.getRestrictedWithoutNull(jsType);
        jsType = this.getRestrictedWithoutUndefined(jsType);
        boolean hasProperty = false;
        com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(jsType);
        if (objectType != null) {
            hasProperty = objectType.hasProperty(propertyName);
        }
        if (!hasProperty) {
            java.lang.String qualifiedName = object.getQualifiedName();
            if (qualifiedName != null) {
                java.lang.String propertyQualifiedName = (qualifiedName + ".") + propertyName;
                if (blindScope.getSlot(propertyQualifiedName) == null) {
                    com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
                    com.google.javascript.rhino.jstype.JSType unknownType = typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
                    informed.inferQualifiedSlot(object, propertyQualifiedName, unknownType, unknownType);
                    return informed;
                }
            }
        }
        return blindScope;
    }

    private class RestrictByTrueInstanceOfResultVisitor extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.RestrictByTrueTypeOfResultVisitor {
        private final com.google.javascript.rhino.jstype.ObjectType target;

        RestrictByTrueInstanceOfResultVisitor(com.google.javascript.rhino.jstype.ObjectType target) {
            this.target = target;
        }

        @java.lang.Override
        protected com.google.javascript.rhino.jstype.JSType caseTopType(com.google.javascript.rhino.jstype.JSType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnknownType() {
            com.google.javascript.rhino.jstype.FunctionType funcTarget = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(target);
            if ((funcTarget != null) && funcTarget.hasInstanceType()) {
                return funcTarget.getInstanceType();
            }
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseObjectType(com.google.javascript.rhino.jstype.ObjectType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnionType(com.google.javascript.rhino.jstype.UnionType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseFunctionType(com.google.javascript.rhino.jstype.FunctionType type) {
            return caseObjectType(type);
        }

        private com.google.javascript.rhino.jstype.JSType applyCommonRestriction(com.google.javascript.rhino.jstype.JSType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                return type.getGreatestSubtype(funcTarget.getInstanceType());
            }
            return null;
        }
    }

    private class RestrictByFalseInstanceOfResultVisitor extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.RestrictByFalseTypeOfResultVisitor {
        private final com.google.javascript.rhino.jstype.ObjectType target;

        RestrictByFalseInstanceOfResultVisitor(com.google.javascript.rhino.jstype.ObjectType target) {
            this.target = target;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseObjectType(com.google.javascript.rhino.jstype.ObjectType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                if (type.isSubtype(funcTarget.getInstanceType())) {
                    return null;
                }
                return type;
            }
            return null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnionType(com.google.javascript.rhino.jstype.UnionType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                return type.getRestrictedUnion(funcTarget.getInstanceType());
            }
            return null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseFunctionType(com.google.javascript.rhino.jstype.FunctionType type) {
            return caseObjectType(type);
        }
    }
}
[617257] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659921790939
GPR[EPVATF]-1659921791215
GPR[SPS]-1659921791215
[618019] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:277.
GPR[EPS]-1659921791702
GPR[ESUN]-1659921791702
GPR[SSUN]-1659921791702
-1696950979
GPR[ESUN]-1659921791924
GPR[SSUN]-1659921791924
-711686510
GPR[ESUN]-1659921792142
GPR[SSUN]-1659921792142
GPR[ESUN]-1659921792142
GPR[SSUN]-1659921792142
GPR[ESUN]-1659921792142
GPR[SSUN]-1659921792142
GPR[ESUN]-1659921792142
GPR[SSUN]-1659921792142
1537627151
GPR[ESUN]-1659921792337
GPR[SSUN]-1659921792337
GPR[ESUN]-1659921792337
GPR[SSUN]-1659921792337
-1345859678
GPR[ESUN]-1659921792575
GPR[SSUN]-1659921792575
-1696950979
GPR[ESUN]-1659921792798
GPR[SSUN]-1659921792798
GPR[ESUN]-1659921792798
GPR[SSUN]-1659921792798
160819208
GPR[ESUN]-1659921793026
GPR[SSUN]-1659921793026
160819208
GPR[SPVATF]-1659921793247
GPR[EPVATF]-1659921793554
GPR[SPS]-1659921793554
[999405] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659922173087
GPR[SSUN]-1659922173087
GPR[ESUN]-1659922173087
GPR[SSUN]-1659922173087
GPR[ESUN]-1659922173087
GPR[SSUN]-1659922173087
GPR[ESUN]-1659922173087
GPR[SSUN]-1659922173087
GPR[ESUN]-1659922173087
GPR[SSUN]-1659922173087
GPR[ESUN]-1659922173087
GPR[SSUN]-1659922173087
GPR[ESUN]-1659922173087
GPR[SSUN]-1659922173087
GPR[ESUN]-1659922173087
GPR[SSUN]-1659922173087
GPR[ESUN]-1659922173087
GPR[SSUN]-1659922173087
GPR[ESUN]-1659922173087
GPR[SSUN]-1659922173087
GPR[ESUN]-1659922173087
GPR[SSUN]-1659922173087
GPR[ESUN]-1659922173087
GPR[SSUN]-1659922173087
GPR[ESUN]-1659922173087
GPR[SSUN]-1659922173087
GPR[ESUN]-1659922173087
GPR[SSUN]-1659922173087
GPR[ESUN]-1659922173087
GPR[SSUN]-1659922173087
GPR[ESUN]-1659922173087
GPR[SSUN]-1659922173087
GPR[ESUN]-1659922173087
GPR[SSUN]-1659922173087
GPR[ESUN]-1659922173087
GPR[SSUN]-1659922173087
GPR[ESUN]-1659922173087
GPR[SSUN]-1659922173087
GPR[ESUN]-1659922173087
GPR[SSUN]-1659922173087
GPR[ESUN]-1659922173087
GPR[SSUN]-1659922173087
GPR[ESUN]-1659922173087
GPR[SSUN]-1659922173087
1965452846
GPR[SPVATF]-1659922173473
GPR[EPVATF]-1659922173618
GPR[SPS]-1659922173618
[1000400] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:210.
GPR[EPS]-1659922174082
GPR[ESUN]-1659922174082
GPR[SSUN]-1659922174082
160819208
GPR[ESUN]-1659922174310
GPR[SSUN]-1659922174310
1290590094
GPR[SPVATF]-1659922174533
GPR[EPVATF]-1659922174912
GPR[SPS]-1659922174912
[1001590] ERROR ConstraintModelBuilder - Unable to compile the change: 
class LinkedFlowScope implements com.google.javascript.jscomp.type.FlowScope {
    private final com.google.javascript.jscomp.LinkedFlowScope.FlatFlowScopeCache cache;

    private final com.google.javascript.jscomp.LinkedFlowScope parent;

    private int depth;

    static final int MAX_DEPTH = 250;

    private com.google.javascript.jscomp.LinkedFlowScope.FlatFlowScopeCache flattened;

    private boolean frozen = false;

    private com.google.javascript.jscomp.LinkedFlowScope.LinkedFlowSlot lastSlot;

    private LinkedFlowScope(com.google.javascript.jscomp.LinkedFlowScope.FlatFlowScopeCache cache, com.google.javascript.jscomp.LinkedFlowScope directParent) {
        this.cache = cache;
        if (directParent == null) {
            this.lastSlot = null;
            this.depth = 0;
            this.parent = cache.linkedEquivalent;
        } else {
            this.lastSlot = directParent.lastSlot;
            this.depth = directParent.depth + 1;
            this.parent = directParent;
        }
    }

    LinkedFlowScope(com.google.javascript.jscomp.LinkedFlowScope.FlatFlowScopeCache cache) {
        this(cache, null);
    }

    LinkedFlowScope(com.google.javascript.jscomp.LinkedFlowScope directParent) {
        this(directParent.cache, directParent);
    }

    private com.google.javascript.jscomp.Scope getFunctionScope() {
        return cache.functionScope;
    }

    private boolean flowsFromBottom() {
        return getFunctionScope().isBottom();
    }

    public static com.google.javascript.jscomp.LinkedFlowScope createEntryLattice(com.google.javascript.jscomp.Scope scope) {
        return new com.google.javascript.jscomp.LinkedFlowScope(new com.google.javascript.jscomp.LinkedFlowScope.FlatFlowScopeCache(scope));
    }

    @java.lang.Override
    public void inferSlotType(java.lang.String symbol, com.google.javascript.rhino.jstype.JSType type) {
        com.google.common.base.Preconditions.checkState(!frozen);
        lastSlot = new com.google.javascript.jscomp.LinkedFlowScope.LinkedFlowSlot(symbol, type, lastSlot);
        depth++;
        cache.dirtySymbols.add(symbol);
    }

    @java.lang.Override
    public void inferQualifiedSlot(com.google.javascript.rhino.Node node, java.lang.String symbol, com.google.javascript.rhino.jstype.JSType bottomType, com.google.javascript.rhino.jstype.JSType inferredType) {
        com.google.javascript.jscomp.Scope functionScope = getFunctionScope();
        if (functionScope.isLocal()) {
            if ((functionScope.getVar(symbol) == null) && (!functionScope.isBottom())) {
                functionScope.declare(symbol, node, bottomType, null);
            }
            inferSlotType(symbol, inferredType);
        }
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType getTypeOfThis() {
        return cache.functionScope.getTypeOfThis();
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getRootNode() {
        return getFunctionScope().getRootNode();
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getParentScope() {
        return getFunctionScope().getParentScope();
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getSlot(java.lang.String name) {
        if (cache.dirtySymbols.contains(name)) {
            for (com.google.javascript.jscomp.LinkedFlowScope.LinkedFlowSlot slot = lastSlot; slot != null; slot = slot.parent) {
                if (slot.getName().equals(name)) {
                    return slot;
                }
            }
        }
        return cache.getSlot(name);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getOwnSlot(java.lang.String name) {
        throw new java.lang.UnsupportedOperationException();
    }

    @java.lang.Override
    public com.google.javascript.jscomp.type.FlowScope createChildFlowScope() {
        frozen = true;
        if (depth > com.google.javascript.jscomp.LinkedFlowScope.MAX_DEPTH) {
            if (flattened == null) {
                flattened = new com.google.javascript.jscomp.LinkedFlowScope.FlatFlowScopeCache(this);
            }
            return new com.google.javascript.jscomp.LinkedFlowScope(flattened);
        }
        return new com.google.javascript.jscomp.LinkedFlowScope(this);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> findUniqueRefinedSlot(com.google.javascript.jscomp.type.FlowScope blindScope) {
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> result = null;
        for (com.google.javascript.jscomp.LinkedFlowScope currentScope = this; currentScope != blindScope; currentScope = currentScope.parent) {
            for (com.google.javascript.jscomp.LinkedFlowScope.LinkedFlowSlot currentSlot = currentScope.lastSlot; (currentSlot != null) && ((currentScope.parent == null) || (currentScope.parent.lastSlot != currentSlot)); currentSlot = currentSlot.parent) {
                if (result == null) {
                    result = currentSlot;
                } else if (!currentSlot.getName().equals(result.getName())) {
                    return null;
                }
            }
        }
        return result;
    }

    @java.lang.Override
    public void completeScope(com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> staticScope) {
        com.google.javascript.jscomp.Scope scope = ((com.google.javascript.jscomp.Scope) (staticScope));
        for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> it = scope.getVars(); it.hasNext();) {
            com.google.javascript.jscomp.Scope.Var var = it.next();
            if (var.isTypeInferred()) {
                com.google.javascript.rhino.jstype.JSType type = var.getType();
                if ((type == null) || type.isUnknownType()) {
                    com.google.javascript.rhino.jstype.JSType flowType = getSlot(var.getName()).getType();
                    var.setType(flowType);
                }
            }
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.LinkedFlowScope optimize() {
        com.google.javascript.jscomp.LinkedFlowScope current;
        for (current = this; (current.parent != null) && (current.lastSlot == current.parent.lastSlot); current = current.parent) {
        }
        return current;
    }

    static class FlowScopeJoinOp extends com.google.javascript.jscomp.JoinOp.BinaryJoinOp<com.google.javascript.jscomp.type.FlowScope> {
        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public com.google.javascript.jscomp.type.FlowScope apply(com.google.javascript.jscomp.type.FlowScope a, com.google.javascript.jscomp.type.FlowScope b) {
            com.google.javascript.jscomp.LinkedFlowScope linkedA = ((com.google.javascript.jscomp.LinkedFlowScope) (a));
            com.google.javascript.jscomp.LinkedFlowScope linkedB = ((com.google.javascript.jscomp.LinkedFlowScope) (b));
            linkedA.frozen = true;
            linkedB.frozen = true;
            if (linkedA.optimize() == linkedB.optimize()) {
                return linkedA.createChildFlowScope();
            }
            return new com.google.javascript.jscomp.LinkedFlowScope(new com.google.javascript.jscomp.LinkedFlowScope.FlatFlowScopeCache(linkedA, linkedB));
        }
    }

    @java.lang.Override
    public boolean equals(java.lang.Object other) {
        if (other instanceof com.google.javascript.jscomp.LinkedFlowScope) {
            com.google.javascript.jscomp.LinkedFlowScope that = ((com.google.javascript.jscomp.LinkedFlowScope) (other));
            if (this.optimize() == that.optimize()) {
                return true;
            }
            if (this.getFunctionScope() != that.getFunctionScope()) {
                return false;
            }
            if (cache == that.cache) {
                for (java.lang.String name : cache.dirtySymbols) {
                    if (diffSlots(getSlot(name), that.getSlot(name))) {
                        return false;
                    }
                }
                return true;
            }
            java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType>> myFlowSlots = allFlowSlots();
            java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType>> otherFlowSlots = that.allFlowSlots();
            for (com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slot : myFlowSlots.values()) {
                if (diffSlots(slot, otherFlowSlots.get(slot.getName()))) {
                    return false;
                }
                otherFlowSlots.remove(slot.getName());
            }
            for (com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slot : otherFlowSlots.values()) {
                if (diffSlots(slot, myFlowSlots.get(slot.getName()))) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }

    private boolean diffSlots(com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slotA, com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slotB) {
        boolean aIsNull = (slotA == null) || (slotA.getType() == null);
        boolean bIsNull = (slotB == null) || (slotB.getType() == null);
        if (aIsNull && bIsNull) {
            return false;
        } else if (aIsNull ^ bIsNull) {
            return true;
        }
        return slotA.getType().differsFrom(slotB.getType());
    }

    private java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType>> allFlowSlots() {
        java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType>> slots = com.google.common.collect.Maps.newHashMap();
        for (com.google.javascript.jscomp.LinkedFlowScope.LinkedFlowSlot slot = lastSlot; slot != null; slot = slot.parent) {
            if (!slots.containsKey(slot.getName())) {
                slots.put(slot.getName(), slot);
            }
        }
        for (java.util.Map.Entry<java.lang.String, com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType>> symbolEntry : cache.symbols.entrySet()) {
            if (!slots.containsKey(symbolEntry.getKey())) {
                slots.put(symbolEntry.getKey(), symbolEntry.getValue());
            }
        }
        return slots;
    }

    private static class LinkedFlowSlot extends com.google.javascript.rhino.jstype.SimpleSlot {
        final com.google.javascript.jscomp.LinkedFlowScope.LinkedFlowSlot parent;

        LinkedFlowSlot(java.lang.String name, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.LinkedFlowScope.LinkedFlowSlot parent) {
            super(name, type, true);
            this.parent = parent;
        }
    }

    private static class FlatFlowScopeCache {
        private final com.google.javascript.jscomp.Scope functionScope;

        private final com.google.javascript.jscomp.LinkedFlowScope linkedEquivalent;

        private java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType>> symbols = com.google.common.collect.Maps.newHashMap();

        final java.util.Set<java.lang.String> dirtySymbols = com.google.common.collect.Sets.newHashSet();

        FlatFlowScopeCache(com.google.javascript.jscomp.Scope functionScope) {
            this.functionScope = functionScope;
            symbols = com.google.common.collect.ImmutableMap.of();
            linkedEquivalent = null;
        }

        FlatFlowScopeCache(com.google.javascript.jscomp.LinkedFlowScope directParent) {
            com.google.javascript.jscomp.LinkedFlowScope.FlatFlowScopeCache cache = directParent.cache;
            functionScope = cache.functionScope;
            symbols = directParent.allFlowSlots();
            linkedEquivalent = directParent;
        }

        FlatFlowScopeCache(com.google.javascript.jscomp.LinkedFlowScope joinedScopeA, com.google.javascript.jscomp.LinkedFlowScope joinedScopeB) {
            linkedEquivalent = null;
            functionScope = (joinedScopeA.flowsFromBottom()) ? joinedScopeB.getFunctionScope() : joinedScopeA.getFunctionScope();
            java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType>> slotsA = joinedScopeA.allFlowSlots();
            java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType>> slotsB = joinedScopeB.allFlowSlots();
            symbols = slotsA;
            java.util.Set<java.lang.String> symbolNames = com.google.common.collect.Sets.newHashSet(symbols.keySet());
            symbolNames.addAll(slotsB.keySet());
            for (java.lang.String name : symbolNames) {
                com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slotA = slotsA.get(name);
                com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slotB = slotsB.get(name);
                com.google.javascript.rhino.jstype.JSType joinedType = null;
                if ((slotB == null) || (slotB.getType() == null)) {
                    com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> fnSlot = joinedScopeB.getFunctionScope().getSlot(name);
                    com.google.javascript.rhino.jstype.JSType fnSlotType = (fnSlot == null) ? null : fnSlot.getType();
                    if (fnSlotType == null) {
                    } else {
                        joinedType = slotA.getType().getLeastSupertype(fnSlotType);
                    }
                } else if ((slotA == null) || (slotA.getType() == null)) {
                    com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> fnSlot = joinedScopeA.getFunctionScope().getSlot(name);
                    com.google.javascript.rhino.jstype.JSType fnSlotType = (fnSlot == null) ? null : fnSlot.getType();
                    if (fnSlotType == null) {
                        symbols.put(name, slotB);
                    } else {
                        joinedType = slotB.getType().getLeastSupertype(fnSlotType);
                    }
                } else {
                    joinedType = slotA.getType().getLeastSupertype(slotB.getType());
                }
                if (joinedType != null) {
                    symbols.put(name, new com.google.javascript.rhino.jstype.SimpleSlot(name, joinedType, true));
                }
            }
        }

        public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getSlot(java.lang.String name) {
            if (symbols.containsKey(name)) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(237).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("name",name);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.LinkedFlowScope.MAX_DEPTH",com.google.javascript.jscomp.LinkedFlowScope.MAX_DEPTH);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return symbols.get(name);

            } else {
                return functionScope.getSlot(name);
            }
        }
    }
}
[1001590] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659922175272
GPR[SSUN]-1659922175272
-534884160
GPR[ESUN]-1659922175612
GPR[SSUN]-1659922175612
-534884160
GPR[SPVATF]-1659922175937
GPR[EPVATF]-1659922176109
GPR[SPS]-1659922176109
[1003118] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:2105.
GPR[EPS]-1659922176800
GPR[ESUN]-1659922176800
GPR[SSUN]-1659922176800
-534884160
GPR[SPVATF]-1659922177133
GPR[EPVATF]-1659922177298
GPR[SPS]-1659922177298
[1004287] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:2104.
GPR[EPS]-1659922177969
GPR[ESUN]-1659922177969
GPR[SSUN]-1659922177969
-534884160
GPR[SPVATF]-1659922178296
GPR[EPVATF]-1659922178457
GPR[SPS]-1659922178457
[1005454] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:2103.
GPR[EPS]-1659922179136
GPR[ESUN]-1659922179136
GPR[SSUN]-1659922179136
-600752576
GPR[ESUN]-1659922179332
GPR[SSUN]-1659922179332
GPR[ESUN]-1659922179332
GPR[SSUN]-1659922179332
GPR[ESUN]-1659922179332
GPR[SSUN]-1659922179332
GPR[ESUN]-1659922179332
GPR[SSUN]-1659922179332
1537627151
GPR[ESUN]-1659922179533
GPR[SSUN]-1659922179533
-1345859678
GPR[ESUN]-1659922179773
GPR[SSUN]-1659922179773
-1345859678
GPR[SPVATF]-1659922180014
GPR[EPVATF]-1659922180304
GPR[SPS]-1659922180304
[1007174] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:715.
GPR[EPS]-1659922180856
GPR[SPVATF]-1659922180856
GPR[EPVATF]-1659922181145
GPR[SPS]-1659922181145
[1008029] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:715.
GPR[EPS]-1659922181711
GPR[ESUN]-1659922181711
GPR[SSUN]-1659922181711
-1345859678
GPR[SPVATF]-1659922181954
GPR[EPVATF]-1659922182244
GPR[SPS]-1659922182244
[1009116] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:714.
GPR[EPS]-1659922182798
GPR[ESUN]-1659922182798
GPR[SSUN]-1659922182798
-1345859678
GPR[SPVATF]-1659922183039
GPR[EPVATF]-1659922183330
GPR[SPS]-1659922183330
[1010215] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:713.
GPR[EPS]-1659922183897
GPR[ESUN]-1659922183897
GPR[SSUN]-1659922183897
-1345859678
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
GPR[ESUN]-1659922184140
GPR[SSUN]-1659922184140
1537627151
GPR[ESUN]-1659922184340
GPR[SSUN]-1659922184340
1537627151
GPR[SPVATF]-1659922184538
GPR[EPVATF]-1659922184679
GPR[SPS]-1659922184679
[1011399] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:207.
GPR[EPS]-1659922185081
GPR[ESUN]-1659922185081
GPR[SSUN]-1659922185081
1537627151
GPR[SPVATF]-1659922185283
GPR[EPVATF]-1659922185425
GPR[SPS]-1659922185425
[1012142] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:206.
GPR[EPS]-1659922185824
GPR[SPVATF]-1659922185825
GPR[EPVATF]-1659922185964
GPR[SPS]-1659922185964
[1012702] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:206.
GPR[EPS]-1659922186384
GPR[ESUN]-1659922186384
GPR[SSUN]-1659922186384
-1345859678
GPR[ESUN]-1659922186628
GPR[SSUN]-1659922186628
-1345859678
GPR[SPVATF]-1659922186867
GPR[EPVATF]-1659922187009
GPR[SPS]-1659922187010
[1013822] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:764.
GPR[EPS]-1659922187504
GPR[ESUN]-1659922187504
GPR[SSUN]-1659922187504
-1345859678
GPR[ESUN]-1659922187747
GPR[SSUN]-1659922187747
-1345859678
GPR[SPVATF]-1659922187987
GPR[EPVATF]-1659922188126
GPR[SPS]-1659922188126
[1014958] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:762.
GPR[EPS]-1659922188640
GPR[ESUN]-1659922188640
GPR[SSUN]-1659922188640
-1345859678
GPR[SPVATF]-1659922188884
GPR[EPVATF]-1659922189025
GPR[SPS]-1659922189025
[1015840] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:761.
GPR[EPS]-1659922189522
GPR[ESUN]-1659922189522
GPR[SSUN]-1659922189522
-1345859678
GPR[SPVATF]-1659922189763
GPR[EPVATF]-1659922189903
GPR[SPS]-1659922189903
[1016717] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:759.
GPR[EPS]-1659922190399
GPR[ESUN]-1659922190399
GPR[SSUN]-1659922190399
-1345859678
GPR[ESUN]-1659922190656
GPR[SSUN]-1659922190656
-1345859678
GPR[SPVATF]-1659922190896
GPR[EPVATF]-1659922191037
GPR[SPS]-1659922191037
[1017858] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:755.
GPR[EPS]-1659922191540
GPR[ESUN]-1659922191540
GPR[SSUN]-1659922191540
-1345859678
GPR[SPVATF]-1659922191781
GPR[EPVATF]-1659922191922
GPR[SPS]-1659922191922
[1018740] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:754.
GPR[EPS]-1659922192422
GPR[ESUN]-1659922192423
GPR[SSUN]-1659922192423
-1345859678
GPR[SPVATF]-1659922192678
GPR[EPVATF]-1659922192825
GPR[SPS]-1659922192825
[1019641] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:752.
GPR[EPS]-1659922193323
GPR[ESUN]-1659922193323
GPR[SSUN]-1659922193323
-1345859678
GPR[SPVATF]-1659922193568
GPR[EPVATF]-1659922193709
GPR[SPS]-1659922193709
[1020530] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:749.
GPR[EPS]-1659922194212
GPR[SPVATF]-1659922194212
GPR[EPVATF]-1659922194349
GPR[SPS]-1659922194349
[1021186] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:749.
GPR[EPS]-1659922194868
GPR[ESUN]-1659922194868
GPR[SSUN]-1659922194868
-1345859678
GPR[SPVATF]-1659922195112
GPR[EPVATF]-1659922195256
GPR[SPS]-1659922195256
[1022072] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:748.
GPR[EPS]-1659922195754
GPR[ESUN]-1659922195754
GPR[SSUN]-1659922195754
-1345859678
GPR[ESUN]-1659922195998
GPR[SSUN]-1659922195998
-1345859678
GPR[ESUN]-1659922196240
GPR[SSUN]-1659922196240
-1345859678
GPR[ESUN]-1659922196483
GPR[SSUN]-1659922196483
-1345859678
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
GPR[ESUN]-1659922196726
GPR[SSUN]-1659922196726
1207178244
GPR[ESUN]-1659922196932
GPR[SSUN]-1659922196932
-615894762
GPR[SPVATF]-1659922197145
GPR[EPVATF]-1659922197409
GPR[SPS]-1659922197409
[1024171] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CombinedCompilerPass$CallbackWrapper:143.
GPR[EPS]-1659922197853
GPR[ESUN]-1659922197853
GPR[SSUN]-1659922197854
-615894762
GPR[SPVATF]-1659922198055
GPR[EPVATF]-1659922198321
GPR[SPS]-1659922198321
GPR[EPS]-1659922207322
GPR[ESUN]-1659922207322
GPR[SSUN]-1659922207322
GPR[ESUN]-1659922207322
GPR[SSUN]-1659922207322
GPR[ESUN]-1659922207322
GPR[SSUN]-1659922207322
GPR[ESUN]-1659922207322
GPR[SSUN]-1659922207322
-132053243
GPR[ESUN]-1659922207516
GPR[SSUN]-1659922207516
-132053243
GPR[SPVATF]-1659922207704
GPR[EPVATF]-1659922207721
[1034039] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659922207721
GPR[SSUN]-1659922207722
-1117079791
GPR[SPVATF]-1659922207918
GPR[EPVATF]-1659922208219
GPR[SPS]-1659922208219
[1034977] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:482.
GPR[EPS]-1659922208659
GPR[ESUN]-1659922208659
GPR[SSUN]-1659922208660
-1345859678
GPR[ESUN]-1659922208907
GPR[SSUN]-1659922208907
1537627151
GPR[ESUN]-1659922209111
GPR[SSUN]-1659922209111
-1345859678
GPR[ESUN]-1659922209352
GPR[SSUN]-1659922209352
GPR[ESUN]-1659922209352
GPR[SSUN]-1659922209352
GPR[ESUN]-1659922209352
GPR[SSUN]-1659922209352
GPR[ESUN]-1659922209352
GPR[SSUN]-1659922209352
GPR[ESUN]-1659922209352
GPR[SSUN]-1659922209352
GPR[ESUN]-1659922209352
GPR[SSUN]-1659922209352
GPR[ESUN]-1659922209352
GPR[SSUN]-1659922209352
GPR[ESUN]-1659922209352
GPR[SSUN]-1659922209352
GPR[ESUN]-1659922209352
GPR[SSUN]-1659922209352
GPR[ESUN]-1659922209352
GPR[SSUN]-1659922209352
GPR[ESUN]-1659922209352
GPR[SSUN]-1659922209352
GPR[ESUN]-1659922209352
GPR[SSUN]-1659922209352
GPR[ESUN]-1659922209352
GPR[SSUN]-1659922209352
GPR[ESUN]-1659922209352
GPR[SSUN]-1659922209352
GPR[ESUN]-1659922209352
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
GPR[ESUN]-1659922209353
GPR[SSUN]-1659922209353
-1117079791
GPR[ESUN]-1659922209546
GPR[SSUN]-1659922209546
-1117079791
GPR[SPVATF]-1659922209738
GPR[EPVATF]-1659922210040
GPR[SPS]-1659922210040
[1036813] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:481.
GPR[EPS]-1659922210495
GPR[SPVATF]-1659922210496
GPR[EPVATF]-1659922210790
GPR[SPS]-1659922210790
[1037549] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:481.
GPR[EPS]-1659922211232
GPR[ESUN]-1659922211232
GPR[SSUN]-1659922211232
-1117079791
GPR[SPVATF]-1659922211428
GPR[EPVATF]-1659922211727
GPR[SPS]-1659922211727
[1038484] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:480.
GPR[EPS]-1659922212166
GPR[ESUN]-1659922212166
GPR[SSUN]-1659922212166
-1117079791
GPR[SPVATF]-1659922212361
GPR[EPVATF]-1659922212656
GPR[SPS]-1659922212656
[1039410] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:479.
GPR[EPS]-1659922213092
GPR[ESUN]-1659922213092
GPR[SSUN]-1659922213092
-1117079791
GPR[ESUN]-1659922213304
GPR[SSUN]-1659922213304
-1117079791
GPR[SPVATF]-1659922213497
GPR[EPVATF]-1659922213805
GPR[SPS]-1659922213805
[1040566] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:128.
GPR[EPS]-1659922214248
GPR[ESUN]-1659922214248
GPR[SSUN]-1659922214248
2346
GPR[ESUN]-1659922214430
GPR[SSUN]-1659922214430
2433571
GPR[ESUN]-1659922214658
GPR[SSUN]-1659922214658
-711686510
GPR[ESUN]-1659922214880
GPR[SSUN]-1659922214880
-1345859678
GPR[ESUN]-1659922215123
GPR[SSUN]-1659922215123
-1345859678
GPR[SPVATF]-1659922215365
GPR[EPVATF]-1659922215698
GPR[SPS]-1659922215698
[1042604] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:395.
GPR[EPS]-1659922216286
GPR[ESUN]-1659922216286
GPR[SSUN]-1659922216286
1187751237
GPR[ESUN]-1659922216556
GPR[SSUN]-1659922216556
GPR[ESUN]-1659922216556
GPR[SSUN]-1659922216556
GPR[ESUN]-1659922216556
GPR[SSUN]-1659922216556
GPR[ESUN]-1659922216556
GPR[SSUN]-1659922216556
GPR[ESUN]-1659922216556
GPR[SSUN]-1659922216556
GPR[ESUN]-1659922216556
GPR[SSUN]-1659922216556
GPR[ESUN]-1659922216556
GPR[SSUN]-1659922216556
-1797850673
GPR[SPVATF]-1659922216798
GPR[EPVATF]-1659922217066
GPR[SPS]-1659922217066
[1043918] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:771.
GPR[EPS]-1659922217600
GPR[ESUN]-1659922217601
GPR[SSUN]-1659922217601
-1797850673
GPR[SPVATF]-1659922217846
GPR[EPVATF]-1659922218114
GPR[SPS]-1659922218114
[1044984] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:770.
GPR[EPS]-1659922218666
GPR[ESUN]-1659922218666
GPR[SSUN]-1659922218666
160819208
GPR[ESUN]-1659922218892
GPR[SSUN]-1659922218892
GPR[ESUN]-1659922218892
GPR[SSUN]-1659922218892
GPR[ESUN]-1659922218892
GPR[SSUN]-1659922218892
GPR[ESUN]-1659922218892
GPR[SSUN]-1659922218892
-534884160
GPR[SPVATF]-1659922219218
GPR[EPVATF]-1659922219383
GPR[SPS]-1659922219383
[1046379] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1989.
GPR[EPS]-1659922220061
GPR[ESUN]-1659922220061
GPR[SSUN]-1659922220061
-534884160
GPR[SPVATF]-1659922220406
GPR[EPVATF]-1659922220581
GPR[SPS]-1659922220581
[1047594] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Compiler extends com.google.javascript.jscomp.AbstractCompiler {
    static final java.lang.String SINGLETON_MODULE_NAME = "[singleton]";

    static final com.google.javascript.jscomp.DiagnosticType MODULE_DEPENDENCY_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_MODULE_DEPENDENCY_ERROR", "Bad dependency: {0} -> {1}. " + "Modules must be listed in dependency order.");

    static final com.google.javascript.jscomp.DiagnosticType MISSING_ENTRY_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_MISSING_ENTRY_ERROR", "required entry point \"{0}\" never provided");

    private static final java.lang.String CONFIG_RESOURCE = "com.google.javascript.jscomp.parsing.ParserConfig";

    com.google.javascript.jscomp.CompilerOptions options = null;

    private com.google.javascript.jscomp.PassConfig passes = null;

    private java.util.List<com.google.javascript.jscomp.CompilerInput> externs;

    private java.util.List<com.google.javascript.jscomp.JSModule> modules;

    private com.google.javascript.jscomp.JSModuleGraph moduleGraph;

    private java.util.List<com.google.javascript.jscomp.CompilerInput> inputs;

    private com.google.javascript.jscomp.ErrorManager errorManager;

    private com.google.javascript.jscomp.WarningsGuard warningsGuard;

    private final java.util.Map<java.lang.String, com.google.javascript.rhino.Node> injectedLibraries = com.google.common.collect.Maps.newLinkedHashMap();

    com.google.javascript.rhino.Node externsRoot;

    com.google.javascript.rhino.Node jsRoot;

    com.google.javascript.rhino.Node externAndJsRoot;

    private java.util.Map<com.google.javascript.rhino.InputId, com.google.javascript.jscomp.CompilerInput> inputsById;

    private com.google.javascript.jscomp.SourceMap sourceMap;

    private java.lang.String externExports = null;

    private int uniqueNameId = 0;

    private boolean useThreads = true;

    private boolean hasRegExpGlobalReferences = true;

    private com.google.javascript.jscomp.FunctionInformationMap functionInformationMap;

    private final java.lang.StringBuilder debugLog = new java.lang.StringBuilder();

    com.google.javascript.jscomp.CodingConvention defaultCodingConvention = new com.google.javascript.jscomp.ClosureCodingConvention();

    private com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private com.google.javascript.jscomp.parsing.Config parserConfig = null;

    private com.google.javascript.jscomp.type.ReverseAbstractInterpreter abstractInterpreter;

    private com.google.javascript.jscomp.TypeValidator typeValidator;

    public com.google.javascript.jscomp.PerformanceTracker tracker;

    private final com.google.javascript.rhino.ErrorReporter oldErrorReporter = com.google.javascript.jscomp.RhinoErrorReporter.forOldRhino(this);

    private final com.google.javascript.rhino.head.ErrorReporter defaultErrorReporter = com.google.javascript.jscomp.RhinoErrorReporter.forNewRhino(this);

    public static final com.google.javascript.jscomp.DiagnosticType OPTIMIZE_LOOP_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_OPTIMIZE_LOOP_ERROR", "Exceeded max number of optimization iterations: {0}");

    public static final com.google.javascript.jscomp.DiagnosticType MOTION_ITERATIONS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_OPTIMIZE_LOOP_ERROR", "Exceeded max number of code motion iterations: {0}");

    private static final long COMPILER_STACK_SIZE = 1048576L;

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger("com.google.javascript.jscomp");

    private final java.io.PrintStream outStream;

    private com.google.javascript.jscomp.GlobalVarReferenceMap globalRefMap = null;

    private volatile double progress = 0.0;

    public Compiler() {
        this(((java.io.PrintStream) (null)));
    }

    public Compiler(java.io.PrintStream stream) {
        addChangeHandler(recentChange);
        outStream = stream;
    }

    public Compiler(com.google.javascript.jscomp.ErrorManager errorManager) {
        this();
        setErrorManager(errorManager);
    }

    public void setErrorManager(com.google.javascript.jscomp.ErrorManager errorManager) {
        com.google.common.base.Preconditions.checkNotNull(errorManager, "the error manager cannot be null");
        this.errorManager = errorManager;
    }

    private com.google.javascript.jscomp.MessageFormatter createMessageFormatter() {
        boolean colorize = options.shouldColorizeErrorOutput();
        return options.errorFormat.toFormatter(this, colorize);
    }

    public void initOptions(com.google.javascript.jscomp.CompilerOptions options) {
        this.options = options;
        if (errorManager == null) {
            if (outStream == null) {
                setErrorManager(new com.google.javascript.jscomp.LoggerErrorManager(createMessageFormatter(), com.google.javascript.jscomp.Compiler.logger));
            } else {
                com.google.javascript.jscomp.PrintStreamErrorManager printer = new com.google.javascript.jscomp.PrintStreamErrorManager(createMessageFormatter(), outStream);
                printer.setSummaryDetailLevel(options.summaryDetailLevel);
                setErrorManager(printer);
            }
        }
        if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES)) {
            options.checkTypes = true;
        } else if (options.disables(com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES)) {
            options.checkTypes = false;
        } else if (!options.checkTypes) {
            options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroup.forType(com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR), com.google.javascript.jscomp.CheckLevel.OFF);
        }
        if (options.checkGlobalThisLevel.isOn() && (!options.disables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS))) {
            options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);
        }
        if (options.getLanguageIn() == com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT) {
            options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT, com.google.javascript.jscomp.CheckLevel.ERROR);
        }
        java.util.List<com.google.javascript.jscomp.WarningsGuard> guards = com.google.common.collect.Lists.newArrayList();
        guards.add(new com.google.javascript.jscomp.SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));
        guards.add(options.getWarningsGuard());
        com.google.javascript.jscomp.ComposeWarningsGuard composedGuards = new com.google.javascript.jscomp.ComposeWarningsGuard(guards);
        if ((!options.checkSymbols) && (!composedGuards.enables(com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES))) {
            composedGuards.addGuard(new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES, com.google.javascript.jscomp.CheckLevel.OFF));
        }
        this.warningsGuard = composedGuards;
    }

    public void init(com.google.javascript.jscomp.JSSourceFile[] externs, com.google.javascript.jscomp.JSSourceFile[] inputs, com.google.javascript.jscomp.CompilerOptions options) {
        init(com.google.common.collect.Lists.<com.google.javascript.jscomp.JSSourceFile>newArrayList(externs), com.google.common.collect.Lists.<com.google.javascript.jscomp.JSSourceFile>newArrayList(inputs), options);
    }

    public <T1 extends com.google.javascript.jscomp.SourceFile, T2 extends com.google.javascript.jscomp.SourceFile> void init(java.util.List<T1> externs, java.util.List<T2> inputs, com.google.javascript.jscomp.CompilerOptions options) {
        com.google.javascript.jscomp.JSModule module = new com.google.javascript.jscomp.JSModule(com.google.javascript.jscomp.Compiler.SINGLETON_MODULE_NAME);
        for (com.google.javascript.jscomp.SourceFile input : inputs) {
            module.add(input);
        }
        initModules(externs, com.google.common.collect.Lists.newArrayList(module), options);
    }

    public void init(com.google.javascript.jscomp.JSSourceFile[] externs, com.google.javascript.jscomp.JSModule[] modules, com.google.javascript.jscomp.CompilerOptions options) {
        initModules(com.google.common.collect.Lists.<com.google.javascript.jscomp.SourceFile>newArrayList(externs), com.google.common.collect.Lists.<com.google.javascript.jscomp.JSModule>newArrayList(modules), options);
    }

    public <T extends com.google.javascript.jscomp.SourceFile> void initModules(java.util.List<T> externs, java.util.List<com.google.javascript.jscomp.JSModule> modules, com.google.javascript.jscomp.CompilerOptions options) {
        initOptions(options);
        checkFirstModule(modules);
        com.google.javascript.jscomp.Compiler.fillEmptyModules(modules);
        this.externs = makeCompilerInput(externs, true);
        this.modules = modules;
        if (modules.size() > 1) {
            try {
                this.moduleGraph = new com.google.javascript.jscomp.JSModuleGraph(modules);
            } catch (com.google.javascript.jscomp.JSModuleGraph.ModuleDependenceException e) {
                report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.MODULE_DEPENDENCY_ERROR, e.getModule().getName(), e.getDependentModule().getName()));
                return;
            }
        } else {
            this.moduleGraph = null;
        }
        this.inputs = com.google.javascript.jscomp.Compiler.getAllInputsFromModules(modules);
        initBasedOnOptions();
        initInputsByIdMap();
    }

    private void initBasedOnOptions() {
        if (options.sourceMapOutputPath != null) {
            sourceMap = options.sourceMapFormat.getInstance();
            sourceMap.setPrefixMappings(options.sourceMapLocationMappings);
        }
    }

    private <T extends com.google.javascript.jscomp.SourceFile> java.util.List<com.google.javascript.jscomp.CompilerInput> makeCompilerInput(java.util.List<T> files, boolean isExtern) {
        java.util.List<com.google.javascript.jscomp.CompilerInput> inputs = com.google.common.collect.Lists.newArrayList();
        for (T file : files) {
            inputs.add(new com.google.javascript.jscomp.CompilerInput(file, isExtern));
        }
        return inputs;
    }

    private static final com.google.javascript.jscomp.DiagnosticType EMPTY_MODULE_LIST_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_EMPTY_MODULE_LIST_ERROR", "At least one module must be provided");

    private static final com.google.javascript.jscomp.DiagnosticType EMPTY_ROOT_MODULE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_EMPTY_ROOT_MODULE_ERROR", "Root module '{0}' must contain at least one source code input");

    private void checkFirstModule(java.util.List<com.google.javascript.jscomp.JSModule> modules) {
        if (modules.isEmpty()) {
            report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.EMPTY_MODULE_LIST_ERROR));
        } else if (modules.get(0).getInputs().isEmpty() && (modules.size() > 1)) {
            report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.EMPTY_ROOT_MODULE_ERROR, modules.get(0).getName()));
        }
    }

    static java.lang.String createFillFileName(java.lang.String moduleName) {
        return ("[" + moduleName) + "]";
    }

    private static void fillEmptyModules(java.util.List<com.google.javascript.jscomp.JSModule> modules) {
        for (com.google.javascript.jscomp.JSModule module : modules) {
            if (module.getInputs().isEmpty()) {
                module.add(com.google.javascript.jscomp.SourceFile.fromCode(com.google.javascript.jscomp.Compiler.createFillFileName(module.getName()), ""));
            }
        }
    }

    public void rebuildInputsFromModules() {
        inputs = com.google.javascript.jscomp.Compiler.getAllInputsFromModules(modules);
        initInputsByIdMap();
    }

    private static java.util.List<com.google.javascript.jscomp.CompilerInput> getAllInputsFromModules(java.util.List<com.google.javascript.jscomp.JSModule> modules) {
        java.util.List<com.google.javascript.jscomp.CompilerInput> inputs = com.google.common.collect.Lists.newArrayList();
        java.util.Map<java.lang.String, com.google.javascript.jscomp.JSModule> inputMap = com.google.common.collect.Maps.newHashMap();
        for (com.google.javascript.jscomp.JSModule module : modules) {
            for (com.google.javascript.jscomp.CompilerInput input : module.getInputs()) {
                java.lang.String inputName = input.getName();
                inputs.add(input);
                inputMap.put(inputName, module);
            }
        }
        return inputs;
    }

    static final com.google.javascript.jscomp.DiagnosticType DUPLICATE_INPUT = com.google.javascript.jscomp.DiagnosticType.error("JSC_DUPLICATE_INPUT", "Duplicate input: {0}");

    static final com.google.javascript.jscomp.DiagnosticType DUPLICATE_EXTERN_INPUT = com.google.javascript.jscomp.DiagnosticType.error("JSC_DUPLICATE_EXTERN_INPUT", "Duplicate extern input: {0}");

    void initInputsByIdMap() {
        inputsById = new java.util.HashMap<com.google.javascript.rhino.InputId, com.google.javascript.jscomp.CompilerInput>();
        for (com.google.javascript.jscomp.CompilerInput input : externs) {
            com.google.javascript.rhino.InputId id = input.getInputId();
            com.google.javascript.jscomp.CompilerInput previous = putCompilerInput(id, input);
            if (previous != null) {
                report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.DUPLICATE_EXTERN_INPUT, input.getName()));
            }
        }
        for (com.google.javascript.jscomp.CompilerInput input : inputs) {
            com.google.javascript.rhino.InputId id = input.getInputId();
            com.google.javascript.jscomp.CompilerInput previous = putCompilerInput(id, input);
            if (previous != null) {
                report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT, input.getName()));
            }
        }
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.SourceFile extern, com.google.javascript.jscomp.SourceFile input, com.google.javascript.jscomp.CompilerOptions options) {
        return compile(com.google.common.collect.Lists.newArrayList(extern), com.google.common.collect.Lists.newArrayList(input), options);
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.SourceFile extern, com.google.javascript.jscomp.JSSourceFile[] input, com.google.javascript.jscomp.CompilerOptions options) {
        return compile(com.google.common.collect.Lists.newArrayList(extern), com.google.common.collect.Lists.newArrayList(input), options);
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.JSSourceFile extern, com.google.javascript.jscomp.JSModule[] modules, com.google.javascript.jscomp.CompilerOptions options) {
        return compileModules(com.google.common.collect.Lists.newArrayList(extern), com.google.common.collect.Lists.newArrayList(modules), options);
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.JSSourceFile[] externs, com.google.javascript.jscomp.JSSourceFile[] inputs, com.google.javascript.jscomp.CompilerOptions options) {
        return compile(com.google.common.collect.Lists.<com.google.javascript.jscomp.SourceFile>newArrayList(externs), com.google.common.collect.Lists.<com.google.javascript.jscomp.SourceFile>newArrayList(inputs), options);
    }

    public <T1 extends com.google.javascript.jscomp.SourceFile, T2 extends com.google.javascript.jscomp.SourceFile> com.google.javascript.jscomp.Result compile(java.util.List<T1> externs, java.util.List<T2> inputs, com.google.javascript.jscomp.CompilerOptions options) {
        com.google.common.base.Preconditions.checkState(jsRoot == null);
        try {
            init(externs, inputs, options);
            if (hasErrors()) {
                return getResult();
            }
            return compile();
        } finally {
            com.google.javascript.jscomp.Tracer t = newTracer("generateReport");
            errorManager.generateReport();
            stopTracer(t, "generateReport");
        }
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.JSSourceFile[] externs, com.google.javascript.jscomp.JSModule[] modules, com.google.javascript.jscomp.CompilerOptions options) {
        return compileModules(com.google.common.collect.Lists.<com.google.javascript.jscomp.SourceFile>newArrayList(externs), com.google.common.collect.Lists.<com.google.javascript.jscomp.JSModule>newArrayList(modules), options);
    }

    public <T extends com.google.javascript.jscomp.SourceFile> com.google.javascript.jscomp.Result compileModules(java.util.List<T> externs, java.util.List<com.google.javascript.jscomp.JSModule> modules, com.google.javascript.jscomp.CompilerOptions options) {
        com.google.common.base.Preconditions.checkState(jsRoot == null);
        try {
            initModules(externs, modules, options);
            if (hasErrors()) {
                return getResult();
            }
            return compile();
        } finally {
            com.google.javascript.jscomp.Tracer t = newTracer("generateReport");
            errorManager.generateReport();
            stopTracer(t, "generateReport");
        }
    }

    private com.google.javascript.jscomp.Result compile() {
        return runInCompilerThread(new java.util.concurrent.Callable<com.google.javascript.jscomp.Result>() {
            @java.lang.Override
            public com.google.javascript.jscomp.Result call() throws java.lang.Exception {
                compileInternal();
                return getResult();
            }
        });
    }

    public void disableThreads() {
        useThreads = false;
    }

    private <T> T runInCompilerThread(final java.util.concurrent.Callable<T> callable) {
        return com.google.javascript.jscomp.Compiler.runCallable(callable, useThreads, options.tracer.isOn());
    }

    static <T> T runCallableWithLargeStack(final java.util.concurrent.Callable<T> callable) {
        return com.google.javascript.jscomp.Compiler.runCallable(callable, true, false);
    }

    @java.lang.SuppressWarnings("unchecked")
    static <T> T runCallable(final java.util.concurrent.Callable<T> callable, boolean useLargeStackThread, boolean trace) {
        final boolean dumpTraceReport = trace;
        final java.lang.Object[] result = new java.lang.Object[1];
        final java.lang.Throwable[] exception = new java.lang.Throwable[1];
        java.lang.Runnable runnable = new java.lang.Runnable() {
            @java.lang.Override
            public void run() {
                try {
                    if (dumpTraceReport) {
                        com.google.javascript.jscomp.Tracer.initCurrentThreadTrace();
                    }
                    result[0] = callable.call();
                } catch (java.lang.Throwable e) {
                    exception[0] = e;
                } finally {
                    if (dumpTraceReport) {
                        com.google.javascript.jscomp.Tracer.logAndClearCurrentThreadTrace();
                    }
                }
            }
        };
        if (useLargeStackThread) {
            java.lang.Thread th = new java.lang.Thread(null, runnable, "jscompiler", com.google.javascript.jscomp.Compiler.COMPILER_STACK_SIZE);
            th.start();
            while (true) {
                try {
                    th.join();
                    break;
                } catch (java.lang.InterruptedException ignore) {
                }
            } 
        } else {
            runnable.run();
        }
        if (exception[0] != null) {
            throw new java.lang.RuntimeException(exception[0]);
        }
        return ((T) (result[0]));
    }

    private void compileInternal() {
        setProgress(0.0);
        parse();
        setProgress(0.15);
        if (hasErrors()) {
            return;
        }
        if (!precheck()) {
            return;
        }
        if (options.nameAnonymousFunctionsOnly) {
            check();
            return;
        }
        if (!options.skipAllPasses) {
            check();
            if (hasErrors()) {
                return;
            }
            if (options.isExternExportsEnabled() || (options.externExportsPath != null)) {
                externExports();
            }
            if (!options.ideMode) {
                optimize();
            }
        }
        if (options.recordFunctionInformation) {
            recordFunctionInformation();
        }
        if (options.devMode == com.google.javascript.jscomp.CompilerOptions.DevMode.START_AND_END) {
            runSanityCheck();
        }
        setProgress(1.0);
    }

    public void parse() {
        parseInputs();
    }

    com.google.javascript.jscomp.PassConfig getPassConfig() {
        if (passes == null) {
            passes = createPassConfigInternal();
        }
        return passes;
    }

    com.google.javascript.jscomp.PassConfig createPassConfigInternal() {
        return new com.google.javascript.jscomp.DefaultPassConfig(options);
    }

    public void setPassConfig(com.google.javascript.jscomp.PassConfig passes) {
        com.google.common.base.Preconditions.checkNotNull(passes);
        if (this.passes != null) {
            throw new java.lang.IllegalStateException("this.passes has already been assigned");
        }
        this.passes = passes;
    }

    boolean precheck() {
        return true;
    }

    public void check() {
        runCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.BEFORE_CHECKS);
        com.google.javascript.jscomp.PhaseOptimizer phaseOptimizer = new com.google.javascript.jscomp.PhaseOptimizer(this, tracker, new com.google.javascript.jscomp.PhaseOptimizer.ProgressRange(getProgress(), 1.0));
        if (options.devMode == com.google.javascript.jscomp.CompilerOptions.DevMode.EVERY_PASS) {
            phaseOptimizer.setSanityCheck(sanityCheck);
        }
        phaseOptimizer.consume(getPassConfig().getChecks());
        phaseOptimizer.process(externsRoot, jsRoot);
        if (hasErrors()) {
            return;
        }
        if (options.nameAnonymousFunctionsOnly) {
            return;
        }
        if (options.removeTryCatchFinally) {
            removeTryCatchFinally();
        }
        if ((((options.getTweakProcessing().shouldStrip() || (!options.stripTypes.isEmpty())) || (!options.stripNameSuffixes.isEmpty())) || (!options.stripTypePrefixes.isEmpty())) || (!options.stripNamePrefixes.isEmpty())) {
            stripCode(options.stripTypes, options.stripNameSuffixes, options.stripTypePrefixes, options.stripNamePrefixes);
        }
        runCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);
    }

    private void externExports() {
        com.google.javascript.jscomp.Compiler.logger.fine("Creating extern file for exports");
        startPass("externExports");
        com.google.javascript.jscomp.ExternExportsPass pass = new com.google.javascript.jscomp.ExternExportsPass(this);
        process(pass);
        externExports = pass.getGeneratedExterns();
        endPass();
    }

    @java.lang.Override
    void process(com.google.javascript.jscomp.CompilerPass p) {
        p.process(externsRoot, jsRoot);
    }

    private final com.google.javascript.jscomp.PassFactory sanityCheck = new com.google.javascript.jscomp.PassFactory("sanityCheck", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.SanityCheck(compiler);
        }
    };

    private void maybeSanityCheck() {
        if (options.devMode == com.google.javascript.jscomp.CompilerOptions.DevMode.EVERY_PASS) {
            runSanityCheck();
        }
    }

    private void runSanityCheck() {
        sanityCheck.create(this).process(externsRoot, jsRoot);
    }

    void removeTryCatchFinally() {
        com.google.javascript.jscomp.Compiler.logger.fine("Remove try/catch/finally");
        startPass("removeTryCatchFinally");
        com.google.javascript.jscomp.RemoveTryCatch r = new com.google.javascript.jscomp.RemoveTryCatch(this);
        process(r);
        endPass();
    }

    void stripCode(java.util.Set<java.lang.String> stripTypes, java.util.Set<java.lang.String> stripNameSuffixes, java.util.Set<java.lang.String> stripTypePrefixes, java.util.Set<java.lang.String> stripNamePrefixes) {
        com.google.javascript.jscomp.Compiler.logger.fine("Strip code");
        startPass("stripCode");
        com.google.javascript.jscomp.StripCode r = new com.google.javascript.jscomp.StripCode(this, stripTypes, stripNameSuffixes, stripTypePrefixes, stripNamePrefixes);
        if (options.getTweakProcessing().shouldStrip()) {
            r.enableTweakStripping();
        }
        process(r);
        endPass();
    }

    private void runCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime executionTime) {
        if (options.customPasses != null) {
            com.google.javascript.jscomp.Tracer t = newTracer("runCustomPasses");
            try {
                for (com.google.javascript.jscomp.CompilerPass p : options.customPasses.get(executionTime)) {
                    process(p);
                }
            } finally {
                stopTracer(t, "runCustomPasses");
            }
        }
    }

    private com.google.javascript.jscomp.Tracer currentTracer = null;

    private java.lang.String currentPassName = null;

    void startPass(java.lang.String passName) {
        com.google.common.base.Preconditions.checkState(currentTracer == null);
        currentPassName = passName;
        currentTracer = newTracer(passName);
    }

    void endPass() {
        com.google.common.base.Preconditions.checkState(currentTracer != null, "Tracer should not be null at the end of a pass.");
        stopTracer(currentTracer, currentPassName);
        java.lang.String passToCheck = currentPassName;
        currentPassName = null;
        currentTracer = null;
        maybeSanityCheck();
    }

    com.google.javascript.jscomp.Tracer newTracer(java.lang.String passName) {
        java.lang.String comment = passName + (recentChange.hasCodeChanged() ? " on recently changed AST" : "");
        if (options.tracer.isOn()) {
            tracker.recordPassStart(passName);
        }
        return new com.google.javascript.jscomp.Tracer("Compiler", comment);
    }

    void stopTracer(com.google.javascript.jscomp.Tracer t, java.lang.String passName) {
        long result = t.stop();
        if (options.tracer.isOn()) {
            tracker.recordPassStop(passName, result);
        }
    }

    public com.google.javascript.jscomp.Result getResult() {
        com.google.javascript.jscomp.PassConfig.State state = getPassConfig().getIntermediateState();
        return new com.google.javascript.jscomp.Result(getErrors(), getWarnings(), debugLog.toString(), state.variableMap, state.propertyMap, state.anonymousFunctionNameMap, state.stringMap, functionInformationMap, sourceMap, externExports, state.cssNames, state.idGeneratorMap);
    }

    public com.google.javascript.jscomp.JSError[] getMessages() {
        return getErrors();
    }

    public com.google.javascript.jscomp.JSError[] getErrors() {
        return errorManager.getErrors();
    }

    public com.google.javascript.jscomp.JSError[] getWarnings() {
        return errorManager.getWarnings();
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getRoot() {
        return externAndJsRoot;
    }

    private int nextUniqueNameId() {
        return uniqueNameId++;
    }

    @com.google.common.annotations.VisibleForTesting
    void resetUniqueNameId() {
        uniqueNameId = 0;
    }

    @java.lang.Override
    com.google.common.base.Supplier<java.lang.String> getUniqueNameIdSupplier() {
        final com.google.javascript.jscomp.Compiler self = this;
        return new com.google.common.base.Supplier<java.lang.String>() {
            @java.lang.Override
            public java.lang.String get() {
                return java.lang.String.valueOf(self.nextUniqueNameId());
            }
        };
    }

    @java.lang.Override
    boolean areNodesEqualForInlining(com.google.javascript.rhino.Node n1, com.google.javascript.rhino.Node n2) {
        if (options.ambiguateProperties || options.disambiguateProperties) {
            return n1.isEquivalentToTyped(n2);
        } else {
            return n1.isEquivalentTo(n2);
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.CompilerInput getInput(com.google.javascript.rhino.InputId id) {
        return inputsById.get(id);
    }

    protected void removeExternInput(com.google.javascript.rhino.InputId id) {
        com.google.javascript.jscomp.CompilerInput input = getInput(id);
        if (input == null) {
            return;
        }
        com.google.common.base.Preconditions.checkState(input.isExtern(), "Not an extern input: %s", input.getName());
        inputsById.remove(id);
        externs.remove(input);
        com.google.javascript.rhino.Node root = input.getAstRoot(this);
        if (root != null) {
            root.detachFromParent();
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.CompilerInput newExternInput(java.lang.String name) {
        com.google.javascript.jscomp.SourceAst ast = new com.google.javascript.jscomp.SyntheticAst(name);
        if (inputsById.containsKey(ast.getInputId())) {
            throw new java.lang.IllegalArgumentException("Conflicting externs name: " + name);
        }
        com.google.javascript.jscomp.CompilerInput input = new com.google.javascript.jscomp.CompilerInput(ast, true);
        putCompilerInput(input.getInputId(), input);
        externsRoot.addChildToFront(ast.getAstRoot(this));
        externs.add(0, input);
        return input;
    }

    private com.google.javascript.jscomp.CompilerInput putCompilerInput(com.google.javascript.rhino.InputId id, com.google.javascript.jscomp.CompilerInput input) {
        input.setCompiler(this);
        return inputsById.put(id, input);
    }

    void addIncrementalSourceAst(com.google.javascript.jscomp.JsAst ast) {
        com.google.javascript.rhino.InputId id = ast.getInputId();
        com.google.common.base.Preconditions.checkState(getInput(id) == null, "Duplicate input %s", id.getIdName());
        putCompilerInput(id, new com.google.javascript.jscomp.CompilerInput(ast));
    }

    boolean replaceIncrementalSourceAst(com.google.javascript.jscomp.JsAst ast) {
        com.google.javascript.jscomp.CompilerInput oldInput = getInput(ast.getInputId());
        com.google.common.base.Preconditions.checkNotNull(oldInput, "No input to replace: %s", ast.getInputId().getIdName());
        com.google.javascript.rhino.Node newRoot = ast.getAstRoot(this);
        if (newRoot == null) {
            return false;
        }
        com.google.javascript.rhino.Node oldRoot = oldInput.getAstRoot(this);
        if (oldRoot != null) {
            oldRoot.getParent().replaceChild(oldRoot, newRoot);
        } else {
            getRoot().getLastChild().addChildToBack(newRoot);
        }
        com.google.javascript.jscomp.CompilerInput newInput = new com.google.javascript.jscomp.CompilerInput(ast);
        putCompilerInput(ast.getInputId(), newInput);
        com.google.javascript.jscomp.JSModule module = oldInput.getModule();
        if (module != null) {
            module.addAfter(newInput, oldInput);
            module.remove(oldInput);
        }
        com.google.common.base.Preconditions.checkState(newInput.getInputId().equals(oldInput.getInputId()));
        com.google.javascript.rhino.InputId inputIdOnAst = newInput.getAstRoot(this).getInputId();
        com.google.common.base.Preconditions.checkState(newInput.getInputId().equals(inputIdOnAst));
        inputs.remove(oldInput);
        return true;
    }

    boolean addNewSourceAst(com.google.javascript.jscomp.JsAst ast) {
        com.google.javascript.jscomp.CompilerInput oldInput = getInput(ast.getInputId());
        if (oldInput != null) {
            throw new java.lang.IllegalStateException("Input already exists: " + ast.getInputId().getIdName());
        }
        com.google.javascript.rhino.Node newRoot = ast.getAstRoot(this);
        if (newRoot == null) {
            return false;
        }
        getRoot().getLastChild().addChildToBack(newRoot);
        com.google.javascript.jscomp.CompilerInput newInput = new com.google.javascript.jscomp.CompilerInput(ast);
        if ((moduleGraph == null) && (!modules.isEmpty())) {
            modules.get(0).add(newInput);
        }
        putCompilerInput(ast.getInputId(), newInput);
        return true;
    }

    @java.lang.Override
    com.google.javascript.jscomp.JSModuleGraph getModuleGraph() {
        return moduleGraph;
    }

    com.google.javascript.jscomp.JSModuleGraph getDegenerateModuleGraph() {
        return moduleGraph == null ? new com.google.javascript.jscomp.JSModuleGraph(modules) : moduleGraph;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSTypeRegistry getTypeRegistry() {
        if (typeRegistry == null) {
            typeRegistry = new com.google.javascript.rhino.jstype.JSTypeRegistry(oldErrorReporter, options.looseTypes);
        }
        return typeRegistry;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.MemoizedScopeCreator getTypedScopeCreator() {
        return getPassConfig().getTypedScopeCreator();
    }

    @java.lang.SuppressWarnings("unchecked")
    com.google.javascript.jscomp.DefaultPassConfig ensureDefaultPassConfig() {
        com.google.javascript.jscomp.PassConfig passes = getPassConfig().getBasePassConfig();
        com.google.common.base.Preconditions.checkState(passes instanceof com.google.javascript.jscomp.DefaultPassConfig, "PassConfigs must eventually delegate to the DefaultPassConfig");
        return ((com.google.javascript.jscomp.DefaultPassConfig) (passes));
    }

    public com.google.javascript.jscomp.SymbolTable buildKnownSymbolTable() {
        com.google.javascript.jscomp.SymbolTable symbolTable = new com.google.javascript.jscomp.SymbolTable(getTypeRegistry());
        com.google.javascript.jscomp.MemoizedScopeCreator typedScopeCreator = getTypedScopeCreator();
        if (typedScopeCreator != null) {
            symbolTable.addScopes(typedScopeCreator.getAllMemoizedScopes());
            symbolTable.addSymbolsFrom(typedScopeCreator);
        } else {
            symbolTable.findScopes(this, externsRoot, jsRoot);
        }
        com.google.javascript.jscomp.GlobalNamespace globalNamespace = ensureDefaultPassConfig().getGlobalNamespace();
        if (globalNamespace != null) {
            symbolTable.addSymbolsFrom(globalNamespace);
        }
        com.google.javascript.jscomp.ReferenceCollectingCallback refCollector = new com.google.javascript.jscomp.ReferenceCollectingCallback(this, com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR);
        com.google.javascript.jscomp.NodeTraversal.traverse(this, getRoot(), refCollector);
        symbolTable.addSymbolsFrom(refCollector);
        com.google.javascript.jscomp.PreprocessorSymbolTable preprocessorSymbolTable = ensureDefaultPassConfig().getPreprocessorSymbolTable();
        if (preprocessorSymbolTable != null) {
            symbolTable.addSymbolsFrom(preprocessorSymbolTable);
        }
        symbolTable.fillNamespaceReferences();
        symbolTable.fillPropertyScopes();
        symbolTable.fillThisReferences(this, externsRoot, jsRoot);
        symbolTable.fillPropertySymbols(this, externsRoot, jsRoot);
        symbolTable.fillJSDocInfo(this, externsRoot, jsRoot);
        return symbolTable;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Scope getTopScope() {
        return getPassConfig().getTopScope();
    }

    @java.lang.Override
    public com.google.javascript.jscomp.type.ReverseAbstractInterpreter getReverseAbstractInterpreter() {
        if (abstractInterpreter == null) {
            com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter interpreter = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter(getCodingConvention(), getTypeRegistry());
            if (options.closurePass) {
                interpreter = new com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter(getCodingConvention(), getTypeRegistry()).append(interpreter).getFirst();
            }
            abstractInterpreter = interpreter;
        }
        return abstractInterpreter;
    }

    @java.lang.Override
    com.google.javascript.jscomp.TypeValidator getTypeValidator() {
        if (typeValidator == null) {
            typeValidator = new com.google.javascript.jscomp.TypeValidator(this);
        }
        return typeValidator;
    }

    com.google.javascript.rhino.Node parseInputs() {
        boolean devMode = options.devMode != com.google.javascript.jscomp.CompilerOptions.DevMode.OFF;
        if (externsRoot != null) {
            externsRoot.detachChildren();
        }
        if (jsRoot != null) {
            jsRoot.detachChildren();
        }
        jsRoot = com.google.javascript.rhino.IR.block();
        jsRoot.setIsSyntheticBlock(true);
        externsRoot = com.google.javascript.rhino.IR.block();
        externsRoot.setIsSyntheticBlock(true);
        externAndJsRoot = com.google.javascript.rhino.IR.block(externsRoot, jsRoot);
        externAndJsRoot.setIsSyntheticBlock(true);
        if (options.tracer.isOn()) {
            tracker = new com.google.javascript.jscomp.PerformanceTracker(jsRoot, options.tracer);
            addChangeHandler(tracker.getCodeChangeHandler());
        }
        com.google.javascript.jscomp.Tracer tracer = newTracer("parseInputs");
        try {
            for (com.google.javascript.jscomp.CompilerInput input : externs) {
                com.google.javascript.rhino.Node n = input.getAstRoot(this);
                if (hasErrors()) {
                    return null;
                }
                externsRoot.addChildToBack(n);
            }
            if (options.transformAMDToCJSModules || options.processCommonJSModules) {
                processAMDAndCommonJSModules();
            }
            hoistExterns(externsRoot);
            boolean staleInputs = false;
            if (options.dependencyOptions.needsManagement()) {
                for (com.google.javascript.jscomp.CompilerInput input : inputs) {
                    for (java.lang.String provide : input.getProvides()) {
                        getTypeRegistry().forwardDeclareType(provide);
                    }
                }
                try {
                    inputs = (moduleGraph == null ? new com.google.javascript.jscomp.JSModuleGraph(modules) : moduleGraph).manageDependencies(options.dependencyOptions, inputs);
                    staleInputs = true;
                } catch (com.google.javascript.jscomp.deps.SortedDependencies.CircularDependencyException e) {
                    report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
                    if (hasErrors()) {
                        return null;
                    }
                } catch (com.google.javascript.jscomp.deps.SortedDependencies.MissingProvideException e) {
                    report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR, e.getMessage()));
                    if (hasErrors()) {
                        return null;
                    }
                }
            }
            hoistNoCompileFiles();
            if (staleInputs) {
                repartitionInputs();
            }
            for (com.google.javascript.jscomp.CompilerInput input : inputs) {
                com.google.javascript.rhino.Node n = input.getAstRoot(this);
                if (n == null) {
                    continue;
                }
                if (devMode) {
                    runSanityCheck();
                    if (hasErrors()) {
                        return null;
                    }
                }
                if ((options.sourceMapOutputPath != null) || (options.nameReferenceReportPath != null)) {
                    com.google.javascript.jscomp.SourceInformationAnnotator sia = new com.google.javascript.jscomp.SourceInformationAnnotator(input.getName(), options.devMode != com.google.javascript.jscomp.CompilerOptions.DevMode.OFF);
                    com.google.javascript.jscomp.NodeTraversal.traverse(this, n, sia);
                }
                jsRoot.addChildToBack(n);
            }
            if (hasErrors()) {
                return null;
            }
            return externAndJsRoot;
        } finally {
            stopTracer(tracer, "parseInputs");
        }
    }

    private void hoistExterns(com.google.javascript.rhino.Node externsRoot) {
        boolean staleInputs = false;
        for (com.google.javascript.jscomp.CompilerInput input : inputs) {
            if (options.dependencyOptions.needsManagement() && options.closurePass) {
                if ((!input.getProvides().isEmpty()) || (!input.getRequires().isEmpty())) {
                    continue;
                }
            }
            com.google.javascript.rhino.Node n = input.getAstRoot(this);
            if (n == null) {
                continue;
            }
            com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
            if ((info != null) && info.isExterns()) {
                externsRoot.addChildToBack(n);
                input.setIsExtern(true);
                input.getModule().remove(input);
                externs.add(input);
                staleInputs = true;
            }
        }
        if (staleInputs) {
            repartitionInputs();
        }
    }

    private void hoistNoCompileFiles() {
        boolean staleInputs = false;
        for (com.google.javascript.jscomp.CompilerInput input : inputs) {
            com.google.javascript.rhino.Node n = input.getAstRoot(this);
            if (n == null) {
                continue;
            }
            com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
            if ((info != null) && info.isNoCompile()) {
                input.getModule().remove(input);
                staleInputs = true;
            }
        }
        if (staleInputs) {
            repartitionInputs();
        }
    }

    private void repartitionInputs() {
        com.google.javascript.jscomp.Compiler.fillEmptyModules(modules);
        rebuildInputsFromModules();
    }

    void processAMDAndCommonJSModules() {
        java.util.Map<java.lang.String, com.google.javascript.jscomp.JSModule> modulesByName = com.google.common.collect.Maps.newLinkedHashMap();
        java.util.Map<com.google.javascript.jscomp.CompilerInput, com.google.javascript.jscomp.JSModule> modulesByInput = com.google.common.collect.Maps.newLinkedHashMap();
        for (com.google.javascript.jscomp.CompilerInput input : inputs) {
            input.setCompiler(this);
            com.google.javascript.rhino.Node root = input.getAstRoot(this);
            if (root == null) {
                continue;
            }
            if (options.transformAMDToCJSModules) {
                new com.google.javascript.jscomp.TransformAMDToCJSModule(this).process(null, root);
            }
            if (options.processCommonJSModules) {
                com.google.javascript.jscomp.ProcessCommonJSModules cjs = new com.google.javascript.jscomp.ProcessCommonJSModules(this, options.commonJSModulePathPrefix);
                cjs.process(null, root);
                com.google.javascript.jscomp.JSModule m = cjs.getModule();
                if (m != null) {
                    modulesByName.put(m.getName(), m);
                    modulesByInput.put(input, m);
                }
            }
        }
        if (options.processCommonJSModules) {
            java.util.List<com.google.javascript.jscomp.JSModule> modules = com.google.common.collect.Lists.newArrayList(modulesByName.values());
            if (!modules.isEmpty()) {
                this.modules = modules;
                this.moduleGraph = new com.google.javascript.jscomp.JSModuleGraph(this.modules);
            }
            for (com.google.javascript.jscomp.JSModule module : modules) {
                for (com.google.javascript.jscomp.CompilerInput input : module.getInputs()) {
                    for (java.lang.String require : input.getRequires()) {
                        com.google.javascript.jscomp.JSModule dependency = modulesByName.get(require);
                        if (dependency == null) {
                            report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR, require));
                        } else {
                            module.addDependency(dependency);
                        }
                    }
                }
            }
            try {
                modules = com.google.common.collect.Lists.newArrayList();
                for (com.google.javascript.jscomp.CompilerInput input : this.moduleGraph.manageDependencies(options.dependencyOptions, inputs)) {
                    modules.add(modulesByInput.get(input));
                }
                this.modules = modules;
                this.moduleGraph = new com.google.javascript.jscomp.JSModuleGraph(modules);
            } catch (java.lang.Exception e) {
                com.google.common.base.Throwables.propagate(e);
            }
        }
    }

    public com.google.javascript.rhino.Node parse(com.google.javascript.jscomp.SourceFile file) {
        initCompilerOptionsIfTesting();
        addToDebugLog("Parsing: " + file.getName());
        return new com.google.javascript.jscomp.JsAst(file).getAstRoot(this);
    }

    private int syntheticCodeId = 0;

    @java.lang.Override
    com.google.javascript.rhino.Node parseSyntheticCode(java.lang.String js) {
        com.google.javascript.jscomp.CompilerInput input = new com.google.javascript.jscomp.CompilerInput(com.google.javascript.jscomp.SourceFile.fromCode((" [synthetic:" + (++syntheticCodeId)) + "] ", js));
        putCompilerInput(input.getInputId(), input);
        return input.getAstRoot(this);
    }

    protected com.google.javascript.jscomp.CompilerOptions newCompilerOptions() {
        return new com.google.javascript.jscomp.CompilerOptions();
    }

    void initCompilerOptionsIfTesting() {
        if (options == null) {
            initOptions(newCompilerOptions());
        }
    }

    @java.lang.Override
    com.google.javascript.rhino.Node parseSyntheticCode(java.lang.String fileName, java.lang.String js) {
        initCompilerOptionsIfTesting();
        return parse(com.google.javascript.jscomp.SourceFile.fromCode(fileName, js));
    }

    @java.lang.Override
    com.google.javascript.rhino.Node parseTestCode(java.lang.String js) {
        initCompilerOptionsIfTesting();
        com.google.javascript.jscomp.CompilerInput input = new com.google.javascript.jscomp.CompilerInput(com.google.javascript.jscomp.SourceFile.fromCode("[testcode]", js));
        if (inputsById == null) {
            inputsById = com.google.common.collect.Maps.newHashMap();
        }
        putCompilerInput(input.getInputId(), input);
        return input.getAstRoot(this);
    }

    @java.lang.Override
    com.google.javascript.rhino.head.ErrorReporter getDefaultErrorReporter() {
        return defaultErrorReporter;
    }

    public java.lang.String toSource() {
        return runInCompilerThread(new java.util.concurrent.Callable<java.lang.String>() {
            @java.lang.Override
            public java.lang.String call() throws java.lang.Exception {
                com.google.javascript.jscomp.Tracer tracer = newTracer("toSource");
                try {
                    com.google.javascript.jscomp.Compiler.CodeBuilder cb = new com.google.javascript.jscomp.Compiler.CodeBuilder();
                    if (jsRoot != null) {
                        int i = 0;
                        for (com.google.javascript.rhino.Node scriptNode = jsRoot.getFirstChild(); scriptNode != null; scriptNode = scriptNode.getNext()) {
                            toSource(cb, i++, scriptNode);
                        }
                    }
                    return cb.toString();
                } finally {
                    stopTracer(tracer, "toSource");
                }
            }
        });
    }

    public java.lang.String[] toSourceArray() {
        return runInCompilerThread(new java.util.concurrent.Callable<java.lang.String[]>() {
            @java.lang.Override
            public java.lang.String[] call() throws java.lang.Exception {
                com.google.javascript.jscomp.Tracer tracer = newTracer("toSourceArray");
                try {
                    int numInputs = inputs.size();
                    java.lang.String[] sources = new java.lang.String[numInputs];
                    com.google.javascript.jscomp.Compiler.CodeBuilder cb = new com.google.javascript.jscomp.Compiler.CodeBuilder();
                    for (int i = 0; i < numInputs; i++) {
                        com.google.javascript.rhino.Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
                        cb.reset();
                        toSource(cb, i, scriptNode);
                        sources[i] = cb.toString();
                    }
                    return sources;
                } finally {
                    stopTracer(tracer, "toSourceArray");
                }
            }
        });
    }

    public java.lang.String toSource(final com.google.javascript.jscomp.JSModule module) {
        return runInCompilerThread(new java.util.concurrent.Callable<java.lang.String>() {
            @java.lang.Override
            public java.lang.String call() throws java.lang.Exception {
                java.util.List<com.google.javascript.jscomp.CompilerInput> inputs = module.getInputs();
                int numInputs = inputs.size();
                if (numInputs == 0) {
                    return "";
                }
                com.google.javascript.jscomp.Compiler.CodeBuilder cb = new com.google.javascript.jscomp.Compiler.CodeBuilder();
                for (int i = 0; i < numInputs; i++) {
                    com.google.javascript.rhino.Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
                    if (scriptNode == null) {
                        throw new java.lang.IllegalArgumentException("Bad module: " + module.getName());
                    }
                    toSource(cb, i, scriptNode);
                }
                return cb.toString();
            }
        });
    }

    public java.lang.String[] toSourceArray(final com.google.javascript.jscomp.JSModule module) {
        return runInCompilerThread(new java.util.concurrent.Callable<java.lang.String[]>() {
            @java.lang.Override
            public java.lang.String[] call() throws java.lang.Exception {
                java.util.List<com.google.javascript.jscomp.CompilerInput> inputs = module.getInputs();
                int numInputs = inputs.size();
                if (numInputs == 0) {
                    return new java.lang.String[0];
                }
                java.lang.String[] sources = new java.lang.String[numInputs];
                com.google.javascript.jscomp.Compiler.CodeBuilder cb = new com.google.javascript.jscomp.Compiler.CodeBuilder();
                for (int i = 0; i < numInputs; i++) {
                    com.google.javascript.rhino.Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
                    if (scriptNode == null) {
                        throw new java.lang.IllegalArgumentException("Bad module input: " + inputs.get(i).getName());
                    }
                    cb.reset();
                    toSource(cb, i, scriptNode);
                    sources[i] = cb.toString();
                }
                return sources;
            }
        });
    }

    public void toSource(final com.google.javascript.jscomp.Compiler.CodeBuilder cb, final int inputSeqNum, final com.google.javascript.rhino.Node root) {
        runInCompilerThread(new java.util.concurrent.Callable<java.lang.Void>() {
            @java.lang.Override
            public java.lang.Void call() throws java.lang.Exception {
                if (options.printInputDelimiter) {
                    if ((cb.getLength() > 0) && (!cb.endsWith("\n"))) {
                        cb.append("\n");
                    }
                    com.google.common.base.Preconditions.checkState(root.isScript());
                    java.lang.String delimiter = options.inputDelimiter;
                    java.lang.String inputName = root.getInputId().getIdName();
                    java.lang.String sourceName = root.getSourceFileName();
                    com.google.common.base.Preconditions.checkState(sourceName != null);
                    com.google.common.base.Preconditions.checkState(!sourceName.isEmpty());
                    delimiter = delimiter.replaceAll("%name%", java.util.regex.Matcher.quoteReplacement(inputName)).replaceAll("%num%", java.lang.String.valueOf(inputSeqNum));
                    cb.append(delimiter).append("\n");
                }
                if ((root.getJSDocInfo() != null) && (root.getJSDocInfo().getLicense() != null)) {
                    cb.append("/*\n").append(root.getJSDocInfo().getLicense()).append("*/\n");
                }
                if (options.sourceMapOutputPath != null) {
                    sourceMap.setStartingPosition(cb.getLineIndex(), cb.getColumnIndex());
                }
                java.lang.String code = toSource(root, sourceMap, inputSeqNum == 0);
                if (!code.isEmpty()) {
                    cb.append(code);
                    int length = code.length();
                    char lastChar = code.charAt(length - 1);
                    char secondLastChar = (length >= 2) ? code.charAt(length - 2) : '\u0000';
                    boolean hasSemiColon = (lastChar == ';') || ((lastChar == '\n') && (secondLastChar == ';'));
                    if (!hasSemiColon) {
                        cb.append(";");
                    }
                }
                return null;
            }
        });
    }

    @java.lang.Override
    java.lang.String toSource(com.google.javascript.rhino.Node n) {
        initCompilerOptionsIfTesting();
        return toSource(n, null, true);
    }

    private java.lang.String toSource(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.SourceMap sourceMap, boolean firstOutput) {
        com.google.javascript.jscomp.CodePrinter.Builder builder = new com.google.javascript.jscomp.CodePrinter.Builder(n);
        builder.setPrettyPrint(options.prettyPrint);
        builder.setLineBreak(options.lineBreak);
        builder.setPreferLineBreakAtEndOfFile(options.preferLineBreakAtEndOfFile);
        builder.setSourceMap(sourceMap);
        builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);
        builder.setTagAsStrict(firstOutput && (options.getLanguageOut() == com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
        builder.setLineLengthThreshold(options.lineLengthThreshold);
        java.nio.charset.Charset charset = (options.outputCharset != null) ? java.nio.charset.Charset.forName(options.outputCharset) : null;
        builder.setOutputCharset(charset);
        return builder.build();
    }

    public static class CodeBuilder {
        private final java.lang.StringBuilder sb = new java.lang.StringBuilder();

        private int lineCount = 0;

        private int colCount = 0;

        void reset() {
            sb.setLength(0);
        }

        com.google.javascript.jscomp.Compiler.CodeBuilder append(java.lang.String str) {
            sb.append(str);
            int index = -1;
            int lastIndex = index;
            while ((index = str.indexOf('\n', index + 1)) >= 0) {
                ++lineCount;
                lastIndex = index;
            } 
            if (lastIndex == (-1)) {
                colCount += str.length();
            } else {
                colCount = str.length() - (lastIndex + 1);
            }
            return this;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return sb.toString();
        }

        public int getLength() {
            return sb.length();
        }

        int getLineIndex() {
            return lineCount;
        }

        int getColumnIndex() {
            return colCount;
        }

        boolean endsWith(java.lang.String suffix) {
            return (sb.length() > suffix.length()) && suffix.equals(sb.substring(sb.length() - suffix.length()));
        }
    }

    public void optimize() {
        normalize();
        com.google.javascript.jscomp.PhaseOptimizer phaseOptimizer = new com.google.javascript.jscomp.PhaseOptimizer(this, tracker, null);
        if (options.devMode == com.google.javascript.jscomp.CompilerOptions.DevMode.EVERY_PASS) {
            phaseOptimizer.setSanityCheck(sanityCheck);
        }
        phaseOptimizer.consume(getPassConfig().getOptimizations());
        phaseOptimizer.process(externsRoot, jsRoot);
        if (hasErrors()) {
            return;
        }
    }

    @java.lang.Override
    void setCssRenamingMap(com.google.javascript.jscomp.CssRenamingMap map) {
        options.cssRenamingMap = map;
    }

    @java.lang.Override
    com.google.javascript.jscomp.CssRenamingMap getCssRenamingMap() {
        return options.cssRenamingMap;
    }

    public void processDefines() {
        new com.google.javascript.jscomp.DefaultPassConfig(options).processDefines.create(this).process(externsRoot, jsRoot);
    }

    boolean isInliningForbidden() {
        return (options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) || (options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC);
    }

    com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> computeCFG() {
        com.google.javascript.jscomp.Compiler.logger.fine("Computing Control Flow Graph");
        com.google.javascript.jscomp.Tracer tracer = newTracer("computeCFG");
        com.google.javascript.jscomp.ControlFlowAnalysis cfa = new com.google.javascript.jscomp.ControlFlowAnalysis(this, true, false);
        process(cfa);
        stopTracer(tracer, "computeCFG");
        return cfa.getCfg();
    }

    public void normalize() {
        com.google.javascript.jscomp.Compiler.logger.fine("Normalizing");
        startPass("normalize");
        process(new com.google.javascript.jscomp.Normalize(this, false));
        endPass();
    }

    @java.lang.Override
    void prepareAst(com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.CompilerPass pass = new com.google.javascript.jscomp.PrepareAst(this);
        pass.process(null, root);
    }

    void recordFunctionInformation() {
        com.google.javascript.jscomp.Compiler.logger.fine("Recording function information");
        startPass("recordFunctionInformation");
        com.google.javascript.jscomp.RecordFunctionInformation recordFunctionInfoPass = new com.google.javascript.jscomp.RecordFunctionInformation(this, getPassConfig().getIntermediateState().functionNames);
        process(recordFunctionInfoPass);
        functionInformationMap = recordFunctionInfoPass.getMap();
        endPass();
    }

    protected final com.google.javascript.jscomp.CodeChangeHandler.RecentChange recentChange = new com.google.javascript.jscomp.CodeChangeHandler.RecentChange();

    private final java.util.List<com.google.javascript.jscomp.CodeChangeHandler> codeChangeHandlers = com.google.common.collect.Lists.<com.google.javascript.jscomp.CodeChangeHandler>newArrayList();

    static final java.lang.String SYNTHETIC_EXTERNS = "{SyntheticVarsDeclar}";

    private com.google.javascript.jscomp.CompilerInput synthesizedExternsInput = null;

    @java.lang.Override
    void addChangeHandler(com.google.javascript.jscomp.CodeChangeHandler handler) {
        codeChangeHandlers.add(handler);
    }

    @java.lang.Override
    void removeChangeHandler(com.google.javascript.jscomp.CodeChangeHandler handler) {
        codeChangeHandlers.remove(handler);
    }

    @java.lang.Override
    public void reportCodeChange() {
        for (com.google.javascript.jscomp.CodeChangeHandler handler : codeChangeHandlers) {
            handler.reportChange();
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.CodingConvention getCodingConvention() {
        com.google.javascript.jscomp.CodingConvention convention = options.getCodingConvention();
        convention = (convention != null) ? convention : defaultCodingConvention;
        return convention;
    }

    @java.lang.Override
    public boolean isIdeMode() {
        return options.ideMode;
    }

    @java.lang.Override
    public boolean acceptEcmaScript5() {
        switch (options.getLanguageIn()) {
            case ECMASCRIPT5 :
            case ECMASCRIPT5_STRICT :
                return true;
        }
        return false;
    }

    public com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode() {
        return options.getLanguageIn();
    }

    @java.lang.Override
    public boolean acceptConstKeyword() {
        return options.acceptConstKeyword;
    }

    @java.lang.Override
    com.google.javascript.jscomp.parsing.Config getParserConfig() {
        if (parserConfig == null) {
            com.google.javascript.jscomp.parsing.Config.LanguageMode mode;
            switch (options.getLanguageIn()) {
                case ECMASCRIPT3 :
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(270).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.MODULE_DEPENDENCY_ERROR",com.google.javascript.jscomp.Compiler.MODULE_DEPENDENCY_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.OPTIMIZE_LOOP_ERROR",com.google.javascript.jscomp.Compiler.OPTIMIZE_LOOP_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.EMPTY_ROOT_MODULE_ERROR",com.google.javascript.jscomp.Compiler.EMPTY_ROOT_MODULE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.oldErrorReporter",com.google.javascript.jscomp.Compiler.this.oldErrorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.DUPLICATE_EXTERN_INPUT",com.google.javascript.jscomp.Compiler.DUPLICATE_EXTERN_INPUT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.abstractInterpreter",com.google.javascript.jscomp.Compiler.this.abstractInterpreter);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.errorManager",com.google.javascript.jscomp.Compiler.this.errorManager);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.uniqueNameId",com.google.javascript.jscomp.Compiler.this.uniqueNameId);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.sourceMap",com.google.javascript.jscomp.Compiler.this.sourceMap);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.tracker",com.google.javascript.jscomp.Compiler.this.tracker);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.recentChange",com.google.javascript.jscomp.Compiler.this.recentChange);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.progress",com.google.javascript.jscomp.Compiler.this.progress);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.sanityCheck",com.google.javascript.jscomp.Compiler.this.sanityCheck);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.defaultCodingConvention",com.google.javascript.jscomp.Compiler.this.defaultCodingConvention);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.SINGLETON_MODULE_NAME",com.google.javascript.jscomp.Compiler.SINGLETON_MODULE_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.codeChangeHandlers",com.google.javascript.jscomp.Compiler.this.codeChangeHandlers);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.syntheticCodeId",com.google.javascript.jscomp.Compiler.this.syntheticCodeId);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.injectedLibraries",com.google.javascript.jscomp.Compiler.this.injectedLibraries);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.moduleGraph",com.google.javascript.jscomp.Compiler.this.moduleGraph);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS",com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.parserConfig",com.google.javascript.jscomp.Compiler.this.parserConfig);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.synthesizedExternsInput",com.google.javascript.jscomp.Compiler.this.synthesizedExternsInput);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.hasRegExpGlobalReferences",com.google.javascript.jscomp.Compiler.this.hasRegExpGlobalReferences);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.externs",com.google.javascript.jscomp.Compiler.this.externs);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.COMPILER_STACK_SIZE",com.google.javascript.jscomp.Compiler.COMPILER_STACK_SIZE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.passes",com.google.javascript.jscomp.Compiler.this.passes);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.typeRegistry",com.google.javascript.jscomp.Compiler.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.logger",com.google.javascript.jscomp.Compiler.logger);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.jsRoot",com.google.javascript.jscomp.Compiler.this.jsRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.currentPassName",com.google.javascript.jscomp.Compiler.this.currentPassName);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.CONFIG_RESOURCE",com.google.javascript.jscomp.Compiler.CONFIG_RESOURCE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.externAndJsRoot",com.google.javascript.jscomp.Compiler.this.externAndJsRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.functionInformationMap",com.google.javascript.jscomp.Compiler.this.functionInformationMap);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR",com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.externExports",com.google.javascript.jscomp.Compiler.this.externExports);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.typeValidator",com.google.javascript.jscomp.Compiler.this.typeValidator);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.outStream",com.google.javascript.jscomp.Compiler.this.outStream);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.debugLog",com.google.javascript.jscomp.Compiler.this.debugLog);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.defaultErrorReporter",com.google.javascript.jscomp.Compiler.this.defaultErrorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.EMPTY_MODULE_LIST_ERROR",com.google.javascript.jscomp.Compiler.EMPTY_MODULE_LIST_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.globalRefMap",com.google.javascript.jscomp.Compiler.this.globalRefMap);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT",com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.useThreads",com.google.javascript.jscomp.Compiler.this.useThreads);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.inputsById",com.google.javascript.jscomp.Compiler.this.inputsById);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR",com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.options",com.google.javascript.jscomp.Compiler.this.options);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.modules",com.google.javascript.jscomp.Compiler.this.modules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.warningsGuard",com.google.javascript.jscomp.Compiler.this.warningsGuard);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.inputs",com.google.javascript.jscomp.Compiler.this.inputs);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.externsRoot",com.google.javascript.jscomp.Compiler.this.externsRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.Compiler.this.currentTracer",com.google.javascript.jscomp.Compiler.this.currentTracer);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        mode = com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT3;

                    break;
                case ECMASCRIPT5 :
                    mode = com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT5;
                    break;
                case ECMASCRIPT5_STRICT :
                    mode = com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT5_STRICT;
                    break;
                default :
                    throw new java.lang.IllegalStateException("unexpected language mode");
            }
            parserConfig = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(isIdeMode(), mode, acceptConstKeyword(), options.extraAnnotationNames);
        }
        return parserConfig;
    }

    @java.lang.Override
    public boolean isTypeCheckingEnabled() {
        return options.checkTypes;
    }

    protected com.google.javascript.jscomp.DiagnosticGroups getDiagnosticGroups() {
        return new com.google.javascript.jscomp.DiagnosticGroups();
    }

    @java.lang.Override
    public void report(com.google.javascript.jscomp.JSError error) {
        com.google.javascript.jscomp.CheckLevel level = error.getDefaultLevel();
        if (warningsGuard != null) {
            com.google.javascript.jscomp.CheckLevel newLevel = warningsGuard.level(error);
            if (newLevel != null) {
                level = newLevel;
            }
        }
        if (level.isOn()) {
            if (getOptions().errorHandler != null) {
                getOptions().errorHandler.report(level, error);
            }
            errorManager.report(level, error);
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.CheckLevel getErrorLevel(com.google.javascript.jscomp.JSError error) {
        com.google.common.base.Preconditions.checkNotNull(options);
        return warningsGuard.level(error);
    }

    @java.lang.Override
    void throwInternalError(java.lang.String message, java.lang.Exception cause) {
        java.lang.String finalMessage = ("INTERNAL COMPILER ERROR.\n" + "Please report this problem.\n") + message;
        java.lang.RuntimeException e = new java.lang.RuntimeException(finalMessage, cause);
        if (cause != null) {
            e.setStackTrace(cause.getStackTrace());
        }
        throw e;
    }

    public int getErrorCount() {
        return errorManager.getErrorCount();
    }

    public int getWarningCount() {
        return errorManager.getWarningCount();
    }

    @java.lang.Override
    boolean hasHaltingErrors() {
        return (!isIdeMode()) && (getErrorCount() > 0);
    }

    public boolean hasErrors() {
        return hasHaltingErrors();
    }

    @java.lang.Override
    void addToDebugLog(java.lang.String str) {
        debugLog.append(str);
        debugLog.append('\n');
        com.google.javascript.jscomp.Compiler.logger.fine(str);
    }

    @java.lang.Override
    com.google.javascript.jscomp.SourceFile getSourceFileByName(java.lang.String sourceName) {
        if (sourceName != null) {
            com.google.javascript.jscomp.CompilerInput input = inputsById.get(new com.google.javascript.rhino.InputId(sourceName));
            if (input != null) {
                return input.getSourceFile();
            }
        }
        return null;
    }

    @java.lang.Override
    public java.lang.String getSourceLine(java.lang.String sourceName, int lineNumber) {
        if (lineNumber < 1) {
            return null;
        }
        com.google.javascript.jscomp.SourceFile input = getSourceFileByName(sourceName);
        if (input != null) {
            return input.getLine(lineNumber);
        }
        return null;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Region getSourceRegion(java.lang.String sourceName, int lineNumber) {
        if (lineNumber < 1) {
            return null;
        }
        com.google.javascript.jscomp.SourceFile input = getSourceFileByName(sourceName);
        if (input != null) {
            return input.getRegion(lineNumber);
        }
        return null;
    }

    @java.lang.Override
    com.google.javascript.rhino.Node getNodeForCodeInsertion(com.google.javascript.jscomp.JSModule module) {
        if (module == null) {
            if (inputs.isEmpty()) {
                throw new java.lang.IllegalStateException("No inputs");
            }
            return inputs.get(0).getAstRoot(this);
        }
        java.util.List<com.google.javascript.jscomp.CompilerInput> moduleInputs = module.getInputs();
        if (moduleInputs.size() > 0) {
            return moduleInputs.get(0).getAstRoot(this);
        }
        throw new java.lang.IllegalStateException("Root module has no inputs");
    }

    public com.google.javascript.jscomp.SourceMap getSourceMap() {
        return sourceMap;
    }

    com.google.javascript.jscomp.VariableMap getVariableMap() {
        return getPassConfig().getIntermediateState().variableMap;
    }

    com.google.javascript.jscomp.VariableMap getPropertyMap() {
        return getPassConfig().getIntermediateState().propertyMap;
    }

    com.google.javascript.jscomp.CompilerOptions getOptions() {
        return options;
    }

    com.google.javascript.jscomp.FunctionInformationMap getFunctionalInformationMap() {
        return functionInformationMap;
    }

    public static void setLoggingLevel(java.util.logging.Level level) {
        com.google.javascript.jscomp.Compiler.logger.setLevel(level);
    }

    public java.lang.String getAstDotGraph() throws java.io.IOException {
        if (jsRoot != null) {
            com.google.javascript.jscomp.ControlFlowAnalysis cfa = new com.google.javascript.jscomp.ControlFlowAnalysis(this, true, false);
            cfa.process(null, jsRoot);
            return com.google.javascript.jscomp.DotFormatter.toDot(jsRoot, cfa.getCfg());
        } else {
            return "";
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.ErrorManager getErrorManager() {
        if (options == null) {
            initOptions(newCompilerOptions());
        }
        return errorManager;
    }

    @java.lang.Override
    java.util.List<com.google.javascript.jscomp.CompilerInput> getInputsInOrder() {
        return java.util.Collections.<com.google.javascript.jscomp.CompilerInput>unmodifiableList(inputs);
    }

    public java.util.Map<com.google.javascript.rhino.InputId, com.google.javascript.jscomp.CompilerInput> getInputsById() {
        return java.util.Collections.unmodifiableMap(inputsById);
    }

    java.util.List<com.google.javascript.jscomp.CompilerInput> getExternsInOrder() {
        return java.util.Collections.<com.google.javascript.jscomp.CompilerInput>unmodifiableList(externs);
    }

    public static class IntermediateState implements java.io.Serializable {
        private static final long serialVersionUID = 1L;

        com.google.javascript.rhino.Node externsRoot;

        private com.google.javascript.rhino.Node jsRoot;

        private java.util.List<com.google.javascript.jscomp.CompilerInput> externs;

        private java.util.List<com.google.javascript.jscomp.CompilerInput> inputs;

        private java.util.List<com.google.javascript.jscomp.JSModule> modules;

        private com.google.javascript.jscomp.PassConfig.State passConfigState;

        private com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

        private com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage lifeCycleStage;

        private java.util.Map<java.lang.String, com.google.javascript.rhino.Node> injectedLibraries;

        private IntermediateState() {
        }
    }

    public com.google.javascript.jscomp.Compiler.IntermediateState getState() {
        com.google.javascript.jscomp.Compiler.IntermediateState state = new com.google.javascript.jscomp.Compiler.IntermediateState();
        state.externsRoot = externsRoot;
        state.jsRoot = jsRoot;
        state.externs = externs;
        state.inputs = inputs;
        state.modules = modules;
        state.passConfigState = getPassConfig().getIntermediateState();
        state.typeRegistry = typeRegistry;
        state.lifeCycleStage = getLifeCycleStage();
        state.injectedLibraries = com.google.common.collect.Maps.newLinkedHashMap(injectedLibraries);
        return state;
    }

    public void setState(com.google.javascript.jscomp.Compiler.IntermediateState state) {
        externsRoot = state.externsRoot;
        jsRoot = state.jsRoot;
        externs = state.externs;
        inputs = state.inputs;
        modules = state.modules;
        passes = createPassConfigInternal();
        getPassConfig().setIntermediateState(state.passConfigState);
        typeRegistry = state.typeRegistry;
        setLifeCycleStage(state.lifeCycleStage);
        injectedLibraries.clear();
        injectedLibraries.putAll(state.injectedLibraries);
    }

    @com.google.common.annotations.VisibleForTesting
    java.util.List<com.google.javascript.jscomp.CompilerInput> getInputsForTesting() {
        return inputs;
    }

    @com.google.common.annotations.VisibleForTesting
    java.util.List<com.google.javascript.jscomp.CompilerInput> getExternsForTesting() {
        return externs;
    }

    @java.lang.Override
    boolean hasRegExpGlobalReferences() {
        return hasRegExpGlobalReferences;
    }

    @java.lang.Override
    void setHasRegExpGlobalReferences(boolean references) {
        hasRegExpGlobalReferences = references;
    }

    @java.lang.Override
    void updateGlobalVarReferences(java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> refMapPatch, com.google.javascript.rhino.Node collectionRoot) {
        com.google.common.base.Preconditions.checkState(collectionRoot.isScript() || collectionRoot.isBlock());
        if (globalRefMap == null) {
            globalRefMap = new com.google.javascript.jscomp.GlobalVarReferenceMap(getInputsInOrder(), getExternsInOrder());
        }
        globalRefMap.updateGlobalVarReferences(refMapPatch, collectionRoot);
    }

    @java.lang.Override
    com.google.javascript.jscomp.GlobalVarReferenceMap getGlobalVarReferences() {
        return globalRefMap;
    }

    @java.lang.Override
    com.google.javascript.jscomp.CompilerInput getSynthesizedExternsInput() {
        if (synthesizedExternsInput == null) {
            synthesizedExternsInput = newExternInput(com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS);
        }
        return synthesizedExternsInput;
    }

    @java.lang.Override
    public double getProgress() {
        return progress;
    }

    @java.lang.Override
    void setProgress(double newProgress) {
        if (newProgress > 1.0) {
            progress = 1.0;
        } else if (newProgress < 0.0) {
            progress = 0.0;
        } else {
            progress = newProgress;
        }
    }

    public void replaceScript(com.google.javascript.jscomp.JsAst ast) {
        com.google.javascript.jscomp.CompilerInput input = this.getInput(ast.getInputId());
        if (!replaceIncrementalSourceAst(ast)) {
            return;
        }
        com.google.javascript.rhino.Node originalRoot = input.getAstRoot(this);
        processNewScript(ast, originalRoot);
    }

    public void addNewScript(com.google.javascript.jscomp.JsAst ast) {
        if (!addNewSourceAst(ast)) {
            return;
        }
        com.google.javascript.rhino.Node emptyScript = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);
        com.google.javascript.rhino.InputId inputId = ast.getInputId();
        emptyScript.setInputId(inputId);
        emptyScript.setStaticSourceFile(com.google.javascript.jscomp.SourceFile.fromCode(inputId.getIdName(), ""));
        processNewScript(ast, emptyScript);
    }

    private void processNewScript(com.google.javascript.jscomp.JsAst ast, com.google.javascript.rhino.Node originalRoot) {
        com.google.javascript.rhino.Node js = ast.getAstRoot(this);
        com.google.common.base.Preconditions.checkNotNull(js);
        runHotSwap(originalRoot, js, this.getCleanupPassConfig());
        runHotSwapPass(null, null, ensureDefaultPassConfig().garbageCollectChecks);
        this.getTypeRegistry().clearNamedTypes();
        this.removeSyntheticVarsInput();
        runHotSwap(originalRoot, js, this.ensureDefaultPassConfig());
    }

    private void runHotSwap(com.google.javascript.rhino.Node originalRoot, com.google.javascript.rhino.Node js, com.google.javascript.jscomp.PassConfig passConfig) {
        for (com.google.javascript.jscomp.PassFactory passFactory : passConfig.getChecks()) {
            runHotSwapPass(originalRoot, js, passFactory);
        }
    }

    private void runHotSwapPass(com.google.javascript.rhino.Node originalRoot, com.google.javascript.rhino.Node js, com.google.javascript.jscomp.PassFactory passFactory) {
        com.google.javascript.jscomp.HotSwapCompilerPass pass = passFactory.getHotSwapPass(this);
        if (pass != null) {
            com.google.javascript.jscomp.Compiler.logger.info("Performing HotSwap for pass " + passFactory.getName());
            pass.hotSwapScript(js, originalRoot);
        }
    }

    private com.google.javascript.jscomp.PassConfig getCleanupPassConfig() {
        return new com.google.javascript.jscomp.CleanupPasses(getOptions());
    }

    private void removeSyntheticVarsInput() {
        java.lang.String sourceName = com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS;
        removeExternInput(new com.google.javascript.rhino.InputId(sourceName));
    }

    @java.lang.Override
    com.google.javascript.rhino.Node ensureLibraryInjected(java.lang.String resourceName) {
        if (injectedLibraries.containsKey(resourceName)) {
            return null;
        }
        boolean isBase = "base".equals(resourceName);
        if (!isBase) {
            ensureLibraryInjected("base");
        }
        com.google.javascript.rhino.Node firstChild = loadLibraryCode(resourceName).removeChildren();
        com.google.javascript.rhino.Node lastChild = firstChild.getLastSibling();
        com.google.javascript.rhino.Node parent = getNodeForCodeInsertion(null);
        if (isBase) {
            parent.addChildrenToFront(firstChild);
        } else {
            parent.addChildrenAfter(firstChild, injectedLibraries.get("base"));
        }
        reportCodeChange();
        injectedLibraries.put(resourceName, lastChild);
        return lastChild;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node loadLibraryCode(java.lang.String resourceName) {
        java.lang.String originalCode;
        try {
            originalCode = com.google.common.io.CharStreams.toString(new java.io.InputStreamReader(com.google.javascript.jscomp.Compiler.class.getResourceAsStream(java.lang.String.format("js/%s.js", resourceName)), com.google.common.base.Charsets.UTF_8));
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException(e);
        }
        return com.google.javascript.jscomp.Normalize.parseAndNormalizeSyntheticCode(this, originalCode, java.lang.String.format("jscomp_%s_", resourceName));
    }

    public static java.lang.String getReleaseVersion() {
        java.util.ResourceBundle config = java.util.ResourceBundle.getBundle(com.google.javascript.jscomp.Compiler.CONFIG_RESOURCE);
        return config.getString("compiler.version");
    }

    public static java.lang.String getReleaseDate() {
        java.util.ResourceBundle config = java.util.ResourceBundle.getBundle(com.google.javascript.jscomp.Compiler.CONFIG_RESOURCE);
        return config.getString("compiler.date");
    }
}
[1047594] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659922221276
GPR[SSUN]-1659922221276
-1797850673
GPR[SPVATF]-1659922221527
GPR[EPVATF]-1659922221808
GPR[SPS]-1659922221808
[1048675] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1283.
GPR[EPS]-1659922222357
GPR[ESUN]-1659922222357
GPR[SSUN]-1659922222357
-1797850673
GPR[SPVATF]-1659922222603
GPR[EPVATF]-1659922222876
GPR[SPS]-1659922222876
[1049730] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:917.
GPR[EPS]-1659922223413
GPR[ESUN]-1659922223413
GPR[SSUN]-1659922223413
466431456
GPR[SPVATF]-1659922223687
GPR[EPVATF]-1659922223958
GPR[SPS]-1659922223958
[1050889] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:232.
GPR[EPS]-1659922224571
GPR[ESUN]-1659922224571
GPR[SSUN]-1659922224571
-1797850673
GPR[SPVATF]-1659922224841
GPR[EPVATF]-1659922225112
GPR[SPS]-1659922225112
[1051955] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1282.
GPR[EPS]-1659922225637
GPR[SPVATF]-1659922225638
GPR[EPVATF]-1659922225906
GPR[SPS]-1659922225906
[1061312] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1282.
GPR[EPS]-1659922234994
GPR[ESUN]-1659922234994
GPR[SSUN]-1659922234994
-1797850673
GPR[ESUN]-1659922235258
GPR[SSUN]-1659922235258
1187751237
GPR[SPVATF]-1659922235529
GPR[EPVATF]-1659922235793
GPR[SPS]-1659922235793
[1062774] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:125.
GPR[EPS]-1659922236456
GPR[ESUN]-1659922236456
GPR[SSUN]-1659922236456
160819208
GPR[ESUN]-1659922236682
GPR[SSUN]-1659922236682
160819208
GPR[SPVATF]-1659922236913
GPR[EPVATF]-1659922237649
GPR[SPS]-1659922237649
[1064480] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:671.
GPR[EPS]-1659922238162
GPR[ESUN]-1659922238162
GPR[SSUN]-1659922238162
160819208
GPR[SPVATF]-1659922238390
GPR[EPVATF]-1659922238711
GPR[SPS]-1659922238711
[1065530] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:670.
GPR[EPS]-1659922239212
GPR[ESUN]-1659922239212
GPR[SSUN]-1659922239212
160819208
GPR[ESUN]-1659922239436
GPR[SSUN]-1659922239436
160819208
GPR[SPVATF]-1659922239659
GPR[EPVATF]-1659922239995
GPR[SPS]-1659922239995
[1066835] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:352.
GPR[EPS]-1659922240517
GPR[ESUN]-1659922240517
GPR[SSUN]-1659922240518
466431456
GPR[SPVATF]-1659922240788
GPR[EPVATF]-1659922241058
GPR[SPS]-1659922241058
[1067978] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:235.
GPR[EPS]-1659922241660
GPR[ESUN]-1659922241660
GPR[SSUN]-1659922241660
466431456
GPR[SPVATF]-1659922241929
GPR[EPVATF]-1659922242198
GPR[SPS]-1659922242198
[1069127] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:231.
GPR[EPS]-1659922242809
GPR[SPVATF]-1659922242809
GPR[EPVATF]-1659922243074
GPR[SPS]-1659922243074
[1069988] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:231.
GPR[EPS]-1659922243670
GPR[ESUN]-1659922243670
GPR[SSUN]-1659922243670
-615894762
GPR[ESUN]-1659922243869
GPR[SSUN]-1659922243869
-615894762
GPR[SPVATF]-1659922244065
GPR[EPVATF]-1659922244332
GPR[SPS]-1659922244332
[1071090] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CombinedCompilerPass:192.
GPR[EPS]-1659922244772
GPR[ESUN]-1659922244772
GPR[SSUN]-1659922244772
-615894762
GPR[SPVATF]-1659922244970
GPR[EPVATF]-1659922245256
GPR[SPS]-1659922245256
[1072015] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CombinedCompilerPass:191.
GPR[EPS]-1659922245697
GPR[ESUN]-1659922245697
GPR[SSUN]-1659922245697
-615894762
GPR[ESUN]-1659922245895
GPR[SSUN]-1659922245895
-615894762
GPR[SPVATF]-1659922246092
GPR[EPVATF]-1659922246357
GPR[SPS]-1659922246357
GPR[EPS]-1659922261964
GPR[ESUN]-1659922261964
GPR[SSUN]-1659922261964
-615894762
GPR[SPVATF]-1659922262188
GPR[EPVATF]-1659922262459
GPR[SPS]-1659922262459
GPR[EPS]-1659922278058
GPR[ESUN]-1659922278058
GPR[SSUN]-1659922278058
-615894762
GPR[ESUN]-1659922278262
GPR[SSUN]-1659922278262
-615894762
GPR[SPVATF]-1659922278463
GPR[EPVATF]-1659922278741
GPR[SPS]-1659922278741
[1105505] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CombinedCompilerPass:178.
GPR[EPS]-1659922279188
GPR[ESUN]-1659922279188
GPR[SSUN]-1659922279188
-615894762
GPR[SPVATF]-1659922279387
GPR[EPVATF]-1659922279670
GPR[SPS]-1659922279670
[1106435] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CombinedCompilerPass:177.
GPR[EPS]-1659922280117
GPR[ESUN]-1659922280117
GPR[SSUN]-1659922280117
-615894762
GPR[ESUN]-1659922280317
GPR[SSUN]-1659922280317
-615894762
GPR[SPVATF]-1659922280515
GPR[EPVATF]-1659922280783
GPR[SPS]-1659922280783
[1107566] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CombinedCompilerPass:165.
GPR[EPS]-1659922281248
GPR[ESUN]-1659922281248
GPR[SSUN]-1659922281248
-615894762
GPR[SPVATF]-1659922281449
GPR[EPVATF]-1659922281721
GPR[SPS]-1659922281721
[1108483] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CombinedCompilerPass:164.
GPR[EPS]-1659922282165
GPR[ESUN]-1659922282165
GPR[SSUN]-1659922282166
-615894762
GPR[ESUN]-1659922282365
GPR[SSUN]-1659922282365
-615894762
GPR[SPVATF]-1659922282562
GPR[EPVATF]-1659922282834
GPR[SPS]-1659922282834
GPR[EPS]-1659922292701
GPR[ESUN]-1659922292702
GPR[SSUN]-1659922292702
-615894762
GPR[ESUN]-1659922292901
GPR[SSUN]-1659922292901
-615894762
GPR[ESUN]-1659922293097
GPR[SSUN]-1659922293097
-615894762
GPR[SPVATF]-1659922293319
GPR[EPVATF]-1659922293602
GPR[SPS]-1659922293602
[1120358] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CombinedCompilerPass$CallbackWrapper:142.
GPR[EPS]-1659922294040
GPR[SPVATF]-1659922294040
GPR[EPVATF]-1659922294319
GPR[SPS]-1659922294319
[1121081] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CombinedCompilerPass$CallbackWrapper:142.
GPR[EPS]-1659922294763
GPR[ESUN]-1659922294763
GPR[SSUN]-1659922294763
-615894762
GPR[ESUN]-1659922295040
GPR[SSUN]-1659922295040
-615894762
GPR[SPVATF]-1659922295250
GPR[EPVATF]-1659922295529
GPR[SPS]-1659922295529
GPR[EPS]-1659922306305
GPR[SPVATF]-1659922306305
GPR[EPVATF]-1659922306598
GPR[SPS]-1659922306598
GPR[EPS]-1659922316967
GPR[ESUN]-1659922316967
GPR[SSUN]-1659922316967
-615894762
GPR[ESUN]-1659922317167
GPR[SSUN]-1659922317167
-615894762
GPR[SPVATF]-1659922317368
GPR[EPVATF]-1659922317665
GPR[SPS]-1659922317665
[1144426] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CombinedCompilerPass$CallbackWrapper:130.
GPR[EPS]-1659922318108
GPR[SPVATF]-1659922318108
GPR[EPVATF]-1659922318395
GPR[SPS]-1659922318395
[1145156] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CombinedCompilerPass$CallbackWrapper:130.
GPR[EPS]-1659922318838
GPR[ESUN]-1659922318838
GPR[SSUN]-1659922318838
-615894762
GPR[ESUN]-1659922319038
GPR[SSUN]-1659922319038
-615894762
GPR[SPVATF]-1659922319235
GPR[EPVATF]-1659922319526
GPR[SPS]-1659922319526
[1146289] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CombinedCompilerPass$CallbackWrapper:123.
GPR[EPS]-1659922319971
GPR[ESUN]-1659922319971
GPR[SSUN]-1659922319971
-615894762
GPR[SPVATF]-1659922320192
GPR[EPVATF]-1659922320484
GPR[SPS]-1659922320484
[1147246] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CombinedCompilerPass$CallbackWrapper:122.
GPR[EPS]-1659922320928
GPR[SPVATF]-1659922320928
GPR[EPVATF]-1659922321248
GPR[SPS]-1659922321248
[1148008] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CombinedCompilerPass$CallbackWrapper:122.
GPR[EPS]-1659922321690
GPR[ESUN]-1659922321690
GPR[SSUN]-1659922321690
1331276989
GPR[ESUN]-1659922321898
GPR[SSUN]-1659922321898
1331276989
GPR[SPVATF]-1659922322109
GPR[EPVATF]-1659922322415
GPR[SPS]-1659922322415
[1149205] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:617.
GPR[EPS]-1659922322887
GPR[ESUN]-1659922322887
GPR[SSUN]-1659922322887
1331276989
GPR[SPVATF]-1659922323094
GPR[EPVATF]-1659922323395
GPR[SPS]-1659922323395
[1150186] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:616.
GPR[EPS]-1659922323868
GPR[ESUN]-1659922323868
GPR[SSUN]-1659922323868
1331276989
GPR[SPVATF]-1659922324072
GPR[EPVATF]-1659922324370
GPR[SPS]-1659922324370
[1151180] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:615.
GPR[EPS]-1659922324862
GPR[ESUN]-1659922324862
GPR[SSUN]-1659922324862
1331276989
GPR[ESUN]-1659922325067
GPR[SSUN]-1659922325067
1331276989
GPR[SPVATF]-1659922325292
GPR[EPVATF]-1659922325596
GPR[SPS]-1659922325596
[1152382] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:613.
GPR[EPS]-1659922326064
GPR[SPVATF]-1659922326064
GPR[EPVATF]-1659922326366
GPR[SPS]-1659922326366
GPR[EPS]-1659922352595
GPR[ESUN]-1659922352595
GPR[SSUN]-1659922352595
704176156
GPR[SPVATF]-1659922352803
GPR[EPVATF]-1659922358915
GPR[SPS]-1659922358915
[1185795] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:171.
GPR[EPS]-1659922359477
GPR[ESUN]-1659922359477
GPR[SSUN]-1659922359477
160819208
GPR[ESUN]-1659922359732
GPR[SSUN]-1659922359732
-1345859678
GPR[ESUN]-1659922359978
GPR[SSUN]-1659922359978
466431456
GPR[SPVATF]-1659922360273
GPR[EPVATF]-1659922360718
GPR[SPS]-1659922360718
[1187882] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:201.
GPR[EPS]-1659922361564
GPR[SPVATF]-1659922361565
GPR[EPVATF]-1659922361966
GPR[SPS]-1659922361966
[1188886] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:201.
GPR[EPS]-1659922362568
GPR[ESUN]-1659922362568
GPR[SSUN]-1659922362568
466431456
GPR[SPVATF]-1659922362849
GPR[EPVATF]-1659922363141
GPR[SPS]-1659922363141
[1190071] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:200.
GPR[EPS]-1659922363753
GPR[SPVATF]-1659922363753
GPR[EPVATF]-1659922364037
GPR[SPS]-1659922364037
[1190954] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:200.
GPR[EPS]-1659922364636
GPR[ESUN]-1659922364636
GPR[SSUN]-1659922364636
466431456
GPR[SPVATF]-1659922364905
GPR[EPVATF]-1659922365201
GPR[SPS]-1659922365201
[1192156] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:188.
GPR[EPS]-1659922365838
GPR[SPVATF]-1659922365839
GPR[EPVATF]-1659922366140
GPR[SPS]-1659922366140
[1193100] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:188.
GPR[EPS]-1659922366782
GPR[ESUN]-1659922366782
GPR[SSUN]-1659922366782
466431456
GPR[SPVATF]-1659922367049
GPR[EPVATF]-1659922367322
GPR[SPS]-1659922367322
[1194238] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:187.
GPR[EPS]-1659922367920
GPR[ESUN]-1659922367920
GPR[SSUN]-1659922367920
466431456
GPR[SPVATF]-1659922368211
GPR[EPVATF]-1659922368531
GPR[SPS]-1659922368531
[1195453] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:186.
GPR[EPS]-1659922369135
GPR[SPVATF]-1659922369135
GPR[EPVATF]-1659922369429
GPR[SPS]-1659922369429
[1196400] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:186.
GPR[EPS]-1659922370082
GPR[ESUN]-1659922370082
GPR[SSUN]-1659922370082
466431456
GPR[SPVATF]-1659922370377
GPR[EPVATF]-1659922370672
GPR[SPS]-1659922370672
[1197619] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:155.
GPR[EPS]-1659922371301
GPR[SPVATF]-1659922371302
GPR[EPVATF]-1659922371576
GPR[SPS]-1659922371576
[1198497] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:155.
GPR[EPS]-1659922372179
GPR[ESUN]-1659922372179
GPR[SSUN]-1659922372179
466431456
GPR[SPVATF]-1659922372448
GPR[EPVATF]-1659922372724
GPR[SPS]-1659922372724
[1199673] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:363.
GPR[EPS]-1659922373355
GPR[ESUN]-1659922373355
GPR[SSUN]-1659922373355
466431456
GPR[SPVATF]-1659922373627
GPR[EPVATF]-1659922373907
GPR[SPS]-1659922373907
[1200831] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:362.
GPR[EPS]-1659922374513
GPR[ESUN]-1659922374514
GPR[SSUN]-1659922374514
466431456
GPR[SPVATF]-1659922374786
GPR[EPVATF]-1659922375087
GPR[SPS]-1659922375087
[1202010] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:361.
GPR[EPS]-1659922375692
GPR[ESUN]-1659922375692
GPR[SSUN]-1659922375692
-534884160
GPR[SPVATF]-1659922376019
GPR[EPVATF]-1659922376183
GPR[SPS]-1659922376183
[1203208] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:269.
GPR[EPS]-1659922376890
GPR[ESUN]-1659922376890
GPR[SSUN]-1659922376890
160819208
GPR[SPVATF]-1659922377122
GPR[EPVATF]-1659922377420
GPR[SPS]-1659922377420
[1204244] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:834.
GPR[EPS]-1659922377926
GPR[SPVATF]-1659922377926
GPR[EPVATF]-1659922378253
GPR[SPS]-1659922378253
[1205082] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:834.
GPR[EPS]-1659922378764
GPR[ESUN]-1659922378764
GPR[SSUN]-1659922378764
160819208
GPR[SPVATF]-1659922378992
GPR[EPVATF]-1659922379295
GPR[SPS]-1659922379295
[1206161] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:833.
GPR[EPS]-1659922379843
GPR[ESUN]-1659922379843
GPR[SSUN]-1659922379843
160819208
GPR[ESUN]-1659922380077
GPR[SSUN]-1659922380077
GPR[ESUN]-1659922380077
GPR[SSUN]-1659922380077
GPR[ESUN]-1659922380077
GPR[SSUN]-1659922380077
-861565004
GPR[SPVATF]-1659922380258
GPR[EPVATF]-1659922380537
GPR[SPS]-1659922380537
GPR[EPS]-1659922393994
GPR[ESUN]-1659922393994
GPR[SSUN]-1659922393994
-534884160
GPR[SPVATF]-1659922394329
GPR[EPVATF]-1659922394493
GPR[SPS]-1659922394493
[1221519] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:265.
GPR[EPS]-1659922395201
GPR[SPVATF]-1659922395201
GPR[EPVATF]-1659922395360
GPR[SPS]-1659922395360
[1222353] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:265.
GPR[EPS]-1659922396035
GPR[ESUN]-1659922396035
GPR[SSUN]-1659922396035
-534884160
GPR[SPVATF]-1659922396359
GPR[EPVATF]-1659922396522
GPR[SPS]-1659922396522
[1223516] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:263.
GPR[EPS]-1659922397198
GPR[SPVATF]-1659922397198
GPR[EPVATF]-1659922397362
GPR[SPS]-1659922397362
[1224412] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:263.
GPR[EPS]-1659922398094
GPR[ESUN]-1659922398094
GPR[SSUN]-1659922398094
GPR[ESUN]-1659922398094
GPR[SSUN]-1659922398094
GPR[ESUN]-1659922398094
GPR[SSUN]-1659922398094
-1345859678
GPR[SPVATF]-1659922398338
GPR[EPVATF]-1659922398625
GPR[SPS]-1659922398625
[1225538] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:232.
GPR[EPS]-1659922399220
GPR[ESUN]-1659922399220
GPR[SSUN]-1659922399221
-1345859678
GPR[SPVATF]-1659922399471
GPR[EPVATF]-1659922399758
GPR[SPS]-1659922399758
[1226626] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:231.
GPR[EPS]-1659922400308
GPR[ESUN]-1659922400308
GPR[SSUN]-1659922400308
-1345859678
GPR[SPVATF]-1659922400551
GPR[EPVATF]-1659922400829
GPR[SPS]-1659922400829
[1227740] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:230.
GPR[EPS]-1659922401422
GPR[ESUN]-1659922401422
GPR[SSUN]-1659922401422
-1345859678
GPR[SPVATF]-1659922401668
GPR[EPVATF]-1659922401948
GPR[SPS]-1659922401948
[1228817] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:229.
GPR[EPS]-1659922402499
GPR[ESUN]-1659922402499
GPR[SSUN]-1659922402499
-1345859678
GPR[ESUN]-1659922402740
GPR[SSUN]-1659922402740
GPR[ESUN]-1659922402740
GPR[SSUN]-1659922402740
GPR[ESUN]-1659922402740
GPR[SSUN]-1659922402740
-754411459
GPR[ESUN]-1659922402929
GPR[SSUN]-1659922402930
-323087623
GPR[ESUN]-1659922403125
GPR[SSUN]-1659922403125
-323087623
GPR[SPVATF]-1659922403320
GPR[EPVATF]-1659922403487
GPR[SPS]-1659922403487
[1230208] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DiagnosticGroup:71.
GPR[EPS]-1659922403890
GPR[SPVATF]-1659922403890
GPR[EPVATF]-1659922404053
GPR[SPS]-1659922404053
[1230772] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DiagnosticGroup:71.
GPR[EPS]-1659922404454
GPR[ESUN]-1659922404454
GPR[SSUN]-1659922404454
-754411459
GPR[SPVATF]-1659922404643
GPR[EPVATF]-1659922404850
GPR[SPS]-1659922404850
[1231564] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ComposeWarningsGuard:130.
GPR[EPS]-1659922405246
GPR[ESUN]-1659922405246
GPR[SSUN]-1659922405246
-754411459
GPR[ESUN]-1659922405436
GPR[SSUN]-1659922405436
-754411459
GPR[ESUN]-1659922405626
GPR[SSUN]-1659922405626
1508329696
GPR[ESUN]-1659922405866
GPR[SSUN]-1659922405866
160819208
GPR[SPVATF]-1659922406094
GPR[EPVATF]-1659922406418
GPR[SPS]-1659922406418
[1233246] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:506.
GPR[EPS]-1659922406928
GPR[ESUN]-1659922406928
GPR[SSUN]-1659922406928
466431456
GPR[SPVATF]-1659922407203
GPR[EPVATF]-1659922407488
GPR[SPS]-1659922407488
[1234333] ERROR ConstraintModelBuilder - Unable to compile the change: 
class TypeInference extends com.google.javascript.jscomp.DataFlowAnalysis.BranchedForwardDataFlowAnalysis<com.google.javascript.rhino.Node, com.google.javascript.jscomp.type.FlowScope> {
    static final com.google.javascript.jscomp.DiagnosticType FUNCTION_LITERAL_UNDEFINED_THIS = com.google.javascript.jscomp.DiagnosticType.warning("JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "Function literal argument refers to undefined this argument");

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry registry;

    private final com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter;

    private final com.google.javascript.jscomp.Scope syntacticScope;

    private final com.google.javascript.jscomp.type.FlowScope functionScope;

    private final com.google.javascript.jscomp.type.FlowScope bottomScope;

    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionsMap;

    TypeInference(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> cfg, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.jscomp.Scope functionScope, java.util.Map<java.lang.String, com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionsMap) {
        super(cfg, new com.google.javascript.jscomp.LinkedFlowScope.FlowScopeJoinOp());
        this.compiler = compiler;
        this.registry = compiler.getTypeRegistry();
        this.reverseInterpreter = reverseInterpreter;
        this.syntacticScope = functionScope;
        this.functionScope = com.google.javascript.jscomp.LinkedFlowScope.createEntryLattice(functionScope);
        this.assertionFunctionsMap = assertionFunctionsMap;
        java.util.Iterator<com.google.javascript.jscomp.Scope.Var> varIt = functionScope.getDeclarativelyUnboundVarsWithoutTypes();
        while (varIt.hasNext()) {
            com.google.javascript.jscomp.Scope.Var var = varIt.next();
            if (isUnflowable(var)) {
                continue;
            }
            this.functionScope.inferSlotType(var.getName(), getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE));
        } 
        this.bottomScope = com.google.javascript.jscomp.LinkedFlowScope.createEntryLattice(new com.google.javascript.jscomp.Scope(functionScope.getRootNode(), functionScope.getTypeOfThis()));
    }

    @java.lang.Override
    com.google.javascript.jscomp.type.FlowScope createInitialEstimateLattice() {
        return bottomScope;
    }

    @java.lang.Override
    com.google.javascript.jscomp.type.FlowScope createEntryLattice() {
        return functionScope;
    }

    @java.lang.Override
    com.google.javascript.jscomp.type.FlowScope flowThrough(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.type.FlowScope input) {
        if (input == bottomScope) {
            return input;
        }
        com.google.javascript.jscomp.type.FlowScope output = input.createChildFlowScope();
        output = traverse(n, output);
        return output;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("fallthrough")
    java.util.List<com.google.javascript.jscomp.type.FlowScope> branchedFlowThrough(com.google.javascript.rhino.Node source, com.google.javascript.jscomp.type.FlowScope input) {
        com.google.javascript.jscomp.type.FlowScope output = flowThrough(source, input);
        com.google.javascript.rhino.Node condition = null;
        com.google.javascript.jscomp.type.FlowScope conditionFlowScope = null;
        com.google.javascript.jscomp.TypeInference.BooleanOutcomePair conditionOutcomes = null;
        java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> branchEdges = getCfg().getOutEdges(source);
        java.util.List<com.google.javascript.jscomp.type.FlowScope> result = com.google.common.collect.Lists.newArrayListWithCapacity(branchEdges.size());
        for (com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> branchEdge : branchEdges) {
            com.google.javascript.jscomp.ControlFlowGraph.Branch branch = branchEdge.getValue();
            com.google.javascript.jscomp.type.FlowScope newScope = output;
            switch (branch) {
                case ON_TRUE :
                    if (com.google.javascript.jscomp.NodeUtil.isForIn(source)) {
                        com.google.javascript.rhino.Node item = source.getFirstChild();
                        com.google.javascript.rhino.Node obj = item.getNext();
                        com.google.javascript.jscomp.type.FlowScope informed = traverse(obj, output.createChildFlowScope());
                        if (item.isVar()) {
                            item = item.getFirstChild();
                        }
                        if (item.isName()) {
                            com.google.javascript.rhino.jstype.JSType iterKeyType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                            com.google.javascript.rhino.jstype.ObjectType objType = getJSType(obj).dereference();
                            com.google.javascript.rhino.jstype.JSType objIndexType = (objType == null) ? null : objType.getIndexType();
                            if ((objIndexType != null) && (!objIndexType.isUnknownType())) {
                                com.google.javascript.rhino.jstype.JSType narrowedKeyType = iterKeyType.getGreatestSubtype(objIndexType);
                                if (!narrowedKeyType.isEmptyType()) {
                                    iterKeyType = narrowedKeyType;
                                }
                            }
                            redeclareSimpleVar(informed, item, iterKeyType);
                        }
                        newScope = informed;
                        break;
                    }
                case ON_FALSE :
                    if (condition == null) {
                        condition = com.google.javascript.jscomp.NodeUtil.getConditionExpression(source);
                        if ((condition == null) && source.isCase()) {
                            condition = source;
                            if (conditionFlowScope == null) {
                                conditionFlowScope = traverse(condition.getFirstChild(), output.createChildFlowScope());
                            }
                        }
                    }
                    if (condition != null) {
                        if (condition.isAnd() || condition.isOr()) {
                            if (conditionOutcomes == null) {
                                conditionOutcomes = (condition.isAnd()) ? traverseAnd(condition, output.createChildFlowScope()) : traverseOr(condition, output.createChildFlowScope());
                            }
                            newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(condition, conditionOutcomes.getOutcomeFlowScope(condition.getType(), branch == com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE), branch == com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE);
                        } else {
                            if (conditionFlowScope == null) {
                                conditionFlowScope = traverse(condition, output.createChildFlowScope());
                            }
                            newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(condition, conditionFlowScope, branch == com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE);
                        }
                    }
                    break;
            }
            result.add(newScope.optimize());
        }
        return result;
    }

    private com.google.javascript.jscomp.type.FlowScope traverse(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.type.FlowScope scope) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                scope = traverseAssign(n, scope);
                break;
            case com.google.javascript.rhino.Token.NAME :
                scope = traverseName(n, scope);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                scope = traverseGetProp(n, scope);
                break;
            case com.google.javascript.rhino.Token.AND :
                scope = traverseAnd(n, scope).getJoinedFlowScope().createChildFlowScope();
                break;
            case com.google.javascript.rhino.Token.OR :
                scope = traverseOr(n, scope).getJoinedFlowScope().createChildFlowScope();
                break;
            case com.google.javascript.rhino.Token.HOOK :
                scope = traverseHook(n, scope);
                break;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                scope = traverseObjectLiteral(n, scope);
                break;
            case com.google.javascript.rhino.Token.CALL :
                scope = traverseCall(n, scope);
                break;
            case com.google.javascript.rhino.Token.NEW :
                scope = traverseNew(n, scope);
                break;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ADD :
                scope = traverseAdd(n, scope);
                break;
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                scope = traverse(n.getFirstChild(), scope);
                n.setJSType(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE));
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                scope = traverseArrayLiteral(n, scope);
                break;
            case com.google.javascript.rhino.Token.THIS :
                n.setJSType(scope.getTypeOfThis());
                break;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.BITNOT :
                scope = traverseChildren(n, scope);
                n.setJSType(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE));
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                scope = traverse(n.getFirstChild(), scope);
                n.setJSType(getJSType(n.getFirstChild()));
                break;
            case com.google.javascript.rhino.Token.COMMA :
                scope = traverseChildren(n, scope);
                n.setJSType(getJSType(n.getLastChild()));
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
                scope = traverseChildren(n, scope);
                n.setJSType(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                break;
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.IN :
                scope = traverseChildren(n, scope);
                n.setJSType(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE));
                break;
            case com.google.javascript.rhino.Token.GETELEM :
                scope = traverseGetElem(n, scope);
                break;
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                scope = traverseChildren(n, scope);
                if (n.getFirstChild().isGetProp()) {
                    ensurePropertyDeclared(n.getFirstChild());
                }
                break;
            case com.google.javascript.rhino.Token.SWITCH :
                scope = traverse(n.getFirstChild(), scope);
                break;
            case com.google.javascript.rhino.Token.RETURN :
                scope = traverseReturn(n, scope);
                break;
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.THROW :
                scope = traverseChildren(n, scope);
                break;
            case com.google.javascript.rhino.Token.CATCH :
                scope = traverseCatch(n, scope);
                break;
        }
        if (!n.isFunction()) {
            com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
            if ((info != null) && info.hasType()) {
                com.google.javascript.rhino.jstype.JSType castType = info.getType().evaluate(syntacticScope, registry);
                if (n.isQualifiedName() && n.getParent().isExprResult()) {
                    updateScopeForTypeChange(scope, n, n.getJSType(), castType);
                }
                n.setJSType(castType);
            }
        }
        return scope;
    }

    private com.google.javascript.jscomp.type.FlowScope traverseReturn(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.type.FlowScope scope) {
        scope = traverseChildren(n, scope);
        com.google.javascript.rhino.Node retValue = n.getFirstChild();
        if (retValue != null) {
            com.google.javascript.rhino.jstype.JSType type = functionScope.getRootNode().getJSType();
            if (type != null) {
                com.google.javascript.rhino.jstype.FunctionType fnType = type.toMaybeFunctionType();
                if (fnType != null) {
                    inferPropertyTypesToMatchConstraint(retValue.getJSType(), fnType.getReturnType());
                }
            }
        }
        return scope;
    }

    private com.google.javascript.jscomp.type.FlowScope traverseCatch(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.type.FlowScope scope) {
        com.google.javascript.rhino.Node name = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType type = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        name.setJSType(type);
        redeclareSimpleVar(scope, name, type);
        return scope;
    }

    private com.google.javascript.jscomp.type.FlowScope traverseAssign(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.type.FlowScope scope) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node right = n.getLastChild();
        scope = traverseChildren(n, scope);
        com.google.javascript.rhino.jstype.JSType leftType = left.getJSType();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(right);
        n.setJSType(rightType);
        updateScopeForTypeChange(scope, left, leftType, rightType);
        return scope;
    }

    private void updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope scope, com.google.javascript.rhino.Node left, com.google.javascript.rhino.jstype.JSType leftType, com.google.javascript.rhino.jstype.JSType resultType) {
        com.google.common.base.Preconditions.checkNotNull(resultType);
        switch (left.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String varName = left.getString();
                com.google.javascript.jscomp.Scope.Var var = syntacticScope.getVar(varName);
                boolean isVarDeclaration = left.hasChildren();
                if (((!isVarDeclaration) || (var == null)) || var.isTypeInferred()) {
                    redeclareSimpleVar(scope, left, resultType);
                }
                left.setJSType(isVarDeclaration || (leftType == null) ? resultType : null);
                if ((var != null) && var.isTypeInferred()) {
                    com.google.javascript.rhino.jstype.JSType oldType = var.getType();
                    var.setType(oldType == null ? resultType : oldType.getLeastSupertype(resultType));
                }
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                java.lang.String qualifiedName = left.getQualifiedName();
                if (qualifiedName != null) {
                    scope.inferQualifiedSlot(left, qualifiedName, leftType == null ? getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE) : leftType, resultType);
                }
                left.setJSType(resultType);
                ensurePropertyDefined(left, resultType);
                break;
        }
    }

    private void ensurePropertyDefined(com.google.javascript.rhino.Node getprop, com.google.javascript.rhino.jstype.JSType rightType) {
        java.lang.String propName = getprop.getLastChild().getString();
        com.google.javascript.rhino.jstype.JSType nodeType = getJSType(getprop.getFirstChild());
        com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(nodeType.restrictByNotNullOrUndefined());
        if (objectType == null) {
            registry.registerPropertyOnType(propName, nodeType);
        } else {
            if (ensurePropertyDeclaredHelper(getprop, objectType)) {
                return;
            }
            if (!objectType.isPropertyTypeDeclared(propName)) {
                if (objectType.hasProperty(propName) || (!objectType.isInstanceType())) {
                    if ("prototype".equals(propName)) {
                        objectType.defineDeclaredProperty(propName, rightType, getprop);
                    } else {
                        objectType.defineInferredProperty(propName, rightType, getprop);
                    }
                } else if (getprop.getFirstChild().isThis() && getJSType(syntacticScope.getRootNode()).isConstructor()) {
                    objectType.defineInferredProperty(propName, rightType, getprop);
                } else {
                    registry.registerPropertyOnType(propName, objectType);
                }
            }
        }
    }

    private void ensurePropertyDeclared(com.google.javascript.rhino.Node getprop) {
        com.google.javascript.rhino.jstype.ObjectType ownerType = com.google.javascript.rhino.jstype.ObjectType.cast(getJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined());
        if (ownerType != null) {
            ensurePropertyDeclaredHelper(getprop, ownerType);
        }
    }

    private boolean ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node getprop, com.google.javascript.rhino.jstype.ObjectType objectType) {
        java.lang.String propName = getprop.getLastChild().getString();
        java.lang.String qName = getprop.getQualifiedName();
        if (qName != null) {
            com.google.javascript.jscomp.Scope.Var var = syntacticScope.getVar(qName);
            if ((var != null) && (!var.isTypeInferred())) {
                if (propName.equals("prototype") || ((!objectType.hasOwnProperty(propName)) && ((!objectType.isInstanceType()) || (var.isExtern() && (!objectType.isNativeObjectType()))))) {
                    return objectType.defineDeclaredProperty(propName, var.getType(), getprop);
                }
            }
        }
        return false;
    }

    private com.google.javascript.jscomp.type.FlowScope traverseName(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.type.FlowScope scope) {
        java.lang.String varName = n.getString();
        com.google.javascript.rhino.Node value = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (value != null) {
            scope = traverse(value, scope);
            updateScopeForTypeChange(scope, n, n.getJSType(), getJSType(value));
            return scope;
        } else {
            com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> var = scope.getSlot(varName);
            if (var != null) {
                boolean isInferred = var.isTypeInferred();
                boolean unflowable = isInferred && isUnflowable(syntacticScope.getVar(varName));
                boolean nonLocalInferredSlot = (isInferred && (syntacticScope.getParent() != null)) && (var == syntacticScope.getParent().getSlot(varName));
                if ((!unflowable) && (!nonLocalInferredSlot)) {
                    type = var.getType();
                    if (type == null) {
                        type = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
                    }
                }
            }
        }
        n.setJSType(type);
        return scope;
    }

    private com.google.javascript.jscomp.type.FlowScope traverseArrayLiteral(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.type.FlowScope scope) {
        scope = traverseChildren(n, scope);
        n.setJSType(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE));
        return scope;
    }

    private com.google.javascript.jscomp.type.FlowScope traverseObjectLiteral(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.type.FlowScope scope) {
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        com.google.common.base.Preconditions.checkNotNull(type);
        for (com.google.javascript.rhino.Node name = n.getFirstChild(); name != null; name = name.getNext()) {
            scope = traverse(name.getFirstChild(), scope);
        }
        com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(type);
        if (objectType == null) {
            return scope;
        }
        boolean hasLendsName = (n.getJSDocInfo() != null) && (n.getJSDocInfo().getLendsName() != null);
        if (objectType.hasReferenceName() && (!hasLendsName)) {
            return scope;
        }
        java.lang.String qObjName = com.google.javascript.jscomp.NodeUtil.getBestLValueName(com.google.javascript.jscomp.NodeUtil.getBestLValue(n));
        for (com.google.javascript.rhino.Node name = n.getFirstChild(); name != null; name = name.getNext()) {
            com.google.javascript.rhino.Node value = name.getFirstChild();
            java.lang.String memberName = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(name);
            if (memberName != null) {
                com.google.javascript.rhino.jstype.JSType rawValueType = name.getFirstChild().getJSType();
                com.google.javascript.rhino.jstype.JSType valueType = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyTypeFromValueType(name, rawValueType);
                if (valueType == null) {
                    valueType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
                }
                objectType.defineInferredProperty(memberName, valueType, name);
                if ((qObjName != null) && name.isStringKey()) {
                    java.lang.String qKeyName = (qObjName + ".") + memberName;
                    com.google.javascript.jscomp.Scope.Var var = syntacticScope.getVar(qKeyName);
                    com.google.javascript.rhino.jstype.JSType oldType = (var == null) ? null : var.getType();
                    if ((var != null) && var.isTypeInferred()) {
                        var.setType(oldType == null ? valueType : oldType.getLeastSupertype(oldType));
                    }
                    scope.inferQualifiedSlot(name, qKeyName, oldType == null ? getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE) : oldType, valueType);
                }
            } else {
                n.setJSType(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
            }
        }
        return scope;
    }

    private com.google.javascript.jscomp.type.FlowScope traverseAdd(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.type.FlowScope scope) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node right = left.getNext();
        scope = traverseChildren(n, scope);
        com.google.javascript.rhino.jstype.JSType leftType = left.getJSType();
        com.google.javascript.rhino.jstype.JSType rightType = right.getJSType();
        com.google.javascript.rhino.jstype.JSType type = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        if ((leftType != null) && (rightType != null)) {
            boolean leftIsUnknown = leftType.isUnknownType();
            boolean rightIsUnknown = rightType.isUnknownType();
            if (leftIsUnknown && rightIsUnknown) {
                type = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            } else if (((!leftIsUnknown) && leftType.isString()) || ((!rightIsUnknown) && rightType.isString())) {
                type = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
            } else if (leftIsUnknown || rightIsUnknown) {
                type = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            } else if (isAddedAsNumber(leftType) && isAddedAsNumber(rightType)) {
                type = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
            } else {
                type = registry.createUnionType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
            }
        }
        n.setJSType(type);
        if (n.isAssignAdd()) {
            updateScopeForTypeChange(scope, left, leftType, type);
        }
        return scope;
    }

    private boolean isAddedAsNumber(com.google.javascript.rhino.jstype.JSType type) {
        return type.isSubtype(registry.createUnionType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE, com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_OBJECT_TYPE));
    }

    private com.google.javascript.jscomp.type.FlowScope traverseHook(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.type.FlowScope scope) {
        com.google.javascript.rhino.Node condition = n.getFirstChild();
        com.google.javascript.rhino.Node trueNode = condition.getNext();
        com.google.javascript.rhino.Node falseNode = n.getLastChild();
        scope = traverse(condition, scope);
        com.google.javascript.jscomp.type.FlowScope trueScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(condition, scope, true);
        com.google.javascript.jscomp.type.FlowScope falseScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(condition, scope, false);
        traverse(trueNode, trueScope.createChildFlowScope());
        traverse(falseNode, falseScope.createChildFlowScope());
        com.google.javascript.rhino.jstype.JSType trueType = trueNode.getJSType();
        com.google.javascript.rhino.jstype.JSType falseType = falseNode.getJSType();
        if ((trueType != null) && (falseType != null)) {
            n.setJSType(trueType.getLeastSupertype(falseType));
        } else {
            n.setJSType(null);
        }
        return scope.createChildFlowScope();
    }

    private com.google.javascript.jscomp.type.FlowScope traverseCall(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.type.FlowScope scope) {
        scope = traverseChildren(n, scope);
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType functionType = getJSType(left).restrictByNotNullOrUndefined();
        if (functionType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType fnType = functionType.toMaybeFunctionType();
            n.setJSType(fnType.getReturnType());
            backwardsInferenceFromCallSite(n, fnType);
        } else if (functionType.equals(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.CHECKED_UNKNOWN_TYPE))) {
            n.setJSType(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.CHECKED_UNKNOWN_TYPE));
        }
        scope = tightenTypesAfterAssertions(scope, n);
        return scope;
    }

    private com.google.javascript.jscomp.type.FlowScope tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope scope, com.google.javascript.rhino.Node callNode) {
        com.google.javascript.rhino.Node left = callNode.getFirstChild();
        com.google.javascript.rhino.Node firstParam = left.getNext();
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec = assertionFunctionsMap.get(left.getQualifiedName());
        if ((assertionFunctionSpec == null) || (firstParam == null)) {
            return scope;
        }
        com.google.javascript.rhino.Node assertedNode = assertionFunctionSpec.getAssertedParam(firstParam);
        if (assertedNode == null) {
            return scope;
        }
        com.google.javascript.rhino.jstype.JSType assertedType = assertionFunctionSpec.getAssertedType(callNode, registry);
        java.lang.String assertedNodeName = assertedNode.getQualifiedName();
        com.google.javascript.rhino.jstype.JSType narrowed;
        if (assertedType == null) {
            scope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(assertedNode, scope, true);
            narrowed = getJSType(assertedNode).restrictByNotNullOrUndefined();
        } else {
            com.google.javascript.rhino.jstype.JSType type = getJSType(assertedNode);
            narrowed = type.getGreatestSubtype(assertedType);
            if ((assertedNodeName != null) && type.differsFrom(narrowed)) {
                scope = narrowScope(scope, assertedNode, narrowed);
            }
        }
        if (getJSType(callNode).differsFrom(narrowed)) {
            callNode.setJSType(narrowed);
        }
        return scope;
    }

    private com.google.javascript.jscomp.type.FlowScope narrowScope(com.google.javascript.jscomp.type.FlowScope scope, com.google.javascript.rhino.Node node, com.google.javascript.rhino.jstype.JSType narrowed) {
        if (node.isThis()) {
            return scope;
        }
        scope = scope.createChildFlowScope();
        if (node.isGetProp()) {
            scope.inferQualifiedSlot(node, node.getQualifiedName(), getJSType(node), narrowed);
        } else {
            redeclareSimpleVar(scope, node, narrowed);
        }
        return scope;
    }

    private void backwardsInferenceFromCallSite(com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.FunctionType fnType) {
        boolean updatedFnType = inferTemplatedTypesForCall(n, fnType);
        if (updatedFnType) {
            fnType = n.getFirstChild().getJSType().toMaybeFunctionType();
        }
        updateTypeOfParameters(n, fnType);
        updateBind(n, fnType);
    }

    private void updateBind(com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.FunctionType fnType) {
        com.google.javascript.jscomp.CodingConvention.Bind bind = compiler.getCodingConvention().describeFunctionBind(n, true);
        if (bind == null) {
            return;
        }
        com.google.javascript.rhino.jstype.FunctionType callTargetFn = getJSType(bind.target).restrictByNotNullOrUndefined().toMaybeFunctionType();
        if (callTargetFn == null) {
            return;
        }
        n.setJSType(callTargetFn.getBindReturnType(bind.getBoundParameterCount() + 1));
    }

    private void updateTypeOfParameters(com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.FunctionType fnType) {
        int i = 0;
        int childCount = n.getChildCount();
        for (com.google.javascript.rhino.Node iParameter : fnType.getParameters()) {
            if ((i + 1) >= childCount) {
                return;
            }
            com.google.javascript.rhino.jstype.JSType iParameterType = getJSType(iParameter);
            com.google.javascript.rhino.Node iArgument = n.getChildAtIndex(i + 1);
            com.google.javascript.rhino.jstype.JSType iArgumentType = getJSType(iArgument);
            inferPropertyTypesToMatchConstraint(iArgumentType, iParameterType);
            com.google.javascript.rhino.jstype.JSType restrictedParameter = iParameterType.restrictByNotNullOrUndefined().toMaybeFunctionType();
            if (restrictedParameter != null) {
                if ((iArgument.isFunction() && iArgumentType.isFunctionType()) && (iArgument.getJSDocInfo() == null)) {
                    iArgument.setJSType(restrictedParameter);
                }
            }
            i++;
        }
    }

    private java.util.Map<com.google.javascript.rhino.jstype.TemplateType, com.google.javascript.rhino.jstype.JSType> inferTemplateTypesFromParameters(com.google.javascript.rhino.jstype.FunctionType fnType, com.google.javascript.rhino.Node call) {
        if (fnType.getTemplateTypeNames().isEmpty() || (!call.hasMoreThanOneChild())) {
            return java.util.Collections.emptyMap();
        }
        java.util.Map<com.google.javascript.rhino.jstype.TemplateType, com.google.javascript.rhino.jstype.JSType> resolvedTypes = com.google.common.collect.Maps.newIdentityHashMap();
        maybeResolveTemplateTypeFromNodes(fnType.getParameters(), call.getChildAtIndex(1).siblings(), resolvedTypes);
        return resolvedTypes;
    }

    private void maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType paramType, com.google.javascript.rhino.jstype.JSType argType, java.util.Map<com.google.javascript.rhino.jstype.TemplateType, com.google.javascript.rhino.jstype.JSType> resolvedTypes) {
        if (paramType.isTemplateType()) {
            resolvedTemplateType(resolvedTypes, paramType.toMaybeTemplateType(), argType);
        } else if (paramType.isUnionType()) {
            com.google.javascript.rhino.jstype.UnionType unionType = paramType.toMaybeUnionType();
            for (com.google.javascript.rhino.jstype.JSType alernative : unionType.getAlternates()) {
                maybeResolveTemplatedType(alernative, argType, resolvedTypes);
            }
        } else if (paramType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType paramFunctionType = paramType.toMaybeFunctionType();
            com.google.javascript.rhino.jstype.FunctionType argFunctionType = argType.restrictByNotNullOrUndefined().collapseUnion().toMaybeFunctionType();
            if ((argFunctionType != null) && argFunctionType.isSubtype(paramType)) {
                maybeResolveTemplatedType(paramFunctionType.getReturnType(), argFunctionType.getReturnType(), resolvedTypes);
                maybeResolveTemplateTypeFromNodes(paramFunctionType.getParameters(), argFunctionType.getParameters(), resolvedTypes);
            }
        } else if (paramType.isParameterizedType()) {
            com.google.javascript.rhino.jstype.ParameterizedType paramObjectType = paramType.toMaybeParameterizedType();
            com.google.javascript.rhino.jstype.JSType typeParameter = paramObjectType.getParameterType();
            com.google.common.base.Preconditions.checkNotNull(typeParameter);
            if (typeParameter != null) {
                com.google.javascript.rhino.jstype.ObjectType argObjectType = argType.restrictByNotNullOrUndefined().collapseUnion().toMaybeParameterizedType();
                if ((argObjectType != null) && argObjectType.isSubtype(paramType)) {
                    com.google.javascript.rhino.jstype.JSType argTypeParameter = argObjectType.getParameterType();
                    com.google.common.base.Preconditions.checkNotNull(argTypeParameter);
                    maybeResolveTemplatedType(typeParameter, argTypeParameter, resolvedTypes);
                }
            }
        }
    }

    private void maybeResolveTemplateTypeFromNodes(java.lang.Iterable<com.google.javascript.rhino.Node> declParams, java.lang.Iterable<com.google.javascript.rhino.Node> callParams, java.util.Map<com.google.javascript.rhino.jstype.TemplateType, com.google.javascript.rhino.jstype.JSType> resolvedTypes) {
        maybeResolveTemplateTypeFromNodes(declParams.iterator(), callParams.iterator(), resolvedTypes);
    }

    private void maybeResolveTemplateTypeFromNodes(java.util.Iterator<com.google.javascript.rhino.Node> declParams, java.util.Iterator<com.google.javascript.rhino.Node> callParams, java.util.Map<com.google.javascript.rhino.jstype.TemplateType, com.google.javascript.rhino.jstype.JSType> resolvedTypes) {
        while (declParams.hasNext() && callParams.hasNext()) {
            maybeResolveTemplatedType(getJSType(declParams.next()), getJSType(callParams.next()), resolvedTypes);
        } 
    }

    private void resolvedTemplateType(java.util.Map<com.google.javascript.rhino.jstype.TemplateType, com.google.javascript.rhino.jstype.JSType> map, com.google.javascript.rhino.jstype.TemplateType template, com.google.javascript.rhino.jstype.JSType resolved) {
        com.google.javascript.rhino.jstype.JSType previous = map.get(template);
        if (!resolved.isUnknownType()) {
            if (previous == null) {
                map.put(template, resolved);
            } else {
                com.google.javascript.rhino.jstype.JSType join = previous.getLeastSupertype(resolved);
                map.put(template, join);
            }
        }
    }

    private static class TemplateTypeReplacer extends com.google.javascript.rhino.jstype.ModificationVisitor {
        private final java.util.Map<com.google.javascript.rhino.jstype.TemplateType, com.google.javascript.rhino.jstype.JSType> replacements;

        private final com.google.javascript.rhino.jstype.JSTypeRegistry registry;

        TemplateTypeReplacer(com.google.javascript.rhino.jstype.JSTypeRegistry registry, java.util.Map<com.google.javascript.rhino.jstype.TemplateType, com.google.javascript.rhino.jstype.JSType> replacements) {
            super(registry);
            this.registry = registry;
            this.replacements = replacements;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseTemplateType(com.google.javascript.rhino.jstype.TemplateType type) {
            com.google.javascript.rhino.jstype.JSType replacement = replacements.get(type);
            return replacement != null ? replacement : registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
    }

    private boolean inferTemplatedTypesForCall(com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.FunctionType fnType) {
        if (fnType.getTemplateTypeNames().isEmpty()) {
            return false;
        }
        java.util.Map<com.google.javascript.rhino.jstype.TemplateType, com.google.javascript.rhino.jstype.JSType> inferred = inferTemplateTypesFromParameters(fnType, n);
        if (inferred.size() > 0) {
            com.google.javascript.jscomp.TypeInference.TemplateTypeReplacer replacer = new com.google.javascript.jscomp.TypeInference.TemplateTypeReplacer(registry, inferred);
            com.google.javascript.rhino.Node callTarget = n.getFirstChild();
            com.google.javascript.rhino.jstype.FunctionType replacementFnType = fnType.visit(replacer).toMaybeFunctionType();
            com.google.common.base.Preconditions.checkNotNull(replacementFnType);
            callTarget.setJSType(replacementFnType);
            n.setJSType(replacementFnType.getReturnType());
            return true;
        }
        return false;
    }

    private com.google.javascript.jscomp.type.FlowScope traverseNew(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.type.FlowScope scope) {
        scope = traverseChildren(n, scope);
        com.google.javascript.rhino.Node constructor = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType constructorType = constructor.getJSType();
        com.google.javascript.rhino.jstype.JSType type = null;
        if (constructorType != null) {
            constructorType = constructorType.restrictByNotNullOrUndefined();
            if (constructorType.isUnknownType()) {
                type = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            } else {
                com.google.javascript.rhino.jstype.FunctionType ct = constructorType.toMaybeFunctionType();
                if ((ct == null) && (constructorType instanceof com.google.javascript.rhino.jstype.FunctionType)) {
                    ct = ((com.google.javascript.rhino.jstype.FunctionType) (constructorType));
                }
                if ((ct != null) && ct.isConstructor()) {
                    type = ct.getInstanceType();
                    backwardsInferenceFromCallSite(n, ct);
                }
            }
        }
        n.setJSType(type);
        return scope;
    }

    private com.google.javascript.jscomp.TypeInference.BooleanOutcomePair traverseAnd(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.type.FlowScope scope) {
        return traverseShortCircuitingBinOp(n, scope, true);
    }

    private com.google.javascript.jscomp.type.FlowScope traverseChildren(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.type.FlowScope scope) {
        for (com.google.javascript.rhino.Node el = n.getFirstChild(); el != null; el = el.getNext()) {
            scope = traverse(el, scope);
        }
        return scope;
    }

    private com.google.javascript.jscomp.type.FlowScope traverseGetElem(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.type.FlowScope scope) {
        scope = traverseChildren(n, scope);
        com.google.javascript.rhino.jstype.ObjectType objType = com.google.javascript.rhino.jstype.ObjectType.cast(getJSType(n.getFirstChild()).restrictByNotNullOrUndefined());
        if (objType != null) {
            com.google.javascript.rhino.jstype.JSType type = objType.getParameterType();
            if (type != null) {
                n.setJSType(type);
            }
        }
        return dereferencePointer(n.getFirstChild(), scope);
    }

    private com.google.javascript.jscomp.type.FlowScope traverseGetProp(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.type.FlowScope scope) {
        com.google.javascript.rhino.Node objNode = n.getFirstChild();
        com.google.javascript.rhino.Node property = n.getLastChild();
        scope = traverseChildren(n, scope);
        n.setJSType(getPropertyType(objNode.getJSType(), property.getString(), n, scope));
        return dereferencePointer(n.getFirstChild(), scope);
    }

    private void inferPropertyTypesToMatchConstraint(com.google.javascript.rhino.jstype.JSType type, com.google.javascript.rhino.jstype.JSType constraint) {
        if ((type == null) || (constraint == null)) {
            return;
        }
        com.google.javascript.rhino.jstype.ObjectType constraintObj = com.google.javascript.rhino.jstype.ObjectType.cast(constraint.restrictByNotNullOrUndefined());
        if (constraintObj != null) {
            type.matchConstraint(constraintObj);
        }
    }

    private com.google.javascript.jscomp.type.FlowScope dereferencePointer(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.type.FlowScope scope) {
        if (n.isQualifiedName()) {
            com.google.javascript.rhino.jstype.JSType type = getJSType(n);
            com.google.javascript.rhino.jstype.JSType narrowed = type.restrictByNotNullOrUndefined();
            if (type != narrowed) {
                scope = narrowScope(scope, n, narrowed);
            }
        }
        return scope;
    }

    private com.google.javascript.rhino.jstype.JSType getPropertyType(com.google.javascript.rhino.jstype.JSType objType, java.lang.String propName, com.google.javascript.rhino.Node n, com.google.javascript.jscomp.type.FlowScope scope) {
        com.google.javascript.rhino.jstype.JSType unknownType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        com.google.javascript.rhino.jstype.JSType propertyType = null;
        boolean isLocallyInferred = false;
        java.lang.String qualifiedName = n.getQualifiedName();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> var = scope.getSlot(qualifiedName);
        if (var != null) {
            com.google.javascript.rhino.jstype.JSType varType = var.getType();
            if (varType != null) {
                boolean isDeclared = !var.isTypeInferred();
                isLocallyInferred = var != syntacticScope.getSlot(qualifiedName);
                if (isDeclared || isLocallyInferred) {
                    propertyType = varType;
                }
            }
        }
        if ((propertyType == null) && (objType != null)) {
            com.google.javascript.rhino.jstype.JSType foundType = objType.findPropertyType(propName);
            if (foundType != null) {
                propertyType = foundType;
            }
        }
        if (((propertyType == null) || propertyType.isUnknownType()) && (qualifiedName != null)) {
            com.google.javascript.rhino.jstype.ObjectType regType = com.google.javascript.rhino.jstype.ObjectType.cast(registry.getType(qualifiedName));
            if (regType != null) {
                propertyType = regType.getConstructor();
            }
        }
        if (propertyType == null) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        } else if (propertyType.equals(unknownType) && isLocallyInferred) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.CHECKED_UNKNOWN_TYPE);
        } else {
            return propertyType;
        }
    }

    private com.google.javascript.jscomp.TypeInference.BooleanOutcomePair traverseOr(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.type.FlowScope scope) {
        return traverseShortCircuitingBinOp(n, scope, false);
    }

    private com.google.javascript.jscomp.TypeInference.BooleanOutcomePair traverseShortCircuitingBinOp(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.type.FlowScope scope, boolean condition) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node right = n.getLastChild();
        com.google.javascript.jscomp.TypeInference.BooleanOutcomePair leftLiterals = traverseWithinShortCircuitingBinOp(left, scope.createChildFlowScope());
        com.google.javascript.rhino.jstype.JSType leftType = left.getJSType();
        com.google.javascript.jscomp.type.FlowScope rightScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(left, leftLiterals.getOutcomeFlowScope(left.getType(), condition), condition);
        com.google.javascript.jscomp.TypeInference.BooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp(right, rightScope.createChildFlowScope());
        com.google.javascript.rhino.jstype.JSType rightType = right.getJSType();
        com.google.javascript.rhino.jstype.JSType type;
        com.google.javascript.jscomp.TypeInference.BooleanOutcomePair literals;
        if ((leftType != null) && (rightType != null)) {
            leftType = leftType.getRestrictedTypeGivenToBooleanOutcome(!condition);
            if (leftLiterals.toBooleanOutcomes == com.google.javascript.rhino.jstype.BooleanLiteralSet.get(!condition)) {
                type = leftType;
                literals = leftLiterals;
            } else {
                type = leftType.getLeastSupertype(rightType);
                literals = getBooleanOutcomePair(leftLiterals, rightLiterals, condition);
            }
            if ((literals.booleanValues == com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY) && getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE).isSubtype(type)) {
                if (type.isUnionType()) {
                    type = type.toMaybeUnionType().getRestrictedUnion(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE));
                }
            }
        } else {
            type = null;
            literals = new com.google.javascript.jscomp.TypeInference.BooleanOutcomePair(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH, com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH, leftLiterals.getJoinedFlowScope(), rightLiterals.getJoinedFlowScope());
        }
        n.setJSType(type);
        return literals;
    }

    private com.google.javascript.jscomp.TypeInference.BooleanOutcomePair traverseWithinShortCircuitingBinOp(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.type.FlowScope scope) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.AND :
                return traverseAnd(n, scope);
            case com.google.javascript.rhino.Token.OR :
                return traverseOr(n, scope);
            default :
                scope = traverse(n, scope);
                return newBooleanOutcomePair(n.getJSType(), scope);
        }
    }

    com.google.javascript.jscomp.TypeInference.BooleanOutcomePair getBooleanOutcomePair(com.google.javascript.jscomp.TypeInference.BooleanOutcomePair left, com.google.javascript.jscomp.TypeInference.BooleanOutcomePair right, boolean condition) {
        return new com.google.javascript.jscomp.TypeInference.BooleanOutcomePair(com.google.javascript.jscomp.TypeInference.getBooleanOutcomes(left.toBooleanOutcomes, right.toBooleanOutcomes, condition), com.google.javascript.jscomp.TypeInference.getBooleanOutcomes(left.booleanValues, right.booleanValues, condition), left.getJoinedFlowScope(), right.getJoinedFlowScope());
    }

    static com.google.javascript.rhino.jstype.BooleanLiteralSet getBooleanOutcomes(com.google.javascript.rhino.jstype.BooleanLiteralSet left, com.google.javascript.rhino.jstype.BooleanLiteralSet right, boolean condition) {
        return right.union(left.intersection(com.google.javascript.rhino.jstype.BooleanLiteralSet.get(!condition)));
    }

    private final class BooleanOutcomePair {
        final com.google.javascript.rhino.jstype.BooleanLiteralSet toBooleanOutcomes;

        final com.google.javascript.rhino.jstype.BooleanLiteralSet booleanValues;

        final com.google.javascript.jscomp.type.FlowScope leftScope;

        final com.google.javascript.jscomp.type.FlowScope rightScope;

        com.google.javascript.jscomp.type.FlowScope joinedScope = null;

        BooleanOutcomePair(com.google.javascript.rhino.jstype.BooleanLiteralSet toBooleanOutcomes, com.google.javascript.rhino.jstype.BooleanLiteralSet booleanValues, com.google.javascript.jscomp.type.FlowScope leftScope, com.google.javascript.jscomp.type.FlowScope rightScope) {
            this.toBooleanOutcomes = toBooleanOutcomes;
            this.booleanValues = booleanValues;
            this.leftScope = leftScope;
            this.rightScope = rightScope;
        }

        com.google.javascript.jscomp.type.FlowScope getJoinedFlowScope() {
            if (joinedScope == null) {
                if (leftScope == rightScope) {
                    joinedScope = rightScope;
                } else {
                    joinedScope = join(leftScope, rightScope);
                }
            }
            return joinedScope;
        }

        com.google.javascript.jscomp.type.FlowScope getOutcomeFlowScope(int nodeType, boolean outcome) {
            if (((nodeType == com.google.javascript.rhino.Token.AND) && outcome) || ((nodeType == com.google.javascript.rhino.Token.OR) && (!outcome))) {
                return rightScope;
            } else {
                return getJoinedFlowScope();
            }
        }
    }

    private com.google.javascript.jscomp.TypeInference.BooleanOutcomePair newBooleanOutcomePair(com.google.javascript.rhino.jstype.JSType jsType, com.google.javascript.jscomp.type.FlowScope flowScope) {
        if (jsType == null) {
            return new com.google.javascript.jscomp.TypeInference.BooleanOutcomePair(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH, com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH, flowScope, flowScope);
        }
        return new com.google.javascript.jscomp.TypeInference.BooleanOutcomePair(jsType.getPossibleToBooleanOutcomes(), registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE).isSubtype(jsType) ? com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH : com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY, flowScope, flowScope);
    }

    private void redeclareSimpleVar(com.google.javascript.jscomp.type.FlowScope scope, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType varType) {
        com.google.common.base.Preconditions.checkState(nameNode.isName());
        java.lang.String varName = nameNode.getString();
        if (varType == null) {
            varType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        if (isUnflowable(syntacticScope.getVar(varName))) {
            return;
        }
        scope.inferSlotType(varName, varType);
    }

    private boolean isUnflowable(com.google.javascript.jscomp.Scope.Var v) {
        return (((v != null) && v.isLocal()) && v.isMarkedEscaped()) && (v.getScope() == syntacticScope);
    }

    private com.google.javascript.rhino.jstype.JSType getJSType(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType jsType = n.getJSType();
        if (jsType == null) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(338).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(338).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(338).collectInput("com.google.javascript.jscomp.TypeInference.this.registry",com.google.javascript.jscomp.TypeInference.this.registry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(338).collectInput("com.google.javascript.jscomp.TypeInference.this.assertionFunctionsMap",com.google.javascript.jscomp.TypeInference.this.assertionFunctionsMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(338).collectInput("com.google.javascript.jscomp.TypeInference.this.bottomScope",com.google.javascript.jscomp.TypeInference.this.bottomScope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(338).collectInput("com.google.javascript.jscomp.TypeInference.this.compiler",com.google.javascript.jscomp.TypeInference.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(338).collectInput("com.google.javascript.jscomp.TypeInference.FUNCTION_LITERAL_UNDEFINED_THIS",com.google.javascript.jscomp.TypeInference.FUNCTION_LITERAL_UNDEFINED_THIS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(338).collectInput("com.google.javascript.jscomp.TypeInference.this.syntacticScope",com.google.javascript.jscomp.TypeInference.this.syntacticScope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(338).collectInput("jsType",jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(338).collectInput("com.google.javascript.jscomp.TypeInference.this.reverseInterpreter",com.google.javascript.jscomp.TypeInference.this.reverseInterpreter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(338).collectInput("com.google.javascript.jscomp.TypeInference.this.functionScope",com.google.javascript.jscomp.TypeInference.this.functionScope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(338).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(338).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(338).collectionEnds();
            }
            if (runtimeAngelicValue)
                return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);

        } else {
            return jsType;
        }
    }

    private com.google.javascript.rhino.jstype.JSType getNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return registry.getNativeType(typeId);
    }
}
[1234334] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659922408016
GPR[SSUN]-1659922408016
-323087623
GPR[SPVATF]-1659922408250
GPR[EPVATF]-1659922408417
GPR[SPS]-1659922408417
[1235133] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DiagnosticGroup:119.
GPR[EPS]-1659922408816
GPR[ESUN]-1659922408816
GPR[SSUN]-1659922408816
-323087623
GPR[SPVATF]-1659922409020
GPR[EPVATF]-1659922409188
GPR[SPS]-1659922409188
[1235897] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DiagnosticGroup:118.
GPR[EPS]-1659922409579
GPR[SPVATF]-1659922409580
GPR[EPVATF]-1659922409741
GPR[SPS]-1659922409741
[1236449] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DiagnosticGroup:118.
GPR[EPS]-1659922410131
GPR[ESUN]-1659922410131
GPR[SSUN]-1659922410131
-323087623
GPR[SPVATF]-1659922410331
GPR[EPVATF]-1659922410496
GPR[SPS]-1659922410496
[1237208] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DiagnosticGroup:117.
GPR[EPS]-1659922410890
GPR[ESUN]-1659922410890
GPR[SSUN]-1659922410890
1965452846
GPR[ESUN]-1659922411102
GPR[SSUN]-1659922411102
1965452846
GPR[ESUN]-1659922411308
GPR[SSUN]-1659922411308
GPR[ESUN]-1659922411308
GPR[SSUN]-1659922411308
-1117079791
GPR[ESUN]-1659922411503
GPR[SSUN]-1659922411503
-1117079791
GPR[SPVATF]-1659922411730
GPR[EPVATF]-1659922417345
GPR[SPS]-1659922417345
[1244129] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:467.
GPR[EPS]-1659922417811
GPR[SPVATF]-1659922417811
GPR[EPVATF]-1659922418411
GPR[SPS]-1659922418411
[1245206] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:467.
GPR[EPS]-1659922418888
GPR[ESUN]-1659922418888
GPR[SSUN]-1659922418888
-1117079791
GPR[ESUN]-1659922419180
GPR[SSUN]-1659922419180
-1117079791
GPR[SPVATF]-1659922419375
GPR[EPVATF]-1659922419669
GPR[SPS]-1659922419669
[1246423] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:466.
GPR[EPS]-1659922420105
GPR[ESUN]-1659922420105
GPR[SSUN]-1659922420105
-1117079791
GPR[SPVATF]-1659922420299
GPR[EPVATF]-1659922420582
GPR[SPS]-1659922420582
[1247336] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:465.
GPR[EPS]-1659922421018
GPR[ESUN]-1659922421018
GPR[SSUN]-1659922421018
-1117079791
GPR[SPVATF]-1659922421213
GPR[EPVATF]-1659922421495
GPR[SPS]-1659922421495
[1248244] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:464.
GPR[EPS]-1659922421927
GPR[ESUN]-1659922421927
GPR[SSUN]-1659922421927
-1117079791
GPR[SPVATF]-1659922422122
GPR[EPVATF]-1659922422407
GPR[SPS]-1659922422407
[1249176] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:463.
GPR[EPS]-1659922422858
GPR[ESUN]-1659922422858
GPR[SSUN]-1659922422858
-1117079791
GPR[SPVATF]-1659922423052
GPR[EPVATF]-1659922423328
GPR[SPS]-1659922423328
[1250079] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:462.
GPR[EPS]-1659922423761
GPR[ESUN]-1659922423762
GPR[SSUN]-1659922423762
-1117079791
GPR[SPVATF]-1659922423956
GPR[EPVATF]-1659922424236
GPR[SPS]-1659922424236
[1250987] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:119.
GPR[EPS]-1659922424669
GPR[ESUN]-1659922424669
GPR[SSUN]-1659922424669
160819208
GPR[SPVATF]-1659922424901
GPR[EPVATF]-1659922425215
GPR[SPS]-1659922425215
[1251927] ERROR ConstraintModelBuilder - Unable to compile the change: 
final class ControlFlowAnalysis implements com.google.javascript.jscomp.NodeTraversal.Callback , com.google.javascript.jscomp.CompilerPass {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> cfg;

    private java.util.Map<com.google.javascript.rhino.Node, java.lang.Integer> astPosition;

    private java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer> nodePriorities;

    private final java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> priorityComparator = new java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>() {
        @java.lang.Override
        public int compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> a, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> b) {
            return astPosition.get(a.getValue()) - astPosition.get(b.getValue());
        }
    };

    private int astPositionCounter;

    private int priorityCounter;

    private final boolean shouldTraverseFunctions;

    private final boolean edgeAnnotations;

    private com.google.javascript.rhino.Node root;

    private final java.util.Deque<com.google.javascript.rhino.Node> exceptionHandler = new java.util.ArrayDeque<com.google.javascript.rhino.Node>();

    private final com.google.common.collect.Multimap<com.google.javascript.rhino.Node, com.google.javascript.rhino.Node> finallyMap = com.google.common.collect.HashMultimap.create();

    ControlFlowAnalysis(com.google.javascript.jscomp.AbstractCompiler compiler, boolean shouldTraverseFunctions, boolean edgeAnnotations) {
        this.compiler = compiler;
        this.shouldTraverseFunctions = shouldTraverseFunctions;
        this.edgeAnnotations = edgeAnnotations;
    }

    com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> getCfg() {
        return cfg;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        this.root = root;
        astPositionCounter = 0;
        astPosition = com.google.common.collect.Maps.newHashMap();
        nodePriorities = com.google.common.collect.Maps.newHashMap();
        cfg = new com.google.javascript.jscomp.ControlFlowAnalysis.AstControlFlowGraph(com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(root), nodePriorities, edgeAnnotations);
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, this);
        astPosition.put(null, ++astPositionCounter);
        priorityCounter = 0;
        com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> entry = cfg.getEntry();
        prioritizeFromEntryNode(entry);
        if (shouldTraverseFunctions) {
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> candidate : cfg.getDirectedGraphNodes()) {
                com.google.javascript.rhino.Node value = candidate.getValue();
                if ((value != null) && value.isFunction()) {
                    com.google.common.base.Preconditions.checkState((!nodePriorities.containsKey(candidate)) || (candidate == entry));
                    prioritizeFromEntryNode(candidate);
                }
            }
        }
        for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> candidate : cfg.getDirectedGraphNodes()) {
            if (!nodePriorities.containsKey(candidate)) {
                nodePriorities.put(candidate, ++priorityCounter);
            }
        }
        nodePriorities.put(cfg.getImplicitReturn(), ++priorityCounter);
    }

    private void prioritizeFromEntryNode(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> entry) {
        java.util.PriorityQueue<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> worklist = new java.util.PriorityQueue<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>(10, priorityComparator);
        worklist.add(entry);
        while (!worklist.isEmpty()) {
            com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> current = worklist.remove();
            if (nodePriorities.containsKey(current)) {
                continue;
            }
            nodePriorities.put(current, ++priorityCounter);
            java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> successors = cfg.getDirectedSuccNodes(current);
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> candidate : successors) {
                worklist.add(candidate);
            }
        } 
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        astPosition.put(n, astPositionCounter++);
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                if (shouldTraverseFunctions || (n == cfg.getEntry().getValue())) {
                    exceptionHandler.push(n);
                    return true;
                }
                return false;
            case com.google.javascript.rhino.Token.TRY :
                exceptionHandler.push(n);
                return true;
        }
        if (parent != null) {
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.FOR :
                    return n == parent.getLastChild();
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.WITH :
                    return n != parent.getFirstChild();
                case com.google.javascript.rhino.Token.DO :
                    return n != parent.getFirstChild().getNext();
                case com.google.javascript.rhino.Token.SWITCH :
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.CATCH :
                case com.google.javascript.rhino.Token.LABEL :
                    return n != parent.getFirstChild();
                case com.google.javascript.rhino.Token.FUNCTION :
                    return n == parent.getFirstChild().getNext().getNext();
                case com.google.javascript.rhino.Token.CONTINUE :
                case com.google.javascript.rhino.Token.BREAK :
                case com.google.javascript.rhino.Token.EXPR_RESULT :
                case com.google.javascript.rhino.Token.VAR :
                case com.google.javascript.rhino.Token.RETURN :
                case com.google.javascript.rhino.Token.THROW :
                    return false;
                case com.google.javascript.rhino.Token.TRY :
                    if (n == parent.getFirstChild().getNext()) {
                        com.google.common.base.Preconditions.checkState(exceptionHandler.peek() == parent);
                        exceptionHandler.pop();
                    }
            }
        }
        return true;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.IF :
                handleIf(n);
                return;
            case com.google.javascript.rhino.Token.WHILE :
                handleWhile(n);
                return;
            case com.google.javascript.rhino.Token.DO :
                handleDo(n);
                return;
            case com.google.javascript.rhino.Token.FOR :
                handleFor(n);
                return;
            case com.google.javascript.rhino.Token.SWITCH :
                handleSwitch(n);
                return;
            case com.google.javascript.rhino.Token.CASE :
                handleCase(n);
                return;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                handleDefault(n);
                return;
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.SCRIPT :
                handleStmtList(n);
                return;
            case com.google.javascript.rhino.Token.FUNCTION :
                handleFunction(n);
                return;
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                handleExpr(n);
                return;
            case com.google.javascript.rhino.Token.THROW :
                handleThrow(n);
                return;
            case com.google.javascript.rhino.Token.TRY :
                handleTry(n);
                return;
            case com.google.javascript.rhino.Token.CATCH :
                handleCatch(n);
                return;
            case com.google.javascript.rhino.Token.BREAK :
                handleBreak(n);
                return;
            case com.google.javascript.rhino.Token.CONTINUE :
                handleContinue(n);
                return;
            case com.google.javascript.rhino.Token.RETURN :
                handleReturn(n);
                return;
            case com.google.javascript.rhino.Token.WITH :
                handleWith(n);
                return;
            case com.google.javascript.rhino.Token.LABEL :
                return;
            default :
                handleStmt(n);
                return;
        }
    }

    private void handleIf(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node thenBlock = node.getFirstChild().getNext();
        com.google.javascript.rhino.Node elseBlock = thenBlock.getNext();
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(thenBlock));
        if (elseBlock == null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        } else {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(elseBlock));
        }
        connectToPossibleExceptionHandler(node, com.google.javascript.jscomp.NodeUtil.getConditionExpression(node));
    }

    private void handleWhile(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getFirstChild().getNext()));
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, com.google.javascript.jscomp.NodeUtil.getConditionExpression(node));
    }

    private void handleDo(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getFirstChild()));
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, com.google.javascript.jscomp.NodeUtil.getConditionExpression(node));
    }

    private void handleFor(com.google.javascript.rhino.Node forNode) {
        if (forNode.getChildCount() == 4) {
            com.google.javascript.rhino.Node init = forNode.getFirstChild();
            com.google.javascript.rhino.Node cond = init.getNext();
            com.google.javascript.rhino.Node iter = cond.getNext();
            com.google.javascript.rhino.Node body = iter.getNext();
            createEdge(init, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, forNode);
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(body));
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(forNode, this));
            createEdge(iter, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, forNode);
            connectToPossibleExceptionHandler(init, init);
            connectToPossibleExceptionHandler(forNode, cond);
            connectToPossibleExceptionHandler(iter, iter);
        } else {
            com.google.javascript.rhino.Node item = forNode.getFirstChild();
            com.google.javascript.rhino.Node collection = item.getNext();
            com.google.javascript.rhino.Node body = collection.getNext();
            createEdge(collection, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, forNode);
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(body));
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(forNode, this));
            connectToPossibleExceptionHandler(forNode, collection);
        }
    }

    private void handleSwitch(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node next = com.google.javascript.jscomp.ControlFlowAnalysis.getNextSiblingOfType(node.getFirstChild().getNext(), com.google.javascript.rhino.Token.CASE, com.google.javascript.rhino.Token.EMPTY);
        if (next != null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, next);
        } else if (node.getFirstChild().getNext() != null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getFirstChild().getNext());
        } else {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        }
        connectToPossibleExceptionHandler(node, node.getFirstChild());
    }

    private void handleCase(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, node.getFirstChild().getNext());
        com.google.javascript.rhino.Node next = com.google.javascript.jscomp.ControlFlowAnalysis.getNextSiblingOfType(node.getNext(), com.google.javascript.rhino.Token.CASE);
        if (next != null) {
            com.google.common.base.Preconditions.checkState(next.isCase());
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, next);
        } else {
            com.google.javascript.rhino.Node parent = node.getParent();
            com.google.javascript.rhino.Node deflt = com.google.javascript.jscomp.ControlFlowAnalysis.getNextSiblingOfType(parent.getFirstChild().getNext(), com.google.javascript.rhino.Token.DEFAULT_CASE);
            if (deflt != null) {
                createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, deflt);
            } else {
                createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
            }
        }
        connectToPossibleExceptionHandler(node, node.getFirstChild());
    }

    private void handleDefault(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getFirstChild());
    }

    private void handleWith(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getLastChild());
        connectToPossibleExceptionHandler(node, node.getFirstChild());
    }

    private void handleStmtList(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node parent = node.getParent();
        if ((((node.isBlock() && (parent != null)) && parent.isTry()) && (com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent) == node)) && (!com.google.javascript.jscomp.NodeUtil.hasCatchHandler(node))) {
            return;
        }
        com.google.javascript.rhino.Node child = node.getFirstChild();
        while ((child != null) && child.isFunction()) {
            child = child.getNext();
        } 
        if (child != null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(child));
        } else {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        }
        if (parent != null) {
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.DEFAULT_CASE :
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.TRY :
                    break;
                default :
                    if (node.isBlock() && node.isSyntheticBlock()) {
                        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.SYN_BLOCK, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
                    }
                    break;
            }
        }
    }

    private void handleFunction(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkState(node.getChildCount() >= 3);
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getFirstChild().getNext().getNext()));
        com.google.common.base.Preconditions.checkState(exceptionHandler.peek() == node);
        exceptionHandler.pop();
    }

    private void handleExpr(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, node);
    }

    private void handleThrow(com.google.javascript.rhino.Node node) {
        connectToPossibleExceptionHandler(node, node);
    }

    private void handleTry(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getFirstChild());
    }

    private void handleCatch(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getLastChild());
    }

    private void handleBreak(com.google.javascript.rhino.Node node) {
        java.lang.String label = null;
        if (node.hasChildren()) {
            label = node.getFirstChild().getString();
        }
        com.google.javascript.rhino.Node cur;
        com.google.javascript.rhino.Node previous = null;
        com.google.javascript.rhino.Node lastJump;
        com.google.javascript.rhino.Node parent = node.getParent();
        for (cur = node, lastJump = node; !com.google.javascript.jscomp.ControlFlowAnalysis.isBreakTarget(cur, label); cur = parent , parent = parent.getParent()) {
            if ((cur.isTry() && com.google.javascript.jscomp.NodeUtil.hasFinally(cur)) && (cur.getLastChild() != previous)) {
                if (lastJump == node) {
                    createEdge(lastJump, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));
                } else {
                    finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));
                }
                lastJump = cur;
            }
            if (parent == null) {
                if (compiler.isIdeMode()) {
                    return;
                } else {
                    throw new java.lang.IllegalStateException("Cannot find break target.");
                }
            }
            previous = cur;
        }
        if (lastJump == node) {
            createEdge(lastJump, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(cur, this));
        } else {
            finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(cur, this));
        }
    }

    private void handleContinue(com.google.javascript.rhino.Node node) {
        java.lang.String label = null;
        if (node.hasChildren()) {
            label = node.getFirstChild().getString();
        }
        com.google.javascript.rhino.Node cur;
        com.google.javascript.rhino.Node previous = null;
        com.google.javascript.rhino.Node lastJump;
        com.google.javascript.rhino.Node parent = node.getParent();
        for (cur = node, lastJump = node; !com.google.javascript.jscomp.ControlFlowAnalysis.isContinueTarget(cur, parent, label); cur = parent , parent = parent.getParent()) {
            if ((cur.isTry() && com.google.javascript.jscomp.NodeUtil.hasFinally(cur)) && (cur.getLastChild() != previous)) {
                if (lastJump == node) {
                    createEdge(lastJump, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, cur.getLastChild());
                } else {
                    finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));
                }
                lastJump = cur;
            }
            com.google.common.base.Preconditions.checkState(parent != null, "Cannot find continue target.");
            previous = cur;
        }
        com.google.javascript.rhino.Node iter = cur;
        if (cur.getChildCount() == 4) {
            iter = cur.getFirstChild().getNext().getNext();
        }
        if (lastJump == node) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, iter);
        } else {
            finallyMap.put(lastJump, iter);
        }
    }

    private void handleReturn(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node lastJump = null;
        for (java.util.Iterator<com.google.javascript.rhino.Node> iter = exceptionHandler.iterator(); iter.hasNext();) {
            com.google.javascript.rhino.Node curHandler = iter.next();
            if (curHandler.isFunction()) {
                break;
            }
            if (com.google.javascript.jscomp.NodeUtil.hasFinally(curHandler)) {
                if (lastJump == null) {
                    createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, curHandler.getLastChild());
                } else {
                    finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(curHandler.getLastChild()));
                }
                lastJump = curHandler;
            }
        }
        if (node.hasChildren()) {
            connectToPossibleExceptionHandler(node, node.getFirstChild());
        }
        if (lastJump == null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, null);
        } else {
            finallyMap.put(lastJump, null);
        }
    }

    private void handleStmt(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, node);
    }

    static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.ControlFlowAnalysis cfa) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, node, cfa);
    }

    static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node node) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, node, null);
    }

    private static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node fromNode, com.google.javascript.rhino.Node node, com.google.javascript.jscomp.ControlFlowAnalysis cfa) {
        com.google.javascript.rhino.Node parent = node.getParent();
        if (((parent == null) || parent.isFunction()) || ((cfa != null) && (node == cfa.root))) {
            return null;
        }
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.IF :
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
            case com.google.javascript.rhino.Token.CASE :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                if (parent.getNext() != null) {
                    if (parent.getNext().isCase()) {
                        return parent.getNext().getFirstChild().getNext();
                    } else if (parent.getNext().isDefaultCase()) {
                        return parent.getNext().getFirstChild();
                    } else {
                        com.google.common.base.Preconditions.checkState(false, "Not reachable");
                    }
                } else {
                    return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                }
                break;
            case com.google.javascript.rhino.Token.FOR :
                if (com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                    return parent;
                } else {
                    return parent.getFirstChild().getNext().getNext();
                }
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
                return parent;
            case com.google.javascript.rhino.Token.TRY :
                if (parent.getFirstChild() == node) {
                    if (com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(parent.getLastChild());
                    } else {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                    }
                } else if (com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent) == node) {
                    if (com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getNext());
                    } else {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                    }
                } else if (parent.getLastChild() == node) {
                    if (cfa != null) {
                        for (com.google.javascript.rhino.Node finallyNode : cfa.finallyMap.get(parent)) {
                            cfa.createEdge(fromNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, finallyNode);
                        }
                    }
                    return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                }
        }
        com.google.javascript.rhino.Node nextSibling = node.getNext();
        while ((nextSibling != null) && nextSibling.isFunction()) {
            nextSibling = nextSibling.getNext();
        } 
        if (nextSibling != null) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(351).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("cfa.finallyMap",cfa.finallyMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("fromNode",fromNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("cfa.root",cfa.root);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("cfa.astPosition",cfa.astPosition);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("cfa.exceptionHandler",cfa.exceptionHandler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("cfa.shouldTraverseFunctions",cfa.shouldTraverseFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("nextSibling",nextSibling);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("cfa.cfg",cfa.cfg);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("node",node);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("cfa.priorityComparator",cfa.priorityComparator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("cfa.edgeAnnotations",cfa.edgeAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("cfa.astPositionCounter",cfa.astPositionCounter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("cfa.compiler",cfa.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("cfa.nodePriorities",cfa.nodePriorities);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("cfa.priorityCounter",cfa.priorityCounter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("cfa",cfa);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectionEnds();
            }
            if (runtimeAngelicValue)
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(nextSibling);

        } else {
            return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
        }
    }

    static com.google.javascript.rhino.Node computeFallThrough(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.DO :
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(n.getFirstChild());
            case com.google.javascript.rhino.Token.FOR :
                if (com.google.javascript.jscomp.NodeUtil.isForIn(n)) {
                    return n.getFirstChild().getNext();
                }
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(n.getFirstChild());
            case com.google.javascript.rhino.Token.LABEL :
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(n.getLastChild());
            default :
                return n;
        }
    }

    private void createEdge(com.google.javascript.rhino.Node fromNode, com.google.javascript.jscomp.ControlFlowGraph.Branch branch, com.google.javascript.rhino.Node toNode) {
        cfg.createNode(fromNode);
        cfg.createNode(toNode);
        cfg.connectIfNotFound(fromNode, branch, toNode);
    }

    private void connectToPossibleExceptionHandler(com.google.javascript.rhino.Node cfgNode, com.google.javascript.rhino.Node target) {
        if (com.google.javascript.jscomp.ControlFlowAnalysis.mayThrowException(target) && (!exceptionHandler.isEmpty())) {
            com.google.javascript.rhino.Node lastJump = cfgNode;
            for (com.google.javascript.rhino.Node handler : exceptionHandler) {
                if (handler.isFunction()) {
                    return;
                }
                com.google.common.base.Preconditions.checkState(handler.isTry());
                com.google.javascript.rhino.Node catchBlock = com.google.javascript.jscomp.NodeUtil.getCatchBlock(handler);
                if (!com.google.javascript.jscomp.NodeUtil.hasCatchHandler(catchBlock)) {
                    if (lastJump == cfgNode) {
                        createEdge(cfgNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_EX, handler.getLastChild());
                    } else {
                        finallyMap.put(lastJump, handler.getLastChild());
                    }
                } else if (lastJump == cfgNode) {
                    createEdge(cfgNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_EX, catchBlock);
                    return;
                } else {
                    finallyMap.put(lastJump, catchBlock);
                }
                lastJump = handler;
            }
        }
    }

    private static com.google.javascript.rhino.Node getNextSiblingOfType(com.google.javascript.rhino.Node first, int... types) {
        for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
            for (int type : types) {
                if (c.getType() == type) {
                    return c;
                }
            }
        }
        return null;
    }

    public static boolean isBreakTarget(com.google.javascript.rhino.Node target, java.lang.String label) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.isBreakStructure(target, label != null) && com.google.javascript.jscomp.ControlFlowAnalysis.matchLabel(target.getParent(), label);
    }

    private static boolean isContinueTarget(com.google.javascript.rhino.Node target, com.google.javascript.rhino.Node parent, java.lang.String label) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.isContinueStructure(target) && com.google.javascript.jscomp.ControlFlowAnalysis.matchLabel(parent, label);
    }

    private static boolean matchLabel(com.google.javascript.rhino.Node target, java.lang.String label) {
        if (label == null) {
            return true;
        }
        while (target.isLabel()) {
            if (target.getFirstChild().getString().equals(label)) {
                return true;
            }
            target = target.getParent();
        } 
        return false;
    }

    public static boolean mayThrowException(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.THROW :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                return false;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if ((!com.google.javascript.jscomp.ControlFlowGraph.isEnteringNewCfgNode(c)) && com.google.javascript.jscomp.ControlFlowAnalysis.mayThrowException(c)) {
                return true;
            }
        }
        return false;
    }

    static boolean isBreakStructure(com.google.javascript.rhino.Node n, boolean labeled) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.SWITCH :
                return true;
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.TRY :
                return labeled;
            default :
                return false;
        }
    }

    static boolean isContinueStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node getExceptionHandler(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node cur = n; (!cur.isScript()) && (!cur.isFunction()); cur = cur.getParent()) {
            com.google.javascript.rhino.Node catchNode = com.google.javascript.jscomp.ControlFlowAnalysis.getCatchHandlerForBlock(cur);
            if (catchNode != null) {
                return catchNode;
            }
        }
        return null;
    }

    static com.google.javascript.rhino.Node getCatchHandlerForBlock(com.google.javascript.rhino.Node block) {
        if ((block.isBlock() && block.getParent().isTry()) && (block.getParent().getFirstChild() == block)) {
            for (com.google.javascript.rhino.Node s = block.getNext(); s != null; s = s.getNext()) {
                if (com.google.javascript.jscomp.NodeUtil.hasCatchHandler(s)) {
                    return s.getFirstChild();
                }
            }
        }
        return null;
    }

    private static class AstControlFlowGraph extends com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> {
        private final java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer> priorities;

        private AstControlFlowGraph(com.google.javascript.rhino.Node entry, java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer> priorities, boolean edgeAnnotations) {
            super(entry, true, edgeAnnotations);
            this.priorities = priorities;
        }

        @java.lang.Override
        public java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> getOptionalNodeComparator(boolean isForward) {
            if (isForward) {
                return new java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>() {
                    @java.lang.Override
                    public int compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n1, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n2) {
                        return getPosition(n1) - getPosition(n2);
                    }
                };
            } else {
                return new java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>() {
                    @java.lang.Override
                    public int compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n1, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n2) {
                        return getPosition(n2) - getPosition(n1);
                    }
                };
            }
        }

        private int getPosition(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n) {
            java.lang.Integer priority = priorities.get(n);
            com.google.common.base.Preconditions.checkNotNull(priority);
            return priority;
        }
    }
}
[1251928] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659922425610
GPR[SSUN]-1659922425610
160819208
GPR[ESUN]-1659922425838
GPR[SSUN]-1659922425839
160819208
GPR[SPVATF]-1659922426087
GPR[EPVATF]-1659922426395
GPR[SPS]-1659922426395
[1253254] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:926.
GPR[EPS]-1659922426936
GPR[SPVATF]-1659922426937
GPR[EPVATF]-1659922427237
GPR[SPS]-1659922427237
[1254061] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:926.
GPR[EPS]-1659922427743
GPR[ESUN]-1659922427743
GPR[SSUN]-1659922427743
1207178244
GPR[ESUN]-1659922427951
GPR[SSUN]-1659922427951
1207178244
GPR[ESUN]-1659922428160
GPR[SSUN]-1659922428160
1207178244
GPR[ESUN]-1659922428365
GPR[SSUN]-1659922428365
GPR[ESUN]-1659922428365
GPR[SSUN]-1659922428365
GPR[ESUN]-1659922428365
GPR[SSUN]-1659922428365
GPR[ESUN]-1659922428365
GPR[SSUN]-1659922428365
GPR[ESUN]-1659922428365
GPR[SSUN]-1659922428365
GPR[ESUN]-1659922428365
GPR[SSUN]-1659922428365
GPR[ESUN]-1659922428365
GPR[SSUN]-1659922428365
GPR[ESUN]-1659922428365
GPR[SSUN]-1659922428365
GPR[ESUN]-1659922428365
GPR[SSUN]-1659922428365
GPR[ESUN]-1659922428365
GPR[SSUN]-1659922428365
GPR[ESUN]-1659922428365
GPR[SSUN]-1659922428365
GPR[ESUN]-1659922428365
GPR[SSUN]-1659922428365
GPR[ESUN]-1659922428365
GPR[SSUN]-1659922428365
GPR[ESUN]-1659922428365
GPR[SSUN]-1659922428365
GPR[ESUN]-1659922428365
GPR[SSUN]-1659922428365
GPR[ESUN]-1659922428365
GPR[SSUN]-1659922428365
GPR[ESUN]-1659922428365
GPR[SSUN]-1659922428365
GPR[ESUN]-1659922428365
GPR[SSUN]-1659922428365
GPR[ESUN]-1659922428365
GPR[SSUN]-1659922428365
GPR[ESUN]-1659922428365
GPR[SSUN]-1659922428365
1965452846
GPR[ESUN]-1659922428577
GPR[SSUN]-1659922428577
GPR[ESUN]-1659922428577
GPR[SSUN]-1659922428577
GPR[ESUN]-1659922428577
GPR[SSUN]-1659922428577
GPR[ESUN]-1659922428577
GPR[SSUN]-1659922428577
160819208
GPR[ESUN]-1659922428801
GPR[SSUN]-1659922428801
160819208
GPR[SPVATF]-1659922429027
GPR[EPVATF]-1659922429350
GPR[SPS]-1659922429350
[1256173] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:925.
GPR[EPS]-1659922429855
GPR[ESUN]-1659922429856
GPR[SSUN]-1659922429856
160819208
GPR[SPVATF]-1659922430084
GPR[EPVATF]-1659922430391
GPR[SPS]-1659922430391
[1257236] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:911.
GPR[EPS]-1659922430918
GPR[ESUN]-1659922430918
GPR[SSUN]-1659922430918
160819208
GPR[SPVATF]-1659922431149
GPR[EPVATF]-1659922431470
GPR[SPS]-1659922431470
[1258299] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:831.
GPR[EPS]-1659922431981
GPR[SPVATF]-1659922431982
GPR[EPVATF]-1659922432290
GPR[SPS]-1659922432290
[1259121] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:831.
GPR[EPS]-1659922432803
GPR[ESUN]-1659922432803
GPR[SSUN]-1659922432803
160819208
GPR[SPVATF]-1659922433033
GPR[EPVATF]-1659922433345
GPR[SPS]-1659922433345
[1260181] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:517.
GPR[EPS]-1659922433863
GPR[SPVATF]-1659922433863
GPR[EPVATF]-1659922434174
GPR[SPS]-1659922434174
[1261030] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:517.
GPR[EPS]-1659922434712
GPR[ESUN]-1659922434712
GPR[SSUN]-1659922434712
160819208
GPR[ESUN]-1659922434939
GPR[SSUN]-1659922434939
160819208
GPR[SPVATF]-1659922435164
GPR[EPVATF]-1659922435484
GPR[SPS]-1659922435484
[1262196] ERROR ConstraintModelBuilder - Unable to compile the change: 
final class ControlFlowAnalysis implements com.google.javascript.jscomp.NodeTraversal.Callback , com.google.javascript.jscomp.CompilerPass {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> cfg;

    private java.util.Map<com.google.javascript.rhino.Node, java.lang.Integer> astPosition;

    private java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer> nodePriorities;

    private final java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> priorityComparator = new java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>() {
        @java.lang.Override
        public int compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> a, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> b) {
            return astPosition.get(a.getValue()) - astPosition.get(b.getValue());
        }
    };

    private int astPositionCounter;

    private int priorityCounter;

    private final boolean shouldTraverseFunctions;

    private final boolean edgeAnnotations;

    private com.google.javascript.rhino.Node root;

    private final java.util.Deque<com.google.javascript.rhino.Node> exceptionHandler = new java.util.ArrayDeque<com.google.javascript.rhino.Node>();

    private final com.google.common.collect.Multimap<com.google.javascript.rhino.Node, com.google.javascript.rhino.Node> finallyMap = com.google.common.collect.HashMultimap.create();

    ControlFlowAnalysis(com.google.javascript.jscomp.AbstractCompiler compiler, boolean shouldTraverseFunctions, boolean edgeAnnotations) {
        this.compiler = compiler;
        this.shouldTraverseFunctions = shouldTraverseFunctions;
        this.edgeAnnotations = edgeAnnotations;
    }

    com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> getCfg() {
        return cfg;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        this.root = root;
        astPositionCounter = 0;
        astPosition = com.google.common.collect.Maps.newHashMap();
        nodePriorities = com.google.common.collect.Maps.newHashMap();
        cfg = new com.google.javascript.jscomp.ControlFlowAnalysis.AstControlFlowGraph(com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(root), nodePriorities, edgeAnnotations);
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, this);
        astPosition.put(null, ++astPositionCounter);
        priorityCounter = 0;
        com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> entry = cfg.getEntry();
        prioritizeFromEntryNode(entry);
        if (shouldTraverseFunctions) {
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> candidate : cfg.getDirectedGraphNodes()) {
                com.google.javascript.rhino.Node value = candidate.getValue();
                if ((value != null) && value.isFunction()) {
                    com.google.common.base.Preconditions.checkState((!nodePriorities.containsKey(candidate)) || (candidate == entry));
                    prioritizeFromEntryNode(candidate);
                }
            }
        }
        for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> candidate : cfg.getDirectedGraphNodes()) {
            if (!nodePriorities.containsKey(candidate)) {
                nodePriorities.put(candidate, ++priorityCounter);
            }
        }
        nodePriorities.put(cfg.getImplicitReturn(), ++priorityCounter);
    }

    private void prioritizeFromEntryNode(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> entry) {
        java.util.PriorityQueue<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> worklist = new java.util.PriorityQueue<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>(10, priorityComparator);
        worklist.add(entry);
        while (!worklist.isEmpty()) {
            com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> current = worklist.remove();
            if (nodePriorities.containsKey(current)) {
                continue;
            }
            nodePriorities.put(current, ++priorityCounter);
            java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> successors = cfg.getDirectedSuccNodes(current);
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> candidate : successors) {
                worklist.add(candidate);
            }
        } 
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        astPosition.put(n, astPositionCounter++);
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                if (shouldTraverseFunctions || (n == cfg.getEntry().getValue())) {
                    exceptionHandler.push(n);
                    return true;
                }
                return false;
            case com.google.javascript.rhino.Token.TRY :
                exceptionHandler.push(n);
                return true;
        }
        if (parent != null) {
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.FOR :
                    return n == parent.getLastChild();
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.WITH :
                    return n != parent.getFirstChild();
                case com.google.javascript.rhino.Token.DO :
                    return n != parent.getFirstChild().getNext();
                case com.google.javascript.rhino.Token.SWITCH :
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.CATCH :
                case com.google.javascript.rhino.Token.LABEL :
                    return n != parent.getFirstChild();
                case com.google.javascript.rhino.Token.FUNCTION :
                    return n == parent.getFirstChild().getNext().getNext();
                case com.google.javascript.rhino.Token.CONTINUE :
                case com.google.javascript.rhino.Token.BREAK :
                case com.google.javascript.rhino.Token.EXPR_RESULT :
                case com.google.javascript.rhino.Token.VAR :
                case com.google.javascript.rhino.Token.RETURN :
                case com.google.javascript.rhino.Token.THROW :
                    return false;
                case com.google.javascript.rhino.Token.TRY :
                    if (n == parent.getFirstChild().getNext()) {
                        com.google.common.base.Preconditions.checkState(exceptionHandler.peek() == parent);
                        exceptionHandler.pop();
                    }
            }
        }
        return true;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.IF :
                handleIf(n);
                return;
            case com.google.javascript.rhino.Token.WHILE :
                handleWhile(n);
                return;
            case com.google.javascript.rhino.Token.DO :
                handleDo(n);
                return;
            case com.google.javascript.rhino.Token.FOR :
                handleFor(n);
                return;
            case com.google.javascript.rhino.Token.SWITCH :
                handleSwitch(n);
                return;
            case com.google.javascript.rhino.Token.CASE :
                handleCase(n);
                return;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                handleDefault(n);
                return;
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.SCRIPT :
                handleStmtList(n);
                return;
            case com.google.javascript.rhino.Token.FUNCTION :
                handleFunction(n);
                return;
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                handleExpr(n);
                return;
            case com.google.javascript.rhino.Token.THROW :
                handleThrow(n);
                return;
            case com.google.javascript.rhino.Token.TRY :
                handleTry(n);
                return;
            case com.google.javascript.rhino.Token.CATCH :
                handleCatch(n);
                return;
            case com.google.javascript.rhino.Token.BREAK :
                handleBreak(n);
                return;
            case com.google.javascript.rhino.Token.CONTINUE :
                handleContinue(n);
                return;
            case com.google.javascript.rhino.Token.RETURN :
                handleReturn(n);
                return;
            case com.google.javascript.rhino.Token.WITH :
                handleWith(n);
                return;
            case com.google.javascript.rhino.Token.LABEL :
                return;
            default :
                handleStmt(n);
                return;
        }
    }

    private void handleIf(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node thenBlock = node.getFirstChild().getNext();
        com.google.javascript.rhino.Node elseBlock = thenBlock.getNext();
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(thenBlock));
        if (elseBlock == null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        } else {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(elseBlock));
        }
        connectToPossibleExceptionHandler(node, com.google.javascript.jscomp.NodeUtil.getConditionExpression(node));
    }

    private void handleWhile(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getFirstChild().getNext()));
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, com.google.javascript.jscomp.NodeUtil.getConditionExpression(node));
    }

    private void handleDo(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getFirstChild()));
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, com.google.javascript.jscomp.NodeUtil.getConditionExpression(node));
    }

    private void handleFor(com.google.javascript.rhino.Node forNode) {
        if (forNode.getChildCount() == 4) {
            com.google.javascript.rhino.Node init = forNode.getFirstChild();
            com.google.javascript.rhino.Node cond = init.getNext();
            com.google.javascript.rhino.Node iter = cond.getNext();
            com.google.javascript.rhino.Node body = iter.getNext();
            createEdge(init, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, forNode);
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(body));
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(forNode, this));
            createEdge(iter, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, forNode);
            connectToPossibleExceptionHandler(init, init);
            connectToPossibleExceptionHandler(forNode, cond);
            connectToPossibleExceptionHandler(iter, iter);
        } else {
            com.google.javascript.rhino.Node item = forNode.getFirstChild();
            com.google.javascript.rhino.Node collection = item.getNext();
            com.google.javascript.rhino.Node body = collection.getNext();
            createEdge(collection, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, forNode);
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(body));
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(forNode, this));
            connectToPossibleExceptionHandler(forNode, collection);
        }
    }

    private void handleSwitch(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node next = com.google.javascript.jscomp.ControlFlowAnalysis.getNextSiblingOfType(node.getFirstChild().getNext(), com.google.javascript.rhino.Token.CASE, com.google.javascript.rhino.Token.EMPTY);
        if (next != null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, next);
        } else if (node.getFirstChild().getNext() != null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getFirstChild().getNext());
        } else {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        }
        connectToPossibleExceptionHandler(node, node.getFirstChild());
    }

    private void handleCase(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, node.getFirstChild().getNext());
        com.google.javascript.rhino.Node next = com.google.javascript.jscomp.ControlFlowAnalysis.getNextSiblingOfType(node.getNext(), com.google.javascript.rhino.Token.CASE);
        if (next != null) {
            com.google.common.base.Preconditions.checkState(next.isCase());
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, next);
        } else {
            com.google.javascript.rhino.Node parent = node.getParent();
            com.google.javascript.rhino.Node deflt = com.google.javascript.jscomp.ControlFlowAnalysis.getNextSiblingOfType(parent.getFirstChild().getNext(), com.google.javascript.rhino.Token.DEFAULT_CASE);
            if (deflt != null) {
                createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, deflt);
            } else {
                createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
            }
        }
        connectToPossibleExceptionHandler(node, node.getFirstChild());
    }

    private void handleDefault(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getFirstChild());
    }

    private void handleWith(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getLastChild());
        connectToPossibleExceptionHandler(node, node.getFirstChild());
    }

    private void handleStmtList(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node parent = node.getParent();
        if ((((node.isBlock() && (parent != null)) && parent.isTry()) && (com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent) == node)) && (!com.google.javascript.jscomp.NodeUtil.hasCatchHandler(node))) {
            return;
        }
        com.google.javascript.rhino.Node child = node.getFirstChild();
        while ((child != null) && child.isFunction()) {
            child = child.getNext();
        } 
        if (child != null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(child));
        } else {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        }
        if (parent != null) {
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.DEFAULT_CASE :
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.TRY :
                    break;
                default :
                    if (node.isBlock() && node.isSyntheticBlock()) {
                        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.SYN_BLOCK, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
                    }
                    break;
            }
        }
    }

    private void handleFunction(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkState(node.getChildCount() >= 3);
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getFirstChild().getNext().getNext()));
        com.google.common.base.Preconditions.checkState(exceptionHandler.peek() == node);
        exceptionHandler.pop();
    }

    private void handleExpr(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, node);
    }

    private void handleThrow(com.google.javascript.rhino.Node node) {
        connectToPossibleExceptionHandler(node, node);
    }

    private void handleTry(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getFirstChild());
    }

    private void handleCatch(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getLastChild());
    }

    private void handleBreak(com.google.javascript.rhino.Node node) {
        java.lang.String label = null;
        if (node.hasChildren()) {
            label = node.getFirstChild().getString();
        }
        com.google.javascript.rhino.Node cur;
        com.google.javascript.rhino.Node previous = null;
        com.google.javascript.rhino.Node lastJump;
        com.google.javascript.rhino.Node parent = node.getParent();
        for (cur = node, lastJump = node; !com.google.javascript.jscomp.ControlFlowAnalysis.isBreakTarget(cur, label); cur = parent , parent = parent.getParent()) {
            if ((cur.isTry() && com.google.javascript.jscomp.NodeUtil.hasFinally(cur)) && (cur.getLastChild() != previous)) {
                if (lastJump == node) {
                    createEdge(lastJump, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));
                } else {
                    finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));
                }
                lastJump = cur;
            }
            if (parent == null) {
                if (compiler.isIdeMode()) {
                    return;
                } else {
                    throw new java.lang.IllegalStateException("Cannot find break target.");
                }
            }
            previous = cur;
        }
        if (lastJump == node) {
            createEdge(lastJump, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(cur, this));
        } else {
            finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(cur, this));
        }
    }

    private void handleContinue(com.google.javascript.rhino.Node node) {
        java.lang.String label = null;
        if (node.hasChildren()) {
            label = node.getFirstChild().getString();
        }
        com.google.javascript.rhino.Node cur;
        com.google.javascript.rhino.Node previous = null;
        com.google.javascript.rhino.Node lastJump;
        com.google.javascript.rhino.Node parent = node.getParent();
        for (cur = node, lastJump = node; !com.google.javascript.jscomp.ControlFlowAnalysis.isContinueTarget(cur, parent, label); cur = parent , parent = parent.getParent()) {
            if ((cur.isTry() && com.google.javascript.jscomp.NodeUtil.hasFinally(cur)) && (cur.getLastChild() != previous)) {
                if (lastJump == node) {
                    createEdge(lastJump, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, cur.getLastChild());
                } else {
                    finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));
                }
                lastJump = cur;
            }
            com.google.common.base.Preconditions.checkState(parent != null, "Cannot find continue target.");
            previous = cur;
        }
        com.google.javascript.rhino.Node iter = cur;
        if (cur.getChildCount() == 4) {
            iter = cur.getFirstChild().getNext().getNext();
        }
        if (lastJump == node) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, iter);
        } else {
            finallyMap.put(lastJump, iter);
        }
    }

    private void handleReturn(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node lastJump = null;
        for (java.util.Iterator<com.google.javascript.rhino.Node> iter = exceptionHandler.iterator(); iter.hasNext();) {
            com.google.javascript.rhino.Node curHandler = iter.next();
            if (curHandler.isFunction()) {
                break;
            }
            if (com.google.javascript.jscomp.NodeUtil.hasFinally(curHandler)) {
                if (lastJump == null) {
                    createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, curHandler.getLastChild());
                } else {
                    finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(curHandler.getLastChild()));
                }
                lastJump = curHandler;
            }
        }
        if (node.hasChildren()) {
            connectToPossibleExceptionHandler(node, node.getFirstChild());
        }
        if (lastJump == null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, null);
        } else {
            finallyMap.put(lastJump, null);
        }
    }

    private void handleStmt(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, node);
    }

    static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.ControlFlowAnalysis cfa) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, node, cfa);
    }

    static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node node) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, node, null);
    }

    private static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node fromNode, com.google.javascript.rhino.Node node, com.google.javascript.jscomp.ControlFlowAnalysis cfa) {
        com.google.javascript.rhino.Node parent = node.getParent();
        if (((parent == null) || parent.isFunction()) || ((cfa != null) && (node == cfa.root))) {
            return null;
        }
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.IF :
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
            case com.google.javascript.rhino.Token.CASE :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                if (parent.getNext() != null) {
                    if (parent.getNext().isCase()) {
                        return parent.getNext().getFirstChild().getNext();
                    } else if (parent.getNext().isDefaultCase()) {
                        return parent.getNext().getFirstChild();
                    } else {
                        com.google.common.base.Preconditions.checkState(false, "Not reachable");
                    }
                } else {
                    return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                }
                break;
            case com.google.javascript.rhino.Token.FOR :
                if (com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                    return parent;
                } else {
                    return parent.getFirstChild().getNext().getNext();
                }
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
                return parent;
            case com.google.javascript.rhino.Token.TRY :
                if (parent.getFirstChild() == node) {
                    if (com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(parent.getLastChild());
                    } else {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                    }
                } else if (com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent) == node) {
                    if (com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getNext());
                    } else {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                    }
                } else if (parent.getLastChild() == node) {
                    if (cfa != null) {
                        for (com.google.javascript.rhino.Node finallyNode : cfa.finallyMap.get(parent)) {
                            cfa.createEdge(fromNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, finallyNode);
                        }
                    }
                    return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                }
        }
        com.google.javascript.rhino.Node nextSibling = node.getNext();
        while ((nextSibling != null) && nextSibling.isFunction()) {
            nextSibling = nextSibling.getNext();
        } 
        if (nextSibling != null) {
            return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(nextSibling);
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(360).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(360).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(360).collectInput("cfa.finallyMap",cfa.finallyMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(360).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(360).collectInput("fromNode",fromNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(360).collectInput("cfa.root",cfa.root);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(360).collectInput("cfa.astPosition",cfa.astPosition);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(360).collectInput("cfa.exceptionHandler",cfa.exceptionHandler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(360).collectInput("cfa.shouldTraverseFunctions",cfa.shouldTraverseFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(360).collectInput("nextSibling",nextSibling);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(360).collectInput("cfa.cfg",cfa.cfg);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(360).collectInput("node",node);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(360).collectInput("cfa.priorityComparator",cfa.priorityComparator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(360).collectInput("cfa.edgeAnnotations",cfa.edgeAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(360).collectInput("cfa.astPositionCounter",cfa.astPositionCounter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(360).collectInput("cfa.compiler",cfa.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(360).collectInput("cfa.nodePriorities",cfa.nodePriorities);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(360).collectInput("cfa.priorityCounter",cfa.priorityCounter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(360).collectInput("cfa",cfa);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(360).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(360).collectionEnds();
            }
            if (runtimeAngelicValue)
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);

        }
    }

    static com.google.javascript.rhino.Node computeFallThrough(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.DO :
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(n.getFirstChild());
            case com.google.javascript.rhino.Token.FOR :
                if (com.google.javascript.jscomp.NodeUtil.isForIn(n)) {
                    return n.getFirstChild().getNext();
                }
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(n.getFirstChild());
            case com.google.javascript.rhino.Token.LABEL :
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(n.getLastChild());
            default :
                return n;
        }
    }

    private void createEdge(com.google.javascript.rhino.Node fromNode, com.google.javascript.jscomp.ControlFlowGraph.Branch branch, com.google.javascript.rhino.Node toNode) {
        cfg.createNode(fromNode);
        cfg.createNode(toNode);
        cfg.connectIfNotFound(fromNode, branch, toNode);
    }

    private void connectToPossibleExceptionHandler(com.google.javascript.rhino.Node cfgNode, com.google.javascript.rhino.Node target) {
        if (com.google.javascript.jscomp.ControlFlowAnalysis.mayThrowException(target) && (!exceptionHandler.isEmpty())) {
            com.google.javascript.rhino.Node lastJump = cfgNode;
            for (com.google.javascript.rhino.Node handler : exceptionHandler) {
                if (handler.isFunction()) {
                    return;
                }
                com.google.common.base.Preconditions.checkState(handler.isTry());
                com.google.javascript.rhino.Node catchBlock = com.google.javascript.jscomp.NodeUtil.getCatchBlock(handler);
                if (!com.google.javascript.jscomp.NodeUtil.hasCatchHandler(catchBlock)) {
                    if (lastJump == cfgNode) {
                        createEdge(cfgNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_EX, handler.getLastChild());
                    } else {
                        finallyMap.put(lastJump, handler.getLastChild());
                    }
                } else if (lastJump == cfgNode) {
                    createEdge(cfgNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_EX, catchBlock);
                    return;
                } else {
                    finallyMap.put(lastJump, catchBlock);
                }
                lastJump = handler;
            }
        }
    }

    private static com.google.javascript.rhino.Node getNextSiblingOfType(com.google.javascript.rhino.Node first, int... types) {
        for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
            for (int type : types) {
                if (c.getType() == type) {
                    return c;
                }
            }
        }
        return null;
    }

    public static boolean isBreakTarget(com.google.javascript.rhino.Node target, java.lang.String label) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.isBreakStructure(target, label != null) && com.google.javascript.jscomp.ControlFlowAnalysis.matchLabel(target.getParent(), label);
    }

    private static boolean isContinueTarget(com.google.javascript.rhino.Node target, com.google.javascript.rhino.Node parent, java.lang.String label) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.isContinueStructure(target) && com.google.javascript.jscomp.ControlFlowAnalysis.matchLabel(parent, label);
    }

    private static boolean matchLabel(com.google.javascript.rhino.Node target, java.lang.String label) {
        if (label == null) {
            return true;
        }
        while (target.isLabel()) {
            if (target.getFirstChild().getString().equals(label)) {
                return true;
            }
            target = target.getParent();
        } 
        return false;
    }

    public static boolean mayThrowException(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.THROW :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                return false;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if ((!com.google.javascript.jscomp.ControlFlowGraph.isEnteringNewCfgNode(c)) && com.google.javascript.jscomp.ControlFlowAnalysis.mayThrowException(c)) {
                return true;
            }
        }
        return false;
    }

    static boolean isBreakStructure(com.google.javascript.rhino.Node n, boolean labeled) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.SWITCH :
                return true;
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.TRY :
                return labeled;
            default :
                return false;
        }
    }

    static boolean isContinueStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node getExceptionHandler(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node cur = n; (!cur.isScript()) && (!cur.isFunction()); cur = cur.getParent()) {
            com.google.javascript.rhino.Node catchNode = com.google.javascript.jscomp.ControlFlowAnalysis.getCatchHandlerForBlock(cur);
            if (catchNode != null) {
                return catchNode;
            }
        }
        return null;
    }

    static com.google.javascript.rhino.Node getCatchHandlerForBlock(com.google.javascript.rhino.Node block) {
        if ((block.isBlock() && block.getParent().isTry()) && (block.getParent().getFirstChild() == block)) {
            for (com.google.javascript.rhino.Node s = block.getNext(); s != null; s = s.getNext()) {
                if (com.google.javascript.jscomp.NodeUtil.hasCatchHandler(s)) {
                    return s.getFirstChild();
                }
            }
        }
        return null;
    }

    private static class AstControlFlowGraph extends com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> {
        private final java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer> priorities;

        private AstControlFlowGraph(com.google.javascript.rhino.Node entry, java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer> priorities, boolean edgeAnnotations) {
            super(entry, true, edgeAnnotations);
            this.priorities = priorities;
        }

        @java.lang.Override
        public java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> getOptionalNodeComparator(boolean isForward) {
            if (isForward) {
                return new java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>() {
                    @java.lang.Override
                    public int compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n1, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n2) {
                        return getPosition(n1) - getPosition(n2);
                    }
                };
            } else {
                return new java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>() {
                    @java.lang.Override
                    public int compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n1, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n2) {
                        return getPosition(n2) - getPosition(n1);
                    }
                };
            }
        }

        private int getPosition(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n) {
            java.lang.Integer priority = priorities.get(n);
            com.google.common.base.Preconditions.checkNotNull(priority);
            return priority;
        }
    }
}
[1262197] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659922435879
GPR[SSUN]-1659922435879
160819208
GPR[SPVATF]-1659922436129
GPR[EPVATF]-1659922436442
GPR[SPS]-1659922436442
[1263270] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:715.
GPR[EPS]-1659922436952
GPR[ESUN]-1659922436952
GPR[SSUN]-1659922436952
160819208
GPR[SPVATF]-1659922437180
GPR[EPVATF]-1659922437513
GPR[SPS]-1659922437513
[1264338] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:511.
GPR[EPS]-1659922438020
GPR[ESUN]-1659922438020
GPR[SSUN]-1659922438020
160819208
GPR[SPVATF]-1659922438285
GPR[EPVATF]-1659922438605
GPR[SPS]-1659922438605
[1265486] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:504.
GPR[EPS]-1659922439168
GPR[ESUN]-1659922439168
GPR[SSUN]-1659922439168
160819208
GPR[ESUN]-1659922439396
GPR[SSUN]-1659922439396
160819208
GPR[ESUN]-1659922439646
GPR[SSUN]-1659922439646
160819208
GPR[SPVATF]-1659922439879
GPR[EPVATF]-1659922440197
GPR[SPS]-1659922440197
[1267030] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:822.
GPR[EPS]-1659922440712
GPR[ESUN]-1659922440712
GPR[SSUN]-1659922440712
160819208
GPR[SPVATF]-1659922440959
GPR[EPVATF]-1659922441274
GPR[SPS]-1659922441274
[1268121] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:821.
GPR[EPS]-1659922441803
GPR[ESUN]-1659922441804
GPR[SSUN]-1659922441804
160819208
GPR[SPVATF]-1659922442088
GPR[EPVATF]-1659922442431
GPR[SPS]-1659922442431
[1269267] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:820.
GPR[EPS]-1659922442949
GPR[ESUN]-1659922442949
GPR[SSUN]-1659922442949
160819208
GPR[ESUN]-1659922443178
GPR[SSUN]-1659922443178
160819208
GPR[SPVATF]-1659922443405
GPR[EPVATF]-1659922443727
GPR[SPS]-1659922443727
[1270565] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:510.
GPR[EPS]-1659922444247
GPR[SPVATF]-1659922444247
GPR[EPVATF]-1659922444587
GPR[SPS]-1659922444587
[1271418] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:510.
GPR[EPS]-1659922445100
GPR[ESUN]-1659922445100
GPR[SSUN]-1659922445101
160819208
GPR[SPVATF]-1659922445331
GPR[EPVATF]-1659922445649
GPR[SPS]-1659922445649
[1272532] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:503.
GPR[EPS]-1659922446214
GPR[SPVATF]-1659922446215
GPR[EPVATF]-1659922446532
GPR[SPS]-1659922446532
[1273359] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:503.
GPR[EPS]-1659922447041
GPR[ESUN]-1659922447041
GPR[SSUN]-1659922447041
160819208
GPR[SPVATF]-1659922447269
GPR[EPVATF]-1659922447592
GPR[SPS]-1659922447593
[1274432] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:499.
GPR[EPS]-1659922448114
GPR[ESUN]-1659922448114
GPR[SSUN]-1659922448114
160819208
GPR[ESUN]-1659922448344
GPR[SSUN]-1659922448344
160819208
GPR[SPVATF]-1659922448573
GPR[EPVATF]-1659922448898
GPR[SPS]-1659922448898
[1275749] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:487.
GPR[EPS]-1659922449431
GPR[SPVATF]-1659922449431
GPR[EPVATF]-1659922449759
GPR[SPS]-1659922449759
[1276655] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:487.
GPR[EPS]-1659922450337
GPR[ESUN]-1659922450337
GPR[SSUN]-1659922450337
160819208
GPR[ESUN]-1659922450572
GPR[SSUN]-1659922450573
160819208
GPR[ESUN]-1659922450800
GPR[SSUN]-1659922450800
160819208
GPR[SPVATF]-1659922451030
GPR[EPVATF]-1659922451354
GPR[SPS]-1659922451354
[1278205] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:320.
GPR[EPS]-1659922451887
GPR[ESUN]-1659922451887
GPR[SSUN]-1659922451887
160819208
GPR[SPVATF]-1659922452117
GPR[EPVATF]-1659922452443
GPR[SPS]-1659922452443
[1279285] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:296.
GPR[EPS]-1659922452967
GPR[ESUN]-1659922452967
GPR[SSUN]-1659922452967
160819208
GPR[SPVATF]-1659922453197
GPR[EPVATF]-1659922453521
GPR[SPS]-1659922453521
[1280408] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:251.
GPR[EPS]-1659922454090
GPR[ESUN]-1659922454090
GPR[SSUN]-1659922454090
160819208
GPR[SPVATF]-1659922454331
GPR[EPVATF]-1659922454660
GPR[SPS]-1659922454660
[1281490] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:250.
GPR[EPS]-1659922455172
GPR[SPVATF]-1659922455173
GPR[EPVATF]-1659922455517
GPR[SPS]-1659922455517
[1282345] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:250.
GPR[EPS]-1659922456027
GPR[ESUN]-1659922456027
GPR[SSUN]-1659922456027
160819208
GPR[SPVATF]-1659922456258
GPR[EPVATF]-1659922461314
GPR[SPS]-1659922461314
[1288210] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:222.
GPR[EPS]-1659922461892
GPR[ESUN]-1659922461892
GPR[SSUN]-1659922461892
160819208
GPR[SPVATF]-1659922462131
GPR[EPVATF]-1659922462871
GPR[SPS]-1659922462871
[1289751] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:220.
GPR[EPS]-1659922463433
GPR[ESUN]-1659922463433
GPR[SSUN]-1659922463433
160819208
GPR[ESUN]-1659922463660
GPR[SSUN]-1659922463660
160819208
GPR[ESUN]-1659922463885
GPR[SSUN]-1659922463885
160819208
GPR[ESUN]-1659922464110
GPR[SSUN]-1659922464110
160819208
GPR[SPVATF]-1659922464334
GPR[EPVATF]-1659922464674
GPR[SPS]-1659922464674
[1291499] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:212.
GPR[EPS]-1659922465181
GPR[ESUN]-1659922465181
GPR[SSUN]-1659922465181
160819208
GPR[SPVATF]-1659922465421
GPR[EPVATF]-1659922465759
GPR[SPS]-1659922465759
[1292584] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:211.
GPR[EPS]-1659922466266
GPR[ESUN]-1659922466266
GPR[SSUN]-1659922466266
160819208
GPR[ESUN]-1659922466493
GPR[SSUN]-1659922466493
160819208
GPR[SPVATF]-1659922466716
GPR[EPVATF]-1659922467044
GPR[SPS]-1659922467044
[1643787] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659922817469
GPR[SSUN]-1659922817469
160819208
GPR[SPVATF]-1659922817864
GPR[EPVATF]-1659922818197
GPR[SPS]-1659922818197
[1976103] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[SPVATF]-1659923149786
GPR[EPVATF]-1659923150280
GPR[SPS]-1659923150280
[2331708] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659923505390
GPR[SSUN]-1659923505390
160819208
GPR[ESUN]-1659923505789
GPR[SSUN]-1659923505789
160819208
GPR[SPVATF]-1659923506020
GPR[EPVATF]-1659923506371
GPR[SPS]-1659923506371
[2333218] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:201.
GPR[EPS]-1659923506900
GPR[ESUN]-1659923506900
GPR[SSUN]-1659923506900
160819208
GPR[SPVATF]-1659923507131
GPR[EPVATF]-1659923507474
GPR[SPS]-1659923507474
[2334322] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:199.
GPR[EPS]-1659923508004
GPR[ESUN]-1659923508004
GPR[SSUN]-1659923508004
160819208
GPR[ESUN]-1659923508238
GPR[SSUN]-1659923508238
160819208
GPR[ESUN]-1659923508467
GPR[SSUN]-1659923508467
160819208
GPR[SPVATF]-1659923508696
GPR[EPVATF]-1659923509024
GPR[SPS]-1659923509024
[2335860] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:189.
GPR[EPS]-1659923509542
GPR[ESUN]-1659923509542
GPR[SSUN]-1659923509542
160819208
GPR[ESUN]-1659923509775
GPR[SSUN]-1659923509775
160819208
GPR[SPVATF]-1659923510004
GPR[EPVATF]-1659923510323
GPR[SPS]-1659923510323
[2337172] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:183.
GPR[EPS]-1659923510854
GPR[SPVATF]-1659923510854
GPR[EPVATF]-1659923511168
GPR[SPS]-1659923511168
[2338008] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:183.
GPR[EPS]-1659923511690
GPR[ESUN]-1659923511690
GPR[SSUN]-1659923511690
160819208
GPR[SPVATF]-1659923511928
GPR[EPVATF]-1659923512261
GPR[SPS]-1659923512261
[2339098] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:182.
GPR[EPS]-1659923512780
GPR[ESUN]-1659923512780
GPR[SSUN]-1659923512780
160819208
GPR[SPVATF]-1659923513015
GPR[EPVATF]-1659923513359
GPR[SPS]-1659923513359
[2340194] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:165.
GPR[EPS]-1659923513876
GPR[SPVATF]-1659923513876
GPR[EPVATF]-1659923514192
GPR[SPS]-1659923514192
[2341031] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:165.
GPR[EPS]-1659923514713
GPR[ESUN]-1659923514713
GPR[SSUN]-1659923514713
160819208
GPR[SPVATF]-1659923514949
GPR[EPVATF]-1659923515261
GPR[SPS]-1659923515262
[2342103] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:163.
GPR[EPS]-1659923515785
GPR[ESUN]-1659923515785
GPR[SSUN]-1659923515785
160819208
GPR[ESUN]-1659923516038
GPR[SSUN]-1659923516038
160819208
GPR[SPVATF]-1659923516290
GPR[EPVATF]-1659923516602
GPR[SPS]-1659923516602
[2343437] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:161.
GPR[EPS]-1659923517119
GPR[ESUN]-1659923517119
GPR[SSUN]-1659923517119
160819208
GPR[SPVATF]-1659923517353
GPR[EPVATF]-1659923517668
GPR[SPS]-1659923517668
[2344509] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:157.
GPR[EPS]-1659923518191
GPR[ESUN]-1659923518191
GPR[SSUN]-1659923518191
160819208
GPR[SPVATF]-1659923518426
GPR[EPVATF]-1659923518756
GPR[SPS]-1659923518756
[2345598] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:156.
GPR[EPS]-1659923519280
GPR[ESUN]-1659923519280
GPR[SSUN]-1659923519280
160819208
GPR[SPVATF]-1659923519519
GPR[EPVATF]-1659923519839
GPR[SPS]-1659923519839
[2346681] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:154.
GPR[EPS]-1659923520363
GPR[ESUN]-1659923520363
GPR[SSUN]-1659923520363
160819208
GPR[SPVATF]-1659923520600
GPR[EPVATF]-1659923520936
GPR[SPS]-1659923520936
[2347793] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:153.
GPR[EPS]-1659923521475
GPR[ESUN]-1659923521475
GPR[SSUN]-1659923521475
160819208
GPR[SPVATF]-1659923521710
GPR[EPVATF]-1659923522030
GPR[SPS]-1659923522030
[2348873] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:152.
GPR[EPS]-1659923522555
GPR[ESUN]-1659923522555
GPR[SSUN]-1659923522555
160819208
GPR[SPVATF]-1659923522789
GPR[EPVATF]-1659923523101
GPR[SPS]-1659923523101
[2349946] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:151.
GPR[EPS]-1659923523628
GPR[ESUN]-1659923523628
GPR[SSUN]-1659923523628
160819208
GPR[SPVATF]-1659923523865
GPR[EPVATF]-1659923524207
GPR[SPS]-1659923524207
[2351049] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:150.
GPR[EPS]-1659923524731
GPR[ESUN]-1659923524731
GPR[SSUN]-1659923524731
160819208
GPR[ESUN]-1659923524966
GPR[SSUN]-1659923524966
-999135318
GPR[ESUN]-1659923525147
GPR[SSUN]-1659923525147
69062959
GPR[ESUN]-1659923525337
GPR[SSUN]-1659923525337
69062959
GPR[SPVATF]-1659923525526
GPR[EPVATF]-1659923525848
GPR[SPS]-1659923525848
[2352635] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:121.
GPR[EPS]-1659923526317
GPR[ESUN]-1659923526317
GPR[SSUN]-1659923526317
69062959
GPR[SPVATF]-1659923526513
GPR[EPVATF]-1659923526833
GPR[SPS]-1659923526833
[2353642] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:120.
GPR[EPS]-1659923527324
GPR[SPVATF]-1659923527324
GPR[EPVATF]-1659923527660
GPR[SPS]-1659923527660
[2354450] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:120.
GPR[EPS]-1659923528132
GPR[ESUN]-1659923528132
GPR[SSUN]-1659923528132
1207178244
GPR[ESUN]-1659923528346
GPR[SSUN]-1659923528346
1207178244
GPR[ESUN]-1659923528557
GPR[SSUN]-1659923528557
1965452846
GPR[ESUN]-1659923528775
GPR[SSUN]-1659923528776
1965452846
GPR[ESUN]-1659923528993
GPR[SSUN]-1659923528993
1965452846
GPR[SPVATF]-1659923529208
GPR[EPVATF]-1659923529524
GPR[SPS]-1659923529524
[2356407] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:248.
GPR[EPS]-1659923530089
GPR[ESUN]-1659923530089
GPR[SSUN]-1659923530089
1965452846
GPR[SPVATF]-1659923530309
GPR[EPVATF]-1659923530655
GPR[SPS]-1659923530655
[2357497] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:247.
GPR[EPS]-1659923531179
GPR[ESUN]-1659923531179
GPR[SSUN]-1659923531180
1965452846
GPR[ESUN]-1659923531399
GPR[SSUN]-1659923531399
1965452846
GPR[SPVATF]-1659923531613
GPR[EPVATF]-1659923531931
GPR[SPS]-1659923531931
[2358772] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:243.
GPR[EPS]-1659923532454
GPR[SPVATF]-1659923532454
GPR[EPVATF]-1659923532778
GPR[SPS]-1659923532778
[2359648] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:243.
GPR[EPS]-1659923533330
GPR[ESUN]-1659923533330
GPR[SSUN]-1659923533330
160819208
GPR[ESUN]-1659923533567
GPR[SSUN]-1659923533567
160819208
GPR[ESUN]-1659923533799
GPR[SSUN]-1659923533799
160819208
GPR[SPVATF]-1659923534030
GPR[EPVATF]-1659923534353
GPR[SPS]-1659923534353
[2361192] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:783.
GPR[EPS]-1659923534875
GPR[ESUN]-1659923534875
GPR[SSUN]-1659923534875
160819208
GPR[SPVATF]-1659923535111
GPR[EPVATF]-1659923535432
GPR[SPS]-1659923535432
[2362315] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:779.
GPR[EPS]-1659923535997
GPR[ESUN]-1659923535997
GPR[SSUN]-1659923535998
160819208
GPR[ESUN]-1659923536236
GPR[SSUN]-1659923536236
160819208
GPR[SPVATF]-1659923536472
GPR[EPVATF]-1659923536795
GPR[SPS]-1659923536795
[2363643] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:719.
GPR[EPS]-1659923537325
GPR[ESUN]-1659923537325
GPR[SSUN]-1659923537325
1331276989
GPR[SPVATF]-1659923537538
GPR[EPVATF]-1659923537820
GPR[SPS]-1659923537820
[2364456] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class NodeTraversal {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.NodeTraversal.Callback callback;

    private com.google.javascript.rhino.Node curNode;

    public static final com.google.javascript.jscomp.DiagnosticType NODE_TRAVERSAL_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NODE_TRAVERSAL_ERROR", "{0}");

    private final java.util.Deque<com.google.javascript.jscomp.Scope> scopes = new java.util.ArrayDeque<com.google.javascript.jscomp.Scope>();

    private final java.util.Deque<com.google.javascript.rhino.Node> scopeRoots = new java.util.ArrayDeque<com.google.javascript.rhino.Node>();

    java.util.Deque<com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>> cfgs = new java.util.LinkedList<com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>>();

    private java.lang.String sourceName;

    private com.google.javascript.rhino.InputId inputId;

    private com.google.javascript.jscomp.ScopeCreator scopeCreator;

    private com.google.javascript.jscomp.NodeTraversal.ScopedCallback scopeCallback;

    public interface Callback {
        public abstract boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent);

        public abstract void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent);
    }

    public interface ScopedCallback extends com.google.javascript.jscomp.NodeTraversal.Callback {
        public abstract void enterScope(com.google.javascript.jscomp.NodeTraversal t);

        public abstract void exitScope(com.google.javascript.jscomp.NodeTraversal t);
    }

    public static abstract class AbstractPostOrderCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return true;
        }
    }

    public static abstract class AbstractScopedCallback implements com.google.javascript.jscomp.NodeTraversal.ScopedCallback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return true;
        }

        @java.lang.Override
        public void enterScope(com.google.javascript.jscomp.NodeTraversal t) {
        }

        @java.lang.Override
        public void exitScope(com.google.javascript.jscomp.NodeTraversal t) {
        }
    }

    public static abstract class AbstractShallowCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return ((parent == null) || (!parent.isFunction())) || (n == parent.getFirstChild());
        }
    }

    public static abstract class AbstractShallowStatementCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return ((parent == null) || com.google.javascript.jscomp.NodeUtil.isControlStructure(parent)) || com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent);
        }
    }

    public static abstract class AbstractNodeTypePruningCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        private final java.util.Set<java.lang.Integer> nodeTypes;

        private final boolean include;

        public AbstractNodeTypePruningCallback(java.util.Set<java.lang.Integer> nodeTypes) {
            this(nodeTypes, true);
        }

        public AbstractNodeTypePruningCallback(java.util.Set<java.lang.Integer> nodeTypes, boolean include) {
            this.nodeTypes = nodeTypes;
            this.include = include;
        }

        @java.lang.Override
        public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return include == nodeTypes.contains(n.getType());
        }
    }

    public NodeTraversal(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.NodeTraversal.Callback cb) {
        this(compiler, cb, new com.google.javascript.jscomp.SyntacticScopeCreator(compiler));
    }

    public NodeTraversal(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.NodeTraversal.Callback cb, com.google.javascript.jscomp.ScopeCreator scopeCreator) {
        this.callback = cb;
        if (cb instanceof com.google.javascript.jscomp.NodeTraversal.ScopedCallback) {
            this.scopeCallback = ((com.google.javascript.jscomp.NodeTraversal.ScopedCallback) (cb));
        }
        this.compiler = compiler;
        this.inputId = null;
        this.sourceName = "";
        this.scopeCreator = scopeCreator;
    }

    private void throwUnexpectedException(java.lang.Exception unexpectedException) {
        java.lang.String message = unexpectedException.getMessage();
        if (inputId != null) {
            message = ((unexpectedException.getMessage() + "\n") + formatNodeContext("Node", curNode)) + (curNode == null ? "" : formatNodeContext("Parent", curNode.getParent()));
        }
        compiler.throwInternalError(message, unexpectedException);
    }

    private java.lang.String formatNodeContext(java.lang.String label, com.google.javascript.rhino.Node n) {
        if (n == null) {
            return ("  " + label) + ": NULL";
        }
        return (((("  " + label) + "(") + n.toString(false, false, false)) + "): ") + formatNodePosition(n);
    }

    public void traverse(com.google.javascript.rhino.Node root) {
        try {
            inputId = com.google.javascript.jscomp.NodeUtil.getInputId(root);
            sourceName = "";
            curNode = root;
            pushScope(root);
            traverseBranch(root, null);
            popScope();
        } catch (java.lang.Exception unexpectedException) {
            throwUnexpectedException(unexpectedException);
        }
    }

    public void traverseRoots(com.google.javascript.rhino.Node... roots) {
        traverseRoots(com.google.common.collect.Lists.newArrayList(roots));
    }

    public void traverseRoots(java.util.List<com.google.javascript.rhino.Node> roots) {
        if (roots.isEmpty()) {
            return;
        }
        try {
            com.google.javascript.rhino.Node scopeRoot = roots.get(0).getParent();
            com.google.common.base.Preconditions.checkState(scopeRoot != null);
            inputId = com.google.javascript.jscomp.NodeUtil.getInputId(scopeRoot);
            sourceName = "";
            curNode = scopeRoot;
            pushScope(scopeRoot);
            for (com.google.javascript.rhino.Node root : roots) {
                com.google.common.base.Preconditions.checkState(root.getParent() == scopeRoot);
                traverseBranch(root, scopeRoot);
            }
            popScope();
        } catch (java.lang.Exception unexpectedException) {
            throwUnexpectedException(unexpectedException);
        }
    }

    private static final java.lang.String MISSING_SOURCE = "[source unknown]";

    private java.lang.String formatNodePosition(com.google.javascript.rhino.Node n) {
        if (n == null) {
            return com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE + "\n";
        }
        int lineNumber = n.getLineno();
        int columnNumber = n.getCharno();
        java.lang.String src = compiler.getSourceLine(sourceName, lineNumber);
        if (src == null) {
            src = com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE;
        }
        return ((((((sourceName + ":") + lineNumber) + ":") + columnNumber) + "\n") + src) + "\n";
    }

    void traverseWithScope(com.google.javascript.rhino.Node root, com.google.javascript.jscomp.Scope s) {
        com.google.common.base.Preconditions.checkState(s.isGlobal());
        inputId = null;
        sourceName = "";
        curNode = root;
        pushScope(s);
        traverseBranch(root, null);
        popScope();
    }

    void traverseAtScope(com.google.javascript.jscomp.Scope s) {
        com.google.javascript.rhino.Node n = s.getRootNode();
        if (n.isFunction()) {
            if (inputId == null) {
                inputId = com.google.javascript.jscomp.NodeUtil.getInputId(n);
            }
            sourceName = com.google.javascript.jscomp.NodeTraversal.getSourceName(n);
            curNode = n;
            pushScope(s);
            com.google.javascript.rhino.Node args = n.getFirstChild().getNext();
            com.google.javascript.rhino.Node body = args.getNext();
            traverseBranch(args, n);
            traverseBranch(body, n);
            popScope();
        } else {
            traverseWithScope(n, s);
        }
    }

    protected void traverseInnerNode(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent, com.google.javascript.jscomp.Scope refinedScope) {
        com.google.common.base.Preconditions.checkNotNull(parent);
        if ((refinedScope != null) && (getScope() != refinedScope)) {
            curNode = node;
            pushScope(refinedScope);
            traverseBranch(node, parent);
            popScope();
        } else {
            traverseBranch(node, parent);
        }
    }

    public com.google.javascript.jscomp.Compiler getCompiler() {
        return ((com.google.javascript.jscomp.Compiler) (compiler));
    }

    public int getLineNumber() {
        com.google.javascript.rhino.Node cur = curNode;
        while (cur != null) {
            int line = cur.getLineno();
            if (line >= 0) {
                return line;
            }
            cur = cur.getParent();
        } 
        return 0;
    }

    public java.lang.String getSourceName() {
        return sourceName;
    }

    public com.google.javascript.jscomp.CompilerInput getInput() {
        return compiler.getInput(inputId);
    }

    public com.google.javascript.jscomp.JSModule getModule() {
        com.google.javascript.jscomp.CompilerInput input = getInput();
        return input == null ? null : input.getModule();
    }

    public com.google.javascript.rhino.Node getCurrentNode() {
        return curNode;
    }

    public static void traverse(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.rhino.Node root, com.google.javascript.jscomp.NodeTraversal.Callback cb) {
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, cb);
        t.traverse(root);
    }

    public static void traverseRoots(com.google.javascript.jscomp.AbstractCompiler compiler, java.util.List<com.google.javascript.rhino.Node> roots, com.google.javascript.jscomp.NodeTraversal.Callback cb) {
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, cb);
        t.traverseRoots(roots);
    }

    public static void traverseRoots(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.NodeTraversal.Callback cb, com.google.javascript.rhino.Node... roots) {
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, cb);
        t.traverseRoots(roots);
    }

    @java.lang.SuppressWarnings("fallthrough")
    private void traverseBranch(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        int type = n.getType();
        if (type == com.google.javascript.rhino.Token.SCRIPT) {
            inputId = n.getInputId();
            sourceName = com.google.javascript.jscomp.NodeTraversal.getSourceName(n);
        }
        curNode = n;
        if (!callback.shouldTraverse(this, n, parent)) {
            return;
        }
        switch (type) {
            case com.google.javascript.rhino.Token.FUNCTION :
                traverseFunction(n, parent);
                break;
            default :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null;) {
                    com.google.javascript.rhino.Node next = child.getNext();
                    traverseBranch(child, n);
                    child = next;
                }
                break;
        }
        curNode = n;
        callback.visit(this, n, parent);
    }

    private void traverseFunction(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.common.base.Preconditions.checkState(n.getChildCount() == 3);
        com.google.common.base.Preconditions.checkState(n.isFunction());
        final com.google.javascript.rhino.Node fnName = n.getFirstChild();
        boolean isFunctionExpression = (parent != null) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n);
        if (!isFunctionExpression) {
            traverseBranch(fnName, n);
        }
        curNode = n;
        pushScope(n);
        if (isFunctionExpression) {
            traverseBranch(fnName, n);
        }
        final com.google.javascript.rhino.Node args = fnName.getNext();
        final com.google.javascript.rhino.Node body = args.getNext();
        traverseBranch(args, n);
        com.google.common.base.Preconditions.checkState((body.getNext() == null) && body.isBlock(), body);
        traverseBranch(body, n);
        popScope();
    }

    @java.lang.SuppressWarnings("unchecked")
    public com.google.javascript.rhino.Node getEnclosingFunction() {
        if ((scopes.size() + scopeRoots.size()) < 2) {
            return null;
        } else if (scopeRoots.isEmpty()) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(413).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(413).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(413).collectInput("com.google.javascript.jscomp.NodeTraversal.this.compiler",com.google.javascript.jscomp.NodeTraversal.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(413).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopes",com.google.javascript.jscomp.NodeTraversal.this.scopes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(413).collectInput("com.google.javascript.jscomp.NodeTraversal.this.cfgs",com.google.javascript.jscomp.NodeTraversal.this.cfgs);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(413).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopeCallback",com.google.javascript.jscomp.NodeTraversal.this.scopeCallback);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(413).collectInput("com.google.javascript.jscomp.NodeTraversal.this.inputId",com.google.javascript.jscomp.NodeTraversal.this.inputId);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(413).collectInput("com.google.javascript.jscomp.NodeTraversal.this.curNode",com.google.javascript.jscomp.NodeTraversal.this.curNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(413).collectInput("com.google.javascript.jscomp.NodeTraversal.this.sourceName",com.google.javascript.jscomp.NodeTraversal.this.sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(413).collectInput("com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE",com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(413).collectInput("com.google.javascript.jscomp.NodeTraversal.this.callback",com.google.javascript.jscomp.NodeTraversal.this.callback);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(413).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopeRoots",com.google.javascript.jscomp.NodeTraversal.this.scopeRoots);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(413).collectInput("com.google.javascript.jscomp.NodeTraversal.NODE_TRAVERSAL_ERROR",com.google.javascript.jscomp.NodeTraversal.NODE_TRAVERSAL_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(413).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopeCreator",com.google.javascript.jscomp.NodeTraversal.this.scopeCreator);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(413).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(413).collectionEnds();
            }
            if (runtimeAngelicValue)
                return scopes.peek().getRootNode();

        } else {
            return scopeRoots.peek();
        }
    }

    private void pushScope(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkState(curNode != null);
        scopeRoots.push(node);
        cfgs.push(null);
        if (scopeCallback != null) {
            scopeCallback.enterScope(this);
        }
    }

    private void pushScope(com.google.javascript.jscomp.Scope s) {
        com.google.common.base.Preconditions.checkState(curNode != null);
        scopes.push(s);
        cfgs.push(null);
        if (scopeCallback != null) {
            scopeCallback.enterScope(this);
        }
    }

    private void popScope() {
        if (scopeCallback != null) {
            scopeCallback.exitScope(this);
        }
        if (scopeRoots.isEmpty()) {
            scopes.pop();
        } else {
            scopeRoots.pop();
        }
        cfgs.pop();
    }

    public com.google.javascript.jscomp.Scope getScope() {
        com.google.javascript.jscomp.Scope scope = (scopes.isEmpty()) ? null : scopes.peek();
        if (scopeRoots.isEmpty()) {
            return scope;
        }
        java.util.Iterator<com.google.javascript.rhino.Node> it = scopeRoots.descendingIterator();
        while (it.hasNext()) {
            scope = scopeCreator.createScope(it.next(), scope);
            scopes.push(scope);
        } 
        scopeRoots.clear();
        return scope;
    }

    public com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> getControlFlowGraph() {
        if (cfgs.peek() == null) {
            com.google.javascript.jscomp.ControlFlowAnalysis cfa = new com.google.javascript.jscomp.ControlFlowAnalysis(compiler, false, true);
            cfa.process(null, getScopeRoot());
            cfgs.pop();
            cfgs.push(cfa.getCfg());
        }
        return cfgs.peek();
    }

    public com.google.javascript.rhino.Node getScopeRoot() {
        if (scopeRoots.isEmpty()) {
            return scopes.peek().getRootNode();
        } else {
            return scopeRoots.peek();
        }
    }

    boolean inGlobalScope() {
        return getScopeDepth() <= 1;
    }

    int getScopeDepth() {
        return scopes.size() + scopeRoots.size();
    }

    public boolean hasScope() {
        return !(scopes.isEmpty() && scopeRoots.isEmpty());
    }

    public void report(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType diagnosticType, java.lang.String... arguments) {
        com.google.javascript.jscomp.JSError error = com.google.javascript.jscomp.JSError.make(getSourceName(), n, diagnosticType, arguments);
        compiler.report(error);
    }

    private static java.lang.String getSourceName(com.google.javascript.rhino.Node n) {
        java.lang.String name = n.getSourceFileName();
        return name == null ? "" : name;
    }

    com.google.javascript.rhino.InputId getInputId() {
        return inputId;
    }

    public com.google.javascript.jscomp.JSError makeError(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CheckLevel level, com.google.javascript.jscomp.DiagnosticType type, java.lang.String... arguments) {
        return com.google.javascript.jscomp.JSError.make(getSourceName(), n, level, type, arguments);
    }

    public com.google.javascript.jscomp.JSError makeError(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType type, java.lang.String... arguments) {
        return com.google.javascript.jscomp.JSError.make(getSourceName(), n, type, arguments);
    }
}
[2364456] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659923538138
GPR[SSUN]-1659923538138
160819208
GPR[SPVATF]-1659923538408
GPR[EPVATF]-1659923538751
GPR[SPS]-1659923538751
[2365593] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:713.
GPR[EPS]-1659923539275
GPR[SPVATF]-1659923539276
GPR[EPVATF]-1659923539596
GPR[SPS]-1659923539596
[2366437] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:713.
GPR[EPS]-1659923540119
GPR[ESUN]-1659923540119
GPR[SSUN]-1659923540119
160819208
GPR[ESUN]-1659923540356
GPR[SSUN]-1659923540356
2433571
GPR[ESUN]-1659923540594
GPR[SSUN]-1659923540594
-1345859678
GPR[ESUN]-1659923540847
GPR[SSUN]-1659923540847
1537627151
GPR[SPVATF]-1659923541094
GPR[EPVATF]-1659923541453
GPR[SPS]-1659923541453
[2368248] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:173.
GPR[EPS]-1659923541930
GPR[SPVATF]-1659923541930
GPR[EPVATF]-1659923542285
GPR[SPS]-1659923542285
[2369056] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:173.
GPR[EPS]-1659923542738
GPR[ESUN]-1659923542738
GPR[SSUN]-1659923542738
-1345859678
GPR[ESUN]-1659923542991
GPR[SSUN]-1659923542991
-1345859678
GPR[SPVATF]-1659923543241
GPR[EPVATF]-1659923543623
GPR[SPS]-1659923543623
[2370570] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:394.
GPR[EPS]-1659923544252
GPR[ESUN]-1659923544252
GPR[SSUN]-1659923544252
-1345859678
GPR[ESUN]-1659923544507
GPR[SSUN]-1659923544507
2433571
GPR[ESUN]-1659923544745
GPR[SSUN]-1659923544745
2433571
GPR[SPVATF]-1659923544981
GPR[EPVATF]-1659923545348
GPR[SPS]-1659923545348
[2372268] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:832.
GPR[EPS]-1659923545950
GPR[ESUN]-1659923545950
GPR[SSUN]-1659923545950
GPR[ESUN]-1659923545950
GPR[SSUN]-1659923545950
GPR[ESUN]-1659923545950
GPR[SSUN]-1659923545950
GPR[ESUN]-1659923545950
GPR[SSUN]-1659923545950
GPR[ESUN]-1659923545950
GPR[SSUN]-1659923545950
GPR[ESUN]-1659923545950
GPR[SSUN]-1659923545950
GPR[ESUN]-1659923545950
GPR[SSUN]-1659923545950
GPR[ESUN]-1659923545950
GPR[SSUN]-1659923545950
1965452846
GPR[ESUN]-1659923546167
GPR[SSUN]-1659923546167
1965452846
GPR[SPVATF]-1659923546381
GPR[EPVATF]-1659923546763
GPR[SPS]-1659923546763
[2374430] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:208.
GPR[EPS]-1659923548112
GPR[SPVATF]-1659923548112
GPR[EPVATF]-1659923548441
GPR[SPS]-1659923548441
[2375344] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:208.
GPR[EPS]-1659923549026
GPR[ESUN]-1659923549026
GPR[SSUN]-1659923549026
2069352659
GPR[SPVATF]-1659923549252
GPR[EPVATF]-1659923550069
GPR[SPS]-1659923550069
[2376640] ERROR ConstraintModelBuilder - Unable to compile the change: 
class UnionTypeBuilder implements java.io.Serializable {
    private static final long serialVersionUID = 1L;

    private static final int DEFAULT_MAX_UNION_SIZE = 20;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry registry;

    private final java.util.List<com.google.javascript.rhino.jstype.JSType> alternates = com.google.common.collect.Lists.newArrayList();

    private boolean isAllType = false;

    private boolean isNativeUnknownType = false;

    private boolean areAllUnknownsChecked = true;

    private final int maxUnionSize;

    private int functionTypePosition = -1;

    private com.google.javascript.rhino.jstype.JSType result = null;

    UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry registry) {
        this(registry, com.google.javascript.rhino.jstype.UnionTypeBuilder.DEFAULT_MAX_UNION_SIZE);
    }

    UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry registry, int maxUnionSize) {
        this.registry = registry;
        this.maxUnionSize = maxUnionSize;
    }

    java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> getAlternates() {
        com.google.javascript.rhino.jstype.JSType specialCaseType = reduceAlternatesWithoutUnion();
        if (specialCaseType != null) {
            return com.google.common.collect.ImmutableList.of(specialCaseType);
        }
        return java.util.Collections.unmodifiableList(alternates);
    }

    com.google.javascript.rhino.jstype.UnionTypeBuilder addAlternate(com.google.javascript.rhino.jstype.JSType alternate) {
        if (alternate.isNoType()) {
            return this;
        }
        isAllType = isAllType || alternate.isAllType();
        boolean isAlternateUnknown = alternate instanceof com.google.javascript.rhino.jstype.UnknownType;
        isNativeUnknownType = isNativeUnknownType || isAlternateUnknown;
        if (isAlternateUnknown) {
            areAllUnknownsChecked = areAllUnknownsChecked && alternate.isCheckedUnknownType();
        }
        if ((!isAllType) && (!isNativeUnknownType)) {
            if (alternate.isUnionType()) {
                com.google.javascript.rhino.jstype.UnionType union = alternate.toMaybeUnionType();
                for (com.google.javascript.rhino.jstype.JSType unionAlt : union.getAlternates()) {
                    addAlternate(unionAlt);
                }
            } else {
                if (alternates.size() > maxUnionSize) {
                    return this;
                }
                if (alternate.isFunctionType() && (functionTypePosition != (-1))) {
                    com.google.javascript.rhino.jstype.FunctionType other = alternates.get(functionTypePosition).toMaybeFunctionType();
                    com.google.javascript.rhino.jstype.FunctionType supremum = alternate.toMaybeFunctionType().supAndInfHelper(other, true);
                    alternates.set(functionTypePosition, supremum);
                    result = null;
                    return this;
                }
                int currentIndex = 0;
                java.util.Iterator<com.google.javascript.rhino.jstype.JSType> it = alternates.iterator();
                while (it.hasNext()) {
                    com.google.javascript.rhino.jstype.JSType current = it.next();
                    if (((((alternate.isUnknownType() || current.isUnknownType()) || alternate.isNoResolvedType()) || current.isNoResolvedType()) || alternate.hasAnyTemplate()) || current.hasAnyTemplate()) {
                        if (alternate.isEquivalentTo(current)) {
                            return this;
                        }
                    } else if (alternate.isSubtype(current)) {
                        return this;
                    } else if (current.isSubtype(alternate)) {
                        it.remove();
                        if (currentIndex == functionTypePosition) {
                            functionTypePosition = -1;
                        } else if (currentIndex < functionTypePosition) {
                            functionTypePosition--;
                            currentIndex--;
                        }
                    }
                    currentIndex++;
                } 
                if (alternate.isFunctionType()) {
                    com.google.common.base.Preconditions.checkState(functionTypePosition == (-1));
                    functionTypePosition = alternates.size();
                }
                alternates.add(alternate);
                result = null;
            }
        } else {
            result = null;
        }
        return this;
    }

    private com.google.javascript.rhino.jstype.JSType reduceAlternatesWithoutUnion() {
        if (isAllType) {
            return registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ALL_TYPE);
        } else if (isNativeUnknownType) {
            if (areAllUnknownsChecked) {
                return registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.CHECKED_UNKNOWN_TYPE);
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(422).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(422).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(422).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.result",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.result);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(422).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.isNativeUnknownType",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.isNativeUnknownType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(422).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.isAllType",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.isAllType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(422).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.registry",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.registry);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(422).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.areAllUnknownsChecked",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.areAllUnknownsChecked);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(422).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.functionTypePosition",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.functionTypePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(422).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.maxUnionSize",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.maxUnionSize);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(422).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.alternates",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.alternates);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(422).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.DEFAULT_MAX_UNION_SIZE",com.google.javascript.rhino.jstype.UnionTypeBuilder.DEFAULT_MAX_UNION_SIZE);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(422).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(422).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);

            }
        } else {
            int size = alternates.size();
            if (size > maxUnionSize) {
                return registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            } else if (size > 1) {
                return null;
            } else if (size == 1) {
                return alternates.iterator().next();
            } else {
                return registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE);
            }
        }
    }

    com.google.javascript.rhino.jstype.JSType build() {
        if (result == null) {
            result = reduceAlternatesWithoutUnion();
            if (result == null) {
                result = new com.google.javascript.rhino.jstype.UnionType(registry, getAlternateListCopy());
            }
        }
        return result;
    }

    private java.util.Collection<com.google.javascript.rhino.jstype.JSType> getAlternateListCopy() {
        return com.google.common.collect.ImmutableList.copyOf(alternates);
    }
}
[2376640] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659923550322
GPR[SSUN]-1659923550322
GPR[ESUN]-1659923550322
GPR[SSUN]-1659923550322
1965452846
GPR[ESUN]-1659923550537
GPR[SSUN]-1659923550537
GPR[ESUN]-1659923550537
GPR[SSUN]-1659923550537
GPR[ESUN]-1659923550537
GPR[SSUN]-1659923550537
1965452846
GPR[ESUN]-1659923550748
GPR[SSUN]-1659923550748
1965452846
GPR[ESUN]-1659923550959
GPR[SSUN]-1659923550959
1965452846
GPR[SPVATF]-1659923551173
GPR[EPVATF]-1659923551531
GPR[SPS]-1659923551531
[2378386] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:207.
GPR[EPS]-1659923552068
GPR[ESUN]-1659923552068
GPR[SSUN]-1659923552068
1965452846
GPR[ESUN]-1659923552287
GPR[SSUN]-1659923552287
1965452846
GPR[ESUN]-1659923552502
GPR[SSUN]-1659923552502
1537627151
GPR[SPVATF]-1659923552710
GPR[EPVATF]-1659923553068
GPR[SPS]-1659923553068
[2379881] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:204.
GPR[EPS]-1659923553563
GPR[SPVATF]-1659923553563
GPR[EPVATF]-1659923553975
GPR[SPS]-1659923553975
[2380794] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:204.
GPR[EPS]-1659923554476
GPR[ESUN]-1659923554476
GPR[SSUN]-1659923554476
2069352659
GPR[SPVATF]-1659923554708
GPR[EPVATF]-1659923554985
GPR[SPS]-1659923554985
[2381549] ERROR ConstraintModelBuilder - Unable to compile the change: 
class UnionTypeBuilder implements java.io.Serializable {
    private static final long serialVersionUID = 1L;

    private static final int DEFAULT_MAX_UNION_SIZE = 20;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry registry;

    private final java.util.List<com.google.javascript.rhino.jstype.JSType> alternates = com.google.common.collect.Lists.newArrayList();

    private boolean isAllType = false;

    private boolean isNativeUnknownType = false;

    private boolean areAllUnknownsChecked = true;

    private final int maxUnionSize;

    private int functionTypePosition = -1;

    private com.google.javascript.rhino.jstype.JSType result = null;

    UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry registry) {
        this(registry, com.google.javascript.rhino.jstype.UnionTypeBuilder.DEFAULT_MAX_UNION_SIZE);
    }

    UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry registry, int maxUnionSize) {
        this.registry = registry;
        this.maxUnionSize = maxUnionSize;
    }

    java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> getAlternates() {
        com.google.javascript.rhino.jstype.JSType specialCaseType = reduceAlternatesWithoutUnion();
        if (specialCaseType != null) {
            return com.google.common.collect.ImmutableList.of(specialCaseType);
        }
        return java.util.Collections.unmodifiableList(alternates);
    }

    com.google.javascript.rhino.jstype.UnionTypeBuilder addAlternate(com.google.javascript.rhino.jstype.JSType alternate) {
        if (alternate.isNoType()) {
            return this;
        }
        isAllType = isAllType || alternate.isAllType();
        boolean isAlternateUnknown = alternate instanceof com.google.javascript.rhino.jstype.UnknownType;
        isNativeUnknownType = isNativeUnknownType || isAlternateUnknown;
        if (isAlternateUnknown) {
            areAllUnknownsChecked = areAllUnknownsChecked && alternate.isCheckedUnknownType();
        }
        if ((!isAllType) && (!isNativeUnknownType)) {
            if (alternate.isUnionType()) {
                com.google.javascript.rhino.jstype.UnionType union = alternate.toMaybeUnionType();
                for (com.google.javascript.rhino.jstype.JSType unionAlt : union.getAlternates()) {
                    addAlternate(unionAlt);
                }
            } else {
                if (alternates.size() > maxUnionSize) {
                    return this;
                }
                if (alternate.isFunctionType() && (functionTypePosition != (-1))) {
                    com.google.javascript.rhino.jstype.FunctionType other = alternates.get(functionTypePosition).toMaybeFunctionType();
                    com.google.javascript.rhino.jstype.FunctionType supremum = alternate.toMaybeFunctionType().supAndInfHelper(other, true);
                    alternates.set(functionTypePosition, supremum);
                    result = null;
                    return this;
                }
                int currentIndex = 0;
                java.util.Iterator<com.google.javascript.rhino.jstype.JSType> it = alternates.iterator();
                while (it.hasNext()) {
                    com.google.javascript.rhino.jstype.JSType current = it.next();
                    if (((((alternate.isUnknownType() || current.isUnknownType()) || alternate.isNoResolvedType()) || current.isNoResolvedType()) || alternate.hasAnyTemplate()) || current.hasAnyTemplate()) {
                        if (alternate.isEquivalentTo(current)) {
                            return this;
                        }
                    } else if (alternate.isSubtype(current)) {
                        return this;
                    } else if (current.isSubtype(alternate)) {
                        it.remove();
                        if (currentIndex == functionTypePosition) {
                            functionTypePosition = -1;
                        } else if (currentIndex < functionTypePosition) {
                            functionTypePosition--;
                            currentIndex--;
                        }
                    }
                    currentIndex++;
                } 
                if (alternate.isFunctionType()) {
                    com.google.common.base.Preconditions.checkState(functionTypePosition == (-1));
                    functionTypePosition = alternates.size();
                }
                alternates.add(alternate);
                result = null;
            }
        } else {
            result = null;
        }
        return this;
    }

    private com.google.javascript.rhino.jstype.JSType reduceAlternatesWithoutUnion() {
        if (isAllType) {
            return registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ALL_TYPE);
        } else if (isNativeUnknownType) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(426).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(426).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(426).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.result",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.result);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(426).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.isNativeUnknownType",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.isNativeUnknownType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(426).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.isAllType",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.isAllType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(426).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.registry",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.registry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(426).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.areAllUnknownsChecked",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.areAllUnknownsChecked);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(426).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.functionTypePosition",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.functionTypePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(426).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.maxUnionSize",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.maxUnionSize);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(426).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.alternates",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.alternates);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(426).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.DEFAULT_MAX_UNION_SIZE",com.google.javascript.rhino.jstype.UnionTypeBuilder.DEFAULT_MAX_UNION_SIZE);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(426).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(426).collectionEnds();
            }
            if (runtimeAngelicValue) if (areAllUnknownsChecked) {
                return registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.CHECKED_UNKNOWN_TYPE);
            } else {
                return registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            }
        } else {
            int size = alternates.size();
            if (size > maxUnionSize) {
                return registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            } else if (size > 1) {
                return null;
            } else if (size == 1) {
                return alternates.iterator().next();
            } else {
                return registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE);
            }
        }
    }

    com.google.javascript.rhino.jstype.JSType build() {
        if (result == null) {
            result = reduceAlternatesWithoutUnion();
            if (result == null) {
                result = new com.google.javascript.rhino.jstype.UnionType(registry, getAlternateListCopy());
            }
        }
        return result;
    }

    private java.util.Collection<com.google.javascript.rhino.jstype.JSType> getAlternateListCopy() {
        return com.google.common.collect.ImmutableList.copyOf(alternates);
    }
}
[2381549] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659923555231
GPR[EPVATF]-1659923555512
GPR[SPS]-1659923555512
[2382232] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionTypeBuilder:225.
GPR[EPS]-1659923555914
GPR[ESUN]-1659923555914
GPR[SSUN]-1659923555914
704176156
GPR[ESUN]-1659923556123
GPR[SSUN]-1659923556123
704176156
GPR[SPVATF]-1659923556330
GPR[EPVATF]-1659923556668
GPR[SPS]-1659923556668
[2383454] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:176.
GPR[EPS]-1659923557136
GPR[SPVATF]-1659923557136
GPR[EPVATF]-1659923557461
GPR[SPS]-1659923557461
[2384254] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:176.
GPR[EPS]-1659923557936
GPR[ESUN]-1659923557936
GPR[SSUN]-1659923557936
704176156
GPR[SPVATF]-1659923558174
GPR[EPVATF]-1659923558505
GPR[SPS]-1659923558505
[2385293] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:170.
GPR[EPS]-1659923558975
GPR[SPVATF]-1659923558975
GPR[EPVATF]-1659923559305
GPR[SPS]-1659923559305
[2386100] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:170.
GPR[EPS]-1659923559782
GPR[ESUN]-1659923559782
GPR[SSUN]-1659923559782
704176156
GPR[ESUN]-1659923559992
GPR[SSUN]-1659923559992
704176156
GPR[SPVATF]-1659923560199
GPR[EPVATF]-1659923560523
GPR[SPS]-1659923560523
[2387339] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:165.
GPR[EPS]-1659923561021
GPR[ESUN]-1659923561021
GPR[SSUN]-1659923561021
704176156
GPR[SPVATF]-1659923561234
GPR[EPVATF]-1659923561562
GPR[SPS]-1659923561562
[2388350] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:142.
GPR[EPS]-1659923562032
GPR[ESUN]-1659923562032
GPR[SSUN]-1659923562032
704176156
GPR[SPVATF]-1659923562243
GPR[EPVATF]-1659923562575
GPR[SPS]-1659923562575
[2389371] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:141.
GPR[EPS]-1659923563053
GPR[ESUN]-1659923563053
GPR[SSUN]-1659923563054
-1345859678
GPR[ESUN]-1659923563306
GPR[SSUN]-1659923563306
1537627151
GPR[ESUN]-1659923563511
GPR[SSUN]-1659923563511
-1345859678
GPR[ESUN]-1659923563758
GPR[SSUN]-1659923563758
-1345859678
GPR[SPVATF]-1659923564037
GPR[EPVATF]-1659923564368
GPR[SPS]-1659923564368
[2391267] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:622.
GPR[EPS]-1659923564949
GPR[ESUN]-1659923564949
GPR[SSUN]-1659923564949
-1345859678
GPR[SPVATF]-1659923565200
GPR[EPVATF]-1659923565529
GPR[SPS]-1659923565530
[2392552] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:621.
GPR[EPS]-1659923566234
GPR[ESUN]-1659923566234
GPR[SSUN]-1659923566234
-1345859678
GPR[SPVATF]-1659923566486
GPR[EPVATF]-1659923566849
GPR[SPS]-1659923566849
[2393751] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:620.
GPR[EPS]-1659923567433
GPR[ESUN]-1659923567433
GPR[SSUN]-1659923567433
-1345859678
GPR[SPVATF]-1659923567685
GPR[EPVATF]-1659923568016
GPR[SPS]-1659923568016
[2394914] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:616.
GPR[EPS]-1659923568596
GPR[ESUN]-1659923568596
GPR[SSUN]-1659923568596
-1345859678
GPR[ESUN]-1659923568849
GPR[SSUN]-1659923568850
2433571
GPR[ESUN]-1659923569089
GPR[SSUN]-1659923569089
GPR[ESUN]-1659923569089
GPR[SSUN]-1659923569089
GPR[ESUN]-1659923569089
GPR[SSUN]-1659923569089
GPR[ESUN]-1659923569089
GPR[SSUN]-1659923569089
GPR[ESUN]-1659923569089
GPR[SSUN]-1659923569089
GPR[ESUN]-1659923569089
GPR[SSUN]-1659923569089
GPR[ESUN]-1659923569089
GPR[SSUN]-1659923569089
GPR[ESUN]-1659923569089
GPR[SSUN]-1659923569089
GPR[ESUN]-1659923569089
GPR[SSUN]-1659923569089
GPR[ESUN]-1659923569089
GPR[SSUN]-1659923569089
GPR[ESUN]-1659923569089
GPR[SSUN]-1659923569089
GPR[ESUN]-1659923569089
GPR[SSUN]-1659923569089
GPR[ESUN]-1659923569089
GPR[SSUN]-1659923569089
GPR[ESUN]-1659923569089
GPR[SSUN]-1659923569089
GPR[ESUN]-1659923569089
GPR[SSUN]-1659923569089
GPR[ESUN]-1659923569089
GPR[SSUN]-1659923569089
GPR[ESUN]-1659923569089
GPR[SSUN]-1659923569089
GPR[ESUN]-1659923569089
GPR[SSUN]-1659923569089
GPR[ESUN]-1659923569089
GPR[SSUN]-1659923569089
GPR[ESUN]-1659923569089
GPR[SSUN]-1659923569089
GPR[ESUN]-1659923569089
GPR[SSUN]-1659923569089
1965452846
GPR[ESUN]-1659923569337
GPR[SSUN]-1659923569337
1965452846
GPR[ESUN]-1659923569550
GPR[SSUN]-1659923569550
1965452846
GPR[ESUN]-1659923569762
GPR[SSUN]-1659923569762
1965452846
GPR[SPVATF]-1659923569972
GPR[EPVATF]-1659923570291
GPR[SPS]-1659923570291
[2397132] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:86.
GPR[EPS]-1659923570814
GPR[ESUN]-1659923570814
GPR[SSUN]-1659923570814
1965452846
GPR[SPVATF]-1659923571030
GPR[EPVATF]-1659923571351
GPR[SPS]-1659923571351
[2398187] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:85.
GPR[EPS]-1659923571869
GPR[ESUN]-1659923571869
GPR[SSUN]-1659923571869
1965452846
GPR[ESUN]-1659923572129
GPR[SSUN]-1659923572129
1965452846
GPR[ESUN]-1659923572342
GPR[SSUN]-1659923572342
1965452846
GPR[ESUN]-1659923572554
GPR[SSUN]-1659923572554
1965452846
GPR[ESUN]-1659923572767
GPR[SSUN]-1659923572767
69062959
GPR[ESUN]-1659923572958
GPR[SSUN]-1659923572958
69062959
GPR[SPVATF]-1659923573149
GPR[EPVATF]-1659923573470
GPR[SPS]-1659923573470
[2400250] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:221.
GPR[EPS]-1659923573932
GPR[SPVATF]-1659923573932
GPR[EPVATF]-1659923574251
GPR[SPS]-1659923574251
[2401026] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:221.
GPR[EPS]-1659923574708
GPR[ESUN]-1659923574708
GPR[SSUN]-1659923574708
69062959
GPR[ESUN]-1659923574939
GPR[SSUN]-1659923574939
1965452846
GPR[ESUN]-1659923575154
GPR[SSUN]-1659923575154
-1797850673
GPR[SPVATF]-1659923575404
GPR[EPVATF]-1659923575684
GPR[SPS]-1659923575684
[2402550] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1280.
GPR[EPS]-1659923576232
GPR[SPVATF]-1659923576232
GPR[EPVATF]-1659923576516
GPR[SPS]-1659923576516
[2403391] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1280.
GPR[EPS]-1659923577073
GPR[ESUN]-1659923577073
GPR[SSUN]-1659923577073
-1797850673
GPR[ESUN]-1659923577330
GPR[SSUN]-1659923577330
-1797850673
GPR[SPVATF]-1659923577619
GPR[EPVATF]-1659923577920
GPR[SPS]-1659923577920
[2404784] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1278.
GPR[EPS]-1659923578466
GPR[ESUN]-1659923578466
GPR[SSUN]-1659923578466
GPR[ESUN]-1659923578466
GPR[SSUN]-1659923578466
GPR[ESUN]-1659923578466
GPR[SSUN]-1659923578466
-1117079791
GPR[SPVATF]-1659923578671
GPR[EPVATF]-1659923578956
GPR[SPS]-1659923578956
[2405732] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:794.
GPR[EPS]-1659923579414
GPR[ESUN]-1659923579414
GPR[SSUN]-1659923579415
-1345859678
GPR[SPVATF]-1659923579668
GPR[EPVATF]-1659923579985
GPR[SPS]-1659923579985
[2406878] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:907.
GPR[EPS]-1659923580560
GPR[ESUN]-1659923580560
GPR[SSUN]-1659923580560
2433571
GPR[ESUN]-1659923580849
GPR[SSUN]-1659923580849
GPR[ESUN]-1659923580849
GPR[SSUN]-1659923580849
GPR[ESUN]-1659923580849
GPR[SSUN]-1659923580849
GPR[ESUN]-1659923580849
GPR[SSUN]-1659923580849
GPR[ESUN]-1659923580849
GPR[SSUN]-1659923580849
GPR[ESUN]-1659923580849
GPR[SSUN]-1659923580849
GPR[ESUN]-1659923580849
GPR[SSUN]-1659923580849
GPR[ESUN]-1659923580849
GPR[SSUN]-1659923580849
GPR[ESUN]-1659923580849
GPR[SSUN]-1659923580849
2433571
GPR[ESUN]-1659923581087
GPR[SSUN]-1659923581088
GPR[ESUN]-1659923581088
GPR[SSUN]-1659923581088
GPR[ESUN]-1659923581088
GPR[SSUN]-1659923581088
GPR[ESUN]-1659923581088
GPR[SSUN]-1659923581088
GPR[ESUN]-1659923581088
GPR[SSUN]-1659923581088
GPR[ESUN]-1659923581088
GPR[SSUN]-1659923581088
GPR[ESUN]-1659923581088
GPR[SSUN]-1659923581088
GPR[ESUN]-1659923581088
GPR[SSUN]-1659923581088
GPR[ESUN]-1659923581088
GPR[SSUN]-1659923581088
GPR[ESUN]-1659923581088
GPR[SSUN]-1659923581088
GPR[ESUN]-1659923581088
GPR[SSUN]-1659923581088
GPR[ESUN]-1659923581088
GPR[SSUN]-1659923581088
GPR[ESUN]-1659923581088
GPR[SSUN]-1659923581088
GPR[ESUN]-1659923581088
GPR[SSUN]-1659923581088
1965452846
GPR[ESUN]-1659923581302
GPR[SSUN]-1659923581302
2433571
GPR[SPVATF]-1659923581539
GPR[EPVATF]-1659923581900
GPR[SPS]-1659923581900
[2408822] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:831.
GPR[EPS]-1659923582504
GPR[SPVATF]-1659923582504
GPR[EPVATF]-1659923582859
GPR[SPS]-1659923582859
[2409802] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:831.
GPR[EPS]-1659923583484
GPR[ESUN]-1659923583484
GPR[SSUN]-1659923583484
2433571
GPR[ESUN]-1659923583726
GPR[SSUN]-1659923583726
1965452846
GPR[ESUN]-1659923583942
GPR[SSUN]-1659923583942
2069352659
GPR[SPVATF]-1659923584146
GPR[EPVATF]-1659923584432
GPR[SPS]-1659923584432
[2411164] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionTypeBuilder:133.
GPR[EPS]-1659923584846
GPR[ESUN]-1659923584846
GPR[SSUN]-1659923584846
-1007410555
GPR[ESUN]-1659923585042
GPR[SSUN]-1659923585043
1965452846
GPR[ESUN]-1659923585254
GPR[SSUN]-1659923585254
1965452846
GPR[SPVATF]-1659923585467
GPR[EPVATF]-1659923585793
GPR[SPS]-1659923585793
[2412691] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:140.
GPR[EPS]-1659923586373
GPR[ESUN]-1659923586373
GPR[SSUN]-1659923586373
1965452846
GPR[SPVATF]-1659923586594
GPR[EPVATF]-1659923586933
GPR[SPS]-1659923586933
[2413772] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:137.
GPR[EPS]-1659923587454
GPR[ESUN]-1659923587454
GPR[SSUN]-1659923587454
1965452846
GPR[SPVATF]-1659923587675
GPR[EPVATF]-1659923588008
GPR[SPS]-1659923588008
[2414846] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:136.
GPR[EPS]-1659923588528
GPR[SPVATF]-1659923588528
GPR[EPVATF]-1659923588855
GPR[SPS]-1659923588855
[2415741] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:136.
GPR[EPS]-1659923589423
GPR[ESUN]-1659923589423
GPR[SSUN]-1659923589423
1965452846
GPR[ESUN]-1659923589641
GPR[SSUN]-1659923589641
1965452846
GPR[ESUN]-1659923589853
GPR[SSUN]-1659923589853
1965452846
GPR[ESUN]-1659923590065
GPR[SSUN]-1659923590065
GPR[ESUN]-1659923590065
GPR[SSUN]-1659923590065
GPR[ESUN]-1659923590066
GPR[SSUN]-1659923590066
GPR[ESUN]-1659923590066
GPR[SSUN]-1659923590066
GPR[ESUN]-1659923590066
GPR[SSUN]-1659923590066
-711686510
GPR[SPVATF]-1659923590295
GPR[EPVATF]-1659923595178
GPR[SPS]-1659923595178
[2422005] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:161.
GPR[EPS]-1659923595687
GPR[ESUN]-1659923595687
GPR[SSUN]-1659923595687
-711686510
GPR[SPVATF]-1659923595922
GPR[EPVATF]-1659923596206
GPR[SPS]-1659923596206
[2423140] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:160.
GPR[EPS]-1659923596822
GPR[ESUN]-1659923596822
GPR[SSUN]-1659923596822
-711686510
GPR[SPVATF]-1659923597052
GPR[EPVATF]-1659923597673
GPR[SPS]-1659923597673
[2424495] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:127.
GPR[EPS]-1659923598177
GPR[ESUN]-1659923598177
GPR[SSUN]-1659923598177
-711686510
GPR[SPVATF]-1659923598419
GPR[EPVATF]-1659923598721
GPR[SPS]-1659923598721
[2425536] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:124.
GPR[EPS]-1659923599218
GPR[SPVATF]-1659923599219
GPR[EPVATF]-1659923599508
GPR[SPS]-1659923599508
[2426349] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:124.
GPR[EPS]-1659923600031
GPR[ESUN]-1659923600031
GPR[SSUN]-1659923600031
-711686510
GPR[ESUN]-1659923600259
GPR[SSUN]-1659923600259
2433571
GPR[ESUN]-1659923600501
GPR[SSUN]-1659923600501
-534884160
GPR[ESUN]-1659923600834
GPR[SSUN]-1659923600834
-711686510
GPR[SPVATF]-1659923601077
GPR[EPVATF]-1659923601364
GPR[SPS]-1659923601364
[2428178] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:122.
GPR[EPS]-1659923601860
GPR[SPVATF]-1659923601860
GPR[EPVATF]-1659923602142
GPR[SPS]-1659923602142
[2428964] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:122.
GPR[EPS]-1659923602646
GPR[ESUN]-1659923602646
GPR[SSUN]-1659923602646
-711686510
GPR[ESUN]-1659923602881
GPR[SSUN]-1659923602881
GPR[ESUN]-1659923602881
GPR[SSUN]-1659923602881
GPR[ESUN]-1659923602881
GPR[SSUN]-1659923602881
GPR[ESUN]-1659923602881
GPR[SSUN]-1659923602881
GPR[ESUN]-1659923602881
GPR[SSUN]-1659923602881
GPR[ESUN]-1659923602881
GPR[SSUN]-1659923602881
GPR[ESUN]-1659923602881
GPR[SSUN]-1659923602881
GPR[ESUN]-1659923602881
GPR[SSUN]-1659923602881
GPR[ESUN]-1659923602881
GPR[SSUN]-1659923602881
2433571
GPR[SPVATF]-1659923603120
GPR[EPVATF]-1659923603480
GPR[SPS]-1659923603480
[2430423] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1408.
GPR[EPS]-1659923604105
GPR[ESUN]-1659923604105
GPR[SSUN]-1659923604105
2433571
GPR[ESUN]-1659923604346
GPR[SSUN]-1659923604346
GPR[ESUN]-1659923604346
GPR[SSUN]-1659923604346
1537627151
GPR[ESUN]-1659923604555
GPR[SSUN]-1659923604555
-1345859678
GPR[ESUN]-1659923604806
GPR[SSUN]-1659923604807
-1345859678
GPR[SPVATF]-1659923605058
GPR[EPVATF]-1659923605369
GPR[SPS]-1659923605369
[2432292] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:906.
GPR[EPS]-1659923605974
GPR[SPVATF]-1659923605975
GPR[EPVATF]-1659923606297
GPR[SPS]-1659923606297
[2433204] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:906.
GPR[EPS]-1659923606886
GPR[ESUN]-1659923606886
GPR[SSUN]-1659923606886
-1345859678
GPR[ESUN]-1659923607140
GPR[SSUN]-1659923607140
2433571
GPR[ESUN]-1659923607378
GPR[SSUN]-1659923607378
2433571
GPR[SPVATF]-1659923607615
GPR[EPVATF]-1659923607974
GPR[SPS]-1659923607974
[2434887] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1407.
GPR[EPS]-1659923608569
GPR[ESUN]-1659923608569
GPR[SSUN]-1659923608569
2433571
GPR[ESUN]-1659923608809
GPR[SSUN]-1659923608809
-1345859678
GPR[SPVATF]-1659923609060
GPR[EPVATF]-1659923609428
GPR[SPS]-1659923609429
[2436309] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:1156.
GPR[EPS]-1659923609991
GPR[ESUN]-1659923609992
GPR[SSUN]-1659923609992
GPR[ESUN]-1659923609992
GPR[SSUN]-1659923609992
GPR[ESUN]-1659923609992
GPR[SSUN]-1659923609992
GPR[ESUN]-1659923609992
GPR[SSUN]-1659923609992
GPR[ESUN]-1659923609992
GPR[SSUN]-1659923609992
GPR[ESUN]-1659923609992
GPR[SSUN]-1659923609992
GPR[ESUN]-1659923609992
GPR[SSUN]-1659923609992
GPR[ESUN]-1659923609992
GPR[SSUN]-1659923609992
GPR[ESUN]-1659923609992
GPR[SSUN]-1659923609992
GPR[ESUN]-1659923609992
GPR[SSUN]-1659923609992
GPR[ESUN]-1659923609992
GPR[SSUN]-1659923609992
GPR[ESUN]-1659923609992
GPR[SSUN]-1659923609992
GPR[ESUN]-1659923609992
GPR[SSUN]-1659923609992
GPR[ESUN]-1659923609992
GPR[SSUN]-1659923609992
GPR[ESUN]-1659923609992
GPR[SSUN]-1659923609992
GPR[ESUN]-1659923609992
GPR[SSUN]-1659923609992
GPR[ESUN]-1659923609992
GPR[SSUN]-1659923609992
GPR[ESUN]-1659923609992
GPR[SSUN]-1659923609992
GPR[ESUN]-1659923609992
GPR[SSUN]-1659923609992
GPR[ESUN]-1659923609992
GPR[SSUN]-1659923609992
-534884160
GPR[ESUN]-1659923610330
GPR[SSUN]-1659923610330
-534884160
GPR[SPVATF]-1659923610665
GPR[EPVATF]-1659923611010
GPR[SPS]-1659923611010
[2438113] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1905.
GPR[EPS]-1659923611795
GPR[ESUN]-1659923611795
GPR[SSUN]-1659923611795
-534884160
GPR[ESUN]-1659923612133
GPR[SSUN]-1659923612134
704176156
GPR[ESUN]-1659923612342
GPR[SSUN]-1659923612342
704176156
GPR[SPVATF]-1659923612550
GPR[EPVATF]-1659923612899
GPR[SPS]-1659923612899
[2439697] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst:70.
GPR[EPS]-1659923613379
GPR[ESUN]-1659923613379
GPR[SSUN]-1659923613379
704176156
GPR[SPVATF]-1659923613593
GPR[EPVATF]-1659923613941
GPR[SPS]-1659923613941
[2440769] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst:69.
GPR[EPS]-1659923614451
GPR[SPVATF]-1659923614451
GPR[EPVATF]-1659923614796
GPR[SPS]-1659923614796
[2441596] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst:69.
GPR[EPS]-1659923615278
GPR[ESUN]-1659923615278
GPR[SSUN]-1659923615278
704176156
GPR[SPVATF]-1659923615491
GPR[EPVATF]-1659923615836
GPR[SPS]-1659923615836
[2442642] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst:65.
GPR[EPS]-1659923616324
GPR[SPVATF]-1659923616325
GPR[EPVATF]-1659923616675
GPR[SPS]-1659923616675
[2443503] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst:65.
GPR[EPS]-1659923617185
GPR[ESUN]-1659923617185
GPR[SSUN]-1659923617186
704176156
GPR[SPVATF]-1659923617398
GPR[EPVATF]-1659923617743
GPR[SPS]-1659923617743
[2444537] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst:58.
GPR[EPS]-1659923618219
GPR[SPVATF]-1659923618219
GPR[EPVATF]-1659923618567
GPR[SPS]-1659923618567
[2445363] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst:58.
GPR[EPS]-1659923619045
GPR[ESUN]-1659923619045
GPR[SSUN]-1659923619045
71832666
GPR[SPVATF]-1659923619254
GPR[EPVATF]-1659923619603
GPR[SPS]-1659923619603
[2446402] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JsAst:99.
GPR[EPS]-1659923620084
GPR[ESUN]-1659923620084
GPR[SSUN]-1659923620085
2433571
GPR[ESUN]-1659923620358
GPR[SSUN]-1659923620358
704176156
GPR[ESUN]-1659923620568
GPR[SSUN]-1659923620568
704176156
GPR[SPVATF]-1659923620777
GPR[EPVATF]-1659923621129
GPR[SPS]-1659923621129
[2447923] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:139.
GPR[EPS]-1659923621605
GPR[ESUN]-1659923621605
GPR[SSUN]-1659923621605
704176156
GPR[ESUN]-1659923621817
GPR[SSUN]-1659923621817
704176156
GPR[SPVATF]-1659923622025
GPR[EPVATF]-1659923622371
GPR[SPS]-1659923622371
[2449163] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:131.
GPR[EPS]-1659923622845
GPR[SPVATF]-1659923622845
GPR[EPVATF]-1659923623191
GPR[SPS]-1659923623191
[2450023] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:131.
GPR[EPS]-1659923623705
GPR[ESUN]-1659923623705
GPR[SSUN]-1659923623705
2433571
GPR[SPVATF]-1659923623946
GPR[EPVATF]-1659923624295
GPR[SPS]-1659923624296
[2451195] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int LAST_PROP = 54;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private static abstract class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(479).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("item",item);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("result",result);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("propType",propType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    if (com.google.javascript.rhino.Node.this.last!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.parent!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.next!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.first!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(479).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return item.chain(result);

            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        value = x.toString();
                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            java.lang.String name = getString();
            return name.isEmpty() ? null : name;
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[2451196] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659923624878
GPR[SSUN]-1659923624878
2433571
GPR[ESUN]-1659923625116
GPR[SSUN]-1659923625116
-534884160
GPR[SPVATF]-1659923625454
GPR[EPVATF]-1659923625914
GPR[SPS]-1659923625914
[2453206] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:250.
GPR[EPS]-1659923626888
GPR[ESUN]-1659923626888
GPR[SSUN]-1659923626888
2433571
GPR[SPVATF]-1659923627135
GPR[EPVATF]-1659923627560
GPR[SPS]-1659923627560
[2454447] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int LAST_PROP = 54;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private static abstract class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(481).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("item",item);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("propType",propType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                if (com.google.javascript.rhino.Node.this.last!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.rhino.Node.this.parent!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.rhino.Node.this.next!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.rhino.Node.this.first!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(481).collectionEnds();
            }
            if (runtimeAngelicValue)
                return item.getNext();

        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        value = x.toString();
                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            java.lang.String name = getString();
            return name.isEmpty() ? null : name;
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[2454447] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659923628129
GPR[SSUN]-1659923628129
2433571
GPR[SPVATF]-1659923628410
GPR[EPVATF]-1659923628775
GPR[SPS]-1659923628775
[2455695] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:784.
GPR[EPS]-1659923629377
GPR[ESUN]-1659923629377
GPR[SSUN]-1659923629377
-534884160
GPR[ESUN]-1659923629716
GPR[SSUN]-1659923629716
-534884160
GPR[SPVATF]-1659923630049
GPR[EPVATF]-1659923630417
GPR[SPS]-1659923630417
[2457542] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:2000.
GPR[EPS]-1659923631224
GPR[ESUN]-1659923631225
GPR[SSUN]-1659923631225
-534884160
GPR[SPVATF]-1659923631575
GPR[EPVATF]-1659923631939
GPR[SPS]-1659923631939
[2459003] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Compiler extends com.google.javascript.jscomp.AbstractCompiler {
    static final java.lang.String SINGLETON_MODULE_NAME = "[singleton]";

    static final com.google.javascript.jscomp.DiagnosticType MODULE_DEPENDENCY_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_MODULE_DEPENDENCY_ERROR", "Bad dependency: {0} -> {1}. " + "Modules must be listed in dependency order.");

    static final com.google.javascript.jscomp.DiagnosticType MISSING_ENTRY_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_MISSING_ENTRY_ERROR", "required entry point \"{0}\" never provided");

    private static final java.lang.String CONFIG_RESOURCE = "com.google.javascript.jscomp.parsing.ParserConfig";

    com.google.javascript.jscomp.CompilerOptions options = null;

    private com.google.javascript.jscomp.PassConfig passes = null;

    private java.util.List<com.google.javascript.jscomp.CompilerInput> externs;

    private java.util.List<com.google.javascript.jscomp.JSModule> modules;

    private com.google.javascript.jscomp.JSModuleGraph moduleGraph;

    private java.util.List<com.google.javascript.jscomp.CompilerInput> inputs;

    private com.google.javascript.jscomp.ErrorManager errorManager;

    private com.google.javascript.jscomp.WarningsGuard warningsGuard;

    private final java.util.Map<java.lang.String, com.google.javascript.rhino.Node> injectedLibraries = com.google.common.collect.Maps.newLinkedHashMap();

    com.google.javascript.rhino.Node externsRoot;

    com.google.javascript.rhino.Node jsRoot;

    com.google.javascript.rhino.Node externAndJsRoot;

    private java.util.Map<com.google.javascript.rhino.InputId, com.google.javascript.jscomp.CompilerInput> inputsById;

    private com.google.javascript.jscomp.SourceMap sourceMap;

    private java.lang.String externExports = null;

    private int uniqueNameId = 0;

    private boolean useThreads = true;

    private boolean hasRegExpGlobalReferences = true;

    private com.google.javascript.jscomp.FunctionInformationMap functionInformationMap;

    private final java.lang.StringBuilder debugLog = new java.lang.StringBuilder();

    com.google.javascript.jscomp.CodingConvention defaultCodingConvention = new com.google.javascript.jscomp.ClosureCodingConvention();

    private com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private com.google.javascript.jscomp.parsing.Config parserConfig = null;

    private com.google.javascript.jscomp.type.ReverseAbstractInterpreter abstractInterpreter;

    private com.google.javascript.jscomp.TypeValidator typeValidator;

    public com.google.javascript.jscomp.PerformanceTracker tracker;

    private final com.google.javascript.rhino.ErrorReporter oldErrorReporter = com.google.javascript.jscomp.RhinoErrorReporter.forOldRhino(this);

    private final com.google.javascript.rhino.head.ErrorReporter defaultErrorReporter = com.google.javascript.jscomp.RhinoErrorReporter.forNewRhino(this);

    public static final com.google.javascript.jscomp.DiagnosticType OPTIMIZE_LOOP_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_OPTIMIZE_LOOP_ERROR", "Exceeded max number of optimization iterations: {0}");

    public static final com.google.javascript.jscomp.DiagnosticType MOTION_ITERATIONS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_OPTIMIZE_LOOP_ERROR", "Exceeded max number of code motion iterations: {0}");

    private static final long COMPILER_STACK_SIZE = 1048576L;

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger("com.google.javascript.jscomp");

    private final java.io.PrintStream outStream;

    private com.google.javascript.jscomp.GlobalVarReferenceMap globalRefMap = null;

    private volatile double progress = 0.0;

    public Compiler() {
        this(((java.io.PrintStream) (null)));
    }

    public Compiler(java.io.PrintStream stream) {
        addChangeHandler(recentChange);
        outStream = stream;
    }

    public Compiler(com.google.javascript.jscomp.ErrorManager errorManager) {
        this();
        setErrorManager(errorManager);
    }

    public void setErrorManager(com.google.javascript.jscomp.ErrorManager errorManager) {
        com.google.common.base.Preconditions.checkNotNull(errorManager, "the error manager cannot be null");
        this.errorManager = errorManager;
    }

    private com.google.javascript.jscomp.MessageFormatter createMessageFormatter() {
        boolean colorize = options.shouldColorizeErrorOutput();
        return options.errorFormat.toFormatter(this, colorize);
    }

    public void initOptions(com.google.javascript.jscomp.CompilerOptions options) {
        this.options = options;
        if (errorManager == null) {
            if (outStream == null) {
                setErrorManager(new com.google.javascript.jscomp.LoggerErrorManager(createMessageFormatter(), com.google.javascript.jscomp.Compiler.logger));
            } else {
                com.google.javascript.jscomp.PrintStreamErrorManager printer = new com.google.javascript.jscomp.PrintStreamErrorManager(createMessageFormatter(), outStream);
                printer.setSummaryDetailLevel(options.summaryDetailLevel);
                setErrorManager(printer);
            }
        }
        if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES)) {
            options.checkTypes = true;
        } else if (options.disables(com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES)) {
            options.checkTypes = false;
        } else if (!options.checkTypes) {
            options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroup.forType(com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR), com.google.javascript.jscomp.CheckLevel.OFF);
        }
        if (options.checkGlobalThisLevel.isOn() && (!options.disables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS))) {
            options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);
        }
        if (options.getLanguageIn() == com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT) {
            options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT, com.google.javascript.jscomp.CheckLevel.ERROR);
        }
        java.util.List<com.google.javascript.jscomp.WarningsGuard> guards = com.google.common.collect.Lists.newArrayList();
        guards.add(new com.google.javascript.jscomp.SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));
        guards.add(options.getWarningsGuard());
        com.google.javascript.jscomp.ComposeWarningsGuard composedGuards = new com.google.javascript.jscomp.ComposeWarningsGuard(guards);
        if ((!options.checkSymbols) && (!composedGuards.enables(com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES))) {
            composedGuards.addGuard(new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES, com.google.javascript.jscomp.CheckLevel.OFF));
        }
        this.warningsGuard = composedGuards;
    }

    public void init(com.google.javascript.jscomp.JSSourceFile[] externs, com.google.javascript.jscomp.JSSourceFile[] inputs, com.google.javascript.jscomp.CompilerOptions options) {
        init(com.google.common.collect.Lists.<com.google.javascript.jscomp.JSSourceFile>newArrayList(externs), com.google.common.collect.Lists.<com.google.javascript.jscomp.JSSourceFile>newArrayList(inputs), options);
    }

    public <T1 extends com.google.javascript.jscomp.SourceFile, T2 extends com.google.javascript.jscomp.SourceFile> void init(java.util.List<T1> externs, java.util.List<T2> inputs, com.google.javascript.jscomp.CompilerOptions options) {
        com.google.javascript.jscomp.JSModule module = new com.google.javascript.jscomp.JSModule(com.google.javascript.jscomp.Compiler.SINGLETON_MODULE_NAME);
        for (com.google.javascript.jscomp.SourceFile input : inputs) {
            module.add(input);
        }
        initModules(externs, com.google.common.collect.Lists.newArrayList(module), options);
    }

    public void init(com.google.javascript.jscomp.JSSourceFile[] externs, com.google.javascript.jscomp.JSModule[] modules, com.google.javascript.jscomp.CompilerOptions options) {
        initModules(com.google.common.collect.Lists.<com.google.javascript.jscomp.SourceFile>newArrayList(externs), com.google.common.collect.Lists.<com.google.javascript.jscomp.JSModule>newArrayList(modules), options);
    }

    public <T extends com.google.javascript.jscomp.SourceFile> void initModules(java.util.List<T> externs, java.util.List<com.google.javascript.jscomp.JSModule> modules, com.google.javascript.jscomp.CompilerOptions options) {
        initOptions(options);
        checkFirstModule(modules);
        com.google.javascript.jscomp.Compiler.fillEmptyModules(modules);
        this.externs = makeCompilerInput(externs, true);
        this.modules = modules;
        if (modules.size() > 1) {
            try {
                this.moduleGraph = new com.google.javascript.jscomp.JSModuleGraph(modules);
            } catch (com.google.javascript.jscomp.JSModuleGraph.ModuleDependenceException e) {
                report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.MODULE_DEPENDENCY_ERROR, e.getModule().getName(), e.getDependentModule().getName()));
                return;
            }
        } else {
            this.moduleGraph = null;
        }
        this.inputs = com.google.javascript.jscomp.Compiler.getAllInputsFromModules(modules);
        initBasedOnOptions();
        initInputsByIdMap();
    }

    private void initBasedOnOptions() {
        if (options.sourceMapOutputPath != null) {
            sourceMap = options.sourceMapFormat.getInstance();
            sourceMap.setPrefixMappings(options.sourceMapLocationMappings);
        }
    }

    private <T extends com.google.javascript.jscomp.SourceFile> java.util.List<com.google.javascript.jscomp.CompilerInput> makeCompilerInput(java.util.List<T> files, boolean isExtern) {
        java.util.List<com.google.javascript.jscomp.CompilerInput> inputs = com.google.common.collect.Lists.newArrayList();
        for (T file : files) {
            inputs.add(new com.google.javascript.jscomp.CompilerInput(file, isExtern));
        }
        return inputs;
    }

    private static final com.google.javascript.jscomp.DiagnosticType EMPTY_MODULE_LIST_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_EMPTY_MODULE_LIST_ERROR", "At least one module must be provided");

    private static final com.google.javascript.jscomp.DiagnosticType EMPTY_ROOT_MODULE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_EMPTY_ROOT_MODULE_ERROR", "Root module '{0}' must contain at least one source code input");

    private void checkFirstModule(java.util.List<com.google.javascript.jscomp.JSModule> modules) {
        if (modules.isEmpty()) {
            report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.EMPTY_MODULE_LIST_ERROR));
        } else if (modules.get(0).getInputs().isEmpty() && (modules.size() > 1)) {
            report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.EMPTY_ROOT_MODULE_ERROR, modules.get(0).getName()));
        }
    }

    static java.lang.String createFillFileName(java.lang.String moduleName) {
        return ("[" + moduleName) + "]";
    }

    private static void fillEmptyModules(java.util.List<com.google.javascript.jscomp.JSModule> modules) {
        for (com.google.javascript.jscomp.JSModule module : modules) {
            if (module.getInputs().isEmpty()) {
                module.add(com.google.javascript.jscomp.SourceFile.fromCode(com.google.javascript.jscomp.Compiler.createFillFileName(module.getName()), ""));
            }
        }
    }

    public void rebuildInputsFromModules() {
        inputs = com.google.javascript.jscomp.Compiler.getAllInputsFromModules(modules);
        initInputsByIdMap();
    }

    private static java.util.List<com.google.javascript.jscomp.CompilerInput> getAllInputsFromModules(java.util.List<com.google.javascript.jscomp.JSModule> modules) {
        java.util.List<com.google.javascript.jscomp.CompilerInput> inputs = com.google.common.collect.Lists.newArrayList();
        java.util.Map<java.lang.String, com.google.javascript.jscomp.JSModule> inputMap = com.google.common.collect.Maps.newHashMap();
        for (com.google.javascript.jscomp.JSModule module : modules) {
            for (com.google.javascript.jscomp.CompilerInput input : module.getInputs()) {
                java.lang.String inputName = input.getName();
                inputs.add(input);
                inputMap.put(inputName, module);
            }
        }
        return inputs;
    }

    static final com.google.javascript.jscomp.DiagnosticType DUPLICATE_INPUT = com.google.javascript.jscomp.DiagnosticType.error("JSC_DUPLICATE_INPUT", "Duplicate input: {0}");

    static final com.google.javascript.jscomp.DiagnosticType DUPLICATE_EXTERN_INPUT = com.google.javascript.jscomp.DiagnosticType.error("JSC_DUPLICATE_EXTERN_INPUT", "Duplicate extern input: {0}");

    void initInputsByIdMap() {
        inputsById = new java.util.HashMap<com.google.javascript.rhino.InputId, com.google.javascript.jscomp.CompilerInput>();
        for (com.google.javascript.jscomp.CompilerInput input : externs) {
            com.google.javascript.rhino.InputId id = input.getInputId();
            com.google.javascript.jscomp.CompilerInput previous = putCompilerInput(id, input);
            if (previous != null) {
                report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.DUPLICATE_EXTERN_INPUT, input.getName()));
            }
        }
        for (com.google.javascript.jscomp.CompilerInput input : inputs) {
            com.google.javascript.rhino.InputId id = input.getInputId();
            com.google.javascript.jscomp.CompilerInput previous = putCompilerInput(id, input);
            if (previous != null) {
                report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT, input.getName()));
            }
        }
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.SourceFile extern, com.google.javascript.jscomp.SourceFile input, com.google.javascript.jscomp.CompilerOptions options) {
        return compile(com.google.common.collect.Lists.newArrayList(extern), com.google.common.collect.Lists.newArrayList(input), options);
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.SourceFile extern, com.google.javascript.jscomp.JSSourceFile[] input, com.google.javascript.jscomp.CompilerOptions options) {
        return compile(com.google.common.collect.Lists.newArrayList(extern), com.google.common.collect.Lists.newArrayList(input), options);
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.JSSourceFile extern, com.google.javascript.jscomp.JSModule[] modules, com.google.javascript.jscomp.CompilerOptions options) {
        return compileModules(com.google.common.collect.Lists.newArrayList(extern), com.google.common.collect.Lists.newArrayList(modules), options);
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.JSSourceFile[] externs, com.google.javascript.jscomp.JSSourceFile[] inputs, com.google.javascript.jscomp.CompilerOptions options) {
        return compile(com.google.common.collect.Lists.<com.google.javascript.jscomp.SourceFile>newArrayList(externs), com.google.common.collect.Lists.<com.google.javascript.jscomp.SourceFile>newArrayList(inputs), options);
    }

    public <T1 extends com.google.javascript.jscomp.SourceFile, T2 extends com.google.javascript.jscomp.SourceFile> com.google.javascript.jscomp.Result compile(java.util.List<T1> externs, java.util.List<T2> inputs, com.google.javascript.jscomp.CompilerOptions options) {
        com.google.common.base.Preconditions.checkState(jsRoot == null);
        try {
            init(externs, inputs, options);
            if (hasErrors()) {
                return getResult();
            }
            return compile();
        } finally {
            com.google.javascript.jscomp.Tracer t = newTracer("generateReport");
            errorManager.generateReport();
            stopTracer(t, "generateReport");
        }
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.JSSourceFile[] externs, com.google.javascript.jscomp.JSModule[] modules, com.google.javascript.jscomp.CompilerOptions options) {
        return compileModules(com.google.common.collect.Lists.<com.google.javascript.jscomp.SourceFile>newArrayList(externs), com.google.common.collect.Lists.<com.google.javascript.jscomp.JSModule>newArrayList(modules), options);
    }

    public <T extends com.google.javascript.jscomp.SourceFile> com.google.javascript.jscomp.Result compileModules(java.util.List<T> externs, java.util.List<com.google.javascript.jscomp.JSModule> modules, com.google.javascript.jscomp.CompilerOptions options) {
        com.google.common.base.Preconditions.checkState(jsRoot == null);
        try {
            initModules(externs, modules, options);
            if (hasErrors()) {
                return getResult();
            }
            return compile();
        } finally {
            com.google.javascript.jscomp.Tracer t = newTracer("generateReport");
            errorManager.generateReport();
            stopTracer(t, "generateReport");
        }
    }

    private com.google.javascript.jscomp.Result compile() {
        return runInCompilerThread(new java.util.concurrent.Callable<com.google.javascript.jscomp.Result>() {
            @java.lang.Override
            public com.google.javascript.jscomp.Result call() throws java.lang.Exception {
                compileInternal();
                return getResult();
            }
        });
    }

    public void disableThreads() {
        useThreads = false;
    }

    private <T> T runInCompilerThread(final java.util.concurrent.Callable<T> callable) {
        return com.google.javascript.jscomp.Compiler.runCallable(callable, useThreads, options.tracer.isOn());
    }

    static <T> T runCallableWithLargeStack(final java.util.concurrent.Callable<T> callable) {
        return com.google.javascript.jscomp.Compiler.runCallable(callable, true, false);
    }

    @java.lang.SuppressWarnings("unchecked")
    static <T> T runCallable(final java.util.concurrent.Callable<T> callable, boolean useLargeStackThread, boolean trace) {
        final boolean dumpTraceReport = trace;
        final java.lang.Object[] result = new java.lang.Object[1];
        final java.lang.Throwable[] exception = new java.lang.Throwable[1];
        java.lang.Runnable runnable = new java.lang.Runnable() {
            @java.lang.Override
            public void run() {
                try {
                    if (dumpTraceReport) {
                        com.google.javascript.jscomp.Tracer.initCurrentThreadTrace();
                    }
                    result[0] = callable.call();
                } catch (java.lang.Throwable e) {
                    exception[0] = e;
                } finally {
                    if (dumpTraceReport) {
                        com.google.javascript.jscomp.Tracer.logAndClearCurrentThreadTrace();
                    }
                }
            }
        };
        if (useLargeStackThread) {
            java.lang.Thread th = new java.lang.Thread(null, runnable, "jscompiler", com.google.javascript.jscomp.Compiler.COMPILER_STACK_SIZE);
            th.start();
            while (true) {
                try {
                    th.join();
                    break;
                } catch (java.lang.InterruptedException ignore) {
                }
            } 
        } else {
            runnable.run();
        }
        if (exception[0] != null) {
            throw new java.lang.RuntimeException(exception[0]);
        }
        return ((T) (result[0]));
    }

    private void compileInternal() {
        setProgress(0.0);
        parse();
        setProgress(0.15);
        if (hasErrors()) {
            return;
        }
        if (!precheck()) {
            return;
        }
        if (options.nameAnonymousFunctionsOnly) {
            check();
            return;
        }
        if (!options.skipAllPasses) {
            check();
            if (hasErrors()) {
                return;
            }
            if (options.isExternExportsEnabled() || (options.externExportsPath != null)) {
                externExports();
            }
            if (!options.ideMode) {
                optimize();
            }
        }
        if (options.recordFunctionInformation) {
            recordFunctionInformation();
        }
        if (options.devMode == com.google.javascript.jscomp.CompilerOptions.DevMode.START_AND_END) {
            runSanityCheck();
        }
        setProgress(1.0);
    }

    public void parse() {
        parseInputs();
    }

    com.google.javascript.jscomp.PassConfig getPassConfig() {
        if (passes == null) {
            passes = createPassConfigInternal();
        }
        return passes;
    }

    com.google.javascript.jscomp.PassConfig createPassConfigInternal() {
        return new com.google.javascript.jscomp.DefaultPassConfig(options);
    }

    public void setPassConfig(com.google.javascript.jscomp.PassConfig passes) {
        com.google.common.base.Preconditions.checkNotNull(passes);
        if (this.passes != null) {
            throw new java.lang.IllegalStateException("this.passes has already been assigned");
        }
        this.passes = passes;
    }

    boolean precheck() {
        return true;
    }

    public void check() {
        runCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.BEFORE_CHECKS);
        com.google.javascript.jscomp.PhaseOptimizer phaseOptimizer = new com.google.javascript.jscomp.PhaseOptimizer(this, tracker, new com.google.javascript.jscomp.PhaseOptimizer.ProgressRange(getProgress(), 1.0));
        if (options.devMode == com.google.javascript.jscomp.CompilerOptions.DevMode.EVERY_PASS) {
            phaseOptimizer.setSanityCheck(sanityCheck);
        }
        phaseOptimizer.consume(getPassConfig().getChecks());
        phaseOptimizer.process(externsRoot, jsRoot);
        if (hasErrors()) {
            return;
        }
        if (options.nameAnonymousFunctionsOnly) {
            return;
        }
        if (options.removeTryCatchFinally) {
            removeTryCatchFinally();
        }
        if ((((options.getTweakProcessing().shouldStrip() || (!options.stripTypes.isEmpty())) || (!options.stripNameSuffixes.isEmpty())) || (!options.stripTypePrefixes.isEmpty())) || (!options.stripNamePrefixes.isEmpty())) {
            stripCode(options.stripTypes, options.stripNameSuffixes, options.stripTypePrefixes, options.stripNamePrefixes);
        }
        runCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);
    }

    private void externExports() {
        com.google.javascript.jscomp.Compiler.logger.fine("Creating extern file for exports");
        startPass("externExports");
        com.google.javascript.jscomp.ExternExportsPass pass = new com.google.javascript.jscomp.ExternExportsPass(this);
        process(pass);
        externExports = pass.getGeneratedExterns();
        endPass();
    }

    @java.lang.Override
    void process(com.google.javascript.jscomp.CompilerPass p) {
        p.process(externsRoot, jsRoot);
    }

    private final com.google.javascript.jscomp.PassFactory sanityCheck = new com.google.javascript.jscomp.PassFactory("sanityCheck", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.SanityCheck(compiler);
        }
    };

    private void maybeSanityCheck() {
        if (options.devMode == com.google.javascript.jscomp.CompilerOptions.DevMode.EVERY_PASS) {
            runSanityCheck();
        }
    }

    private void runSanityCheck() {
        sanityCheck.create(this).process(externsRoot, jsRoot);
    }

    void removeTryCatchFinally() {
        com.google.javascript.jscomp.Compiler.logger.fine("Remove try/catch/finally");
        startPass("removeTryCatchFinally");
        com.google.javascript.jscomp.RemoveTryCatch r = new com.google.javascript.jscomp.RemoveTryCatch(this);
        process(r);
        endPass();
    }

    void stripCode(java.util.Set<java.lang.String> stripTypes, java.util.Set<java.lang.String> stripNameSuffixes, java.util.Set<java.lang.String> stripTypePrefixes, java.util.Set<java.lang.String> stripNamePrefixes) {
        com.google.javascript.jscomp.Compiler.logger.fine("Strip code");
        startPass("stripCode");
        com.google.javascript.jscomp.StripCode r = new com.google.javascript.jscomp.StripCode(this, stripTypes, stripNameSuffixes, stripTypePrefixes, stripNamePrefixes);
        if (options.getTweakProcessing().shouldStrip()) {
            r.enableTweakStripping();
        }
        process(r);
        endPass();
    }

    private void runCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime executionTime) {
        if (options.customPasses != null) {
            com.google.javascript.jscomp.Tracer t = newTracer("runCustomPasses");
            try {
                for (com.google.javascript.jscomp.CompilerPass p : options.customPasses.get(executionTime)) {
                    process(p);
                }
            } finally {
                stopTracer(t, "runCustomPasses");
            }
        }
    }

    private com.google.javascript.jscomp.Tracer currentTracer = null;

    private java.lang.String currentPassName = null;

    void startPass(java.lang.String passName) {
        com.google.common.base.Preconditions.checkState(currentTracer == null);
        currentPassName = passName;
        currentTracer = newTracer(passName);
    }

    void endPass() {
        com.google.common.base.Preconditions.checkState(currentTracer != null, "Tracer should not be null at the end of a pass.");
        stopTracer(currentTracer, currentPassName);
        java.lang.String passToCheck = currentPassName;
        currentPassName = null;
        currentTracer = null;
        maybeSanityCheck();
    }

    com.google.javascript.jscomp.Tracer newTracer(java.lang.String passName) {
        java.lang.String comment = passName + (recentChange.hasCodeChanged() ? " on recently changed AST" : "");
        if (options.tracer.isOn()) {
            tracker.recordPassStart(passName);
        }
        return new com.google.javascript.jscomp.Tracer("Compiler", comment);
    }

    void stopTracer(com.google.javascript.jscomp.Tracer t, java.lang.String passName) {
        long result = t.stop();
        if (options.tracer.isOn()) {
            tracker.recordPassStop(passName, result);
        }
    }

    public com.google.javascript.jscomp.Result getResult() {
        com.google.javascript.jscomp.PassConfig.State state = getPassConfig().getIntermediateState();
        return new com.google.javascript.jscomp.Result(getErrors(), getWarnings(), debugLog.toString(), state.variableMap, state.propertyMap, state.anonymousFunctionNameMap, state.stringMap, functionInformationMap, sourceMap, externExports, state.cssNames, state.idGeneratorMap);
    }

    public com.google.javascript.jscomp.JSError[] getMessages() {
        return getErrors();
    }

    public com.google.javascript.jscomp.JSError[] getErrors() {
        return errorManager.getErrors();
    }

    public com.google.javascript.jscomp.JSError[] getWarnings() {
        return errorManager.getWarnings();
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getRoot() {
        return externAndJsRoot;
    }

    private int nextUniqueNameId() {
        return uniqueNameId++;
    }

    @com.google.common.annotations.VisibleForTesting
    void resetUniqueNameId() {
        uniqueNameId = 0;
    }

    @java.lang.Override
    com.google.common.base.Supplier<java.lang.String> getUniqueNameIdSupplier() {
        final com.google.javascript.jscomp.Compiler self = this;
        return new com.google.common.base.Supplier<java.lang.String>() {
            @java.lang.Override
            public java.lang.String get() {
                return java.lang.String.valueOf(self.nextUniqueNameId());
            }
        };
    }

    @java.lang.Override
    boolean areNodesEqualForInlining(com.google.javascript.rhino.Node n1, com.google.javascript.rhino.Node n2) {
        if (options.ambiguateProperties || options.disambiguateProperties) {
            return n1.isEquivalentToTyped(n2);
        } else {
            return n1.isEquivalentTo(n2);
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.CompilerInput getInput(com.google.javascript.rhino.InputId id) {
        return inputsById.get(id);
    }

    protected void removeExternInput(com.google.javascript.rhino.InputId id) {
        com.google.javascript.jscomp.CompilerInput input = getInput(id);
        if (input == null) {
            return;
        }
        com.google.common.base.Preconditions.checkState(input.isExtern(), "Not an extern input: %s", input.getName());
        inputsById.remove(id);
        externs.remove(input);
        com.google.javascript.rhino.Node root = input.getAstRoot(this);
        if (root != null) {
            root.detachFromParent();
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.CompilerInput newExternInput(java.lang.String name) {
        com.google.javascript.jscomp.SourceAst ast = new com.google.javascript.jscomp.SyntheticAst(name);
        if (inputsById.containsKey(ast.getInputId())) {
            throw new java.lang.IllegalArgumentException("Conflicting externs name: " + name);
        }
        com.google.javascript.jscomp.CompilerInput input = new com.google.javascript.jscomp.CompilerInput(ast, true);
        putCompilerInput(input.getInputId(), input);
        externsRoot.addChildToFront(ast.getAstRoot(this));
        externs.add(0, input);
        return input;
    }

    private com.google.javascript.jscomp.CompilerInput putCompilerInput(com.google.javascript.rhino.InputId id, com.google.javascript.jscomp.CompilerInput input) {
        input.setCompiler(this);
        return inputsById.put(id, input);
    }

    void addIncrementalSourceAst(com.google.javascript.jscomp.JsAst ast) {
        com.google.javascript.rhino.InputId id = ast.getInputId();
        com.google.common.base.Preconditions.checkState(getInput(id) == null, "Duplicate input %s", id.getIdName());
        putCompilerInput(id, new com.google.javascript.jscomp.CompilerInput(ast));
    }

    boolean replaceIncrementalSourceAst(com.google.javascript.jscomp.JsAst ast) {
        com.google.javascript.jscomp.CompilerInput oldInput = getInput(ast.getInputId());
        com.google.common.base.Preconditions.checkNotNull(oldInput, "No input to replace: %s", ast.getInputId().getIdName());
        com.google.javascript.rhino.Node newRoot = ast.getAstRoot(this);
        if (newRoot == null) {
            return false;
        }
        com.google.javascript.rhino.Node oldRoot = oldInput.getAstRoot(this);
        if (oldRoot != null) {
            oldRoot.getParent().replaceChild(oldRoot, newRoot);
        } else {
            getRoot().getLastChild().addChildToBack(newRoot);
        }
        com.google.javascript.jscomp.CompilerInput newInput = new com.google.javascript.jscomp.CompilerInput(ast);
        putCompilerInput(ast.getInputId(), newInput);
        com.google.javascript.jscomp.JSModule module = oldInput.getModule();
        if (module != null) {
            module.addAfter(newInput, oldInput);
            module.remove(oldInput);
        }
        com.google.common.base.Preconditions.checkState(newInput.getInputId().equals(oldInput.getInputId()));
        com.google.javascript.rhino.InputId inputIdOnAst = newInput.getAstRoot(this).getInputId();
        com.google.common.base.Preconditions.checkState(newInput.getInputId().equals(inputIdOnAst));
        inputs.remove(oldInput);
        return true;
    }

    boolean addNewSourceAst(com.google.javascript.jscomp.JsAst ast) {
        com.google.javascript.jscomp.CompilerInput oldInput = getInput(ast.getInputId());
        if (oldInput != null) {
            throw new java.lang.IllegalStateException("Input already exists: " + ast.getInputId().getIdName());
        }
        com.google.javascript.rhino.Node newRoot = ast.getAstRoot(this);
        if (newRoot == null) {
            return false;
        }
        getRoot().getLastChild().addChildToBack(newRoot);
        com.google.javascript.jscomp.CompilerInput newInput = new com.google.javascript.jscomp.CompilerInput(ast);
        if ((moduleGraph == null) && (!modules.isEmpty())) {
            modules.get(0).add(newInput);
        }
        putCompilerInput(ast.getInputId(), newInput);
        return true;
    }

    @java.lang.Override
    com.google.javascript.jscomp.JSModuleGraph getModuleGraph() {
        return moduleGraph;
    }

    com.google.javascript.jscomp.JSModuleGraph getDegenerateModuleGraph() {
        return moduleGraph == null ? new com.google.javascript.jscomp.JSModuleGraph(modules) : moduleGraph;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSTypeRegistry getTypeRegistry() {
        if (typeRegistry == null) {
            typeRegistry = new com.google.javascript.rhino.jstype.JSTypeRegistry(oldErrorReporter, options.looseTypes);
        }
        return typeRegistry;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.MemoizedScopeCreator getTypedScopeCreator() {
        return getPassConfig().getTypedScopeCreator();
    }

    @java.lang.SuppressWarnings("unchecked")
    com.google.javascript.jscomp.DefaultPassConfig ensureDefaultPassConfig() {
        com.google.javascript.jscomp.PassConfig passes = getPassConfig().getBasePassConfig();
        com.google.common.base.Preconditions.checkState(passes instanceof com.google.javascript.jscomp.DefaultPassConfig, "PassConfigs must eventually delegate to the DefaultPassConfig");
        return ((com.google.javascript.jscomp.DefaultPassConfig) (passes));
    }

    public com.google.javascript.jscomp.SymbolTable buildKnownSymbolTable() {
        com.google.javascript.jscomp.SymbolTable symbolTable = new com.google.javascript.jscomp.SymbolTable(getTypeRegistry());
        com.google.javascript.jscomp.MemoizedScopeCreator typedScopeCreator = getTypedScopeCreator();
        if (typedScopeCreator != null) {
            symbolTable.addScopes(typedScopeCreator.getAllMemoizedScopes());
            symbolTable.addSymbolsFrom(typedScopeCreator);
        } else {
            symbolTable.findScopes(this, externsRoot, jsRoot);
        }
        com.google.javascript.jscomp.GlobalNamespace globalNamespace = ensureDefaultPassConfig().getGlobalNamespace();
        if (globalNamespace != null) {
            symbolTable.addSymbolsFrom(globalNamespace);
        }
        com.google.javascript.jscomp.ReferenceCollectingCallback refCollector = new com.google.javascript.jscomp.ReferenceCollectingCallback(this, com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR);
        com.google.javascript.jscomp.NodeTraversal.traverse(this, getRoot(), refCollector);
        symbolTable.addSymbolsFrom(refCollector);
        com.google.javascript.jscomp.PreprocessorSymbolTable preprocessorSymbolTable = ensureDefaultPassConfig().getPreprocessorSymbolTable();
        if (preprocessorSymbolTable != null) {
            symbolTable.addSymbolsFrom(preprocessorSymbolTable);
        }
        symbolTable.fillNamespaceReferences();
        symbolTable.fillPropertyScopes();
        symbolTable.fillThisReferences(this, externsRoot, jsRoot);
        symbolTable.fillPropertySymbols(this, externsRoot, jsRoot);
        symbolTable.fillJSDocInfo(this, externsRoot, jsRoot);
        return symbolTable;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Scope getTopScope() {
        return getPassConfig().getTopScope();
    }

    @java.lang.Override
    public com.google.javascript.jscomp.type.ReverseAbstractInterpreter getReverseAbstractInterpreter() {
        if (abstractInterpreter == null) {
            com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter interpreter = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter(getCodingConvention(), getTypeRegistry());
            if (options.closurePass) {
                interpreter = new com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter(getCodingConvention(), getTypeRegistry()).append(interpreter).getFirst();
            }
            abstractInterpreter = interpreter;
        }
        return abstractInterpreter;
    }

    @java.lang.Override
    com.google.javascript.jscomp.TypeValidator getTypeValidator() {
        if (typeValidator == null) {
            typeValidator = new com.google.javascript.jscomp.TypeValidator(this);
        }
        return typeValidator;
    }

    com.google.javascript.rhino.Node parseInputs() {
        boolean devMode = options.devMode != com.google.javascript.jscomp.CompilerOptions.DevMode.OFF;
        if (externsRoot != null) {
            externsRoot.detachChildren();
        }
        if (jsRoot != null) {
            jsRoot.detachChildren();
        }
        jsRoot = com.google.javascript.rhino.IR.block();
        jsRoot.setIsSyntheticBlock(true);
        externsRoot = com.google.javascript.rhino.IR.block();
        externsRoot.setIsSyntheticBlock(true);
        externAndJsRoot = com.google.javascript.rhino.IR.block(externsRoot, jsRoot);
        externAndJsRoot.setIsSyntheticBlock(true);
        if (options.tracer.isOn()) {
            tracker = new com.google.javascript.jscomp.PerformanceTracker(jsRoot, options.tracer);
            addChangeHandler(tracker.getCodeChangeHandler());
        }
        com.google.javascript.jscomp.Tracer tracer = newTracer("parseInputs");
        try {
            for (com.google.javascript.jscomp.CompilerInput input : externs) {
                com.google.javascript.rhino.Node n = input.getAstRoot(this);
                if (hasErrors()) {
                    return null;
                }
                externsRoot.addChildToBack(n);
            }
            if (options.transformAMDToCJSModules || options.processCommonJSModules) {
                processAMDAndCommonJSModules();
            }
            hoistExterns(externsRoot);
            boolean staleInputs = false;
            if (options.dependencyOptions.needsManagement()) {
                for (com.google.javascript.jscomp.CompilerInput input : inputs) {
                    for (java.lang.String provide : input.getProvides()) {
                        getTypeRegistry().forwardDeclareType(provide);
                    }
                }
                try {
                    inputs = (moduleGraph == null ? new com.google.javascript.jscomp.JSModuleGraph(modules) : moduleGraph).manageDependencies(options.dependencyOptions, inputs);
                    staleInputs = true;
                } catch (com.google.javascript.jscomp.deps.SortedDependencies.CircularDependencyException e) {
                    report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
                    if (hasErrors()) {
                        return null;
                    }
                } catch (com.google.javascript.jscomp.deps.SortedDependencies.MissingProvideException e) {
                    report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR, e.getMessage()));
                    if (hasErrors()) {
                        return null;
                    }
                }
            }
            hoistNoCompileFiles();
            if (staleInputs) {
                repartitionInputs();
            }
            for (com.google.javascript.jscomp.CompilerInput input : inputs) {
                com.google.javascript.rhino.Node n = input.getAstRoot(this);
                if (n == null) {
                    continue;
                }
                if (devMode) {
                    runSanityCheck();
                    if (hasErrors()) {
                        return null;
                    }
                }
                if ((options.sourceMapOutputPath != null) || (options.nameReferenceReportPath != null)) {
                    com.google.javascript.jscomp.SourceInformationAnnotator sia = new com.google.javascript.jscomp.SourceInformationAnnotator(input.getName(), options.devMode != com.google.javascript.jscomp.CompilerOptions.DevMode.OFF);
                    com.google.javascript.jscomp.NodeTraversal.traverse(this, n, sia);
                }
                jsRoot.addChildToBack(n);
            }
            if (hasErrors()) {
                return null;
            }
            return externAndJsRoot;
        } finally {
            stopTracer(tracer, "parseInputs");
        }
    }

    private void hoistExterns(com.google.javascript.rhino.Node externsRoot) {
        boolean staleInputs = false;
        for (com.google.javascript.jscomp.CompilerInput input : inputs) {
            if (options.dependencyOptions.needsManagement() && options.closurePass) {
                if ((!input.getProvides().isEmpty()) || (!input.getRequires().isEmpty())) {
                    continue;
                }
            }
            com.google.javascript.rhino.Node n = input.getAstRoot(this);
            if (n == null) {
                continue;
            }
            com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
            if ((info != null) && info.isExterns()) {
                externsRoot.addChildToBack(n);
                input.setIsExtern(true);
                input.getModule().remove(input);
                externs.add(input);
                staleInputs = true;
            }
        }
        if (staleInputs) {
            repartitionInputs();
        }
    }

    private void hoistNoCompileFiles() {
        boolean staleInputs = false;
        for (com.google.javascript.jscomp.CompilerInput input : inputs) {
            com.google.javascript.rhino.Node n = input.getAstRoot(this);
            if (n == null) {
                continue;
            }
            com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
            if ((info != null) && info.isNoCompile()) {
                input.getModule().remove(input);
                staleInputs = true;
            }
        }
        if (staleInputs) {
            repartitionInputs();
        }
    }

    private void repartitionInputs() {
        com.google.javascript.jscomp.Compiler.fillEmptyModules(modules);
        rebuildInputsFromModules();
    }

    void processAMDAndCommonJSModules() {
        java.util.Map<java.lang.String, com.google.javascript.jscomp.JSModule> modulesByName = com.google.common.collect.Maps.newLinkedHashMap();
        java.util.Map<com.google.javascript.jscomp.CompilerInput, com.google.javascript.jscomp.JSModule> modulesByInput = com.google.common.collect.Maps.newLinkedHashMap();
        for (com.google.javascript.jscomp.CompilerInput input : inputs) {
            input.setCompiler(this);
            com.google.javascript.rhino.Node root = input.getAstRoot(this);
            if (root == null) {
                continue;
            }
            if (options.transformAMDToCJSModules) {
                new com.google.javascript.jscomp.TransformAMDToCJSModule(this).process(null, root);
            }
            if (options.processCommonJSModules) {
                com.google.javascript.jscomp.ProcessCommonJSModules cjs = new com.google.javascript.jscomp.ProcessCommonJSModules(this, options.commonJSModulePathPrefix);
                cjs.process(null, root);
                com.google.javascript.jscomp.JSModule m = cjs.getModule();
                if (m != null) {
                    modulesByName.put(m.getName(), m);
                    modulesByInput.put(input, m);
                }
            }
        }
        if (options.processCommonJSModules) {
            java.util.List<com.google.javascript.jscomp.JSModule> modules = com.google.common.collect.Lists.newArrayList(modulesByName.values());
            if (!modules.isEmpty()) {
                this.modules = modules;
                this.moduleGraph = new com.google.javascript.jscomp.JSModuleGraph(this.modules);
            }
            for (com.google.javascript.jscomp.JSModule module : modules) {
                for (com.google.javascript.jscomp.CompilerInput input : module.getInputs()) {
                    for (java.lang.String require : input.getRequires()) {
                        com.google.javascript.jscomp.JSModule dependency = modulesByName.get(require);
                        if (dependency == null) {
                            report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR, require));
                        } else {
                            module.addDependency(dependency);
                        }
                    }
                }
            }
            try {
                modules = com.google.common.collect.Lists.newArrayList();
                for (com.google.javascript.jscomp.CompilerInput input : this.moduleGraph.manageDependencies(options.dependencyOptions, inputs)) {
                    modules.add(modulesByInput.get(input));
                }
                this.modules = modules;
                this.moduleGraph = new com.google.javascript.jscomp.JSModuleGraph(modules);
            } catch (java.lang.Exception e) {
                com.google.common.base.Throwables.propagate(e);
            }
        }
    }

    public com.google.javascript.rhino.Node parse(com.google.javascript.jscomp.SourceFile file) {
        initCompilerOptionsIfTesting();
        addToDebugLog("Parsing: " + file.getName());
        return new com.google.javascript.jscomp.JsAst(file).getAstRoot(this);
    }

    private int syntheticCodeId = 0;

    @java.lang.Override
    com.google.javascript.rhino.Node parseSyntheticCode(java.lang.String js) {
        com.google.javascript.jscomp.CompilerInput input = new com.google.javascript.jscomp.CompilerInput(com.google.javascript.jscomp.SourceFile.fromCode((" [synthetic:" + (++syntheticCodeId)) + "] ", js));
        putCompilerInput(input.getInputId(), input);
        return input.getAstRoot(this);
    }

    protected com.google.javascript.jscomp.CompilerOptions newCompilerOptions() {
        return new com.google.javascript.jscomp.CompilerOptions();
    }

    void initCompilerOptionsIfTesting() {
        if (options == null) {
            initOptions(newCompilerOptions());
        }
    }

    @java.lang.Override
    com.google.javascript.rhino.Node parseSyntheticCode(java.lang.String fileName, java.lang.String js) {
        initCompilerOptionsIfTesting();
        return parse(com.google.javascript.jscomp.SourceFile.fromCode(fileName, js));
    }

    @java.lang.Override
    com.google.javascript.rhino.Node parseTestCode(java.lang.String js) {
        initCompilerOptionsIfTesting();
        com.google.javascript.jscomp.CompilerInput input = new com.google.javascript.jscomp.CompilerInput(com.google.javascript.jscomp.SourceFile.fromCode("[testcode]", js));
        if (inputsById == null) {
            inputsById = com.google.common.collect.Maps.newHashMap();
        }
        putCompilerInput(input.getInputId(), input);
        return input.getAstRoot(this);
    }

    @java.lang.Override
    com.google.javascript.rhino.head.ErrorReporter getDefaultErrorReporter() {
        return defaultErrorReporter;
    }

    public java.lang.String toSource() {
        return runInCompilerThread(new java.util.concurrent.Callable<java.lang.String>() {
            @java.lang.Override
            public java.lang.String call() throws java.lang.Exception {
                com.google.javascript.jscomp.Tracer tracer = newTracer("toSource");
                try {
                    com.google.javascript.jscomp.Compiler.CodeBuilder cb = new com.google.javascript.jscomp.Compiler.CodeBuilder();
                    if (jsRoot != null) {
                        int i = 0;
                        for (com.google.javascript.rhino.Node scriptNode = jsRoot.getFirstChild(); scriptNode != null; scriptNode = scriptNode.getNext()) {
                            toSource(cb, i++, scriptNode);
                        }
                    }
                    return cb.toString();
                } finally {
                    stopTracer(tracer, "toSource");
                }
            }
        });
    }

    public java.lang.String[] toSourceArray() {
        return runInCompilerThread(new java.util.concurrent.Callable<java.lang.String[]>() {
            @java.lang.Override
            public java.lang.String[] call() throws java.lang.Exception {
                com.google.javascript.jscomp.Tracer tracer = newTracer("toSourceArray");
                try {
                    int numInputs = inputs.size();
                    java.lang.String[] sources = new java.lang.String[numInputs];
                    com.google.javascript.jscomp.Compiler.CodeBuilder cb = new com.google.javascript.jscomp.Compiler.CodeBuilder();
                    for (int i = 0; i < numInputs; i++) {
                        com.google.javascript.rhino.Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
                        cb.reset();
                        toSource(cb, i, scriptNode);
                        sources[i] = cb.toString();
                    }
                    return sources;
                } finally {
                    stopTracer(tracer, "toSourceArray");
                }
            }
        });
    }

    public java.lang.String toSource(final com.google.javascript.jscomp.JSModule module) {
        return runInCompilerThread(new java.util.concurrent.Callable<java.lang.String>() {
            @java.lang.Override
            public java.lang.String call() throws java.lang.Exception {
                java.util.List<com.google.javascript.jscomp.CompilerInput> inputs = module.getInputs();
                int numInputs = inputs.size();
                if (numInputs == 0) {
                    return "";
                }
                com.google.javascript.jscomp.Compiler.CodeBuilder cb = new com.google.javascript.jscomp.Compiler.CodeBuilder();
                for (int i = 0; i < numInputs; i++) {
                    com.google.javascript.rhino.Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
                    if (scriptNode == null) {
                        throw new java.lang.IllegalArgumentException("Bad module: " + module.getName());
                    }
                    toSource(cb, i, scriptNode);
                }
                return cb.toString();
            }
        });
    }

    public java.lang.String[] toSourceArray(final com.google.javascript.jscomp.JSModule module) {
        return runInCompilerThread(new java.util.concurrent.Callable<java.lang.String[]>() {
            @java.lang.Override
            public java.lang.String[] call() throws java.lang.Exception {
                java.util.List<com.google.javascript.jscomp.CompilerInput> inputs = module.getInputs();
                int numInputs = inputs.size();
                if (numInputs == 0) {
                    return new java.lang.String[0];
                }
                java.lang.String[] sources = new java.lang.String[numInputs];
                com.google.javascript.jscomp.Compiler.CodeBuilder cb = new com.google.javascript.jscomp.Compiler.CodeBuilder();
                for (int i = 0; i < numInputs; i++) {
                    com.google.javascript.rhino.Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
                    if (scriptNode == null) {
                        throw new java.lang.IllegalArgumentException("Bad module input: " + inputs.get(i).getName());
                    }
                    cb.reset();
                    toSource(cb, i, scriptNode);
                    sources[i] = cb.toString();
                }
                return sources;
            }
        });
    }

    public void toSource(final com.google.javascript.jscomp.Compiler.CodeBuilder cb, final int inputSeqNum, final com.google.javascript.rhino.Node root) {
        runInCompilerThread(new java.util.concurrent.Callable<java.lang.Void>() {
            @java.lang.Override
            public java.lang.Void call() throws java.lang.Exception {
                if (options.printInputDelimiter) {
                    if ((cb.getLength() > 0) && (!cb.endsWith("\n"))) {
                        cb.append("\n");
                    }
                    com.google.common.base.Preconditions.checkState(root.isScript());
                    java.lang.String delimiter = options.inputDelimiter;
                    java.lang.String inputName = root.getInputId().getIdName();
                    java.lang.String sourceName = root.getSourceFileName();
                    com.google.common.base.Preconditions.checkState(sourceName != null);
                    com.google.common.base.Preconditions.checkState(!sourceName.isEmpty());
                    delimiter = delimiter.replaceAll("%name%", java.util.regex.Matcher.quoteReplacement(inputName)).replaceAll("%num%", java.lang.String.valueOf(inputSeqNum));
                    cb.append(delimiter).append("\n");
                }
                if ((root.getJSDocInfo() != null) && (root.getJSDocInfo().getLicense() != null)) {
                    cb.append("/*\n").append(root.getJSDocInfo().getLicense()).append("*/\n");
                }
                if (options.sourceMapOutputPath != null) {
                    sourceMap.setStartingPosition(cb.getLineIndex(), cb.getColumnIndex());
                }
                java.lang.String code = toSource(root, sourceMap, inputSeqNum == 0);
                if (!code.isEmpty()) {
                    cb.append(code);
                    int length = code.length();
                    char lastChar = code.charAt(length - 1);
                    char secondLastChar = (length >= 2) ? code.charAt(length - 2) : '\u0000';
                    boolean hasSemiColon = (lastChar == ';') || ((lastChar == '\n') && (secondLastChar == ';'));
                    if (!hasSemiColon) {
                        cb.append(";");
                    }
                }
                return null;
            }
        });
    }

    @java.lang.Override
    java.lang.String toSource(com.google.javascript.rhino.Node n) {
        initCompilerOptionsIfTesting();
        return toSource(n, null, true);
    }

    private java.lang.String toSource(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.SourceMap sourceMap, boolean firstOutput) {
        com.google.javascript.jscomp.CodePrinter.Builder builder = new com.google.javascript.jscomp.CodePrinter.Builder(n);
        builder.setPrettyPrint(options.prettyPrint);
        builder.setLineBreak(options.lineBreak);
        builder.setPreferLineBreakAtEndOfFile(options.preferLineBreakAtEndOfFile);
        builder.setSourceMap(sourceMap);
        builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);
        builder.setTagAsStrict(firstOutput && (options.getLanguageOut() == com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
        builder.setLineLengthThreshold(options.lineLengthThreshold);
        java.nio.charset.Charset charset = (options.outputCharset != null) ? java.nio.charset.Charset.forName(options.outputCharset) : null;
        builder.setOutputCharset(charset);
        return builder.build();
    }

    public static class CodeBuilder {
        private final java.lang.StringBuilder sb = new java.lang.StringBuilder();

        private int lineCount = 0;

        private int colCount = 0;

        void reset() {
            sb.setLength(0);
        }

        com.google.javascript.jscomp.Compiler.CodeBuilder append(java.lang.String str) {
            sb.append(str);
            int index = -1;
            int lastIndex = index;
            while ((index = str.indexOf('\n', index + 1)) >= 0) {
                ++lineCount;
                lastIndex = index;
            } 
            if (lastIndex == (-1)) {
                colCount += str.length();
            } else {
                colCount = str.length() - (lastIndex + 1);
            }
            return this;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return sb.toString();
        }

        public int getLength() {
            return sb.length();
        }

        int getLineIndex() {
            return lineCount;
        }

        int getColumnIndex() {
            return colCount;
        }

        boolean endsWith(java.lang.String suffix) {
            return (sb.length() > suffix.length()) && suffix.equals(sb.substring(sb.length() - suffix.length()));
        }
    }

    public void optimize() {
        normalize();
        com.google.javascript.jscomp.PhaseOptimizer phaseOptimizer = new com.google.javascript.jscomp.PhaseOptimizer(this, tracker, null);
        if (options.devMode == com.google.javascript.jscomp.CompilerOptions.DevMode.EVERY_PASS) {
            phaseOptimizer.setSanityCheck(sanityCheck);
        }
        phaseOptimizer.consume(getPassConfig().getOptimizations());
        phaseOptimizer.process(externsRoot, jsRoot);
        if (hasErrors()) {
            return;
        }
    }

    @java.lang.Override
    void setCssRenamingMap(com.google.javascript.jscomp.CssRenamingMap map) {
        options.cssRenamingMap = map;
    }

    @java.lang.Override
    com.google.javascript.jscomp.CssRenamingMap getCssRenamingMap() {
        return options.cssRenamingMap;
    }

    public void processDefines() {
        new com.google.javascript.jscomp.DefaultPassConfig(options).processDefines.create(this).process(externsRoot, jsRoot);
    }

    boolean isInliningForbidden() {
        return (options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) || (options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC);
    }

    com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> computeCFG() {
        com.google.javascript.jscomp.Compiler.logger.fine("Computing Control Flow Graph");
        com.google.javascript.jscomp.Tracer tracer = newTracer("computeCFG");
        com.google.javascript.jscomp.ControlFlowAnalysis cfa = new com.google.javascript.jscomp.ControlFlowAnalysis(this, true, false);
        process(cfa);
        stopTracer(tracer, "computeCFG");
        return cfa.getCfg();
    }

    public void normalize() {
        com.google.javascript.jscomp.Compiler.logger.fine("Normalizing");
        startPass("normalize");
        process(new com.google.javascript.jscomp.Normalize(this, false));
        endPass();
    }

    @java.lang.Override
    void prepareAst(com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.CompilerPass pass = new com.google.javascript.jscomp.PrepareAst(this);
        pass.process(null, root);
    }

    void recordFunctionInformation() {
        com.google.javascript.jscomp.Compiler.logger.fine("Recording function information");
        startPass("recordFunctionInformation");
        com.google.javascript.jscomp.RecordFunctionInformation recordFunctionInfoPass = new com.google.javascript.jscomp.RecordFunctionInformation(this, getPassConfig().getIntermediateState().functionNames);
        process(recordFunctionInfoPass);
        functionInformationMap = recordFunctionInfoPass.getMap();
        endPass();
    }

    protected final com.google.javascript.jscomp.CodeChangeHandler.RecentChange recentChange = new com.google.javascript.jscomp.CodeChangeHandler.RecentChange();

    private final java.util.List<com.google.javascript.jscomp.CodeChangeHandler> codeChangeHandlers = com.google.common.collect.Lists.<com.google.javascript.jscomp.CodeChangeHandler>newArrayList();

    static final java.lang.String SYNTHETIC_EXTERNS = "{SyntheticVarsDeclar}";

    private com.google.javascript.jscomp.CompilerInput synthesizedExternsInput = null;

    @java.lang.Override
    void addChangeHandler(com.google.javascript.jscomp.CodeChangeHandler handler) {
        codeChangeHandlers.add(handler);
    }

    @java.lang.Override
    void removeChangeHandler(com.google.javascript.jscomp.CodeChangeHandler handler) {
        codeChangeHandlers.remove(handler);
    }

    @java.lang.Override
    public void reportCodeChange() {
        for (com.google.javascript.jscomp.CodeChangeHandler handler : codeChangeHandlers) {
            handler.reportChange();
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.CodingConvention getCodingConvention() {
        com.google.javascript.jscomp.CodingConvention convention = options.getCodingConvention();
        convention = (convention != null) ? convention : defaultCodingConvention;
        return convention;
    }

    @java.lang.Override
    public boolean isIdeMode() {
        return options.ideMode;
    }

    @java.lang.Override
    public boolean acceptEcmaScript5() {
        switch (options.getLanguageIn()) {
            case ECMASCRIPT5 :
            case ECMASCRIPT5_STRICT :
                return true;
        }
        return false;
    }

    public com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode() {
        return options.getLanguageIn();
    }

    @java.lang.Override
    public boolean acceptConstKeyword() {
        return options.acceptConstKeyword;
    }

    @java.lang.Override
    com.google.javascript.jscomp.parsing.Config getParserConfig() {
        if (parserConfig == null) {
            com.google.javascript.jscomp.parsing.Config.LanguageMode mode;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(484).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.MODULE_DEPENDENCY_ERROR",com.google.javascript.jscomp.Compiler.MODULE_DEPENDENCY_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.OPTIMIZE_LOOP_ERROR",com.google.javascript.jscomp.Compiler.OPTIMIZE_LOOP_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.EMPTY_ROOT_MODULE_ERROR",com.google.javascript.jscomp.Compiler.EMPTY_ROOT_MODULE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.oldErrorReporter",com.google.javascript.jscomp.Compiler.this.oldErrorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.DUPLICATE_EXTERN_INPUT",com.google.javascript.jscomp.Compiler.DUPLICATE_EXTERN_INPUT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.abstractInterpreter",com.google.javascript.jscomp.Compiler.this.abstractInterpreter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.errorManager",com.google.javascript.jscomp.Compiler.this.errorManager);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.uniqueNameId",com.google.javascript.jscomp.Compiler.this.uniqueNameId);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.sourceMap",com.google.javascript.jscomp.Compiler.this.sourceMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.tracker",com.google.javascript.jscomp.Compiler.this.tracker);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.recentChange",com.google.javascript.jscomp.Compiler.this.recentChange);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.progress",com.google.javascript.jscomp.Compiler.this.progress);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.sanityCheck",com.google.javascript.jscomp.Compiler.this.sanityCheck);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.defaultCodingConvention",com.google.javascript.jscomp.Compiler.this.defaultCodingConvention);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.SINGLETON_MODULE_NAME",com.google.javascript.jscomp.Compiler.SINGLETON_MODULE_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.codeChangeHandlers",com.google.javascript.jscomp.Compiler.this.codeChangeHandlers);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.syntheticCodeId",com.google.javascript.jscomp.Compiler.this.syntheticCodeId);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.injectedLibraries",com.google.javascript.jscomp.Compiler.this.injectedLibraries);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.moduleGraph",com.google.javascript.jscomp.Compiler.this.moduleGraph);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS",com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.parserConfig",com.google.javascript.jscomp.Compiler.this.parserConfig);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.synthesizedExternsInput",com.google.javascript.jscomp.Compiler.this.synthesizedExternsInput);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.hasRegExpGlobalReferences",com.google.javascript.jscomp.Compiler.this.hasRegExpGlobalReferences);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.externs",com.google.javascript.jscomp.Compiler.this.externs);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.COMPILER_STACK_SIZE",com.google.javascript.jscomp.Compiler.COMPILER_STACK_SIZE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.passes",com.google.javascript.jscomp.Compiler.this.passes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.typeRegistry",com.google.javascript.jscomp.Compiler.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.logger",com.google.javascript.jscomp.Compiler.logger);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.jsRoot",com.google.javascript.jscomp.Compiler.this.jsRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.currentPassName",com.google.javascript.jscomp.Compiler.this.currentPassName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.CONFIG_RESOURCE",com.google.javascript.jscomp.Compiler.CONFIG_RESOURCE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.externAndJsRoot",com.google.javascript.jscomp.Compiler.this.externAndJsRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.functionInformationMap",com.google.javascript.jscomp.Compiler.this.functionInformationMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR",com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.externExports",com.google.javascript.jscomp.Compiler.this.externExports);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.typeValidator",com.google.javascript.jscomp.Compiler.this.typeValidator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.outStream",com.google.javascript.jscomp.Compiler.this.outStream);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.debugLog",com.google.javascript.jscomp.Compiler.this.debugLog);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.defaultErrorReporter",com.google.javascript.jscomp.Compiler.this.defaultErrorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.EMPTY_MODULE_LIST_ERROR",com.google.javascript.jscomp.Compiler.EMPTY_MODULE_LIST_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.globalRefMap",com.google.javascript.jscomp.Compiler.this.globalRefMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT",com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.useThreads",com.google.javascript.jscomp.Compiler.this.useThreads);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.inputsById",com.google.javascript.jscomp.Compiler.this.inputsById);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR",com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.options",com.google.javascript.jscomp.Compiler.this.options);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.modules",com.google.javascript.jscomp.Compiler.this.modules);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.warningsGuard",com.google.javascript.jscomp.Compiler.this.warningsGuard);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.inputs",com.google.javascript.jscomp.Compiler.this.inputs);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.externsRoot",com.google.javascript.jscomp.Compiler.this.externsRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectInput("com.google.javascript.jscomp.Compiler.this.currentTracer",com.google.javascript.jscomp.Compiler.this.currentTracer);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(484).collectionEnds();
            }
            if (runtimeAngelicValue)
                switch (options.getLanguageIn()) {
                    case ECMASCRIPT3 :
                        mode = com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT3;
                        break;
                    case ECMASCRIPT5 :
                        mode = com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT5;
                        break;
                    case ECMASCRIPT5_STRICT :
                        mode = com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT5_STRICT;
                        break;
                    default :
                        throw new java.lang.IllegalStateException("unexpected language mode");
                }

            parserConfig = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(isIdeMode(), mode, acceptConstKeyword(), options.extraAnnotationNames);
        }
        return parserConfig;
    }

    @java.lang.Override
    public boolean isTypeCheckingEnabled() {
        return options.checkTypes;
    }

    protected com.google.javascript.jscomp.DiagnosticGroups getDiagnosticGroups() {
        return new com.google.javascript.jscomp.DiagnosticGroups();
    }

    @java.lang.Override
    public void report(com.google.javascript.jscomp.JSError error) {
        com.google.javascript.jscomp.CheckLevel level = error.getDefaultLevel();
        if (warningsGuard != null) {
            com.google.javascript.jscomp.CheckLevel newLevel = warningsGuard.level(error);
            if (newLevel != null) {
                level = newLevel;
            }
        }
        if (level.isOn()) {
            if (getOptions().errorHandler != null) {
                getOptions().errorHandler.report(level, error);
            }
            errorManager.report(level, error);
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.CheckLevel getErrorLevel(com.google.javascript.jscomp.JSError error) {
        com.google.common.base.Preconditions.checkNotNull(options);
        return warningsGuard.level(error);
    }

    @java.lang.Override
    void throwInternalError(java.lang.String message, java.lang.Exception cause) {
        java.lang.String finalMessage = ("INTERNAL COMPILER ERROR.\n" + "Please report this problem.\n") + message;
        java.lang.RuntimeException e = new java.lang.RuntimeException(finalMessage, cause);
        if (cause != null) {
            e.setStackTrace(cause.getStackTrace());
        }
        throw e;
    }

    public int getErrorCount() {
        return errorManager.getErrorCount();
    }

    public int getWarningCount() {
        return errorManager.getWarningCount();
    }

    @java.lang.Override
    boolean hasHaltingErrors() {
        return (!isIdeMode()) && (getErrorCount() > 0);
    }

    public boolean hasErrors() {
        return hasHaltingErrors();
    }

    @java.lang.Override
    void addToDebugLog(java.lang.String str) {
        debugLog.append(str);
        debugLog.append('\n');
        com.google.javascript.jscomp.Compiler.logger.fine(str);
    }

    @java.lang.Override
    com.google.javascript.jscomp.SourceFile getSourceFileByName(java.lang.String sourceName) {
        if (sourceName != null) {
            com.google.javascript.jscomp.CompilerInput input = inputsById.get(new com.google.javascript.rhino.InputId(sourceName));
            if (input != null) {
                return input.getSourceFile();
            }
        }
        return null;
    }

    @java.lang.Override
    public java.lang.String getSourceLine(java.lang.String sourceName, int lineNumber) {
        if (lineNumber < 1) {
            return null;
        }
        com.google.javascript.jscomp.SourceFile input = getSourceFileByName(sourceName);
        if (input != null) {
            return input.getLine(lineNumber);
        }
        return null;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Region getSourceRegion(java.lang.String sourceName, int lineNumber) {
        if (lineNumber < 1) {
            return null;
        }
        com.google.javascript.jscomp.SourceFile input = getSourceFileByName(sourceName);
        if (input != null) {
            return input.getRegion(lineNumber);
        }
        return null;
    }

    @java.lang.Override
    com.google.javascript.rhino.Node getNodeForCodeInsertion(com.google.javascript.jscomp.JSModule module) {
        if (module == null) {
            if (inputs.isEmpty()) {
                throw new java.lang.IllegalStateException("No inputs");
            }
            return inputs.get(0).getAstRoot(this);
        }
        java.util.List<com.google.javascript.jscomp.CompilerInput> moduleInputs = module.getInputs();
        if (moduleInputs.size() > 0) {
            return moduleInputs.get(0).getAstRoot(this);
        }
        throw new java.lang.IllegalStateException("Root module has no inputs");
    }

    public com.google.javascript.jscomp.SourceMap getSourceMap() {
        return sourceMap;
    }

    com.google.javascript.jscomp.VariableMap getVariableMap() {
        return getPassConfig().getIntermediateState().variableMap;
    }

    com.google.javascript.jscomp.VariableMap getPropertyMap() {
        return getPassConfig().getIntermediateState().propertyMap;
    }

    com.google.javascript.jscomp.CompilerOptions getOptions() {
        return options;
    }

    com.google.javascript.jscomp.FunctionInformationMap getFunctionalInformationMap() {
        return functionInformationMap;
    }

    public static void setLoggingLevel(java.util.logging.Level level) {
        com.google.javascript.jscomp.Compiler.logger.setLevel(level);
    }

    public java.lang.String getAstDotGraph() throws java.io.IOException {
        if (jsRoot != null) {
            com.google.javascript.jscomp.ControlFlowAnalysis cfa = new com.google.javascript.jscomp.ControlFlowAnalysis(this, true, false);
            cfa.process(null, jsRoot);
            return com.google.javascript.jscomp.DotFormatter.toDot(jsRoot, cfa.getCfg());
        } else {
            return "";
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.ErrorManager getErrorManager() {
        if (options == null) {
            initOptions(newCompilerOptions());
        }
        return errorManager;
    }

    @java.lang.Override
    java.util.List<com.google.javascript.jscomp.CompilerInput> getInputsInOrder() {
        return java.util.Collections.<com.google.javascript.jscomp.CompilerInput>unmodifiableList(inputs);
    }

    public java.util.Map<com.google.javascript.rhino.InputId, com.google.javascript.jscomp.CompilerInput> getInputsById() {
        return java.util.Collections.unmodifiableMap(inputsById);
    }

    java.util.List<com.google.javascript.jscomp.CompilerInput> getExternsInOrder() {
        return java.util.Collections.<com.google.javascript.jscomp.CompilerInput>unmodifiableList(externs);
    }

    public static class IntermediateState implements java.io.Serializable {
        private static final long serialVersionUID = 1L;

        com.google.javascript.rhino.Node externsRoot;

        private com.google.javascript.rhino.Node jsRoot;

        private java.util.List<com.google.javascript.jscomp.CompilerInput> externs;

        private java.util.List<com.google.javascript.jscomp.CompilerInput> inputs;

        private java.util.List<com.google.javascript.jscomp.JSModule> modules;

        private com.google.javascript.jscomp.PassConfig.State passConfigState;

        private com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

        private com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage lifeCycleStage;

        private java.util.Map<java.lang.String, com.google.javascript.rhino.Node> injectedLibraries;

        private IntermediateState() {
        }
    }

    public com.google.javascript.jscomp.Compiler.IntermediateState getState() {
        com.google.javascript.jscomp.Compiler.IntermediateState state = new com.google.javascript.jscomp.Compiler.IntermediateState();
        state.externsRoot = externsRoot;
        state.jsRoot = jsRoot;
        state.externs = externs;
        state.inputs = inputs;
        state.modules = modules;
        state.passConfigState = getPassConfig().getIntermediateState();
        state.typeRegistry = typeRegistry;
        state.lifeCycleStage = getLifeCycleStage();
        state.injectedLibraries = com.google.common.collect.Maps.newLinkedHashMap(injectedLibraries);
        return state;
    }

    public void setState(com.google.javascript.jscomp.Compiler.IntermediateState state) {
        externsRoot = state.externsRoot;
        jsRoot = state.jsRoot;
        externs = state.externs;
        inputs = state.inputs;
        modules = state.modules;
        passes = createPassConfigInternal();
        getPassConfig().setIntermediateState(state.passConfigState);
        typeRegistry = state.typeRegistry;
        setLifeCycleStage(state.lifeCycleStage);
        injectedLibraries.clear();
        injectedLibraries.putAll(state.injectedLibraries);
    }

    @com.google.common.annotations.VisibleForTesting
    java.util.List<com.google.javascript.jscomp.CompilerInput> getInputsForTesting() {
        return inputs;
    }

    @com.google.common.annotations.VisibleForTesting
    java.util.List<com.google.javascript.jscomp.CompilerInput> getExternsForTesting() {
        return externs;
    }

    @java.lang.Override
    boolean hasRegExpGlobalReferences() {
        return hasRegExpGlobalReferences;
    }

    @java.lang.Override
    void setHasRegExpGlobalReferences(boolean references) {
        hasRegExpGlobalReferences = references;
    }

    @java.lang.Override
    void updateGlobalVarReferences(java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> refMapPatch, com.google.javascript.rhino.Node collectionRoot) {
        com.google.common.base.Preconditions.checkState(collectionRoot.isScript() || collectionRoot.isBlock());
        if (globalRefMap == null) {
            globalRefMap = new com.google.javascript.jscomp.GlobalVarReferenceMap(getInputsInOrder(), getExternsInOrder());
        }
        globalRefMap.updateGlobalVarReferences(refMapPatch, collectionRoot);
    }

    @java.lang.Override
    com.google.javascript.jscomp.GlobalVarReferenceMap getGlobalVarReferences() {
        return globalRefMap;
    }

    @java.lang.Override
    com.google.javascript.jscomp.CompilerInput getSynthesizedExternsInput() {
        if (synthesizedExternsInput == null) {
            synthesizedExternsInput = newExternInput(com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS);
        }
        return synthesizedExternsInput;
    }

    @java.lang.Override
    public double getProgress() {
        return progress;
    }

    @java.lang.Override
    void setProgress(double newProgress) {
        if (newProgress > 1.0) {
            progress = 1.0;
        } else if (newProgress < 0.0) {
            progress = 0.0;
        } else {
            progress = newProgress;
        }
    }

    public void replaceScript(com.google.javascript.jscomp.JsAst ast) {
        com.google.javascript.jscomp.CompilerInput input = this.getInput(ast.getInputId());
        if (!replaceIncrementalSourceAst(ast)) {
            return;
        }
        com.google.javascript.rhino.Node originalRoot = input.getAstRoot(this);
        processNewScript(ast, originalRoot);
    }

    public void addNewScript(com.google.javascript.jscomp.JsAst ast) {
        if (!addNewSourceAst(ast)) {
            return;
        }
        com.google.javascript.rhino.Node emptyScript = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);
        com.google.javascript.rhino.InputId inputId = ast.getInputId();
        emptyScript.setInputId(inputId);
        emptyScript.setStaticSourceFile(com.google.javascript.jscomp.SourceFile.fromCode(inputId.getIdName(), ""));
        processNewScript(ast, emptyScript);
    }

    private void processNewScript(com.google.javascript.jscomp.JsAst ast, com.google.javascript.rhino.Node originalRoot) {
        com.google.javascript.rhino.Node js = ast.getAstRoot(this);
        com.google.common.base.Preconditions.checkNotNull(js);
        runHotSwap(originalRoot, js, this.getCleanupPassConfig());
        runHotSwapPass(null, null, ensureDefaultPassConfig().garbageCollectChecks);
        this.getTypeRegistry().clearNamedTypes();
        this.removeSyntheticVarsInput();
        runHotSwap(originalRoot, js, this.ensureDefaultPassConfig());
    }

    private void runHotSwap(com.google.javascript.rhino.Node originalRoot, com.google.javascript.rhino.Node js, com.google.javascript.jscomp.PassConfig passConfig) {
        for (com.google.javascript.jscomp.PassFactory passFactory : passConfig.getChecks()) {
            runHotSwapPass(originalRoot, js, passFactory);
        }
    }

    private void runHotSwapPass(com.google.javascript.rhino.Node originalRoot, com.google.javascript.rhino.Node js, com.google.javascript.jscomp.PassFactory passFactory) {
        com.google.javascript.jscomp.HotSwapCompilerPass pass = passFactory.getHotSwapPass(this);
        if (pass != null) {
            com.google.javascript.jscomp.Compiler.logger.info("Performing HotSwap for pass " + passFactory.getName());
            pass.hotSwapScript(js, originalRoot);
        }
    }

    private com.google.javascript.jscomp.PassConfig getCleanupPassConfig() {
        return new com.google.javascript.jscomp.CleanupPasses(getOptions());
    }

    private void removeSyntheticVarsInput() {
        java.lang.String sourceName = com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS;
        removeExternInput(new com.google.javascript.rhino.InputId(sourceName));
    }

    @java.lang.Override
    com.google.javascript.rhino.Node ensureLibraryInjected(java.lang.String resourceName) {
        if (injectedLibraries.containsKey(resourceName)) {
            return null;
        }
        boolean isBase = "base".equals(resourceName);
        if (!isBase) {
            ensureLibraryInjected("base");
        }
        com.google.javascript.rhino.Node firstChild = loadLibraryCode(resourceName).removeChildren();
        com.google.javascript.rhino.Node lastChild = firstChild.getLastSibling();
        com.google.javascript.rhino.Node parent = getNodeForCodeInsertion(null);
        if (isBase) {
            parent.addChildrenToFront(firstChild);
        } else {
            parent.addChildrenAfter(firstChild, injectedLibraries.get("base"));
        }
        reportCodeChange();
        injectedLibraries.put(resourceName, lastChild);
        return lastChild;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node loadLibraryCode(java.lang.String resourceName) {
        java.lang.String originalCode;
        try {
            originalCode = com.google.common.io.CharStreams.toString(new java.io.InputStreamReader(com.google.javascript.jscomp.Compiler.class.getResourceAsStream(java.lang.String.format("js/%s.js", resourceName)), com.google.common.base.Charsets.UTF_8));
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException(e);
        }
        return com.google.javascript.jscomp.Normalize.parseAndNormalizeSyntheticCode(this, originalCode, java.lang.String.format("jscomp_%s_", resourceName));
    }

    public static java.lang.String getReleaseVersion() {
        java.util.ResourceBundle config = java.util.ResourceBundle.getBundle(com.google.javascript.jscomp.Compiler.CONFIG_RESOURCE);
        return config.getString("compiler.version");
    }

    public static java.lang.String getReleaseDate() {
        java.util.ResourceBundle config = java.util.ResourceBundle.getBundle(com.google.javascript.jscomp.Compiler.CONFIG_RESOURCE);
        return config.getString("compiler.date");
    }
}
[2459003] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659923632685
GPR[SSUN]-1659923632685
-534884160
GPR[SPVATF]-1659923633032
GPR[EPVATF]-1659923633395
GPR[SPS]-1659923633396
[2460476] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1984.
GPR[EPS]-1659923634159
GPR[SPVATF]-1659923634159
GPR[EPVATF]-1659923634544
GPR[SPS]-1659923634544
[2461647] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1984.
GPR[EPS]-1659923635329
GPR[ESUN]-1659923635329
GPR[SSUN]-1659923635329
-534884160
GPR[ESUN]-1659923635665
GPR[SSUN]-1659923635665
-534884160
GPR[ESUN]-1659923635999
GPR[SSUN]-1659923635999
71832666
GPR[ESUN]-1659923636204
GPR[SSUN]-1659923636204
71832666
GPR[SPVATF]-1659923636407
GPR[EPVATF]-1659923636801
GPR[SPS]-1659923636801
[2463639] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JsAst:104.
GPR[EPS]-1659923637321
GPR[ESUN]-1659923637321
GPR[SSUN]-1659923637321
71832666
GPR[SPVATF]-1659923637530
GPR[EPVATF]-1659923638668
GPR[SPS]-1659923638668
[2465499] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JsAst:95.
GPR[EPS]-1659923639181
GPR[SPVATF]-1659923639181
GPR[EPVATF]-1659923639979
GPR[SPS]-1659923639980
[2466853] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JsAst:95.
GPR[EPS]-1659923640535
GPR[ESUN]-1659923640535
GPR[SSUN]-1659923640535
71832666
GPR[ESUN]-1659923640737
GPR[SSUN]-1659923640738
71832666
GPR[SPVATF]-1659923640939
GPR[EPVATF]-1659923641312
GPR[SPS]-1659923641312
[2468104] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JsAst:86.
GPR[EPS]-1659923641786
GPR[ESUN]-1659923641786
GPR[SSUN]-1659923641786
71832666
GPR[SPVATF]-1659923641990
GPR[EPVATF]-1659923642362
GPR[SPS]-1659923642362
[2469153] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JsAst:85.
GPR[EPS]-1659923642835
GPR[ESUN]-1659923642835
GPR[SSUN]-1659923642835
71832666
GPR[ESUN]-1659923643041
GPR[SSUN]-1659923643041
71832666
GPR[SPVATF]-1659923643242
GPR[EPVATF]-1659923643598
GPR[SPS]-1659923643598
[2470399] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JsAst:53.
GPR[EPS]-1659923644081
GPR[ESUN]-1659923644081
GPR[SSUN]-1659923644081
71832666
GPR[SPVATF]-1659923644290
GPR[EPVATF]-1659923644640
GPR[SPS]-1659923644640
[2471431] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JsAst:52.
GPR[EPS]-1659923645113
GPR[ESUN]-1659923645113
GPR[SSUN]-1659923645114
71832666
GPR[SPVATF]-1659923645338
GPR[EPVATF]-1659923645689
GPR[SPS]-1659923645690
[2472493] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JsAst:51.
GPR[EPS]-1659923646175
GPR[SPVATF]-1659923646176
GPR[EPVATF]-1659923646541
GPR[SPS]-1659923646541
[2473340] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JsAst:51.
GPR[EPS]-1659923647022
GPR[ESUN]-1659923647022
GPR[SSUN]-1659923647022
1331276989
GPR[ESUN]-1659923647238
GPR[SSUN]-1659923647238
1331276989
GPR[ESUN]-1659923647449
GPR[SSUN]-1659923647449
1331276989
GPR[SPVATF]-1659923647662
GPR[EPVATF]-1659923648033
GPR[SPS]-1659923648033
[2474873] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:481.
GPR[EPS]-1659923648555
GPR[ESUN]-1659923648555
GPR[SSUN]-1659923648556
1331276989
GPR[SPVATF]-1659923648770
GPR[EPVATF]-1659923649154
GPR[SPS]-1659923649154
[2475955] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:480.
GPR[EPS]-1659923649637
GPR[ESUN]-1659923649637
GPR[SSUN]-1659923649637
-534884160
GPR[ESUN]-1659923649976
GPR[SSUN]-1659923649976
GPR[ESUN]-1659923649976
GPR[SSUN]-1659923649976
-534884160
GPR[ESUN]-1659923650308
GPR[SSUN]-1659923650308
-534884160
GPR[SPVATF]-1659923650640
GPR[EPVATF]-1659923651019
GPR[SPS]-1659923651019
[2478109] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1954.
GPR[EPS]-1659923651791
GPR[ESUN]-1659923651791
GPR[SSUN]-1659923651791
-534884160
GPR[ESUN]-1659923652173
GPR[SSUN]-1659923652173
881600600
GPR[ESUN]-1659923652373
GPR[SSUN]-1659923652374
GPR[ESUN]-1659923652374
GPR[SSUN]-1659923652374
GPR[ESUN]-1659923652374
GPR[SSUN]-1659923652374
1508329696
GPR[ESUN]-1659923652620
GPR[SSUN]-1659923652620
1331276989
GPR[ESUN]-1659923652830
GPR[SSUN]-1659923652831
1331276989
GPR[SPVATF]-1659923653061
GPR[EPVATF]-1659923653413
GPR[SPS]-1659923653413
[2730703] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: Java heap space
GPR[ESUN]-1659923911333
GPR[SSUN]-1659923911333
\n\nNode: host-48\n
\n\nDate: Sun 07 Aug 2022 07:34:22 PM PDT\n
End running Nopol Closure/14 results at /experiment_home///results/Nopol/Closure/14/seed_261/
Removing checked out dir script/workingdir/Nopol/Closure_14
GPR[SSLE]-1659926063003
GPR[ESLE]-1659926123008
