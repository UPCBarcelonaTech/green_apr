Sleep 1m start
GPR[SSLI]-1659823627431
GPR[ESLI]-1659823687437
Running Nopol Closure 55b with approach: smt
Timezone: America/Los_Angeles
Seed 260
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/55/seed_260/
The file script/workingdir/Nopol/Closure_55 does not exist!
script/workingdir/Nopol/Closure_55
script/workingdir/Nopol/Closure_55
classpath:  script/workingdir/Nopol/Closure_55/build/classes:script/workingdir/Nopol/Closure_55/lib/args4j.jar:script/workingdir/Nopol/Closure_55/lib/guava.jar:script/workingdir/Nopol/Closure_55/lib/json.jar:script/workingdir/Nopol/Closure_55/lib/jsr305.jar:script/workingdir/Nopol/Closure_55/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_55/build/lib/rhino.jar:script/workingdir/Nopol/Closure_55/lib/ant.jar:script/workingdir/Nopol/Closure_55/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_55/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_55/lib/jarjar.jar:script/workingdir/Nopol/Closure_55/lib/junit.jar:script/workingdir/Nopol/Closure_55/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659823711757
GPR[ESLB]-1659823771762
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_55//build/classes:script/workingdir/Nopol/Closure_55//build/test:script/workingdir/Nopol/Closure_55/build/classes:script/workingdir/Nopol/Closure_55/lib/args4j.jar:script/workingdir/Nopol/Closure_55/lib/guava.jar:script/workingdir/Nopol/Closure_55/lib/json.jar:script/workingdir/Nopol/Closure_55/lib/jsr305.jar:script/workingdir/Nopol/Closure_55/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_55/build/lib/rhino.jar:script/workingdir/Nopol/Closure_55/lib/ant.jar:script/workingdir/Nopol/Closure_55/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_55/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_55/lib/jarjar.jar:script/workingdir/Nopol/Closure_55/lib/junit.jar:script/workingdir/Nopol/Closure_55/build/test
Node: host-53
Date init: Sat 06 Aug 2022 03:09:31 PM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_55/src]
[0] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_55/build/classes/, file:script/workingdir/Nopol/Closure_55/build/test/, file:script/workingdir/Nopol/Closure_55/build/classes/, file:script/workingdir/Nopol/Closure_55/lib/args4j.jar, file:script/workingdir/Nopol/Closure_55/lib/guava.jar, file:script/workingdir/Nopol/Closure_55/lib/json.jar, file:script/workingdir/Nopol/Closure_55/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_55/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_55/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_55/lib/ant.jar, file:script/workingdir/Nopol/Closure_55/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_55/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_55/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_55/lib/junit.jar, file:script/workingdir/Nopol/Closure_55/build/test/]
[0] INFO NoPol - Statement type: PRE_THEN_COND
[0] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPropertyOrderTest, com.google.javascript.jscomp.CheckPropertyOrderTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OperaCompoundAssignFixTest, com.google.javascript.jscomp.OperaCompoundAssignFixTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnfoldCompoundAssignmentsTest, com.google.javascript.jscomp.UnfoldCompoundAssignmentsTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableShadowDeclarationCheckTest, com.google.javascript.jscomp.VariableShadowDeclarationCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.ParserTest, com.google.javascript.rhino.ParserTest, com.google.javascript.rhino.TokenStreamTest, com.google.javascript.rhino.TokenStreamTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_55/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPropertyOrderTest, com.google.javascript.jscomp.CheckPropertyOrderTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OperaCompoundAssignFixTest, com.google.javascript.jscomp.OperaCompoundAssignFixTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnfoldCompoundAssignmentsTest, com.google.javascript.jscomp.UnfoldCompoundAssignmentsTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableShadowDeclarationCheckTest, com.google.javascript.jscomp.VariableShadowDeclarationCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.ParserTest, com.google.javascript.rhino.ParserTest, com.google.javascript.rhino.TokenStreamTest, com.google.javascript.rhino.TokenStreamTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/55/seed_260/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[6] INFO NoPol - Free memory: 1 GB
[6] INFO NoPol - Maximum memory: 7 GB
[6] INFO NoPol - Total memory available to JVM: 1 GB
[7] INFO NoPol - Java version: 1.8.0_45
[8] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[8] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659823777661
GPR[ESUP]-1659823777661
GPR[SFL]-1659823777661
GPR[EFL]-1659823816065
GPR[SFP]-1659823816065
GPR[SSUN]-1659823817868
-283827935
GPR[SPVATF]-1659823818655
GPR[EPVATF]-1659823818692
[45775] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823818692
GPR[SSUN]-1659823818692
2433571
GPR[ESUN]-1659823818980
GPR[SSUN]-1659823818980
2433571
GPR[ESUN]-1659823819264
GPR[SSUN]-1659823819264
-1966087783
GPR[ESUN]-1659823819478
GPR[SSUN]-1659823819478
-1966087783
GPR[SPVATF]-1659823819684
GPR[EPVATF]-1659823819720
[46803] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823819720
GPR[SSUN]-1659823819721
-1117079791
GPR[SPVATF]-1659823819941
GPR[EPVATF]-1659823820312
GPR[SPS]-1659823820312
[48285] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator$1:51.
GPR[EPS]-1659823821202
GPR[ESUN]-1659823821202
GPR[SSUN]-1659823821202
791463039
GPR[SPVATF]-1659823821433
GPR[EPVATF]-1659823821665
GPR[SPS]-1659823821665
GPR[EPS]-1659823832010
GPR[ESUN]-1659823832010
GPR[SSUN]-1659823832010
791463039
GPR[SPVATF]-1659823832239
GPR[EPVATF]-1659823834759
GPR[SPS]-1659823834759
[62284] ERROR ConstraintModelBuilder - Unable to compile the change: 
class FunctionRewriter implements com.google.javascript.jscomp.CompilerPass {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private static final int SAVINGS_THRESHOLD = 16;

    FunctionRewriter(com.google.javascript.jscomp.AbstractCompiler compiler) {
        this.compiler = compiler;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        java.util.List<com.google.javascript.jscomp.FunctionRewriter.Reducer> reducers = com.google.common.collect.ImmutableList.of(new com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer(), new com.google.javascript.jscomp.FunctionRewriter.GetterReducer(), new com.google.javascript.jscomp.FunctionRewriter.SetterReducer(), new com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer(), new com.google.javascript.jscomp.FunctionRewriter.IdentityReducer());
        com.google.common.collect.Multimap<com.google.javascript.jscomp.FunctionRewriter.Reducer, com.google.javascript.jscomp.FunctionRewriter.Reduction> reductionMap = com.google.common.collect.HashMultimap.create();
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, new com.google.javascript.jscomp.FunctionRewriter.ReductionGatherer(reducers, reductionMap));
        for (com.google.javascript.jscomp.FunctionRewriter.Reducer reducer : reducers) {
            java.util.Collection<com.google.javascript.jscomp.FunctionRewriter.Reduction> reductions = reductionMap.get(reducer);
            if (reductions.isEmpty()) {
                continue;
            }
            com.google.javascript.rhino.Node helperCode = parseHelperCode(reducer);
            if (helperCode == null) {
                continue;
            }
            int helperCodeCost = com.google.javascript.jscomp.InlineCostEstimator.getCost(helperCode);
            int savings = 0;
            for (com.google.javascript.jscomp.FunctionRewriter.Reduction reduction : reductions) {
                savings += reduction.estimateSavings();
            }
            if (savings > (helperCodeCost + com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD)) {
                for (com.google.javascript.jscomp.FunctionRewriter.Reduction reduction : reductions) {
                    reduction.apply();
                }
                com.google.javascript.rhino.Node addingRoot = compiler.getNodeForCodeInsertion(null);
                addingRoot.addChildrenToFront(helperCode);
                compiler.reportCodeChange();
            }
        }
    }

    public com.google.javascript.rhino.Node parseHelperCode(com.google.javascript.jscomp.FunctionRewriter.Reducer reducer) {
        com.google.javascript.rhino.Node root = compiler.parseSyntheticCode(reducer.getClass().toString() + ":helper", reducer.getHelperSource());
        return root != null ? root.removeFirstChild() : null;
    }

    private static boolean isReduceableFunctionExpression(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n);
    }

    private class Reduction {
        private final com.google.javascript.rhino.Node parent;

        private final com.google.javascript.rhino.Node oldChild;

        private final com.google.javascript.rhino.Node newChild;

        Reduction(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node oldChild, com.google.javascript.rhino.Node newChild) {
            this.parent = parent;
            this.oldChild = oldChild;
            this.newChild = newChild;
        }

        void apply() {
            parent.replaceChild(oldChild, newChild);
            compiler.reportCodeChange();
        }

        int estimateSavings() {
            return com.google.javascript.jscomp.InlineCostEstimator.getCost(oldChild) - com.google.javascript.jscomp.InlineCostEstimator.getCost(newChild);
        }
    }

    private class ReductionGatherer implements com.google.javascript.jscomp.NodeTraversal.Callback {
        private final java.util.List<com.google.javascript.jscomp.FunctionRewriter.Reducer> reducers;

        private final com.google.common.collect.Multimap<com.google.javascript.jscomp.FunctionRewriter.Reducer, com.google.javascript.jscomp.FunctionRewriter.Reduction> reductions;

        ReductionGatherer(java.util.List<com.google.javascript.jscomp.FunctionRewriter.Reducer> reducers, com.google.common.collect.Multimap<com.google.javascript.jscomp.FunctionRewriter.Reducer, com.google.javascript.jscomp.FunctionRewriter.Reduction> reductions) {
            this.reducers = reducers;
            this.reductions = reductions;
        }

        @java.lang.Override
        public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal raversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
            for (com.google.javascript.jscomp.FunctionRewriter.Reducer reducer : reducers) {
                com.google.javascript.rhino.Node replacement = reducer.reduce(node);
                if (replacement != node) {
                    reductions.put(reducer, new com.google.javascript.jscomp.FunctionRewriter.Reduction(parent, node, replacement));
                    return false;
                }
            }
            return true;
        }

        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal traversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        }
    }

    abstract static class Reducer {
        abstract java.lang.String getHelperSource();

        abstract com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node);

        protected final com.google.javascript.rhino.Node buildCallNode(java.lang.String methodName, com.google.javascript.rhino.Node argumentNode, int lineno, int charno) {
            com.google.javascript.rhino.Node call = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.CALL, lineno, charno);
            call.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, true);
            call.addChildToBack(com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, methodName));
            if (argumentNode != null) {
                call.addChildToBack(argumentNode.cloneTree());
            }
            return call;
        }
    }

    private static class EmptyFunctionReducer extends com.google.javascript.jscomp.FunctionRewriter.Reducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_emptyFn";

        static final java.lang.String HELPER_SOURCE = ((("function " + com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.FACTORY_METHOD_NAME) + "() {") + "  return function() {}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (com.google.javascript.jscomp.NodeUtil.isEmptyFunctionExpression(node)) {
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.FACTORY_METHOD_NAME, null, node.getLineno(), node.getCharno());
            } else {
                return node;
            }
        }
    }

    abstract static class SingleReturnStatementReducer extends com.google.javascript.jscomp.FunctionRewriter.Reducer {
        protected final com.google.javascript.rhino.Node maybeGetSingleReturnRValue(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node body = functionNode.getLastChild();
            if (!body.hasOneChild()) {
                return null;
            }
            com.google.javascript.rhino.Node statement = body.getFirstChild();
            if (statement.getType() == com.google.javascript.rhino.Token.RETURN) {
                return statement.getFirstChild();
            }
            return null;
        }
    }

    private static class IdentityReducer extends com.google.javascript.jscomp.FunctionRewriter.SingleReturnStatementReducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_identityFn";

        static final java.lang.String HELPER_SOURCE = (((((((("function " + com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.FACTORY_METHOD_NAME) + "() {") + "  return function(") + com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.FACTORY_METHOD_NAME) + "_value) {") + "return ") + com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.FACTORY_METHOD_NAME) + "_value}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (!com.google.javascript.jscomp.FunctionRewriter.isReduceableFunctionExpression(node)) {
                return node;
            }
            if (isIdentityFunction(node)) {
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.FACTORY_METHOD_NAME, null, node.getLineno(), node.getCharno());
            } else {
                return node;
            }
        }

        private boolean isIdentityFunction(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node argList = functionNode.getFirstChild().getNext();
            com.google.javascript.rhino.Node paramNode = argList.getFirstChild();
            if (paramNode == null) {
                return false;
            }
            com.google.javascript.rhino.Node value = maybeGetSingleReturnRValue(functionNode);
            if (((value != null) && com.google.javascript.jscomp.NodeUtil.isName(value)) && value.getString().equals(paramNode.getString())) {
                return true;
            }
            return false;
        }
    }

    private static class ReturnConstantReducer extends com.google.javascript.jscomp.FunctionRewriter.SingleReturnStatementReducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_returnArg";

        static final java.lang.String HELPER_SOURCE = ((((((("function " + com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME) + "(") + com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME) + "_value) {") + "  return function() {return ") + com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME) + "_value}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (!com.google.javascript.jscomp.FunctionRewriter.isReduceableFunctionExpression(node)) {
                return node;
            }
            com.google.javascript.rhino.Node valueNode = getValueNode(node);
            if (valueNode != null) {
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME, valueNode, node.getLineno(), node.getCharno());
            } else {
                return node;
            }
        }

        private com.google.javascript.rhino.Node getValueNode(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node value = maybeGetSingleReturnRValue(functionNode);
            if ((value != null) && com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                return value;
            }
            return null;
        }
    }

    private static class GetterReducer extends com.google.javascript.jscomp.FunctionRewriter.SingleReturnStatementReducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_get";

        static final java.lang.String HELPER_SOURCE = ((((((("function " + com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME) + "(") + com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME) + "_name) {") + "  return function() {return this[") + com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME) + "_name]}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.GetterReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (!com.google.javascript.jscomp.FunctionRewriter.isReduceableFunctionExpression(node)) {
                return node;
            }
            com.google.javascript.rhino.Node propName = getGetPropertyName(node);
            if (propName != null) {
                if (propName.getType() != com.google.javascript.rhino.Token.STRING) {
                    throw new java.lang.IllegalStateException("Expected STRING, got " + com.google.javascript.rhino.Token.name(propName.getType()));
                }
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(2).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("node",node);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("propName",propName);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.FunctionRewriter.GetterReducer.HELPER_SOURCE",com.google.javascript.jscomp.FunctionRewriter.GetterReducer.HELPER_SOURCE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD",com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME",com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME, propName, node.getLineno(), node.getCharno());

            } else {
                return node;
            }
        }

        private com.google.javascript.rhino.Node getGetPropertyName(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node value = maybeGetSingleReturnRValue(functionNode);
            if (((value != null) && com.google.javascript.jscomp.NodeUtil.isGetProp(value)) && com.google.javascript.jscomp.NodeUtil.isThis(value.getFirstChild())) {
                return value.getLastChild();
            }
            return null;
        }
    }

    private static class SetterReducer extends com.google.javascript.jscomp.FunctionRewriter.Reducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_set";

        static final java.lang.String HELPER_SOURCE = (((((((((((("function " + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "(") + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "_name) {") + "  return function(") + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "_value) {") + "this[") + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "_name] = ") + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "_value}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.SetterReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (!com.google.javascript.jscomp.FunctionRewriter.isReduceableFunctionExpression(node)) {
                return node;
            }
            com.google.javascript.rhino.Node propName = getSetPropertyName(node);
            if (propName != null) {
                if (propName.getType() != com.google.javascript.rhino.Token.STRING) {
                    throw new java.lang.IllegalStateException("Expected STRING, got " + com.google.javascript.rhino.Token.name(propName.getType()));
                }
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME, propName, node.getLineno(), node.getCharno());
            } else {
                return node;
            }
        }

        private com.google.javascript.rhino.Node getSetPropertyName(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node body = functionNode.getLastChild();
            if (!body.hasOneChild()) {
                return null;
            }
            com.google.javascript.rhino.Node argList = functionNode.getFirstChild().getNext();
            com.google.javascript.rhino.Node paramNode = argList.getFirstChild();
            if (paramNode == null) {
                return null;
            }
            com.google.javascript.rhino.Node statement = body.getFirstChild();
            if (!com.google.javascript.jscomp.NodeUtil.isExprAssign(statement)) {
                return null;
            }
            com.google.javascript.rhino.Node assign = statement.getFirstChild();
            com.google.javascript.rhino.Node lhs = assign.getFirstChild();
            if (com.google.javascript.jscomp.NodeUtil.isGetProp(lhs) && com.google.javascript.jscomp.NodeUtil.isThis(lhs.getFirstChild())) {
                com.google.javascript.rhino.Node rhs = assign.getLastChild();
                if (com.google.javascript.jscomp.NodeUtil.isName(rhs) && rhs.getString().equals(paramNode.getString())) {
                    com.google.javascript.rhino.Node propertyName = lhs.getLastChild();
                    return propertyName;
                }
            }
            return null;
        }
    }
}
[62285] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659823835202
GPR[SSUN]-1659823835202
791463039
GPR[SPVATF]-1659823835426
GPR[EPVATF]-1659823835644
GPR[SPS]-1659823835644
[63276] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$GetterReducer:427.
GPR[EPS]-1659823836194
GPR[SPVATF]-1659823836194
GPR[EPVATF]-1659823836407
GPR[SPS]-1659823836407
[64040] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$GetterReducer:427.
GPR[EPS]-1659823836957
GPR[ESUN]-1659823836957
GPR[SSUN]-1659823836957
791463039
GPR[ESUN]-1659823837179
GPR[SSUN]-1659823837179
-1966087783
GPR[SPVATF]-1659823837386
GPR[EPVATF]-1659823837405
[64489] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823837406
GPR[SSUN]-1659823837406
-1966087783
GPR[SPVATF]-1659823837609
GPR[EPVATF]-1659823837631
[64714] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823837631
GPR[SSUN]-1659823837631
-1659631726
GPR[ESUN]-1659823837835
GPR[SSUN]-1659823837835
130004992
GPR[ESUN]-1659823838037
GPR[SSUN]-1659823838037
130004992
GPR[SPVATF]-1659823838225
GPR[EPVATF]-1659823838252
[65335] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823838252
GPR[SSUN]-1659823838252
130004992
GPR[ESUN]-1659823838453
GPR[SSUN]-1659823838453
890942016
GPR[ESUN]-1659823838660
GPR[SSUN]-1659823838660
890942016
GPR[SPVATF]-1659823838866
GPR[EPVATF]-1659823838887
[65970] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823838887
GPR[SSUN]-1659823838887
890942016
GPR[SPVATF]-1659823839089
GPR[EPVATF]-1659823839111
[66194] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659823839111
GPR[EPVATF]-1659823839129
[66213] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823839130
GPR[SSUN]-1659823839130
890942016
GPR[ESUN]-1659823839341
GPR[SSUN]-1659823839341
890942016
GPR[ESUN]-1659823839537
GPR[SSUN]-1659823839537
-1966087783
GPR[ESUN]-1659823839732
GPR[SSUN]-1659823839732
-1966087783
GPR[SPVATF]-1659823839945
GPR[EPVATF]-1659823839968
[67051] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659823839968
GPR[EPVATF]-1659823839989
[67072] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823839989
GPR[SSUN]-1659823839989
-1966087783
GPR[ESUN]-1659823840195
GPR[SSUN]-1659823840195
-1966087783
GPR[SPVATF]-1659823840396
GPR[EPVATF]-1659823840418
[67501] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659823840419
GPR[EPVATF]-1659823840442
[67525] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823840442
GPR[SSUN]-1659823840442
-1966087783
GPR[ESUN]-1659823840654
GPR[SSUN]-1659823840654
-1966087783
GPR[ESUN]-1659823840888
GPR[SSUN]-1659823840888
-1966087783
GPR[ESUN]-1659823841103
GPR[SSUN]-1659823841103
-1966087783
GPR[SPVATF]-1659823841307
GPR[EPVATF]-1659823841334
[68417] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659823841334
GPR[EPVATF]-1659823841359
[68442] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823841359
GPR[SSUN]-1659823841359
-1966087783
GPR[SPVATF]-1659823841690
GPR[EPVATF]-1659823841769
[68852] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659823841770
GPR[EPVATF]-1659823841845
[68928] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823841845
GPR[SSUN]-1659823841845
-1966087783
GPR[SPVATF]-1659823844141
GPR[EPVATF]-1659823844167
[71250] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659823844167
GPR[EPVATF]-1659823844194
[71277] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823844194
GPR[SSUN]-1659823844194
-1966087783
GPR[ESUN]-1659823844399
GPR[SSUN]-1659823844399
-1966087783
GPR[ESUN]-1659823844614
GPR[SSUN]-1659823844614
-1966087783
GPR[SPVATF]-1659823844825
GPR[EPVATF]-1659823844851
[71934] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659823844852
GPR[EPVATF]-1659823844879
[71962] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823844879
GPR[SSUN]-1659823844879
-1966087783
GPR[SPVATF]-1659823845087
GPR[EPVATF]-1659823845112
[72195] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659823845112
GPR[EPVATF]-1659823845136
[72219] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823845136
GPR[SSUN]-1659823845136
-1966087783
GPR[ESUN]-1659823845344
GPR[SSUN]-1659823845344
-1966087783
GPR[SPVATF]-1659823845546
GPR[EPVATF]-1659823845569
[72652] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823845569
GPR[SSUN]-1659823845569
-1966087783
GPR[SPVATF]-1659823845779
GPR[EPVATF]-1659823845802
[72885] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823845802
GPR[SSUN]-1659823845802
-1966087783
GPR[ESUN]-1659823846012
GPR[SSUN]-1659823846012
-1966087783
GPR[SPVATF]-1659823846216
GPR[EPVATF]-1659823846241
[73324] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823846241
GPR[SSUN]-1659823846241
-1966087783
GPR[ESUN]-1659823846454
GPR[SSUN]-1659823846454
-1966087783
GPR[ESUN]-1659823846655
GPR[SSUN]-1659823846655
-1966087783
GPR[SPVATF]-1659823846851
GPR[EPVATF]-1659823846880
[73963] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823846880
GPR[SSUN]-1659823846880
-1966087783
GPR[SPVATF]-1659823847091
GPR[EPVATF]-1659823847114
[74197] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823847114
GPR[SSUN]-1659823847114
234947553
GPR[ESUN]-1659823847312
GPR[SSUN]-1659823847313
234947553
GPR[SPVATF]-1659823847515
GPR[EPVATF]-1659823847534
[74617] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659823847535
GPR[EPVATF]-1659823847553
[74636] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823847553
GPR[SSUN]-1659823847553
234947553
GPR[ESUN]-1659823847759
GPR[SSUN]-1659823847759
234947553
GPR[SPVATF]-1659823847968
GPR[EPVATF]-1659823847988
[75071] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659823847989
GPR[EPVATF]-1659823848006
[75089] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823848006
GPR[SSUN]-1659823848006
234947553
GPR[SPVATF]-1659823848217
GPR[EPVATF]-1659823848233
[75316] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823848233
GPR[SSUN]-1659823848233
234947553
GPR[ESUN]-1659823848433
GPR[SSUN]-1659823848433
234947553
GPR[ESUN]-1659823848649
GPR[SSUN]-1659823848649
234947553
GPR[SPVATF]-1659823848849
GPR[EPVATF]-1659823848867
[75950] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823848867
GPR[SSUN]-1659823848867
234947553
GPR[SPVATF]-1659823849069
GPR[EPVATF]-1659823849088
[76171] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823849088
GPR[SSUN]-1659823849088
234947553
GPR[SPVATF]-1659823849270
GPR[EPVATF]-1659823849286
[76369] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823849286
GPR[SSUN]-1659823849286
234947553
GPR[ESUN]-1659823849482
GPR[SSUN]-1659823849482
234947553
GPR[ESUN]-1659823849689
GPR[SSUN]-1659823849689
234947553
GPR[SPVATF]-1659823849897
GPR[EPVATF]-1659823849915
[76998] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823849915
GPR[SSUN]-1659823849915
234947553
GPR[SPVATF]-1659823850119
GPR[EPVATF]-1659823850139
[77222] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823850139
GPR[SSUN]-1659823850139
234947553
GPR[ESUN]-1659823850332
GPR[SSUN]-1659823850332
234947553
GPR[SPVATF]-1659823850529
GPR[EPVATF]-1659823850547
[77630] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823850547
GPR[SSUN]-1659823850547
234947553
GPR[SPVATF]-1659823850737
GPR[EPVATF]-1659823850752
[77836] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823850753
GPR[SSUN]-1659823850753
234947553
GPR[ESUN]-1659823850951
GPR[SSUN]-1659823850951
791463039
GPR[SPVATF]-1659823851177
GPR[EPVATF]-1659823852107
GPR[SPS]-1659823852107
[79602] ERROR ConstraintModelBuilder - Unable to compile the change: 
class FunctionRewriter implements com.google.javascript.jscomp.CompilerPass {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private static final int SAVINGS_THRESHOLD = 16;

    FunctionRewriter(com.google.javascript.jscomp.AbstractCompiler compiler) {
        this.compiler = compiler;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        java.util.List<com.google.javascript.jscomp.FunctionRewriter.Reducer> reducers = com.google.common.collect.ImmutableList.of(new com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer(), new com.google.javascript.jscomp.FunctionRewriter.GetterReducer(), new com.google.javascript.jscomp.FunctionRewriter.SetterReducer(), new com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer(), new com.google.javascript.jscomp.FunctionRewriter.IdentityReducer());
        com.google.common.collect.Multimap<com.google.javascript.jscomp.FunctionRewriter.Reducer, com.google.javascript.jscomp.FunctionRewriter.Reduction> reductionMap = com.google.common.collect.HashMultimap.create();
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, new com.google.javascript.jscomp.FunctionRewriter.ReductionGatherer(reducers, reductionMap));
        for (com.google.javascript.jscomp.FunctionRewriter.Reducer reducer : reducers) {
            java.util.Collection<com.google.javascript.jscomp.FunctionRewriter.Reduction> reductions = reductionMap.get(reducer);
            if (reductions.isEmpty()) {
                continue;
            }
            com.google.javascript.rhino.Node helperCode = parseHelperCode(reducer);
            if (helperCode == null) {
                continue;
            }
            int helperCodeCost = com.google.javascript.jscomp.InlineCostEstimator.getCost(helperCode);
            int savings = 0;
            for (com.google.javascript.jscomp.FunctionRewriter.Reduction reduction : reductions) {
                savings += reduction.estimateSavings();
            }
            if (savings > (helperCodeCost + com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD)) {
                for (com.google.javascript.jscomp.FunctionRewriter.Reduction reduction : reductions) {
                    reduction.apply();
                }
                com.google.javascript.rhino.Node addingRoot = compiler.getNodeForCodeInsertion(null);
                addingRoot.addChildrenToFront(helperCode);
                compiler.reportCodeChange();
            }
        }
    }

    public com.google.javascript.rhino.Node parseHelperCode(com.google.javascript.jscomp.FunctionRewriter.Reducer reducer) {
        com.google.javascript.rhino.Node root = compiler.parseSyntheticCode(reducer.getClass().toString() + ":helper", reducer.getHelperSource());
        return root != null ? root.removeFirstChild() : null;
    }

    private static boolean isReduceableFunctionExpression(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n);
    }

    private class Reduction {
        private final com.google.javascript.rhino.Node parent;

        private final com.google.javascript.rhino.Node oldChild;

        private final com.google.javascript.rhino.Node newChild;

        Reduction(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node oldChild, com.google.javascript.rhino.Node newChild) {
            this.parent = parent;
            this.oldChild = oldChild;
            this.newChild = newChild;
        }

        void apply() {
            parent.replaceChild(oldChild, newChild);
            compiler.reportCodeChange();
        }

        int estimateSavings() {
            return com.google.javascript.jscomp.InlineCostEstimator.getCost(oldChild) - com.google.javascript.jscomp.InlineCostEstimator.getCost(newChild);
        }
    }

    private class ReductionGatherer implements com.google.javascript.jscomp.NodeTraversal.Callback {
        private final java.util.List<com.google.javascript.jscomp.FunctionRewriter.Reducer> reducers;

        private final com.google.common.collect.Multimap<com.google.javascript.jscomp.FunctionRewriter.Reducer, com.google.javascript.jscomp.FunctionRewriter.Reduction> reductions;

        ReductionGatherer(java.util.List<com.google.javascript.jscomp.FunctionRewriter.Reducer> reducers, com.google.common.collect.Multimap<com.google.javascript.jscomp.FunctionRewriter.Reducer, com.google.javascript.jscomp.FunctionRewriter.Reduction> reductions) {
            this.reducers = reducers;
            this.reductions = reductions;
        }

        @java.lang.Override
        public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal raversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
            for (com.google.javascript.jscomp.FunctionRewriter.Reducer reducer : reducers) {
                com.google.javascript.rhino.Node replacement = reducer.reduce(node);
                if (replacement != node) {
                    reductions.put(reducer, new com.google.javascript.jscomp.FunctionRewriter.Reduction(parent, node, replacement));
                    return false;
                }
            }
            return true;
        }

        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal traversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        }
    }

    abstract static class Reducer {
        abstract java.lang.String getHelperSource();

        abstract com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node);

        protected final com.google.javascript.rhino.Node buildCallNode(java.lang.String methodName, com.google.javascript.rhino.Node argumentNode, int lineno, int charno) {
            com.google.javascript.rhino.Node call = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.CALL, lineno, charno);
            call.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, true);
            call.addChildToBack(com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, methodName));
            if (argumentNode != null) {
                call.addChildToBack(argumentNode.cloneTree());
            }
            return call;
        }
    }

    private static class EmptyFunctionReducer extends com.google.javascript.jscomp.FunctionRewriter.Reducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_emptyFn";

        static final java.lang.String HELPER_SOURCE = ((("function " + com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.FACTORY_METHOD_NAME) + "() {") + "  return function() {}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (com.google.javascript.jscomp.NodeUtil.isEmptyFunctionExpression(node)) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(5).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.HELPER_SOURCE",com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.HELPER_SOURCE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("node",node);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD",com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.FACTORY_METHOD_NAME",com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.FACTORY_METHOD_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.FACTORY_METHOD_NAME, null, node.getLineno(), node.getCharno());

            } else {
                return node;
            }
        }
    }

    abstract static class SingleReturnStatementReducer extends com.google.javascript.jscomp.FunctionRewriter.Reducer {
        protected final com.google.javascript.rhino.Node maybeGetSingleReturnRValue(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node body = functionNode.getLastChild();
            if (!body.hasOneChild()) {
                return null;
            }
            com.google.javascript.rhino.Node statement = body.getFirstChild();
            if (statement.getType() == com.google.javascript.rhino.Token.RETURN) {
                return statement.getFirstChild();
            }
            return null;
        }
    }

    private static class IdentityReducer extends com.google.javascript.jscomp.FunctionRewriter.SingleReturnStatementReducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_identityFn";

        static final java.lang.String HELPER_SOURCE = (((((((("function " + com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.FACTORY_METHOD_NAME) + "() {") + "  return function(") + com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.FACTORY_METHOD_NAME) + "_value) {") + "return ") + com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.FACTORY_METHOD_NAME) + "_value}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (!com.google.javascript.jscomp.FunctionRewriter.isReduceableFunctionExpression(node)) {
                return node;
            }
            if (isIdentityFunction(node)) {
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.FACTORY_METHOD_NAME, null, node.getLineno(), node.getCharno());
            } else {
                return node;
            }
        }

        private boolean isIdentityFunction(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node argList = functionNode.getFirstChild().getNext();
            com.google.javascript.rhino.Node paramNode = argList.getFirstChild();
            if (paramNode == null) {
                return false;
            }
            com.google.javascript.rhino.Node value = maybeGetSingleReturnRValue(functionNode);
            if (((value != null) && com.google.javascript.jscomp.NodeUtil.isName(value)) && value.getString().equals(paramNode.getString())) {
                return true;
            }
            return false;
        }
    }

    private static class ReturnConstantReducer extends com.google.javascript.jscomp.FunctionRewriter.SingleReturnStatementReducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_returnArg";

        static final java.lang.String HELPER_SOURCE = ((((((("function " + com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME) + "(") + com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME) + "_value) {") + "  return function() {return ") + com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME) + "_value}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (!com.google.javascript.jscomp.FunctionRewriter.isReduceableFunctionExpression(node)) {
                return node;
            }
            com.google.javascript.rhino.Node valueNode = getValueNode(node);
            if (valueNode != null) {
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME, valueNode, node.getLineno(), node.getCharno());
            } else {
                return node;
            }
        }

        private com.google.javascript.rhino.Node getValueNode(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node value = maybeGetSingleReturnRValue(functionNode);
            if ((value != null) && com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                return value;
            }
            return null;
        }
    }

    private static class GetterReducer extends com.google.javascript.jscomp.FunctionRewriter.SingleReturnStatementReducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_get";

        static final java.lang.String HELPER_SOURCE = ((((((("function " + com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME) + "(") + com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME) + "_name) {") + "  return function() {return this[") + com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME) + "_name]}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.GetterReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (!com.google.javascript.jscomp.FunctionRewriter.isReduceableFunctionExpression(node)) {
                return node;
            }
            com.google.javascript.rhino.Node propName = getGetPropertyName(node);
            if (propName != null) {
                if (propName.getType() != com.google.javascript.rhino.Token.STRING) {
                    throw new java.lang.IllegalStateException("Expected STRING, got " + com.google.javascript.rhino.Token.name(propName.getType()));
                }
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME, propName, node.getLineno(), node.getCharno());
            } else {
                return node;
            }
        }

        private com.google.javascript.rhino.Node getGetPropertyName(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node value = maybeGetSingleReturnRValue(functionNode);
            if (((value != null) && com.google.javascript.jscomp.NodeUtil.isGetProp(value)) && com.google.javascript.jscomp.NodeUtil.isThis(value.getFirstChild())) {
                return value.getLastChild();
            }
            return null;
        }
    }

    private static class SetterReducer extends com.google.javascript.jscomp.FunctionRewriter.Reducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_set";

        static final java.lang.String HELPER_SOURCE = (((((((((((("function " + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "(") + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "_name) {") + "  return function(") + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "_value) {") + "this[") + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "_name] = ") + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "_value}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.SetterReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (!com.google.javascript.jscomp.FunctionRewriter.isReduceableFunctionExpression(node)) {
                return node;
            }
            com.google.javascript.rhino.Node propName = getSetPropertyName(node);
            if (propName != null) {
                if (propName.getType() != com.google.javascript.rhino.Token.STRING) {
                    throw new java.lang.IllegalStateException("Expected STRING, got " + com.google.javascript.rhino.Token.name(propName.getType()));
                }
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME, propName, node.getLineno(), node.getCharno());
            } else {
                return node;
            }
        }

        private com.google.javascript.rhino.Node getSetPropertyName(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node body = functionNode.getLastChild();
            if (!body.hasOneChild()) {
                return null;
            }
            com.google.javascript.rhino.Node argList = functionNode.getFirstChild().getNext();
            com.google.javascript.rhino.Node paramNode = argList.getFirstChild();
            if (paramNode == null) {
                return null;
            }
            com.google.javascript.rhino.Node statement = body.getFirstChild();
            if (!com.google.javascript.jscomp.NodeUtil.isExprAssign(statement)) {
                return null;
            }
            com.google.javascript.rhino.Node assign = statement.getFirstChild();
            com.google.javascript.rhino.Node lhs = assign.getFirstChild();
            if (com.google.javascript.jscomp.NodeUtil.isGetProp(lhs) && com.google.javascript.jscomp.NodeUtil.isThis(lhs.getFirstChild())) {
                com.google.javascript.rhino.Node rhs = assign.getLastChild();
                if (com.google.javascript.jscomp.NodeUtil.isName(rhs) && rhs.getString().equals(paramNode.getString())) {
                    com.google.javascript.rhino.Node propertyName = lhs.getLastChild();
                    return propertyName;
                }
            }
            return null;
        }
    }
}
[79602] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659823852519
GPR[SSUN]-1659823852519
791463039
GPR[ESUN]-1659823852746
GPR[SSUN]-1659823852746
791463039
GPR[SPVATF]-1659823852974
GPR[EPVATF]-1659823853182
GPR[SPS]-1659823853182
[80808] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$SetterReducer:511.
GPR[EPS]-1659823853726
GPR[ESUN]-1659823853726
GPR[SSUN]-1659823853726
-1117079791
GPR[SPVATF]-1659823853942
GPR[EPVATF]-1659823854180
GPR[SPS]-1659823854180
[81744] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:768.
GPR[EPS]-1659823854661
GPR[ESUN]-1659823854661
GPR[SSUN]-1659823854661
791463039
GPR[SPVATF]-1659823854897
GPR[EPVATF]-1659823855126
GPR[SPS]-1659823855126
[82749] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$SingleReturnStatementReducer:272.
GPR[EPS]-1659823855666
GPR[ESUN]-1659823855666
GPR[SSUN]-1659823855666
890942016
GPR[SPVATF]-1659823855882
GPR[EPVATF]-1659823855902
[82985] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659823855902
GPR[EPVATF]-1659823855923
[83006] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823855923
GPR[SSUN]-1659823855923
890942016
GPR[SPVATF]-1659823856123
GPR[EPVATF]-1659823856141
[83224] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823856141
GPR[SSUN]-1659823856141
890942016
GPR[ESUN]-1659823856352
GPR[SSUN]-1659823856352
890942016
GPR[SPVATF]-1659823856555
GPR[EPVATF]-1659823856579
[83662] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823856579
GPR[SSUN]-1659823856579
890942016
GPR[SPVATF]-1659823856789
GPR[EPVATF]-1659823856814
[83897] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659823856814
GPR[EPVATF]-1659823856839
[83922] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823856839
GPR[SSUN]-1659823856839
890942016
GPR[SPVATF]-1659823857058
GPR[EPVATF]-1659823857079
[84162] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823857079
GPR[SSUN]-1659823857079
890942016
GPR[SPVATF]-1659823857293
GPR[EPVATF]-1659823857315
[84398] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659823857315
GPR[EPVATF]-1659823857335
[84418] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823857335
GPR[SSUN]-1659823857335
890942016
GPR[ESUN]-1659823857543
GPR[SSUN]-1659823857543
890942016
GPR[SPVATF]-1659823857747
GPR[EPVATF]-1659823857770
[84853] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823857770
GPR[SSUN]-1659823857770
890942016
GPR[SPVATF]-1659823857976
GPR[EPVATF]-1659823857997
[85080] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823857997
GPR[SSUN]-1659823857997
890942016
GPR[SPVATF]-1659823858203
GPR[EPVATF]-1659823858223
[85306] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823858223
GPR[SSUN]-1659823858223
890942016
GPR[ESUN]-1659823858442
GPR[SSUN]-1659823858442
2433571
GPR[ESUN]-1659823858696
GPR[SSUN]-1659823858696
791463039
GPR[SPVATF]-1659823858938
GPR[EPVATF]-1659823859167
GPR[SPS]-1659823859167
[86777] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$Reducer:221.
GPR[EPS]-1659823859694
GPR[ESUN]-1659823859694
GPR[SSUN]-1659823859694
-1117079791
GPR[SPVATF]-1659823859918
GPR[EPVATF]-1659823860133
GPR[SPS]-1659823860133
[87693] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:763.
GPR[EPS]-1659823860610
GPR[ESUN]-1659823860610
GPR[SSUN]-1659823860610
791463039
GPR[SPVATF]-1659823860832
GPR[EPVATF]-1659823861064
GPR[SPS]-1659823861064
GPR[EPS]-1659823868187
GPR[ESUN]-1659823868187
GPR[SSUN]-1659823868187
GPR[ESUN]-1659823868187
GPR[SSUN]-1659823868187
791463039
GPR[ESUN]-1659823868467
GPR[SSUN]-1659823868467
791463039
GPR[SPVATF]-1659823868698
GPR[EPVATF]-1659823868935
GPR[SPS]-1659823868935
[96537] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter:100.
GPR[EPS]-1659823869454
GPR[ESUN]-1659823869454
GPR[SSUN]-1659823869454
791463039
GPR[SPVATF]-1659823869678
GPR[EPVATF]-1659823869912
GPR[SPS]-1659823869912
[97519] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter:99.
GPR[EPS]-1659823870436
GPR[ESUN]-1659823870436
GPR[SSUN]-1659823870436
791463039
GPR[ESUN]-1659823870655
GPR[SSUN]-1659823870655
791463039
GPR[ESUN]-1659823870895
GPR[SSUN]-1659823870895
791463039
GPR[SPVATF]-1659823871125
GPR[EPVATF]-1659823871336
GPR[SPS]-1659823871336
[98951] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter:95.
GPR[EPS]-1659823871868
GPR[ESUN]-1659823871868
GPR[SSUN]-1659823871868
791463039
GPR[SPVATF]-1659823872096
GPR[EPVATF]-1659823873029
GPR[SPS]-1659823873029
[100679] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter:94.
GPR[EPS]-1659823873596
GPR[ESUN]-1659823873596
GPR[SSUN]-1659823873596
791463039
GPR[ESUN]-1659823873829
GPR[SSUN]-1659823873829
791463039
GPR[SPVATF]-1659823874047
GPR[EPVATF]-1659823874280
GPR[SPS]-1659823874280
[101878] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$Reduction:139.
GPR[EPS]-1659823874795
GPR[ESUN]-1659823874796
GPR[SSUN]-1659823874796
791463039
GPR[SPVATF]-1659823875023
GPR[EPVATF]-1659823875249
GPR[SPS]-1659823875249
[102847] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$Reduction:138.
GPR[EPS]-1659823875764
GPR[ESUN]-1659823875764
GPR[SSUN]-1659823875764
791463039
GPR[ESUN]-1659823876015
GPR[SSUN]-1659823876015
791463039
GPR[ESUN]-1659823876236
GPR[SSUN]-1659823876236
791463039
GPR[ESUN]-1659823876457
GPR[SSUN]-1659823876457
791463039
GPR[SPVATF]-1659823876690
GPR[EPVATF]-1659823876911
GPR[SPS]-1659823876911
GPR[EPS]-1659823878247
GPR[SPVATR]-1659823878247
[105330] INFO TestPatch - Applying patch: com.google.javascript.jscomp.FunctionRewriter:93: PRECONDITION !(((reducers.size() < reductions.size()) && (reducers.size() < reductions.size())) || (savings <= com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD))
[105697] INFO TestPatch - Running test suite to check the patch "!(((reducers.size() < reductions.size()) && (reducers.size() < reductions.size())) || (savings <= com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD))" is working
GPR[EPVATR]-1659823879019
[106102] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659823879019
[106112] INFO NoPol - --- a/src/com/google/javascript/jscomp/FunctionRewriter.java
+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java
@@ -92,10 +92,12 @@
       // reductions if doing so will result in some savings.
-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {
-        for (Reduction reduction : reductions) {
-          reduction.apply();
+      if (!(((reducers.size() < reductions.size()) && (reducers.size() < reductions.size())) || (savings <= com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD))) {
+        if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {
+          for (Reduction reduction : reductions) {
+            reduction.apply();
+          }
+          
+          Node addingRoot = compiler.getNodeForCodeInsertion(null);
+          addingRoot.addChildrenToFront(helperCode);
+          compiler.reportCodeChange();
         }
-
-        Node addingRoot = compiler.getNodeForCodeInsertion(null);
-        addingRoot.addChildrenToFront(helperCode);
-        compiler.reportCodeChange();
       }

Saving patch at /experiment_home///results/Nopol/Closure/55/seed_260/patch_101368_1ts_1659823879029.diff
GPR[SPVATF]-1659823879032
GPR[EPVATF]-1659823879259
GPR[SPS]-1659823879259
GPR[EPS]-1659823880984
GPR[SPVATR]-1659823880984
[108067] INFO TestPatch - Applying patch: com.google.javascript.jscomp.FunctionRewriter:93: CONDITIONAL (reducers.isEmpty()) || ((savings > (helperCodeCost + com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD)) && (!(reducers.size() < reductions.size())))
[108423] INFO TestPatch - Running test suite to check the patch "(reducers.isEmpty()) || ((savings > (helperCodeCost + com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD)) && (!(reducers.size() < reductions.size())))" is working
GPR[EPVATR]-1659823881766
[108849] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659823881766
[108852] INFO NoPol - --- a/src/com/google/javascript/jscomp/FunctionRewriter.java
+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java
@@ -92,3 +92,3 @@
       // reductions if doing so will result in some savings.
-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {
+      if ((reducers.isEmpty()) || ((savings > (helperCodeCost + com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD)) && (!(reducers.size() < reductions.size())))) {
         for (Reduction reduction : reductions) {
@@ -96,3 +96,3 @@
         }
-
+        
         Node addingRoot = compiler.getNodeForCodeInsertion(null);

Saving patch at /experiment_home///results/Nopol/Closure/55/seed_260/patch_104108_2ts_1659823881769.diff
GPR[ESUN]-1659823881769
GPR[SSUN]-1659823881769
791463039
GPR[ESUN]-1659823882003
GPR[SSUN]-1659823882003
791463039
GPR[SPVATF]-1659823882225
GPR[EPVATF]-1659823882460
GPR[SPS]-1659823882460
GPR[EPS]-1659823884386
GPR[SPVATR]-1659823884386
[111469] INFO TestPatch - Applying patch: com.google.javascript.jscomp.FunctionRewriter:88: PRECONDITION (!((1 == reductions.size()) || (reducers.size() < reductions.size()))) && (root!=null)
[111839] INFO TestPatch - Running test suite to check the patch "(!((1 == reductions.size()) || (reducers.size() < reductions.size()))) && (root!=null)" is working
GPR[EPVATR]-1659823885147
[112230] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659823885148
[112233] INFO NoPol - --- a/src/com/google/javascript/jscomp/FunctionRewriter.java
+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java
@@ -87,3 +87,5 @@
       for (Reduction reduction : reductions) {
-        savings += reduction.estimateSavings();
+        if ((!((1 == reductions.size()) || (reducers.size() < reductions.size()))) && (root!=null)) {
+          savings += reduction.estimateSavings();
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/55/seed_260/patch_107489_3ts_1659823885150.diff
GPR[ESUN]-1659823885151
GPR[SSUN]-1659823885151
791463039
GPR[SPVATF]-1659823885373
GPR[EPVATF]-1659823885618
GPR[SPS]-1659823885618
GPR[EPS]-1659823886968
GPR[SPVATR]-1659823886968
[114051] INFO TestPatch - Applying patch: com.google.javascript.jscomp.FunctionRewriter:87: PRECONDITION !((reductions.size() <= 1) || (reducers.size() < reductions.size()))
[114410] INFO TestPatch - Running test suite to check the patch "!((reductions.size() <= 1) || (reducers.size() < reductions.size()))" is working
GPR[EPVATR]-1659823887760
[114843] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659823887760
[114846] INFO NoPol - --- a/src/com/google/javascript/jscomp/FunctionRewriter.java
+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java
@@ -86,4 +86,6 @@
       int savings = 0;
-      for (Reduction reduction : reductions) {
-        savings += reduction.estimateSavings();
+      if (!((reductions.size() <= 1) || (reducers.size() < reductions.size()))) {
+        for (Reduction reduction : reductions) {
+          savings += reduction.estimateSavings();
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/55/seed_260/patch_110102_4ts_1659823887763.diff
GPR[ESUN]-1659823887764
GPR[SSUN]-1659823887764
791463039
GPR[ESUN]-1659823888001
GPR[SSUN]-1659823888001
791463039
GPR[ESUN]-1659823888232
GPR[SSUN]-1659823888232
791463039
GPR[SPVATF]-1659823888441
GPR[EPVATF]-1659823888657
GPR[SPS]-1659823888657
[116282] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter:79.
GPR[EPS]-1659823889199
GPR[SPVATF]-1659823889200
GPR[EPVATF]-1659823889418
GPR[SPS]-1659823889418
GPR[EPS]-1659823891141
GPR[SPVATR]-1659823891141
[118224] INFO TestPatch - Applying patch: com.google.javascript.jscomp.FunctionRewriter:79: CONDITIONAL (reductions.size() <= 1) || (reducers.size() < reductions.size())
[118587] INFO TestPatch - Running test suite to check the patch "(reductions.size() <= 1) || (reducers.size() < reductions.size())" is working
GPR[EPVATR]-1659823891924
[119007] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659823891924
[119009] INFO NoPol - --- a/src/com/google/javascript/jscomp/FunctionRewriter.java
+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java
@@ -78,3 +78,3 @@
       Node helperCode = parseHelperCode(reducer);
-      if (helperCode == null) {
+      if ((reductions.size() <= 1) || (reducers.size() < reductions.size())) {
         continue;

Saving patch at /experiment_home///results/Nopol/Closure/55/seed_260/patch_114265_5ts_1659823891926.diff
GPR[ESUN]-1659823891927
GPR[SSUN]-1659823891927
791463039
GPR[ESUN]-1659823892416
GPR[SSUN]-1659823892416
791463039
GPR[ESUN]-1659823892631
GPR[SSUN]-1659823892631
791463039
GPR[SPVATF]-1659823892862
GPR[EPVATF]-1659823893091
GPR[SPS]-1659823893091
[120697] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$ReductionGatherer:179.
GPR[EPS]-1659823893614
GPR[ESUN]-1659823893614
GPR[SSUN]-1659823893614
791463039
GPR[SPVATF]-1659823893836
GPR[EPVATF]-1659823894070
GPR[SPS]-1659823894070
GPR[EPS]-1659823903418
GPR[ESUN]-1659823903418
GPR[SSUN]-1659823903418
791463039
GPR[ESUN]-1659823903619
GPR[SSUN]-1659823903619
791463039
GPR[SPVATF]-1659823903845
GPR[EPVATF]-1659823904072
GPR[SPS]-1659823904072
[131679] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$Reducer:220.
GPR[EPS]-1659823904597
GPR[SPVATF]-1659823904597
GPR[EPVATF]-1659823904831
GPR[SPS]-1659823904831
[132413] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$Reducer:220.
GPR[EPS]-1659823905330
GPR[ESUN]-1659823905330
GPR[SSUN]-1659823905330
791463039
GPR[SPVATF]-1659823905549
GPR[EPVATF]-1659823905778
GPR[SPS]-1659823905778
[133376] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$Reducer:219.
GPR[EPS]-1659823906293
GPR[ESUN]-1659823906293
GPR[SSUN]-1659823906293
791463039
GPR[SPVATF]-1659823906495
GPR[EPVATF]-1659823906709
GPR[SPS]-1659823906709
[134294] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$Reducer:218.
GPR[EPS]-1659823907211
GPR[ESUN]-1659823907212
GPR[SSUN]-1659823907212
791463039
GPR[ESUN]-1659823907443
GPR[SSUN]-1659823907443
791463039
GPR[SPVATF]-1659823907645
GPR[EPVATF]-1659823907864
GPR[SPS]-1659823907864
[135303] ERROR ConstraintModelBuilder - Unable to compile the change: 
class FunctionRewriter implements com.google.javascript.jscomp.CompilerPass {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private static final int SAVINGS_THRESHOLD = 16;

    FunctionRewriter(com.google.javascript.jscomp.AbstractCompiler compiler) {
        this.compiler = compiler;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        java.util.List<com.google.javascript.jscomp.FunctionRewriter.Reducer> reducers = com.google.common.collect.ImmutableList.of(new com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer(), new com.google.javascript.jscomp.FunctionRewriter.GetterReducer(), new com.google.javascript.jscomp.FunctionRewriter.SetterReducer(), new com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer(), new com.google.javascript.jscomp.FunctionRewriter.IdentityReducer());
        com.google.common.collect.Multimap<com.google.javascript.jscomp.FunctionRewriter.Reducer, com.google.javascript.jscomp.FunctionRewriter.Reduction> reductionMap = com.google.common.collect.HashMultimap.create();
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, new com.google.javascript.jscomp.FunctionRewriter.ReductionGatherer(reducers, reductionMap));
        for (com.google.javascript.jscomp.FunctionRewriter.Reducer reducer : reducers) {
            java.util.Collection<com.google.javascript.jscomp.FunctionRewriter.Reduction> reductions = reductionMap.get(reducer);
            if (reductions.isEmpty()) {
                continue;
            }
            com.google.javascript.rhino.Node helperCode = parseHelperCode(reducer);
            if (helperCode == null) {
                continue;
            }
            int helperCodeCost = com.google.javascript.jscomp.InlineCostEstimator.getCost(helperCode);
            int savings = 0;
            for (com.google.javascript.jscomp.FunctionRewriter.Reduction reduction : reductions) {
                savings += reduction.estimateSavings();
            }
            if (savings > (helperCodeCost + com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD)) {
                for (com.google.javascript.jscomp.FunctionRewriter.Reduction reduction : reductions) {
                    reduction.apply();
                }
                com.google.javascript.rhino.Node addingRoot = compiler.getNodeForCodeInsertion(null);
                addingRoot.addChildrenToFront(helperCode);
                compiler.reportCodeChange();
            }
        }
    }

    public com.google.javascript.rhino.Node parseHelperCode(com.google.javascript.jscomp.FunctionRewriter.Reducer reducer) {
        com.google.javascript.rhino.Node root = compiler.parseSyntheticCode(reducer.getClass().toString() + ":helper", reducer.getHelperSource());
        return root != null ? root.removeFirstChild() : null;
    }

    private static boolean isReduceableFunctionExpression(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n);
    }

    private class Reduction {
        private final com.google.javascript.rhino.Node parent;

        private final com.google.javascript.rhino.Node oldChild;

        private final com.google.javascript.rhino.Node newChild;

        Reduction(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node oldChild, com.google.javascript.rhino.Node newChild) {
            this.parent = parent;
            this.oldChild = oldChild;
            this.newChild = newChild;
        }

        void apply() {
            parent.replaceChild(oldChild, newChild);
            compiler.reportCodeChange();
        }

        int estimateSavings() {
            return com.google.javascript.jscomp.InlineCostEstimator.getCost(oldChild) - com.google.javascript.jscomp.InlineCostEstimator.getCost(newChild);
        }
    }

    private class ReductionGatherer implements com.google.javascript.jscomp.NodeTraversal.Callback {
        private final java.util.List<com.google.javascript.jscomp.FunctionRewriter.Reducer> reducers;

        private final com.google.common.collect.Multimap<com.google.javascript.jscomp.FunctionRewriter.Reducer, com.google.javascript.jscomp.FunctionRewriter.Reduction> reductions;

        ReductionGatherer(java.util.List<com.google.javascript.jscomp.FunctionRewriter.Reducer> reducers, com.google.common.collect.Multimap<com.google.javascript.jscomp.FunctionRewriter.Reducer, com.google.javascript.jscomp.FunctionRewriter.Reduction> reductions) {
            this.reducers = reducers;
            this.reductions = reductions;
        }

        @java.lang.Override
        public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal raversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
            for (com.google.javascript.jscomp.FunctionRewriter.Reducer reducer : reducers) {
                com.google.javascript.rhino.Node replacement = reducer.reduce(node);
                if (replacement != node) {
                    reductions.put(reducer, new com.google.javascript.jscomp.FunctionRewriter.Reduction(parent, node, replacement));
                    return false;
                }
            }
            return true;
        }

        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal traversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        }
    }

    abstract static class Reducer {
        abstract java.lang.String getHelperSource();

        abstract com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node);

        protected final com.google.javascript.rhino.Node buildCallNode(java.lang.String methodName, com.google.javascript.rhino.Node argumentNode, int lineno, int charno) {
            com.google.javascript.rhino.Node call = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.CALL, lineno, charno);
            call.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, true);
            call.addChildToBack(com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, methodName));
            if (argumentNode != null) {
                call.addChildToBack(argumentNode.cloneTree());
            }
            return call;
        }
    }

    private static class EmptyFunctionReducer extends com.google.javascript.jscomp.FunctionRewriter.Reducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_emptyFn";

        static final java.lang.String HELPER_SOURCE = ((("function " + com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.FACTORY_METHOD_NAME) + "() {") + "  return function() {}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (com.google.javascript.jscomp.NodeUtil.isEmptyFunctionExpression(node)) {
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.FACTORY_METHOD_NAME, null, node.getLineno(), node.getCharno());
            } else {
                return node;
            }
        }
    }

    abstract static class SingleReturnStatementReducer extends com.google.javascript.jscomp.FunctionRewriter.Reducer {
        protected final com.google.javascript.rhino.Node maybeGetSingleReturnRValue(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node body = functionNode.getLastChild();
            if (!body.hasOneChild()) {
                return null;
            }
            com.google.javascript.rhino.Node statement = body.getFirstChild();
            if (statement.getType() == com.google.javascript.rhino.Token.RETURN) {
                return statement.getFirstChild();
            }
            return null;
        }
    }

    private static class IdentityReducer extends com.google.javascript.jscomp.FunctionRewriter.SingleReturnStatementReducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_identityFn";

        static final java.lang.String HELPER_SOURCE = (((((((("function " + com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.FACTORY_METHOD_NAME) + "() {") + "  return function(") + com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.FACTORY_METHOD_NAME) + "_value) {") + "return ") + com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.FACTORY_METHOD_NAME) + "_value}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (!com.google.javascript.jscomp.FunctionRewriter.isReduceableFunctionExpression(node)) {
                return node;
            }
            if (isIdentityFunction(node)) {
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.FACTORY_METHOD_NAME, null, node.getLineno(), node.getCharno());
            } else {
                return node;
            }
        }

        private boolean isIdentityFunction(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node argList = functionNode.getFirstChild().getNext();
            com.google.javascript.rhino.Node paramNode = argList.getFirstChild();
            if (paramNode == null) {
                return false;
            }
            com.google.javascript.rhino.Node value = maybeGetSingleReturnRValue(functionNode);
            if (((value != null) && com.google.javascript.jscomp.NodeUtil.isName(value)) && value.getString().equals(paramNode.getString())) {
                return true;
            }
            return false;
        }
    }

    private static class ReturnConstantReducer extends com.google.javascript.jscomp.FunctionRewriter.SingleReturnStatementReducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_returnArg";

        static final java.lang.String HELPER_SOURCE = ((((((("function " + com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME) + "(") + com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME) + "_value) {") + "  return function() {return ") + com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME) + "_value}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (!com.google.javascript.jscomp.FunctionRewriter.isReduceableFunctionExpression(node)) {
                return node;
            }
            com.google.javascript.rhino.Node valueNode = getValueNode(node);
            if (valueNode != null) {
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME, valueNode, node.getLineno(), node.getCharno());
            } else {
                return node;
            }
        }

        private com.google.javascript.rhino.Node getValueNode(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node value = maybeGetSingleReturnRValue(functionNode);
            if ((value != null) && com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                return value;
            }
            return null;
        }
    }

    private static class GetterReducer extends com.google.javascript.jscomp.FunctionRewriter.SingleReturnStatementReducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_get";

        static final java.lang.String HELPER_SOURCE = ((((((("function " + com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME) + "(") + com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME) + "_name) {") + "  return function() {return this[") + com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME) + "_name]}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.GetterReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (!com.google.javascript.jscomp.FunctionRewriter.isReduceableFunctionExpression(node)) {
                return node;
            }
            com.google.javascript.rhino.Node propName = getGetPropertyName(node);
            if (propName != null) {
                if (propName.getType() != com.google.javascript.rhino.Token.STRING) {
                    throw new java.lang.IllegalStateException("Expected STRING, got " + com.google.javascript.rhino.Token.name(propName.getType()));
                }
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME, propName, node.getLineno(), node.getCharno());
            } else {
                return node;
            }
        }

        private com.google.javascript.rhino.Node getGetPropertyName(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node value = maybeGetSingleReturnRValue(functionNode);
            if (((value != null) && com.google.javascript.jscomp.NodeUtil.isGetProp(value)) && com.google.javascript.jscomp.NodeUtil.isThis(value.getFirstChild())) {
                return value.getLastChild();
            }
            return null;
        }
    }

    private static class SetterReducer extends com.google.javascript.jscomp.FunctionRewriter.Reducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_set";

        static final java.lang.String HELPER_SOURCE = (((((((((((("function " + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "(") + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "_name) {") + "  return function(") + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "_value) {") + "this[") + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "_name] = ") + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "_value}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.SetterReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (!com.google.javascript.jscomp.FunctionRewriter.isReduceableFunctionExpression(node)) {
                return node;
            }
            com.google.javascript.rhino.Node propName = getSetPropertyName(node);
            if (propName != null) {
                if (propName.getType() != com.google.javascript.rhino.Token.STRING) {
                    throw new java.lang.IllegalStateException("Expected STRING, got " + com.google.javascript.rhino.Token.name(propName.getType()));
                }
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME, propName, node.getLineno(), node.getCharno());
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(30).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("node",node);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("propName",propName);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("com.google.javascript.jscomp.FunctionRewriter.SetterReducer.HELPER_SOURCE",com.google.javascript.jscomp.FunctionRewriter.SetterReducer.HELPER_SOURCE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD",com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME",com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return node;

            }
        }

        private com.google.javascript.rhino.Node getSetPropertyName(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node body = functionNode.getLastChild();
            if (!body.hasOneChild()) {
                return null;
            }
            com.google.javascript.rhino.Node argList = functionNode.getFirstChild().getNext();
            com.google.javascript.rhino.Node paramNode = argList.getFirstChild();
            if (paramNode == null) {
                return null;
            }
            com.google.javascript.rhino.Node statement = body.getFirstChild();
            if (!com.google.javascript.jscomp.NodeUtil.isExprAssign(statement)) {
                return null;
            }
            com.google.javascript.rhino.Node assign = statement.getFirstChild();
            com.google.javascript.rhino.Node lhs = assign.getFirstChild();
            if (com.google.javascript.jscomp.NodeUtil.isGetProp(lhs) && com.google.javascript.jscomp.NodeUtil.isThis(lhs.getFirstChild())) {
                com.google.javascript.rhino.Node rhs = assign.getLastChild();
                if (com.google.javascript.jscomp.NodeUtil.isName(rhs) && rhs.getString().equals(paramNode.getString())) {
                    com.google.javascript.rhino.Node propertyName = lhs.getLastChild();
                    return propertyName;
                }
            }
            return null;
        }
    }
}
[135303] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659823908220
GPR[SSUN]-1659823908220
791463039
GPR[SPVATF]-1659823908432
GPR[EPVATF]-1659823908637
GPR[SPS]-1659823908637
GPR[EPS]-1659823915948
GPR[SPVATF]-1659823915948
GPR[EPVATF]-1659823916183
GPR[SPS]-1659823916183
GPR[EPS]-1659823923528
GPR[ESUN]-1659823923528
GPR[SSUN]-1659823923528
791463039
GPR[ESUN]-1659823923751
GPR[SSUN]-1659823923751
791463039
GPR[ESUN]-1659823923969
GPR[SSUN]-1659823923969
791463039
GPR[SPVATF]-1659823924198
GPR[EPVATF]-1659823924436
GPR[SPS]-1659823924436
[151902] ERROR ConstraintModelBuilder - Unable to compile the change: 
class FunctionRewriter implements com.google.javascript.jscomp.CompilerPass {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private static final int SAVINGS_THRESHOLD = 16;

    FunctionRewriter(com.google.javascript.jscomp.AbstractCompiler compiler) {
        this.compiler = compiler;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        java.util.List<com.google.javascript.jscomp.FunctionRewriter.Reducer> reducers = com.google.common.collect.ImmutableList.of(new com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer(), new com.google.javascript.jscomp.FunctionRewriter.GetterReducer(), new com.google.javascript.jscomp.FunctionRewriter.SetterReducer(), new com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer(), new com.google.javascript.jscomp.FunctionRewriter.IdentityReducer());
        com.google.common.collect.Multimap<com.google.javascript.jscomp.FunctionRewriter.Reducer, com.google.javascript.jscomp.FunctionRewriter.Reduction> reductionMap = com.google.common.collect.HashMultimap.create();
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, new com.google.javascript.jscomp.FunctionRewriter.ReductionGatherer(reducers, reductionMap));
        for (com.google.javascript.jscomp.FunctionRewriter.Reducer reducer : reducers) {
            java.util.Collection<com.google.javascript.jscomp.FunctionRewriter.Reduction> reductions = reductionMap.get(reducer);
            if (reductions.isEmpty()) {
                continue;
            }
            com.google.javascript.rhino.Node helperCode = parseHelperCode(reducer);
            if (helperCode == null) {
                continue;
            }
            int helperCodeCost = com.google.javascript.jscomp.InlineCostEstimator.getCost(helperCode);
            int savings = 0;
            for (com.google.javascript.jscomp.FunctionRewriter.Reduction reduction : reductions) {
                savings += reduction.estimateSavings();
            }
            if (savings > (helperCodeCost + com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD)) {
                for (com.google.javascript.jscomp.FunctionRewriter.Reduction reduction : reductions) {
                    reduction.apply();
                }
                com.google.javascript.rhino.Node addingRoot = compiler.getNodeForCodeInsertion(null);
                addingRoot.addChildrenToFront(helperCode);
                compiler.reportCodeChange();
            }
        }
    }

    public com.google.javascript.rhino.Node parseHelperCode(com.google.javascript.jscomp.FunctionRewriter.Reducer reducer) {
        com.google.javascript.rhino.Node root = compiler.parseSyntheticCode(reducer.getClass().toString() + ":helper", reducer.getHelperSource());
        return root != null ? root.removeFirstChild() : null;
    }

    private static boolean isReduceableFunctionExpression(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n);
    }

    private class Reduction {
        private final com.google.javascript.rhino.Node parent;

        private final com.google.javascript.rhino.Node oldChild;

        private final com.google.javascript.rhino.Node newChild;

        Reduction(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node oldChild, com.google.javascript.rhino.Node newChild) {
            this.parent = parent;
            this.oldChild = oldChild;
            this.newChild = newChild;
        }

        void apply() {
            parent.replaceChild(oldChild, newChild);
            compiler.reportCodeChange();
        }

        int estimateSavings() {
            return com.google.javascript.jscomp.InlineCostEstimator.getCost(oldChild) - com.google.javascript.jscomp.InlineCostEstimator.getCost(newChild);
        }
    }

    private class ReductionGatherer implements com.google.javascript.jscomp.NodeTraversal.Callback {
        private final java.util.List<com.google.javascript.jscomp.FunctionRewriter.Reducer> reducers;

        private final com.google.common.collect.Multimap<com.google.javascript.jscomp.FunctionRewriter.Reducer, com.google.javascript.jscomp.FunctionRewriter.Reduction> reductions;

        ReductionGatherer(java.util.List<com.google.javascript.jscomp.FunctionRewriter.Reducer> reducers, com.google.common.collect.Multimap<com.google.javascript.jscomp.FunctionRewriter.Reducer, com.google.javascript.jscomp.FunctionRewriter.Reduction> reductions) {
            this.reducers = reducers;
            this.reductions = reductions;
        }

        @java.lang.Override
        public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal raversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
            for (com.google.javascript.jscomp.FunctionRewriter.Reducer reducer : reducers) {
                com.google.javascript.rhino.Node replacement = reducer.reduce(node);
                if (replacement != node) {
                    reductions.put(reducer, new com.google.javascript.jscomp.FunctionRewriter.Reduction(parent, node, replacement));
                    return false;
                }
            }
            return true;
        }

        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal traversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        }
    }

    abstract static class Reducer {
        abstract java.lang.String getHelperSource();

        abstract com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node);

        protected final com.google.javascript.rhino.Node buildCallNode(java.lang.String methodName, com.google.javascript.rhino.Node argumentNode, int lineno, int charno) {
            com.google.javascript.rhino.Node call = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.CALL, lineno, charno);
            call.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, true);
            call.addChildToBack(com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, methodName));
            if (argumentNode != null) {
                call.addChildToBack(argumentNode.cloneTree());
            }
            return call;
        }
    }

    private static class EmptyFunctionReducer extends com.google.javascript.jscomp.FunctionRewriter.Reducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_emptyFn";

        static final java.lang.String HELPER_SOURCE = ((("function " + com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.FACTORY_METHOD_NAME) + "() {") + "  return function() {}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (com.google.javascript.jscomp.NodeUtil.isEmptyFunctionExpression(node)) {
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.FACTORY_METHOD_NAME, null, node.getLineno(), node.getCharno());
            } else {
                return node;
            }
        }
    }

    abstract static class SingleReturnStatementReducer extends com.google.javascript.jscomp.FunctionRewriter.Reducer {
        protected final com.google.javascript.rhino.Node maybeGetSingleReturnRValue(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node body = functionNode.getLastChild();
            if (!body.hasOneChild()) {
                return null;
            }
            com.google.javascript.rhino.Node statement = body.getFirstChild();
            if (statement.getType() == com.google.javascript.rhino.Token.RETURN) {
                return statement.getFirstChild();
            }
            return null;
        }
    }

    private static class IdentityReducer extends com.google.javascript.jscomp.FunctionRewriter.SingleReturnStatementReducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_identityFn";

        static final java.lang.String HELPER_SOURCE = (((((((("function " + com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.FACTORY_METHOD_NAME) + "() {") + "  return function(") + com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.FACTORY_METHOD_NAME) + "_value) {") + "return ") + com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.FACTORY_METHOD_NAME) + "_value}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (!com.google.javascript.jscomp.FunctionRewriter.isReduceableFunctionExpression(node)) {
                return node;
            }
            if (isIdentityFunction(node)) {
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.FACTORY_METHOD_NAME, null, node.getLineno(), node.getCharno());
            } else {
                return node;
            }
        }

        private boolean isIdentityFunction(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node argList = functionNode.getFirstChild().getNext();
            com.google.javascript.rhino.Node paramNode = argList.getFirstChild();
            if (paramNode == null) {
                return false;
            }
            com.google.javascript.rhino.Node value = maybeGetSingleReturnRValue(functionNode);
            if (((value != null) && com.google.javascript.jscomp.NodeUtil.isName(value)) && value.getString().equals(paramNode.getString())) {
                return true;
            }
            return false;
        }
    }

    private static class ReturnConstantReducer extends com.google.javascript.jscomp.FunctionRewriter.SingleReturnStatementReducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_returnArg";

        static final java.lang.String HELPER_SOURCE = ((((((("function " + com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME) + "(") + com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME) + "_value) {") + "  return function() {return ") + com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME) + "_value}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (!com.google.javascript.jscomp.FunctionRewriter.isReduceableFunctionExpression(node)) {
                return node;
            }
            com.google.javascript.rhino.Node valueNode = getValueNode(node);
            if (valueNode != null) {
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME, valueNode, node.getLineno(), node.getCharno());
            } else {
                return node;
            }
        }

        private com.google.javascript.rhino.Node getValueNode(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node value = maybeGetSingleReturnRValue(functionNode);
            if ((value != null) && com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                return value;
            }
            return null;
        }
    }

    private static class GetterReducer extends com.google.javascript.jscomp.FunctionRewriter.SingleReturnStatementReducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_get";

        static final java.lang.String HELPER_SOURCE = ((((((("function " + com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME) + "(") + com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME) + "_name) {") + "  return function() {return this[") + com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME) + "_name]}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.GetterReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (!com.google.javascript.jscomp.FunctionRewriter.isReduceableFunctionExpression(node)) {
                return node;
            }
            com.google.javascript.rhino.Node propName = getGetPropertyName(node);
            if (propName != null) {
                if (propName.getType() != com.google.javascript.rhino.Token.STRING) {
                    throw new java.lang.IllegalStateException("Expected STRING, got " + com.google.javascript.rhino.Token.name(propName.getType()));
                }
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME, propName, node.getLineno(), node.getCharno());
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(33).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("node",node);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("propName",propName);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.jscomp.FunctionRewriter.GetterReducer.HELPER_SOURCE",com.google.javascript.jscomp.FunctionRewriter.GetterReducer.HELPER_SOURCE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD",com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME",com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return node;

            }
        }

        private com.google.javascript.rhino.Node getGetPropertyName(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node value = maybeGetSingleReturnRValue(functionNode);
            if (((value != null) && com.google.javascript.jscomp.NodeUtil.isGetProp(value)) && com.google.javascript.jscomp.NodeUtil.isThis(value.getFirstChild())) {
                return value.getLastChild();
            }
            return null;
        }
    }

    private static class SetterReducer extends com.google.javascript.jscomp.FunctionRewriter.Reducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_set";

        static final java.lang.String HELPER_SOURCE = (((((((((((("function " + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "(") + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "_name) {") + "  return function(") + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "_value) {") + "this[") + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "_name] = ") + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "_value}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.SetterReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (!com.google.javascript.jscomp.FunctionRewriter.isReduceableFunctionExpression(node)) {
                return node;
            }
            com.google.javascript.rhino.Node propName = getSetPropertyName(node);
            if (propName != null) {
                if (propName.getType() != com.google.javascript.rhino.Token.STRING) {
                    throw new java.lang.IllegalStateException("Expected STRING, got " + com.google.javascript.rhino.Token.name(propName.getType()));
                }
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME, propName, node.getLineno(), node.getCharno());
            } else {
                return node;
            }
        }

        private com.google.javascript.rhino.Node getSetPropertyName(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node body = functionNode.getLastChild();
            if (!body.hasOneChild()) {
                return null;
            }
            com.google.javascript.rhino.Node argList = functionNode.getFirstChild().getNext();
            com.google.javascript.rhino.Node paramNode = argList.getFirstChild();
            if (paramNode == null) {
                return null;
            }
            com.google.javascript.rhino.Node statement = body.getFirstChild();
            if (!com.google.javascript.jscomp.NodeUtil.isExprAssign(statement)) {
                return null;
            }
            com.google.javascript.rhino.Node assign = statement.getFirstChild();
            com.google.javascript.rhino.Node lhs = assign.getFirstChild();
            if (com.google.javascript.jscomp.NodeUtil.isGetProp(lhs) && com.google.javascript.jscomp.NodeUtil.isThis(lhs.getFirstChild())) {
                com.google.javascript.rhino.Node rhs = assign.getLastChild();
                if (com.google.javascript.jscomp.NodeUtil.isName(rhs) && rhs.getString().equals(paramNode.getString())) {
                    com.google.javascript.rhino.Node propertyName = lhs.getLastChild();
                    return propertyName;
                }
            }
            return null;
        }
    }
}
[151903] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659823924820
GPR[SSUN]-1659823924820
791463039
GPR[SPVATF]-1659823925062
GPR[EPVATF]-1659823925309
GPR[SPS]-1659823925309
[152907] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$SetterReducer:510.
GPR[EPS]-1659823925824
GPR[SPVATF]-1659823925824
GPR[EPVATF]-1659823926055
GPR[SPS]-1659823926055
[153690] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$SetterReducer:510.
GPR[EPS]-1659823926607
GPR[ESUN]-1659823926607
GPR[SSUN]-1659823926607
791463039
GPR[ESUN]-1659823926837
GPR[SSUN]-1659823926837
791463039
GPR[SPVATF]-1659823927066
GPR[EPVATF]-1659823927319
GPR[SPS]-1659823927319
[154916] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$SetterReducer:488.
GPR[EPS]-1659823927834
GPR[ESUN]-1659823927834
GPR[SSUN]-1659823927834
791463039
GPR[ESUN]-1659823928059
GPR[SSUN]-1659823928059
791463039
GPR[SPVATF]-1659823928291
GPR[EPVATF]-1659823928520
GPR[SPS]-1659823928520
GPR[EPS]-1659823939327
GPR[SPVATF]-1659823939328
GPR[EPVATF]-1659823939557
GPR[SPS]-1659823939557
GPR[EPS]-1659823950348
GPR[ESUN]-1659823950348
GPR[SSUN]-1659823950348
791463039
GPR[ESUN]-1659823950573
GPR[SSUN]-1659823950573
791463039
GPR[SPVATF]-1659823950795
GPR[EPVATF]-1659823951022
GPR[SPS]-1659823951022
GPR[EPS]-1659823959163
GPR[ESUN]-1659823959163
GPR[SSUN]-1659823959163
791463039
GPR[ESUN]-1659823959403
GPR[SSUN]-1659823959403
791463039
GPR[ESUN]-1659823959632
GPR[SSUN]-1659823959632
791463039
GPR[SPVATF]-1659823959847
GPR[EPVATF]-1659823960079
GPR[SPS]-1659823960079
[187541] ERROR ConstraintModelBuilder - Unable to compile the change: 
class FunctionRewriter implements com.google.javascript.jscomp.CompilerPass {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private static final int SAVINGS_THRESHOLD = 16;

    FunctionRewriter(com.google.javascript.jscomp.AbstractCompiler compiler) {
        this.compiler = compiler;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        java.util.List<com.google.javascript.jscomp.FunctionRewriter.Reducer> reducers = com.google.common.collect.ImmutableList.of(new com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer(), new com.google.javascript.jscomp.FunctionRewriter.GetterReducer(), new com.google.javascript.jscomp.FunctionRewriter.SetterReducer(), new com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer(), new com.google.javascript.jscomp.FunctionRewriter.IdentityReducer());
        com.google.common.collect.Multimap<com.google.javascript.jscomp.FunctionRewriter.Reducer, com.google.javascript.jscomp.FunctionRewriter.Reduction> reductionMap = com.google.common.collect.HashMultimap.create();
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, new com.google.javascript.jscomp.FunctionRewriter.ReductionGatherer(reducers, reductionMap));
        for (com.google.javascript.jscomp.FunctionRewriter.Reducer reducer : reducers) {
            java.util.Collection<com.google.javascript.jscomp.FunctionRewriter.Reduction> reductions = reductionMap.get(reducer);
            if (reductions.isEmpty()) {
                continue;
            }
            com.google.javascript.rhino.Node helperCode = parseHelperCode(reducer);
            if (helperCode == null) {
                continue;
            }
            int helperCodeCost = com.google.javascript.jscomp.InlineCostEstimator.getCost(helperCode);
            int savings = 0;
            for (com.google.javascript.jscomp.FunctionRewriter.Reduction reduction : reductions) {
                savings += reduction.estimateSavings();
            }
            if (savings > (helperCodeCost + com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD)) {
                for (com.google.javascript.jscomp.FunctionRewriter.Reduction reduction : reductions) {
                    reduction.apply();
                }
                com.google.javascript.rhino.Node addingRoot = compiler.getNodeForCodeInsertion(null);
                addingRoot.addChildrenToFront(helperCode);
                compiler.reportCodeChange();
            }
        }
    }

    public com.google.javascript.rhino.Node parseHelperCode(com.google.javascript.jscomp.FunctionRewriter.Reducer reducer) {
        com.google.javascript.rhino.Node root = compiler.parseSyntheticCode(reducer.getClass().toString() + ":helper", reducer.getHelperSource());
        return root != null ? root.removeFirstChild() : null;
    }

    private static boolean isReduceableFunctionExpression(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n);
    }

    private class Reduction {
        private final com.google.javascript.rhino.Node parent;

        private final com.google.javascript.rhino.Node oldChild;

        private final com.google.javascript.rhino.Node newChild;

        Reduction(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node oldChild, com.google.javascript.rhino.Node newChild) {
            this.parent = parent;
            this.oldChild = oldChild;
            this.newChild = newChild;
        }

        void apply() {
            parent.replaceChild(oldChild, newChild);
            compiler.reportCodeChange();
        }

        int estimateSavings() {
            return com.google.javascript.jscomp.InlineCostEstimator.getCost(oldChild) - com.google.javascript.jscomp.InlineCostEstimator.getCost(newChild);
        }
    }

    private class ReductionGatherer implements com.google.javascript.jscomp.NodeTraversal.Callback {
        private final java.util.List<com.google.javascript.jscomp.FunctionRewriter.Reducer> reducers;

        private final com.google.common.collect.Multimap<com.google.javascript.jscomp.FunctionRewriter.Reducer, com.google.javascript.jscomp.FunctionRewriter.Reduction> reductions;

        ReductionGatherer(java.util.List<com.google.javascript.jscomp.FunctionRewriter.Reducer> reducers, com.google.common.collect.Multimap<com.google.javascript.jscomp.FunctionRewriter.Reducer, com.google.javascript.jscomp.FunctionRewriter.Reduction> reductions) {
            this.reducers = reducers;
            this.reductions = reductions;
        }

        @java.lang.Override
        public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal raversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
            for (com.google.javascript.jscomp.FunctionRewriter.Reducer reducer : reducers) {
                com.google.javascript.rhino.Node replacement = reducer.reduce(node);
                if (replacement != node) {
                    reductions.put(reducer, new com.google.javascript.jscomp.FunctionRewriter.Reduction(parent, node, replacement));
                    return false;
                }
            }
            return true;
        }

        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal traversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        }
    }

    abstract static class Reducer {
        abstract java.lang.String getHelperSource();

        abstract com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node);

        protected final com.google.javascript.rhino.Node buildCallNode(java.lang.String methodName, com.google.javascript.rhino.Node argumentNode, int lineno, int charno) {
            com.google.javascript.rhino.Node call = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.CALL, lineno, charno);
            call.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, true);
            call.addChildToBack(com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, methodName));
            if (argumentNode != null) {
                call.addChildToBack(argumentNode.cloneTree());
            }
            return call;
        }
    }

    private static class EmptyFunctionReducer extends com.google.javascript.jscomp.FunctionRewriter.Reducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_emptyFn";

        static final java.lang.String HELPER_SOURCE = ((("function " + com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.FACTORY_METHOD_NAME) + "() {") + "  return function() {}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (com.google.javascript.jscomp.NodeUtil.isEmptyFunctionExpression(node)) {
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.FACTORY_METHOD_NAME, null, node.getLineno(), node.getCharno());
            } else {
                return node;
            }
        }
    }

    abstract static class SingleReturnStatementReducer extends com.google.javascript.jscomp.FunctionRewriter.Reducer {
        protected final com.google.javascript.rhino.Node maybeGetSingleReturnRValue(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node body = functionNode.getLastChild();
            if (!body.hasOneChild()) {
                return null;
            }
            com.google.javascript.rhino.Node statement = body.getFirstChild();
            if (statement.getType() == com.google.javascript.rhino.Token.RETURN) {
                return statement.getFirstChild();
            }
            return null;
        }
    }

    private static class IdentityReducer extends com.google.javascript.jscomp.FunctionRewriter.SingleReturnStatementReducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_identityFn";

        static final java.lang.String HELPER_SOURCE = (((((((("function " + com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.FACTORY_METHOD_NAME) + "() {") + "  return function(") + com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.FACTORY_METHOD_NAME) + "_value) {") + "return ") + com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.FACTORY_METHOD_NAME) + "_value}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (!com.google.javascript.jscomp.FunctionRewriter.isReduceableFunctionExpression(node)) {
                return node;
            }
            if (isIdentityFunction(node)) {
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.FACTORY_METHOD_NAME, null, node.getLineno(), node.getCharno());
            } else {
                return node;
            }
        }

        private boolean isIdentityFunction(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node argList = functionNode.getFirstChild().getNext();
            com.google.javascript.rhino.Node paramNode = argList.getFirstChild();
            if (paramNode == null) {
                return false;
            }
            com.google.javascript.rhino.Node value = maybeGetSingleReturnRValue(functionNode);
            if (((value != null) && com.google.javascript.jscomp.NodeUtil.isName(value)) && value.getString().equals(paramNode.getString())) {
                return true;
            }
            return false;
        }
    }

    private static class ReturnConstantReducer extends com.google.javascript.jscomp.FunctionRewriter.SingleReturnStatementReducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_returnArg";

        static final java.lang.String HELPER_SOURCE = ((((((("function " + com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME) + "(") + com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME) + "_value) {") + "  return function() {return ") + com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME) + "_value}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (!com.google.javascript.jscomp.FunctionRewriter.isReduceableFunctionExpression(node)) {
                return node;
            }
            com.google.javascript.rhino.Node valueNode = getValueNode(node);
            if (valueNode != null) {
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME, valueNode, node.getLineno(), node.getCharno());
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(40).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("node",node);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("valueNode",valueNode);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.HELPER_SOURCE",com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.HELPER_SOURCE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME",com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD",com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return node;

            }
        }

        private com.google.javascript.rhino.Node getValueNode(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node value = maybeGetSingleReturnRValue(functionNode);
            if ((value != null) && com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                return value;
            }
            return null;
        }
    }

    private static class GetterReducer extends com.google.javascript.jscomp.FunctionRewriter.SingleReturnStatementReducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_get";

        static final java.lang.String HELPER_SOURCE = ((((((("function " + com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME) + "(") + com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME) + "_name) {") + "  return function() {return this[") + com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME) + "_name]}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.GetterReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (!com.google.javascript.jscomp.FunctionRewriter.isReduceableFunctionExpression(node)) {
                return node;
            }
            com.google.javascript.rhino.Node propName = getGetPropertyName(node);
            if (propName != null) {
                if (propName.getType() != com.google.javascript.rhino.Token.STRING) {
                    throw new java.lang.IllegalStateException("Expected STRING, got " + com.google.javascript.rhino.Token.name(propName.getType()));
                }
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME, propName, node.getLineno(), node.getCharno());
            } else {
                return node;
            }
        }

        private com.google.javascript.rhino.Node getGetPropertyName(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node value = maybeGetSingleReturnRValue(functionNode);
            if (((value != null) && com.google.javascript.jscomp.NodeUtil.isGetProp(value)) && com.google.javascript.jscomp.NodeUtil.isThis(value.getFirstChild())) {
                return value.getLastChild();
            }
            return null;
        }
    }

    private static class SetterReducer extends com.google.javascript.jscomp.FunctionRewriter.Reducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_set";

        static final java.lang.String HELPER_SOURCE = (((((((((((("function " + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "(") + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "_name) {") + "  return function(") + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "_value) {") + "this[") + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "_name] = ") + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "_value}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.SetterReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (!com.google.javascript.jscomp.FunctionRewriter.isReduceableFunctionExpression(node)) {
                return node;
            }
            com.google.javascript.rhino.Node propName = getSetPropertyName(node);
            if (propName != null) {
                if (propName.getType() != com.google.javascript.rhino.Token.STRING) {
                    throw new java.lang.IllegalStateException("Expected STRING, got " + com.google.javascript.rhino.Token.name(propName.getType()));
                }
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME, propName, node.getLineno(), node.getCharno());
            } else {
                return node;
            }
        }

        private com.google.javascript.rhino.Node getSetPropertyName(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node body = functionNode.getLastChild();
            if (!body.hasOneChild()) {
                return null;
            }
            com.google.javascript.rhino.Node argList = functionNode.getFirstChild().getNext();
            com.google.javascript.rhino.Node paramNode = argList.getFirstChild();
            if (paramNode == null) {
                return null;
            }
            com.google.javascript.rhino.Node statement = body.getFirstChild();
            if (!com.google.javascript.jscomp.NodeUtil.isExprAssign(statement)) {
                return null;
            }
            com.google.javascript.rhino.Node assign = statement.getFirstChild();
            com.google.javascript.rhino.Node lhs = assign.getFirstChild();
            if (com.google.javascript.jscomp.NodeUtil.isGetProp(lhs) && com.google.javascript.jscomp.NodeUtil.isThis(lhs.getFirstChild())) {
                com.google.javascript.rhino.Node rhs = assign.getLastChild();
                if (com.google.javascript.jscomp.NodeUtil.isName(rhs) && rhs.getString().equals(paramNode.getString())) {
                    com.google.javascript.rhino.Node propertyName = lhs.getLastChild();
                    return propertyName;
                }
            }
            return null;
        }
    }
}
[187541] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659823960458
GPR[SSUN]-1659823960458
791463039
GPR[SPVATF]-1659823960698
GPR[EPVATF]-1659823960926
GPR[SPS]-1659823960926
[188522] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$SingleReturnStatementReducer:271.
GPR[EPS]-1659823961439
GPR[SPVATF]-1659823961439
GPR[EPVATF]-1659823961660
GPR[SPS]-1659823961660
GPR[EPS]-1659823967462
GPR[ESUN]-1659823967462
GPR[SSUN]-1659823967462
791463039
GPR[ESUN]-1659823967694
GPR[SSUN]-1659823967694
791463039
GPR[SPVATF]-1659823967926
GPR[EPVATF]-1659823968163
GPR[SPS]-1659823968163
[195758] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$ReturnConstantReducer:389.
GPR[EPS]-1659823968675
GPR[SPVATF]-1659823968675
GPR[EPVATF]-1659823968903
GPR[SPS]-1659823968903
[196478] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$ReturnConstantReducer:389.
GPR[EPS]-1659823969395
GPR[ESUN]-1659823969395
GPR[SSUN]-1659823969395
791463039
GPR[ESUN]-1659823969619
GPR[SSUN]-1659823969619
791463039
GPR[SPVATF]-1659823969851
GPR[EPVATF]-1659823970073
GPR[SPS]-1659823970074
[197703] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$ReturnConstantReducer:372.
GPR[EPS]-1659823970620
GPR[ESUN]-1659823970620
GPR[SSUN]-1659823970620
791463039
GPR[ESUN]-1659823970844
GPR[SSUN]-1659823970844
170294779
GPR[ESUN]-1659823971041
GPR[SSUN]-1659823971041
-132053243
GPR[ESUN]-1659823971252
GPR[SSUN]-1659823971252
-132053243
GPR[SPVATF]-1659823971455
GPR[EPVATF]-1659823971475
[198558] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659823971475
GPR[EPVATF]-1659823971490
[198573] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823971490
GPR[SSUN]-1659823971490
-132053243
GPR[ESUN]-1659823971696
GPR[SSUN]-1659823971696
-132053243
GPR[SPVATF]-1659823971894
GPR[EPVATF]-1659823971913
[198996] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823971913
GPR[SSUN]-1659823971913
-132053243
GPR[SPVATF]-1659823972115
GPR[EPVATF]-1659823972134
[199217] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823972135
GPR[SSUN]-1659823972135
-132053243
GPR[SPVATF]-1659823972329
GPR[EPVATF]-1659823972348
[199431] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823972348
GPR[SSUN]-1659823972348
-132053243
GPR[SPVATF]-1659823972556
GPR[EPVATF]-1659823972575
[199658] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823972575
GPR[SSUN]-1659823972575
-132053243
GPR[ESUN]-1659823972775
GPR[SSUN]-1659823972775
791463039
GPR[ESUN]-1659823973007
GPR[SSUN]-1659823973007
791463039
GPR[ESUN]-1659823973238
GPR[SSUN]-1659823973238
791463039
GPR[SPVATF]-1659823973450
GPR[EPVATF]-1659823973684
GPR[SPS]-1659823973684
[201296] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter:75.
GPR[EPS]-1659823974213
GPR[ESUN]-1659823974213
GPR[SSUN]-1659823974213
791463039
GPR[SPVATF]-1659823974424
GPR[EPVATF]-1659823974658
GPR[SPS]-1659823974658
[202265] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter:74.
GPR[EPS]-1659823975183
GPR[SPVATF]-1659823975183
GPR[EPVATF]-1659823975377
GPR[SPS]-1659823975377
GPR[EPS]-1659823976756
GPR[SPVATR]-1659823976756
[203839] INFO TestPatch - Applying patch: com.google.javascript.jscomp.FunctionRewriter:74: CONDITIONAL ((!(1 < reductions.size())) || (reducers.size() <= reductions.size())) && ((reducers.size()) != (reductions.size()))
[204141] INFO TestPatch - Running test suite to check the patch "((!(1 < reductions.size())) || (reducers.size() <= reductions.size())) && ((reducers.size()) != (reductions.size()))" is working
GPR[EPVATR]-1659823977507
[204590] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659823977507
[204592] INFO NoPol - --- a/src/com/google/javascript/jscomp/FunctionRewriter.java
+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java
@@ -73,3 +73,3 @@
       Collection<Reduction> reductions = reductionMap.get(reducer);
-      if (reductions.isEmpty()) {
+      if (((!(1 < reductions.size())) || (reducers.size() <= reductions.size())) && ((reducers.size()) != (reductions.size()))) {
         continue;

Saving patch at /experiment_home///results/Nopol/Closure/55/seed_260/patch_199848_6ts_1659823977509.diff
GPR[ESUN]-1659823977510
GPR[SSUN]-1659823977510
791463039
GPR[ESUN]-1659823977711
GPR[SSUN]-1659823977711
791463039
GPR[SPVATF]-1659823977907
GPR[EPVATF]-1659823978108
GPR[SPS]-1659823978108
GPR[EPS]-1659823993950
GPR[ESUN]-1659823993950
GPR[SSUN]-1659823993950
791463039
GPR[SPVATF]-1659823994215
GPR[EPVATF]-1659823994420
GPR[SPS]-1659823994420
GPR[EPS]-1659824010252
GPR[ESUN]-1659824010253
GPR[SSUN]-1659824010253
791463039
GPR[ESUN]-1659824010480
GPR[SSUN]-1659824010480
791463039
GPR[ESUN]-1659824010701
GPR[SSUN]-1659824010701
791463039
GPR[SPVATF]-1659824010927
GPR[EPVATF]-1659824011162
GPR[SPS]-1659824011162
[238804] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$IdentityReducer:308.
GPR[EPS]-1659824011721
GPR[ESUN]-1659824011721
GPR[SSUN]-1659824011721
791463039
GPR[SPVATF]-1659824011954
GPR[EPVATF]-1659824012196
GPR[SPS]-1659824012196
[239782] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$IdentityReducer:307.
GPR[EPS]-1659824012699
GPR[SPVATF]-1659824012699
GPR[EPVATF]-1659824012926
GPR[SPS]-1659824012926
[240772] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$IdentityReducer:307.
GPR[EPS]-1659824013689
GPR[ESUN]-1659824013689
GPR[SSUN]-1659824013689
791463039
GPR[SPVATF]-1659824013908
GPR[EPVATF]-1659824014147
GPR[SPS]-1659824014147
[241718] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$GetterReducer:422.
GPR[EPS]-1659824014636
GPR[ESUN]-1659824014636
GPR[SSUN]-1659824014636
791463039
GPR[SPVATF]-1659824014863
GPR[EPVATF]-1659824015101
GPR[SPS]-1659824015101
[242696] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$GetterReducer:421.
GPR[EPS]-1659824015613
GPR[SPVATF]-1659824015613
GPR[EPVATF]-1659824015854
GPR[SPS]-1659824015854
GPR[EPS]-1659824023291
GPR[ESUN]-1659824023291
GPR[SSUN]-1659824023291
791463039
GPR[SPVATF]-1659824023526
GPR[EPVATF]-1659824023761
GPR[SPS]-1659824023761
[251213] ERROR ConstraintModelBuilder - Unable to compile the change: 
class FunctionRewriter implements com.google.javascript.jscomp.CompilerPass {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private static final int SAVINGS_THRESHOLD = 16;

    FunctionRewriter(com.google.javascript.jscomp.AbstractCompiler compiler) {
        this.compiler = compiler;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        java.util.List<com.google.javascript.jscomp.FunctionRewriter.Reducer> reducers = com.google.common.collect.ImmutableList.of(new com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer(), new com.google.javascript.jscomp.FunctionRewriter.GetterReducer(), new com.google.javascript.jscomp.FunctionRewriter.SetterReducer(), new com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer(), new com.google.javascript.jscomp.FunctionRewriter.IdentityReducer());
        com.google.common.collect.Multimap<com.google.javascript.jscomp.FunctionRewriter.Reducer, com.google.javascript.jscomp.FunctionRewriter.Reduction> reductionMap = com.google.common.collect.HashMultimap.create();
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, new com.google.javascript.jscomp.FunctionRewriter.ReductionGatherer(reducers, reductionMap));
        for (com.google.javascript.jscomp.FunctionRewriter.Reducer reducer : reducers) {
            java.util.Collection<com.google.javascript.jscomp.FunctionRewriter.Reduction> reductions = reductionMap.get(reducer);
            if (reductions.isEmpty()) {
                continue;
            }
            com.google.javascript.rhino.Node helperCode = parseHelperCode(reducer);
            if (helperCode == null) {
                continue;
            }
            int helperCodeCost = com.google.javascript.jscomp.InlineCostEstimator.getCost(helperCode);
            int savings = 0;
            for (com.google.javascript.jscomp.FunctionRewriter.Reduction reduction : reductions) {
                savings += reduction.estimateSavings();
            }
            if (savings > (helperCodeCost + com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD)) {
                for (com.google.javascript.jscomp.FunctionRewriter.Reduction reduction : reductions) {
                    reduction.apply();
                }
                com.google.javascript.rhino.Node addingRoot = compiler.getNodeForCodeInsertion(null);
                addingRoot.addChildrenToFront(helperCode);
                compiler.reportCodeChange();
            }
        }
    }

    public com.google.javascript.rhino.Node parseHelperCode(com.google.javascript.jscomp.FunctionRewriter.Reducer reducer) {
        com.google.javascript.rhino.Node root = compiler.parseSyntheticCode(reducer.getClass().toString() + ":helper", reducer.getHelperSource());
        return root != null ? root.removeFirstChild() : null;
    }

    private static boolean isReduceableFunctionExpression(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n);
    }

    private class Reduction {
        private final com.google.javascript.rhino.Node parent;

        private final com.google.javascript.rhino.Node oldChild;

        private final com.google.javascript.rhino.Node newChild;

        Reduction(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node oldChild, com.google.javascript.rhino.Node newChild) {
            this.parent = parent;
            this.oldChild = oldChild;
            this.newChild = newChild;
        }

        void apply() {
            parent.replaceChild(oldChild, newChild);
            compiler.reportCodeChange();
        }

        int estimateSavings() {
            return com.google.javascript.jscomp.InlineCostEstimator.getCost(oldChild) - com.google.javascript.jscomp.InlineCostEstimator.getCost(newChild);
        }
    }

    private class ReductionGatherer implements com.google.javascript.jscomp.NodeTraversal.Callback {
        private final java.util.List<com.google.javascript.jscomp.FunctionRewriter.Reducer> reducers;

        private final com.google.common.collect.Multimap<com.google.javascript.jscomp.FunctionRewriter.Reducer, com.google.javascript.jscomp.FunctionRewriter.Reduction> reductions;

        ReductionGatherer(java.util.List<com.google.javascript.jscomp.FunctionRewriter.Reducer> reducers, com.google.common.collect.Multimap<com.google.javascript.jscomp.FunctionRewriter.Reducer, com.google.javascript.jscomp.FunctionRewriter.Reduction> reductions) {
            this.reducers = reducers;
            this.reductions = reductions;
        }

        @java.lang.Override
        public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal raversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
            for (com.google.javascript.jscomp.FunctionRewriter.Reducer reducer : reducers) {
                com.google.javascript.rhino.Node replacement = reducer.reduce(node);
                if (replacement != node) {
                    reductions.put(reducer, new com.google.javascript.jscomp.FunctionRewriter.Reduction(parent, node, replacement));
                    return false;
                }
            }
            return true;
        }

        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal traversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        }
    }

    abstract static class Reducer {
        abstract java.lang.String getHelperSource();

        abstract com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node);

        protected final com.google.javascript.rhino.Node buildCallNode(java.lang.String methodName, com.google.javascript.rhino.Node argumentNode, int lineno, int charno) {
            com.google.javascript.rhino.Node call = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.CALL, lineno, charno);
            call.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, true);
            call.addChildToBack(com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, methodName));
            if (argumentNode != null) {
                call.addChildToBack(argumentNode.cloneTree());
            }
            return call;
        }
    }

    private static class EmptyFunctionReducer extends com.google.javascript.jscomp.FunctionRewriter.Reducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_emptyFn";

        static final java.lang.String HELPER_SOURCE = ((("function " + com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.FACTORY_METHOD_NAME) + "() {") + "  return function() {}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (com.google.javascript.jscomp.NodeUtil.isEmptyFunctionExpression(node)) {
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.FACTORY_METHOD_NAME, null, node.getLineno(), node.getCharno());
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(57).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(57).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(57).collectInput("com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.HELPER_SOURCE",com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.HELPER_SOURCE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(57).collectInput("node",node);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(57).collectInput("com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD",com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(57).collectInput("com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.FACTORY_METHOD_NAME",com.google.javascript.jscomp.FunctionRewriter.EmptyFunctionReducer.FACTORY_METHOD_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(57).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(57).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return node;

            }
        }
    }

    abstract static class SingleReturnStatementReducer extends com.google.javascript.jscomp.FunctionRewriter.Reducer {
        protected final com.google.javascript.rhino.Node maybeGetSingleReturnRValue(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node body = functionNode.getLastChild();
            if (!body.hasOneChild()) {
                return null;
            }
            com.google.javascript.rhino.Node statement = body.getFirstChild();
            if (statement.getType() == com.google.javascript.rhino.Token.RETURN) {
                return statement.getFirstChild();
            }
            return null;
        }
    }

    private static class IdentityReducer extends com.google.javascript.jscomp.FunctionRewriter.SingleReturnStatementReducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_identityFn";

        static final java.lang.String HELPER_SOURCE = (((((((("function " + com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.FACTORY_METHOD_NAME) + "() {") + "  return function(") + com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.FACTORY_METHOD_NAME) + "_value) {") + "return ") + com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.FACTORY_METHOD_NAME) + "_value}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (!com.google.javascript.jscomp.FunctionRewriter.isReduceableFunctionExpression(node)) {
                return node;
            }
            if (isIdentityFunction(node)) {
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.IdentityReducer.FACTORY_METHOD_NAME, null, node.getLineno(), node.getCharno());
            } else {
                return node;
            }
        }

        private boolean isIdentityFunction(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node argList = functionNode.getFirstChild().getNext();
            com.google.javascript.rhino.Node paramNode = argList.getFirstChild();
            if (paramNode == null) {
                return false;
            }
            com.google.javascript.rhino.Node value = maybeGetSingleReturnRValue(functionNode);
            if (((value != null) && com.google.javascript.jscomp.NodeUtil.isName(value)) && value.getString().equals(paramNode.getString())) {
                return true;
            }
            return false;
        }
    }

    private static class ReturnConstantReducer extends com.google.javascript.jscomp.FunctionRewriter.SingleReturnStatementReducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_returnArg";

        static final java.lang.String HELPER_SOURCE = ((((((("function " + com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME) + "(") + com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME) + "_value) {") + "  return function() {return ") + com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME) + "_value}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (!com.google.javascript.jscomp.FunctionRewriter.isReduceableFunctionExpression(node)) {
                return node;
            }
            com.google.javascript.rhino.Node valueNode = getValueNode(node);
            if (valueNode != null) {
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.ReturnConstantReducer.FACTORY_METHOD_NAME, valueNode, node.getLineno(), node.getCharno());
            } else {
                return node;
            }
        }

        private com.google.javascript.rhino.Node getValueNode(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node value = maybeGetSingleReturnRValue(functionNode);
            if ((value != null) && com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                return value;
            }
            return null;
        }
    }

    private static class GetterReducer extends com.google.javascript.jscomp.FunctionRewriter.SingleReturnStatementReducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_get";

        static final java.lang.String HELPER_SOURCE = ((((((("function " + com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME) + "(") + com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME) + "_name) {") + "  return function() {return this[") + com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME) + "_name]}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.GetterReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (!com.google.javascript.jscomp.FunctionRewriter.isReduceableFunctionExpression(node)) {
                return node;
            }
            com.google.javascript.rhino.Node propName = getGetPropertyName(node);
            if (propName != null) {
                if (propName.getType() != com.google.javascript.rhino.Token.STRING) {
                    throw new java.lang.IllegalStateException("Expected STRING, got " + com.google.javascript.rhino.Token.name(propName.getType()));
                }
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.GetterReducer.FACTORY_METHOD_NAME, propName, node.getLineno(), node.getCharno());
            } else {
                return node;
            }
        }

        private com.google.javascript.rhino.Node getGetPropertyName(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node value = maybeGetSingleReturnRValue(functionNode);
            if (((value != null) && com.google.javascript.jscomp.NodeUtil.isGetProp(value)) && com.google.javascript.jscomp.NodeUtil.isThis(value.getFirstChild())) {
                return value.getLastChild();
            }
            return null;
        }
    }

    private static class SetterReducer extends com.google.javascript.jscomp.FunctionRewriter.Reducer {
        static final java.lang.String FACTORY_METHOD_NAME = "JSCompiler_set";

        static final java.lang.String HELPER_SOURCE = (((((((((((("function " + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "(") + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "_name) {") + "  return function(") + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "_value) {") + "this[") + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "_name] = ") + com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME) + "_value}") + "}";

        @java.lang.Override
        public java.lang.String getHelperSource() {
            return com.google.javascript.jscomp.FunctionRewriter.SetterReducer.HELPER_SOURCE;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node reduce(com.google.javascript.rhino.Node node) {
            if (!com.google.javascript.jscomp.FunctionRewriter.isReduceableFunctionExpression(node)) {
                return node;
            }
            com.google.javascript.rhino.Node propName = getSetPropertyName(node);
            if (propName != null) {
                if (propName.getType() != com.google.javascript.rhino.Token.STRING) {
                    throw new java.lang.IllegalStateException("Expected STRING, got " + com.google.javascript.rhino.Token.name(propName.getType()));
                }
                return buildCallNode(com.google.javascript.jscomp.FunctionRewriter.SetterReducer.FACTORY_METHOD_NAME, propName, node.getLineno(), node.getCharno());
            } else {
                return node;
            }
        }

        private com.google.javascript.rhino.Node getSetPropertyName(com.google.javascript.rhino.Node functionNode) {
            com.google.javascript.rhino.Node body = functionNode.getLastChild();
            if (!body.hasOneChild()) {
                return null;
            }
            com.google.javascript.rhino.Node argList = functionNode.getFirstChild().getNext();
            com.google.javascript.rhino.Node paramNode = argList.getFirstChild();
            if (paramNode == null) {
                return null;
            }
            com.google.javascript.rhino.Node statement = body.getFirstChild();
            if (!com.google.javascript.jscomp.NodeUtil.isExprAssign(statement)) {
                return null;
            }
            com.google.javascript.rhino.Node assign = statement.getFirstChild();
            com.google.javascript.rhino.Node lhs = assign.getFirstChild();
            if (com.google.javascript.jscomp.NodeUtil.isGetProp(lhs) && com.google.javascript.jscomp.NodeUtil.isThis(lhs.getFirstChild())) {
                com.google.javascript.rhino.Node rhs = assign.getLastChild();
                if (com.google.javascript.jscomp.NodeUtil.isName(rhs) && rhs.getString().equals(paramNode.getString())) {
                    com.google.javascript.rhino.Node propertyName = lhs.getLastChild();
                    return propertyName;
                }
            }
            return null;
        }
    }
}
[251214] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659824024131
GPR[SSUN]-1659824024131
791463039
GPR[SPVATF]-1659824024344
GPR[EPVATF]-1659824024583
GPR[SPS]-1659824024583
[252190] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$EmptyFunctionReducer:250.
GPR[EPS]-1659824025107
GPR[ESUN]-1659824025107
GPR[SSUN]-1659824025107
1187751237
GPR[ESUN]-1659824025405
GPR[SSUN]-1659824025406
791463039
GPR[SPVATF]-1659824025638
GPR[EPVATF]-1659824026548
GPR[SPS]-1659824026548
[254128] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$SetterReducer:484.
GPR[EPS]-1659824027045
GPR[ESUN]-1659824027045
GPR[SSUN]-1659824027045
791463039
GPR[SPVATF]-1659824027271
GPR[EPVATF]-1659824027494
GPR[SPS]-1659824027494
[255185] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$SetterReducer:483.
GPR[EPS]-1659824028102
GPR[SPVATF]-1659824028103
GPR[EPVATF]-1659824028333
GPR[SPS]-1659824028333
[255896] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$SetterReducer:483.
GPR[EPS]-1659824028813
GPR[ESUN]-1659824028813
GPR[SSUN]-1659824028813
791463039
GPR[ESUN]-1659824029009
GPR[SSUN]-1659824029009
791463039
GPR[ESUN]-1659824029207
GPR[SSUN]-1659824029207
791463039
GPR[ESUN]-1659824029405
GPR[SSUN]-1659824029405
791463039
GPR[SPVATF]-1659824029597
GPR[EPVATF]-1659824029801
GPR[SPS]-1659824029801
GPR[EPS]-1659824052026
GPR[SPVATF]-1659824052026
GPR[EPVATF]-1659824052261
GPR[SPS]-1659824052261
GPR[EPS]-1659824090943
GPR[ESUN]-1659824090943
GPR[SSUN]-1659824090943
791463039
GPR[ESUN]-1659824091453
GPR[SSUN]-1659824091453
791463039
GPR[SPVATF]-1659824091678
GPR[EPVATF]-1659824091894
GPR[SPS]-1659824091894
GPR[EPS]-1659824099987
GPR[ESUN]-1659824099987
GPR[SSUN]-1659824099987
791463039
GPR[SPVATF]-1659824100213
GPR[EPVATF]-1659824100441
GPR[SPS]-1659824100441
[328011] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$ReturnConstantReducer:368.
GPR[EPS]-1659824100928
GPR[ESUN]-1659824100928
GPR[SSUN]-1659824100928
791463039
GPR[SPVATF]-1659824101143
GPR[EPVATF]-1659824101371
GPR[SPS]-1659824101371
[328970] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$ReturnConstantReducer:367.
GPR[EPS]-1659824101887
GPR[SPVATF]-1659824101887
GPR[EPVATF]-1659824102117
GPR[SPS]-1659824102117
[329701] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$ReturnConstantReducer:367.
GPR[EPS]-1659824102618
GPR[ESUN]-1659824102618
GPR[SSUN]-1659824102618
-1966087783
GPR[ESUN]-1659824102856
GPR[SSUN]-1659824102856
-1966087783
GPR[SPVATF]-1659824103058
GPR[EPVATF]-1659824103078
[330161] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659824103078
GPR[EPVATF]-1659824103098
[330181] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659824103098
GPR[SSUN]-1659824103098
-1966087783
GPR[SPVATF]-1659824103294
GPR[EPVATF]-1659824103315
[330398] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659824103315
GPR[SSUN]-1659824103315
2433571
GPR[ESUN]-1659824103558
GPR[SSUN]-1659824103558
-1966087783
GPR[ESUN]-1659824103755
GPR[SSUN]-1659824103755
-1966087783
GPR[SPVATF]-1659824103970
GPR[EPVATF]-1659824103992
[331075] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659824103993
GPR[EPVATF]-1659824104013
[331096] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659824104013
GPR[SSUN]-1659824104013
-1117079791
GPR[ESUN]-1659824104222
GPR[SSUN]-1659824104223
-1117079791
GPR[SPVATF]-1659824104428
GPR[EPVATF]-1659824104671
GPR[SPS]-1659824104671
[332231] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:702.
GPR[EPS]-1659824105148
GPR[SPVATF]-1659824105148
GPR[EPVATF]-1659824105374
GPR[SPS]-1659824105374
[332917] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:702.
GPR[EPS]-1659824105834
GPR[ESUN]-1659824105834
GPR[SSUN]-1659824105835
-1117079791
GPR[ESUN]-1659824106058
GPR[SSUN]-1659824106058
-1117079791
GPR[SPVATF]-1659824106266
GPR[EPVATF]-1659824106505
GPR[SPS]-1659824106505
[334026] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:698.
GPR[EPS]-1659824106943
GPR[SPVATF]-1659824106943
GPR[EPVATF]-1659824107171
GPR[SPS]-1659824107171
[334710] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:698.
GPR[EPS]-1659824107627
GPR[ESUN]-1659824107627
GPR[SSUN]-1659824107627
-1117079791
GPR[SPVATF]-1659824107831
GPR[EPVATF]-1659824108064
GPR[SPS]-1659824108064
[335625] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:696.
GPR[EPS]-1659824108542
GPR[ESUN]-1659824108542
GPR[SSUN]-1659824108542
-1117079791
GPR[ESUN]-1659824108742
GPR[SSUN]-1659824108742
-1117079791
GPR[SPVATF]-1659824108949
GPR[EPVATF]-1659824109186
GPR[SPS]-1659824109186
[336738] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:694.
GPR[EPS]-1659824109655
GPR[ESUN]-1659824109655
GPR[SSUN]-1659824109655
-1117079791
GPR[SPVATF]-1659824109865
GPR[EPVATF]-1659824110087
GPR[SPS]-1659824110087
[337630] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:693.
GPR[EPS]-1659824110547
GPR[ESUN]-1659824110547
GPR[SSUN]-1659824110547
-1117079791
GPR[SPVATF]-1659824110757
GPR[EPVATF]-1659824110996
GPR[SPS]-1659824110996
[338526] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:692.
GPR[EPS]-1659824111443
GPR[ESUN]-1659824111443
GPR[SSUN]-1659824111443
-1117079791
GPR[ESUN]-1659824111648
GPR[SSUN]-1659824111648
-1117079791
GPR[SPVATF]-1659824111844
GPR[EPVATF]-1659824112083
GPR[SPS]-1659824112083
[339616] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:677.
GPR[EPS]-1659824112533
GPR[ESUN]-1659824112533
GPR[SSUN]-1659824112533
1187751237
GPR[ESUN]-1659824112830
GPR[SSUN]-1659824112830
-1345859678
GPR[SPVATF]-1659824113106
GPR[EPVATF]-1659824113347
GPR[SPS]-1659824113347
[341085] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:784.
GPR[EPS]-1659824114002
GPR[SPVATF]-1659824114002
GPR[EPVATF]-1659824114230
GPR[SPS]-1659824114230
[341920] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:784.
GPR[EPS]-1659824114837
GPR[ESUN]-1659824114837
GPR[SSUN]-1659824114837
-1345859678
GPR[SPVATF]-1659824115094
GPR[EPVATF]-1659824115328
GPR[SPS]-1659824115328
[343011] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:783.
GPR[EPS]-1659824115928
GPR[ESUN]-1659824115928
GPR[SSUN]-1659824115928
-1345859678
GPR[SPVATF]-1659824116187
GPR[EPVATF]-1659824116415
GPR[SPS]-1659824116415
[344789] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:782.
GPR[EPS]-1659824117706
GPR[ESUN]-1659824117706
GPR[SSUN]-1659824117706
-534884160
GPR[ESUN]-1659824118075
GPR[SSUN]-1659824118075
-534884160
GPR[SPVATF]-1659824118404
GPR[EPVATF]-1659824118636
GPR[SPS]-1659824118636
[346574] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1317.
GPR[EPS]-1659824119491
GPR[ESUN]-1659824119491
GPR[SSUN]-1659824119491
-534884160
GPR[ESUN]-1659824119839
GPR[SSUN]-1659824119839
-534884160
GPR[SPVATF]-1659824120178
GPR[EPVATF]-1659824120418
GPR[SPS]-1659824120418
[348273] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1293.
GPR[EPS]-1659824121190
GPR[ESUN]-1659824121190
GPR[SSUN]-1659824121190
-534884160
GPR[SPVATF]-1659824121519
GPR[EPVATF]-1659824121745
GPR[SPS]-1659824121746
[349587] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1292.
GPR[EPS]-1659824122504
GPR[ESUN]-1659824122504
GPR[SSUN]-1659824122504
GPR[ESUN]-1659824122504
GPR[SSUN]-1659824122504
GPR[ESUN]-1659824122504
GPR[SSUN]-1659824122504
GPR[ESUN]-1659824122504
GPR[SSUN]-1659824122504
1187751237
GPR[ESUN]-1659824122788
GPR[SSUN]-1659824122788
-534884160
GPR[SPVATF]-1659824123115
GPR[EPVATF]-1659824123345
GPR[SPS]-1659824123345
[351186] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1932.
GPR[EPS]-1659824124103
GPR[ESUN]-1659824124103
GPR[SSUN]-1659824124103
-534884160
GPR[SPVATF]-1659824124443
GPR[EPVATF]-1659824124669
GPR[SPS]-1659824124669
[352526] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1928.
GPR[EPS]-1659824125443
GPR[SPVATF]-1659824125443
GPR[EPVATF]-1659824125685
GPR[SPS]-1659824125685
[353528] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1928.
GPR[EPS]-1659824126445
GPR[ESUN]-1659824126445
GPR[SSUN]-1659824126445
1187751237
GPR[SPVATF]-1659824126726
GPR[EPVATF]-1659824126939
GPR[SPS]-1659824126939
[354716] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:685.
GPR[EPS]-1659824127633
GPR[ESUN]-1659824127633
GPR[SSUN]-1659824127633
1187751237
GPR[SPVATF]-1659824127917
GPR[EPVATF]-1659824128139
GPR[SPS]-1659824128139
[355951] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:681.
GPR[EPS]-1659824128868
GPR[SPVATF]-1659824128868
GPR[EPVATF]-1659824129082
GPR[SPS]-1659824129082
[356851] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:681.
GPR[EPS]-1659824129768
GPR[ESUN]-1659824129768
GPR[SSUN]-1659824129768
1616555300
GPR[ESUN]-1659824129976
GPR[SSUN]-1659824129976
1616555300
GPR[ESUN]-1659824130178
GPR[SSUN]-1659824130179
170294779
GPR[ESUN]-1659824130376
GPR[SSUN]-1659824130376
170294779
GPR[SPVATF]-1659824130574
GPR[EPVATF]-1659824130809
GPR[SPS]-1659824130809
[358331] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineCostEstimator$CompiledSizeEstimator:95.
GPR[EPS]-1659824131248
GPR[ESUN]-1659824131248
GPR[SSUN]-1659824131248
170294779
GPR[ESUN]-1659824131443
GPR[SSUN]-1659824131443
170294779
GPR[SPVATF]-1659824131645
GPR[EPVATF]-1659824131881
GPR[SPS]-1659824131881
[359405] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineCostEstimator$CompiledSizeEstimator:88.
GPR[EPS]-1659824132322
GPR[SPVATF]-1659824132322
GPR[EPVATF]-1659824132619
GPR[SPS]-1659824132619
[360994] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineCostEstimator$CompiledSizeEstimator:88.
GPR[EPS]-1659824133911
GPR[ESUN]-1659824133911
GPR[SSUN]-1659824133911
170294779
GPR[SPVATF]-1659824134489
GPR[EPVATF]-1659824134867
GPR[SPS]-1659824134867
GPR[EPS]-1659824145075
GPR[ESUN]-1659824145075
GPR[SSUN]-1659824145075
170294779
GPR[SPVATF]-1659824145274
GPR[EPVATF]-1659824145506
GPR[SPS]-1659824145506
[373041] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineCostEstimator$CompiledSizeEstimator:86.
GPR[EPS]-1659824145958
GPR[ESUN]-1659824145958
GPR[SSUN]-1659824145958
170294779
GPR[ESUN]-1659824146138
GPR[SSUN]-1659824146138
170294779
GPR[ESUN]-1659824146318
GPR[SSUN]-1659824146318
170294779
GPR[ESUN]-1659824146508
GPR[SSUN]-1659824146508
170294779
GPR[ESUN]-1659824146709
GPR[SSUN]-1659824146709
170294779
GPR[SPVATF]-1659824146907
GPR[EPVATF]-1659824147145
GPR[SPS]-1659824147145
GPR[EPS]-1659824168707
GPR[ESUN]-1659824168707
GPR[SSUN]-1659824168707
170294779
GPR[ESUN]-1659824169306
GPR[SSUN]-1659824169306
170294779
GPR[ESUN]-1659824169502
GPR[SSUN]-1659824169502
170294779
GPR[SPVATF]-1659824169685
GPR[EPVATF]-1659824169910
GPR[SPS]-1659824169910
GPR[EPS]-1659824175464
GPR[ESUN]-1659824175464
GPR[SSUN]-1659824175464
170294779
GPR[ESUN]-1659824175674
GPR[SSUN]-1659824175674
-1345859678
GPR[ESUN]-1659824175934
GPR[SSUN]-1659824175934
-1345859678
GPR[SPVATF]-1659824176202
GPR[EPVATF]-1659824176425
GPR[SPS]-1659824176425
[404122] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:806.
GPR[EPS]-1659824177039
GPR[ESUN]-1659824177039
GPR[SSUN]-1659824177039
GPR[ESUN]-1659824177039
GPR[SSUN]-1659824177039
GPR[ESUN]-1659824177039
GPR[SSUN]-1659824177039
GPR[ESUN]-1659824177039
GPR[SSUN]-1659824177039
GPR[ESUN]-1659824177039
GPR[SSUN]-1659824177039
GPR[ESUN]-1659824177039
GPR[SSUN]-1659824177039
GPR[ESUN]-1659824177039
GPR[SSUN]-1659824177039
GPR[ESUN]-1659824177039
GPR[SSUN]-1659824177039
GPR[ESUN]-1659824177039
GPR[SSUN]-1659824177039
GPR[ESUN]-1659824177039
GPR[SSUN]-1659824177039
GPR[ESUN]-1659824177039
GPR[SSUN]-1659824177039
GPR[ESUN]-1659824177039
GPR[SSUN]-1659824177039
GPR[ESUN]-1659824177039
GPR[SSUN]-1659824177039
GPR[ESUN]-1659824177039
GPR[SSUN]-1659824177039
GPR[ESUN]-1659824177039
GPR[SSUN]-1659824177039
GPR[ESUN]-1659824177039
GPR[SSUN]-1659824177039
GPR[ESUN]-1659824177039
GPR[SSUN]-1659824177039
GPR[ESUN]-1659824177039
GPR[SSUN]-1659824177039
GPR[ESUN]-1659824177039
GPR[SSUN]-1659824177039
GPR[ESUN]-1659824177039
GPR[SSUN]-1659824177039
GPR[ESUN]-1659824177039
GPR[SSUN]-1659824177039
GPR[ESUN]-1659824177039
GPR[SSUN]-1659824177039
GPR[ESUN]-1659824177039
GPR[SSUN]-1659824177039
881600600
GPR[ESUN]-1659824177241
GPR[SSUN]-1659824177241
2433571
GPR[ESUN]-1659824177490
GPR[SSUN]-1659824177491
2433571
GPR[ESUN]-1659824177728
GPR[SSUN]-1659824177728
2433571
GPR[SPVATF]-1659824177978
GPR[EPVATF]-1659824178221
GPR[SPS]-1659824178221
[405954] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1133.
GPR[EPS]-1659824178871
GPR[ESUN]-1659824178871
GPR[SSUN]-1659824178871
2433571
GPR[SPVATF]-1659824179120
GPR[EPVATF]-1659824179348
GPR[SPS]-1659824179348
[407105] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1132.
GPR[EPS]-1659824180022
GPR[ESUN]-1659824180022
GPR[SSUN]-1659824180022
2433571
GPR[SPVATF]-1659824180269
GPR[EPVATF]-1659824180497
GPR[SPS]-1659824180497
[408236] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int LOCAL_BLOCK_PROP = -3;

    public static final int OBJECT_IDS_PROP = -2;

    public static final int CATCH_SCOPE_PROP = -1;

    public static final int LABEL_ID_PROP = 0;

    public static final int TARGET_PROP = 1;

    public static final int BREAK_PROP = 2;

    public static final int CONTINUE_PROP = 3;

    public static final int ENUM_PROP = 4;

    public static final int FUNCTION_PROP = 5;

    public static final int TEMP_PROP = 6;

    public static final int LOCAL_PROP = 7;

    public static final int CODEOFFSET_PROP = 8;

    public static final int FIXUPS_PROP = 9;

    public static final int VARS_PROP = 10;

    public static final int USES_PROP = 11;

    public static final int REGEXP_PROP = 12;

    public static final int CASES_PROP = 13;

    public static final int DEFAULT_PROP = 14;

    public static final int CASEARRAY_PROP = 15;

    public static final int SOURCENAME_PROP = 16;

    public static final int TYPE_PROP = 17;

    public static final int SPECIAL_PROP_PROP = 18;

    public static final int LABEL_PROP = 19;

    public static final int FINALLY_PROP = 20;

    public static final int LOCALCOUNT_PROP = 21;

    public static final int TARGETBLOCK_PROP = 22;

    public static final int VARIABLE_PROP = 23;

    public static final int LASTUSE_PROP = 24;

    public static final int ISNUMBER_PROP = 25;

    public static final int DIRECTCALL_PROP = 26;

    public static final int SPECIALCALL_PROP = 27;

    public static final int DEBUGSOURCE_PROP = 28;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int SKIP_INDEXES_PROP = 31;

    public static final int INCRDECR_PROP = 32;

    public static final int MEMBER_TYPE_PROP = 33;

    public static final int NAME_PROP = 34;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int LAST_PROP = 53;

    public static final int BOTH = 0;

    public static final int LEFT = 1;

    public static final int RIGHT = 2;

    public static final int NON_SPECIALCALL = 0;

    public static final int SPECIALCALL_EVAL = 1;

    public static final int SPECIALCALL_WITH = 2;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    public static final int PROPERTY_FLAG = 0x1;

    public static final int ATTRIBUTE_FLAG = 0x2;

    public static final int DESCENDANTS_FLAG = 0x4;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP :
                return "local_block";
            case com.google.javascript.rhino.Node.OBJECT_IDS_PROP :
                return "object_ids_prop";
            case com.google.javascript.rhino.Node.CATCH_SCOPE_PROP :
                return "catch_scope_prop";
            case com.google.javascript.rhino.Node.LABEL_ID_PROP :
                return "label_id_prop";
            case com.google.javascript.rhino.Node.TARGET_PROP :
                return "target";
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.BREAK_PROP :
                return "break";
            case com.google.javascript.rhino.Node.CONTINUE_PROP :
                return "continue";
            case com.google.javascript.rhino.Node.ENUM_PROP :
                return "enum";
            case com.google.javascript.rhino.Node.FUNCTION_PROP :
                return "function";
            case com.google.javascript.rhino.Node.TEMP_PROP :
                return "temp";
            case com.google.javascript.rhino.Node.LOCAL_PROP :
                return "local";
            case com.google.javascript.rhino.Node.CODEOFFSET_PROP :
                return "codeoffset";
            case com.google.javascript.rhino.Node.FIXUPS_PROP :
                return "fixups";
            case com.google.javascript.rhino.Node.VARS_PROP :
                return "vars";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.USES_PROP :
                return "uses";
            case com.google.javascript.rhino.Node.REGEXP_PROP :
                return "regexp";
            case com.google.javascript.rhino.Node.CASES_PROP :
                return "cases";
            case com.google.javascript.rhino.Node.DEFAULT_PROP :
                return "default";
            case com.google.javascript.rhino.Node.CASEARRAY_PROP :
                return "casearray";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.TYPE_PROP :
                return "type";
            case com.google.javascript.rhino.Node.SPECIAL_PROP_PROP :
                return "special_prop";
            case com.google.javascript.rhino.Node.LABEL_PROP :
                return "label";
            case com.google.javascript.rhino.Node.FINALLY_PROP :
                return "finally";
            case com.google.javascript.rhino.Node.LOCALCOUNT_PROP :
                return "localcount";
            case com.google.javascript.rhino.Node.TARGETBLOCK_PROP :
                return "targetblock";
            case com.google.javascript.rhino.Node.VARIABLE_PROP :
                return "variable";
            case com.google.javascript.rhino.Node.LASTUSE_PROP :
                return "lastuse";
            case com.google.javascript.rhino.Node.ISNUMBER_PROP :
                return "isnumber";
            case com.google.javascript.rhino.Node.DIRECTCALL_PROP :
                return "directcall";
            case com.google.javascript.rhino.Node.SPECIALCALL_PROP :
                return "specialcall";
            case com.google.javascript.rhino.Node.DEBUGSOURCE_PROP :
                return "debugsource";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.SKIP_INDEXES_PROP :
                return "skip_indexes";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.MEMBER_TYPE_PROP :
                return "member_type";
            case com.google.javascript.rhino.Node.NAME_PROP :
                return "name";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            default :
                com.google.javascript.rhino.Kit.codeBug();
        }
        return null;
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && (getDouble() == ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble());
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private abstract static class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        if (last != null) {
            last.next = children;
        }
        last = children.getLastSibling();
        if (first == null) {
            first = children;
        }
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node != null, "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.parent = this;
        newChild.next = node.next;
        node.next = newChild;
        if (last == node) {
            last = newChild;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            com.google.javascript.rhino.Kit.codeBug();
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        if (com.google.javascript.rhino.Token.shouldPrintTrees()) {
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            toString(sb, printSource, printAnnotations, printType);
            return sb.toString();
        }
        return java.lang.String.valueOf(type);
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        if (com.google.javascript.rhino.Token.printTrees) {
            sb.append(com.google.javascript.rhino.Token.name(type));
            if (this instanceof com.google.javascript.rhino.Node.StringNode) {
                sb.append(' ');
                sb.append(getString());
            } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
                sb.append(' ');
                if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                    sb.append("<invalid>");
                } else {
                    sb.append(first.getString());
                }
            } else if (this instanceof com.google.javascript.rhino.ScriptOrFnNode) {
                com.google.javascript.rhino.ScriptOrFnNode sof = ((com.google.javascript.rhino.ScriptOrFnNode) (this));
                if (this instanceof com.google.javascript.rhino.FunctionNode) {
                    com.google.javascript.rhino.FunctionNode fn = ((com.google.javascript.rhino.FunctionNode) (this));
                    sb.append(' ');
                    sb.append(fn.getFunctionName());
                }
                if (printSource) {
                    sb.append(" [source name: ");
                    sb.append(sof.getSourceName());
                    sb.append("] [encoded source length: ");
                    sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());
                    sb.append("] [base line: ");
                    sb.append(sof.getBaseLineno());
                    sb.append("] [end line: ");
                    sb.append(sof.getEndLineno());
                    sb.append(']');
                }
            } else if (type == com.google.javascript.rhino.Token.NUMBER) {
                sb.append(' ');
                sb.append(getDouble());
            }
            if (printSource) {
                int lineno = getLineno();
                if (lineno != (-1)) {
                    sb.append(' ');
                    sb.append(lineno);
                }
            }
            if (printAnnotations) {
                int[] keys = getSortedPropTypes();
                for (int i = 0; i < keys.length; i++) {
                    int type = keys[i];
                    com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                    sb.append(" [");
                    sb.append(com.google.javascript.rhino.Node.propToString(type));
                    sb.append(": ");
                    java.lang.String value;
                    switch (type) {
                        case com.google.javascript.rhino.Node.TARGETBLOCK_PROP :
                            value = "target block property";
                            break;
                        case com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP :
                            value = "last local block";
                            break;
                        case com.google.javascript.rhino.Node.ISNUMBER_PROP :
                            switch (x.getIntValue()) {
                                case com.google.javascript.rhino.Node.BOTH :
                                    value = "both";
                                    break;
                                case com.google.javascript.rhino.Node.RIGHT :
                                    value = "right";
                                    break;
                                case com.google.javascript.rhino.Node.LEFT :
                                    value = "left";
                                    break;
                                default :
                                    throw com.google.javascript.rhino.Kit.codeBug();
                            }
                            break;
                        case com.google.javascript.rhino.Node.SPECIALCALL_PROP :
                            switch (x.getIntValue()) {
                                case com.google.javascript.rhino.Node.SPECIALCALL_EVAL :
                                    value = "eval";
                                    break;
                                case com.google.javascript.rhino.Node.SPECIALCALL_WITH :
                                    value = "with";
                                    break;
                                default :
                                    throw com.google.javascript.rhino.Kit.codeBug();
                            }
                            break;
                        default :
                            boolean spoonDefaultValue = false;
                            try {
                                spoonDefaultValue = true;
                            } catch (java.lang.Exception __NopolProcessorException) {
                            }
                            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                            if (fr.inria.lille.commons.trace.RuntimeValues.instance(100).isEnabled()) {
                                fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectionStarts();
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.FIXUPS_PROP",com.google.javascript.rhino.Node.FIXUPS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.ISNUMBER_PROP",com.google.javascript.rhino.Node.ISNUMBER_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.CODEOFFSET_PROP",com.google.javascript.rhino.Node.CODEOFFSET_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.LOCAL_PROP",com.google.javascript.rhino.Node.LOCAL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_PROP",com.google.javascript.rhino.Node.SPECIALCALL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.TARGET_PROP",com.google.javascript.rhino.Node.TARGET_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.OBJECT_IDS_PROP",com.google.javascript.rhino.Node.OBJECT_IDS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.LOCALCOUNT_PROP",com.google.javascript.rhino.Node.LOCALCOUNT_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.FUNCTION_PROP",com.google.javascript.rhino.Node.FUNCTION_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.LABEL_PROP",com.google.javascript.rhino.Node.LABEL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.BOTH",com.google.javascript.rhino.Node.BOTH);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.MEMBER_TYPE_PROP",com.google.javascript.rhino.Node.MEMBER_TYPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_WITH",com.google.javascript.rhino.Node.SPECIALCALL_WITH);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.TYPE_PROP",com.google.javascript.rhino.Node.TYPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.PROPERTY_FLAG",com.google.javascript.rhino.Node.PROPERTY_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.DEFAULT_PROP",com.google.javascript.rhino.Node.DEFAULT_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.SPECIAL_PROP_PROP",com.google.javascript.rhino.Node.SPECIAL_PROP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.CONTINUE_PROP",com.google.javascript.rhino.Node.CONTINUE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.DIRECTCALL_PROP",com.google.javascript.rhino.Node.DIRECTCALL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.LABEL_ID_PROP",com.google.javascript.rhino.Node.LABEL_ID_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.ENUM_PROP",com.google.javascript.rhino.Node.ENUM_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.TARGETBLOCK_PROP",com.google.javascript.rhino.Node.TARGETBLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.TEMP_PROP",com.google.javascript.rhino.Node.TEMP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.USES_PROP",com.google.javascript.rhino.Node.USES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.VARS_PROP",com.google.javascript.rhino.Node.VARS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.REGEXP_PROP",com.google.javascript.rhino.Node.REGEXP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.LASTUSE_PROP",com.google.javascript.rhino.Node.LASTUSE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.NAME_PROP",com.google.javascript.rhino.Node.NAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.LEFT",com.google.javascript.rhino.Node.LEFT);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.ATTRIBUTE_FLAG",com.google.javascript.rhino.Node.ATTRIBUTE_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.FINALLY_PROP",com.google.javascript.rhino.Node.FINALLY_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.NON_SPECIALCALL",com.google.javascript.rhino.Node.NON_SPECIALCALL);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.CASEARRAY_PROP",com.google.javascript.rhino.Node.CASEARRAY_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.DESCENDANTS_FLAG",com.google.javascript.rhino.Node.DESCENDANTS_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.CATCH_SCOPE_PROP",com.google.javascript.rhino.Node.CATCH_SCOPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP",com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.CASES_PROP",com.google.javascript.rhino.Node.CASES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.VARIABLE_PROP",com.google.javascript.rhino.Node.VARIABLE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.SKIP_INDEXES_PROP",com.google.javascript.rhino.Node.SKIP_INDEXES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.RIGHT",com.google.javascript.rhino.Node.RIGHT);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_EVAL",com.google.javascript.rhino.Node.SPECIALCALL_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.DEBUGSOURCE_PROP",com.google.javascript.rhino.Node.DEBUGSOURCE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.BREAK_PROP",com.google.javascript.rhino.Node.BREAK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                if (com.google.javascript.rhino.Node.this.last!=null) {
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                                }
                                if (com.google.javascript.rhino.Node.this.parent!=null) {
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                                }
                                if (com.google.javascript.rhino.Node.this.next!=null) {
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                                }
                                if (com.google.javascript.rhino.Node.this.first!=null) {
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                                }
                                fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectOutput(runtimeAngelicValue);
                                fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectionEnds();
                            }
                            if (runtimeAngelicValue)
                                value = x.toString();

                            break;
                    }
                    sb.append(value);
                    sb.append(']');
                }
            }
            if (printType) {
                if (jsType != null) {
                    java.lang.String jsTypeString = jsType.toString();
                    if (jsTypeString != null) {
                        sb.append(" : ");
                        sb.append(jsTypeString);
                    }
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        if (com.google.javascript.rhino.Token.printTrees) {
            for (int i = 0; i != level; ++i) {
                sb.append("    ");
            }
            sb.append(n.toString());
            sb.append('\n');
            for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
                com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
            }
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        int lineOffset = (file == null) ? java.lang.Integer.MIN_VALUE : file.getLineOffset(getLineno());
        return lineOffset + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    @java.lang.SuppressWarnings("rawtypes")
    private static java.lang.Class getNodeClass(com.google.javascript.rhino.Node n) {
        java.lang.Class c = n.getClass();
        if ((c == com.google.javascript.rhino.FunctionNode.class) || (c == com.google.javascript.rhino.ScriptOrFnNode.class)) {
            return com.google.javascript.rhino.Node.class;
        }
        return c;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public static java.lang.String tokenToName(int token) {
        switch (token) {
            case com.google.javascript.rhino.Token.ERROR :
                return "error";
            case com.google.javascript.rhino.Token.EOF :
                return "eof";
            case com.google.javascript.rhino.Token.EOL :
                return "eol";
            case com.google.javascript.rhino.Token.ENTERWITH :
                return "enterwith";
            case com.google.javascript.rhino.Token.LEAVEWITH :
                return "leavewith";
            case com.google.javascript.rhino.Token.RETURN :
                return "return";
            case com.google.javascript.rhino.Token.GOTO :
                return "goto";
            case com.google.javascript.rhino.Token.IFEQ :
                return "ifeq";
            case com.google.javascript.rhino.Token.IFNE :
                return "ifne";
            case com.google.javascript.rhino.Token.SETNAME :
                return "setname";
            case com.google.javascript.rhino.Token.BITOR :
                return "bitor";
            case com.google.javascript.rhino.Token.BITXOR :
                return "bitxor";
            case com.google.javascript.rhino.Token.BITAND :
                return "bitand";
            case com.google.javascript.rhino.Token.EQ :
                return "eq";
            case com.google.javascript.rhino.Token.NE :
                return "ne";
            case com.google.javascript.rhino.Token.LT :
                return "lt";
            case com.google.javascript.rhino.Token.LE :
                return "le";
            case com.google.javascript.rhino.Token.GT :
                return "gt";
            case com.google.javascript.rhino.Token.GE :
                return "ge";
            case com.google.javascript.rhino.Token.LSH :
                return "lsh";
            case com.google.javascript.rhino.Token.RSH :
                return "rsh";
            case com.google.javascript.rhino.Token.URSH :
                return "ursh";
            case com.google.javascript.rhino.Token.ADD :
                return "add";
            case com.google.javascript.rhino.Token.SUB :
                return "sub";
            case com.google.javascript.rhino.Token.MUL :
                return "mul";
            case com.google.javascript.rhino.Token.DIV :
                return "div";
            case com.google.javascript.rhino.Token.MOD :
                return "mod";
            case com.google.javascript.rhino.Token.BITNOT :
                return "bitnot";
            case com.google.javascript.rhino.Token.NEG :
                return "neg";
            case com.google.javascript.rhino.Token.NEW :
                return "new";
            case com.google.javascript.rhino.Token.DELPROP :
                return "delprop";
            case com.google.javascript.rhino.Token.TYPEOF :
                return "typeof";
            case com.google.javascript.rhino.Token.GETPROP :
                return "getprop";
            case com.google.javascript.rhino.Token.SETPROP :
                return "setprop";
            case com.google.javascript.rhino.Token.GETELEM :
                return "getelem";
            case com.google.javascript.rhino.Token.SETELEM :
                return "setelem";
            case com.google.javascript.rhino.Token.CALL :
                return "call";
            case com.google.javascript.rhino.Token.NAME :
                return "name";
            case com.google.javascript.rhino.Token.NUMBER :
                return "number";
            case com.google.javascript.rhino.Token.STRING :
                return "string";
            case com.google.javascript.rhino.Token.NULL :
                return "null";
            case com.google.javascript.rhino.Token.THIS :
                return "this";
            case com.google.javascript.rhino.Token.FALSE :
                return "false";
            case com.google.javascript.rhino.Token.TRUE :
                return "true";
            case com.google.javascript.rhino.Token.SHEQ :
                return "sheq";
            case com.google.javascript.rhino.Token.SHNE :
                return "shne";
            case com.google.javascript.rhino.Token.REGEXP :
                return "regexp";
            case com.google.javascript.rhino.Token.POS :
                return "pos";
            case com.google.javascript.rhino.Token.BINDNAME :
                return "bindname";
            case com.google.javascript.rhino.Token.THROW :
                return "throw";
            case com.google.javascript.rhino.Token.IN :
                return "in";
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return "instanceof";
            case com.google.javascript.rhino.Token.GETVAR :
                return "getvar";
            case com.google.javascript.rhino.Token.SETVAR :
                return "setvar";
            case com.google.javascript.rhino.Token.TRY :
                return "try";
            case com.google.javascript.rhino.Token.TYPEOFNAME :
                return "typeofname";
            case com.google.javascript.rhino.Token.THISFN :
                return "thisfn";
            case com.google.javascript.rhino.Token.SEMI :
                return "semi";
            case com.google.javascript.rhino.Token.LB :
                return "lb";
            case com.google.javascript.rhino.Token.RB :
                return "rb";
            case com.google.javascript.rhino.Token.LC :
                return "lc";
            case com.google.javascript.rhino.Token.RC :
                return "rc";
            case com.google.javascript.rhino.Token.LP :
                return "lp";
            case com.google.javascript.rhino.Token.RP :
                return "rp";
            case com.google.javascript.rhino.Token.COMMA :
                return "comma";
            case com.google.javascript.rhino.Token.ASSIGN :
                return "assign";
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return "assign_bitor";
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return "assign_bitxor";
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return "assign_bitand";
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return "assign_lsh";
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return "assign_rsh";
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return "assign_ursh";
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return "assign_add";
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return "assign_sub";
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return "assign_mul";
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return "assign_div";
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return "assign_mod";
            case com.google.javascript.rhino.Token.HOOK :
                return "hook";
            case com.google.javascript.rhino.Token.COLON :
                return "colon";
            case com.google.javascript.rhino.Token.OR :
                return "or";
            case com.google.javascript.rhino.Token.AND :
                return "and";
            case com.google.javascript.rhino.Token.INC :
                return "inc";
            case com.google.javascript.rhino.Token.DEC :
                return "dec";
            case com.google.javascript.rhino.Token.DOT :
                return "dot";
            case com.google.javascript.rhino.Token.FUNCTION :
                return "function";
            case com.google.javascript.rhino.Token.EXPORT :
                return "export";
            case com.google.javascript.rhino.Token.IMPORT :
                return "import";
            case com.google.javascript.rhino.Token.IF :
                return "if";
            case com.google.javascript.rhino.Token.ELSE :
                return "else";
            case com.google.javascript.rhino.Token.SWITCH :
                return "switch";
            case com.google.javascript.rhino.Token.CASE :
                return "case";
            case com.google.javascript.rhino.Token.DEFAULT :
                return "default";
            case com.google.javascript.rhino.Token.WHILE :
                return "while";
            case com.google.javascript.rhino.Token.DO :
                return "do";
            case com.google.javascript.rhino.Token.FOR :
                return "for";
            case com.google.javascript.rhino.Token.BREAK :
                return "break";
            case com.google.javascript.rhino.Token.CONTINUE :
                return "continue";
            case com.google.javascript.rhino.Token.VAR :
                return "var";
            case com.google.javascript.rhino.Token.WITH :
                return "with";
            case com.google.javascript.rhino.Token.CATCH :
                return "catch";
            case com.google.javascript.rhino.Token.FINALLY :
                return "finally";
            case com.google.javascript.rhino.Token.RESERVED :
                return "reserved";
            case com.google.javascript.rhino.Token.NOT :
                return "not";
            case com.google.javascript.rhino.Token.VOID :
                return "void";
            case com.google.javascript.rhino.Token.BLOCK :
                return "block";
            case com.google.javascript.rhino.Token.ARRAYLIT :
                return "arraylit";
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return "objectlit";
            case com.google.javascript.rhino.Token.LABEL :
                return "label";
            case com.google.javascript.rhino.Token.TARGET :
                return "target";
            case com.google.javascript.rhino.Token.LOOP :
                return "loop";
            case com.google.javascript.rhino.Token.EXPR_VOID :
                return "expr_void";
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                return "expr_result";
            case com.google.javascript.rhino.Token.JSR :
                return "jsr";
            case com.google.javascript.rhino.Token.SCRIPT :
                return "script";
            case com.google.javascript.rhino.Token.EMPTY :
                return "empty";
            case com.google.javascript.rhino.Token.GET_REF :
                return "get_ref";
            case com.google.javascript.rhino.Token.REF_SPECIAL :
                return "ref_special";
        }
        return ("<unknown=" + token) + ">";
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (com.google.javascript.rhino.Node.getNodeClass(this) != com.google.javascript.rhino.Node.getNodeClass(node))) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if (type == com.google.javascript.rhino.Token.ARRAYLIT) {
            try {
                int[] indices1 = ((int[]) (getProp(com.google.javascript.rhino.Node.SKIP_INDEXES_PROP)));
                int[] indices2 = ((int[]) (node.getProp(com.google.javascript.rhino.Node.SKIP_INDEXES_PROP)));
                if (indices1 == null) {
                    if (indices2 != null) {
                        return false;
                    }
                } else if (indices2 == null) {
                    return false;
                } else if (indices1.length != indices2.length) {
                    return false;
                } else {
                    for (int i = 0; i < indices1.length; i++) {
                        if (indices1[i] != indices2[i]) {
                            return false;
                        }
                    }
                }
            } catch (java.lang.Exception e) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.STRING) {
            int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            if (quoted1 != quoted2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean hasSideEffects() {
        switch (type) {
            case com.google.javascript.rhino.Token.EXPR_VOID :
            case com.google.javascript.rhino.Token.COMMA :
                if (last != null) {
                    return last.hasSideEffects();
                } else {
                    return true;
                }
            case com.google.javascript.rhino.Token.HOOK :
                if (((first == null) || (first.next == null)) || (first.next.next == null)) {
                    com.google.javascript.rhino.Kit.codeBug();
                }
                return first.next.hasSideEffects() && first.next.next.hasSideEffects();
            case com.google.javascript.rhino.Token.ERROR :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ENTERWITH :
            case com.google.javascript.rhino.Token.LEAVEWITH :
            case com.google.javascript.rhino.Token.RETURN :
            case com.google.javascript.rhino.Token.GOTO :
            case com.google.javascript.rhino.Token.IFEQ :
            case com.google.javascript.rhino.Token.IFNE :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.SETNAME :
            case com.google.javascript.rhino.Token.SETPROP :
            case com.google.javascript.rhino.Token.SETELEM :
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.THROW :
            case com.google.javascript.rhino.Token.RETHROW :
            case com.google.javascript.rhino.Token.SETVAR :
            case com.google.javascript.rhino.Token.CATCH_SCOPE :
            case com.google.javascript.rhino.Token.RETURN_RESULT :
            case com.google.javascript.rhino.Token.SET_REF :
            case com.google.javascript.rhino.Token.DEL_REF :
            case com.google.javascript.rhino.Token.REF_CALL :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SEMI :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.EXPORT :
            case com.google.javascript.rhino.Token.IMPORT :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.ELSE :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.CONST :
            case com.google.javascript.rhino.Token.WITH :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.FINALLY :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.TARGET :
            case com.google.javascript.rhino.Token.LOOP :
            case com.google.javascript.rhino.Token.JSR :
            case com.google.javascript.rhino.Token.SETPROP_OP :
            case com.google.javascript.rhino.Token.SETELEM_OP :
            case com.google.javascript.rhino.Token.LOCAL_BLOCK :
            case com.google.javascript.rhino.Token.SET_REF_OP :
                return true;
            default :
                return false;
        }
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        com.google.javascript.rhino.Kit.codeBug();
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }
}
[408237] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659824181154
GPR[SSUN]-1659824181154
2433571
GPR[SPVATF]-1659824181393
GPR[EPVATF]-1659824181634
GPR[SPS]-1659824181634
[409353] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int LOCAL_BLOCK_PROP = -3;

    public static final int OBJECT_IDS_PROP = -2;

    public static final int CATCH_SCOPE_PROP = -1;

    public static final int LABEL_ID_PROP = 0;

    public static final int TARGET_PROP = 1;

    public static final int BREAK_PROP = 2;

    public static final int CONTINUE_PROP = 3;

    public static final int ENUM_PROP = 4;

    public static final int FUNCTION_PROP = 5;

    public static final int TEMP_PROP = 6;

    public static final int LOCAL_PROP = 7;

    public static final int CODEOFFSET_PROP = 8;

    public static final int FIXUPS_PROP = 9;

    public static final int VARS_PROP = 10;

    public static final int USES_PROP = 11;

    public static final int REGEXP_PROP = 12;

    public static final int CASES_PROP = 13;

    public static final int DEFAULT_PROP = 14;

    public static final int CASEARRAY_PROP = 15;

    public static final int SOURCENAME_PROP = 16;

    public static final int TYPE_PROP = 17;

    public static final int SPECIAL_PROP_PROP = 18;

    public static final int LABEL_PROP = 19;

    public static final int FINALLY_PROP = 20;

    public static final int LOCALCOUNT_PROP = 21;

    public static final int TARGETBLOCK_PROP = 22;

    public static final int VARIABLE_PROP = 23;

    public static final int LASTUSE_PROP = 24;

    public static final int ISNUMBER_PROP = 25;

    public static final int DIRECTCALL_PROP = 26;

    public static final int SPECIALCALL_PROP = 27;

    public static final int DEBUGSOURCE_PROP = 28;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int SKIP_INDEXES_PROP = 31;

    public static final int INCRDECR_PROP = 32;

    public static final int MEMBER_TYPE_PROP = 33;

    public static final int NAME_PROP = 34;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int LAST_PROP = 53;

    public static final int BOTH = 0;

    public static final int LEFT = 1;

    public static final int RIGHT = 2;

    public static final int NON_SPECIALCALL = 0;

    public static final int SPECIALCALL_EVAL = 1;

    public static final int SPECIALCALL_WITH = 2;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    public static final int PROPERTY_FLAG = 0x1;

    public static final int ATTRIBUTE_FLAG = 0x2;

    public static final int DESCENDANTS_FLAG = 0x4;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP :
                return "local_block";
            case com.google.javascript.rhino.Node.OBJECT_IDS_PROP :
                return "object_ids_prop";
            case com.google.javascript.rhino.Node.CATCH_SCOPE_PROP :
                return "catch_scope_prop";
            case com.google.javascript.rhino.Node.LABEL_ID_PROP :
                return "label_id_prop";
            case com.google.javascript.rhino.Node.TARGET_PROP :
                return "target";
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.BREAK_PROP :
                return "break";
            case com.google.javascript.rhino.Node.CONTINUE_PROP :
                return "continue";
            case com.google.javascript.rhino.Node.ENUM_PROP :
                return "enum";
            case com.google.javascript.rhino.Node.FUNCTION_PROP :
                return "function";
            case com.google.javascript.rhino.Node.TEMP_PROP :
                return "temp";
            case com.google.javascript.rhino.Node.LOCAL_PROP :
                return "local";
            case com.google.javascript.rhino.Node.CODEOFFSET_PROP :
                return "codeoffset";
            case com.google.javascript.rhino.Node.FIXUPS_PROP :
                return "fixups";
            case com.google.javascript.rhino.Node.VARS_PROP :
                return "vars";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.USES_PROP :
                return "uses";
            case com.google.javascript.rhino.Node.REGEXP_PROP :
                return "regexp";
            case com.google.javascript.rhino.Node.CASES_PROP :
                return "cases";
            case com.google.javascript.rhino.Node.DEFAULT_PROP :
                return "default";
            case com.google.javascript.rhino.Node.CASEARRAY_PROP :
                return "casearray";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.TYPE_PROP :
                return "type";
            case com.google.javascript.rhino.Node.SPECIAL_PROP_PROP :
                return "special_prop";
            case com.google.javascript.rhino.Node.LABEL_PROP :
                return "label";
            case com.google.javascript.rhino.Node.FINALLY_PROP :
                return "finally";
            case com.google.javascript.rhino.Node.LOCALCOUNT_PROP :
                return "localcount";
            case com.google.javascript.rhino.Node.TARGETBLOCK_PROP :
                return "targetblock";
            case com.google.javascript.rhino.Node.VARIABLE_PROP :
                return "variable";
            case com.google.javascript.rhino.Node.LASTUSE_PROP :
                return "lastuse";
            case com.google.javascript.rhino.Node.ISNUMBER_PROP :
                return "isnumber";
            case com.google.javascript.rhino.Node.DIRECTCALL_PROP :
                return "directcall";
            case com.google.javascript.rhino.Node.SPECIALCALL_PROP :
                return "specialcall";
            case com.google.javascript.rhino.Node.DEBUGSOURCE_PROP :
                return "debugsource";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.SKIP_INDEXES_PROP :
                return "skip_indexes";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.MEMBER_TYPE_PROP :
                return "member_type";
            case com.google.javascript.rhino.Node.NAME_PROP :
                return "name";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            default :
                com.google.javascript.rhino.Kit.codeBug();
        }
        return null;
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && (getDouble() == ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble());
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private abstract static class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        if (last != null) {
            last.next = children;
        }
        last = children.getLastSibling();
        if (first == null) {
            first = children;
        }
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node != null, "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.parent = this;
        newChild.next = node.next;
        node.next = newChild;
        if (last == node) {
            last = newChild;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            com.google.javascript.rhino.Kit.codeBug();
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        if (com.google.javascript.rhino.Token.shouldPrintTrees()) {
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            toString(sb, printSource, printAnnotations, printType);
            return sb.toString();
        }
        return java.lang.String.valueOf(type);
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        if (com.google.javascript.rhino.Token.printTrees) {
            sb.append(com.google.javascript.rhino.Token.name(type));
            if (this instanceof com.google.javascript.rhino.Node.StringNode) {
                sb.append(' ');
                sb.append(getString());
            } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
                sb.append(' ');
                if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                    sb.append("<invalid>");
                } else {
                    sb.append(first.getString());
                }
            } else if (this instanceof com.google.javascript.rhino.ScriptOrFnNode) {
                com.google.javascript.rhino.ScriptOrFnNode sof = ((com.google.javascript.rhino.ScriptOrFnNode) (this));
                if (this instanceof com.google.javascript.rhino.FunctionNode) {
                    com.google.javascript.rhino.FunctionNode fn = ((com.google.javascript.rhino.FunctionNode) (this));
                    sb.append(' ');
                    sb.append(fn.getFunctionName());
                }
                if (printSource) {
                    sb.append(" [source name: ");
                    sb.append(sof.getSourceName());
                    sb.append("] [encoded source length: ");
                    sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());
                    sb.append("] [base line: ");
                    sb.append(sof.getBaseLineno());
                    sb.append("] [end line: ");
                    sb.append(sof.getEndLineno());
                    sb.append(']');
                }
            } else if (type == com.google.javascript.rhino.Token.NUMBER) {
                sb.append(' ');
                sb.append(getDouble());
            }
            if (printSource) {
                int lineno = getLineno();
                if (lineno != (-1)) {
                    sb.append(' ');
                    sb.append(lineno);
                }
            }
            if (printAnnotations) {
                int[] keys = getSortedPropTypes();
                for (int i = 0; i < keys.length; i++) {
                    int type = keys[i];
                    com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                    sb.append(" [");
                    sb.append(com.google.javascript.rhino.Node.propToString(type));
                    sb.append(": ");
                    java.lang.String value;
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(101).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.FIXUPS_PROP",com.google.javascript.rhino.Node.FIXUPS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.ISNUMBER_PROP",com.google.javascript.rhino.Node.ISNUMBER_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.CODEOFFSET_PROP",com.google.javascript.rhino.Node.CODEOFFSET_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.LOCAL_PROP",com.google.javascript.rhino.Node.LOCAL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_PROP",com.google.javascript.rhino.Node.SPECIALCALL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.TARGET_PROP",com.google.javascript.rhino.Node.TARGET_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.OBJECT_IDS_PROP",com.google.javascript.rhino.Node.OBJECT_IDS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.LOCALCOUNT_PROP",com.google.javascript.rhino.Node.LOCALCOUNT_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.FUNCTION_PROP",com.google.javascript.rhino.Node.FUNCTION_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.LABEL_PROP",com.google.javascript.rhino.Node.LABEL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.BOTH",com.google.javascript.rhino.Node.BOTH);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.MEMBER_TYPE_PROP",com.google.javascript.rhino.Node.MEMBER_TYPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_WITH",com.google.javascript.rhino.Node.SPECIALCALL_WITH);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.TYPE_PROP",com.google.javascript.rhino.Node.TYPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.PROPERTY_FLAG",com.google.javascript.rhino.Node.PROPERTY_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.DEFAULT_PROP",com.google.javascript.rhino.Node.DEFAULT_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.SPECIAL_PROP_PROP",com.google.javascript.rhino.Node.SPECIAL_PROP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.CONTINUE_PROP",com.google.javascript.rhino.Node.CONTINUE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.DIRECTCALL_PROP",com.google.javascript.rhino.Node.DIRECTCALL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.LABEL_ID_PROP",com.google.javascript.rhino.Node.LABEL_ID_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.ENUM_PROP",com.google.javascript.rhino.Node.ENUM_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.TARGETBLOCK_PROP",com.google.javascript.rhino.Node.TARGETBLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.TEMP_PROP",com.google.javascript.rhino.Node.TEMP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.USES_PROP",com.google.javascript.rhino.Node.USES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.VARS_PROP",com.google.javascript.rhino.Node.VARS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.REGEXP_PROP",com.google.javascript.rhino.Node.REGEXP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.LASTUSE_PROP",com.google.javascript.rhino.Node.LASTUSE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.NAME_PROP",com.google.javascript.rhino.Node.NAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.LEFT",com.google.javascript.rhino.Node.LEFT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.ATTRIBUTE_FLAG",com.google.javascript.rhino.Node.ATTRIBUTE_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.FINALLY_PROP",com.google.javascript.rhino.Node.FINALLY_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.NON_SPECIALCALL",com.google.javascript.rhino.Node.NON_SPECIALCALL);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.CASEARRAY_PROP",com.google.javascript.rhino.Node.CASEARRAY_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.DESCENDANTS_FLAG",com.google.javascript.rhino.Node.DESCENDANTS_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.CATCH_SCOPE_PROP",com.google.javascript.rhino.Node.CATCH_SCOPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP",com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.CASES_PROP",com.google.javascript.rhino.Node.CASES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.VARIABLE_PROP",com.google.javascript.rhino.Node.VARIABLE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.SKIP_INDEXES_PROP",com.google.javascript.rhino.Node.SKIP_INDEXES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.RIGHT",com.google.javascript.rhino.Node.RIGHT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_EVAL",com.google.javascript.rhino.Node.SPECIALCALL_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.DEBUGSOURCE_PROP",com.google.javascript.rhino.Node.DEBUGSOURCE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.BREAK_PROP",com.google.javascript.rhino.Node.BREAK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                        if (com.google.javascript.rhino.Node.this.last!=null) {
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                        }
                        if (com.google.javascript.rhino.Node.this.parent!=null) {
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                        }
                        if (com.google.javascript.rhino.Node.this.next!=null) {
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                        }
                        if (com.google.javascript.rhino.Node.this.first!=null) {
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                        }
                        fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        switch (type) {
                            case com.google.javascript.rhino.Node.TARGETBLOCK_PROP :
                                value = "target block property";
                                break;
                            case com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP :
                                value = "last local block";
                                break;
                            case com.google.javascript.rhino.Node.ISNUMBER_PROP :
                                switch (x.getIntValue()) {
                                    case com.google.javascript.rhino.Node.BOTH :
                                        value = "both";
                                        break;
                                    case com.google.javascript.rhino.Node.RIGHT :
                                        value = "right";
                                        break;
                                    case com.google.javascript.rhino.Node.LEFT :
                                        value = "left";
                                        break;
                                    default :
                                        throw com.google.javascript.rhino.Kit.codeBug();
                                }
                                break;
                            case com.google.javascript.rhino.Node.SPECIALCALL_PROP :
                                switch (x.getIntValue()) {
                                    case com.google.javascript.rhino.Node.SPECIALCALL_EVAL :
                                        value = "eval";
                                        break;
                                    case com.google.javascript.rhino.Node.SPECIALCALL_WITH :
                                        value = "with";
                                        break;
                                    default :
                                        throw com.google.javascript.rhino.Kit.codeBug();
                                }
                                break;
                            default :
                                value = x.toString();
                                break;
                        }

                    sb.append(value);
                    sb.append(']');
                }
            }
            if (printType) {
                if (jsType != null) {
                    java.lang.String jsTypeString = jsType.toString();
                    if (jsTypeString != null) {
                        sb.append(" : ");
                        sb.append(jsTypeString);
                    }
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        if (com.google.javascript.rhino.Token.printTrees) {
            for (int i = 0; i != level; ++i) {
                sb.append("    ");
            }
            sb.append(n.toString());
            sb.append('\n');
            for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
                com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
            }
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        int lineOffset = (file == null) ? java.lang.Integer.MIN_VALUE : file.getLineOffset(getLineno());
        return lineOffset + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    @java.lang.SuppressWarnings("rawtypes")
    private static java.lang.Class getNodeClass(com.google.javascript.rhino.Node n) {
        java.lang.Class c = n.getClass();
        if ((c == com.google.javascript.rhino.FunctionNode.class) || (c == com.google.javascript.rhino.ScriptOrFnNode.class)) {
            return com.google.javascript.rhino.Node.class;
        }
        return c;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public static java.lang.String tokenToName(int token) {
        switch (token) {
            case com.google.javascript.rhino.Token.ERROR :
                return "error";
            case com.google.javascript.rhino.Token.EOF :
                return "eof";
            case com.google.javascript.rhino.Token.EOL :
                return "eol";
            case com.google.javascript.rhino.Token.ENTERWITH :
                return "enterwith";
            case com.google.javascript.rhino.Token.LEAVEWITH :
                return "leavewith";
            case com.google.javascript.rhino.Token.RETURN :
                return "return";
            case com.google.javascript.rhino.Token.GOTO :
                return "goto";
            case com.google.javascript.rhino.Token.IFEQ :
                return "ifeq";
            case com.google.javascript.rhino.Token.IFNE :
                return "ifne";
            case com.google.javascript.rhino.Token.SETNAME :
                return "setname";
            case com.google.javascript.rhino.Token.BITOR :
                return "bitor";
            case com.google.javascript.rhino.Token.BITXOR :
                return "bitxor";
            case com.google.javascript.rhino.Token.BITAND :
                return "bitand";
            case com.google.javascript.rhino.Token.EQ :
                return "eq";
            case com.google.javascript.rhino.Token.NE :
                return "ne";
            case com.google.javascript.rhino.Token.LT :
                return "lt";
            case com.google.javascript.rhino.Token.LE :
                return "le";
            case com.google.javascript.rhino.Token.GT :
                return "gt";
            case com.google.javascript.rhino.Token.GE :
                return "ge";
            case com.google.javascript.rhino.Token.LSH :
                return "lsh";
            case com.google.javascript.rhino.Token.RSH :
                return "rsh";
            case com.google.javascript.rhino.Token.URSH :
                return "ursh";
            case com.google.javascript.rhino.Token.ADD :
                return "add";
            case com.google.javascript.rhino.Token.SUB :
                return "sub";
            case com.google.javascript.rhino.Token.MUL :
                return "mul";
            case com.google.javascript.rhino.Token.DIV :
                return "div";
            case com.google.javascript.rhino.Token.MOD :
                return "mod";
            case com.google.javascript.rhino.Token.BITNOT :
                return "bitnot";
            case com.google.javascript.rhino.Token.NEG :
                return "neg";
            case com.google.javascript.rhino.Token.NEW :
                return "new";
            case com.google.javascript.rhino.Token.DELPROP :
                return "delprop";
            case com.google.javascript.rhino.Token.TYPEOF :
                return "typeof";
            case com.google.javascript.rhino.Token.GETPROP :
                return "getprop";
            case com.google.javascript.rhino.Token.SETPROP :
                return "setprop";
            case com.google.javascript.rhino.Token.GETELEM :
                return "getelem";
            case com.google.javascript.rhino.Token.SETELEM :
                return "setelem";
            case com.google.javascript.rhino.Token.CALL :
                return "call";
            case com.google.javascript.rhino.Token.NAME :
                return "name";
            case com.google.javascript.rhino.Token.NUMBER :
                return "number";
            case com.google.javascript.rhino.Token.STRING :
                return "string";
            case com.google.javascript.rhino.Token.NULL :
                return "null";
            case com.google.javascript.rhino.Token.THIS :
                return "this";
            case com.google.javascript.rhino.Token.FALSE :
                return "false";
            case com.google.javascript.rhino.Token.TRUE :
                return "true";
            case com.google.javascript.rhino.Token.SHEQ :
                return "sheq";
            case com.google.javascript.rhino.Token.SHNE :
                return "shne";
            case com.google.javascript.rhino.Token.REGEXP :
                return "regexp";
            case com.google.javascript.rhino.Token.POS :
                return "pos";
            case com.google.javascript.rhino.Token.BINDNAME :
                return "bindname";
            case com.google.javascript.rhino.Token.THROW :
                return "throw";
            case com.google.javascript.rhino.Token.IN :
                return "in";
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return "instanceof";
            case com.google.javascript.rhino.Token.GETVAR :
                return "getvar";
            case com.google.javascript.rhino.Token.SETVAR :
                return "setvar";
            case com.google.javascript.rhino.Token.TRY :
                return "try";
            case com.google.javascript.rhino.Token.TYPEOFNAME :
                return "typeofname";
            case com.google.javascript.rhino.Token.THISFN :
                return "thisfn";
            case com.google.javascript.rhino.Token.SEMI :
                return "semi";
            case com.google.javascript.rhino.Token.LB :
                return "lb";
            case com.google.javascript.rhino.Token.RB :
                return "rb";
            case com.google.javascript.rhino.Token.LC :
                return "lc";
            case com.google.javascript.rhino.Token.RC :
                return "rc";
            case com.google.javascript.rhino.Token.LP :
                return "lp";
            case com.google.javascript.rhino.Token.RP :
                return "rp";
            case com.google.javascript.rhino.Token.COMMA :
                return "comma";
            case com.google.javascript.rhino.Token.ASSIGN :
                return "assign";
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return "assign_bitor";
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return "assign_bitxor";
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return "assign_bitand";
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return "assign_lsh";
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return "assign_rsh";
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return "assign_ursh";
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return "assign_add";
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return "assign_sub";
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return "assign_mul";
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return "assign_div";
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return "assign_mod";
            case com.google.javascript.rhino.Token.HOOK :
                return "hook";
            case com.google.javascript.rhino.Token.COLON :
                return "colon";
            case com.google.javascript.rhino.Token.OR :
                return "or";
            case com.google.javascript.rhino.Token.AND :
                return "and";
            case com.google.javascript.rhino.Token.INC :
                return "inc";
            case com.google.javascript.rhino.Token.DEC :
                return "dec";
            case com.google.javascript.rhino.Token.DOT :
                return "dot";
            case com.google.javascript.rhino.Token.FUNCTION :
                return "function";
            case com.google.javascript.rhino.Token.EXPORT :
                return "export";
            case com.google.javascript.rhino.Token.IMPORT :
                return "import";
            case com.google.javascript.rhino.Token.IF :
                return "if";
            case com.google.javascript.rhino.Token.ELSE :
                return "else";
            case com.google.javascript.rhino.Token.SWITCH :
                return "switch";
            case com.google.javascript.rhino.Token.CASE :
                return "case";
            case com.google.javascript.rhino.Token.DEFAULT :
                return "default";
            case com.google.javascript.rhino.Token.WHILE :
                return "while";
            case com.google.javascript.rhino.Token.DO :
                return "do";
            case com.google.javascript.rhino.Token.FOR :
                return "for";
            case com.google.javascript.rhino.Token.BREAK :
                return "break";
            case com.google.javascript.rhino.Token.CONTINUE :
                return "continue";
            case com.google.javascript.rhino.Token.VAR :
                return "var";
            case com.google.javascript.rhino.Token.WITH :
                return "with";
            case com.google.javascript.rhino.Token.CATCH :
                return "catch";
            case com.google.javascript.rhino.Token.FINALLY :
                return "finally";
            case com.google.javascript.rhino.Token.RESERVED :
                return "reserved";
            case com.google.javascript.rhino.Token.NOT :
                return "not";
            case com.google.javascript.rhino.Token.VOID :
                return "void";
            case com.google.javascript.rhino.Token.BLOCK :
                return "block";
            case com.google.javascript.rhino.Token.ARRAYLIT :
                return "arraylit";
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return "objectlit";
            case com.google.javascript.rhino.Token.LABEL :
                return "label";
            case com.google.javascript.rhino.Token.TARGET :
                return "target";
            case com.google.javascript.rhino.Token.LOOP :
                return "loop";
            case com.google.javascript.rhino.Token.EXPR_VOID :
                return "expr_void";
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                return "expr_result";
            case com.google.javascript.rhino.Token.JSR :
                return "jsr";
            case com.google.javascript.rhino.Token.SCRIPT :
                return "script";
            case com.google.javascript.rhino.Token.EMPTY :
                return "empty";
            case com.google.javascript.rhino.Token.GET_REF :
                return "get_ref";
            case com.google.javascript.rhino.Token.REF_SPECIAL :
                return "ref_special";
        }
        return ("<unknown=" + token) + ">";
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (com.google.javascript.rhino.Node.getNodeClass(this) != com.google.javascript.rhino.Node.getNodeClass(node))) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if (type == com.google.javascript.rhino.Token.ARRAYLIT) {
            try {
                int[] indices1 = ((int[]) (getProp(com.google.javascript.rhino.Node.SKIP_INDEXES_PROP)));
                int[] indices2 = ((int[]) (node.getProp(com.google.javascript.rhino.Node.SKIP_INDEXES_PROP)));
                if (indices1 == null) {
                    if (indices2 != null) {
                        return false;
                    }
                } else if (indices2 == null) {
                    return false;
                } else if (indices1.length != indices2.length) {
                    return false;
                } else {
                    for (int i = 0; i < indices1.length; i++) {
                        if (indices1[i] != indices2[i]) {
                            return false;
                        }
                    }
                }
            } catch (java.lang.Exception e) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.STRING) {
            int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            if (quoted1 != quoted2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean hasSideEffects() {
        switch (type) {
            case com.google.javascript.rhino.Token.EXPR_VOID :
            case com.google.javascript.rhino.Token.COMMA :
                if (last != null) {
                    return last.hasSideEffects();
                } else {
                    return true;
                }
            case com.google.javascript.rhino.Token.HOOK :
                if (((first == null) || (first.next == null)) || (first.next.next == null)) {
                    com.google.javascript.rhino.Kit.codeBug();
                }
                return first.next.hasSideEffects() && first.next.next.hasSideEffects();
            case com.google.javascript.rhino.Token.ERROR :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ENTERWITH :
            case com.google.javascript.rhino.Token.LEAVEWITH :
            case com.google.javascript.rhino.Token.RETURN :
            case com.google.javascript.rhino.Token.GOTO :
            case com.google.javascript.rhino.Token.IFEQ :
            case com.google.javascript.rhino.Token.IFNE :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.SETNAME :
            case com.google.javascript.rhino.Token.SETPROP :
            case com.google.javascript.rhino.Token.SETELEM :
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.THROW :
            case com.google.javascript.rhino.Token.RETHROW :
            case com.google.javascript.rhino.Token.SETVAR :
            case com.google.javascript.rhino.Token.CATCH_SCOPE :
            case com.google.javascript.rhino.Token.RETURN_RESULT :
            case com.google.javascript.rhino.Token.SET_REF :
            case com.google.javascript.rhino.Token.DEL_REF :
            case com.google.javascript.rhino.Token.REF_CALL :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SEMI :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.EXPORT :
            case com.google.javascript.rhino.Token.IMPORT :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.ELSE :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.CONST :
            case com.google.javascript.rhino.Token.WITH :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.FINALLY :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.TARGET :
            case com.google.javascript.rhino.Token.LOOP :
            case com.google.javascript.rhino.Token.JSR :
            case com.google.javascript.rhino.Token.SETPROP_OP :
            case com.google.javascript.rhino.Token.SETELEM_OP :
            case com.google.javascript.rhino.Token.LOCAL_BLOCK :
            case com.google.javascript.rhino.Token.SET_REF_OP :
                return true;
            default :
                return false;
        }
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        com.google.javascript.rhino.Kit.codeBug();
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }
}
[409354] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659824182271
GPR[SSUN]-1659824182271
2433571
GPR[SPVATF]-1659824182529
GPR[EPVATF]-1659824182776
GPR[SPS]-1659824182776
[410528] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1091.
GPR[EPS]-1659824183446
GPR[ESUN]-1659824183446
GPR[SSUN]-1659824183446
2433571
GPR[SPVATF]-1659824183694
GPR[EPVATF]-1659824183935
GPR[SPS]-1659824183935
[412324] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1090.
GPR[EPS]-1659824185241
GPR[ESUN]-1659824185241
GPR[SSUN]-1659824185241
2433571
GPR[SPVATF]-1659824185502
GPR[EPVATF]-1659824185739
GPR[SPS]-1659824185739
[413601] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1089.
GPR[EPS]-1659824186518
GPR[ESUN]-1659824186518
GPR[SSUN]-1659824186518
2433571
GPR[ESUN]-1659824186777
GPR[SSUN]-1659824186777
2433571
GPR[ESUN]-1659824187026
GPR[SSUN]-1659824187026
2433571
GPR[SPVATF]-1659824187269
GPR[EPVATF]-1659824187496
GPR[SPS]-1659824187496
[415200] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1080.
GPR[EPS]-1659824188117
GPR[ESUN]-1659824188117
GPR[SSUN]-1659824188117
2433571
GPR[SPVATF]-1659824188364
GPR[EPVATF]-1659824188614
GPR[SPS]-1659824188614
[416332] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1079.
GPR[EPS]-1659824189249
GPR[ESUN]-1659824189249
GPR[SSUN]-1659824189249
2433571
GPR[SPVATF]-1659824189480
GPR[EPVATF]-1659824189692
GPR[SPS]-1659824189692
[417381] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:970.
GPR[EPS]-1659824190298
GPR[ESUN]-1659824190298
GPR[SSUN]-1659824190298
2433571
GPR[SPVATF]-1659824190547
GPR[EPVATF]-1659824190759
GPR[SPS]-1659824190759
[418443] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:969.
GPR[EPS]-1659824191360
GPR[ESUN]-1659824191360
GPR[SSUN]-1659824191360
2433571
GPR[SPVATF]-1659824191614
GPR[EPVATF]-1659824191836
GPR[SPS]-1659824191836
[419515] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:964.
GPR[EPS]-1659824192432
GPR[ESUN]-1659824192432
GPR[SSUN]-1659824192432
2433571
GPR[SPVATF]-1659824192673
GPR[EPVATF]-1659824192887
GPR[SPS]-1659824192887
[420561] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:184.
GPR[EPS]-1659824193478
GPR[ESUN]-1659824193478
GPR[SSUN]-1659824193478
2433571
GPR[SPVATF]-1659824193721
GPR[EPVATF]-1659824193958
GPR[SPS]-1659824193958
[421679] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1138.
GPR[EPS]-1659824194596
GPR[SPVATF]-1659824194596
GPR[EPVATF]-1659824194812
GPR[SPS]-1659824194812
[422506] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1138.
GPR[EPS]-1659824195423
GPR[ESUN]-1659824195423
GPR[SSUN]-1659824195423
2433571
GPR[SPVATF]-1659824195662
GPR[EPVATF]-1659824195891
GPR[SPS]-1659824195891
[423566] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1086.
GPR[EPS]-1659824196483
GPR[ESUN]-1659824196483
GPR[SSUN]-1659824196483
2433571
GPR[ESUN]-1659824196713
GPR[SSUN]-1659824196713
2433571
GPR[SPVATF]-1659824196961
GPR[EPVATF]-1659824197201
GPR[SPS]-1659824197201
[424913] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1078.
GPR[EPS]-1659824197830
GPR[SPVATF]-1659824197830
GPR[EPVATF]-1659824198055
GPR[SPS]-1659824198055
[425770] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1078.
GPR[EPS]-1659824198687
GPR[ESUN]-1659824198687
GPR[SSUN]-1659824198687
2433571
GPR[ESUN]-1659824198925
GPR[SSUN]-1659824198925
2433571
GPR[ESUN]-1659824199168
GPR[SSUN]-1659824199168
2433571
GPR[ESUN]-1659824199410
GPR[SSUN]-1659824199410
2433571
GPR[SPVATF]-1659824199649
GPR[EPVATF]-1659824199891
GPR[SPS]-1659824199891
[427594] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:973.
GPR[EPS]-1659824200511
GPR[ESUN]-1659824200511
GPR[SSUN]-1659824200511
2433571
GPR[SPVATF]-1659824200749
GPR[EPVATF]-1659824200972
GPR[SPS]-1659824200972
[428655] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:968.
GPR[EPS]-1659824201572
GPR[ESUN]-1659824201572
GPR[SSUN]-1659824201572
2433571
GPR[ESUN]-1659824201817
GPR[SSUN]-1659824201817
2433571
GPR[SPVATF]-1659824202063
GPR[EPVATF]-1659824202296
GPR[SPS]-1659824202296
[430015] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:963.
GPR[EPS]-1659824202932
GPR[ESUN]-1659824202932
GPR[SSUN]-1659824202932
2433571
GPR[ESUN]-1659824203177
GPR[SSUN]-1659824203177
2433571
GPR[SPVATF]-1659824203454
GPR[EPVATF]-1659824203691
GPR[SPS]-1659824203691
[431410] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1054.
GPR[EPS]-1659824204327
GPR[SPVATF]-1659824204327
GPR[EPVATF]-1659824204920
GPR[SPS]-1659824204920
[433719] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1054.
GPR[EPS]-1659824206636
GPR[ESUN]-1659824206636
GPR[SSUN]-1659824206636
2433571
GPR[SPVATF]-1659824206890
GPR[EPVATF]-1659824207110
GPR[SPS]-1659824207110
[434823] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1044.
GPR[EPS]-1659824207740
GPR[SPVATF]-1659824207740
GPR[EPVATF]-1659824207975
GPR[SPS]-1659824207975
[435665] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1044.
GPR[EPS]-1659824208582
GPR[ESUN]-1659824208583
GPR[SSUN]-1659824208583
-534884160
GPR[SPVATF]-1659824208937
GPR[EPVATF]-1659824209173
GPR[SPS]-1659824209173
[437080] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1927.
GPR[EPS]-1659824209997
GPR[SPVATF]-1659824209998
GPR[EPVATF]-1659824210233
GPR[SPS]-1659824210233
[438114] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1927.
GPR[EPS]-1659824211031
GPR[ESUN]-1659824211031
GPR[SSUN]-1659824211031
2433571
GPR[ESUN]-1659824211284
GPR[SSUN]-1659824211284
2433571
GPR[SPVATF]-1659824211535
GPR[EPVATF]-1659824211770
GPR[SPS]-1659824211770
[439479] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1137.
GPR[EPS]-1659824212397
GPR[SPVATF]-1659824212397
GPR[EPVATF]-1659824212634
GPR[SPS]-1659824212634
[440326] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1137.
GPR[EPS]-1659824213243
GPR[ESUN]-1659824213243
GPR[SSUN]-1659824213243
2433571
GPR[SPVATF]-1659824213492
GPR[EPVATF]-1659824213728
GPR[SPS]-1659824213728
[441439] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1084.
GPR[EPS]-1659824214356
GPR[SPVATF]-1659824214356
GPR[EPVATF]-1659824214597
GPR[SPS]-1659824214597
[442355] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1084.
GPR[EPS]-1659824215272
GPR[ESUN]-1659824215272
GPR[SSUN]-1659824215272
2433571
GPR[SPVATF]-1659824215517
GPR[EPVATF]-1659824215761
GPR[SPS]-1659824215761
[443454] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1076.
GPR[EPS]-1659824216371
GPR[SPVATF]-1659824216371
GPR[EPVATF]-1659824216593
GPR[SPS]-1659824216593
[444234] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1076.
GPR[EPS]-1659824217151
GPR[ESUN]-1659824217151
GPR[SSUN]-1659824217151
2433571
GPR[SPVATF]-1659824217378
GPR[EPVATF]-1659824217581
GPR[SPS]-1659824217581
[445220] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1041.
GPR[EPS]-1659824218137
GPR[SPVATF]-1659824218138
GPR[EPVATF]-1659824219078
GPR[SPS]-1659824219078
[446825] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1041.
GPR[EPS]-1659824219742
GPR[ESUN]-1659824219742
GPR[SSUN]-1659824219742
2433571
GPR[SPVATF]-1659824219965
GPR[EPVATF]-1659824220173
GPR[SPS]-1659824220173
[448300] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1040.
GPR[EPS]-1659824221218
GPR[ESUN]-1659824221218
GPR[SSUN]-1659824221218
2433571
GPR[SPVATF]-1659824221562
GPR[EPVATF]-1659824221777
GPR[SPS]-1659824221777
[449451] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1029.
GPR[EPS]-1659824222368
GPR[ESUN]-1659824222368
GPR[SSUN]-1659824222368
2433571
GPR[SPVATF]-1659824222608
GPR[EPVATF]-1659824222856
GPR[SPS]-1659824222856
[450553] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1028.
GPR[EPS]-1659824223470
GPR[ESUN]-1659824223470
GPR[SSUN]-1659824223470
2433571
GPR[ESUN]-1659824223704
GPR[SSUN]-1659824223704
2433571
GPR[SPVATF]-1659824223955
GPR[EPVATF]-1659824224197
GPR[SPS]-1659824224197
[451895] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1026.
GPR[EPS]-1659824224812
GPR[SPVATF]-1659824224812
GPR[EPVATF]-1659824225043
GPR[SPS]-1659824225043
[452736] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1026.
GPR[EPS]-1659824225653
GPR[ESUN]-1659824225653
GPR[SSUN]-1659824225653
80988634
GPR[ESUN]-1659824225842
GPR[SSUN]-1659824225842
2433571
GPR[ESUN]-1659824226082
GPR[SSUN]-1659824226082
2433571
GPR[SPVATF]-1659824226329
GPR[EPVATF]-1659824226558
GPR[SPS]-1659824226558
[454199] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:724.
GPR[EPS]-1659824227116
GPR[SPVATF]-1659824227116
GPR[EPVATF]-1659824227340
GPR[SPS]-1659824227340
[455008] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:724.
GPR[EPS]-1659824227926
GPR[ESUN]-1659824227926
GPR[SSUN]-1659824227926
2433571
GPR[SPVATF]-1659824228164
GPR[EPVATF]-1659824228393
GPR[SPS]-1659824228393
[456088] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:723.
GPR[EPS]-1659824229005
GPR[ESUN]-1659824229005
GPR[SSUN]-1659824229005
2433571
GPR[SPVATF]-1659824229573
GPR[EPVATF]-1659824229806
GPR[SPS]-1659824229806
[457538] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:722.
GPR[EPS]-1659824230455
GPR[ESUN]-1659824230456
GPR[SSUN]-1659824230456
2433571
GPR[ESUN]-1659824230702
GPR[SSUN]-1659824230702
2433571
GPR[SPVATF]-1659824230959
GPR[EPVATF]-1659824231187
GPR[SPS]-1659824231187
[458875] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:719.
GPR[EPS]-1659824231792
GPR[ESUN]-1659824231792
GPR[SSUN]-1659824231792
2433571
GPR[SPVATF]-1659824232042
GPR[EPVATF]-1659824232253
GPR[SPS]-1659824232253
[459959] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:718.
GPR[EPS]-1659824232876
GPR[ESUN]-1659824232876
GPR[SSUN]-1659824232876
2433571
GPR[SPVATF]-1659824233116
GPR[EPVATF]-1659824233335
GPR[SPS]-1659824233335
[461028] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:717.
GPR[EPS]-1659824233946
GPR[ESUN]-1659824233946
GPR[SSUN]-1659824233946
GPR[ESUN]-1659824233946
GPR[SSUN]-1659824233946
GPR[ESUN]-1659824233946
GPR[SSUN]-1659824233946
GPR[ESUN]-1659824233946
GPR[SSUN]-1659824233946
GPR[ESUN]-1659824233946
GPR[SSUN]-1659824233946
GPR[ESUN]-1659824233946
GPR[SSUN]-1659824233946
GPR[ESUN]-1659824233946
GPR[SSUN]-1659824233946
-718432441
GPR[SPVATF]-1659824234199
GPR[EPVATF]-1659824234435
GPR[SPS]-1659824234435
[462190] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:482.
GPR[EPS]-1659824235107
GPR[ESUN]-1659824235107
GPR[SSUN]-1659824235107
-718432441
GPR[SPVATF]-1659824235356
GPR[EPVATF]-1659824235591
GPR[SPS]-1659824235591
[463311] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:481.
GPR[EPS]-1659824236228
GPR[ESUN]-1659824236228
GPR[SSUN]-1659824236228
-718432441
GPR[SPVATF]-1659824236479
GPR[EPVATF]-1659824236707
GPR[SPS]-1659824236707
[464443] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:480.
GPR[EPS]-1659824237360
GPR[ESUN]-1659824237360
GPR[SSUN]-1659824237360
-718432441
GPR[SPVATF]-1659824237600
GPR[EPVATF]-1659824237840
GPR[SPS]-1659824237840
[465553] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:479.
GPR[EPS]-1659824238470
GPR[ESUN]-1659824238470
GPR[SSUN]-1659824238470
-718432441
GPR[SPVATF]-1659824238717
GPR[EPVATF]-1659824238937
GPR[SPS]-1659824238937
[466699] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:478.
GPR[EPS]-1659824239616
GPR[ESUN]-1659824239616
GPR[SSUN]-1659824239616
-718432441
GPR[SPVATF]-1659824239851
GPR[EPVATF]-1659824240086
GPR[SPS]-1659824240086
[467822] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:475.
GPR[EPS]-1659824240739
GPR[ESUN]-1659824240739
GPR[SSUN]-1659824240739
2433571
GPR[ESUN]-1659824240993
GPR[SSUN]-1659824240993
2433571
GPR[SPVATF]-1659824241238
GPR[EPVATF]-1659824241473
GPR[SPS]-1659824241473
[469183] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:628.
GPR[EPS]-1659824242100
GPR[ESUN]-1659824242101
GPR[SSUN]-1659824242101
GPR[ESUN]-1659824242101
GPR[SSUN]-1659824242101
GPR[ESUN]-1659824242101
GPR[SSUN]-1659824242101
2433571
GPR[ESUN]-1659824242337
GPR[SSUN]-1659824242337
2433571
GPR[SPVATF]-1659824242586
GPR[EPVATF]-1659824242820
GPR[SPS]-1659824242820
[470512] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:686.
GPR[EPS]-1659824243429
GPR[ESUN]-1659824243430
GPR[SSUN]-1659824243430
2433571
GPR[ESUN]-1659824243680
GPR[SSUN]-1659824243680
2433571
GPR[SPVATF]-1659824243906
GPR[EPVATF]-1659824244136
GPR[SPS]-1659824244136
[471827] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:2008.
GPR[EPS]-1659824244744
GPR[ESUN]-1659824244744
GPR[SSUN]-1659824244744
2433571
GPR[ESUN]-1659824244985
GPR[SSUN]-1659824244985
2433571
GPR[SPVATF]-1659824245267
GPR[EPVATF]-1659824245491
GPR[SPS]-1659824245491
[473186] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:2007.
GPR[EPS]-1659824246103
GPR[SPVATF]-1659824246103
GPR[EPVATF]-1659824246339
GPR[SPS]-1659824246339
[473986] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:2007.
GPR[EPS]-1659824246903
GPR[ESUN]-1659824246903
GPR[SSUN]-1659824246903
2433571
GPR[ESUN]-1659824247155
GPR[SSUN]-1659824247155
-1117079791
GPR[ESUN]-1659824247366
GPR[SSUN]-1659824247367
-1117079791
GPR[SPVATF]-1659824247579
GPR[EPVATF]-1659824247810
GPR[SPS]-1659824247810
[475353] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:240.
GPR[EPS]-1659824248270
GPR[ESUN]-1659824248270
GPR[SSUN]-1659824248270
2433571
GPR[ESUN]-1659824248523
GPR[SSUN]-1659824248523
GPR[ESUN]-1659824248523
GPR[SSUN]-1659824248523
GPR[ESUN]-1659824248523
GPR[SSUN]-1659824248523
GPR[ESUN]-1659824248523
GPR[SSUN]-1659824248524
711965926
GPR[ESUN]-1659824248714
GPR[SSUN]-1659824248714
711965926
GPR[SPVATF]-1659824248899
GPR[EPVATF]-1659824249145
GPR[SPS]-1659824249145
[476664] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractMessageFormatter:37.
GPR[EPS]-1659824249581
GPR[ESUN]-1659824249582
GPR[SSUN]-1659824249582
GPR[ESUN]-1659824249582
GPR[SSUN]-1659824249582
80988634
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249768
GPR[ESUN]-1659824249768
GPR[SSUN]-1659824249769
1537627151
GPR[ESUN]-1659824249983
GPR[SSUN]-1659824249984
-1345859678
GPR[ESUN]-1659824250247
GPR[SSUN]-1659824250247
-1345859678
GPR[ESUN]-1659824250496
GPR[SSUN]-1659824250496
-1117079791
GPR[SPVATF]-1659824250703
GPR[EPVATF]-1659824250933
GPR[SPS]-1659824250933
[478473] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:739.
GPR[EPS]-1659824251390
GPR[ESUN]-1659824251390
GPR[SSUN]-1659824251390
-1117079791
GPR[ESUN]-1659824251590
GPR[SSUN]-1659824251590
-1117079791
GPR[SPVATF]-1659824251792
GPR[EPVATF]-1659824252007
GPR[SPS]-1659824252007
[479555] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:731.
GPR[EPS]-1659824252472
GPR[SPVATF]-1659824252472
GPR[EPVATF]-1659824252760
GPR[SPS]-1659824252760
[480309] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:731.
GPR[EPS]-1659824253226
GPR[ESUN]-1659824253226
GPR[SSUN]-1659824253226
-1117079791
GPR[SPVATF]-1659824253445
GPR[EPVATF]-1659824253677
GPR[SPS]-1659824253677
[481240] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:675.
GPR[EPS]-1659824254157
GPR[ESUN]-1659824254157
GPR[SSUN]-1659824254157
-1117079791
GPR[SPVATF]-1659824254360
GPR[EPVATF]-1659824255310
GPR[SPS]-1659824255310
[482868] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:670.
GPR[EPS]-1659824255785
GPR[ESUN]-1659824255785
GPR[SSUN]-1659824255785
GPR[ESUN]-1659824255785
GPR[SSUN]-1659824255785
2433571
GPR[ESUN]-1659824256032
GPR[SSUN]-1659824256032
-718432441
GPR[SPVATF]-1659824256272
GPR[EPVATF]-1659824256560
GPR[SPS]-1659824256560
[484418] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:961.
GPR[EPS]-1659824257335
GPR[ESUN]-1659824257335
GPR[SSUN]-1659824257335
-718432441
GPR[SPVATF]-1659824257582
GPR[EPVATF]-1659824257823
GPR[SPS]-1659824257823
[485556] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:639.
GPR[EPS]-1659824258473
GPR[ESUN]-1659824258473
GPR[SSUN]-1659824258473
-718432441
GPR[SPVATF]-1659824258718
GPR[EPVATF]-1659824258959
GPR[SPS]-1659824258959
[486667] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:638.
GPR[EPS]-1659824259584
GPR[ESUN]-1659824259584
GPR[SSUN]-1659824259584
-718432441
GPR[SPVATF]-1659824259831
GPR[EPVATF]-1659824260085
GPR[SPS]-1659824260085
[487821] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:632.
GPR[EPS]-1659824260738
GPR[SPVATF]-1659824260738
GPR[EPVATF]-1659824260966
GPR[SPS]-1659824260966
[488672] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:632.
GPR[EPS]-1659824261589
GPR[ESUN]-1659824261589
GPR[SSUN]-1659824261589
-718432441
GPR[SPVATF]-1659824261816
GPR[EPVATF]-1659824262042
GPR[SPS]-1659824262042
[489729] ERROR ConstraintModelBuilder - Unable to compile the change: 
class CodeGenerator {
    private final java.util.Map<java.lang.String, java.lang.String> ESCAPED_JS_STRINGS = com.google.common.collect.Maps.newHashMap();

    private static final char[] HEX_CHARS = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };

    private final com.google.javascript.jscomp.CodeConsumer cc;

    private final java.nio.charset.CharsetEncoder outputCharsetEncoder;

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer, java.nio.charset.Charset outputCharset) {
        cc = consumer;
        if ((outputCharset == null) || (outputCharset == com.google.common.base.Charsets.US_ASCII)) {
            this.outputCharsetEncoder = null;
        } else {
            this.outputCharsetEncoder = outputCharset.newEncoder();
        }
    }

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer) {
        this(consumer, null);
    }

    public void tagAsStrict() {
        add("'use strict';");
    }

    void add(java.lang.String str) {
        cc.add(str);
    }

    private void addIdentifier(java.lang.String identifier) {
        cc.addIdentifier(com.google.javascript.jscomp.CodeGenerator.identifierEscape(identifier));
    }

    void add(com.google.javascript.rhino.Node n) {
        add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void add(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if (!cc.continueProcessing()) {
            return;
        }
        int type = n.getType();
        java.lang.String opstr = com.google.javascript.jscomp.NodeUtil.opToStr(type);
        int childCount = n.getChildCount();
        com.google.javascript.rhino.Node first = n.getFirstChild();
        com.google.javascript.rhino.Node last = n.getLastChild();
        if ((opstr != null) && (first != last)) {
            com.google.common.base.Preconditions.checkState(childCount == 2, "Bad binary operator \"%s\": expected 2 arguments but got %s", opstr, childCount);
            int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
            addLeftExpr(first, p, context);
            cc.addOp(opstr, true);
            com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);
            if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {
                addExpr(last, p, rhsContext);
            } else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {
                addExpr(last, p, rhsContext);
            } else {
                addExpr(last, p + 1, rhsContext);
            }
            return;
        }
        cc.startSourceMapping(n);
        switch (type) {
            case com.google.javascript.rhino.Token.TRY :
                {
                    com.google.common.base.Preconditions.checkState((first.getNext().getType() == com.google.javascript.rhino.Token.BLOCK) && (!first.getNext().hasMoreThanOneChild()));
                    com.google.common.base.Preconditions.checkState((childCount >= 2) && (childCount <= 3));
                    add("try");
                    add(first, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    com.google.javascript.rhino.Node catchblock = first.getNext().getFirstChild();
                    if (catchblock != null) {
                        add(catchblock);
                    }
                    if (childCount == 3) {
                        add("finally");
                        add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CATCH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("catch(");
                add(first);
                add(")");
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.THROW :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("throw");
                add(first);
                cc.endStatement(true);
                break;
            case com.google.javascript.rhino.Token.RETURN :
                add("return");
                if (childCount == 1) {
                    add(first);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 0);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.VAR :
                if (first != null) {
                    add("var ");
                    addList(first, false, getContextForNoInOperator(context));
                }
                break;
            case com.google.javascript.rhino.Token.LABEL_NAME :
                com.google.common.base.Preconditions.checkState(!n.getString().isEmpty());
                addIdentifier(n.getString());
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ((first == null) || (first.getType() == com.google.javascript.rhino.Token.EMPTY)) {
                    addIdentifier(n.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    addIdentifier(n.getString());
                    cc.addOp("=", true);
                    if (first.getType() == com.google.javascript.rhino.Token.COMMA) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.ASSIGN));
                    } else {
                        addExpr(first, 0, getContextForNoInOperator(context));
                    }
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                add("[");
                addArrayList(first);
                add("]");
                break;
            case com.google.javascript.rhino.Token.LP :
                add("(");
                addList(first);
                add(")");
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                addList(first, false, context);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addNumber(n.getDouble());
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type));
                    break;
                }
            case com.google.javascript.rhino.Token.NEG :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    if (n.getFirstChild().getType() == com.google.javascript.rhino.Token.NUMBER) {
                        cc.addNumber(-n.getFirstChild().getDouble());
                    } else {
                        cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
                    addLeftExpr(first, p + 1, context);
                    cc.addOp("?", true);
                    addExpr(first.getNext(), 1);
                    cc.addOp(":", true);
                    addExpr(last, 1);
                    break;
                }
            case com.google.javascript.rhino.Token.REGEXP :
                if ((first.getType() != com.google.javascript.rhino.Token.STRING) || (last.getType() != com.google.javascript.rhino.Token.STRING)) {
                    throw new java.lang.Error("Expected children to be strings");
                }
                java.lang.String regexp = com.google.javascript.jscomp.CodeGenerator.regexpEscape(first.getString(), outputCharsetEncoder);
                if (childCount == 2) {
                    add(regexp + last.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    add(regexp);
                }
                break;
            case com.google.javascript.rhino.Token.GET_REF :
                add(first);
                break;
            case com.google.javascript.rhino.Token.REF_SPECIAL :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first);
                add(".");
                add(((java.lang.String) (n.getProp(com.google.javascript.rhino.Node.NAME_PROP))));
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                if (n.getClass() != com.google.javascript.rhino.Node.class) {
                    throw new java.lang.Error("Unexpected Node subclass.");
                }
                com.google.common.base.Preconditions.checkState(childCount == 3);
                boolean funcNeedsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                if (funcNeedsParens) {
                    add("(");
                }
                add("function");
                add(first);
                add(first.getNext());
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                cc.endFunction(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                if (funcNeedsParens) {
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.GET :
            case com.google.javascript.rhino.Token.SET :
                com.google.common.base.Preconditions.checkState(n.getParent().getType() == com.google.javascript.rhino.Token.OBJECTLIT);
                com.google.common.base.Preconditions.checkState(childCount == 1);
                com.google.common.base.Preconditions.checkState(first.getType() == com.google.javascript.rhino.Token.FUNCTION);
                com.google.common.base.Preconditions.checkState(first.getFirstChild().getString().isEmpty());
                if (type == com.google.javascript.rhino.Token.GET) {
                    com.google.common.base.Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());
                    add("get ");
                } else {
                    com.google.common.base.Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
                    add("set ");
                }
                java.lang.String name = n.getString();
                com.google.javascript.rhino.Node fn = first;
                com.google.javascript.rhino.Node parameters = fn.getChildAtIndex(1);
                com.google.javascript.rhino.Node body = fn.getLastChild();
                if (((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {
                    add(name);
                } else {
                    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);
                    if (!java.lang.Double.isNaN(d)) {
                        cc.addNumber(d);
                    } else {
                        addJsString(n.getString());
                    }
                }
                add(parameters);
                add(body, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                {
                    if (n.getClass() != com.google.javascript.rhino.Node.class) {
                        throw new java.lang.Error("Unexpected Node subclass.");
                    }
                    boolean preserveBlock = context == com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
                    if (preserveBlock) {
                        cc.beginBlock();
                    }
                    boolean preferLineBreaks = (type == com.google.javascript.rhino.Token.SCRIPT) || ((((type == com.google.javascript.rhino.Token.BLOCK) && (!preserveBlock)) && (n.getParent() != null)) && (n.getParent().getType() == com.google.javascript.rhino.Token.SCRIPT));
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        add(c, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                        if (c.getType() == com.google.javascript.rhino.Token.VAR) {
                            cc.endStatement();
                        }
                        if (c.getType() == com.google.javascript.rhino.Token.FUNCTION) {
                            cc.maybeLineBreak();
                        }
                        if (preferLineBreaks) {
                            cc.notePreferredLineBreak();
                        }
                    }
                    if (preserveBlock) {
                        cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.FOR :
                if (childCount == 4) {
                    add("for(");
                    if (first.getType() == com.google.javascript.rhino.Token.VAR) {
                        add(first, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    } else {
                        addExpr(first, 0, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    }
                    add(";");
                    add(first.getNext());
                    add(";");
                    add(first.getNext().getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    add("for(");
                    add(first);
                    add("in");
                    add(first.getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                }
                break;
            case com.google.javascript.rhino.Token.DO :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("do");
                addNonEmptyStatement(first, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                add("while(");
                add(last);
                add(")");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.WHILE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("while(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.EMPTY :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETPROP: expected 2 children, but got %s", childCount);
                    com.google.common.base.Preconditions.checkState(last.getType() == com.google.javascript.rhino.Token.STRING, "Bad GETPROP: RHS should be STRING");
                    boolean needsParens = first.getType() == com.google.javascript.rhino.Token.NUMBER;
                    if (needsParens) {
                        add("(");
                    }
                    addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                    if (needsParens) {
                        add(")");
                    }
                    add(".");
                    addIdentifier(last.getString());
                    break;
                }
            case com.google.javascript.rhino.Token.GETELEM :
                com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETELEM: expected 2 children but got %s", childCount);
                addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                add("[");
                add(first.getNext());
                add("]");
                break;
            case com.google.javascript.rhino.Token.WITH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("with(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    java.lang.String o = (type == com.google.javascript.rhino.Token.INC) ? "++" : "--";
                    int postProp = n.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
                    if (postProp != 0) {
                        addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                        cc.addOp(o, false);
                    } else {
                        cc.addOp(o, false);
                        add(first);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CALL :
                if (isIndirectEval(first) || (n.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) && com.google.javascript.jscomp.NodeUtil.isGet(first))) {
                    add("(0,");
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.COMMA));
                    add(")");
                } else {
                    addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                }
                add("(");
                addList(first.getNext());
                add(")");
                break;
            case com.google.javascript.rhino.Token.IF :
                boolean hasElse = childCount == 3;
                boolean ambiguousElseClause = (context == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE) && (!hasElse);
                if (ambiguousElseClause) {
                    cc.beginBlock();
                }
                add("if(");
                add(first);
                add(")");
                if (hasElse) {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE, false);
                    add("else");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                    com.google.common.base.Preconditions.checkState(childCount == 2);
                }
                if (ambiguousElseClause) {
                    cc.endBlock();
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.TRUE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add(com.google.javascript.rhino.Node.tokenToName(type));
                break;
            case com.google.javascript.rhino.Token.CONTINUE :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("continue");
                if (childCount == 1) {
                    if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.DEBUGGER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("debugger");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.BREAK :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("break");
                if (childCount == 1) {
                    if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.EXPR_VOID :
                throw new java.lang.Error("Unexpected EXPR_VOID. Should be EXPR_RESULT.");
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first, com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR);
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.NEW :
                add("new ");
                int precedence = com.google.javascript.jscomp.NodeUtil.precedence(type);
                if (com.google.javascript.jscomp.NodeUtil.containsType(first, com.google.javascript.rhino.Token.CALL, new com.google.javascript.jscomp.NodeUtil.MatchNotFunction())) {
                    precedence = com.google.javascript.jscomp.NodeUtil.precedence(first.getType()) + 1;
                }
                addExpr(first, precedence);
                com.google.javascript.rhino.Node next = first.getNext();
                if (next != null) {
                    add("(");
                    addList(next);
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                if (childCount != ((n.getParent() != null) && (n.getParent().getType() == com.google.javascript.rhino.Token.OBJECTLIT) ? 1 : 0)) {
                    throw new java.lang.IllegalStateException("Unexpected String children: " + n.getParent().toStringTree());
                }
                addJsString(n.getString());
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("delete ");
                add(first);
                break;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                {
                    boolean needsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                    if (needsParens) {
                        add("(");
                    }
                    add("{");
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        if (c != first) {
                            cc.listSeparator();
                        }
                        if ((c.getType() == com.google.javascript.rhino.Token.GET) || (c.getType() == com.google.javascript.rhino.Token.SET)) {
                            add(c);
                        } else {
                            com.google.common.base.Preconditions.checkState(c.getType() == com.google.javascript.rhino.Token.STRING);
                            java.lang.String key = c.getString();
                            if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {
                                add(key);
                            } else {
                                double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);
                                if (!java.lang.Double.isNaN(d)) {
                                    cc.addNumber(d);
                                } else {
                                    addExpr(c, 1);
                                }
                            }
                            add(":");
                            addExpr(c.getFirstChild(), 1);
                        }
                    }
                    add("}");
                    if (needsParens) {
                        add(")");
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.SWITCH :
                add("switch(");
                add(first);
                add(")");
                cc.beginBlock();
                addAllSiblings(first.getNext());
                cc.endBlock(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("case ");
                add(first);
                addCaseBody(last);
                break;
            case com.google.javascript.rhino.Token.DEFAULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("default");
                addCaseBody(first);
                break;
            case com.google.javascript.rhino.Token.LABEL :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {
                    throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                }
                add(first);
                add(":");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), true);
                break;
            case com.google.javascript.rhino.Token.SETNAME :
                break;
            default :
                throw new java.lang.Error((("Unknown type " + type) + "\n") + n.toStringTree());
        }
        cc.endSourceMapping(n);
    }

    static boolean isSimpleNumber(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if ((c < '0') || (c > '9')) {
                return false;
            }
        }
        return len > 0;
    }

    static double getSimpleNumber(java.lang.String s) {
        if (com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(s)) {
            try {
                long l = java.lang.Long.parseLong(s);
                if (l < com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                    return l;
                }
            } catch (java.lang.NumberFormatException e) {
            }
        }
        return java.lang.Double.NaN;
    }

    private boolean isIndirectEval(com.google.javascript.rhino.Node n) {
        return ((n.getType() == com.google.javascript.rhino.Token.NAME) && "eval".equals(n.getString())) && (!n.getBooleanProp(com.google.javascript.rhino.Node.DIRECT_EVAL));
    }

    private void addNonEmptyStatement(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context, boolean allowNonBlockChild) {
        com.google.javascript.rhino.Node nodeToProcess = n;
        if ((!allowNonBlockChild) && (n.getType() != com.google.javascript.rhino.Token.BLOCK)) {
            throw new java.lang.Error("Missing BLOCK child.");
        }
        if (n.getType() == com.google.javascript.rhino.Token.BLOCK) {
            int count = com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2);
            if (count == 0) {
                if (cc.shouldPreserveExtraBlocks()) {
                    cc.beginBlock();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                } else {
                    cc.endStatement(true);
                }
                return;
            }
            if (count == 1) {
                com.google.javascript.rhino.Node firstAndOnlyChild = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n);
                boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();
                if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {
                    cc.beginBlock();
                    add(firstAndOnlyChild, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                    cc.maybeLineBreak();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    return;
                } else {
                    nodeToProcess = firstAndOnlyChild;
                }
            }
            if (count > 1) {
                context = com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
            }
        }
        if (nodeToProcess.getType() == com.google.javascript.rhino.Token.EMPTY) {
            cc.endStatement(true);
        } else {
            add(nodeToProcess, context);
            if (nodeToProcess.getType() == com.google.javascript.rhino.Token.VAR) {
                cc.endStatement();
            }
        }
    }

    private boolean isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node n) {
        if (n.getType() == com.google.javascript.rhino.Token.LABEL) {
            com.google.javascript.rhino.Node labeledStatement = n.getLastChild();
            if (labeledStatement.getType() != com.google.javascript.rhino.Token.BLOCK) {
                return isOneExactlyFunctionOrDo(labeledStatement);
            } else if (com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2) == 1) {
                return isOneExactlyFunctionOrDo(com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n));
            } else {
                return false;
            }
        } else {
            return (n.getType() == com.google.javascript.rhino.Token.FUNCTION) || (n.getType() == com.google.javascript.rhino.Token.DO);
        }
    }

    void addLeftExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        addExpr(n, minPrecedence, context);
    }

    void addExpr(com.google.javascript.rhino.Node n, int minPrecedence) {
        addExpr(n, minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    private void addExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if ((com.google.javascript.jscomp.NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE) && (n.getType() == com.google.javascript.rhino.Token.IN))) {
            add("(");
            add(n, clearContextForNoInOperator(context));
            add(")");
        } else {
            add(n, context);
        }
    }

    void addList(com.google.javascript.rhino.Node firstInList) {
        addList(firstInList, true, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument) {
        addList(firstInList, isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context lhsContext) {
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            boolean isFirst = n == firstInList;
            if (isFirst) {
                addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
            } else {
                cc.listSeparator();
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0);
            }
        }
    }

    void addArrayList(com.google.javascript.rhino.Node firstInList) {
        boolean lastWasEmpty = false;
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            if (n != firstInList) {
                cc.listSeparator();
            }
            addExpr(n, 1);
            lastWasEmpty = n.getType() == com.google.javascript.rhino.Token.EMPTY;
        }
        if (lastWasEmpty) {
            cc.listSeparator();
        }
    }

    void addCaseBody(com.google.javascript.rhino.Node caseBody) {
        cc.beginCaseBody();
        add(caseBody);
        cc.endCaseBody();
    }

    void addAllSiblings(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n; c != null; c = c.getNext()) {
            add(c);
        }
    }

    void addJsString(java.lang.String s) {
        java.lang.String cached = ESCAPED_JS_STRINGS.get(s);
        if (cached == null) {
            cached = jsString(s);
            ESCAPED_JS_STRINGS.put(s, cached);
        }
        add(cached);
    }

    java.lang.String jsString(java.lang.String s) {
        int singleq = 0;
        int doubleq = 0;
        for (int i = 0; i < s.length(); i++) {
            switch (s.charAt(i)) {
                case '"' :
                    doubleq++;
                    break;
                case '\'' :
                    singleq++;
                    break;
            }
        }
        java.lang.String doublequote;
        java.lang.String singlequote;
        char quote;
        if (singleq < doubleq) {
            quote = '\'';
            doublequote = "\"";
            singlequote = "\\\'";
        } else {
            quote = '\"';
            doublequote = "\\\"";
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(168).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(168).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(168).collectInput("singleq",singleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(168).collectInput("com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",com.google.javascript.jscomp.CodeGenerator.HEX_CHARS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(168).collectInput("com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS",com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(168).collectInput("s",s);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(168).collectInput("doubleq",doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(168).collectInput("com.google.javascript.jscomp.CodeGenerator.this.cc",com.google.javascript.jscomp.CodeGenerator.this.cc);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(168).collectInput("com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder",com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(168).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(168).collectionEnds();
            }
            if (runtimeAngelicValue)
                singlequote = "\'";

        }
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder);
    }

    static java.lang.String regexpEscape(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '/', "\"", "'", "\\", outputCharsetEncoder);
    }

    static java.lang.String escapeToDoubleQuotedJsString(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '"', "\\\"", "\'", "\\\\", null);
    }

    static java.lang.String regexpEscape(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.regexpEscape(s, null);
    }

    static java.lang.String strEscape(java.lang.String s, char quote, java.lang.String doublequoteEscape, java.lang.String singlequoteEscape, java.lang.String backslashEscape, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder(s.length() + 2);
        sb.append(quote);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch (c) {
                case '\u0000' :
                    sb.append("\\x00");
                    break;
                case '\n' :
                    sb.append("\\n");
                    break;
                case '\r' :
                    sb.append("\\r");
                    break;
                case '\t' :
                    sb.append("\\t");
                    break;
                case '\\' :
                    sb.append(backslashEscape);
                    break;
                case '\"' :
                    sb.append(doublequoteEscape);
                    break;
                case '\'' :
                    sb.append(singlequoteEscape);
                    break;
                case '>' :
                    if ((i >= 2) && (((s.charAt(i - 1) == '-') && (s.charAt(i - 2) == '-')) || ((s.charAt(i - 1) == ']') && (s.charAt(i - 2) == ']')))) {
                        sb.append("\\>");
                    } else {
                        sb.append(c);
                    }
                    break;
                case '<' :
                    final java.lang.String END_SCRIPT = "/script";
                    final java.lang.String START_COMMENT = "!--";
                    if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {
                        sb.append("<\\");
                    } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {
                        sb.append("<\\");
                    } else {
                        sb.append(c);
                    }
                    break;
                default :
                    if (outputCharsetEncoder != null) {
                        if (outputCharsetEncoder.canEncode(c)) {
                            sb.append(c);
                        } else {
                            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                        }
                    } else if ((c > 0x1f) && (c < 0x7f)) {
                        sb.append(c);
                    } else {
                        com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                    }
            }
        }
        sb.append(quote);
        return sb.toString();
    }

    static java.lang.String identifierEscape(java.lang.String s) {
        if (com.google.javascript.jscomp.NodeUtil.isLatin(s)) {
            return s;
        }
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if ((c > 0x1f) && (c < 0x7f)) {
                sb.append(c);
            } else {
                com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
            }
        }
        return sb.toString();
    }

    private static int getNonEmptyChildCount(com.google.javascript.rhino.Node n, int maxCount) {
        int i = 0;
        com.google.javascript.rhino.Node c = n.getFirstChild();
        for (; (c != null) && (i < maxCount); c = c.getNext()) {
            if (c.getType() == com.google.javascript.rhino.Token.BLOCK) {
                i += com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(c, maxCount - i);
            } else if (c.getType() != com.google.javascript.rhino.Token.EMPTY) {
                i++;
            }
        }
        return i;
    }

    private static com.google.javascript.rhino.Node getFirstNonEmptyChild(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.getType() == com.google.javascript.rhino.Token.BLOCK) {
                com.google.javascript.rhino.Node result = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(c);
                if (result != null) {
                    return result;
                }
            } else if (c.getType() != com.google.javascript.rhino.Token.EMPTY) {
                return c;
            }
        }
        return null;
    }

    enum Context {

        STATEMENT,
        BEFORE_DANGLING_ELSE,
        START_OF_EXPR,
        PRESERVE_BLOCK,
        IN_FOR_INIT_CLAUSE,
        OTHER;}

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNonEmptyExpression(com.google.javascript.jscomp.CodeGenerator.Context currentContext) {
        return currentContext == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE ? com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context clearContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.OTHER : context;
    }

    private static void appendHexJavaScriptRepresentation(java.lang.StringBuilder sb, char c) {
        try {
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(c, sb);
        } catch (java.io.IOException ex) {
            throw new java.lang.RuntimeException(ex);
        }
    }

    private static void appendHexJavaScriptRepresentation(int codePoint, java.lang.Appendable out) throws java.io.IOException {
        if (java.lang.Character.isSupplementaryCodePoint(codePoint)) {
            char[] surrogates = java.lang.Character.toChars(codePoint);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[0], out);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[1], out);
            return;
        }
        out.append("\\u").append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 12) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 8) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 4) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[codePoint & 0xf]);
    }
}
[489729] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659824262646
GPR[SSUN]-1659824262646
-718432441
GPR[SPVATF]-1659824262889
GPR[EPVATF]-1659824263127
GPR[SPS]-1659824263127
[490825] ERROR ConstraintModelBuilder - Unable to compile the change: 
class CodeGenerator {
    private final java.util.Map<java.lang.String, java.lang.String> ESCAPED_JS_STRINGS = com.google.common.collect.Maps.newHashMap();

    private static final char[] HEX_CHARS = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };

    private final com.google.javascript.jscomp.CodeConsumer cc;

    private final java.nio.charset.CharsetEncoder outputCharsetEncoder;

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer, java.nio.charset.Charset outputCharset) {
        cc = consumer;
        if ((outputCharset == null) || (outputCharset == com.google.common.base.Charsets.US_ASCII)) {
            this.outputCharsetEncoder = null;
        } else {
            this.outputCharsetEncoder = outputCharset.newEncoder();
        }
    }

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer) {
        this(consumer, null);
    }

    public void tagAsStrict() {
        add("'use strict';");
    }

    void add(java.lang.String str) {
        cc.add(str);
    }

    private void addIdentifier(java.lang.String identifier) {
        cc.addIdentifier(com.google.javascript.jscomp.CodeGenerator.identifierEscape(identifier));
    }

    void add(com.google.javascript.rhino.Node n) {
        add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void add(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if (!cc.continueProcessing()) {
            return;
        }
        int type = n.getType();
        java.lang.String opstr = com.google.javascript.jscomp.NodeUtil.opToStr(type);
        int childCount = n.getChildCount();
        com.google.javascript.rhino.Node first = n.getFirstChild();
        com.google.javascript.rhino.Node last = n.getLastChild();
        if ((opstr != null) && (first != last)) {
            com.google.common.base.Preconditions.checkState(childCount == 2, "Bad binary operator \"%s\": expected 2 arguments but got %s", opstr, childCount);
            int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
            addLeftExpr(first, p, context);
            cc.addOp(opstr, true);
            com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);
            if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {
                addExpr(last, p, rhsContext);
            } else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {
                addExpr(last, p, rhsContext);
            } else {
                addExpr(last, p + 1, rhsContext);
            }
            return;
        }
        cc.startSourceMapping(n);
        switch (type) {
            case com.google.javascript.rhino.Token.TRY :
                {
                    com.google.common.base.Preconditions.checkState((first.getNext().getType() == com.google.javascript.rhino.Token.BLOCK) && (!first.getNext().hasMoreThanOneChild()));
                    com.google.common.base.Preconditions.checkState((childCount >= 2) && (childCount <= 3));
                    add("try");
                    add(first, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    com.google.javascript.rhino.Node catchblock = first.getNext().getFirstChild();
                    if (catchblock != null) {
                        add(catchblock);
                    }
                    if (childCount == 3) {
                        add("finally");
                        add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CATCH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("catch(");
                add(first);
                add(")");
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.THROW :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("throw");
                add(first);
                cc.endStatement(true);
                break;
            case com.google.javascript.rhino.Token.RETURN :
                add("return");
                if (childCount == 1) {
                    add(first);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 0);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.VAR :
                if (first != null) {
                    add("var ");
                    addList(first, false, getContextForNoInOperator(context));
                }
                break;
            case com.google.javascript.rhino.Token.LABEL_NAME :
                com.google.common.base.Preconditions.checkState(!n.getString().isEmpty());
                addIdentifier(n.getString());
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ((first == null) || (first.getType() == com.google.javascript.rhino.Token.EMPTY)) {
                    addIdentifier(n.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    addIdentifier(n.getString());
                    cc.addOp("=", true);
                    if (first.getType() == com.google.javascript.rhino.Token.COMMA) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.ASSIGN));
                    } else {
                        addExpr(first, 0, getContextForNoInOperator(context));
                    }
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                add("[");
                addArrayList(first);
                add("]");
                break;
            case com.google.javascript.rhino.Token.LP :
                add("(");
                addList(first);
                add(")");
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                addList(first, false, context);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addNumber(n.getDouble());
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type));
                    break;
                }
            case com.google.javascript.rhino.Token.NEG :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    if (n.getFirstChild().getType() == com.google.javascript.rhino.Token.NUMBER) {
                        cc.addNumber(-n.getFirstChild().getDouble());
                    } else {
                        cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
                    addLeftExpr(first, p + 1, context);
                    cc.addOp("?", true);
                    addExpr(first.getNext(), 1);
                    cc.addOp(":", true);
                    addExpr(last, 1);
                    break;
                }
            case com.google.javascript.rhino.Token.REGEXP :
                if ((first.getType() != com.google.javascript.rhino.Token.STRING) || (last.getType() != com.google.javascript.rhino.Token.STRING)) {
                    throw new java.lang.Error("Expected children to be strings");
                }
                java.lang.String regexp = com.google.javascript.jscomp.CodeGenerator.regexpEscape(first.getString(), outputCharsetEncoder);
                if (childCount == 2) {
                    add(regexp + last.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    add(regexp);
                }
                break;
            case com.google.javascript.rhino.Token.GET_REF :
                add(first);
                break;
            case com.google.javascript.rhino.Token.REF_SPECIAL :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first);
                add(".");
                add(((java.lang.String) (n.getProp(com.google.javascript.rhino.Node.NAME_PROP))));
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                if (n.getClass() != com.google.javascript.rhino.Node.class) {
                    throw new java.lang.Error("Unexpected Node subclass.");
                }
                com.google.common.base.Preconditions.checkState(childCount == 3);
                boolean funcNeedsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                if (funcNeedsParens) {
                    add("(");
                }
                add("function");
                add(first);
                add(first.getNext());
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                cc.endFunction(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                if (funcNeedsParens) {
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.GET :
            case com.google.javascript.rhino.Token.SET :
                com.google.common.base.Preconditions.checkState(n.getParent().getType() == com.google.javascript.rhino.Token.OBJECTLIT);
                com.google.common.base.Preconditions.checkState(childCount == 1);
                com.google.common.base.Preconditions.checkState(first.getType() == com.google.javascript.rhino.Token.FUNCTION);
                com.google.common.base.Preconditions.checkState(first.getFirstChild().getString().isEmpty());
                if (type == com.google.javascript.rhino.Token.GET) {
                    com.google.common.base.Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());
                    add("get ");
                } else {
                    com.google.common.base.Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
                    add("set ");
                }
                java.lang.String name = n.getString();
                com.google.javascript.rhino.Node fn = first;
                com.google.javascript.rhino.Node parameters = fn.getChildAtIndex(1);
                com.google.javascript.rhino.Node body = fn.getLastChild();
                if (((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {
                    add(name);
                } else {
                    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);
                    if (!java.lang.Double.isNaN(d)) {
                        cc.addNumber(d);
                    } else {
                        addJsString(n.getString());
                    }
                }
                add(parameters);
                add(body, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                {
                    if (n.getClass() != com.google.javascript.rhino.Node.class) {
                        throw new java.lang.Error("Unexpected Node subclass.");
                    }
                    boolean preserveBlock = context == com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
                    if (preserveBlock) {
                        cc.beginBlock();
                    }
                    boolean preferLineBreaks = (type == com.google.javascript.rhino.Token.SCRIPT) || ((((type == com.google.javascript.rhino.Token.BLOCK) && (!preserveBlock)) && (n.getParent() != null)) && (n.getParent().getType() == com.google.javascript.rhino.Token.SCRIPT));
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        add(c, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                        if (c.getType() == com.google.javascript.rhino.Token.VAR) {
                            cc.endStatement();
                        }
                        if (c.getType() == com.google.javascript.rhino.Token.FUNCTION) {
                            cc.maybeLineBreak();
                        }
                        if (preferLineBreaks) {
                            cc.notePreferredLineBreak();
                        }
                    }
                    if (preserveBlock) {
                        cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.FOR :
                if (childCount == 4) {
                    add("for(");
                    if (first.getType() == com.google.javascript.rhino.Token.VAR) {
                        add(first, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    } else {
                        addExpr(first, 0, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    }
                    add(";");
                    add(first.getNext());
                    add(";");
                    add(first.getNext().getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    add("for(");
                    add(first);
                    add("in");
                    add(first.getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                }
                break;
            case com.google.javascript.rhino.Token.DO :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("do");
                addNonEmptyStatement(first, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                add("while(");
                add(last);
                add(")");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.WHILE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("while(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.EMPTY :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETPROP: expected 2 children, but got %s", childCount);
                    com.google.common.base.Preconditions.checkState(last.getType() == com.google.javascript.rhino.Token.STRING, "Bad GETPROP: RHS should be STRING");
                    boolean needsParens = first.getType() == com.google.javascript.rhino.Token.NUMBER;
                    if (needsParens) {
                        add("(");
                    }
                    addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                    if (needsParens) {
                        add(")");
                    }
                    add(".");
                    addIdentifier(last.getString());
                    break;
                }
            case com.google.javascript.rhino.Token.GETELEM :
                com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETELEM: expected 2 children but got %s", childCount);
                addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                add("[");
                add(first.getNext());
                add("]");
                break;
            case com.google.javascript.rhino.Token.WITH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("with(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    java.lang.String o = (type == com.google.javascript.rhino.Token.INC) ? "++" : "--";
                    int postProp = n.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
                    if (postProp != 0) {
                        addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                        cc.addOp(o, false);
                    } else {
                        cc.addOp(o, false);
                        add(first);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CALL :
                if (isIndirectEval(first) || (n.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) && com.google.javascript.jscomp.NodeUtil.isGet(first))) {
                    add("(0,");
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.COMMA));
                    add(")");
                } else {
                    addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                }
                add("(");
                addList(first.getNext());
                add(")");
                break;
            case com.google.javascript.rhino.Token.IF :
                boolean hasElse = childCount == 3;
                boolean ambiguousElseClause = (context == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE) && (!hasElse);
                if (ambiguousElseClause) {
                    cc.beginBlock();
                }
                add("if(");
                add(first);
                add(")");
                if (hasElse) {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE, false);
                    add("else");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                    com.google.common.base.Preconditions.checkState(childCount == 2);
                }
                if (ambiguousElseClause) {
                    cc.endBlock();
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.TRUE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add(com.google.javascript.rhino.Node.tokenToName(type));
                break;
            case com.google.javascript.rhino.Token.CONTINUE :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("continue");
                if (childCount == 1) {
                    if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.DEBUGGER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("debugger");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.BREAK :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("break");
                if (childCount == 1) {
                    if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.EXPR_VOID :
                throw new java.lang.Error("Unexpected EXPR_VOID. Should be EXPR_RESULT.");
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first, com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR);
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.NEW :
                add("new ");
                int precedence = com.google.javascript.jscomp.NodeUtil.precedence(type);
                if (com.google.javascript.jscomp.NodeUtil.containsType(first, com.google.javascript.rhino.Token.CALL, new com.google.javascript.jscomp.NodeUtil.MatchNotFunction())) {
                    precedence = com.google.javascript.jscomp.NodeUtil.precedence(first.getType()) + 1;
                }
                addExpr(first, precedence);
                com.google.javascript.rhino.Node next = first.getNext();
                if (next != null) {
                    add("(");
                    addList(next);
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                if (childCount != ((n.getParent() != null) && (n.getParent().getType() == com.google.javascript.rhino.Token.OBJECTLIT) ? 1 : 0)) {
                    throw new java.lang.IllegalStateException("Unexpected String children: " + n.getParent().toStringTree());
                }
                addJsString(n.getString());
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("delete ");
                add(first);
                break;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                {
                    boolean needsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                    if (needsParens) {
                        add("(");
                    }
                    add("{");
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        if (c != first) {
                            cc.listSeparator();
                        }
                        if ((c.getType() == com.google.javascript.rhino.Token.GET) || (c.getType() == com.google.javascript.rhino.Token.SET)) {
                            add(c);
                        } else {
                            com.google.common.base.Preconditions.checkState(c.getType() == com.google.javascript.rhino.Token.STRING);
                            java.lang.String key = c.getString();
                            if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {
                                add(key);
                            } else {
                                double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);
                                if (!java.lang.Double.isNaN(d)) {
                                    cc.addNumber(d);
                                } else {
                                    addExpr(c, 1);
                                }
                            }
                            add(":");
                            addExpr(c.getFirstChild(), 1);
                        }
                    }
                    add("}");
                    if (needsParens) {
                        add(")");
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.SWITCH :
                add("switch(");
                add(first);
                add(")");
                cc.beginBlock();
                addAllSiblings(first.getNext());
                cc.endBlock(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("case ");
                add(first);
                addCaseBody(last);
                break;
            case com.google.javascript.rhino.Token.DEFAULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("default");
                addCaseBody(first);
                break;
            case com.google.javascript.rhino.Token.LABEL :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {
                    throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                }
                add(first);
                add(":");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), true);
                break;
            case com.google.javascript.rhino.Token.SETNAME :
                break;
            default :
                throw new java.lang.Error((("Unknown type " + type) + "\n") + n.toStringTree());
        }
        cc.endSourceMapping(n);
    }

    static boolean isSimpleNumber(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if ((c < '0') || (c > '9')) {
                return false;
            }
        }
        return len > 0;
    }

    static double getSimpleNumber(java.lang.String s) {
        if (com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(s)) {
            try {
                long l = java.lang.Long.parseLong(s);
                if (l < com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                    return l;
                }
            } catch (java.lang.NumberFormatException e) {
            }
        }
        return java.lang.Double.NaN;
    }

    private boolean isIndirectEval(com.google.javascript.rhino.Node n) {
        return ((n.getType() == com.google.javascript.rhino.Token.NAME) && "eval".equals(n.getString())) && (!n.getBooleanProp(com.google.javascript.rhino.Node.DIRECT_EVAL));
    }

    private void addNonEmptyStatement(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context, boolean allowNonBlockChild) {
        com.google.javascript.rhino.Node nodeToProcess = n;
        if ((!allowNonBlockChild) && (n.getType() != com.google.javascript.rhino.Token.BLOCK)) {
            throw new java.lang.Error("Missing BLOCK child.");
        }
        if (n.getType() == com.google.javascript.rhino.Token.BLOCK) {
            int count = com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2);
            if (count == 0) {
                if (cc.shouldPreserveExtraBlocks()) {
                    cc.beginBlock();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                } else {
                    cc.endStatement(true);
                }
                return;
            }
            if (count == 1) {
                com.google.javascript.rhino.Node firstAndOnlyChild = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n);
                boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();
                if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {
                    cc.beginBlock();
                    add(firstAndOnlyChild, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                    cc.maybeLineBreak();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    return;
                } else {
                    nodeToProcess = firstAndOnlyChild;
                }
            }
            if (count > 1) {
                context = com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
            }
        }
        if (nodeToProcess.getType() == com.google.javascript.rhino.Token.EMPTY) {
            cc.endStatement(true);
        } else {
            add(nodeToProcess, context);
            if (nodeToProcess.getType() == com.google.javascript.rhino.Token.VAR) {
                cc.endStatement();
            }
        }
    }

    private boolean isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node n) {
        if (n.getType() == com.google.javascript.rhino.Token.LABEL) {
            com.google.javascript.rhino.Node labeledStatement = n.getLastChild();
            if (labeledStatement.getType() != com.google.javascript.rhino.Token.BLOCK) {
                return isOneExactlyFunctionOrDo(labeledStatement);
            } else if (com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2) == 1) {
                return isOneExactlyFunctionOrDo(com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n));
            } else {
                return false;
            }
        } else {
            return (n.getType() == com.google.javascript.rhino.Token.FUNCTION) || (n.getType() == com.google.javascript.rhino.Token.DO);
        }
    }

    void addLeftExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        addExpr(n, minPrecedence, context);
    }

    void addExpr(com.google.javascript.rhino.Node n, int minPrecedence) {
        addExpr(n, minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    private void addExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if ((com.google.javascript.jscomp.NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE) && (n.getType() == com.google.javascript.rhino.Token.IN))) {
            add("(");
            add(n, clearContextForNoInOperator(context));
            add(")");
        } else {
            add(n, context);
        }
    }

    void addList(com.google.javascript.rhino.Node firstInList) {
        addList(firstInList, true, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument) {
        addList(firstInList, isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context lhsContext) {
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            boolean isFirst = n == firstInList;
            if (isFirst) {
                addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
            } else {
                cc.listSeparator();
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0);
            }
        }
    }

    void addArrayList(com.google.javascript.rhino.Node firstInList) {
        boolean lastWasEmpty = false;
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            if (n != firstInList) {
                cc.listSeparator();
            }
            addExpr(n, 1);
            lastWasEmpty = n.getType() == com.google.javascript.rhino.Token.EMPTY;
        }
        if (lastWasEmpty) {
            cc.listSeparator();
        }
    }

    void addCaseBody(com.google.javascript.rhino.Node caseBody) {
        cc.beginCaseBody();
        add(caseBody);
        cc.endCaseBody();
    }

    void addAllSiblings(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n; c != null; c = c.getNext()) {
            add(c);
        }
    }

    void addJsString(java.lang.String s) {
        java.lang.String cached = ESCAPED_JS_STRINGS.get(s);
        if (cached == null) {
            cached = jsString(s);
            ESCAPED_JS_STRINGS.put(s, cached);
        }
        add(cached);
    }

    java.lang.String jsString(java.lang.String s) {
        int singleq = 0;
        int doubleq = 0;
        for (int i = 0; i < s.length(); i++) {
            switch (s.charAt(i)) {
                case '"' :
                    doubleq++;
                    break;
                case '\'' :
                    singleq++;
                    break;
            }
        }
        java.lang.String doublequote;
        java.lang.String singlequote;
        char quote;
        if (singleq < doubleq) {
            quote = '\'';
            doublequote = "\"";
            singlequote = "\\\'";
        } else {
            quote = '\"';
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(169).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(169).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(169).collectInput("singleq",singleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(169).collectInput("com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",com.google.javascript.jscomp.CodeGenerator.HEX_CHARS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(169).collectInput("com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS",com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(169).collectInput("s",s);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(169).collectInput("doubleq",doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(169).collectInput("com.google.javascript.jscomp.CodeGenerator.this.cc",com.google.javascript.jscomp.CodeGenerator.this.cc);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(169).collectInput("com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder",com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(169).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(169).collectionEnds();
            }
            if (runtimeAngelicValue)
                doublequote = "\\\"";

            singlequote = "\'";
        }
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder);
    }

    static java.lang.String regexpEscape(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '/', "\"", "'", "\\", outputCharsetEncoder);
    }

    static java.lang.String escapeToDoubleQuotedJsString(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '"', "\\\"", "\'", "\\\\", null);
    }

    static java.lang.String regexpEscape(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.regexpEscape(s, null);
    }

    static java.lang.String strEscape(java.lang.String s, char quote, java.lang.String doublequoteEscape, java.lang.String singlequoteEscape, java.lang.String backslashEscape, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder(s.length() + 2);
        sb.append(quote);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch (c) {
                case '\u0000' :
                    sb.append("\\x00");
                    break;
                case '\n' :
                    sb.append("\\n");
                    break;
                case '\r' :
                    sb.append("\\r");
                    break;
                case '\t' :
                    sb.append("\\t");
                    break;
                case '\\' :
                    sb.append(backslashEscape);
                    break;
                case '\"' :
                    sb.append(doublequoteEscape);
                    break;
                case '\'' :
                    sb.append(singlequoteEscape);
                    break;
                case '>' :
                    if ((i >= 2) && (((s.charAt(i - 1) == '-') && (s.charAt(i - 2) == '-')) || ((s.charAt(i - 1) == ']') && (s.charAt(i - 2) == ']')))) {
                        sb.append("\\>");
                    } else {
                        sb.append(c);
                    }
                    break;
                case '<' :
                    final java.lang.String END_SCRIPT = "/script";
                    final java.lang.String START_COMMENT = "!--";
                    if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {
                        sb.append("<\\");
                    } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {
                        sb.append("<\\");
                    } else {
                        sb.append(c);
                    }
                    break;
                default :
                    if (outputCharsetEncoder != null) {
                        if (outputCharsetEncoder.canEncode(c)) {
                            sb.append(c);
                        } else {
                            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                        }
                    } else if ((c > 0x1f) && (c < 0x7f)) {
                        sb.append(c);
                    } else {
                        com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                    }
            }
        }
        sb.append(quote);
        return sb.toString();
    }

    static java.lang.String identifierEscape(java.lang.String s) {
        if (com.google.javascript.jscomp.NodeUtil.isLatin(s)) {
            return s;
        }
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if ((c > 0x1f) && (c < 0x7f)) {
                sb.append(c);
            } else {
                com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
            }
        }
        return sb.toString();
    }

    private static int getNonEmptyChildCount(com.google.javascript.rhino.Node n, int maxCount) {
        int i = 0;
        com.google.javascript.rhino.Node c = n.getFirstChild();
        for (; (c != null) && (i < maxCount); c = c.getNext()) {
            if (c.getType() == com.google.javascript.rhino.Token.BLOCK) {
                i += com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(c, maxCount - i);
            } else if (c.getType() != com.google.javascript.rhino.Token.EMPTY) {
                i++;
            }
        }
        return i;
    }

    private static com.google.javascript.rhino.Node getFirstNonEmptyChild(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.getType() == com.google.javascript.rhino.Token.BLOCK) {
                com.google.javascript.rhino.Node result = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(c);
                if (result != null) {
                    return result;
                }
            } else if (c.getType() != com.google.javascript.rhino.Token.EMPTY) {
                return c;
            }
        }
        return null;
    }

    enum Context {

        STATEMENT,
        BEFORE_DANGLING_ELSE,
        START_OF_EXPR,
        PRESERVE_BLOCK,
        IN_FOR_INIT_CLAUSE,
        OTHER;}

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNonEmptyExpression(com.google.javascript.jscomp.CodeGenerator.Context currentContext) {
        return currentContext == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE ? com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context clearContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.OTHER : context;
    }

    private static void appendHexJavaScriptRepresentation(java.lang.StringBuilder sb, char c) {
        try {
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(c, sb);
        } catch (java.io.IOException ex) {
            throw new java.lang.RuntimeException(ex);
        }
    }

    private static void appendHexJavaScriptRepresentation(int codePoint, java.lang.Appendable out) throws java.io.IOException {
        if (java.lang.Character.isSupplementaryCodePoint(codePoint)) {
            char[] surrogates = java.lang.Character.toChars(codePoint);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[0], out);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[1], out);
            return;
        }
        out.append("\\u").append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 12) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 8) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 4) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[codePoint & 0xf]);
    }
}
[490825] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659824263742
GPR[SSUN]-1659824263742
-718432441
GPR[SPVATF]-1659824263982
GPR[EPVATF]-1659824264224
GPR[SPS]-1659824264224
[491916] ERROR ConstraintModelBuilder - Unable to compile the change: 
class CodeGenerator {
    private final java.util.Map<java.lang.String, java.lang.String> ESCAPED_JS_STRINGS = com.google.common.collect.Maps.newHashMap();

    private static final char[] HEX_CHARS = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };

    private final com.google.javascript.jscomp.CodeConsumer cc;

    private final java.nio.charset.CharsetEncoder outputCharsetEncoder;

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer, java.nio.charset.Charset outputCharset) {
        cc = consumer;
        if ((outputCharset == null) || (outputCharset == com.google.common.base.Charsets.US_ASCII)) {
            this.outputCharsetEncoder = null;
        } else {
            this.outputCharsetEncoder = outputCharset.newEncoder();
        }
    }

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer) {
        this(consumer, null);
    }

    public void tagAsStrict() {
        add("'use strict';");
    }

    void add(java.lang.String str) {
        cc.add(str);
    }

    private void addIdentifier(java.lang.String identifier) {
        cc.addIdentifier(com.google.javascript.jscomp.CodeGenerator.identifierEscape(identifier));
    }

    void add(com.google.javascript.rhino.Node n) {
        add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void add(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if (!cc.continueProcessing()) {
            return;
        }
        int type = n.getType();
        java.lang.String opstr = com.google.javascript.jscomp.NodeUtil.opToStr(type);
        int childCount = n.getChildCount();
        com.google.javascript.rhino.Node first = n.getFirstChild();
        com.google.javascript.rhino.Node last = n.getLastChild();
        if ((opstr != null) && (first != last)) {
            com.google.common.base.Preconditions.checkState(childCount == 2, "Bad binary operator \"%s\": expected 2 arguments but got %s", opstr, childCount);
            int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
            addLeftExpr(first, p, context);
            cc.addOp(opstr, true);
            com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);
            if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {
                addExpr(last, p, rhsContext);
            } else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {
                addExpr(last, p, rhsContext);
            } else {
                addExpr(last, p + 1, rhsContext);
            }
            return;
        }
        cc.startSourceMapping(n);
        switch (type) {
            case com.google.javascript.rhino.Token.TRY :
                {
                    com.google.common.base.Preconditions.checkState((first.getNext().getType() == com.google.javascript.rhino.Token.BLOCK) && (!first.getNext().hasMoreThanOneChild()));
                    com.google.common.base.Preconditions.checkState((childCount >= 2) && (childCount <= 3));
                    add("try");
                    add(first, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    com.google.javascript.rhino.Node catchblock = first.getNext().getFirstChild();
                    if (catchblock != null) {
                        add(catchblock);
                    }
                    if (childCount == 3) {
                        add("finally");
                        add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CATCH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("catch(");
                add(first);
                add(")");
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.THROW :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("throw");
                add(first);
                cc.endStatement(true);
                break;
            case com.google.javascript.rhino.Token.RETURN :
                add("return");
                if (childCount == 1) {
                    add(first);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 0);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.VAR :
                if (first != null) {
                    add("var ");
                    addList(first, false, getContextForNoInOperator(context));
                }
                break;
            case com.google.javascript.rhino.Token.LABEL_NAME :
                com.google.common.base.Preconditions.checkState(!n.getString().isEmpty());
                addIdentifier(n.getString());
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ((first == null) || (first.getType() == com.google.javascript.rhino.Token.EMPTY)) {
                    addIdentifier(n.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    addIdentifier(n.getString());
                    cc.addOp("=", true);
                    if (first.getType() == com.google.javascript.rhino.Token.COMMA) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.ASSIGN));
                    } else {
                        addExpr(first, 0, getContextForNoInOperator(context));
                    }
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                add("[");
                addArrayList(first);
                add("]");
                break;
            case com.google.javascript.rhino.Token.LP :
                add("(");
                addList(first);
                add(")");
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                addList(first, false, context);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addNumber(n.getDouble());
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type));
                    break;
                }
            case com.google.javascript.rhino.Token.NEG :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    if (n.getFirstChild().getType() == com.google.javascript.rhino.Token.NUMBER) {
                        cc.addNumber(-n.getFirstChild().getDouble());
                    } else {
                        cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
                    addLeftExpr(first, p + 1, context);
                    cc.addOp("?", true);
                    addExpr(first.getNext(), 1);
                    cc.addOp(":", true);
                    addExpr(last, 1);
                    break;
                }
            case com.google.javascript.rhino.Token.REGEXP :
                if ((first.getType() != com.google.javascript.rhino.Token.STRING) || (last.getType() != com.google.javascript.rhino.Token.STRING)) {
                    throw new java.lang.Error("Expected children to be strings");
                }
                java.lang.String regexp = com.google.javascript.jscomp.CodeGenerator.regexpEscape(first.getString(), outputCharsetEncoder);
                if (childCount == 2) {
                    add(regexp + last.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    add(regexp);
                }
                break;
            case com.google.javascript.rhino.Token.GET_REF :
                add(first);
                break;
            case com.google.javascript.rhino.Token.REF_SPECIAL :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first);
                add(".");
                add(((java.lang.String) (n.getProp(com.google.javascript.rhino.Node.NAME_PROP))));
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                if (n.getClass() != com.google.javascript.rhino.Node.class) {
                    throw new java.lang.Error("Unexpected Node subclass.");
                }
                com.google.common.base.Preconditions.checkState(childCount == 3);
                boolean funcNeedsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                if (funcNeedsParens) {
                    add("(");
                }
                add("function");
                add(first);
                add(first.getNext());
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                cc.endFunction(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                if (funcNeedsParens) {
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.GET :
            case com.google.javascript.rhino.Token.SET :
                com.google.common.base.Preconditions.checkState(n.getParent().getType() == com.google.javascript.rhino.Token.OBJECTLIT);
                com.google.common.base.Preconditions.checkState(childCount == 1);
                com.google.common.base.Preconditions.checkState(first.getType() == com.google.javascript.rhino.Token.FUNCTION);
                com.google.common.base.Preconditions.checkState(first.getFirstChild().getString().isEmpty());
                if (type == com.google.javascript.rhino.Token.GET) {
                    com.google.common.base.Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());
                    add("get ");
                } else {
                    com.google.common.base.Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
                    add("set ");
                }
                java.lang.String name = n.getString();
                com.google.javascript.rhino.Node fn = first;
                com.google.javascript.rhino.Node parameters = fn.getChildAtIndex(1);
                com.google.javascript.rhino.Node body = fn.getLastChild();
                if (((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {
                    add(name);
                } else {
                    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);
                    if (!java.lang.Double.isNaN(d)) {
                        cc.addNumber(d);
                    } else {
                        addJsString(n.getString());
                    }
                }
                add(parameters);
                add(body, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                {
                    if (n.getClass() != com.google.javascript.rhino.Node.class) {
                        throw new java.lang.Error("Unexpected Node subclass.");
                    }
                    boolean preserveBlock = context == com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
                    if (preserveBlock) {
                        cc.beginBlock();
                    }
                    boolean preferLineBreaks = (type == com.google.javascript.rhino.Token.SCRIPT) || ((((type == com.google.javascript.rhino.Token.BLOCK) && (!preserveBlock)) && (n.getParent() != null)) && (n.getParent().getType() == com.google.javascript.rhino.Token.SCRIPT));
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        add(c, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                        if (c.getType() == com.google.javascript.rhino.Token.VAR) {
                            cc.endStatement();
                        }
                        if (c.getType() == com.google.javascript.rhino.Token.FUNCTION) {
                            cc.maybeLineBreak();
                        }
                        if (preferLineBreaks) {
                            cc.notePreferredLineBreak();
                        }
                    }
                    if (preserveBlock) {
                        cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.FOR :
                if (childCount == 4) {
                    add("for(");
                    if (first.getType() == com.google.javascript.rhino.Token.VAR) {
                        add(first, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    } else {
                        addExpr(first, 0, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    }
                    add(";");
                    add(first.getNext());
                    add(";");
                    add(first.getNext().getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    add("for(");
                    add(first);
                    add("in");
                    add(first.getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                }
                break;
            case com.google.javascript.rhino.Token.DO :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("do");
                addNonEmptyStatement(first, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                add("while(");
                add(last);
                add(")");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.WHILE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("while(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.EMPTY :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETPROP: expected 2 children, but got %s", childCount);
                    com.google.common.base.Preconditions.checkState(last.getType() == com.google.javascript.rhino.Token.STRING, "Bad GETPROP: RHS should be STRING");
                    boolean needsParens = first.getType() == com.google.javascript.rhino.Token.NUMBER;
                    if (needsParens) {
                        add("(");
                    }
                    addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                    if (needsParens) {
                        add(")");
                    }
                    add(".");
                    addIdentifier(last.getString());
                    break;
                }
            case com.google.javascript.rhino.Token.GETELEM :
                com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETELEM: expected 2 children but got %s", childCount);
                addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                add("[");
                add(first.getNext());
                add("]");
                break;
            case com.google.javascript.rhino.Token.WITH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("with(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    java.lang.String o = (type == com.google.javascript.rhino.Token.INC) ? "++" : "--";
                    int postProp = n.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
                    if (postProp != 0) {
                        addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                        cc.addOp(o, false);
                    } else {
                        cc.addOp(o, false);
                        add(first);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CALL :
                if (isIndirectEval(first) || (n.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) && com.google.javascript.jscomp.NodeUtil.isGet(first))) {
                    add("(0,");
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.COMMA));
                    add(")");
                } else {
                    addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                }
                add("(");
                addList(first.getNext());
                add(")");
                break;
            case com.google.javascript.rhino.Token.IF :
                boolean hasElse = childCount == 3;
                boolean ambiguousElseClause = (context == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE) && (!hasElse);
                if (ambiguousElseClause) {
                    cc.beginBlock();
                }
                add("if(");
                add(first);
                add(")");
                if (hasElse) {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE, false);
                    add("else");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                    com.google.common.base.Preconditions.checkState(childCount == 2);
                }
                if (ambiguousElseClause) {
                    cc.endBlock();
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.TRUE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add(com.google.javascript.rhino.Node.tokenToName(type));
                break;
            case com.google.javascript.rhino.Token.CONTINUE :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("continue");
                if (childCount == 1) {
                    if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.DEBUGGER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("debugger");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.BREAK :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("break");
                if (childCount == 1) {
                    if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.EXPR_VOID :
                throw new java.lang.Error("Unexpected EXPR_VOID. Should be EXPR_RESULT.");
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first, com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR);
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.NEW :
                add("new ");
                int precedence = com.google.javascript.jscomp.NodeUtil.precedence(type);
                if (com.google.javascript.jscomp.NodeUtil.containsType(first, com.google.javascript.rhino.Token.CALL, new com.google.javascript.jscomp.NodeUtil.MatchNotFunction())) {
                    precedence = com.google.javascript.jscomp.NodeUtil.precedence(first.getType()) + 1;
                }
                addExpr(first, precedence);
                com.google.javascript.rhino.Node next = first.getNext();
                if (next != null) {
                    add("(");
                    addList(next);
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                if (childCount != ((n.getParent() != null) && (n.getParent().getType() == com.google.javascript.rhino.Token.OBJECTLIT) ? 1 : 0)) {
                    throw new java.lang.IllegalStateException("Unexpected String children: " + n.getParent().toStringTree());
                }
                addJsString(n.getString());
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("delete ");
                add(first);
                break;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                {
                    boolean needsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                    if (needsParens) {
                        add("(");
                    }
                    add("{");
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        if (c != first) {
                            cc.listSeparator();
                        }
                        if ((c.getType() == com.google.javascript.rhino.Token.GET) || (c.getType() == com.google.javascript.rhino.Token.SET)) {
                            add(c);
                        } else {
                            com.google.common.base.Preconditions.checkState(c.getType() == com.google.javascript.rhino.Token.STRING);
                            java.lang.String key = c.getString();
                            if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {
                                add(key);
                            } else {
                                double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);
                                if (!java.lang.Double.isNaN(d)) {
                                    cc.addNumber(d);
                                } else {
                                    addExpr(c, 1);
                                }
                            }
                            add(":");
                            addExpr(c.getFirstChild(), 1);
                        }
                    }
                    add("}");
                    if (needsParens) {
                        add(")");
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.SWITCH :
                add("switch(");
                add(first);
                add(")");
                cc.beginBlock();
                addAllSiblings(first.getNext());
                cc.endBlock(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("case ");
                add(first);
                addCaseBody(last);
                break;
            case com.google.javascript.rhino.Token.DEFAULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("default");
                addCaseBody(first);
                break;
            case com.google.javascript.rhino.Token.LABEL :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {
                    throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                }
                add(first);
                add(":");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), true);
                break;
            case com.google.javascript.rhino.Token.SETNAME :
                break;
            default :
                throw new java.lang.Error((("Unknown type " + type) + "\n") + n.toStringTree());
        }
        cc.endSourceMapping(n);
    }

    static boolean isSimpleNumber(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if ((c < '0') || (c > '9')) {
                return false;
            }
        }
        return len > 0;
    }

    static double getSimpleNumber(java.lang.String s) {
        if (com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(s)) {
            try {
                long l = java.lang.Long.parseLong(s);
                if (l < com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                    return l;
                }
            } catch (java.lang.NumberFormatException e) {
            }
        }
        return java.lang.Double.NaN;
    }

    private boolean isIndirectEval(com.google.javascript.rhino.Node n) {
        return ((n.getType() == com.google.javascript.rhino.Token.NAME) && "eval".equals(n.getString())) && (!n.getBooleanProp(com.google.javascript.rhino.Node.DIRECT_EVAL));
    }

    private void addNonEmptyStatement(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context, boolean allowNonBlockChild) {
        com.google.javascript.rhino.Node nodeToProcess = n;
        if ((!allowNonBlockChild) && (n.getType() != com.google.javascript.rhino.Token.BLOCK)) {
            throw new java.lang.Error("Missing BLOCK child.");
        }
        if (n.getType() == com.google.javascript.rhino.Token.BLOCK) {
            int count = com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2);
            if (count == 0) {
                if (cc.shouldPreserveExtraBlocks()) {
                    cc.beginBlock();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                } else {
                    cc.endStatement(true);
                }
                return;
            }
            if (count == 1) {
                com.google.javascript.rhino.Node firstAndOnlyChild = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n);
                boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();
                if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {
                    cc.beginBlock();
                    add(firstAndOnlyChild, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                    cc.maybeLineBreak();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    return;
                } else {
                    nodeToProcess = firstAndOnlyChild;
                }
            }
            if (count > 1) {
                context = com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
            }
        }
        if (nodeToProcess.getType() == com.google.javascript.rhino.Token.EMPTY) {
            cc.endStatement(true);
        } else {
            add(nodeToProcess, context);
            if (nodeToProcess.getType() == com.google.javascript.rhino.Token.VAR) {
                cc.endStatement();
            }
        }
    }

    private boolean isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node n) {
        if (n.getType() == com.google.javascript.rhino.Token.LABEL) {
            com.google.javascript.rhino.Node labeledStatement = n.getLastChild();
            if (labeledStatement.getType() != com.google.javascript.rhino.Token.BLOCK) {
                return isOneExactlyFunctionOrDo(labeledStatement);
            } else if (com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2) == 1) {
                return isOneExactlyFunctionOrDo(com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n));
            } else {
                return false;
            }
        } else {
            return (n.getType() == com.google.javascript.rhino.Token.FUNCTION) || (n.getType() == com.google.javascript.rhino.Token.DO);
        }
    }

    void addLeftExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        addExpr(n, minPrecedence, context);
    }

    void addExpr(com.google.javascript.rhino.Node n, int minPrecedence) {
        addExpr(n, minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    private void addExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if ((com.google.javascript.jscomp.NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE) && (n.getType() == com.google.javascript.rhino.Token.IN))) {
            add("(");
            add(n, clearContextForNoInOperator(context));
            add(")");
        } else {
            add(n, context);
        }
    }

    void addList(com.google.javascript.rhino.Node firstInList) {
        addList(firstInList, true, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument) {
        addList(firstInList, isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context lhsContext) {
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            boolean isFirst = n == firstInList;
            if (isFirst) {
                addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
            } else {
                cc.listSeparator();
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0);
            }
        }
    }

    void addArrayList(com.google.javascript.rhino.Node firstInList) {
        boolean lastWasEmpty = false;
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            if (n != firstInList) {
                cc.listSeparator();
            }
            addExpr(n, 1);
            lastWasEmpty = n.getType() == com.google.javascript.rhino.Token.EMPTY;
        }
        if (lastWasEmpty) {
            cc.listSeparator();
        }
    }

    void addCaseBody(com.google.javascript.rhino.Node caseBody) {
        cc.beginCaseBody();
        add(caseBody);
        cc.endCaseBody();
    }

    void addAllSiblings(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n; c != null; c = c.getNext()) {
            add(c);
        }
    }

    void addJsString(java.lang.String s) {
        java.lang.String cached = ESCAPED_JS_STRINGS.get(s);
        if (cached == null) {
            cached = jsString(s);
            ESCAPED_JS_STRINGS.put(s, cached);
        }
        add(cached);
    }

    java.lang.String jsString(java.lang.String s) {
        int singleq = 0;
        int doubleq = 0;
        for (int i = 0; i < s.length(); i++) {
            switch (s.charAt(i)) {
                case '"' :
                    doubleq++;
                    break;
                case '\'' :
                    singleq++;
                    break;
            }
        }
        java.lang.String doublequote;
        java.lang.String singlequote;
        char quote;
        if (singleq < doubleq) {
            quote = '\'';
            doublequote = "\"";
            singlequote = "\\\'";
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(170).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(170).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(170).collectInput("singleq",singleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(170).collectInput("com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",com.google.javascript.jscomp.CodeGenerator.HEX_CHARS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(170).collectInput("com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS",com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(170).collectInput("s",s);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(170).collectInput("doubleq",doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(170).collectInput("com.google.javascript.jscomp.CodeGenerator.this.cc",com.google.javascript.jscomp.CodeGenerator.this.cc);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(170).collectInput("com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder",com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(170).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(170).collectionEnds();
            }
            if (runtimeAngelicValue)
                quote = '\"';

            doublequote = "\\\"";
            singlequote = "\'";
        }
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder);
    }

    static java.lang.String regexpEscape(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '/', "\"", "'", "\\", outputCharsetEncoder);
    }

    static java.lang.String escapeToDoubleQuotedJsString(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '"', "\\\"", "\'", "\\\\", null);
    }

    static java.lang.String regexpEscape(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.regexpEscape(s, null);
    }

    static java.lang.String strEscape(java.lang.String s, char quote, java.lang.String doublequoteEscape, java.lang.String singlequoteEscape, java.lang.String backslashEscape, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder(s.length() + 2);
        sb.append(quote);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch (c) {
                case '\u0000' :
                    sb.append("\\x00");
                    break;
                case '\n' :
                    sb.append("\\n");
                    break;
                case '\r' :
                    sb.append("\\r");
                    break;
                case '\t' :
                    sb.append("\\t");
                    break;
                case '\\' :
                    sb.append(backslashEscape);
                    break;
                case '\"' :
                    sb.append(doublequoteEscape);
                    break;
                case '\'' :
                    sb.append(singlequoteEscape);
                    break;
                case '>' :
                    if ((i >= 2) && (((s.charAt(i - 1) == '-') && (s.charAt(i - 2) == '-')) || ((s.charAt(i - 1) == ']') && (s.charAt(i - 2) == ']')))) {
                        sb.append("\\>");
                    } else {
                        sb.append(c);
                    }
                    break;
                case '<' :
                    final java.lang.String END_SCRIPT = "/script";
                    final java.lang.String START_COMMENT = "!--";
                    if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {
                        sb.append("<\\");
                    } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {
                        sb.append("<\\");
                    } else {
                        sb.append(c);
                    }
                    break;
                default :
                    if (outputCharsetEncoder != null) {
                        if (outputCharsetEncoder.canEncode(c)) {
                            sb.append(c);
                        } else {
                            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                        }
                    } else if ((c > 0x1f) && (c < 0x7f)) {
                        sb.append(c);
                    } else {
                        com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                    }
            }
        }
        sb.append(quote);
        return sb.toString();
    }

    static java.lang.String identifierEscape(java.lang.String s) {
        if (com.google.javascript.jscomp.NodeUtil.isLatin(s)) {
            return s;
        }
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if ((c > 0x1f) && (c < 0x7f)) {
                sb.append(c);
            } else {
                com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
            }
        }
        return sb.toString();
    }

    private static int getNonEmptyChildCount(com.google.javascript.rhino.Node n, int maxCount) {
        int i = 0;
        com.google.javascript.rhino.Node c = n.getFirstChild();
        for (; (c != null) && (i < maxCount); c = c.getNext()) {
            if (c.getType() == com.google.javascript.rhino.Token.BLOCK) {
                i += com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(c, maxCount - i);
            } else if (c.getType() != com.google.javascript.rhino.Token.EMPTY) {
                i++;
            }
        }
        return i;
    }

    private static com.google.javascript.rhino.Node getFirstNonEmptyChild(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.getType() == com.google.javascript.rhino.Token.BLOCK) {
                com.google.javascript.rhino.Node result = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(c);
                if (result != null) {
                    return result;
                }
            } else if (c.getType() != com.google.javascript.rhino.Token.EMPTY) {
                return c;
            }
        }
        return null;
    }

    enum Context {

        STATEMENT,
        BEFORE_DANGLING_ELSE,
        START_OF_EXPR,
        PRESERVE_BLOCK,
        IN_FOR_INIT_CLAUSE,
        OTHER;}

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNonEmptyExpression(com.google.javascript.jscomp.CodeGenerator.Context currentContext) {
        return currentContext == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE ? com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context clearContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.OTHER : context;
    }

    private static void appendHexJavaScriptRepresentation(java.lang.StringBuilder sb, char c) {
        try {
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(c, sb);
        } catch (java.io.IOException ex) {
            throw new java.lang.RuntimeException(ex);
        }
    }

    private static void appendHexJavaScriptRepresentation(int codePoint, java.lang.Appendable out) throws java.io.IOException {
        if (java.lang.Character.isSupplementaryCodePoint(codePoint)) {
            char[] surrogates = java.lang.Character.toChars(codePoint);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[0], out);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[1], out);
            return;
        }
        out.append("\\u").append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 12) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 8) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 4) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[codePoint & 0xf]);
    }
}
[491917] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659824264834
GPR[SSUN]-1659824264834
-718432441
GPR[SPVATF]-1659824265073
GPR[EPVATF]-1659824265319
GPR[SPS]-1659824265319
[493051] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1063.
GPR[EPS]-1659824265968
GPR[ESUN]-1659824265968
GPR[SSUN]-1659824265968
-718432441
GPR[SPVATF]-1659824266217
GPR[EPVATF]-1659824266453
GPR[SPS]-1659824266453
[494159] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1062.
GPR[EPS]-1659824267076
GPR[SPVATF]-1659824267077
GPR[EPVATF]-1659824267311
GPR[SPS]-1659824267311
[2294163] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[ESUN]-1659826067084
GPR[SSUN]-1659826067084
-718432441
GPR[SPVATF]-1659826067611
GPR[EPVATF]-1659826067834
GPR[SPS]-1659826067834
[2295609] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1051.
GPR[EPS]-1659826068526
GPR[SPVATF]-1659826068526
GPR[EPVATF]-1659826068754
GPR[SPS]-1659826068754
[2296472] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1051.
GPR[EPS]-1659826069389
GPR[ESUN]-1659826069389
GPR[SSUN]-1659826069389
-718432441
GPR[SPVATF]-1659826069625
GPR[EPVATF]-1659826069852
GPR[SPS]-1659826069852
[2297571] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1014.
GPR[EPS]-1659826070488
GPR[ESUN]-1659826070488
GPR[SSUN]-1659826070488
-718432441
GPR[ESUN]-1659826070723
GPR[SSUN]-1659826070723
-718432441
GPR[ESUN]-1659826070965
GPR[SSUN]-1659826070965
-718432441
GPR[SPVATF]-1659826071204
GPR[EPVATF]-1659826071437
GPR[SPS]-1659826071437
[2299131] ERROR ConstraintModelBuilder - Unable to compile the change: 
class CodeGenerator {
    private final java.util.Map<java.lang.String, java.lang.String> ESCAPED_JS_STRINGS = com.google.common.collect.Maps.newHashMap();

    private static final char[] HEX_CHARS = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };

    private final com.google.javascript.jscomp.CodeConsumer cc;

    private final java.nio.charset.CharsetEncoder outputCharsetEncoder;

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer, java.nio.charset.Charset outputCharset) {
        cc = consumer;
        if ((outputCharset == null) || (outputCharset == com.google.common.base.Charsets.US_ASCII)) {
            this.outputCharsetEncoder = null;
        } else {
            this.outputCharsetEncoder = outputCharset.newEncoder();
        }
    }

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer) {
        this(consumer, null);
    }

    public void tagAsStrict() {
        add("'use strict';");
    }

    void add(java.lang.String str) {
        cc.add(str);
    }

    private void addIdentifier(java.lang.String identifier) {
        cc.addIdentifier(com.google.javascript.jscomp.CodeGenerator.identifierEscape(identifier));
    }

    void add(com.google.javascript.rhino.Node n) {
        add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void add(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if (!cc.continueProcessing()) {
            return;
        }
        int type = n.getType();
        java.lang.String opstr = com.google.javascript.jscomp.NodeUtil.opToStr(type);
        int childCount = n.getChildCount();
        com.google.javascript.rhino.Node first = n.getFirstChild();
        com.google.javascript.rhino.Node last = n.getLastChild();
        if ((opstr != null) && (first != last)) {
            com.google.common.base.Preconditions.checkState(childCount == 2, "Bad binary operator \"%s\": expected 2 arguments but got %s", opstr, childCount);
            int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
            addLeftExpr(first, p, context);
            cc.addOp(opstr, true);
            com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);
            if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {
                addExpr(last, p, rhsContext);
            } else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {
                addExpr(last, p, rhsContext);
            } else {
                addExpr(last, p + 1, rhsContext);
            }
            return;
        }
        cc.startSourceMapping(n);
        switch (type) {
            case com.google.javascript.rhino.Token.TRY :
                {
                    com.google.common.base.Preconditions.checkState((first.getNext().getType() == com.google.javascript.rhino.Token.BLOCK) && (!first.getNext().hasMoreThanOneChild()));
                    com.google.common.base.Preconditions.checkState((childCount >= 2) && (childCount <= 3));
                    add("try");
                    add(first, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    com.google.javascript.rhino.Node catchblock = first.getNext().getFirstChild();
                    if (catchblock != null) {
                        add(catchblock);
                    }
                    if (childCount == 3) {
                        add("finally");
                        add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CATCH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("catch(");
                add(first);
                add(")");
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.THROW :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("throw");
                add(first);
                cc.endStatement(true);
                break;
            case com.google.javascript.rhino.Token.RETURN :
                add("return");
                if (childCount == 1) {
                    add(first);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 0);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.VAR :
                if (first != null) {
                    add("var ");
                    addList(first, false, getContextForNoInOperator(context));
                }
                break;
            case com.google.javascript.rhino.Token.LABEL_NAME :
                com.google.common.base.Preconditions.checkState(!n.getString().isEmpty());
                addIdentifier(n.getString());
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ((first == null) || (first.getType() == com.google.javascript.rhino.Token.EMPTY)) {
                    addIdentifier(n.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    addIdentifier(n.getString());
                    cc.addOp("=", true);
                    if (first.getType() == com.google.javascript.rhino.Token.COMMA) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.ASSIGN));
                    } else {
                        addExpr(first, 0, getContextForNoInOperator(context));
                    }
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                add("[");
                addArrayList(first);
                add("]");
                break;
            case com.google.javascript.rhino.Token.LP :
                add("(");
                addList(first);
                add(")");
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                addList(first, false, context);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addNumber(n.getDouble());
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type));
                    break;
                }
            case com.google.javascript.rhino.Token.NEG :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    if (n.getFirstChild().getType() == com.google.javascript.rhino.Token.NUMBER) {
                        cc.addNumber(-n.getFirstChild().getDouble());
                    } else {
                        cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
                    addLeftExpr(first, p + 1, context);
                    cc.addOp("?", true);
                    addExpr(first.getNext(), 1);
                    cc.addOp(":", true);
                    addExpr(last, 1);
                    break;
                }
            case com.google.javascript.rhino.Token.REGEXP :
                if ((first.getType() != com.google.javascript.rhino.Token.STRING) || (last.getType() != com.google.javascript.rhino.Token.STRING)) {
                    throw new java.lang.Error("Expected children to be strings");
                }
                java.lang.String regexp = com.google.javascript.jscomp.CodeGenerator.regexpEscape(first.getString(), outputCharsetEncoder);
                if (childCount == 2) {
                    add(regexp + last.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    add(regexp);
                }
                break;
            case com.google.javascript.rhino.Token.GET_REF :
                add(first);
                break;
            case com.google.javascript.rhino.Token.REF_SPECIAL :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first);
                add(".");
                add(((java.lang.String) (n.getProp(com.google.javascript.rhino.Node.NAME_PROP))));
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                if (n.getClass() != com.google.javascript.rhino.Node.class) {
                    throw new java.lang.Error("Unexpected Node subclass.");
                }
                com.google.common.base.Preconditions.checkState(childCount == 3);
                boolean funcNeedsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                if (funcNeedsParens) {
                    add("(");
                }
                add("function");
                add(first);
                add(first.getNext());
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                cc.endFunction(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                if (funcNeedsParens) {
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.GET :
            case com.google.javascript.rhino.Token.SET :
                com.google.common.base.Preconditions.checkState(n.getParent().getType() == com.google.javascript.rhino.Token.OBJECTLIT);
                com.google.common.base.Preconditions.checkState(childCount == 1);
                com.google.common.base.Preconditions.checkState(first.getType() == com.google.javascript.rhino.Token.FUNCTION);
                com.google.common.base.Preconditions.checkState(first.getFirstChild().getString().isEmpty());
                if (type == com.google.javascript.rhino.Token.GET) {
                    com.google.common.base.Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());
                    add("get ");
                } else {
                    com.google.common.base.Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
                    add("set ");
                }
                java.lang.String name = n.getString();
                com.google.javascript.rhino.Node fn = first;
                com.google.javascript.rhino.Node parameters = fn.getChildAtIndex(1);
                com.google.javascript.rhino.Node body = fn.getLastChild();
                if (((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {
                    add(name);
                } else {
                    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);
                    if (!java.lang.Double.isNaN(d)) {
                        cc.addNumber(d);
                    } else {
                        addJsString(n.getString());
                    }
                }
                add(parameters);
                add(body, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                {
                    if (n.getClass() != com.google.javascript.rhino.Node.class) {
                        throw new java.lang.Error("Unexpected Node subclass.");
                    }
                    boolean preserveBlock = context == com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
                    if (preserveBlock) {
                        cc.beginBlock();
                    }
                    boolean preferLineBreaks = (type == com.google.javascript.rhino.Token.SCRIPT) || ((((type == com.google.javascript.rhino.Token.BLOCK) && (!preserveBlock)) && (n.getParent() != null)) && (n.getParent().getType() == com.google.javascript.rhino.Token.SCRIPT));
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        add(c, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                        if (c.getType() == com.google.javascript.rhino.Token.VAR) {
                            cc.endStatement();
                        }
                        if (c.getType() == com.google.javascript.rhino.Token.FUNCTION) {
                            cc.maybeLineBreak();
                        }
                        if (preferLineBreaks) {
                            cc.notePreferredLineBreak();
                        }
                    }
                    if (preserveBlock) {
                        cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.FOR :
                if (childCount == 4) {
                    add("for(");
                    if (first.getType() == com.google.javascript.rhino.Token.VAR) {
                        add(first, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    } else {
                        addExpr(first, 0, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    }
                    add(";");
                    add(first.getNext());
                    add(";");
                    add(first.getNext().getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    add("for(");
                    add(first);
                    add("in");
                    add(first.getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                }
                break;
            case com.google.javascript.rhino.Token.DO :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("do");
                addNonEmptyStatement(first, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                add("while(");
                add(last);
                add(")");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.WHILE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("while(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.EMPTY :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETPROP: expected 2 children, but got %s", childCount);
                    com.google.common.base.Preconditions.checkState(last.getType() == com.google.javascript.rhino.Token.STRING, "Bad GETPROP: RHS should be STRING");
                    boolean needsParens = first.getType() == com.google.javascript.rhino.Token.NUMBER;
                    if (needsParens) {
                        add("(");
                    }
                    addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                    if (needsParens) {
                        add(")");
                    }
                    add(".");
                    addIdentifier(last.getString());
                    break;
                }
            case com.google.javascript.rhino.Token.GETELEM :
                com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETELEM: expected 2 children but got %s", childCount);
                addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                add("[");
                add(first.getNext());
                add("]");
                break;
            case com.google.javascript.rhino.Token.WITH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("with(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    java.lang.String o = (type == com.google.javascript.rhino.Token.INC) ? "++" : "--";
                    int postProp = n.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
                    if (postProp != 0) {
                        addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                        cc.addOp(o, false);
                    } else {
                        cc.addOp(o, false);
                        add(first);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CALL :
                if (isIndirectEval(first) || (n.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) && com.google.javascript.jscomp.NodeUtil.isGet(first))) {
                    add("(0,");
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.COMMA));
                    add(")");
                } else {
                    addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                }
                add("(");
                addList(first.getNext());
                add(")");
                break;
            case com.google.javascript.rhino.Token.IF :
                boolean hasElse = childCount == 3;
                boolean ambiguousElseClause = (context == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE) && (!hasElse);
                if (ambiguousElseClause) {
                    cc.beginBlock();
                }
                add("if(");
                add(first);
                add(")");
                if (hasElse) {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE, false);
                    add("else");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                    com.google.common.base.Preconditions.checkState(childCount == 2);
                }
                if (ambiguousElseClause) {
                    cc.endBlock();
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.TRUE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add(com.google.javascript.rhino.Node.tokenToName(type));
                break;
            case com.google.javascript.rhino.Token.CONTINUE :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("continue");
                if (childCount == 1) {
                    if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.DEBUGGER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("debugger");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.BREAK :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("break");
                if (childCount == 1) {
                    if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.EXPR_VOID :
                throw new java.lang.Error("Unexpected EXPR_VOID. Should be EXPR_RESULT.");
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first, com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR);
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.NEW :
                add("new ");
                int precedence = com.google.javascript.jscomp.NodeUtil.precedence(type);
                if (com.google.javascript.jscomp.NodeUtil.containsType(first, com.google.javascript.rhino.Token.CALL, new com.google.javascript.jscomp.NodeUtil.MatchNotFunction())) {
                    precedence = com.google.javascript.jscomp.NodeUtil.precedence(first.getType()) + 1;
                }
                addExpr(first, precedence);
                com.google.javascript.rhino.Node next = first.getNext();
                if (next != null) {
                    add("(");
                    addList(next);
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                if (childCount != ((n.getParent() != null) && (n.getParent().getType() == com.google.javascript.rhino.Token.OBJECTLIT) ? 1 : 0)) {
                    throw new java.lang.IllegalStateException("Unexpected String children: " + n.getParent().toStringTree());
                }
                addJsString(n.getString());
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("delete ");
                add(first);
                break;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                {
                    boolean needsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                    if (needsParens) {
                        add("(");
                    }
                    add("{");
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        if (c != first) {
                            cc.listSeparator();
                        }
                        if ((c.getType() == com.google.javascript.rhino.Token.GET) || (c.getType() == com.google.javascript.rhino.Token.SET)) {
                            add(c);
                        } else {
                            com.google.common.base.Preconditions.checkState(c.getType() == com.google.javascript.rhino.Token.STRING);
                            java.lang.String key = c.getString();
                            if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {
                                add(key);
                            } else {
                                double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);
                                if (!java.lang.Double.isNaN(d)) {
                                    cc.addNumber(d);
                                } else {
                                    addExpr(c, 1);
                                }
                            }
                            add(":");
                            addExpr(c.getFirstChild(), 1);
                        }
                    }
                    add("}");
                    if (needsParens) {
                        add(")");
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.SWITCH :
                add("switch(");
                add(first);
                add(")");
                cc.beginBlock();
                addAllSiblings(first.getNext());
                cc.endBlock(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("case ");
                add(first);
                addCaseBody(last);
                break;
            case com.google.javascript.rhino.Token.DEFAULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("default");
                addCaseBody(first);
                break;
            case com.google.javascript.rhino.Token.LABEL :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {
                    throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                }
                add(first);
                add(":");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), true);
                break;
            case com.google.javascript.rhino.Token.SETNAME :
                break;
            default :
                throw new java.lang.Error((("Unknown type " + type) + "\n") + n.toStringTree());
        }
        cc.endSourceMapping(n);
    }

    static boolean isSimpleNumber(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if ((c < '0') || (c > '9')) {
                return false;
            }
        }
        return len > 0;
    }

    static double getSimpleNumber(java.lang.String s) {
        if (com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(s)) {
            try {
                long l = java.lang.Long.parseLong(s);
                if (l < com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                    return l;
                }
            } catch (java.lang.NumberFormatException e) {
            }
        }
        return java.lang.Double.NaN;
    }

    private boolean isIndirectEval(com.google.javascript.rhino.Node n) {
        return ((n.getType() == com.google.javascript.rhino.Token.NAME) && "eval".equals(n.getString())) && (!n.getBooleanProp(com.google.javascript.rhino.Node.DIRECT_EVAL));
    }

    private void addNonEmptyStatement(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context, boolean allowNonBlockChild) {
        com.google.javascript.rhino.Node nodeToProcess = n;
        if ((!allowNonBlockChild) && (n.getType() != com.google.javascript.rhino.Token.BLOCK)) {
            throw new java.lang.Error("Missing BLOCK child.");
        }
        if (n.getType() == com.google.javascript.rhino.Token.BLOCK) {
            int count = com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2);
            if (count == 0) {
                if (cc.shouldPreserveExtraBlocks()) {
                    cc.beginBlock();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                } else {
                    cc.endStatement(true);
                }
                return;
            }
            if (count == 1) {
                com.google.javascript.rhino.Node firstAndOnlyChild = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n);
                boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();
                if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {
                    cc.beginBlock();
                    add(firstAndOnlyChild, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                    cc.maybeLineBreak();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    return;
                } else {
                    nodeToProcess = firstAndOnlyChild;
                }
            }
            if (count > 1) {
                context = com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
            }
        }
        if (nodeToProcess.getType() == com.google.javascript.rhino.Token.EMPTY) {
            cc.endStatement(true);
        } else {
            add(nodeToProcess, context);
            if (nodeToProcess.getType() == com.google.javascript.rhino.Token.VAR) {
                cc.endStatement();
            }
        }
    }

    private boolean isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node n) {
        if (n.getType() == com.google.javascript.rhino.Token.LABEL) {
            com.google.javascript.rhino.Node labeledStatement = n.getLastChild();
            if (labeledStatement.getType() != com.google.javascript.rhino.Token.BLOCK) {
                return isOneExactlyFunctionOrDo(labeledStatement);
            } else if (com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2) == 1) {
                return isOneExactlyFunctionOrDo(com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n));
            } else {
                return false;
            }
        } else {
            return (n.getType() == com.google.javascript.rhino.Token.FUNCTION) || (n.getType() == com.google.javascript.rhino.Token.DO);
        }
    }

    void addLeftExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        addExpr(n, minPrecedence, context);
    }

    void addExpr(com.google.javascript.rhino.Node n, int minPrecedence) {
        addExpr(n, minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    private void addExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if ((com.google.javascript.jscomp.NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE) && (n.getType() == com.google.javascript.rhino.Token.IN))) {
            add("(");
            add(n, clearContextForNoInOperator(context));
            add(")");
        } else {
            add(n, context);
        }
    }

    void addList(com.google.javascript.rhino.Node firstInList) {
        addList(firstInList, true, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument) {
        addList(firstInList, isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context lhsContext) {
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            boolean isFirst = n == firstInList;
            if (isFirst) {
                addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
            } else {
                cc.listSeparator();
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0);
            }
        }
    }

    void addArrayList(com.google.javascript.rhino.Node firstInList) {
        boolean lastWasEmpty = false;
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            if (n != firstInList) {
                cc.listSeparator();
            }
            addExpr(n, 1);
            lastWasEmpty = n.getType() == com.google.javascript.rhino.Token.EMPTY;
        }
        if (lastWasEmpty) {
            cc.listSeparator();
        }
    }

    void addCaseBody(com.google.javascript.rhino.Node caseBody) {
        cc.beginCaseBody();
        add(caseBody);
        cc.endCaseBody();
    }

    void addAllSiblings(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n; c != null; c = c.getNext()) {
            add(c);
        }
    }

    void addJsString(java.lang.String s) {
        java.lang.String cached = ESCAPED_JS_STRINGS.get(s);
        if (cached == null) {
            cached = jsString(s);
            ESCAPED_JS_STRINGS.put(s, cached);
        }
        add(cached);
    }

    java.lang.String jsString(java.lang.String s) {
        int singleq = 0;
        int doubleq = 0;
        for (int i = 0; i < s.length(); i++) {
            switch (s.charAt(i)) {
                case '"' :
                    doubleq++;
                    break;
                case '\'' :
                    singleq++;
                    break;
            }
        }
        java.lang.String doublequote;
        java.lang.String singlequote;
        char quote;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(177).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(177).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(177).collectInput("singleq",singleq);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(177).collectInput("com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",com.google.javascript.jscomp.CodeGenerator.HEX_CHARS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(177).collectInput("com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS",com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(177).collectInput("s",s);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(177).collectInput("doubleq",doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(177).collectInput("singleq < doubleq",singleq < doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(177).collectInput("com.google.javascript.jscomp.CodeGenerator.this.cc",com.google.javascript.jscomp.CodeGenerator.this.cc);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(177).collectInput("com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder",com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(177).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(177).collectionEnds();
        }
        if (runtimeAngelicValue) if (singleq < doubleq) {
            quote = '\'';
            doublequote = "\"";
            singlequote = "\\\'";
        } else {
            quote = '\"';
            doublequote = "\\\"";
            singlequote = "\'";
        }
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder);
    }

    static java.lang.String regexpEscape(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '/', "\"", "'", "\\", outputCharsetEncoder);
    }

    static java.lang.String escapeToDoubleQuotedJsString(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '"', "\\\"", "\'", "\\\\", null);
    }

    static java.lang.String regexpEscape(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.regexpEscape(s, null);
    }

    static java.lang.String strEscape(java.lang.String s, char quote, java.lang.String doublequoteEscape, java.lang.String singlequoteEscape, java.lang.String backslashEscape, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder(s.length() + 2);
        sb.append(quote);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch (c) {
                case '\u0000' :
                    sb.append("\\x00");
                    break;
                case '\n' :
                    sb.append("\\n");
                    break;
                case '\r' :
                    sb.append("\\r");
                    break;
                case '\t' :
                    sb.append("\\t");
                    break;
                case '\\' :
                    sb.append(backslashEscape);
                    break;
                case '\"' :
                    sb.append(doublequoteEscape);
                    break;
                case '\'' :
                    sb.append(singlequoteEscape);
                    break;
                case '>' :
                    if ((i >= 2) && (((s.charAt(i - 1) == '-') && (s.charAt(i - 2) == '-')) || ((s.charAt(i - 1) == ']') && (s.charAt(i - 2) == ']')))) {
                        sb.append("\\>");
                    } else {
                        sb.append(c);
                    }
                    break;
                case '<' :
                    final java.lang.String END_SCRIPT = "/script";
                    final java.lang.String START_COMMENT = "!--";
                    if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {
                        sb.append("<\\");
                    } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {
                        sb.append("<\\");
                    } else {
                        sb.append(c);
                    }
                    break;
                default :
                    if (outputCharsetEncoder != null) {
                        if (outputCharsetEncoder.canEncode(c)) {
                            sb.append(c);
                        } else {
                            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                        }
                    } else if ((c > 0x1f) && (c < 0x7f)) {
                        sb.append(c);
                    } else {
                        com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                    }
            }
        }
        sb.append(quote);
        return sb.toString();
    }

    static java.lang.String identifierEscape(java.lang.String s) {
        if (com.google.javascript.jscomp.NodeUtil.isLatin(s)) {
            return s;
        }
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if ((c > 0x1f) && (c < 0x7f)) {
                sb.append(c);
            } else {
                com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
            }
        }
        return sb.toString();
    }

    private static int getNonEmptyChildCount(com.google.javascript.rhino.Node n, int maxCount) {
        int i = 0;
        com.google.javascript.rhino.Node c = n.getFirstChild();
        for (; (c != null) && (i < maxCount); c = c.getNext()) {
            if (c.getType() == com.google.javascript.rhino.Token.BLOCK) {
                i += com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(c, maxCount - i);
            } else if (c.getType() != com.google.javascript.rhino.Token.EMPTY) {
                i++;
            }
        }
        return i;
    }

    private static com.google.javascript.rhino.Node getFirstNonEmptyChild(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.getType() == com.google.javascript.rhino.Token.BLOCK) {
                com.google.javascript.rhino.Node result = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(c);
                if (result != null) {
                    return result;
                }
            } else if (c.getType() != com.google.javascript.rhino.Token.EMPTY) {
                return c;
            }
        }
        return null;
    }

    enum Context {

        STATEMENT,
        BEFORE_DANGLING_ELSE,
        START_OF_EXPR,
        PRESERVE_BLOCK,
        IN_FOR_INIT_CLAUSE,
        OTHER;}

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNonEmptyExpression(com.google.javascript.jscomp.CodeGenerator.Context currentContext) {
        return currentContext == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE ? com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context clearContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.OTHER : context;
    }

    private static void appendHexJavaScriptRepresentation(java.lang.StringBuilder sb, char c) {
        try {
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(c, sb);
        } catch (java.io.IOException ex) {
            throw new java.lang.RuntimeException(ex);
        }
    }

    private static void appendHexJavaScriptRepresentation(int codePoint, java.lang.Appendable out) throws java.io.IOException {
        if (java.lang.Character.isSupplementaryCodePoint(codePoint)) {
            char[] surrogates = java.lang.Character.toChars(codePoint);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[0], out);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[1], out);
            return;
        }
        out.append("\\u").append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 12) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 8) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 4) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[codePoint & 0xf]);
    }
}
[2299131] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659826072048
GPR[EPVATF]-1659826072277
GPR[SPS]-1659826072277
[2300039] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:969.
GPR[EPS]-1659826072957
GPR[ESUN]-1659826072958
GPR[SSUN]-1659826072958
-718432441
GPR[SPVATF]-1659826073200
GPR[EPVATF]-1659826073425
GPR[SPS]-1659826073425
[2301131] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:960.
GPR[EPS]-1659826074048
GPR[ESUN]-1659826074048
GPR[SSUN]-1659826074048
-718432441
GPR[ESUN]-1659826074288
GPR[SSUN]-1659826074288
-718432441
GPR[ESUN]-1659826074522
GPR[SSUN]-1659826074522
-718432441
GPR[SPVATF]-1659826074757
GPR[EPVATF]-1659826074980
GPR[SPS]-1659826074980
[2302702] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:953.
GPR[EPS]-1659826075619
GPR[ESUN]-1659826075619
GPR[SSUN]-1659826075619
-718432441
GPR[SPVATF]-1659826075859
GPR[EPVATF]-1659826076085
GPR[SPS]-1659826076085
[2303791] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:951.
GPR[EPS]-1659826076708
GPR[ESUN]-1659826076708
GPR[SSUN]-1659826076708
-718432441
GPR[SPVATF]-1659826076942
GPR[EPVATF]-1659826077169
GPR[SPS]-1659826077169
[2304942] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:950.
GPR[EPS]-1659826077859
GPR[ESUN]-1659826077859
GPR[SSUN]-1659826077859
-718432441
GPR[SPVATF]-1659826078096
GPR[EPVATF]-1659826078325
GPR[SPS]-1659826078325
[2306097] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:949.
GPR[EPS]-1659826079014
GPR[SPVATF]-1659826079014
GPR[EPVATF]-1659826079237
GPR[SPS]-1659826079237
[2306956] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:949.
GPR[EPS]-1659826079873
GPR[ESUN]-1659826079873
GPR[SSUN]-1659826079873
-718432441
GPR[ESUN]-1659826080112
GPR[SSUN]-1659826080112
-534884160
GPR[ESUN]-1659826080428
GPR[SSUN]-1659826080428
-534884160
GPR[SPVATF]-1659826080754
GPR[EPVATF]-1659826080973
GPR[SPS]-1659826080973
[2308833] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1882.
GPR[EPS]-1659826081750
GPR[ESUN]-1659826081750
GPR[SSUN]-1659826081750
-534884160
GPR[SPVATF]-1659826082078
GPR[EPVATF]-1659826082307
GPR[SPS]-1659826082307
[2310136] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1881.
GPR[EPS]-1659826083053
GPR[ESUN]-1659826083053
GPR[SSUN]-1659826083053
-534884160
GPR[SPVATF]-1659826083438
GPR[EPVATF]-1659826083668
GPR[SPS]-1659826083668
[2311490] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1880.
GPR[EPS]-1659826084407
GPR[ESUN]-1659826084407
GPR[SSUN]-1659826084407
-718432441
GPR[ESUN]-1659826084652
GPR[SSUN]-1659826084652
-718432441
GPR[SPVATF]-1659826084892
GPR[EPVATF]-1659826085127
GPR[SPS]-1659826085127
[2312852] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1073.
GPR[EPS]-1659826085769
GPR[ESUN]-1659826085769
GPR[SSUN]-1659826085769
-718432441
GPR[SPVATF]-1659826086012
GPR[EPVATF]-1659826086247
GPR[SPS]-1659826086247
[2313979] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1012.
GPR[EPS]-1659826086896
GPR[ESUN]-1659826086896
GPR[SSUN]-1659826086896
-718432441
GPR[SPVATF]-1659826087135
GPR[EPVATF]-1659826087374
GPR[SPS]-1659826087374
[2315096] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1011.
GPR[EPS]-1659826088013
GPR[ESUN]-1659826088013
GPR[SSUN]-1659826088013
-718432441
GPR[ESUN]-1659826088257
GPR[SSUN]-1659826088257
-718432441
GPR[SPVATF]-1659826088498
GPR[EPVATF]-1659826088786
GPR[SPS]-1659826088786
[2316517] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:172.
GPR[EPS]-1659826089434
GPR[ESUN]-1659826089434
GPR[SSUN]-1659826089434
GPR[ESUN]-1659826089434
GPR[SSUN]-1659826089434
GPR[ESUN]-1659826089434
GPR[SSUN]-1659826089434
-718432441
GPR[SPVATF]-1659826089667
GPR[EPVATF]-1659826089884
GPR[SPS]-1659826089884
[2317572] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:177.
GPR[EPS]-1659826090489
GPR[ESUN]-1659826090489
GPR[SSUN]-1659826090489
-718432441
GPR[SPVATF]-1659826090712
GPR[EPVATF]-1659826090929
GPR[SPS]-1659826090929
[2318620] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:176.
GPR[EPS]-1659826091537
GPR[ESUN]-1659826091537
GPR[SSUN]-1659826091537
-718432441
GPR[SPVATF]-1659826092590
GPR[EPVATF]-1659826092801
GPR[SPS]-1659826092801
[2320483] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:171.
GPR[EPS]-1659826093400
GPR[SPVATF]-1659826093400
GPR[EPVATF]-1659826093690
GPR[SPS]-1659826093690
[2321929] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:171.
GPR[EPS]-1659826094846
GPR[ESUN]-1659826094846
GPR[SSUN]-1659826094846
-718432441
GPR[SPVATF]-1659826095068
GPR[EPVATF]-1659826095564
GPR[SPS]-1659826095564
[2323280] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:170.
GPR[EPS]-1659826096197
GPR[ESUN]-1659826096198
GPR[SSUN]-1659826096198
-1345859678
GPR[ESUN]-1659826096453
GPR[SSUN]-1659826096453
GPR[ESUN]-1659826096453
GPR[SSUN]-1659826096453
-1117079791
GPR[SPVATF]-1659826096655
GPR[EPVATF]-1659826096892
GPR[SPS]-1659826096892
[2324437] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:483.
GPR[EPS]-1659826097354
GPR[ESUN]-1659826097354
GPR[SSUN]-1659826097354
-718432441
GPR[SPVATF]-1659826097607
GPR[EPVATF]-1659826097849
GPR[SPS]-1659826097849
[2325567] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:567.
GPR[EPS]-1659826098484
GPR[ESUN]-1659826098484
GPR[SSUN]-1659826098484
-718432441
GPR[SPVATF]-1659826098741
GPR[EPVATF]-1659826098961
GPR[SPS]-1659826098961
[2326671] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:566.
GPR[EPS]-1659826099588
GPR[ESUN]-1659826099588
GPR[SSUN]-1659826099588
-718432441
GPR[SPVATF]-1659826099828
GPR[EPVATF]-1659826100056
GPR[SPS]-1659826100056
[2327772] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:565.
GPR[EPS]-1659826100689
GPR[ESUN]-1659826100690
GPR[SSUN]-1659826100690
-1117079791
GPR[ESUN]-1659826100897
GPR[SSUN]-1659826100897
-1117079791
GPR[SPVATF]-1659826101102
GPR[EPVATF]-1659826101331
GPR[SPS]-1659826101331
[2328877] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:482.
GPR[EPS]-1659826101794
GPR[SPVATF]-1659826101795
GPR[EPVATF]-1659826102435
GPR[SPS]-1659826102435
[2330795] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:482.
GPR[EPS]-1659826103712
GPR[ESUN]-1659826103712
GPR[SSUN]-1659826103712
-1117079791
GPR[SPVATF]-1659826104157
GPR[EPVATF]-1659826104397
GPR[SPS]-1659826104397
[2331953] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:481.
GPR[EPS]-1659826104870
GPR[ESUN]-1659826104870
GPR[SSUN]-1659826104870
-1117079791
GPR[SPVATF]-1659826105076
GPR[EPVATF]-1659826105306
GPR[SPS]-1659826105306
[2332834] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:480.
GPR[EPS]-1659826105751
GPR[ESUN]-1659826105751
GPR[SSUN]-1659826105751
-1117079791
GPR[ESUN]-1659826105949
GPR[SSUN]-1659826105949
-1117079791
GPR[SPVATF]-1659826106150
GPR[EPVATF]-1659826106382
GPR[SPS]-1659826106382
[2333946] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:129.
GPR[EPS]-1659826106863
GPR[ESUN]-1659826106863
GPR[SSUN]-1659826106863
GPR[ESUN]-1659826106863
GPR[SSUN]-1659826106863
GPR[ESUN]-1659826106863
GPR[SSUN]-1659826106863
GPR[ESUN]-1659826106863
GPR[SSUN]-1659826106863
GPR[ESUN]-1659826106863
GPR[SSUN]-1659826106863
GPR[ESUN]-1659826106863
GPR[SSUN]-1659826106863
GPR[ESUN]-1659826106863
GPR[SSUN]-1659826106863
2433571
GPR[SPVATF]-1659826107111
GPR[EPVATF]-1659826107339
GPR[SPS]-1659826107339
[2334988] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1640.
GPR[EPS]-1659826107905
GPR[ESUN]-1659826107905
GPR[SSUN]-1659826107905
704176156
GPR[ESUN]-1659826108112
GPR[SSUN]-1659826108112
704176156
GPR[SPVATF]-1659826108318
GPR[EPVATF]-1659826108542
GPR[SPS]-1659826108542
[2336096] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:225.
GPR[EPS]-1659826109013
GPR[SPVATF]-1659826109013
GPR[EPVATF]-1659826109243
GPR[SPS]-1659826109243
[2336805] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:225.
GPR[EPS]-1659826109722
GPR[ESUN]-1659826109722
GPR[SSUN]-1659826109722
704176156
GPR[SPVATF]-1659826109930
GPR[EPVATF]-1659826110161
GPR[SPS]-1659826110161
[2337738] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:224.
GPR[EPS]-1659826110655
GPR[ESUN]-1659826110655
GPR[SSUN]-1659826110655
704176156
GPR[SPVATF]-1659826110872
GPR[EPVATF]-1659826111125
GPR[SPS]-1659826111125
[2338702] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:167.
GPR[EPS]-1659826111619
GPR[ESUN]-1659826111619
GPR[SSUN]-1659826111619
704176156
GPR[ESUN]-1659826111831
GPR[SSUN]-1659826111831
-1345859678
GPR[ESUN]-1659826112086
GPR[SSUN]-1659826112086
-1345859678
GPR[SPVATF]-1659826112337
GPR[EPVATF]-1659826112558
GPR[SPS]-1659826112558
GPR[EPS]-1659826182425
GPR[ESUN]-1659826182425
GPR[SSUN]-1659826182425
-1345859678
GPR[SPVATF]-1659826183051
GPR[EPVATF]-1659826183290
GPR[SPS]-1659826183290
[2410951] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:794.
GPR[EPS]-1659826183868
GPR[ESUN]-1659826183868
GPR[SSUN]-1659826183868
-1345859678
GPR[SPVATF]-1659826184122
GPR[EPVATF]-1659826184361
GPR[SPS]-1659826184361
[2412092] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:781.
GPR[EPS]-1659826185009
GPR[SPVATF]-1659826185010
GPR[EPVATF]-1659826185243
GPR[SPS]-1659826185243
[2412935] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:781.
GPR[EPS]-1659826185852
GPR[ESUN]-1659826185852
GPR[SSUN]-1659826185852
-1345859678
GPR[ESUN]-1659826186105
GPR[SSUN]-1659826186105
-1345859678
GPR[ESUN]-1659826186362
GPR[SSUN]-1659826186362
GPR[ESUN]-1659826186362
GPR[SSUN]-1659826186362
GPR[ESUN]-1659826186362
GPR[SSUN]-1659826186362
GPR[ESUN]-1659826186362
GPR[SSUN]-1659826186362
GPR[ESUN]-1659826186362
GPR[SSUN]-1659826186362
GPR[ESUN]-1659826186362
GPR[SSUN]-1659826186362
GPR[ESUN]-1659826186362
GPR[SSUN]-1659826186362
GPR[ESUN]-1659826186362
GPR[SSUN]-1659826186362
GPR[ESUN]-1659826186362
GPR[SSUN]-1659826186362
GPR[ESUN]-1659826186362
GPR[SSUN]-1659826186362
GPR[ESUN]-1659826186362
GPR[SSUN]-1659826186362
GPR[ESUN]-1659826186362
GPR[SSUN]-1659826186362
GPR[ESUN]-1659826186362
GPR[SSUN]-1659826186362
-1345859678
GPR[SPVATF]-1659826186613
GPR[EPVATF]-1659826186848
GPR[SPS]-1659826186848
[2414518] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:769.
GPR[EPS]-1659826187435
GPR[SPVATF]-1659826187436
GPR[EPVATF]-1659826187672
GPR[SPS]-1659826187672
[2415375] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:769.
GPR[EPS]-1659826188292
GPR[ESUN]-1659826188292
GPR[SSUN]-1659826188292
-1117079791
GPR[ESUN]-1659826188498
GPR[SSUN]-1659826188498
-1117079791
GPR[SPVATF]-1659826188697
GPR[EPVATF]-1659826188928
GPR[SPS]-1659826188928
[2416473] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:162.
GPR[EPS]-1659826189390
GPR[ESUN]-1659826189390
GPR[SSUN]-1659826189390
1508981886
GPR[ESUN]-1659826189602
GPR[SSUN]-1659826189602
-1117079791
GPR[ESUN]-1659826189801
GPR[SSUN]-1659826189801
-1117079791
GPR[SPVATF]-1659826190008
GPR[EPVATF]-1659826190246
GPR[SPS]-1659826190246
[2417794] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:751.
GPR[EPS]-1659826190711
GPR[ESUN]-1659826190711
GPR[SSUN]-1659826190711
-1117079791
GPR[SPVATF]-1659826190916
GPR[EPVATF]-1659826191153
GPR[SPS]-1659826191153
[2418698] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:750.
GPR[EPS]-1659826191615
GPR[ESUN]-1659826191616
GPR[SSUN]-1659826191616
-1117079791
GPR[SPVATF]-1659826191818
GPR[EPVATF]-1659826192060
GPR[SPS]-1659826192060
[2419597] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:749.
GPR[EPS]-1659826192514
GPR[ESUN]-1659826192514
GPR[SSUN]-1659826192514
2433571
GPR[SPVATF]-1659826192757
GPR[EPVATF]-1659826192993
GPR[SPS]-1659826192993
[2420695] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:808.
GPR[EPS]-1659826193612
GPR[ESUN]-1659826193612
GPR[SSUN]-1659826193613
GPR[ESUN]-1659826193613
GPR[SSUN]-1659826193613
GPR[ESUN]-1659826193613
GPR[SSUN]-1659826193613
GPR[ESUN]-1659826193613
GPR[SSUN]-1659826193613
-1117079791
GPR[ESUN]-1659826193803
GPR[SSUN]-1659826193803
-1117079791
GPR[SPVATF]-1659826194010
GPR[EPVATF]-1659826194228
GPR[SPS]-1659826194228
[2421763] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:597.
GPR[EPS]-1659826194680
GPR[ESUN]-1659826194680
GPR[SSUN]-1659826194680
GPR[ESUN]-1659826194680
GPR[SSUN]-1659826194680
-1117079791
GPR[ESUN]-1659826194882
GPR[SSUN]-1659826194882
-1117079791
GPR[SPVATF]-1659826195081
GPR[EPVATF]-1659826195334
GPR[SPS]-1659826195334
[2423673] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:669.
GPR[EPS]-1659826196590
GPR[ESUN]-1659826196590
GPR[SSUN]-1659826196590
-1117079791
GPR[SPVATF]-1659826196793
GPR[EPVATF]-1659826197022
GPR[SPS]-1659826197022
[2424567] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:668.
GPR[EPS]-1659826197484
GPR[ESUN]-1659826197484
GPR[SSUN]-1659826197484
-1117079791
GPR[ESUN]-1659826197682
GPR[SSUN]-1659826197682
-1117079791
GPR[SPVATF]-1659826197880
GPR[EPVATF]-1659826198280
GPR[SPS]-1659826198280
[2425867] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:252.
GPR[EPS]-1659826198784
GPR[ESUN]-1659826198784
GPR[SSUN]-1659826198784
2433571
GPR[SPVATF]-1659826199025
GPR[EPVATF]-1659826199270
GPR[SPS]-1659826199270
[2426964] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:814.
GPR[EPS]-1659826199881
GPR[ESUN]-1659826199881
GPR[SSUN]-1659826199881
2433571
GPR[SPVATF]-1659826200120
GPR[EPVATF]-1659826200358
GPR[SPS]-1659826200358
[2428052] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:699.
GPR[EPS]-1659826200969
GPR[ESUN]-1659826200969
GPR[SSUN]-1659826200969
80988634
GPR[SPVATF]-1659826201154
GPR[EPVATF]-1659826201394
GPR[SPS]-1659826201394
[2428866] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Token:276.
GPR[EPS]-1659826201783
GPR[ESUN]-1659826201784
GPR[SSUN]-1659826201784
1187751237
GPR[ESUN]-1659826202063
GPR[SSUN]-1659826202063
GPR[ESUN]-1659826202063
GPR[SSUN]-1659826202063
1187751237
GPR[ESUN]-1659826202336
GPR[SSUN]-1659826202336
2433571
GPR[ESUN]-1659826202578
GPR[SSUN]-1659826202578
2433571
GPR[SPVATF]-1659826202817
GPR[EPVATF]-1659826203053
GPR[SPS]-1659826203053
[2430767] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:816.
GPR[EPS]-1659826203684
GPR[ESUN]-1659826203684
GPR[SSUN]-1659826203684
2433571
GPR[SPVATF]-1659826203924
GPR[EPVATF]-1659826204160
GPR[SPS]-1659826204160
[2431862] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:815.
GPR[EPS]-1659826204779
GPR[ESUN]-1659826204779
GPR[SSUN]-1659826204779
2433571
GPR[SPVATF]-1659826205016
GPR[EPVATF]-1659826205248
GPR[SPS]-1659826205248
[2432934] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:813.
GPR[EPS]-1659826205851
GPR[SPVATF]-1659826205852
GPR[EPVATF]-1659826206086
GPR[SPS]-1659826206086
[2433788] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:813.
GPR[EPS]-1659826206705
GPR[ESUN]-1659826206705
GPR[SSUN]-1659826206705
2433571
GPR[SPVATF]-1659826206945
GPR[EPVATF]-1659826207172
GPR[SPS]-1659826207172
[2434870] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:807.
GPR[EPS]-1659826207787
GPR[SPVATF]-1659826207787
GPR[EPVATF]-1659826208016
GPR[SPS]-1659826208016
[2435695] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:807.
GPR[EPS]-1659826208612
GPR[ESUN]-1659826208613
GPR[SSUN]-1659826208613
2433571
GPR[SPVATF]-1659826208848
GPR[EPVATF]-1659826209078
GPR[SPS]-1659826209078
[2436785] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:806.
GPR[EPS]-1659826209702
GPR[ESUN]-1659826209702
GPR[SSUN]-1659826209702
2433571
GPR[SPVATF]-1659826209942
GPR[EPVATF]-1659826210172
GPR[SPS]-1659826210172
[2437887] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:805.
GPR[EPS]-1659826210804
GPR[ESUN]-1659826210804
GPR[SSUN]-1659826210804
2433571
GPR[SPVATF]-1659826211045
GPR[EPVATF]-1659826211280
GPR[SPS]-1659826211280
[2438974] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:803.
GPR[EPS]-1659826211891
GPR[ESUN]-1659826211891
GPR[SSUN]-1659826211891
2433571
GPR[SPVATF]-1659826212122
GPR[EPVATF]-1659826212356
GPR[SPS]-1659826212356
[2440047] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:799.
GPR[EPS]-1659826212964
GPR[ESUN]-1659826212964
GPR[SSUN]-1659826212964
2433571
GPR[SPVATF]-1659826213204
GPR[EPVATF]-1659826213440
GPR[SPS]-1659826213440
[2441135] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:797.
GPR[EPS]-1659826214052
GPR[ESUN]-1659826214052
GPR[SSUN]-1659826214052
2433571
GPR[SPVATF]-1659826214295
GPR[EPVATF]-1659826214525
GPR[SPS]-1659826214525
[2442221] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:2107.
GPR[EPS]-1659826215138
GPR[ESUN]-1659826215139
GPR[SSUN]-1659826215139
2433571
GPR[SPVATF]-1659826215378
GPR[EPVATF]-1659826215608
GPR[SPS]-1659826215608
[2443288] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:2106.
GPR[EPS]-1659826216205
GPR[ESUN]-1659826216205
GPR[SSUN]-1659826216205
-1117079791
GPR[SPVATF]-1659826216406
GPR[EPVATF]-1659826216643
GPR[SPS]-1659826216643
[2444189] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:369.
GPR[EPS]-1659826217106
GPR[ESUN]-1659826217106
GPR[SSUN]-1659826217106
1537627151
GPR[ESUN]-1659826217316
GPR[SSUN]-1659826217316
-1345859678
GPR[ESUN]-1659826217585
GPR[SSUN]-1659826217585
GPR[ESUN]-1659826217585
GPR[SSUN]-1659826217585
GPR[ESUN]-1659826217585
GPR[SSUN]-1659826217585
GPR[ESUN]-1659826217585
GPR[SSUN]-1659826217585
GPR[ESUN]-1659826217585
GPR[SSUN]-1659826217585
GPR[ESUN]-1659826217585
GPR[SSUN]-1659826217585
2433571
GPR[ESUN]-1659826217821
GPR[SSUN]-1659826217821
2433571
GPR[SPVATF]-1659826218059
GPR[EPVATF]-1659826218284
GPR[SPS]-1659826218284
[2445977] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:698.
GPR[EPS]-1659826218894
GPR[SPVATF]-1659826218894
GPR[EPVATF]-1659826219134
GPR[SPS]-1659826219134
[2446821] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:698.
GPR[EPS]-1659826219738
GPR[ESUN]-1659826219738
GPR[SSUN]-1659826219738
2433571
GPR[SPVATF]-1659826219974
GPR[EPVATF]-1659826220206
GPR[SPS]-1659826220206
[2447909] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:697.
GPR[EPS]-1659826220826
GPR[ESUN]-1659826220826
GPR[SSUN]-1659826220826
2433571
GPR[SPVATF]-1659826221105
GPR[EPVATF]-1659826221342
GPR[SPS]-1659826221342
[2449030] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:696.
GPR[EPS]-1659826221947
GPR[ESUN]-1659826221947
GPR[SSUN]-1659826221947
2433571
GPR[SPVATF]-1659826222185
GPR[EPVATF]-1659826222418
GPR[SPS]-1659826222418
[2450109] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:695.
GPR[EPS]-1659826223026
GPR[ESUN]-1659826223026
GPR[SSUN]-1659826223027
2433571
GPR[SPVATF]-1659826223265
GPR[EPVATF]-1659826223503
GPR[SPS]-1659826223503
[2451195] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:694.
GPR[EPS]-1659826224112
GPR[ESUN]-1659826224112
GPR[SSUN]-1659826224112
2433571
GPR[SPVATF]-1659826224350
GPR[EPVATF]-1659826224590
GPR[SPS]-1659826224590
[2452277] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:693.
GPR[EPS]-1659826225194
GPR[ESUN]-1659826225195
GPR[SSUN]-1659826225195
2433571
GPR[SPVATF]-1659826225436
GPR[EPVATF]-1659826225675
GPR[SPS]-1659826225675
[2453371] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:785.
GPR[EPS]-1659826226288
GPR[ESUN]-1659826226288
GPR[SSUN]-1659826226288
-718432441
GPR[SPVATF]-1659826226572
GPR[EPVATF]-1659826226811
GPR[SPS]-1659826226811
[2454537] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:471.
GPR[EPS]-1659826227455
GPR[ESUN]-1659826227455
GPR[SSUN]-1659826227455
-718432441
GPR[SPVATF]-1659826227692
GPR[EPVATF]-1659826227930
GPR[SPS]-1659826227930
[2455655] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:470.
GPR[EPS]-1659826228572
GPR[ESUN]-1659826228572
GPR[SSUN]-1659826228572
-718432441
GPR[SPVATF]-1659826228809
GPR[EPVATF]-1659826229046
GPR[SPS]-1659826229046
[2456766] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:469.
GPR[EPS]-1659826229683
GPR[ESUN]-1659826229683
GPR[SSUN]-1659826229683
-718432441
GPR[SPVATF]-1659826229914
GPR[EPVATF]-1659826230142
GPR[SPS]-1659826230142
[2457863] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:466.
GPR[EPS]-1659826230780
GPR[SPVATF]-1659826230781
GPR[EPVATF]-1659826231019
GPR[SPS]-1659826231019
[2458794] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:466.
GPR[EPS]-1659826231711
GPR[ESUN]-1659826231711
GPR[SSUN]-1659826231711
-718432441
GPR[SPVATF]-1659826231951
GPR[EPVATF]-1659826232195
GPR[SPS]-1659826232195
[2459924] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:465.
GPR[EPS]-1659826232841
GPR[ESUN]-1659826232841
GPR[SSUN]-1659826232841
-718432441
GPR[SPVATF]-1659826233077
GPR[EPVATF]-1659826233316
GPR[SPS]-1659826233316
[2461915] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:462.
GPR[EPS]-1659826234832
GPR[SPVATF]-1659826234832
GPR[EPVATF]-1659826235062
GPR[SPS]-1659826235062
[2462785] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:462.
GPR[EPS]-1659826235702
GPR[ESUN]-1659826235702
GPR[SSUN]-1659826235702
-718432441
GPR[ESUN]-1659826235938
GPR[SSUN]-1659826235938
-718432441
GPR[SPVATF]-1659826236171
GPR[EPVATF]-1659826236420
GPR[SPS]-1659826236420
[2464209] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:458.
GPR[EPS]-1659826237127
GPR[ESUN]-1659826237127
GPR[SSUN]-1659826237127
-718432441
GPR[SPVATF]-1659826237426
GPR[EPVATF]-1659826237674
GPR[SPS]-1659826237674
[2465387] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:455.
GPR[EPS]-1659826238304
GPR[ESUN]-1659826238304
GPR[SSUN]-1659826238304
1187751237
GPR[SPVATF]-1659826238584
GPR[EPVATF]-1659826238825
GPR[SPS]-1659826238825
[2466564] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:486.
GPR[EPS]-1659826239481
GPR[ESUN]-1659826239482
GPR[SSUN]-1659826239482
-1345859678
GPR[SPVATF]-1659826239733
GPR[EPVATF]-1659826239972
GPR[SPS]-1659826239972
GPR[EPS]-1659826477076
GPR[ESUN]-1659826477076
GPR[SSUN]-1659826477076
GPR[ESUN]-1659826477076
GPR[SSUN]-1659826477076
GPR[ESUN]-1659826477076
GPR[SSUN]-1659826477076
GPR[ESUN]-1659826477076
GPR[SSUN]-1659826477076
1187751237
GPR[SPVATF]-1659826477705
GPR[EPVATF]-1659826477944
GPR[SPS]-1659826477944
[2705680] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2932.
GPR[EPS]-1659826478597
GPR[SPVATF]-1659826478598
GPR[EPVATF]-1659826478833
GPR[SPS]-1659826478833
[2706582] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2932.
GPR[EPS]-1659826479499
GPR[ESUN]-1659826479499
GPR[SSUN]-1659826479499
2433571
GPR[SPVATF]-1659826479744
GPR[EPVATF]-1659826479964
GPR[SPS]-1659826479964
[2707611] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:649.
GPR[EPS]-1659826480528
GPR[ESUN]-1659826480528
GPR[SSUN]-1659826480528
GPR[ESUN]-1659826480528
GPR[SSUN]-1659826480528
1537627151
GPR[ESUN]-1659826480730
GPR[SSUN]-1659826480730
-1345859678
GPR[ESUN]-1659826480972
GPR[SSUN]-1659826480972
-1345859678
GPR[SPVATF]-1659826481217
GPR[EPVATF]-1659826481444
GPR[SPS]-1659826481444
GPR[EPS]-1659826683319
GPR[SPVATF]-1659826683320
GPR[EPVATF]-1659826683586
GPR[SPS]-1659826683586
[4710403] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[ESUN]-1659828483320
GPR[SSUN]-1659828483320
-1345859678
GPR[ESUN]-1659828483821
GPR[SSUN]-1659828483821
GPR[ESUN]-1659828483821
GPR[SSUN]-1659828483821
GPR[ESUN]-1659828483821
GPR[SSUN]-1659828483821
GPR[ESUN]-1659828483821
GPR[SSUN]-1659828483821
GPR[ESUN]-1659828483821
GPR[SSUN]-1659828483821
GPR[ESUN]-1659828483821
GPR[SSUN]-1659828483821
GPR[ESUN]-1659828483821
GPR[SSUN]-1659828483821
GPR[ESUN]-1659828483821
GPR[SSUN]-1659828483821
GPR[ESUN]-1659828483821
GPR[SSUN]-1659828483821
GPR[ESUN]-1659828483821
GPR[SSUN]-1659828483821
GPR[ESUN]-1659828483821
GPR[SSUN]-1659828483821
GPR[ESUN]-1659828483821
GPR[SSUN]-1659828483821
GPR[ESUN]-1659828483821
GPR[SSUN]-1659828483821
GPR[ESUN]-1659828483821
GPR[SSUN]-1659828483821
GPR[ESUN]-1659828483821
GPR[SSUN]-1659828483821
GPR[ESUN]-1659828483821
GPR[SSUN]-1659828483821
GPR[ESUN]-1659828483821
GPR[SSUN]-1659828483821
GPR[ESUN]-1659828483821
GPR[SSUN]-1659828483821
GPR[ESUN]-1659828483821
GPR[SSUN]-1659828483821
GPR[ESUN]-1659828483821
GPR[SSUN]-1659828483821
1187751237
GPR[SPVATF]-1659828484096
GPR[EPVATF]-1659828484336
GPR[SPS]-1659828484336
[4712064] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2931.
GPR[EPS]-1659828484981
GPR[ESUN]-1659828484981
GPR[SSUN]-1659828484981
-1117079791
GPR[ESUN]-1659828485185
GPR[SSUN]-1659828485185
-1117079791
GPR[SPVATF]-1659828485379
GPR[EPVATF]-1659828485612
GPR[SPS]-1659828485612
[4713138] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:268.
GPR[EPS]-1659828486055
GPR[ESUN]-1659828486055
GPR[SSUN]-1659828486055
2433571
GPR[ESUN]-1659828486304
GPR[SSUN]-1659828486304
2433571
GPR[SPVATF]-1659828486544
GPR[EPVATF]-1659828486784
GPR[SPS]-1659828486784
[4714474] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:2105.
GPR[EPS]-1659828487391
GPR[SPVATF]-1659828487392
GPR[EPVATF]-1659828487627
GPR[SPS]-1659828487627
[4715345] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:2105.
GPR[EPS]-1659828488262
GPR[ESUN]-1659828488262
GPR[SSUN]-1659828488262
2433571
GPR[SPVATF]-1659828488505
GPR[EPVATF]-1659828488744
GPR[SPS]-1659828488744
[4716431] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:2102.
GPR[EPS]-1659828489348
GPR[ESUN]-1659828489348
GPR[SSUN]-1659828489348
2433571
GPR[SPVATF]-1659828489591
GPR[EPVATF]-1659828489824
GPR[SPS]-1659828489824
[4717513] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:2101.
GPR[EPS]-1659828490430
GPR[SPVATF]-1659828490430
GPR[EPVATF]-1659828490663
GPR[SPS]-1659828490663
[4718343] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:2101.
GPR[EPS]-1659828491260
GPR[ESUN]-1659828491260
GPR[SSUN]-1659828491260
-1117079791
GPR[ESUN]-1659828491465
GPR[SSUN]-1659828491465
-1117079791
GPR[SPVATF]-1659828491665
GPR[EPVATF]-1659828491902
GPR[SPS]-1659828491902
[4719437] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:363.
GPR[EPS]-1659828492354
GPR[ESUN]-1659828492354
GPR[SSUN]-1659828492354
-1117079791
GPR[SPVATF]-1659828492552
GPR[EPVATF]-1659828492787
GPR[SPS]-1659828492787
[4720315] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:362.
GPR[EPS]-1659828493232
GPR[ESUN]-1659828493232
GPR[SSUN]-1659828493232
-1117079791
GPR[SPVATF]-1659828493428
GPR[EPVATF]-1659828493670
GPR[SPS]-1659828493670
[4721203] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:361.
GPR[EPS]-1659828494120
GPR[ESUN]-1659828494120
GPR[SSUN]-1659828494120
-1117079791
GPR[SPVATF]-1659828494315
GPR[EPVATF]-1659828494548
GPR[SPS]-1659828494548
[4722084] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:360.
GPR[EPS]-1659828495001
GPR[ESUN]-1659828495001
GPR[SSUN]-1659828495001
-1117079791
GPR[SPVATF]-1659828495194
GPR[EPVATF]-1659828495425
GPR[SPS]-1659828495425
[4722945] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:359.
GPR[EPS]-1659828495862
GPR[ESUN]-1659828495862
GPR[SSUN]-1659828495863
-1117079791
GPR[ESUN]-1659828496108
GPR[SSUN]-1659828496108
-1117079791
GPR[SPVATF]-1659828496305
GPR[EPVATF]-1659828496543
GPR[SPS]-1659828496543
[4724076] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:347.
GPR[EPS]-1659828496993
GPR[ESUN]-1659828496993
GPR[SSUN]-1659828496993
-1117079791
GPR[SPVATF]-1659828497196
GPR[EPVATF]-1659828497433
GPR[SPS]-1659828497433
[4724963] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:346.
GPR[EPS]-1659828497880
GPR[ESUN]-1659828497880
GPR[SSUN]-1659828497880
-1117079791
GPR[SPVATF]-1659828498075
GPR[EPVATF]-1659828498311
GPR[SPS]-1659828498311
[4725833] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:345.
GPR[EPS]-1659828498750
GPR[ESUN]-1659828498750
GPR[SSUN]-1659828498750
704176156
GPR[ESUN]-1659828498955
GPR[SSUN]-1659828498955
704176156
GPR[ESUN]-1659828499157
GPR[SSUN]-1659828499157
704176156
GPR[SPVATF]-1659828499363
GPR[EPVATF]-1659828499606
GPR[SPS]-1659828499606
[4727154] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:164.
GPR[EPS]-1659828500071
GPR[ESUN]-1659828500071
GPR[SSUN]-1659828500071
704176156
GPR[SPVATF]-1659828500279
GPR[EPVATF]-1659828500523
GPR[SPS]-1659828500523
[4728062] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:163.
GPR[EPS]-1659828500979
GPR[ESUN]-1659828500979
GPR[SSUN]-1659828500979
704176156
GPR[SPVATF]-1659828501184
GPR[EPVATF]-1659828501428
GPR[SPS]-1659828501428
[4728975] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:143.
GPR[EPS]-1659828501892
GPR[ESUN]-1659828501892
GPR[SSUN]-1659828501892
GPR[ESUN]-1659828501892
GPR[SSUN]-1659828501892
GPR[ESUN]-1659828501892
GPR[SSUN]-1659828501892
GPR[ESUN]-1659828501892
GPR[SSUN]-1659828501893
GPR[ESUN]-1659828501893
GPR[SSUN]-1659828501893
GPR[ESUN]-1659828501893
GPR[SSUN]-1659828501893
GPR[ESUN]-1659828501893
GPR[SSUN]-1659828501893
GPR[ESUN]-1659828501893
GPR[SSUN]-1659828501893
GPR[ESUN]-1659828501893
GPR[SSUN]-1659828501893
GPR[ESUN]-1659828501893
GPR[SSUN]-1659828501893
GPR[ESUN]-1659828501893
GPR[SSUN]-1659828501893
GPR[ESUN]-1659828501893
GPR[SSUN]-1659828501893
GPR[ESUN]-1659828501893
GPR[SSUN]-1659828501893
1537627151
GPR[ESUN]-1659828502249
GPR[SSUN]-1659828502249
-1345859678
GPR[ESUN]-1659828502839
GPR[SSUN]-1659828502839
-1345859678
GPR[SPVATF]-1659828503474
GPR[EPVATF]-1659828504080
GPR[SPS]-1659828504080
GPR[EPS]-1659828644879
GPR[ESUN]-1659828644879
GPR[SSUN]-1659828644879
-1345859678
GPR[ESUN]-1659828645361
GPR[SSUN]-1659828645361
-1345859678
GPR[SPVATF]-1659828645609
GPR[EPVATF]-1659828645853
GPR[SPS]-1659828645853
[4873517] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:763.
GPR[EPS]-1659828646434
GPR[SPVATF]-1659828646435
GPR[EPVATF]-1659828646689
GPR[SPS]-1659828646689
[4874340] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:763.
GPR[EPS]-1659828647257
GPR[ESUN]-1659828647258
GPR[SSUN]-1659828647258
GPR[ESUN]-1659828647258
GPR[SSUN]-1659828647258
GPR[ESUN]-1659828647258
GPR[SSUN]-1659828647258
GPR[ESUN]-1659828647258
GPR[SSUN]-1659828647258
GPR[ESUN]-1659828647258
GPR[SSUN]-1659828647258
GPR[ESUN]-1659828647258
GPR[SSUN]-1659828647258
GPR[ESUN]-1659828647258
GPR[SSUN]-1659828647258
GPR[ESUN]-1659828647258
GPR[SSUN]-1659828647258
GPR[ESUN]-1659828647258
GPR[SSUN]-1659828647258
GPR[ESUN]-1659828647258
GPR[SSUN]-1659828647258
GPR[ESUN]-1659828647258
GPR[SSUN]-1659828647258
GPR[ESUN]-1659828647258
GPR[SSUN]-1659828647258
GPR[ESUN]-1659828647258
GPR[SSUN]-1659828647258
1616555300
GPR[SPVATF]-1659828647457
GPR[EPVATF]-1659828648584
GPR[SPS]-1659828648584
[4876911] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:193.
GPR[EPS]-1659828649828
GPR[ESUN]-1659828649828
GPR[SSUN]-1659828649828
-718432441
GPR[SPVATF]-1659828650523
GPR[EPVATF]-1659828650949
GPR[SPS]-1659828650949
[4878666] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:526.
GPR[EPS]-1659828651583
GPR[ESUN]-1659828651583
GPR[SSUN]-1659828651583
-718432441
GPR[ESUN]-1659828651818
GPR[SSUN]-1659828651818
-718432441
GPR[SPVATF]-1659828652055
GPR[EPVATF]-1659828652439
GPR[SPS]-1659828652439
[4880373] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:531.
GPR[EPS]-1659828653290
GPR[ESUN]-1659828653290
GPR[SSUN]-1659828653290
-718432441
GPR[SPVATF]-1659828653536
GPR[EPVATF]-1659828653805
GPR[SPS]-1659828653805
[4881526] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:530.
GPR[EPS]-1659828654443
GPR[ESUN]-1659828654443
GPR[SSUN]-1659828654443
-718432441
GPR[SPVATF]-1659828654689
GPR[EPVATF]-1659828654951
GPR[SPS]-1659828654951
[4882667] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:529.
GPR[EPS]-1659828655585
GPR[ESUN]-1659828655585
GPR[SSUN]-1659828655585
-718432441
GPR[SPVATF]-1659828655859
GPR[EPVATF]-1659828656110
GPR[SPS]-1659828656110
[4883838] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:528.
GPR[EPS]-1659828656755
GPR[ESUN]-1659828656755
GPR[SSUN]-1659828656755
-718432441
GPR[SPVATF]-1659828657007
GPR[EPVATF]-1659828657267
GPR[SPS]-1659828657267
[4885039] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:520.
GPR[EPS]-1659828657956
GPR[SPVATF]-1659828657956
GPR[EPVATF]-1659828658210
GPR[SPS]-1659828658210
[4885942] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:520.
GPR[EPS]-1659828658859
GPR[ESUN]-1659828658859
GPR[SSUN]-1659828658859
-1117079791
GPR[SPVATF]-1659828659081
GPR[EPVATF]-1659828659356
GPR[SPS]-1659828659356
[4886897] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:280.
GPR[EPS]-1659828659814
GPR[ESUN]-1659828659814
GPR[SSUN]-1659828659814
GPR[ESUN]-1659828659814
GPR[SSUN]-1659828659814
-718432441
GPR[SPVATF]-1659828660046
GPR[EPVATF]-1659828660293
GPR[SPS]-1659828660293
[4888020] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:314.
GPR[EPS]-1659828660937
GPR[SPVATF]-1659828660938
GPR[EPVATF]-1659828661193
GPR[SPS]-1659828661193
[4888930] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:314.
GPR[EPS]-1659828661847
GPR[ESUN]-1659828661847
GPR[SSUN]-1659828661847
-718432441
GPR[SPVATF]-1659828662086
GPR[EPVATF]-1659828662334
GPR[SPS]-1659828662334
[4890049] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:312.
GPR[EPS]-1659828662966
GPR[ESUN]-1659828662966
GPR[SSUN]-1659828662966
-718432441
GPR[SPVATF]-1659828663210
GPR[EPVATF]-1659828663460
GPR[SPS]-1659828663460
GPR[EPS]-1659828689273
GPR[ESUN]-1659828689273
GPR[SSUN]-1659828689273
-718432441
GPR[SPVATF]-1659828689519
GPR[EPVATF]-1659828689762
GPR[SPS]-1659828689762
[4917489] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:310.
GPR[EPS]-1659828690406
GPR[ESUN]-1659828690406
GPR[SSUN]-1659828690406
-718432441
GPR[SPVATF]-1659828690644
GPR[EPVATF]-1659828690888
GPR[SPS]-1659828690888
[4918619] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:308.
GPR[EPS]-1659828691536
GPR[ESUN]-1659828691536
GPR[SSUN]-1659828691536
-718432441
GPR[SPVATF]-1659828691772
GPR[EPVATF]-1659828692021
GPR[SPS]-1659828692021
[4919742] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:307.
GPR[EPS]-1659828692659
GPR[ESUN]-1659828692659
GPR[SSUN]-1659828692659
-718432441
GPR[SPVATF]-1659828692902
GPR[EPVATF]-1659828693146
GPR[SPS]-1659828693146
[4920873] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:303.
GPR[EPS]-1659828693790
GPR[SPVATF]-1659828693790
GPR[EPVATF]-1659828694035
GPR[SPS]-1659828694035
[4921758] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:303.
GPR[EPS]-1659828694675
GPR[ESUN]-1659828694675
GPR[SSUN]-1659828694675
-718432441
GPR[ESUN]-1659828694919
GPR[SSUN]-1659828694919
-718432441
GPR[SPVATF]-1659828695165
GPR[EPVATF]-1659828695416
GPR[SPS]-1659828695416
[4923165] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:301.
GPR[EPS]-1659828696082
GPR[ESUN]-1659828696082
GPR[SSUN]-1659828696082
-718432441
GPR[SPVATF]-1659828696332
GPR[EPVATF]-1659828696584
GPR[SPS]-1659828696584
[4924329] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:298.
GPR[EPS]-1659828697246
GPR[SPVATF]-1659828697247
GPR[EPVATF]-1659828697494
GPR[SPS]-1659828697494
[4925219] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:298.
GPR[EPS]-1659828698136
GPR[ESUN]-1659828698136
GPR[SSUN]-1659828698136
1616555300
GPR[ESUN]-1659828698334
GPR[SSUN]-1659828698334
1616555300
GPR[SPVATF]-1659828698531
GPR[EPVATF]-1659828698772
GPR[SPS]-1659828698772
[4926301] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:169.
GPR[EPS]-1659828699218
GPR[SPVATF]-1659828699218
GPR[EPVATF]-1659828699469
GPR[SPS]-1659828699470
[4926997] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:169.
GPR[EPS]-1659828699914
GPR[ESUN]-1659828699914
GPR[SSUN]-1659828699914
1616555300
GPR[SPVATF]-1659828700110
GPR[EPVATF]-1659828700356
GPR[SPS]-1659828700356
[4927891] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:168.
GPR[EPS]-1659828700808
GPR[ESUN]-1659828700808
GPR[SSUN]-1659828700808
-1117079791
GPR[ESUN]-1659828701011
GPR[SSUN]-1659828701011
-1117079791
GPR[SPVATF]-1659828701216
GPR[EPVATF]-1659828701468
GPR[SPS]-1659828701468
[4929006] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:355.
GPR[EPS]-1659828701923
GPR[ESUN]-1659828701923
GPR[SSUN]-1659828701923
-1117079791
GPR[SPVATF]-1659828702134
GPR[EPVATF]-1659828702380
GPR[SPS]-1659828702380
[4929948] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:354.
GPR[EPS]-1659828702865
GPR[ESUN]-1659828702865
GPR[SSUN]-1659828702865
-1117079791
GPR[SPVATF]-1659828703070
GPR[EPVATF]-1659828703312
GPR[SPS]-1659828703312
[4930847] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:353.
GPR[EPS]-1659828703764
GPR[ESUN]-1659828703764
GPR[SSUN]-1659828703764
-1117079791
GPR[SPVATF]-1659828703964
GPR[EPVATF]-1659828704208
GPR[SPS]-1659828704208
[4931746] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:352.
GPR[EPS]-1659828704663
GPR[ESUN]-1659828704663
GPR[SSUN]-1659828704663
-1117079791
GPR[SPVATF]-1659828704869
GPR[EPVATF]-1659828705112
GPR[SPS]-1659828705112
[4932810] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:351.
GPR[EPS]-1659828705727
GPR[ESUN]-1659828705727
GPR[SSUN]-1659828705727
-1117079791
GPR[ESUN]-1659828705933
GPR[SSUN]-1659828705933
-1117079791
GPR[SPVATF]-1659828706136
GPR[EPVATF]-1659828706388
GPR[SPS]-1659828706388
[4933923] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:102.
GPR[EPS]-1659828706840
GPR[ESUN]-1659828706840
GPR[SSUN]-1659828706840
-718432441
GPR[SPVATF]-1659828707082
GPR[EPVATF]-1659828707326
GPR[SPS]-1659828707326
[4935050] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:218.
GPR[EPS]-1659828707967
GPR[ESUN]-1659828707967
GPR[SSUN]-1659828707967
-718432441
GPR[SPVATF]-1659828708205
GPR[EPVATF]-1659828708460
GPR[SPS]-1659828708460
[4936181] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:217.
GPR[EPS]-1659828709098
GPR[ESUN]-1659828709098
GPR[SSUN]-1659828709098
-718432441
GPR[SPVATF]-1659828709338
GPR[EPVATF]-1659828709585
GPR[SPS]-1659828709585
[4937326] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:216.
GPR[EPS]-1659828710243
GPR[ESUN]-1659828710243
GPR[SSUN]-1659828710243
-718432441
GPR[SPVATF]-1659828710484
GPR[EPVATF]-1659828710737
GPR[SPS]-1659828710737
[4938462] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:215.
GPR[EPS]-1659828711379
GPR[ESUN]-1659828711379
GPR[SSUN]-1659828711379
1616555300
GPR[ESUN]-1659828711590
GPR[SSUN]-1659828711590
1616555300
GPR[ESUN]-1659828711787
GPR[SSUN]-1659828711787
1616555300
GPR[SPVATF]-1659828711981
GPR[EPVATF]-1659828712238
GPR[SPS]-1659828712238
[4939764] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:81.
GPR[EPS]-1659828712681
GPR[ESUN]-1659828712681
GPR[SSUN]-1659828712681
1616555300
GPR[ESUN]-1659828712882
GPR[SSUN]-1659828712882
1616555300
GPR[SPVATF]-1659828713073
GPR[EPVATF]-1659828713328
GPR[SPS]-1659828713328
[4940849] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:77.
GPR[EPS]-1659828713766
GPR[ESUN]-1659828713766
GPR[SSUN]-1659828713766
-1117079791
GPR[ESUN]-1659828713968
GPR[SSUN]-1659828713968
-1117079791
GPR[SPVATF]-1659828714171
GPR[EPVATF]-1659828714437
GPR[SPS]-1659828714437
[4941983] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:625.
GPR[EPS]-1659828714900
GPR[ESUN]-1659828714900
GPR[SSUN]-1659828714900
-1117079791
GPR[SPVATF]-1659828715104
GPR[EPVATF]-1659828715360
GPR[SPS]-1659828715360
[4942910] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:624.
GPR[EPS]-1659828715827
GPR[ESUN]-1659828715827
GPR[SSUN]-1659828715827
-1117079791
GPR[ESUN]-1659828716029
GPR[SSUN]-1659828716029
-1117079791
GPR[SPVATF]-1659828716228
GPR[EPVATF]-1659828716496
GPR[SPS]-1659828716496
[4944050] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:622.
GPR[EPS]-1659828716967
GPR[ESUN]-1659828716967
GPR[SSUN]-1659828716967
-1117079791
GPR[SPVATF]-1659828717205
GPR[EPVATF]-1659828717482
GPR[SPS]-1659828717482
[4945032] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:621.
GPR[EPS]-1659828717949
GPR[ESUN]-1659828717950
GPR[SSUN]-1659828717950
-1117079791
GPR[SPVATF]-1659828718159
GPR[EPVATF]-1659828718427
GPR[SPS]-1659828718427
[4945968] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:620.
GPR[EPS]-1659828718885
GPR[ESUN]-1659828718885
GPR[SSUN]-1659828718885
-1117079791
GPR[ESUN]-1659828719088
GPR[SSUN]-1659828719088
-1117079791
GPR[SPVATF]-1659828719291
GPR[EPVATF]-1659828719558
GPR[SPS]-1659828719558
[4947104] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:244.
GPR[EPS]-1659828720021
GPR[ESUN]-1659828720021
GPR[SSUN]-1659828720021
-718432441
GPR[SPVATF]-1659828720279
GPR[EPVATF]-1659828721790
GPR[SPS]-1659828721790
[4950133] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:399.
GPR[EPS]-1659828723050
GPR[ESUN]-1659828723050
GPR[SSUN]-1659828723050
-718432441
GPR[SPVATF]-1659828723289
GPR[EPVATF]-1659828723543
GPR[SPS]-1659828723543
[4951394] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:371.
GPR[EPS]-1659828724311
GPR[ESUN]-1659828724311
GPR[SSUN]-1659828724311
-1117079791
GPR[ESUN]-1659828724526
GPR[SSUN]-1659828724526
-1117079791
GPR[SPVATF]-1659828724734
GPR[EPVATF]-1659828725031
GPR[SPS]-1659828725031
[4952632] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:603.
GPR[EPS]-1659828725549
GPR[ESUN]-1659828725549
GPR[SSUN]-1659828725549
-1117079791
GPR[SPVATF]-1659828725757
GPR[EPVATF]-1659828726023
GPR[SPS]-1659828726023
[4953580] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:602.
GPR[EPS]-1659828726497
GPR[ESUN]-1659828726497
GPR[SSUN]-1659828726498
-1117079791
GPR[SPVATF]-1659828726705
GPR[EPVATF]-1659828726971
GPR[SPS]-1659828726971
[4954558] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:601.
GPR[EPS]-1659828727475
GPR[ESUN]-1659828727475
GPR[SSUN]-1659828727475
-1117079791
GPR[ESUN]-1659828727694
GPR[SSUN]-1659828727694
-1117079791
GPR[SPVATF]-1659828727906
GPR[EPVATF]-1659828728167
GPR[SPS]-1659828728167
[4955722] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:219.
GPR[EPS]-1659828728639
GPR[ESUN]-1659828728639
GPR[SSUN]-1659828728639
1616555300
GPR[ESUN]-1659828728849
GPR[SSUN]-1659828728849
1616555300
GPR[SPVATF]-1659828729046
GPR[EPVATF]-1659828729300
GPR[SPS]-1659828729300
[4956817] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:120.
GPR[EPS]-1659828729734
GPR[ESUN]-1659828729734
GPR[SSUN]-1659828729734
1616555300
GPR[SPVATF]-1659828729954
GPR[EPVATF]-1659828730199
GPR[SPS]-1659828730199
[4957723] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:117.
GPR[EPS]-1659828730640
GPR[SPVATF]-1659828730640
GPR[EPVATF]-1659828730893
GPR[SPS]-1659828730893
[4958422] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:117.
GPR[EPS]-1659828731339
GPR[ESUN]-1659828731339
GPR[SSUN]-1659828731340
1616555300
GPR[SPVATF]-1659828731533
GPR[EPVATF]-1659828731778
GPR[SPS]-1659828731779
[4959297] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:116.
GPR[EPS]-1659828732214
GPR[ESUN]-1659828732214
GPR[SSUN]-1659828732214
1616555300
GPR[ESUN]-1659828732409
GPR[SSUN]-1659828732409
1616555300
GPR[SPVATF]-1659828732607
GPR[EPVATF]-1659828732847
GPR[SPS]-1659828732847
[4960376] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:108.
GPR[EPS]-1659828733293
GPR[ESUN]-1659828733293
GPR[SSUN]-1659828733293
1616555300
GPR[SPVATF]-1659828733491
GPR[EPVATF]-1659828733738
GPR[SPS]-1659828733738
[4961257] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:107.
GPR[EPS]-1659828734174
GPR[ESUN]-1659828734174
GPR[SSUN]-1659828734174
1616555300
GPR[SPVATF]-1659828734369
GPR[EPVATF]-1659828734611
GPR[SPS]-1659828734611
[4962129] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:105.
GPR[EPS]-1659828735046
GPR[ESUN]-1659828735046
GPR[SSUN]-1659828735046
1616555300
GPR[SPVATF]-1659828735240
GPR[EPVATF]-1659828735492
GPR[SPS]-1659828735492
[4963016] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:101.
GPR[EPS]-1659828735933
GPR[SPVATF]-1659828735934
GPR[EPVATF]-1659828736180
GPR[SPS]-1659828736180
[4963701] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:101.
GPR[EPS]-1659828736618
GPR[ESUN]-1659828736618
GPR[SSUN]-1659828736618
-1117079791
GPR[ESUN]-1659828736821
GPR[SSUN]-1659828736821
-1117079791
GPR[SPVATF]-1659828737026
GPR[EPVATF]-1659828737274
GPR[SPS]-1659828737274
[4964805] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:611.
GPR[EPS]-1659828737722
GPR[ESUN]-1659828737722
GPR[SSUN]-1659828737722
-1117079791
GPR[SPVATF]-1659828737926
GPR[EPVATF]-1659828738176
GPR[SPS]-1659828738176
[4965713] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:607.
GPR[EPS]-1659828738630
GPR[ESUN]-1659828738630
GPR[SSUN]-1659828738630
1064951918
GPR[ESUN]-1659828738811
GPR[SSUN]-1659828738811
1064951918
GPR[SPVATF]-1659828739029
GPR[EPVATF]-1659828739280
GPR[SPS]-1659828739280
[4966782] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeChangeHandler$RecentChange:40.
GPR[EPS]-1659828739699
GPR[ESUN]-1659828739699
GPR[SSUN]-1659828739699
-534884160
GPR[ESUN]-1659828740028
GPR[SSUN]-1659828740028
-534884160
GPR[ESUN]-1659828740350
GPR[SSUN]-1659828740350
-534884160
GPR[SPVATF]-1659828740665
GPR[EPVATF]-1659828740914
GPR[SPS]-1659828740914
[4968713] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1727.
GPR[EPS]-1659828741630
GPR[ESUN]-1659828741630
GPR[SSUN]-1659828741630
-534884160
GPR[SPVATF]-1659828741942
GPR[EPVATF]-1659828742186
GPR[SPS]-1659828742186
[4970000] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1726.
GPR[EPS]-1659828742917
GPR[ESUN]-1659828742917
GPR[SSUN]-1659828742917
GPR[ESUN]-1659828742917
GPR[SSUN]-1659828742917
GPR[ESUN]-1659828742917
GPR[SSUN]-1659828742918
-1345859678
GPR[SPVATF]-1659828743169
GPR[EPVATF]-1659828743421
GPR[SPS]-1659828743421
[4971081] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:644.
GPR[EPS]-1659828743998
GPR[ESUN]-1659828743998
GPR[SSUN]-1659828743998
-1345859678
GPR[SPVATF]-1659828744248
GPR[EPVATF]-1659828744494
GPR[SPS]-1659828744494
[4972162] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:629.
GPR[EPS]-1659828745079
GPR[ESUN]-1659828745079
GPR[SSUN]-1659828745079
-1345859678
GPR[SPVATF]-1659828745331
GPR[EPVATF]-1659828745575
GPR[SPS]-1659828745575
[4973287] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:628.
GPR[EPS]-1659828746204
GPR[ESUN]-1659828746204
GPR[SSUN]-1659828746204
-1345859678
GPR[ESUN]-1659828746458
GPR[SSUN]-1659828746458
-1345859678
GPR[SPVATF]-1659828746711
GPR[EPVATF]-1659828746953
GPR[SPS]-1659828746953
[4974612] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:622.
GPR[EPS]-1659828747529
GPR[ESUN]-1659828747529
GPR[SSUN]-1659828747529
-1345859678
GPR[SPVATF]-1659828747784
GPR[EPVATF]-1659828748025
GPR[SPS]-1659828748025
[4975687] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:615.
GPR[EPS]-1659828748604
GPR[ESUN]-1659828748604
GPR[SSUN]-1659828748604
-1345859678
GPR[SPVATF]-1659828748857
GPR[EPVATF]-1659828749095
GPR[SPS]-1659828749095
[4976742] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:614.
GPR[EPS]-1659828749659
GPR[ESUN]-1659828749659
GPR[SSUN]-1659828749659
-1345859678
GPR[SPVATF]-1659828749908
GPR[EPVATF]-1659828750155
GPR[SPS]-1659828750155
[4977812] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:613.
GPR[EPS]-1659828750729
GPR[ESUN]-1659828750729
GPR[SSUN]-1659828750729
-1345859678
GPR[SPVATF]-1659828750978
GPR[EPVATF]-1659828751221
GPR[SPS]-1659828751221
[4978874] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:607.
GPR[EPS]-1659828751791
GPR[SPVATF]-1659828751792
GPR[EPVATF]-1659828752032
GPR[SPS]-1659828752032
[4979695] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:607.
GPR[EPS]-1659828752612
GPR[ESUN]-1659828752612
GPR[SSUN]-1659828752612
-1345859678
GPR[ESUN]-1659828752869
GPR[SSUN]-1659828752869
GPR[ESUN]-1659828752869
GPR[SSUN]-1659828752869
GPR[ESUN]-1659828752869
GPR[SSUN]-1659828752869
GPR[ESUN]-1659828752869
GPR[SSUN]-1659828752869
1187751237
GPR[SPVATF]-1659828753184
GPR[EPVATF]-1659828753422
GPR[SPS]-1659828753422
[4981167] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2929.
GPR[EPS]-1659828754084
GPR[SPVATF]-1659828754084
GPR[EPVATF]-1659828754333
GPR[SPS]-1659828754333
[4982085] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2929.
GPR[EPS]-1659828755002
GPR[ESUN]-1659828755002
GPR[SSUN]-1659828755002
1187751237
GPR[ESUN]-1659828755286
GPR[SSUN]-1659828755286
1331276989
GPR[SPVATF]-1659828755499
GPR[EPVATF]-1659828755740
GPR[SPS]-1659828755740
[4983321] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:506.
GPR[EPS]-1659828756238
GPR[ESUN]-1659828756238
GPR[SSUN]-1659828756238
GPR[ESUN]-1659828756238
GPR[SSUN]-1659828756238
GPR[ESUN]-1659828756238
GPR[SSUN]-1659828756238
GPR[ESUN]-1659828756238
GPR[SSUN]-1659828756238
GPR[ESUN]-1659828756238
GPR[SSUN]-1659828756238
GPR[ESUN]-1659828756238
GPR[SSUN]-1659828756238
GPR[ESUN]-1659828756238
GPR[SSUN]-1659828756238
GPR[ESUN]-1659828756238
GPR[SSUN]-1659828756238
GPR[ESUN]-1659828756238
GPR[SSUN]-1659828756238
GPR[ESUN]-1659828756238
GPR[SSUN]-1659828756238
GPR[ESUN]-1659828756238
GPR[SSUN]-1659828756238
GPR[ESUN]-1659828756238
GPR[SSUN]-1659828756238
GPR[ESUN]-1659828756238
GPR[SSUN]-1659828756238
GPR[ESUN]-1659828756238
GPR[SSUN]-1659828756238
GPR[ESUN]-1659828756238
GPR[SSUN]-1659828756238
2433571
GPR[SPVATF]-1659828756475
GPR[EPVATF]-1659828756718
GPR[SPS]-1659828756718
[4984392] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int LOCAL_BLOCK_PROP = -3;

    public static final int OBJECT_IDS_PROP = -2;

    public static final int CATCH_SCOPE_PROP = -1;

    public static final int LABEL_ID_PROP = 0;

    public static final int TARGET_PROP = 1;

    public static final int BREAK_PROP = 2;

    public static final int CONTINUE_PROP = 3;

    public static final int ENUM_PROP = 4;

    public static final int FUNCTION_PROP = 5;

    public static final int TEMP_PROP = 6;

    public static final int LOCAL_PROP = 7;

    public static final int CODEOFFSET_PROP = 8;

    public static final int FIXUPS_PROP = 9;

    public static final int VARS_PROP = 10;

    public static final int USES_PROP = 11;

    public static final int REGEXP_PROP = 12;

    public static final int CASES_PROP = 13;

    public static final int DEFAULT_PROP = 14;

    public static final int CASEARRAY_PROP = 15;

    public static final int SOURCENAME_PROP = 16;

    public static final int TYPE_PROP = 17;

    public static final int SPECIAL_PROP_PROP = 18;

    public static final int LABEL_PROP = 19;

    public static final int FINALLY_PROP = 20;

    public static final int LOCALCOUNT_PROP = 21;

    public static final int TARGETBLOCK_PROP = 22;

    public static final int VARIABLE_PROP = 23;

    public static final int LASTUSE_PROP = 24;

    public static final int ISNUMBER_PROP = 25;

    public static final int DIRECTCALL_PROP = 26;

    public static final int SPECIALCALL_PROP = 27;

    public static final int DEBUGSOURCE_PROP = 28;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int SKIP_INDEXES_PROP = 31;

    public static final int INCRDECR_PROP = 32;

    public static final int MEMBER_TYPE_PROP = 33;

    public static final int NAME_PROP = 34;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int LAST_PROP = 53;

    public static final int BOTH = 0;

    public static final int LEFT = 1;

    public static final int RIGHT = 2;

    public static final int NON_SPECIALCALL = 0;

    public static final int SPECIALCALL_EVAL = 1;

    public static final int SPECIALCALL_WITH = 2;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    public static final int PROPERTY_FLAG = 0x1;

    public static final int ATTRIBUTE_FLAG = 0x2;

    public static final int DESCENDANTS_FLAG = 0x4;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP :
                return "local_block";
            case com.google.javascript.rhino.Node.OBJECT_IDS_PROP :
                return "object_ids_prop";
            case com.google.javascript.rhino.Node.CATCH_SCOPE_PROP :
                return "catch_scope_prop";
            case com.google.javascript.rhino.Node.LABEL_ID_PROP :
                return "label_id_prop";
            case com.google.javascript.rhino.Node.TARGET_PROP :
                return "target";
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.BREAK_PROP :
                return "break";
            case com.google.javascript.rhino.Node.CONTINUE_PROP :
                return "continue";
            case com.google.javascript.rhino.Node.ENUM_PROP :
                return "enum";
            case com.google.javascript.rhino.Node.FUNCTION_PROP :
                return "function";
            case com.google.javascript.rhino.Node.TEMP_PROP :
                return "temp";
            case com.google.javascript.rhino.Node.LOCAL_PROP :
                return "local";
            case com.google.javascript.rhino.Node.CODEOFFSET_PROP :
                return "codeoffset";
            case com.google.javascript.rhino.Node.FIXUPS_PROP :
                return "fixups";
            case com.google.javascript.rhino.Node.VARS_PROP :
                return "vars";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.USES_PROP :
                return "uses";
            case com.google.javascript.rhino.Node.REGEXP_PROP :
                return "regexp";
            case com.google.javascript.rhino.Node.CASES_PROP :
                return "cases";
            case com.google.javascript.rhino.Node.DEFAULT_PROP :
                return "default";
            case com.google.javascript.rhino.Node.CASEARRAY_PROP :
                return "casearray";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.TYPE_PROP :
                return "type";
            case com.google.javascript.rhino.Node.SPECIAL_PROP_PROP :
                return "special_prop";
            case com.google.javascript.rhino.Node.LABEL_PROP :
                return "label";
            case com.google.javascript.rhino.Node.FINALLY_PROP :
                return "finally";
            case com.google.javascript.rhino.Node.LOCALCOUNT_PROP :
                return "localcount";
            case com.google.javascript.rhino.Node.TARGETBLOCK_PROP :
                return "targetblock";
            case com.google.javascript.rhino.Node.VARIABLE_PROP :
                return "variable";
            case com.google.javascript.rhino.Node.LASTUSE_PROP :
                return "lastuse";
            case com.google.javascript.rhino.Node.ISNUMBER_PROP :
                return "isnumber";
            case com.google.javascript.rhino.Node.DIRECTCALL_PROP :
                return "directcall";
            case com.google.javascript.rhino.Node.SPECIALCALL_PROP :
                return "specialcall";
            case com.google.javascript.rhino.Node.DEBUGSOURCE_PROP :
                return "debugsource";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.SKIP_INDEXES_PROP :
                return "skip_indexes";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.MEMBER_TYPE_PROP :
                return "member_type";
            case com.google.javascript.rhino.Node.NAME_PROP :
                return "name";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            default :
                com.google.javascript.rhino.Kit.codeBug();
        }
        return null;
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && (getDouble() == ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble());
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private abstract static class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        if (last != null) {
            last.next = children;
        }
        last = children.getLastSibling();
        if (first == null) {
            first = children;
        }
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node != null, "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.parent = this;
        newChild.next = node.next;
        node.next = newChild;
        if (last == node) {
            last = newChild;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            com.google.javascript.rhino.Kit.codeBug();
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        if (com.google.javascript.rhino.Token.shouldPrintTrees()) {
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            toString(sb, printSource, printAnnotations, printType);
            return sb.toString();
        }
        return java.lang.String.valueOf(type);
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        if (com.google.javascript.rhino.Token.printTrees) {
            sb.append(com.google.javascript.rhino.Token.name(type));
            if (this instanceof com.google.javascript.rhino.Node.StringNode) {
                sb.append(' ');
                sb.append(getString());
            } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
                sb.append(' ');
                if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                    sb.append("<invalid>");
                } else {
                    sb.append(first.getString());
                }
            } else if (this instanceof com.google.javascript.rhino.ScriptOrFnNode) {
                com.google.javascript.rhino.ScriptOrFnNode sof = ((com.google.javascript.rhino.ScriptOrFnNode) (this));
                if (this instanceof com.google.javascript.rhino.FunctionNode) {
                    com.google.javascript.rhino.FunctionNode fn = ((com.google.javascript.rhino.FunctionNode) (this));
                    sb.append(' ');
                    sb.append(fn.getFunctionName());
                }
                if (printSource) {
                    sb.append(" [source name: ");
                    sb.append(sof.getSourceName());
                    sb.append("] [encoded source length: ");
                    sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());
                    sb.append("] [base line: ");
                    sb.append(sof.getBaseLineno());
                    sb.append("] [end line: ");
                    sb.append(sof.getEndLineno());
                    sb.append(']');
                }
            } else if (type == com.google.javascript.rhino.Token.NUMBER) {
                sb.append(' ');
                sb.append(getDouble());
            }
            if (printSource) {
                int lineno = getLineno();
                if (lineno != (-1)) {
                    sb.append(' ');
                    sb.append(lineno);
                }
            }
            if (printAnnotations) {
                int[] keys = getSortedPropTypes();
                for (int i = 0; i < keys.length; i++) {
                    int type = keys[i];
                    com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                    sb.append(" [");
                    sb.append(com.google.javascript.rhino.Node.propToString(type));
                    sb.append(": ");
                    java.lang.String value;
                    switch (type) {
                        case com.google.javascript.rhino.Node.TARGETBLOCK_PROP :
                            value = "target block property";
                            break;
                        case com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP :
                            value = "last local block";
                            break;
                        case com.google.javascript.rhino.Node.ISNUMBER_PROP :
                            switch (x.getIntValue()) {
                                case com.google.javascript.rhino.Node.BOTH :
                                    value = "both";
                                    break;
                                case com.google.javascript.rhino.Node.RIGHT :
                                    value = "right";
                                    break;
                                case com.google.javascript.rhino.Node.LEFT :
                                    value = "left";
                                    break;
                                default :
                                    throw com.google.javascript.rhino.Kit.codeBug();
                            }
                            break;
                        case com.google.javascript.rhino.Node.SPECIALCALL_PROP :
                            switch (x.getIntValue()) {
                                case com.google.javascript.rhino.Node.SPECIALCALL_EVAL :
                                    value = "eval";
                                    break;
                                case com.google.javascript.rhino.Node.SPECIALCALL_WITH :
                                    value = "with";
                                    break;
                                default :
                                    throw com.google.javascript.rhino.Kit.codeBug();
                            }
                            break;
                        default :
                            value = x.toString();
                            break;
                    }
                    sb.append(value);
                    sb.append(']');
                }
            }
            if (printType) {
                if (jsType != null) {
                    java.lang.String jsTypeString = jsType.toString();
                    if (jsTypeString != null) {
                        sb.append(" : ");
                        sb.append(jsTypeString);
                    }
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        if (com.google.javascript.rhino.Token.printTrees) {
            for (int i = 0; i != level; ++i) {
                sb.append("    ");
            }
            sb.append(n.toString());
            sb.append('\n');
            for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
                com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
            }
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        int lineOffset = (file == null) ? java.lang.Integer.MIN_VALUE : file.getLineOffset(getLineno());
        return lineOffset + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(363).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.FIXUPS_PROP",com.google.javascript.rhino.Node.FIXUPS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.ISNUMBER_PROP",com.google.javascript.rhino.Node.ISNUMBER_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.CODEOFFSET_PROP",com.google.javascript.rhino.Node.CODEOFFSET_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.LOCAL_PROP",com.google.javascript.rhino.Node.LOCAL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_PROP",com.google.javascript.rhino.Node.SPECIALCALL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.TARGET_PROP",com.google.javascript.rhino.Node.TARGET_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.OBJECT_IDS_PROP",com.google.javascript.rhino.Node.OBJECT_IDS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.LOCALCOUNT_PROP",com.google.javascript.rhino.Node.LOCALCOUNT_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.FUNCTION_PROP",com.google.javascript.rhino.Node.FUNCTION_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.LABEL_PROP",com.google.javascript.rhino.Node.LABEL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.BOTH",com.google.javascript.rhino.Node.BOTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.MEMBER_TYPE_PROP",com.google.javascript.rhino.Node.MEMBER_TYPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_WITH",com.google.javascript.rhino.Node.SPECIALCALL_WITH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.TYPE_PROP",com.google.javascript.rhino.Node.TYPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.PROPERTY_FLAG",com.google.javascript.rhino.Node.PROPERTY_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.DEFAULT_PROP",com.google.javascript.rhino.Node.DEFAULT_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.SPECIAL_PROP_PROP",com.google.javascript.rhino.Node.SPECIAL_PROP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("charno",charno);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.CONTINUE_PROP",com.google.javascript.rhino.Node.CONTINUE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.DIRECTCALL_PROP",com.google.javascript.rhino.Node.DIRECTCALL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.LABEL_ID_PROP",com.google.javascript.rhino.Node.LABEL_ID_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.ENUM_PROP",com.google.javascript.rhino.Node.ENUM_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.TARGETBLOCK_PROP",com.google.javascript.rhino.Node.TARGETBLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.TEMP_PROP",com.google.javascript.rhino.Node.TEMP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.USES_PROP",com.google.javascript.rhino.Node.USES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.VARS_PROP",com.google.javascript.rhino.Node.VARS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.REGEXP_PROP",com.google.javascript.rhino.Node.REGEXP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.LASTUSE_PROP",com.google.javascript.rhino.Node.LASTUSE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.NAME_PROP",com.google.javascript.rhino.Node.NAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.LEFT",com.google.javascript.rhino.Node.LEFT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.ATTRIBUTE_FLAG",com.google.javascript.rhino.Node.ATTRIBUTE_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.FINALLY_PROP",com.google.javascript.rhino.Node.FINALLY_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.NON_SPECIALCALL",com.google.javascript.rhino.Node.NON_SPECIALCALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.CASEARRAY_PROP",com.google.javascript.rhino.Node.CASEARRAY_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.DESCENDANTS_FLAG",com.google.javascript.rhino.Node.DESCENDANTS_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.CATCH_SCOPE_PROP",com.google.javascript.rhino.Node.CATCH_SCOPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP",com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.CASES_PROP",com.google.javascript.rhino.Node.CASES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.VARIABLE_PROP",com.google.javascript.rhino.Node.VARIABLE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.SKIP_INDEXES_PROP",com.google.javascript.rhino.Node.SKIP_INDEXES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.RIGHT",com.google.javascript.rhino.Node.RIGHT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_EVAL",com.google.javascript.rhino.Node.SPECIALCALL_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.DEBUGSOURCE_PROP",com.google.javascript.rhino.Node.DEBUGSOURCE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("lineno",lineno);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.BREAK_PROP",com.google.javascript.rhino.Node.BREAK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(363).collectionEnds();
            }
            if (runtimeAngelicValue)
                return -1;

        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    @java.lang.SuppressWarnings("rawtypes")
    private static java.lang.Class getNodeClass(com.google.javascript.rhino.Node n) {
        java.lang.Class c = n.getClass();
        if ((c == com.google.javascript.rhino.FunctionNode.class) || (c == com.google.javascript.rhino.ScriptOrFnNode.class)) {
            return com.google.javascript.rhino.Node.class;
        }
        return c;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public static java.lang.String tokenToName(int token) {
        switch (token) {
            case com.google.javascript.rhino.Token.ERROR :
                return "error";
            case com.google.javascript.rhino.Token.EOF :
                return "eof";
            case com.google.javascript.rhino.Token.EOL :
                return "eol";
            case com.google.javascript.rhino.Token.ENTERWITH :
                return "enterwith";
            case com.google.javascript.rhino.Token.LEAVEWITH :
                return "leavewith";
            case com.google.javascript.rhino.Token.RETURN :
                return "return";
            case com.google.javascript.rhino.Token.GOTO :
                return "goto";
            case com.google.javascript.rhino.Token.IFEQ :
                return "ifeq";
            case com.google.javascript.rhino.Token.IFNE :
                return "ifne";
            case com.google.javascript.rhino.Token.SETNAME :
                return "setname";
            case com.google.javascript.rhino.Token.BITOR :
                return "bitor";
            case com.google.javascript.rhino.Token.BITXOR :
                return "bitxor";
            case com.google.javascript.rhino.Token.BITAND :
                return "bitand";
            case com.google.javascript.rhino.Token.EQ :
                return "eq";
            case com.google.javascript.rhino.Token.NE :
                return "ne";
            case com.google.javascript.rhino.Token.LT :
                return "lt";
            case com.google.javascript.rhino.Token.LE :
                return "le";
            case com.google.javascript.rhino.Token.GT :
                return "gt";
            case com.google.javascript.rhino.Token.GE :
                return "ge";
            case com.google.javascript.rhino.Token.LSH :
                return "lsh";
            case com.google.javascript.rhino.Token.RSH :
                return "rsh";
            case com.google.javascript.rhino.Token.URSH :
                return "ursh";
            case com.google.javascript.rhino.Token.ADD :
                return "add";
            case com.google.javascript.rhino.Token.SUB :
                return "sub";
            case com.google.javascript.rhino.Token.MUL :
                return "mul";
            case com.google.javascript.rhino.Token.DIV :
                return "div";
            case com.google.javascript.rhino.Token.MOD :
                return "mod";
            case com.google.javascript.rhino.Token.BITNOT :
                return "bitnot";
            case com.google.javascript.rhino.Token.NEG :
                return "neg";
            case com.google.javascript.rhino.Token.NEW :
                return "new";
            case com.google.javascript.rhino.Token.DELPROP :
                return "delprop";
            case com.google.javascript.rhino.Token.TYPEOF :
                return "typeof";
            case com.google.javascript.rhino.Token.GETPROP :
                return "getprop";
            case com.google.javascript.rhino.Token.SETPROP :
                return "setprop";
            case com.google.javascript.rhino.Token.GETELEM :
                return "getelem";
            case com.google.javascript.rhino.Token.SETELEM :
                return "setelem";
            case com.google.javascript.rhino.Token.CALL :
                return "call";
            case com.google.javascript.rhino.Token.NAME :
                return "name";
            case com.google.javascript.rhino.Token.NUMBER :
                return "number";
            case com.google.javascript.rhino.Token.STRING :
                return "string";
            case com.google.javascript.rhino.Token.NULL :
                return "null";
            case com.google.javascript.rhino.Token.THIS :
                return "this";
            case com.google.javascript.rhino.Token.FALSE :
                return "false";
            case com.google.javascript.rhino.Token.TRUE :
                return "true";
            case com.google.javascript.rhino.Token.SHEQ :
                return "sheq";
            case com.google.javascript.rhino.Token.SHNE :
                return "shne";
            case com.google.javascript.rhino.Token.REGEXP :
                return "regexp";
            case com.google.javascript.rhino.Token.POS :
                return "pos";
            case com.google.javascript.rhino.Token.BINDNAME :
                return "bindname";
            case com.google.javascript.rhino.Token.THROW :
                return "throw";
            case com.google.javascript.rhino.Token.IN :
                return "in";
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return "instanceof";
            case com.google.javascript.rhino.Token.GETVAR :
                return "getvar";
            case com.google.javascript.rhino.Token.SETVAR :
                return "setvar";
            case com.google.javascript.rhino.Token.TRY :
                return "try";
            case com.google.javascript.rhino.Token.TYPEOFNAME :
                return "typeofname";
            case com.google.javascript.rhino.Token.THISFN :
                return "thisfn";
            case com.google.javascript.rhino.Token.SEMI :
                return "semi";
            case com.google.javascript.rhino.Token.LB :
                return "lb";
            case com.google.javascript.rhino.Token.RB :
                return "rb";
            case com.google.javascript.rhino.Token.LC :
                return "lc";
            case com.google.javascript.rhino.Token.RC :
                return "rc";
            case com.google.javascript.rhino.Token.LP :
                return "lp";
            case com.google.javascript.rhino.Token.RP :
                return "rp";
            case com.google.javascript.rhino.Token.COMMA :
                return "comma";
            case com.google.javascript.rhino.Token.ASSIGN :
                return "assign";
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return "assign_bitor";
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return "assign_bitxor";
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return "assign_bitand";
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return "assign_lsh";
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return "assign_rsh";
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return "assign_ursh";
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return "assign_add";
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return "assign_sub";
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return "assign_mul";
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return "assign_div";
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return "assign_mod";
            case com.google.javascript.rhino.Token.HOOK :
                return "hook";
            case com.google.javascript.rhino.Token.COLON :
                return "colon";
            case com.google.javascript.rhino.Token.OR :
                return "or";
            case com.google.javascript.rhino.Token.AND :
                return "and";
            case com.google.javascript.rhino.Token.INC :
                return "inc";
            case com.google.javascript.rhino.Token.DEC :
                return "dec";
            case com.google.javascript.rhino.Token.DOT :
                return "dot";
            case com.google.javascript.rhino.Token.FUNCTION :
                return "function";
            case com.google.javascript.rhino.Token.EXPORT :
                return "export";
            case com.google.javascript.rhino.Token.IMPORT :
                return "import";
            case com.google.javascript.rhino.Token.IF :
                return "if";
            case com.google.javascript.rhino.Token.ELSE :
                return "else";
            case com.google.javascript.rhino.Token.SWITCH :
                return "switch";
            case com.google.javascript.rhino.Token.CASE :
                return "case";
            case com.google.javascript.rhino.Token.DEFAULT :
                return "default";
            case com.google.javascript.rhino.Token.WHILE :
                return "while";
            case com.google.javascript.rhino.Token.DO :
                return "do";
            case com.google.javascript.rhino.Token.FOR :
                return "for";
            case com.google.javascript.rhino.Token.BREAK :
                return "break";
            case com.google.javascript.rhino.Token.CONTINUE :
                return "continue";
            case com.google.javascript.rhino.Token.VAR :
                return "var";
            case com.google.javascript.rhino.Token.WITH :
                return "with";
            case com.google.javascript.rhino.Token.CATCH :
                return "catch";
            case com.google.javascript.rhino.Token.FINALLY :
                return "finally";
            case com.google.javascript.rhino.Token.RESERVED :
                return "reserved";
            case com.google.javascript.rhino.Token.NOT :
                return "not";
            case com.google.javascript.rhino.Token.VOID :
                return "void";
            case com.google.javascript.rhino.Token.BLOCK :
                return "block";
            case com.google.javascript.rhino.Token.ARRAYLIT :
                return "arraylit";
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return "objectlit";
            case com.google.javascript.rhino.Token.LABEL :
                return "label";
            case com.google.javascript.rhino.Token.TARGET :
                return "target";
            case com.google.javascript.rhino.Token.LOOP :
                return "loop";
            case com.google.javascript.rhino.Token.EXPR_VOID :
                return "expr_void";
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                return "expr_result";
            case com.google.javascript.rhino.Token.JSR :
                return "jsr";
            case com.google.javascript.rhino.Token.SCRIPT :
                return "script";
            case com.google.javascript.rhino.Token.EMPTY :
                return "empty";
            case com.google.javascript.rhino.Token.GET_REF :
                return "get_ref";
            case com.google.javascript.rhino.Token.REF_SPECIAL :
                return "ref_special";
        }
        return ("<unknown=" + token) + ">";
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (com.google.javascript.rhino.Node.getNodeClass(this) != com.google.javascript.rhino.Node.getNodeClass(node))) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if (type == com.google.javascript.rhino.Token.ARRAYLIT) {
            try {
                int[] indices1 = ((int[]) (getProp(com.google.javascript.rhino.Node.SKIP_INDEXES_PROP)));
                int[] indices2 = ((int[]) (node.getProp(com.google.javascript.rhino.Node.SKIP_INDEXES_PROP)));
                if (indices1 == null) {
                    if (indices2 != null) {
                        return false;
                    }
                } else if (indices2 == null) {
                    return false;
                } else if (indices1.length != indices2.length) {
                    return false;
                } else {
                    for (int i = 0; i < indices1.length; i++) {
                        if (indices1[i] != indices2[i]) {
                            return false;
                        }
                    }
                }
            } catch (java.lang.Exception e) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.STRING) {
            int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            if (quoted1 != quoted2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean hasSideEffects() {
        switch (type) {
            case com.google.javascript.rhino.Token.EXPR_VOID :
            case com.google.javascript.rhino.Token.COMMA :
                if (last != null) {
                    return last.hasSideEffects();
                } else {
                    return true;
                }
            case com.google.javascript.rhino.Token.HOOK :
                if (((first == null) || (first.next == null)) || (first.next.next == null)) {
                    com.google.javascript.rhino.Kit.codeBug();
                }
                return first.next.hasSideEffects() && first.next.next.hasSideEffects();
            case com.google.javascript.rhino.Token.ERROR :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ENTERWITH :
            case com.google.javascript.rhino.Token.LEAVEWITH :
            case com.google.javascript.rhino.Token.RETURN :
            case com.google.javascript.rhino.Token.GOTO :
            case com.google.javascript.rhino.Token.IFEQ :
            case com.google.javascript.rhino.Token.IFNE :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.SETNAME :
            case com.google.javascript.rhino.Token.SETPROP :
            case com.google.javascript.rhino.Token.SETELEM :
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.THROW :
            case com.google.javascript.rhino.Token.RETHROW :
            case com.google.javascript.rhino.Token.SETVAR :
            case com.google.javascript.rhino.Token.CATCH_SCOPE :
            case com.google.javascript.rhino.Token.RETURN_RESULT :
            case com.google.javascript.rhino.Token.SET_REF :
            case com.google.javascript.rhino.Token.DEL_REF :
            case com.google.javascript.rhino.Token.REF_CALL :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SEMI :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.EXPORT :
            case com.google.javascript.rhino.Token.IMPORT :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.ELSE :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.CONST :
            case com.google.javascript.rhino.Token.WITH :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.FINALLY :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.TARGET :
            case com.google.javascript.rhino.Token.LOOP :
            case com.google.javascript.rhino.Token.JSR :
            case com.google.javascript.rhino.Token.SETPROP_OP :
            case com.google.javascript.rhino.Token.SETELEM_OP :
            case com.google.javascript.rhino.Token.LOCAL_BLOCK :
            case com.google.javascript.rhino.Token.SET_REF_OP :
                return true;
            default :
                return false;
        }
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        com.google.javascript.rhino.Kit.codeBug();
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }
}
[4984393] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659828757310
GPR[SSUN]-1659828757310
GPR[ESUN]-1659828757310
GPR[SSUN]-1659828757310
GPR[ESUN]-1659828757310
GPR[SSUN]-1659828757310
GPR[ESUN]-1659828757310
GPR[SSUN]-1659828757310
-1345859678
GPR[SPVATF]-1659828757565
GPR[EPVATF]-1659828757815
GPR[SPS]-1659828757815
[4985320] ERROR ConstraintModelBuilder - Unable to compile the change: 
class IRFactory {
    static final java.lang.String SUSPICIOUS_COMMENT_WARNING = "Non-JSDoc comment has annotations. " + "Did you mean to start it with '/**'?";

    private final java.lang.String sourceString;

    private final com.google.javascript.rhino.jstype.StaticSourceFile sourceFile;

    private final java.lang.String sourceName;

    private final com.google.javascript.jscomp.parsing.Config config;

    private final com.google.javascript.jscomp.mozilla.rhino.ErrorReporter errorReporter;

    private final com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher transformDispatcher;

    private final java.util.Set<java.lang.String> ALLOWED_DIRECTIVES = com.google.common.collect.Sets.newHashSet("use strict");

    private static final java.util.Set<java.lang.String> ES5_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super");

    private static final java.util.Set<java.lang.String> ES5_STRICT_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield");

    private final java.util.Set<java.lang.String> reservedKeywords;

    com.google.javascript.rhino.Node rootNodeJsDocHolder = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);

    com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder = rootNodeJsDocHolder.getJsDocBuilderForNode();

    com.google.javascript.rhino.JSDocInfo fileOverviewInfo = null;

    private com.google.javascript.rhino.Node templateNode;

    private IRFactory(java.lang.String sourceString, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.jscomp.mozilla.rhino.ErrorReporter errorReporter) {
        this.sourceString = sourceString;
        this.sourceFile = sourceFile;
        this.sourceName = (sourceFile == null) ? null : sourceFile.getName();
        this.config = config;
        this.errorReporter = errorReporter;
        this.transformDispatcher = new com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher();
        this.templateNode = createTemplateNode();
        switch (config.languageMode) {
            case ECMASCRIPT3 :
                reservedKeywords = null;
                break;
            case ECMASCRIPT5 :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS;
                break;
            case ECMASCRIPT5_STRICT :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS;
                break;
            default :
                throw new java.lang.IllegalStateException("unknown language mode");
        }
    }

    private com.google.javascript.rhino.Node createTemplateNode() {
        com.google.javascript.rhino.Node templateNode = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);
        templateNode.setStaticSourceFile(sourceFile);
        return templateNode;
    }

    public static com.google.javascript.rhino.Node transformTree(com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot node, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, java.lang.String sourceString, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.jscomp.mozilla.rhino.ErrorReporter errorReporter) {
        com.google.javascript.jscomp.parsing.IRFactory irFactory = new com.google.javascript.jscomp.parsing.IRFactory(sourceString, sourceFile, config, errorReporter);
        com.google.javascript.rhino.Node irNode = irFactory.transform(node);
        if (node.getComments() != null) {
            for (com.google.javascript.jscomp.mozilla.rhino.ast.Comment comment : node.getComments()) {
                if ((comment.getCommentType() == com.google.javascript.jscomp.mozilla.rhino.Token.CommentType.JSDOC) && (!comment.isParsed())) {
                    irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
                } else if (comment.getCommentType() == com.google.javascript.jscomp.mozilla.rhino.Token.CommentType.BLOCK) {
                    irFactory.handleBlockComment(comment);
                }
            }
        }
        irFactory.setFileOverviewJsDoc(irNode);
        return irNode;
    }

    private void setFileOverviewJsDoc(com.google.javascript.rhino.Node irNode) {
        irNode.setJSDocInfo(rootNodeJsDocHolder.getJSDocInfo());
        if (fileOverviewInfo != null) {
            if ((irNode.getJSDocInfo() != null) && (irNode.getJSDocInfo().getLicense() != null)) {
                fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());
            }
            irNode.setJSDocInfo(fileOverviewInfo);
        }
    }

    private com.google.javascript.rhino.Node transformBlock(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = transform(node);
        if (irNode.getType() != com.google.javascript.rhino.Token.BLOCK) {
            if (irNode.getType() == com.google.javascript.rhino.Token.EMPTY) {
                irNode.setType(com.google.javascript.rhino.Token.BLOCK);
                irNode.setWasEmptyNode(true);
            } else {
                com.google.javascript.rhino.Node newBlock = newNode(com.google.javascript.rhino.Token.BLOCK, irNode);
                newBlock.setLineno(irNode.getLineno());
                newBlock.setCharno(irNode.getCharno());
                maybeSetLengthFrom(newBlock, node);
                irNode = newBlock;
            }
        }
        return irNode;
    }

    private void handleBlockComment(com.google.javascript.jscomp.mozilla.rhino.ast.Comment comment) {
        java.lang.String value = comment.getValue();
        if ((value.indexOf("/* @") != (-1)) || (value.indexOf("\n * @") != (-1))) {
            errorReporter.warning(com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), "", 0);
        }
    }

    private boolean handlePossibleFileOverviewJsDoc(com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser) {
        if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo) {
            fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();
            return true;
        }
        return false;
    }

    private void handlePossibleFileOverviewJsDoc(com.google.javascript.jscomp.mozilla.rhino.ast.Comment comment, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
        comment.setParsed(true);
        handlePossibleFileOverviewJsDoc(jsDocParser);
    }

    private com.google.javascript.rhino.JSDocInfo handleJsDoc(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.jscomp.mozilla.rhino.ast.Comment comment = node.getJsDocNode();
        if (comment != null) {
            com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
            comment.setParsed(true);
            if (!handlePossibleFileOverviewJsDoc(jsDocParser)) {
                return jsDocParser.retrieveAndResetParsedJSDocInfo();
            }
        }
        return null;
    }

    private com.google.javascript.rhino.Node transform(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = justTransform(node);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNameAsString(com.google.javascript.jscomp.mozilla.rhino.ast.Name node) {
        com.google.javascript.rhino.Node irNode = transformDispatcher.processName(node, true);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNumberAsString(com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral literalNode) {
        com.google.javascript.rhino.Node irNode = newStringNode(com.google.javascript.jscomp.parsing.IRFactory.getStringValue(literalNode.getNumber()));
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(literalNode, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, literalNode);
        return irNode;
    }

    private static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    private void setSourceInfo(com.google.javascript.rhino.Node irNode, com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {
        if ((irNode.getType() == com.google.javascript.rhino.Token.FUNCTION) && (irNode.getFirstChild().getLineno() != (-1))) {
            irNode.setLineno(irNode.getFirstChild().getLineno());
            irNode.setCharno(irNode.getFirstChild().getCharno());
            maybeSetLengthFrom(irNode, node);
        } else if (irNode.getLineno() == (-1)) {
            int lineno = node.getLineno();
            irNode.setLineno(lineno);
            int charno = position2charno(node.getAbsolutePosition());
            irNode.setCharno(charno);
            maybeSetLengthFrom(irNode, node);
        }
    }

    private com.google.javascript.jscomp.parsing.JsDocInfoParser createJsDocInfoParser(com.google.javascript.jscomp.mozilla.rhino.ast.Comment node, com.google.javascript.rhino.Node irNode) {
        java.lang.String comment = node.getValue();
        int lineno = node.getLineno();
        int position = node.getAbsolutePosition();
        int numOpeningChars = 3;
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsdocParser = new com.google.javascript.jscomp.parsing.JsDocInfoParser(new com.google.javascript.jscomp.parsing.JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, irNode, config, errorReporter);
        jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);
        jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);
        jsdocParser.parse();
        return jsdocParser;
    }

    private void maybeSetLengthFrom(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.mozilla.rhino.ast.AstNode source) {
        if (config.isIdeMode) {
            node.setLength(source.getLength());
        }
    }

    private int position2charno(int position) {
        int lineIndex = sourceString.lastIndexOf('\n', position);
        if (lineIndex == (-1)) {
            return position;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(364).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.ALLOWED_DIRECTIVES",com.google.javascript.jscomp.parsing.IRFactory.this.ALLOWED_DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceString",com.google.javascript.jscomp.parsing.IRFactory.this.sourceString);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING",com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher",com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("lineIndex",lineIndex);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo",com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile",com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter",com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder",com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords",com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.templateNode",com.google.javascript.jscomp.parsing.IRFactory.this.templateNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.config",com.google.javascript.jscomp.parsing.IRFactory.this.config);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("position",position);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceName",com.google.javascript.jscomp.parsing.IRFactory.this.sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder",com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(364).collectionEnds();
            }
            if (runtimeAngelicValue)
                return (position - lineIndex) - 1;

        }
    }

    private com.google.javascript.rhino.Node justTransform(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {
        return transformDispatcher.process(node);
    }

    private class TransformDispatcher extends com.google.javascript.jscomp.parsing.TypeSafeDispatcher<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node processGeneric(com.google.javascript.jscomp.mozilla.rhino.Node n) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(n.getType()));
            for (com.google.javascript.jscomp.mozilla.rhino.Node child : n) {
                node.addChildToBack(transform(((com.google.javascript.jscomp.mozilla.rhino.ast.AstNode) (child))));
            }
            return node;
        }

        private com.google.javascript.rhino.Node transformAsString(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode n) {
            com.google.javascript.rhino.Node ret;
            if (n instanceof com.google.javascript.jscomp.mozilla.rhino.ast.Name) {
                ret = transformNameAsString(((com.google.javascript.jscomp.mozilla.rhino.ast.Name) (n)));
            } else if (n instanceof com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral) {
                ret = transformNumberAsString(((com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral) (n)));
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            } else {
                ret = transform(n);
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            }
            com.google.common.base.Preconditions.checkState(ret.getType() == com.google.javascript.rhino.Token.STRING);
            return ret;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processArrayLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.ArrayLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.ARRAYLIT);
            for (com.google.javascript.jscomp.mozilla.rhino.ast.AstNode child : literalNode.getElements()) {
                com.google.javascript.rhino.Node c = transform(child);
                node.addChildToBack(c);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAssignment(com.google.javascript.jscomp.mozilla.rhino.ast.Assignment assignmentNode) {
            com.google.javascript.rhino.Node assign = processInfixExpression(assignmentNode);
            com.google.javascript.rhino.Node target = assign.getFirstChild();
            if (!validAssignmentTarget(target)) {
                errorReporter.error("invalid assignment target", sourceName, target.getLineno(), "", 0);
            }
            return assign;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAstRoot(com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot rootNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SCRIPT);
            for (com.google.javascript.jscomp.mozilla.rhino.Node child : rootNode) {
                node.addChildToBack(transform(((com.google.javascript.jscomp.mozilla.rhino.ast.AstNode) (child))));
            }
            parseDirectives(node);
            return node;
        }

        private void parseDirectives(com.google.javascript.rhino.Node node) {
            java.util.Set<java.lang.String> directives = null;
            while (isDirective(node.getFirstChild())) {
                java.lang.String directive = node.removeFirstChild().getFirstChild().getString();
                if (directives == null) {
                    directives = com.google.common.collect.Sets.newHashSet(directive);
                } else {
                    directives.add(directive);
                }
            } 
            if (directives != null) {
                node.setDirectives(directives);
            }
        }

        private boolean isDirective(com.google.javascript.rhino.Node n) {
            if (n == null) {
                return false;
            }
            int nType = n.getType();
            return (((nType == com.google.javascript.rhino.Token.EXPR_RESULT) || (nType == com.google.javascript.rhino.Token.EXPR_VOID)) && (n.getFirstChild().getType() == com.google.javascript.rhino.Token.STRING)) && ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBlock(com.google.javascript.jscomp.mozilla.rhino.ast.Block blockNode) {
            return processGeneric(blockNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBreakStatement(com.google.javascript.jscomp.mozilla.rhino.ast.BreakStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.BREAK);
            if (statementNode.getBreakLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getBreakLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processCatchClause(com.google.javascript.jscomp.mozilla.rhino.ast.CatchClause clauseNode) {
            com.google.javascript.jscomp.mozilla.rhino.ast.AstNode catchVar = clauseNode.getVarName();
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CATCH, transform(catchVar));
            if (clauseNode.getCatchCondition() != null) {
                errorReporter.error("Catch clauses are not supported", sourceName, clauseNode.getCatchCondition().getLineno(), "", 0);
            }
            node.addChildToBack(transformBlock(clauseNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processConditionalExpression(com.google.javascript.jscomp.mozilla.rhino.ast.ConditionalExpression exprNode) {
            return newNode(com.google.javascript.rhino.Token.HOOK, transform(exprNode.getTestExpression()), transform(exprNode.getTrueExpression()), transform(exprNode.getFalseExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processContinueStatement(com.google.javascript.jscomp.mozilla.rhino.ast.ContinueStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CONTINUE);
            if (statementNode.getLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processDoLoop(com.google.javascript.jscomp.mozilla.rhino.ast.DoLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.DO, transformBlock(loopNode.getBody()), transform(loopNode.getCondition()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processElementGet(com.google.javascript.jscomp.mozilla.rhino.ast.ElementGet getNode) {
            return newNode(com.google.javascript.rhino.Token.GETELEM, transform(getNode.getTarget()), transform(getNode.getElement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processEmptyExpression(com.google.javascript.jscomp.mozilla.rhino.ast.EmptyExpression exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.EMPTY);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processExpressionStatement(com.google.javascript.jscomp.mozilla.rhino.ast.ExpressionStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(statementNode.getType()));
            node.addChildToBack(transform(statementNode.getExpression()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForInLoop(com.google.javascript.jscomp.mozilla.rhino.ast.ForInLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getIterator()), transform(loopNode.getIteratedObject()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForLoop(com.google.javascript.jscomp.mozilla.rhino.ast.ForLoop loopNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getInitializer()), transform(loopNode.getCondition()), transform(loopNode.getIncrement()));
            node.addChildToBack(transformBlock(loopNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionCall(com.google.javascript.jscomp.mozilla.rhino.ast.FunctionCall callNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(callNode.getType()), transform(callNode.getTarget()));
            for (com.google.javascript.jscomp.mozilla.rhino.ast.AstNode child : callNode.getArguments()) {
                node.addChildToBack(transform(child));
            }
            int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();
            node.setLineno(callNode.getLineno());
            node.setCharno(position2charno(leftParamPos));
            maybeSetLengthFrom(node, callNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionNode(com.google.javascript.jscomp.mozilla.rhino.ast.FunctionNode functionNode) {
            com.google.javascript.jscomp.mozilla.rhino.ast.Name name = functionNode.getFunctionName();
            java.lang.Boolean isUnnamedFunction = false;
            if (name == null) {
                int functionType = functionNode.getFunctionType();
                if (functionType != com.google.javascript.jscomp.mozilla.rhino.ast.FunctionNode.FUNCTION_EXPRESSION) {
                    errorReporter.error("unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
                }
                name = new com.google.javascript.jscomp.mozilla.rhino.ast.Name();
                name.setIdentifier("");
                isUnnamedFunction = true;
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FUNCTION);
            com.google.javascript.rhino.Node newName = transform(name);
            if (isUnnamedFunction) {
                newName.setLineno(functionNode.getLineno());
                int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
                newName.setCharno(position2charno(lpColumn));
                maybeSetLengthFrom(newName, name);
            }
            node.addChildToBack(newName);
            com.google.javascript.rhino.Node lp = newNode(com.google.javascript.rhino.Token.LP);
            com.google.javascript.jscomp.mozilla.rhino.ast.Name fnName = functionNode.getFunctionName();
            if (fnName != null) {
                lp.setLineno(fnName.getLineno());
            } else {
                lp.setLineno(functionNode.getLineno());
            }
            int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
            lp.setCharno(position2charno(lparenCharno));
            for (com.google.javascript.jscomp.mozilla.rhino.ast.AstNode param : functionNode.getParams()) {
                lp.addChildToBack(transform(param));
            }
            node.addChildToBack(lp);
            com.google.javascript.rhino.Node bodyNode = transform(functionNode.getBody());
            parseDirectives(bodyNode);
            node.addChildToBack(bodyNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIfStatement(com.google.javascript.jscomp.mozilla.rhino.ast.IfStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.IF);
            node.addChildToBack(transform(statementNode.getCondition()));
            node.addChildToBack(transformBlock(statementNode.getThenPart()));
            if (statementNode.getElsePart() != null) {
                node.addChildToBack(transformBlock(statementNode.getElsePart()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processInfixExpression(com.google.javascript.jscomp.mozilla.rhino.ast.InfixExpression exprNode) {
            com.google.javascript.rhino.Node n = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType()), transform(exprNode.getLeft()), transform(exprNode.getRight()));
            n.setLineno(exprNode.getLineno());
            n.setCharno(position2charno(exprNode.getAbsolutePosition() + exprNode.getOperatorPosition()));
            maybeSetLengthFrom(n, exprNode);
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processKeywordLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.KeywordLiteral literalNode) {
            return newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(literalNode.getType()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabel(com.google.javascript.jscomp.mozilla.rhino.ast.Label labelNode) {
            return newStringNode(com.google.javascript.rhino.Token.LABEL_NAME, labelNode.getName());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabeledStatement(com.google.javascript.jscomp.mozilla.rhino.ast.LabeledStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.LABEL);
            com.google.javascript.rhino.Node prev = null;
            com.google.javascript.rhino.Node cur = node;
            for (com.google.javascript.jscomp.mozilla.rhino.ast.Label label : statementNode.getLabels()) {
                if (prev != null) {
                    prev.addChildToBack(cur);
                }
                cur.addChildToBack(transform(label));
                cur.setLineno(label.getLineno());
                maybeSetLengthFrom(cur, label);
                int clauseAbsolutePosition = position2charno(label.getAbsolutePosition());
                cur.setCharno(clauseAbsolutePosition);
                prev = cur;
                cur = newNode(com.google.javascript.rhino.Token.LABEL);
            }
            prev.addChildToBack(transform(statementNode.getStatement()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processName(com.google.javascript.jscomp.mozilla.rhino.ast.Name nameNode) {
            return processName(nameNode, false);
        }

        com.google.javascript.rhino.Node processName(com.google.javascript.jscomp.mozilla.rhino.ast.Name nameNode, boolean asString) {
            if (asString) {
                return newStringNode(com.google.javascript.rhino.Token.STRING, nameNode.getIdentifier());
            } else {
                if (isReservedKeyword(nameNode.getIdentifier())) {
                    errorReporter.error("identifier is a reserved word", sourceName, nameNode.getLineno(), "", 0);
                }
                return newStringNode(com.google.javascript.rhino.Token.NAME, nameNode.getIdentifier());
            }
        }

        private boolean isReservedKeyword(java.lang.String identifier) {
            return (reservedKeywords != null) && reservedKeywords.contains(identifier);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNewExpression(com.google.javascript.jscomp.mozilla.rhino.ast.NewExpression exprNode) {
            return processFunctionCall(exprNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNumberLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral literalNode) {
            return newNumberNode(literalNode.getNumber());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.ObjectLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.OBJECTLIT);
            for (com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty el : literalNode.getElements()) {
                if (config.languageMode == com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT3) {
                    if (el.isGetter()) {
                        reportGetter(el);
                        continue;
                    } else if (el.isSetter()) {
                        reportSetter(el);
                        continue;
                    }
                }
                com.google.javascript.rhino.Node key = transformAsString(el.getLeft());
                com.google.javascript.rhino.Node value = transform(el.getRight());
                if (el.isGetter()) {
                    key.setType(com.google.javascript.rhino.Token.GET);
                    com.google.common.base.Preconditions.checkState(value.getType() == com.google.javascript.rhino.Token.FUNCTION);
                    if (getFnParamNode(value).hasChildren()) {
                        reportGetterParam(el.getLeft());
                    }
                } else if (el.isSetter()) {
                    key.setType(com.google.javascript.rhino.Token.SET);
                    com.google.common.base.Preconditions.checkState(value.getType() == com.google.javascript.rhino.Token.FUNCTION);
                    if (!getFnParamNode(value).hasOneChild()) {
                        reportSetterParam(el.getLeft());
                    }
                }
                key.addChildToFront(value);
                node.addChildToBack(key);
            }
            return node;
        }

        com.google.javascript.rhino.Node getFnParamNode(com.google.javascript.rhino.Node fnNode) {
            com.google.common.base.Preconditions.checkArgument(fnNode.getType() == com.google.javascript.rhino.Token.FUNCTION);
            return fnNode.getFirstChild().getNext();
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectProperty(com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty propertyNode) {
            return processInfixExpression(propertyNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processParenthesizedExpression(com.google.javascript.jscomp.mozilla.rhino.ast.ParenthesizedExpression exprNode) {
            com.google.javascript.rhino.Node node = transform(exprNode.getExpression());
            node.putProp(com.google.javascript.rhino.Node.PARENTHESIZED_PROP, java.lang.Boolean.TRUE);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processPropertyGet(com.google.javascript.jscomp.mozilla.rhino.ast.PropertyGet getNode) {
            return newNode(com.google.javascript.rhino.Token.GETPROP, transform(getNode.getTarget()), transformAsString(getNode.getProperty()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processRegExpLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.RegExpLiteral literalNode) {
            com.google.javascript.rhino.Node literalStringNode = newStringNode(literalNode.getValue());
            literalStringNode.setLineno(literalNode.getLineno());
            maybeSetLengthFrom(literalStringNode, literalNode);
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.REGEXP, literalStringNode);
            java.lang.String flags = literalNode.getFlags();
            if ((flags != null) && (!flags.isEmpty())) {
                com.google.javascript.rhino.Node flagsNode = newStringNode(flags);
                flagsNode.setLineno(literalNode.getLineno());
                maybeSetLengthFrom(flagsNode, literalNode);
                node.addChildToBack(flagsNode);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processReturnStatement(com.google.javascript.jscomp.mozilla.rhino.ast.ReturnStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.RETURN);
            if (statementNode.getReturnValue() != null) {
                node.addChildToBack(transform(statementNode.getReturnValue()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processScope(com.google.javascript.jscomp.mozilla.rhino.ast.Scope scopeNode) {
            return processGeneric(scopeNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processStringLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.StringLiteral literalNode) {
            com.google.javascript.rhino.Node n = newStringNode(literalNode.getValue());
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchCase(com.google.javascript.jscomp.mozilla.rhino.ast.SwitchCase caseNode) {
            com.google.javascript.rhino.Node node;
            if (caseNode.isDefault()) {
                node = newNode(com.google.javascript.rhino.Token.DEFAULT);
            } else {
                com.google.javascript.jscomp.mozilla.rhino.ast.AstNode expr = caseNode.getExpression();
                node = newNode(com.google.javascript.rhino.Token.CASE, transform(expr));
            }
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            block.putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, true);
            block.setLineno(caseNode.getLineno());
            block.setCharno(position2charno(caseNode.getAbsolutePosition()));
            maybeSetLengthFrom(block, caseNode);
            if (caseNode.getStatements() != null) {
                for (com.google.javascript.jscomp.mozilla.rhino.ast.AstNode child : caseNode.getStatements()) {
                    block.addChildToBack(transform(child));
                }
            }
            node.addChildToBack(block);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchStatement(com.google.javascript.jscomp.mozilla.rhino.ast.SwitchStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SWITCH, transform(statementNode.getExpression()));
            for (com.google.javascript.jscomp.mozilla.rhino.ast.AstNode child : statementNode.getCases()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processThrowStatement(com.google.javascript.jscomp.mozilla.rhino.ast.ThrowStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.THROW, transform(statementNode.getExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processTryStatement(com.google.javascript.jscomp.mozilla.rhino.ast.TryStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.TRY, transformBlock(statementNode.getTryBlock()));
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            boolean lineSet = false;
            for (com.google.javascript.jscomp.mozilla.rhino.ast.CatchClause cc : statementNode.getCatchClauses()) {
                if (lineSet == false) {
                    block.setLineno(cc.getLineno());
                    maybeSetLengthFrom(block, cc);
                    lineSet = true;
                }
                block.addChildToBack(transform(cc));
            }
            node.addChildToBack(block);
            com.google.javascript.jscomp.mozilla.rhino.ast.AstNode finallyBlock = statementNode.getFinallyBlock();
            if (finallyBlock != null) {
                node.addChildToBack(transformBlock(finallyBlock));
            }
            if ((lineSet == false) && (finallyBlock != null)) {
                block.setLineno(finallyBlock.getLineno());
                maybeSetLengthFrom(block, finallyBlock);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processUnaryExpression(com.google.javascript.jscomp.mozilla.rhino.ast.UnaryExpression exprNode) {
            int type = com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType());
            com.google.javascript.rhino.Node operand = transform(exprNode.getOperand());
            if ((type == com.google.javascript.rhino.Token.NEG) && (operand.getType() == com.google.javascript.rhino.Token.NUMBER)) {
                operand.setDouble(-operand.getDouble());
                return operand;
            } else {
                if ((type == com.google.javascript.rhino.Token.DELPROP) && (!(((operand.getType() == com.google.javascript.rhino.Token.GETPROP) || (operand.getType() == com.google.javascript.rhino.Token.GETELEM)) || (operand.getType() == com.google.javascript.rhino.Token.NAME)))) {
                    java.lang.String msg = "Invalid delete operand. Only properties can be deleted.";
                    errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                } else if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
                    if (!validAssignmentTarget(operand)) {
                        java.lang.String msg = (type == com.google.javascript.rhino.Token.INC) ? "invalid increment target" : "invalid decrement target";
                        errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                    }
                }
                com.google.javascript.rhino.Node node = newNode(type, operand);
                if (exprNode.isPostfix()) {
                    node.putBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP, true);
                }
                return node;
            }
        }

        private boolean validAssignmentTarget(com.google.javascript.rhino.Node target) {
            switch (target.getType()) {
                case com.google.javascript.rhino.Token.NAME :
                case com.google.javascript.rhino.Token.GETPROP :
                case com.google.javascript.rhino.Token.GETELEM :
                    return true;
            }
            return false;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableDeclaration(com.google.javascript.jscomp.mozilla.rhino.ast.VariableDeclaration declarationNode) {
            if ((!config.acceptConstKeyword) && (declarationNode.getType() == com.google.javascript.jscomp.mozilla.rhino.Token.CONST)) {
                processIllegalToken(declarationNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.VAR);
            for (com.google.javascript.jscomp.mozilla.rhino.ast.VariableInitializer child : declarationNode.getVariables()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableInitializer(com.google.javascript.jscomp.mozilla.rhino.ast.VariableInitializer initializerNode) {
            com.google.javascript.rhino.Node node = transform(initializerNode.getTarget());
            if (initializerNode.getInitializer() != null) {
                node.addChildToBack(transform(initializerNode.getInitializer()));
                node.setLineno(node.getLineno());
                maybeSetLengthFrom(node, initializerNode);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWhileLoop(com.google.javascript.jscomp.mozilla.rhino.ast.WhileLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.WHILE, transform(loopNode.getCondition()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWithStatement(com.google.javascript.jscomp.mozilla.rhino.ast.WithStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.WITH, transform(statementNode.getExpression()), transformBlock(statementNode.getStatement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIllegalToken(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {
            errorReporter.error("Unsupported syntax: " + com.google.javascript.jscomp.mozilla.rhino.Token.typeToName(node.getType()), sourceName, node.getLineno(), "", 0);
            return newNode(com.google.javascript.rhino.Token.EMPTY);
        }

        void reportDestructuringAssign(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {
            errorReporter.error("destructuring assignment forbidden", sourceName, node.getLineno(), "", 0);
        }

        void reportGetter(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {
            errorReporter.error("getters are not supported in Internet Explorer", sourceName, node.getLineno(), "", 0);
        }

        void reportSetter(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {
            errorReporter.error("setters are not supported in Internet Explorer", sourceName, node.getLineno(), "", 0);
        }

        void reportGetterParam(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {
            errorReporter.error("getters may not have parameters", sourceName, node.getLineno(), "", 0);
        }

        void reportSetterParam(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {
            errorReporter.error("setters must have exactly one parameter", sourceName, node.getLineno(), "", 0);
        }
    }

    private static int transformTokenType(int token) {
        switch (token) {
            case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN :
                return com.google.javascript.rhino.Token.RETURN;
            case com.google.javascript.jscomp.mozilla.rhino.Token.BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.jscomp.mozilla.rhino.Token.BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.jscomp.mozilla.rhino.Token.BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.jscomp.mozilla.rhino.Token.EQ :
                return com.google.javascript.rhino.Token.EQ;
            case com.google.javascript.jscomp.mozilla.rhino.Token.NE :
                return com.google.javascript.rhino.Token.NE;
            case com.google.javascript.jscomp.mozilla.rhino.Token.LT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.jscomp.mozilla.rhino.Token.LE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.jscomp.mozilla.rhino.Token.GT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.jscomp.mozilla.rhino.Token.GE :
                return com.google.javascript.rhino.Token.GE;
            case com.google.javascript.jscomp.mozilla.rhino.Token.LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.jscomp.mozilla.rhino.Token.RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.jscomp.mozilla.rhino.Token.URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.jscomp.mozilla.rhino.Token.ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.jscomp.mozilla.rhino.Token.SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.jscomp.mozilla.rhino.Token.MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.jscomp.mozilla.rhino.Token.DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.jscomp.mozilla.rhino.Token.MOD :
                return com.google.javascript.rhino.Token.MOD;
            case com.google.javascript.jscomp.mozilla.rhino.Token.NOT :
                return com.google.javascript.rhino.Token.NOT;
            case com.google.javascript.jscomp.mozilla.rhino.Token.BITNOT :
                return com.google.javascript.rhino.Token.BITNOT;
            case com.google.javascript.jscomp.mozilla.rhino.Token.POS :
                return com.google.javascript.rhino.Token.POS;
            case com.google.javascript.jscomp.mozilla.rhino.Token.NEG :
                return com.google.javascript.rhino.Token.NEG;
            case com.google.javascript.jscomp.mozilla.rhino.Token.NEW :
                return com.google.javascript.rhino.Token.NEW;
            case com.google.javascript.jscomp.mozilla.rhino.Token.DELPROP :
                return com.google.javascript.rhino.Token.DELPROP;
            case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOF :
                return com.google.javascript.rhino.Token.TYPEOF;
            case com.google.javascript.jscomp.mozilla.rhino.Token.GETPROP :
                return com.google.javascript.rhino.Token.GETPROP;
            case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP :
                return com.google.javascript.rhino.Token.SETPROP;
            case com.google.javascript.jscomp.mozilla.rhino.Token.GETELEM :
                return com.google.javascript.rhino.Token.GETELEM;
            case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM :
                return com.google.javascript.rhino.Token.SETELEM;
            case com.google.javascript.jscomp.mozilla.rhino.Token.CALL :
                return com.google.javascript.rhino.Token.CALL;
            case com.google.javascript.jscomp.mozilla.rhino.Token.NAME :
                return com.google.javascript.rhino.Token.NAME;
            case com.google.javascript.jscomp.mozilla.rhino.Token.NUMBER :
                return com.google.javascript.rhino.Token.NUMBER;
            case com.google.javascript.jscomp.mozilla.rhino.Token.STRING :
                return com.google.javascript.rhino.Token.STRING;
            case com.google.javascript.jscomp.mozilla.rhino.Token.NULL :
                return com.google.javascript.rhino.Token.NULL;
            case com.google.javascript.jscomp.mozilla.rhino.Token.THIS :
                return com.google.javascript.rhino.Token.THIS;
            case com.google.javascript.jscomp.mozilla.rhino.Token.FALSE :
                return com.google.javascript.rhino.Token.FALSE;
            case com.google.javascript.jscomp.mozilla.rhino.Token.TRUE :
                return com.google.javascript.rhino.Token.TRUE;
            case com.google.javascript.jscomp.mozilla.rhino.Token.SHEQ :
                return com.google.javascript.rhino.Token.SHEQ;
            case com.google.javascript.jscomp.mozilla.rhino.Token.SHNE :
                return com.google.javascript.rhino.Token.SHNE;
            case com.google.javascript.jscomp.mozilla.rhino.Token.REGEXP :
                return com.google.javascript.rhino.Token.REGEXP;
            case com.google.javascript.jscomp.mozilla.rhino.Token.THROW :
                return com.google.javascript.rhino.Token.THROW;
            case com.google.javascript.jscomp.mozilla.rhino.Token.IN :
                return com.google.javascript.rhino.Token.IN;
            case com.google.javascript.jscomp.mozilla.rhino.Token.INSTANCEOF :
                return com.google.javascript.rhino.Token.INSTANCEOF;
            case com.google.javascript.jscomp.mozilla.rhino.Token.ARRAYLIT :
                return com.google.javascript.rhino.Token.ARRAYLIT;
            case com.google.javascript.jscomp.mozilla.rhino.Token.OBJECTLIT :
                return com.google.javascript.rhino.Token.OBJECTLIT;
            case com.google.javascript.jscomp.mozilla.rhino.Token.TRY :
                return com.google.javascript.rhino.Token.TRY;
            case com.google.javascript.jscomp.mozilla.rhino.Token.LP :
                return com.google.javascript.rhino.Token.LP;
            case com.google.javascript.jscomp.mozilla.rhino.Token.COMMA :
                return com.google.javascript.rhino.Token.COMMA;
            case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN :
                return com.google.javascript.rhino.Token.ASSIGN;
            case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITOR;
            case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITXOR;
            case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.ASSIGN_BITAND;
            case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.ASSIGN_LSH;
            case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.ASSIGN_RSH;
            case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.ASSIGN_URSH;
            case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ASSIGN_ADD;
            case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.ASSIGN_SUB;
            case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.ASSIGN_MUL;
            case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.ASSIGN_DIV;
            case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.ASSIGN_MOD;
            case com.google.javascript.jscomp.mozilla.rhino.Token.HOOK :
                return com.google.javascript.rhino.Token.HOOK;
            case com.google.javascript.jscomp.mozilla.rhino.Token.COLON :
                return com.google.javascript.rhino.Token.COLON;
            case com.google.javascript.jscomp.mozilla.rhino.Token.OR :
                return com.google.javascript.rhino.Token.OR;
            case com.google.javascript.jscomp.mozilla.rhino.Token.AND :
                return com.google.javascript.rhino.Token.AND;
            case com.google.javascript.jscomp.mozilla.rhino.Token.INC :
                return com.google.javascript.rhino.Token.INC;
            case com.google.javascript.jscomp.mozilla.rhino.Token.DEC :
                return com.google.javascript.rhino.Token.DEC;
            case com.google.javascript.jscomp.mozilla.rhino.Token.FUNCTION :
                return com.google.javascript.rhino.Token.FUNCTION;
            case com.google.javascript.jscomp.mozilla.rhino.Token.IF :
                return com.google.javascript.rhino.Token.IF;
            case com.google.javascript.jscomp.mozilla.rhino.Token.ELSE :
                return com.google.javascript.rhino.Token.ELSE;
            case com.google.javascript.jscomp.mozilla.rhino.Token.SWITCH :
                return com.google.javascript.rhino.Token.SWITCH;
            case com.google.javascript.jscomp.mozilla.rhino.Token.CASE :
                return com.google.javascript.rhino.Token.CASE;
            case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULT :
                return com.google.javascript.rhino.Token.DEFAULT;
            case com.google.javascript.jscomp.mozilla.rhino.Token.WHILE :
                return com.google.javascript.rhino.Token.WHILE;
            case com.google.javascript.jscomp.mozilla.rhino.Token.DO :
                return com.google.javascript.rhino.Token.DO;
            case com.google.javascript.jscomp.mozilla.rhino.Token.FOR :
                return com.google.javascript.rhino.Token.FOR;
            case com.google.javascript.jscomp.mozilla.rhino.Token.BREAK :
                return com.google.javascript.rhino.Token.BREAK;
            case com.google.javascript.jscomp.mozilla.rhino.Token.CONTINUE :
                return com.google.javascript.rhino.Token.CONTINUE;
            case com.google.javascript.jscomp.mozilla.rhino.Token.VAR :
                return com.google.javascript.rhino.Token.VAR;
            case com.google.javascript.jscomp.mozilla.rhino.Token.WITH :
                return com.google.javascript.rhino.Token.WITH;
            case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH :
                return com.google.javascript.rhino.Token.CATCH;
            case com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY :
                return com.google.javascript.rhino.Token.FINALLY;
            case com.google.javascript.jscomp.mozilla.rhino.Token.VOID :
                return com.google.javascript.rhino.Token.VOID;
            case com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY :
                return com.google.javascript.rhino.Token.EMPTY;
            case com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK :
                return com.google.javascript.rhino.Token.BLOCK;
            case com.google.javascript.jscomp.mozilla.rhino.Token.LABEL :
                return com.google.javascript.rhino.Token.LABEL;
            case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID :
            case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT :
                return com.google.javascript.rhino.Token.EXPR_RESULT;
            case com.google.javascript.jscomp.mozilla.rhino.Token.SCRIPT :
                return com.google.javascript.rhino.Token.SCRIPT;
            case com.google.javascript.jscomp.mozilla.rhino.Token.GET :
                return com.google.javascript.rhino.Token.GET;
            case com.google.javascript.jscomp.mozilla.rhino.Token.SET :
                return com.google.javascript.rhino.Token.SET;
            case com.google.javascript.jscomp.mozilla.rhino.Token.CONST :
                return com.google.javascript.rhino.Token.CONST;
            case com.google.javascript.jscomp.mozilla.rhino.Token.DEBUGGER :
                return com.google.javascript.rhino.Token.DEBUGGER;
        }
        throw new java.lang.IllegalStateException(java.lang.String.valueOf(token));
    }

    private com.google.javascript.rhino.Node newNode(int type) {
        return new com.google.javascript.rhino.Node(type).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1) {
        return new com.google.javascript.rhino.Node(type, child1).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2) {
        return new com.google.javascript.rhino.Node(type, child1, child2).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2, com.google.javascript.rhino.Node child3) {
        return new com.google.javascript.rhino.Node(type, child1, child2, child3).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(java.lang.String value) {
        return com.google.javascript.rhino.Node.newString(value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(int type, java.lang.String value) {
        return com.google.javascript.rhino.Node.newString(type, value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNumberNode(java.lang.Double value) {
        return com.google.javascript.rhino.Node.newNumber(value).clonePropsFrom(templateNode);
    }
}
[4985320] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659828758237
GPR[SSUN]-1659828758237
-1251822497
GPR[SPVATF]-1659828758431
GPR[EPVATF]-1659828758677
GPR[SPS]-1659828758677
[4985989] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class JSDocInfoBuilder {
    private com.google.javascript.rhino.JSDocInfo currentInfo;

    private boolean populated = false;

    private boolean parseDocumentation = false;

    private com.google.javascript.rhino.JSDocInfo.Marker currentMarker = null;

    public JSDocInfoBuilder(boolean parseDocumentation) {
        this.currentInfo = new com.google.javascript.rhino.JSDocInfo(parseDocumentation);
        this.parseDocumentation = parseDocumentation;
    }

    public void recordOriginalCommentString(java.lang.String sourceComment) {
        if (parseDocumentation) {
            currentInfo.setOriginalCommentString(sourceComment);
        }
    }

    public boolean shouldParseDocumentation() {
        return parseDocumentation;
    }

    public boolean isPopulated() {
        return populated;
    }

    public boolean isPopulatedWithFileOverview() {
        return isPopulated() && ((currentInfo.hasFileOverview() || currentInfo.isExterns()) || currentInfo.isNoCompile());
    }

    public boolean isDescriptionRecorded() {
        return currentInfo.getDescription() != null;
    }

    public com.google.javascript.rhino.JSDocInfo build(com.google.javascript.rhino.Node associatedNode) {
        if (populated) {
            com.google.javascript.rhino.JSDocInfo built = currentInfo;
            built.setAssociatedNode(associatedNode);
            com.google.javascript.rhino.JSDocInfoBuilder.populateDefaults(built);
            populated = false;
            currentInfo = new com.google.javascript.rhino.JSDocInfo(this.parseDocumentation);
            return built;
        } else {
            return null;
        }
    }

    private static void populateDefaults(com.google.javascript.rhino.JSDocInfo info) {
        if (info.getVisibility() == null) {
            info.setVisibility(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED);
        }
    }

    public void markAnnotation(java.lang.String annotation, int lineno, int charno) {
        com.google.javascript.rhino.JSDocInfo.Marker marker = currentInfo.addMarker();
        if (marker != null) {
            marker.annotation = new com.google.javascript.rhino.JSDocInfo.StringPosition();
            marker.annotation.setItem(annotation);
            marker.annotation.setPositionInformation(lineno, charno, lineno, charno + annotation.length());
        }
        currentMarker = marker;
    }

    public void markText(java.lang.String text, int startLineno, int startCharno, int endLineno, int endCharno) {
        if (currentMarker != null) {
            currentMarker.description = new com.google.javascript.rhino.JSDocInfo.StringPosition();
            currentMarker.description.setItem(text);
            currentMarker.description.setPositionInformation(startLineno, startCharno, endLineno, endCharno);
        }
    }

    public void markTypeNode(com.google.javascript.rhino.Node typeNode, int lineno, int startCharno, int endCharno, boolean hasLC) {
        if (currentMarker != null) {
            currentMarker.type = new com.google.javascript.rhino.JSDocInfo.TypePosition();
            currentMarker.type.setItem(typeNode);
            currentMarker.type.hasBrackets = hasLC;
            currentMarker.type.setPositionInformation(lineno, startCharno, lineno, endCharno);
        }
    }

    public void markName(java.lang.String name, int lineno, int charno) {
        if (currentMarker != null) {
            currentMarker.name = new com.google.javascript.rhino.JSDocInfo.StringPosition();
            currentMarker.name.setItem(name);
            currentMarker.name.setPositionInformation(lineno, charno, lineno, charno + name.length());
        }
    }

    public boolean recordBlockDescription(java.lang.String description) {
        populated = true;
        return currentInfo.documentBlock(description);
    }

    public boolean recordVisibility(com.google.javascript.rhino.JSDocInfo.Visibility visibility) {
        if (currentInfo.getVisibility() == null) {
            populated = true;
            currentInfo.setVisibility(visibility);
            return true;
        } else {
            return false;
        }
    }

    public boolean recordParameter(java.lang.String parameterName, com.google.javascript.rhino.JSTypeExpression type) {
        if ((!hasAnySingletonTypeTags()) && currentInfo.declareParam(type, parameterName)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordParameterDescription(java.lang.String parameterName, java.lang.String description) {
        if (currentInfo.documentParam(parameterName, description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordTemplateTypeName(java.lang.String name) {
        if (currentInfo.declareTemplateTypeName(name)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordThrowType(com.google.javascript.rhino.JSTypeExpression type) {
        if (!hasAnySingletonTypeTags()) {
            currentInfo.declareThrows(type);
            populated = true;
            return true;
        }
        return false;
    }

    public boolean recordThrowDescription(com.google.javascript.rhino.JSTypeExpression type, java.lang.String description) {
        if (currentInfo.documentThrows(type, description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean addAuthor(java.lang.String author) {
        if (currentInfo.documentAuthor(author)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean addReference(java.lang.String reference) {
        if (currentInfo.documentReference(reference)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConsistentIdGenerator() {
        if (!currentInfo.isConsistentIdGenerator()) {
            currentInfo.setConsistentIdGenerator(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordVersion(java.lang.String version) {
        if (currentInfo.documentVersion(version)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDeprecationReason(java.lang.String reason) {
        if (currentInfo.setDeprecationReason(reason)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordSuppressions(java.util.Set<java.lang.String> suppressions) {
        if (currentInfo.setSuppressions(suppressions)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordModifies(java.util.Set<java.lang.String> modifies) {
        if ((!hasAnySingletonSideEffectTags()) && currentInfo.setModifies(modifies)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordTypedef(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setTypedefType(type);
            populated = true;
            return true;
        }
        return false;
    }

    public boolean recordIdGenerator() {
        if (!currentInfo.isIdGenerator()) {
            currentInfo.setIdGenerator(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordReturnType(com.google.javascript.rhino.JSTypeExpression jsType) {
        if (((jsType != null) && (currentInfo.getReturnType() == null)) && (!hasAnySingletonTypeTags())) {
            currentInfo.setReturnType(jsType);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordReturnDescription(java.lang.String description) {
        if (currentInfo.documentReturn(description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDefineType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((((type != null) && (!currentInfo.isConstant())) && (!currentInfo.isDefine())) && recordType(type)) {
            currentInfo.setDefine(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordEnumParameterType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setEnumParameterType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordThisType(com.google.javascript.rhino.JSTypeExpression type) {
        if (((type != null) && (!hasAnySingletonTypeTags())) && (!currentInfo.hasThisType())) {
            currentInfo.setThisType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordBaseType(com.google.javascript.rhino.JSTypeExpression jsType) {
        if (((jsType != null) && (!hasAnySingletonTypeTags())) && (!currentInfo.hasBaseType())) {
            currentInfo.setBaseType(jsType);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConstancy() {
        if (!currentInfo.isConstant()) {
            currentInfo.setConstant(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDescription(java.lang.String description) {
        if ((description != null) && (currentInfo.getDescription() == null)) {
            currentInfo.setDescription(description);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordMeaning(java.lang.String meaning) {
        if ((meaning != null) && (currentInfo.getMeaning() == null)) {
            currentInfo.setMeaning(meaning);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordFileOverview(java.lang.String description) {
        if (currentInfo.documentFileOverview(description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordHiddenness() {
        if (!currentInfo.isHidden()) {
            currentInfo.setHidden(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoCompile() {
        if (!currentInfo.isNoCompile()) {
            currentInfo.setNoCompile(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoTypeCheck() {
        if (!currentInfo.isNoTypeCheck()) {
            currentInfo.setNoCheck(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConstructor() {
        if (((!hasAnySingletonTypeTags()) && (!currentInfo.isConstructor())) && (!currentInfo.isInterface())) {
            currentInfo.setConstructor(true);
            populated = true;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(365).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(365).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(365).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.populated",com.google.javascript.rhino.JSDocInfoBuilder.this.populated);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(365).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.parseDocumentation",com.google.javascript.rhino.JSDocInfoBuilder.this.parseDocumentation);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(365).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.currentMarker",com.google.javascript.rhino.JSDocInfoBuilder.this.currentMarker);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(365).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.currentInfo",com.google.javascript.rhino.JSDocInfoBuilder.this.currentInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(365).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(365).collectionEnds();
            }
            if (runtimeAngelicValue)
                return true;

        } else {
            return false;
        }
    }

    public boolean isConstructorRecorded() {
        return currentInfo.isConstructor();
    }

    public boolean recordJavaDispatch() {
        if (!currentInfo.isJavaDispatch()) {
            currentInfo.setJavaDispatch(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isJavaDispatch() {
        return currentInfo.isJavaDispatch();
    }

    public boolean recordPreserveTry() {
        if (!currentInfo.shouldPreserveTry()) {
            currentInfo.setShouldPreserveTry(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordOverride() {
        if (!currentInfo.isOverride()) {
            currentInfo.setOverride(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoAlias() {
        if (!currentInfo.isNoAlias()) {
            currentInfo.setNoAlias(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDeprecated() {
        if (!currentInfo.isDeprecated()) {
            currentInfo.setDeprecated(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordInterface() {
        if (((!hasAnySingletonTypeTags()) && (!currentInfo.isConstructor())) && (!currentInfo.isInterface())) {
            currentInfo.setInterface(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExport() {
        if (!currentInfo.isExport()) {
            currentInfo.setExport(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoShadow() {
        if (!currentInfo.isNoShadow()) {
            currentInfo.setNoShadow(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordImplicitCast() {
        if (!currentInfo.isImplicitCast()) {
            currentInfo.setImplicitCast(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoSideEffects() {
        if ((!hasAnySingletonSideEffectTags()) && (!currentInfo.isNoSideEffects())) {
            currentInfo.setNoSideEffects(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExterns() {
        if (!currentInfo.isExterns()) {
            currentInfo.setExterns(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isInterfaceRecorded() {
        return currentInfo.isInterface();
    }

    public boolean hasParameter(java.lang.String name) {
        return currentInfo.hasParameter(name);
    }

    public boolean recordImplementedInterface(com.google.javascript.rhino.JSTypeExpression interfaceName) {
        if (currentInfo.addImplementedInterface(interfaceName)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExtendedInterface(com.google.javascript.rhino.JSTypeExpression interfaceType) {
        if (currentInfo.addExtendedInterface(interfaceType)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordLends(java.lang.String name) {
        if (!hasAnyTypeRelatedTags()) {
            currentInfo.setLendsName(name);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    private boolean hasAnyTypeRelatedTags() {
        return (((((((currentInfo.isConstructor() || currentInfo.isInterface()) || (currentInfo.getParameterCount() > 0)) || currentInfo.hasReturnType()) || currentInfo.hasBaseType()) || (currentInfo.getExtendedInterfacesCount() > 0)) || (currentInfo.getLendsName() != null)) || currentInfo.hasThisType()) || hasAnySingletonTypeTags();
    }

    private boolean hasAnySingletonTypeTags() {
        return (currentInfo.hasType() || currentInfo.hasTypedefType()) || currentInfo.hasEnumParameterType();
    }

    private boolean hasAnySingletonSideEffectTags() {
        return currentInfo.isNoSideEffects() || currentInfo.hasModifies();
    }
}
[4985990] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659828758907
GPR[SSUN]-1659828758907
-1251822497
GPR[SPVATF]-1659828759135
GPR[EPVATF]-1659828759386
GPR[SPS]-1659828759386
[4986865] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:669.
GPR[EPS]-1659828759783
GPR[ESUN]-1659828759783
GPR[SSUN]-1659828759783
-1251822497
GPR[SPVATF]-1659828759977
GPR[EPVATF]-1659828760231
GPR[SPS]-1659828760231
[4987712] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:668.
GPR[EPS]-1659828760629
GPR[ESUN]-1659828760629
GPR[SSUN]-1659828760629
1508981886
GPR[ESUN]-1659828760844
GPR[SSUN]-1659828760844
1508981886
GPR[SPVATF]-1659828761067
GPR[EPVATF]-1659828761313
GPR[SPS]-1659828761313
[4988829] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:254.
GPR[EPS]-1659828761746
GPR[ESUN]-1659828761746
GPR[SSUN]-1659828761746
-179796259
GPR[SPVATF]-1659828761991
GPR[EPVATF]-1659828762233
GPR[SPS]-1659828762233
[4989976] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:266.
GPR[EPS]-1659828762893
GPR[ESUN]-1659828762893
GPR[SSUN]-1659828762894
-179796259
GPR[SPVATF]-1659828763141
GPR[EPVATF]-1659828763394
GPR[SPS]-1659828763394
[4991130] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:265.
GPR[EPS]-1659828764047
GPR[ESUN]-1659828764047
GPR[SSUN]-1659828764047
-179796259
GPR[SPVATF]-1659828764288
GPR[EPVATF]-1659828764546
GPR[SPS]-1659828764546
[4992278] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:256.
GPR[EPS]-1659828765195
GPR[SPVATF]-1659828765195
GPR[EPVATF]-1659828765456
GPR[SPS]-1659828765456
[4993329] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:256.
GPR[EPS]-1659828766246
GPR[ESUN]-1659828766246
GPR[SSUN]-1659828766246
-1251822497
GPR[SPVATF]-1659828766443
GPR[EPVATF]-1659828766699
GPR[SPS]-1659828766699
[4994170] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:666.
GPR[EPS]-1659828767087
GPR[ESUN]-1659828767087
GPR[SSUN]-1659828767087
GPR[ESUN]-1659828767087
GPR[SSUN]-1659828767087
GPR[ESUN]-1659828767087
GPR[SSUN]-1659828767087
GPR[ESUN]-1659828767087
GPR[SSUN]-1659828767087
GPR[ESUN]-1659828767087
GPR[SSUN]-1659828767087
GPR[ESUN]-1659828767087
GPR[SSUN]-1659828767087
GPR[ESUN]-1659828767087
GPR[SSUN]-1659828767087
-718432441
GPR[ESUN]-1659828767334
GPR[SSUN]-1659828767334
-718432441
GPR[SPVATF]-1659828767574
GPR[EPVATF]-1659828767823
GPR[SPS]-1659828767823
[4995546] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:891.
GPR[EPS]-1659828768463
GPR[ESUN]-1659828768463
GPR[SSUN]-1659828768463
-718432441
GPR[SPVATF]-1659828768699
GPR[EPVATF]-1659828768968
GPR[SPS]-1659828768968
[4996698] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:903.
GPR[EPS]-1659828769615
GPR[ESUN]-1659828769615
GPR[SSUN]-1659828769615
-718432441
GPR[SPVATF]-1659828769854
GPR[EPVATF]-1659828770106
GPR[SPS]-1659828770106
[4998688] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:902.
GPR[EPS]-1659828771605
GPR[SPVATF]-1659828771606
GPR[EPVATF]-1659828771845
GPR[SPS]-1659828771845
[4999566] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:902.
GPR[EPS]-1659828772483
GPR[ESUN]-1659828772483
GPR[SSUN]-1659828772483
-718432441
GPR[ESUN]-1659828772718
GPR[SSUN]-1659828772718
GPR[ESUN]-1659828772718
GPR[SSUN]-1659828772718
-1117079791
GPR[ESUN]-1659828772918
GPR[SSUN]-1659828772918
-1117079791
GPR[SPVATF]-1659828773116
GPR[EPVATF]-1659828773366
GPR[SPS]-1659828773366
[5000989] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:368.
GPR[EPS]-1659828773906
GPR[ESUN]-1659828773906
GPR[SSUN]-1659828773906
-1117079791
GPR[SPVATF]-1659828774112
GPR[EPVATF]-1659828774729
GPR[SPS]-1659828774729
[5002313] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:367.
GPR[EPS]-1659828775230
GPR[ESUN]-1659828775230
GPR[SSUN]-1659828775230
1616555300
GPR[ESUN]-1659828775424
GPR[SSUN]-1659828775424
GPR[ESUN]-1659828775424
GPR[SSUN]-1659828775424
GPR[ESUN]-1659828775424
GPR[SSUN]-1659828775424
GPR[ESUN]-1659828775424
GPR[SSUN]-1659828775424
GPR[ESUN]-1659828775424
GPR[SSUN]-1659828775424
-1117079791
GPR[ESUN]-1659828775628
GPR[SSUN]-1659828775628
-1117079791
GPR[SPVATF]-1659828775826
GPR[EPVATF]-1659828776082
GPR[SPS]-1659828776082
[5003627] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:279.
GPR[EPS]-1659828776544
GPR[ESUN]-1659828776544
GPR[SSUN]-1659828776544
-1117079791
GPR[SPVATF]-1659828776745
GPR[EPVATF]-1659828777000
GPR[SPS]-1659828777000
[5004544] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:278.
GPR[EPS]-1659828777461
GPR[ESUN]-1659828777461
GPR[SSUN]-1659828777461
GPR[ESUN]-1659828777461
GPR[SSUN]-1659828777461
GPR[ESUN]-1659828777461
GPR[SSUN]-1659828777461
GPR[ESUN]-1659828777461
GPR[SSUN]-1659828777461
GPR[ESUN]-1659828777461
GPR[SSUN]-1659828777461
GPR[ESUN]-1659828777461
GPR[SSUN]-1659828777461
GPR[ESUN]-1659828777461
GPR[SSUN]-1659828777461
GPR[ESUN]-1659828777461
GPR[SSUN]-1659828777461
GPR[ESUN]-1659828777461
GPR[SSUN]-1659828777461
GPR[ESUN]-1659828777461
GPR[SSUN]-1659828777461
1508981886
GPR[ESUN]-1659828777677
GPR[SSUN]-1659828777677
1508981886
GPR[ESUN]-1659828777889
GPR[SSUN]-1659828777889
-1117079791
GPR[SPVATF]-1659828778093
GPR[EPVATF]-1659828778352
GPR[SPS]-1659828778352
[5005892] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:810.
GPR[EPS]-1659828778809
GPR[ESUN]-1659828778809
GPR[SSUN]-1659828778809
-383829259
GPR[ESUN]-1659828779010
GPR[SSUN]-1659828779010
-383829259
GPR[ESUN]-1659828779211
GPR[SSUN]-1659828779211
GPR[ESUN]-1659828779212
GPR[SSUN]-1659828779212
1508981886
GPR[ESUN]-1659828779427
GPR[SSUN]-1659828779427
1508981886
GPR[SPVATF]-1659828779658
GPR[EPVATF]-1659828779911
GPR[SPS]-1659828779911
[5007453] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:324.
GPR[EPS]-1659828780370
GPR[ESUN]-1659828780370
GPR[SSUN]-1659828780370
1508981886
GPR[SPVATF]-1659828780582
GPR[EPVATF]-1659828780828
GPR[SPS]-1659828780829
[5008344] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:323.
GPR[EPS]-1659828781261
GPR[SPVATF]-1659828781262
GPR[EPVATF]-1659828781511
GPR[SPS]-1659828781511
[5009018] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:323.
GPR[EPS]-1659828781935
GPR[ESUN]-1659828781935
GPR[SSUN]-1659828781935
-1251822497
GPR[ESUN]-1659828782129
GPR[SSUN]-1659828782129
-1117079791
GPR[ESUN]-1659828782333
GPR[SSUN]-1659828782333
-1117079791
GPR[SPVATF]-1659828782537
GPR[EPVATF]-1659828782781
GPR[SPS]-1659828782781
[5010311] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:814.
GPR[EPS]-1659828783228
GPR[SPVATF]-1659828783228
GPR[EPVATF]-1659828783474
GPR[SPS]-1659828783474
[5011015] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:814.
GPR[EPS]-1659828783932
GPR[ESUN]-1659828783932
GPR[SSUN]-1659828783932
-1117079791
GPR[SPVATF]-1659828784138
GPR[EPVATF]-1659828784383
GPR[SPS]-1659828784383
[5011937] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:809.
GPR[EPS]-1659828784854
GPR[SPVATF]-1659828784854
GPR[EPVATF]-1659828785101
GPR[SPS]-1659828785101
[5012640] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:809.
GPR[EPS]-1659828785557
GPR[ESUN]-1659828785557
GPR[SSUN]-1659828785558
-1117079791
GPR[ESUN]-1659828785760
GPR[SSUN]-1659828785760
-1345859678
GPR[SPVATF]-1659828786007
GPR[EPVATF]-1659828786249
GPR[SPS]-1659828786249
[5013882] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:267.
GPR[EPS]-1659828786799
GPR[ESUN]-1659828786799
GPR[SSUN]-1659828786799
1508981886
GPR[ESUN]-1659828787008
GPR[SSUN]-1659828787008
1508981886
GPR[ESUN]-1659828787229
GPR[SSUN]-1659828787229
-1345859678
GPR[SPVATF]-1659828787475
GPR[EPVATF]-1659828787706
GPR[SPS]-1659828787706
[5015379] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:257.
GPR[EPS]-1659828788296
GPR[ESUN]-1659828788296
GPR[SSUN]-1659828788296
-1345859678
GPR[ESUN]-1659828788542
GPR[SSUN]-1659828788542
1508981886
GPR[ESUN]-1659828788746
GPR[SSUN]-1659828788746
-1345859678
GPR[ESUN]-1659828788990
GPR[SSUN]-1659828788990
-1345859678
GPR[SPVATF]-1659828789234
GPR[EPVATF]-1659828789463
GPR[SPS]-1659828789463
[5017087] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:354.
GPR[EPS]-1659828790004
GPR[ESUN]-1659828790004
GPR[SSUN]-1659828790004
-1345859678
GPR[SPVATF]-1659828790321
GPR[EPVATF]-1659828790618
GPR[SPS]-1659828790618
[5018431] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:353.
GPR[EPS]-1659828791348
GPR[ESUN]-1659828791348
GPR[SSUN]-1659828791348
-1345859678
GPR[SPVATF]-1659828791591
GPR[EPVATF]-1659828791824
GPR[SPS]-1659828791824
[5019469] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:352.
GPR[EPS]-1659828792386
GPR[ESUN]-1659828792386
GPR[SSUN]-1659828792386
-1345859678
GPR[ESUN]-1659828792642
GPR[SSUN]-1659828792642
-1345859678
GPR[ESUN]-1659828792938
GPR[SSUN]-1659828792938
-1345859678
GPR[ESUN]-1659828793539
GPR[SSUN]-1659828793539
-1345859678
GPR[ESUN]-1659828794186
GPR[SSUN]-1659828794186
-1345859678
GPR[ESUN]-1659828794789
GPR[SSUN]-1659828794789
-1345859678
GPR[SPVATF]-1659828795196
GPR[EPVATF]-1659828795437
GPR[SPS]-1659828795437
[5023098] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:256.
GPR[EPS]-1659828796015
GPR[SPVATF]-1659828796016
GPR[EPVATF]-1659828796260
GPR[SPS]-1659828796260
[5023939] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:256.
GPR[EPS]-1659828796856
GPR[ESUN]-1659828796856
GPR[SSUN]-1659828796857
-1345859678
GPR[SPVATF]-1659828797110
GPR[EPVATF]-1659828797350
GPR[SPS]-1659828797350
[5024997] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:255.
GPR[EPS]-1659828797914
GPR[ESUN]-1659828797914
GPR[SSUN]-1659828797914
-1345859678
GPR[ESUN]-1659828798166
GPR[SSUN]-1659828798166
-1345859678
GPR[SPVATF]-1659828798414
GPR[EPVATF]-1659828798656
GPR[SPS]-1659828798656
[5026283] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:238.
GPR[EPS]-1659828799200
GPR[SPVATF]-1659828799201
GPR[EPVATF]-1659828799443
GPR[SPS]-1659828799443
[5027102] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:238.
GPR[EPS]-1659828800019
GPR[ESUN]-1659828800020
GPR[SSUN]-1659828800020
GPR[ESUN]-1659828800020
GPR[SSUN]-1659828800020
GPR[ESUN]-1659828800020
GPR[SSUN]-1659828800020
GPR[ESUN]-1659828800020
GPR[SSUN]-1659828800020
GPR[ESUN]-1659828800020
GPR[SSUN]-1659828800020
-179796259
GPR[ESUN]-1659828800265
GPR[SSUN]-1659828800265
-179796259
GPR[SPVATF]-1659828800509
GPR[EPVATF]-1659828800751
GPR[SPS]-1659828800751
[5028466] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:113.
GPR[EPS]-1659828801383
GPR[ESUN]-1659828801383
GPR[SSUN]-1659828801383
GPR[ESUN]-1659828801383
GPR[SSUN]-1659828801383
GPR[ESUN]-1659828801383
GPR[SSUN]-1659828801383
GPR[ESUN]-1659828801383
GPR[SSUN]-1659828801383
GPR[ESUN]-1659828801383
GPR[SSUN]-1659828801383
GPR[ESUN]-1659828801383
GPR[SSUN]-1659828801383
GPR[ESUN]-1659828801383
GPR[SSUN]-1659828801383
GPR[ESUN]-1659828801383
GPR[SSUN]-1659828801383
GPR[ESUN]-1659828801383
GPR[SSUN]-1659828801384
GPR[ESUN]-1659828801384
GPR[SSUN]-1659828801384
-179796259
GPR[ESUN]-1659828801630
GPR[SSUN]-1659828801630
-179796259
GPR[SPVATF]-1659828801867
GPR[EPVATF]-1659828802107
GPR[SPS]-1659828802107
[5029812] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:105.
GPR[EPS]-1659828802729
GPR[ESUN]-1659828802729
GPR[SSUN]-1659828802729
1508981886
GPR[ESUN]-1659828802983
GPR[SSUN]-1659828802983
-1345859678
GPR[ESUN]-1659828803227
GPR[SSUN]-1659828803227
-1345859678
GPR[SPVATF]-1659828803469
GPR[EPVATF]-1659828803705
GPR[SPS]-1659828803705
[5031336] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:177.
GPR[EPS]-1659828804253
GPR[SPVATF]-1659828804253
GPR[EPVATF]-1659828804487
GPR[SPS]-1659828804487
[5032107] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:177.
GPR[EPS]-1659828805024
GPR[ESUN]-1659828805024
GPR[SSUN]-1659828805024
-1345859678
GPR[SPVATF]-1659828805272
GPR[EPVATF]-1659828805514
GPR[SPS]-1659828805514
[5033155] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:174.
GPR[EPS]-1659828806072
GPR[SPVATF]-1659828806073
GPR[EPVATF]-1659828806317
GPR[SPS]-1659828806317
[5033956] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:174.
GPR[EPS]-1659828806873
GPR[ESUN]-1659828806873
GPR[SSUN]-1659828806873
-1345859678
GPR[SPVATF]-1659828807119
GPR[EPVATF]-1659828807359
GPR[SPS]-1659828807359
[5034990] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:173.
GPR[EPS]-1659828807907
GPR[ESUN]-1659828807907
GPR[SSUN]-1659828807908
GPR[ESUN]-1659828807908
GPR[SSUN]-1659828807908
-179796259
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
GPR[ESUN]-1659828808174
GPR[SSUN]-1659828808174
-1117079791
GPR[ESUN]-1659828808373
GPR[SSUN]-1659828808373
-1117079791
GPR[SPVATF]-1659828808567
GPR[EPVATF]-1659828808802
GPR[SPS]-1659828808802
[5036340] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:476.
GPR[EPS]-1659828809257
GPR[ESUN]-1659828809257
GPR[SSUN]-1659828809257
-1117079791
GPR[SPVATF]-1659828809459
GPR[EPVATF]-1659828809702
GPR[SPS]-1659828809702
[5037231] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:475.
GPR[EPS]-1659828810148
GPR[ESUN]-1659828810148
GPR[SSUN]-1659828810148
-1117079791
GPR[SPVATF]-1659828810347
GPR[EPVATF]-1659828810593
GPR[SPS]-1659828810593
[5038190] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:474.
GPR[EPS]-1659828811107
GPR[ESUN]-1659828811107
GPR[SSUN]-1659828811107
-1117079791
GPR[ESUN]-1659828811312
GPR[SSUN]-1659828811312
-1117079791
GPR[SPVATF]-1659828811516
GPR[EPVATF]-1659828811758
GPR[SPS]-1659828811758
[5039302] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:126.
GPR[EPS]-1659828812219
GPR[ESUN]-1659828812219
GPR[SSUN]-1659828812219
-1345859678
GPR[ESUN]-1659828812476
GPR[SSUN]-1659828812476
-1345859678
GPR[ESUN]-1659828812728
GPR[SSUN]-1659828812728
-1345859678
GPR[SPVATF]-1659828812978
GPR[EPVATF]-1659828813219
GPR[SPS]-1659828813219
[5040880] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:384.
GPR[EPS]-1659828813797
GPR[ESUN]-1659828813797
GPR[SSUN]-1659828813797
GPR[ESUN]-1659828813797
GPR[SSUN]-1659828813797
GPR[ESUN]-1659828813797
GPR[SSUN]-1659828813797
GPR[ESUN]-1659828813797
GPR[SSUN]-1659828813797
GPR[ESUN]-1659828813797
GPR[SSUN]-1659828813797
GPR[ESUN]-1659828813797
GPR[SSUN]-1659828813797
GPR[ESUN]-1659828813797
GPR[SSUN]-1659828813797
GPR[ESUN]-1659828813797
GPR[SSUN]-1659828813797
GPR[ESUN]-1659828813797
GPR[SSUN]-1659828813797
GPR[ESUN]-1659828813797
GPR[SSUN]-1659828813797
1537627151
GPR[ESUN]-1659828814010
GPR[SSUN]-1659828814010
-1345859678
GPR[ESUN]-1659828814260
GPR[SSUN]-1659828814260
-1345859678
GPR[SPVATF]-1659828814509
GPR[EPVATF]-1659828814753
GPR[SPS]-1659828814753
[5042411] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:431.
GPR[EPS]-1659828815328
GPR[SPVATF]-1659828815328
GPR[EPVATF]-1659828815571
GPR[SPS]-1659828815571
[5043228] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:431.
GPR[EPS]-1659828816145
GPR[ESUN]-1659828816145
GPR[SSUN]-1659828816145
-1345859678
GPR[ESUN]-1659828816393
GPR[SSUN]-1659828816393
GPR[EPS]-1659828816616
-1345859678
GPR[ESUN]-1659828816644
GPR[SSUN]-1659828816644
GPR[ESUN]-1659828816644
GPR[SSUN]-1659828816644
GPR[ESUN]-1659828816644
GPR[SSUN]-1659828816644
GPR[ESUN]-1659828816644
GPR[SSUN]-1659828816644
GPR[ESUN]-1659828816644
GPR[SSUN]-1659828816644
GPR[ESUN]-1659828816644
GPR[SSUN]-1659828816644
GPR[ESUN]-1659828816644
GPR[SSUN]-1659828816644
GPR[ESUN]-1659828816644
GPR[SSUN]-1659828816644
GPR[ESUN]-1659828816644
GPR[SSUN]-1659828816644
GPR[ESUN]-1659828816644
GPR[SSUN]-1659828816644
GPR[ESUN]-1659828816644
GPR[SSUN]-1659828816644
GPR[ESUN]-1659828816644
GPR[SSUN]-1659828816644
GPR[ESUN]-1659828816644
GPR[SSUN]-1659828816644
GPR[ESUN]-1659828816644
GPR[SSUN]-1659828816644
GPR[ESUN]-1659828816644
GPR[SSUN]-1659828816644
GPR[ESUN]-1659828816644
GPR[SSUN]-1659828816644
GPR[ESUN]-1659828816644
GPR[SSUN]-1659828816644
GPR[ESUN]-1659828816644
GPR[SSUN]-1659828816644
-718432441
GPR[ESUN]-1659828816869
GPR[SSUN]-1659828816869
-718432441
GPR[SPVATF]-1659828817095
GPR[EPVATF]-1659828817322
GPR[SPS]-1659828817322
[5045071] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:900.
GPR[EPS]-1659828817988
GPR[ESUN]-1659828817988
GPR[SSUN]-1659828817988
GPR[ESUN]-1659828817988
GPR[SSUN]-1659828817988
GPR[ESUN]-1659828817988
GPR[SSUN]-1659828817988
GPR[ESUN]-1659828817988
GPR[SSUN]-1659828817988
-179796259
GPR[ESUN]-1659828818231
GPR[SSUN]-1659828818231
2433571
GPR[SPVATF]-1659828818466
GPR[EPVATF]-1659828818698
GPR[SPS]-1659828818698
[5046366] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:665.
GPR[EPS]-1659828819283
GPR[ESUN]-1659828819283
GPR[SSUN]-1659828819283
2433571
GPR[SPVATF]-1659828819515
GPR[EPVATF]-1659828819755
GPR[SPS]-1659828819755
[5047414] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:664.
GPR[EPS]-1659828820331
GPR[ESUN]-1659828820331
GPR[SSUN]-1659828820331
2433571
GPR[ESUN]-1659828820561
GPR[SSUN]-1659828820561
2433571
GPR[SPVATF]-1659828820787
GPR[EPVATF]-1659828821026
GPR[SPS]-1659828821026
[5048703] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:663.
GPR[EPS]-1659828821620
GPR[ESUN]-1659828821620
GPR[SSUN]-1659828821620
2433571
GPR[ESUN]-1659828821847
GPR[SSUN]-1659828821847
-718432441
GPR[SPVATF]-1659828822077
GPR[EPVATF]-1659828822320
GPR[SPS]-1659828822320
[5050077] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:193.
GPR[EPS]-1659828822994
GPR[ESUN]-1659828822994
GPR[SSUN]-1659828822994
-1117079791
GPR[SPVATF]-1659828823193
GPR[EPVATF]-1659828823430
GPR[SPS]-1659828823430
[5050948] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:779.
GPR[EPS]-1659828823865
GPR[ESUN]-1659828823865
GPR[SSUN]-1659828823866
GPR[ESUN]-1659828823866
GPR[SSUN]-1659828823866
GPR[ESUN]-1659828823866
GPR[SSUN]-1659828823866
GPR[ESUN]-1659828823866
GPR[SSUN]-1659828823866
GPR[ESUN]-1659828823866
GPR[SSUN]-1659828823866
GPR[ESUN]-1659828823866
GPR[SSUN]-1659828823866
GPR[ESUN]-1659828823866
GPR[SSUN]-1659828823866
GPR[ESUN]-1659828823866
GPR[SSUN]-1659828823866
GPR[ESUN]-1659828823866
GPR[SSUN]-1659828823866
GPR[ESUN]-1659828823866
GPR[SSUN]-1659828823866
-718432441
GPR[ESUN]-1659828824097
GPR[SSUN]-1659828824097
-718432441
GPR[SPVATF]-1659828824330
GPR[EPVATF]-1659828824565
GPR[SPS]-1659828824565
[5052275] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:871.
GPR[EPS]-1659828825192
GPR[ESUN]-1659828825192
GPR[SSUN]-1659828825192
GPR[ESUN]-1659828825192
GPR[SSUN]-1659828825192
-1117079791
GPR[ESUN]-1659828825389
GPR[SSUN]-1659828825389
-1117079791
GPR[SPVATF]-1659828825752
GPR[EPVATF]-1659828825990
GPR[SPS]-1659828825990
[5053530] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:236.
GPR[EPS]-1659828826447
GPR[ESUN]-1659828826447
GPR[SSUN]-1659828826447
-1345859678
GPR[ESUN]-1659828826693
GPR[SSUN]-1659828826693
-1345859678
GPR[SPVATF]-1659828826937
GPR[EPVATF]-1659828827181
GPR[SPS]-1659828827181
[5054820] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:981.
GPR[EPS]-1659828827737
GPR[ESUN]-1659828827737
GPR[SSUN]-1659828827737
-718432441
GPR[ESUN]-1659828827968
GPR[SSUN]-1659828827968
-718432441
GPR[SPVATF]-1659828828196
GPR[EPVATF]-1659828828431
GPR[SPS]-1659828828431
[5056190] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:886.
GPR[EPS]-1659828829107
GPR[ESUN]-1659828829108
GPR[SSUN]-1659828829108
-718432441
GPR[SPVATF]-1659828829346
GPR[EPVATF]-1659828829588
GPR[SPS]-1659828829588
[5057306] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:879.
GPR[EPS]-1659828830223
GPR[SPVATF]-1659828830223
GPR[EPVATF]-1659828830463
GPR[SPS]-1659828830463
[5058159] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:879.
GPR[EPS]-1659828831076
GPR[ESUN]-1659828831076
GPR[SSUN]-1659828831076
1187751237
GPR[ESUN]-1659828831350
GPR[SSUN]-1659828831350
1187751237
GPR[ESUN]-1659828831633
GPR[SSUN]-1659828831633
704176156
GPR[SPVATF]-1659828831832
GPR[EPVATF]-1659828832067
GPR[SPS]-1659828832067
[5059604] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:251.
GPR[EPS]-1659828832521
GPR[SPVATF]-1659828832521
GPR[EPVATF]-1659828833634
GPR[SPS]-1659828833634
[5061165] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:251.
GPR[EPS]-1659828834083
GPR[ESUN]-1659828834083
GPR[SSUN]-1659828834083
704176156
GPR[SPVATF]-1659828834287
GPR[EPVATF]-1659828834522
GPR[SPS]-1659828834522
[5062159] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:247.
GPR[EPS]-1659828835076
GPR[SPVATF]-1659828835076
GPR[EPVATF]-1659828835826
GPR[SPS]-1659828835826
[5063364] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:247.
GPR[EPS]-1659828836281
GPR[ESUN]-1659828836281
GPR[SSUN]-1659828836281
704176156
GPR[ESUN]-1659828836484
GPR[SSUN]-1659828836484
704176156
GPR[ESUN]-1659828836682
GPR[SSUN]-1659828836682
GPR[ESUN]-1659828836682
GPR[SSUN]-1659828836682
1508981886
GPR[SPVATF]-1659828836887
GPR[EPVATF]-1659828837125
GPR[SPS]-1659828837125
[5064665] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:542.
GPR[EPS]-1659828837582
GPR[ESUN]-1659828837582
GPR[SSUN]-1659828837582
-718432441
GPR[SPVATF]-1659828837813
GPR[EPVATF]-1659828838050
GPR[SPS]-1659828838050
[5065750] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:192.
GPR[EPS]-1659828838667
GPR[SPVATF]-1659828838667
GPR[EPVATF]-1659828838906
GPR[SPS]-1659828838906
[5066601] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:192.
GPR[EPS]-1659828839518
GPR[ESUN]-1659828839518
GPR[SSUN]-1659828839518
1508981886
GPR[SPVATF]-1659828839722
GPR[EPVATF]-1659828839949
GPR[SPS]-1659828839949
[5067440] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:526.
GPR[EPS]-1659828840357
GPR[ESUN]-1659828840357
GPR[SSUN]-1659828840358
-179796259
GPR[SPVATF]-1659828840614
GPR[EPVATF]-1659828840840
GPR[SPS]-1659828840840
[5068538] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:195.
GPR[EPS]-1659828841455
GPR[SPVATF]-1659828841455
GPR[EPVATF]-1659828841688
GPR[SPS]-1659828841688
[5069383] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:195.
GPR[EPS]-1659828842300
GPR[ESUN]-1659828842300
GPR[SSUN]-1659828842300
-179796259
GPR[SPVATF]-1659828842538
GPR[EPVATF]-1659828842766
GPR[SPS]-1659828842766
[5428048] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659829200965
GPR[SSUN]-1659829200965
-179796259
GPR[SPVATF]-1659829201603
GPR[EPVATF]-1659829201838
GPR[SPS]-1659829201838
[5429558] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2192.
GPR[EPS]-1659829202475
GPR[ESUN]-1659829202475
GPR[SSUN]-1659829202475
-179796259
GPR[SPVATF]-1659829202723
GPR[EPVATF]-1659829203093
GPR[SPS]-1659829203093
[5589688] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.OutOfMemoryError: GC overhead limit exceeded
GPR[SPVATF]-1659829375435
[5613633] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: GC overhead limit exceeded
GPR[ESUN]-1659829386550
GPR[SSUN]-1659829389734
\n\nNode: host-53\n
\n\nDate: Sat 06 Aug 2022 04:43:25 PM PDT\n
End running Nopol Closure/55 results at /experiment_home///results/Nopol/Closure/55/seed_260/
Removing checked out dir script/workingdir/Nopol/Closure_55
GPR[SSLE]-1659829406764
GPR[ESLE]-1659829466768
