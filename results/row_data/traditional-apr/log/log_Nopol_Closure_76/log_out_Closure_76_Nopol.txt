Sleep 1m start
GPR[SSLI]-1659899918940
GPR[ESLI]-1659899978946
Running Nopol Closure 76b with approach: smt
Timezone: America/Los_Angeles
Seed 263
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/76/seed_263/
The file script/workingdir/Nopol/Closure_76 does not exist!
script/workingdir/Nopol/Closure_76
script/workingdir/Nopol/Closure_76
classpath:  script/workingdir/Nopol/Closure_76/build/classes:script/workingdir/Nopol/Closure_76/lib/args4j.jar:script/workingdir/Nopol/Closure_76/lib/guava.jar:script/workingdir/Nopol/Closure_76/lib/jsr305.jar:script/workingdir/Nopol/Closure_76/lib/libtrunk_rhino_parser_jarjared.jar:script/workingdir/Nopol/Closure_76/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_76/lib/ant.jar:script/workingdir/Nopol/Closure_76/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_76/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_76/lib/json.jar:script/workingdir/Nopol/Closure_76/lib/junit.jar:script/workingdir/Nopol/Closure_76/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659899994244
GPR[ESLB]-1659900054247
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_76//build/classes:script/workingdir/Nopol/Closure_76//build/test:script/workingdir/Nopol/Closure_76/build/classes:script/workingdir/Nopol/Closure_76/lib/args4j.jar:script/workingdir/Nopol/Closure_76/lib/guava.jar:script/workingdir/Nopol/Closure_76/lib/jsr305.jar:script/workingdir/Nopol/Closure_76/lib/libtrunk_rhino_parser_jarjared.jar:script/workingdir/Nopol/Closure_76/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_76/lib/ant.jar:script/workingdir/Nopol/Closure_76/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_76/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_76/lib/json.jar:script/workingdir/Nopol/Closure_76/lib/junit.jar:script/workingdir/Nopol/Closure_76/build/test
Node: host-56
Date init: Sun 07 Aug 2022 12:20:54 PM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_76/src]
[1] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_76/build/classes/, file:script/workingdir/Nopol/Closure_76/build/test/, file:script/workingdir/Nopol/Closure_76/build/classes/, file:script/workingdir/Nopol/Closure_76/lib/args4j.jar, file:script/workingdir/Nopol/Closure_76/lib/guava.jar, file:script/workingdir/Nopol/Closure_76/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_76/lib/libtrunk_rhino_parser_jarjared.jar, file:script/workingdir/Nopol/Closure_76/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_76/lib/ant.jar, file:script/workingdir/Nopol/Closure_76/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_76/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_76/lib/json.jar, file:script/workingdir/Nopol/Closure_76/lib/junit.jar, file:script/workingdir/Nopol/Closure_76/build/test/]
[1] INFO NoPol - Statement type: PRE_THEN_COND
[1] INFO NoPol - Args: [com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPropertyOrderTest, com.google.javascript.jscomp.CheckPropertyOrderTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SuspiciousPropertiesCheckTest, com.google.javascript.jscomp.SuspiciousPropertiesCheckTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnfoldCompoundAssignmentsTest, com.google.javascript.jscomp.UnfoldCompoundAssignmentsTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableShadowDeclarationCheckTest, com.google.javascript.jscomp.VariableShadowDeclarationCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.ParserTest, com.google.javascript.rhino.ParserTest, com.google.javascript.rhino.TokenStreamTest, com.google.javascript.rhino.TokenStreamTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_76/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPropertyOrderTest, com.google.javascript.jscomp.CheckPropertyOrderTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SuspiciousPropertiesCheckTest, com.google.javascript.jscomp.SuspiciousPropertiesCheckTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnfoldCompoundAssignmentsTest, com.google.javascript.jscomp.UnfoldCompoundAssignmentsTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableShadowDeclarationCheckTest, com.google.javascript.jscomp.VariableShadowDeclarationCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.ParserTest, com.google.javascript.rhino.ParserTest, com.google.javascript.rhino.TokenStreamTest, com.google.javascript.rhino.TokenStreamTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/76/seed_263/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[6] INFO NoPol - Free memory: 1 GB
[7] INFO NoPol - Maximum memory: 7 GB
[7] INFO NoPol - Total memory available to JVM: 1 GB
[8] INFO NoPol - Java version: 1.8.0_45
[9] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[9] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659900058936
GPR[ESUP]-1659900058936
GPR[SFL]-1659900058936
GPR[EFL]-1659900090309
GPR[SFP]-1659900090309
GPR[SSUN]-1659900091762
2433571
GPR[SPVATF]-1659900092304
GPR[EPVATF]-1659900092873
GPR[SPS]-1659900092873
[39118] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1411.
GPR[EPS]-1659900094051
GPR[ESUN]-1659900094051
GPR[SSUN]-1659900094051
2433571
GPR[SPVATF]-1659900094296
GPR[EPVATF]-1659900094907
GPR[SPS]-1659900094907
GPR[EPS]-1659900099073
GPR[SPVATR]-1659900099073
[44140] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1369: PRECONDITION com.google.javascript.rhino.Node.this.type < 28
[44554] INFO TestPatch - Running test suite to check the patch "com.google.javascript.rhino.Node.this.type < 28" is working
GPR[EPVATR]-1659900099659
[44726] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659900099659
[44750] INFO NoPol - --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1368,7 +1368,9 @@
       if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        if (com.google.javascript.rhino.Node.this.type < 28) {
+          return "Node tree inequality:" +
+          "\nTree1:\n" + toStringTree() +
+          "\n\nTree2:\n" + node2.toStringTree() +
+          "\n\nSubtree1: " + diff.nodeA.toStringTree() +
+          "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/76/seed_263/patch_40747_1ts_1659900099683.diff
GPR[ESUN]-1659900099684
GPR[SSUN]-1659900099684
80988634
GPR[ESUN]-1659900099856
GPR[SSUN]-1659900099856
80988634
GPR[ESUN]-1659900100027
GPR[SSUN]-1659900100027
80988634
GPR[ESUN]-1659900100194
GPR[SSUN]-1659900100194
80988634
GPR[ESUN]-1659900100370
GPR[SSUN]-1659900100370
2433571
GPR[ESUN]-1659900100596
GPR[SSUN]-1659900100596
-652849916
GPR[SPVATF]-1659900100806
GPR[EPVATF]-1659900101247
GPR[SPS]-1659900101247
[46834] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:352.
GPR[EPS]-1659900101767
GPR[ESUN]-1659900101767
GPR[SSUN]-1659900101767
-652849916
GPR[SPVATF]-1659900101972
GPR[EPVATF]-1659900102413
GPR[SPS]-1659900102413
[47962] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:316.
GPR[EPS]-1659900102895
GPR[ESUN]-1659900102895
GPR[SSUN]-1659900102895
-283827935
GPR[SPVATF]-1659900103070
GPR[EPVATF]-1659900103084
[48152] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900103085
GPR[SSUN]-1659900103085
2433571
GPR[SPVATF]-1659900103323
GPR[EPVATF]-1659900103817
GPR[SPS]-1659900103817
[49503] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1398.
GPR[EPS]-1659900104436
GPR[ESUN]-1659900104436
GPR[SSUN]-1659900104436
-652849916
GPR[SPVATF]-1659900104648
GPR[EPVATF]-1659900105082
GPR[SPS]-1659900105082
[50625] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:315.
GPR[EPS]-1659900105558
GPR[SPVATF]-1659900105558
GPR[EPVATF]-1659900106605
GPR[SPS]-1659900106605
[52198] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:315.
GPR[EPS]-1659900107131
GPR[ESUN]-1659900107131
GPR[SSUN]-1659900107131
914883016
GPR[ESUN]-1659900107326
GPR[SSUN]-1659900107326
914883016
GPR[SPVATF]-1659900107525
GPR[EPVATF]-1659900107896
GPR[SPS]-1659900107896
[53427] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LiveVariablesAnalysis:234.
GPR[EPS]-1659900108360
GPR[ESUN]-1659900108360
GPR[SSUN]-1659900108360
914883016
GPR[SPVATF]-1659900108561
GPR[EPVATF]-1659900108933
GPR[SPS]-1659900108934
[54472] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LiveVariablesAnalysis:233.
GPR[EPS]-1659900109405
GPR[ESUN]-1659900109405
GPR[SSUN]-1659900109405
914883016
GPR[SPVATF]-1659900109600
GPR[EPVATF]-1659900110002
GPR[SPS]-1659900110002
[55518] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LiveVariablesAnalysis:231.
GPR[EPS]-1659900110451
GPR[ESUN]-1659900110451
GPR[SSUN]-1659900110451
914883016
GPR[ESUN]-1659900110644
GPR[SSUN]-1659900110644
914883016
GPR[SPVATF]-1659900110833
GPR[EPVATF]-1659900111313
GPR[SPS]-1659900111313
[56837] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LiveVariablesAnalysis:227.
GPR[EPS]-1659900111770
GPR[ESUN]-1659900111770
GPR[SSUN]-1659900111770
914883016
GPR[SPVATF]-1659900111991
GPR[EPVATF]-1659900112463
GPR[SPS]-1659900112463
[57978] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LiveVariablesAnalysis:225.
GPR[EPS]-1659900112911
GPR[ESUN]-1659900112911
GPR[SSUN]-1659900112911
2433571
GPR[ESUN]-1659900113139
GPR[SSUN]-1659900113139
-652849916
GPR[SPVATF]-1659900113337
GPR[EPVATF]-1659900113820
GPR[SPS]-1659900113821
[59354] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:354.
GPR[EPS]-1659900114287
GPR[ESUN]-1659900114287
GPR[SSUN]-1659900114287
-652849916
GPR[SPVATF]-1659900114513
GPR[EPVATF]-1659900114998
GPR[SPS]-1659900114998
[60545] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:342.
GPR[EPS]-1659900115478
GPR[SPVATF]-1659900115478
GPR[EPVATF]-1659900115961
GPR[SPS]-1659900115961
[62187] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:342.
GPR[EPS]-1659900117120
GPR[ESUN]-1659900117120
GPR[SSUN]-1659900117120
-652849916
GPR[SPVATF]-1659900117328
GPR[EPVATF]-1659900117833
GPR[SPS]-1659900117833
[63366] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:314.
GPR[EPS]-1659900118299
GPR[ESUN]-1659900118299
GPR[SSUN]-1659900118299
-652849916
GPR[SPVATF]-1659900118503
GPR[EPVATF]-1659900118986
GPR[SPS]-1659900118986
[64532] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:230.
GPR[EPS]-1659900119465
GPR[ESUN]-1659900119465
GPR[SSUN]-1659900119465
-652849916
GPR[SPVATF]-1659900119666
GPR[EPVATF]-1659900120103
GPR[SPS]-1659900120103
[65637] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:349.
GPR[EPS]-1659900120570
GPR[SPVATF]-1659900120570
GPR[EPVATF]-1659900121030
GPR[SPS]-1659900121030
[66562] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:349.
GPR[EPS]-1659900121495
GPR[ESUN]-1659900121495
GPR[SSUN]-1659900121495
-652849916
GPR[ESUN]-1659900121699
GPR[SSUN]-1659900121699
-652849916
GPR[ESUN]-1659900121893
GPR[SSUN]-1659900121893
-652849916
GPR[SPVATF]-1659900122118
GPR[EPVATF]-1659900122565
GPR[SPS]-1659900122565
[68095] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:343.
GPR[EPS]-1659900123028
GPR[ESUN]-1659900123028
GPR[SSUN]-1659900123028
-652849916
GPR[SPVATF]-1659900123237
GPR[EPVATF]-1659900123722
GPR[SPS]-1659900123722
[69264] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:358.
GPR[EPS]-1659900124197
GPR[ESUN]-1659900124198
GPR[SSUN]-1659900124198
-652849916
GPR[SPVATF]-1659900124403
GPR[EPVATF]-1659900124913
GPR[SPS]-1659900124913
[70459] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:341.
GPR[EPS]-1659900125392
GPR[SPVATF]-1659900125392
GPR[EPVATF]-1659900125897
GPR[SPS]-1659900125897
[71440] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:341.
GPR[EPS]-1659900126373
GPR[ESUN]-1659900126373
GPR[SSUN]-1659900126373
-652849916
GPR[SPVATF]-1659900126577
GPR[EPVATF]-1659900127067
GPR[SPS]-1659900127067
[72613] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:313.
GPR[EPS]-1659900127546
GPR[SPVATF]-1659900127547
GPR[EPVATF]-1659900128083
GPR[SPS]-1659900128083
[73621] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:313.
GPR[EPS]-1659900128554
GPR[ESUN]-1659900128554
GPR[SSUN]-1659900128554
-652849916
GPR[SPVATF]-1659900128755
GPR[EPVATF]-1659900129255
GPR[SPS]-1659900129255
[74799] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:310.
GPR[EPS]-1659900129732
GPR[ESUN]-1659900129732
GPR[SSUN]-1659900129732
-652849916
GPR[SPVATF]-1659900129936
GPR[EPVATF]-1659900131067
GPR[SPS]-1659900131067
[76682] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:309.
GPR[EPS]-1659900131615
GPR[SPVATF]-1659900131615
GPR[EPVATF]-1659900132113
GPR[SPS]-1659900132113
[77634] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:309.
GPR[EPS]-1659900132567
GPR[ESUN]-1659900132567
GPR[SSUN]-1659900132567
80988634
GPR[ESUN]-1659900132728
GPR[SSUN]-1659900132728
2433571
GPR[SPVATF]-1659900132939
GPR[EPVATF]-1659900133421
GPR[SPS]-1659900133421
[79045] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:938.
GPR[EPS]-1659900133978
GPR[SPVATF]-1659900133979
GPR[EPVATF]-1659900134509
GPR[SPS]-1659900134509
[80121] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:938.
GPR[EPS]-1659900135054
GPR[ESUN]-1659900135054
GPR[SSUN]-1659900135054
2433571
GPR[SPVATF]-1659900135266
GPR[EPVATF]-1659900135753
GPR[SPS]-1659900135753
[81386] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:934.
GPR[EPS]-1659900136319
GPR[ESUN]-1659900136319
GPR[SSUN]-1659900136319
-652849916
GPR[SPVATF]-1659900136522
GPR[EPVATF]-1659900137005
GPR[SPS]-1659900137005
[82541] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:215.
GPR[EPS]-1659900137474
GPR[ESUN]-1659900137474
GPR[SSUN]-1659900137474
-652849916
GPR[ESUN]-1659900137677
GPR[SSUN]-1659900137677
2433571
GPR[SPVATF]-1659900137880
GPR[EPVATF]-1659900138367
GPR[SPS]-1659900138367
[83998] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int LOCAL_BLOCK_PROP = -3;

    public static final int OBJECT_IDS_PROP = -2;

    public static final int CATCH_SCOPE_PROP = -1;

    public static final int LABEL_ID_PROP = 0;

    public static final int TARGET_PROP = 1;

    public static final int BREAK_PROP = 2;

    public static final int CONTINUE_PROP = 3;

    public static final int ENUM_PROP = 4;

    public static final int FUNCTION_PROP = 5;

    public static final int TEMP_PROP = 6;

    public static final int LOCAL_PROP = 7;

    public static final int CODEOFFSET_PROP = 8;

    public static final int FIXUPS_PROP = 9;

    public static final int VARS_PROP = 10;

    public static final int USES_PROP = 11;

    public static final int REGEXP_PROP = 12;

    public static final int CASES_PROP = 13;

    public static final int DEFAULT_PROP = 14;

    public static final int CASEARRAY_PROP = 15;

    public static final int SOURCENAME_PROP = 16;

    public static final int TYPE_PROP = 17;

    public static final int SPECIAL_PROP_PROP = 18;

    public static final int LABEL_PROP = 19;

    public static final int FINALLY_PROP = 20;

    public static final int LOCALCOUNT_PROP = 21;

    public static final int TARGETBLOCK_PROP = 22;

    public static final int VARIABLE_PROP = 23;

    public static final int LASTUSE_PROP = 24;

    public static final int ISNUMBER_PROP = 25;

    public static final int DIRECTCALL_PROP = 26;

    public static final int SPECIALCALL_PROP = 27;

    public static final int DEBUGSOURCE_PROP = 28;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 29;

    public static final int SKIP_INDEXES_PROP = 30;

    public static final int INCRDECR_PROP = 31;

    public static final int MEMBER_TYPE_PROP = 32;

    public static final int NAME_PROP = 33;

    public static final int PARENTHESIZED_PROP = 34;

    public static final int QUOTED_PROP = 35;

    public static final int OPT_ARG_NAME = 36;

    public static final int SYNTHETIC_BLOCK_PROP = 37;

    public static final int EMPTY_BLOCK = 38;

    public static final int ORIGINALNAME_PROP = 39;

    public static final int BRACELESS_TYPE = 40;

    public static final int SIDE_EFFECT_FLAGS = 41;

    public static final int IS_CONSTANT_NAME = 42;

    public static final int IS_OPTIONAL_PARAM = 43;

    public static final int IS_VAR_ARGS_PARAM = 44;

    public static final int IS_NAMESPACE = 45;

    public static final int IS_DISPATCHER = 46;

    public static final int DIRECTIVES = 47;

    public static final int DIRECT_EVAL = 48;

    public static final int FREE_CALL = 49;

    public static final int LAST_PROP = 49;

    public static final int BOTH = 0;

    public static final int LEFT = 1;

    public static final int RIGHT = 2;

    public static final int NON_SPECIALCALL = 0;

    public static final int SPECIALCALL_EVAL = 1;

    public static final int SPECIALCALL_WITH = 2;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    public static final int PROPERTY_FLAG = 0x1;

    public static final int ATTRIBUTE_FLAG = 0x2;

    public static final int DESCENDANTS_FLAG = 0x4;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP :
                return "local_block";
            case com.google.javascript.rhino.Node.OBJECT_IDS_PROP :
                return "object_ids_prop";
            case com.google.javascript.rhino.Node.CATCH_SCOPE_PROP :
                return "catch_scope_prop";
            case com.google.javascript.rhino.Node.LABEL_ID_PROP :
                return "label_id_prop";
            case com.google.javascript.rhino.Node.TARGET_PROP :
                return "target";
            case com.google.javascript.rhino.Node.BREAK_PROP :
                return "break";
            case com.google.javascript.rhino.Node.CONTINUE_PROP :
                return "continue";
            case com.google.javascript.rhino.Node.ENUM_PROP :
                return "enum";
            case com.google.javascript.rhino.Node.FUNCTION_PROP :
                return "function";
            case com.google.javascript.rhino.Node.TEMP_PROP :
                return "temp";
            case com.google.javascript.rhino.Node.LOCAL_PROP :
                return "local";
            case com.google.javascript.rhino.Node.CODEOFFSET_PROP :
                return "codeoffset";
            case com.google.javascript.rhino.Node.FIXUPS_PROP :
                return "fixups";
            case com.google.javascript.rhino.Node.VARS_PROP :
                return "vars";
            case com.google.javascript.rhino.Node.USES_PROP :
                return "uses";
            case com.google.javascript.rhino.Node.REGEXP_PROP :
                return "regexp";
            case com.google.javascript.rhino.Node.CASES_PROP :
                return "cases";
            case com.google.javascript.rhino.Node.DEFAULT_PROP :
                return "default";
            case com.google.javascript.rhino.Node.CASEARRAY_PROP :
                return "casearray";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.TYPE_PROP :
                return "type";
            case com.google.javascript.rhino.Node.SPECIAL_PROP_PROP :
                return "special_prop";
            case com.google.javascript.rhino.Node.LABEL_PROP :
                return "label";
            case com.google.javascript.rhino.Node.FINALLY_PROP :
                return "finally";
            case com.google.javascript.rhino.Node.LOCALCOUNT_PROP :
                return "localcount";
            case com.google.javascript.rhino.Node.TARGETBLOCK_PROP :
                return "targetblock";
            case com.google.javascript.rhino.Node.VARIABLE_PROP :
                return "variable";
            case com.google.javascript.rhino.Node.LASTUSE_PROP :
                return "lastuse";
            case com.google.javascript.rhino.Node.ISNUMBER_PROP :
                return "isnumber";
            case com.google.javascript.rhino.Node.DIRECTCALL_PROP :
                return "directcall";
            case com.google.javascript.rhino.Node.SPECIALCALL_PROP :
                return "specialcall";
            case com.google.javascript.rhino.Node.DEBUGSOURCE_PROP :
                return "debugsource";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.SKIP_INDEXES_PROP :
                return "skip_indexes";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.MEMBER_TYPE_PROP :
                return "member_type";
            case com.google.javascript.rhino.Node.NAME_PROP :
                return "name";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            default :
                com.google.javascript.rhino.Kit.codeBug();
        }
        return null;
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && (getDouble() == ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble());
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private static class PropListItem implements java.io.Serializable {
        private static final long serialVersionUID = 1L;

        final com.google.javascript.rhino.Node.PropListItem next;

        final int type;

        final int intValue;

        final java.lang.Object objectValue;

        PropListItem(int type, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            this(type, intValue, null, next);
        }

        PropListItem(int type, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            this(type, 0, objectValue, next);
        }

        PropListItem(int type, int intValue, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            this.type = type;
            this.intValue = intValue;
            this.objectValue = objectValue;
            this.next = next;
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        if (last != null) {
            last.next = children;
        }
        last = children.getLastSibling();
        if (first == null) {
            first = children;
        }
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node != null, "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.parent = this;
        newChild.next = node.next;
        node.next = newChild;
        if (last == node) {
            last = newChild;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.type)) {
            x = x.next;
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.type == propType) {
            return item.next;
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.next, propType);
            if (result != item.next) {
                return new com.google.javascript.rhino.Node.PropListItem(item.type, item.intValue, item.objectValue, result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.objectValue;
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.intValue;
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            com.google.javascript.rhino.Kit.codeBug();
        }
        return item.intValue;
    }

    public void putProp(int propType, java.lang.Object value) {
        removeProp(propType);
        if (value != null) {
            propListHead = new com.google.javascript.rhino.Node.PropListItem(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = new com.google.javascript.rhino.Node.PropListItem(propType, value, propListHead);
        }
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.next) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.next) {
            count--;
            keys[count] = x.type;
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        if (com.google.javascript.rhino.Token.printTrees) {
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            toString(sb, printSource, printAnnotations, printType);
            return sb.toString();
        }
        return java.lang.String.valueOf(type);
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        if (com.google.javascript.rhino.Token.printTrees) {
            sb.append(com.google.javascript.rhino.Token.name(type));
            if (this instanceof com.google.javascript.rhino.Node.StringNode) {
                sb.append(' ');
                sb.append(getString());
            } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
                sb.append(' ');
                if (first.getType() == com.google.javascript.rhino.Token.STRING) {
                    sb.append(first.getString());
                }
            } else if (this instanceof com.google.javascript.rhino.ScriptOrFnNode) {
                com.google.javascript.rhino.ScriptOrFnNode sof = ((com.google.javascript.rhino.ScriptOrFnNode) (this));
                if (this instanceof com.google.javascript.rhino.FunctionNode) {
                    com.google.javascript.rhino.FunctionNode fn = ((com.google.javascript.rhino.FunctionNode) (this));
                    sb.append(' ');
                    sb.append(fn.getFunctionName());
                }
                if (printSource) {
                    sb.append(" [source name: ");
                    sb.append(sof.getSourceName());
                    sb.append("] [encoded source length: ");
                    sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());
                    sb.append("] [base line: ");
                    sb.append(sof.getBaseLineno());
                    sb.append("] [end line: ");
                    sb.append(sof.getEndLineno());
                    sb.append(']');
                }
            } else if (type == com.google.javascript.rhino.Token.NUMBER) {
                sb.append(' ');
                sb.append(getDouble());
            }
            if (printSource) {
                int lineno = getLineno();
                if (lineno != (-1)) {
                    sb.append(' ');
                    sb.append(lineno);
                }
            }
            if (printAnnotations) {
                int[] keys = getSortedPropTypes();
                for (int i = 0; i < keys.length; i++) {
                    int type = keys[i];
                    com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                    sb.append(" [");
                    sb.append(com.google.javascript.rhino.Node.propToString(type));
                    sb.append(": ");
                    java.lang.String value;
                    switch (type) {
                        case com.google.javascript.rhino.Node.TARGETBLOCK_PROP :
                            value = "target block property";
                            break;
                        case com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP :
                            value = "last local block";
                            break;
                        case com.google.javascript.rhino.Node.ISNUMBER_PROP :
                            switch (x.intValue) {
                                case com.google.javascript.rhino.Node.BOTH :
                                    value = "both";
                                    break;
                                case com.google.javascript.rhino.Node.RIGHT :
                                    value = "right";
                                    break;
                                case com.google.javascript.rhino.Node.LEFT :
                                    value = "left";
                                    break;
                                default :
                                    throw com.google.javascript.rhino.Kit.codeBug();
                            }
                            break;
                        case com.google.javascript.rhino.Node.SPECIALCALL_PROP :
                            switch (x.intValue) {
                                case com.google.javascript.rhino.Node.SPECIALCALL_EVAL :
                                    value = "eval";
                                    break;
                                case com.google.javascript.rhino.Node.SPECIALCALL_WITH :
                                    value = "with";
                                    break;
                                default :
                                    throw com.google.javascript.rhino.Kit.codeBug();
                            }
                            break;
                        default :
                            java.lang.Object obj = x.objectValue;
                            if (obj != null) {
                                value = obj.toString();
                            } else {
                                boolean spoonDefaultValue = false;
                                try {
                                    spoonDefaultValue = true;
                                } catch (java.lang.Exception __NopolProcessorException) {
                                }
                                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                if (fr.inria.lille.commons.trace.RuntimeValues.instance(32).isEnabled()) {
                                    fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectionStarts();
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.FIXUPS_PROP",com.google.javascript.rhino.Node.FIXUPS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.ISNUMBER_PROP",com.google.javascript.rhino.Node.ISNUMBER_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.CODEOFFSET_PROP",com.google.javascript.rhino.Node.CODEOFFSET_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.LOCAL_PROP",com.google.javascript.rhino.Node.LOCAL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_PROP",com.google.javascript.rhino.Node.SPECIALCALL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.TARGET_PROP",com.google.javascript.rhino.Node.TARGET_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.OBJECT_IDS_PROP",com.google.javascript.rhino.Node.OBJECT_IDS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.LOCALCOUNT_PROP",com.google.javascript.rhino.Node.LOCALCOUNT_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.FUNCTION_PROP",com.google.javascript.rhino.Node.FUNCTION_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.LABEL_PROP",com.google.javascript.rhino.Node.LABEL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.BOTH",com.google.javascript.rhino.Node.BOTH);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.MEMBER_TYPE_PROP",com.google.javascript.rhino.Node.MEMBER_TYPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_WITH",com.google.javascript.rhino.Node.SPECIALCALL_WITH);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.TYPE_PROP",com.google.javascript.rhino.Node.TYPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.PROPERTY_FLAG",com.google.javascript.rhino.Node.PROPERTY_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.DEFAULT_PROP",com.google.javascript.rhino.Node.DEFAULT_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.SPECIAL_PROP_PROP",com.google.javascript.rhino.Node.SPECIAL_PROP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.CONTINUE_PROP",com.google.javascript.rhino.Node.CONTINUE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.DIRECTCALL_PROP",com.google.javascript.rhino.Node.DIRECTCALL_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.LABEL_ID_PROP",com.google.javascript.rhino.Node.LABEL_ID_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.ENUM_PROP",com.google.javascript.rhino.Node.ENUM_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.TARGETBLOCK_PROP",com.google.javascript.rhino.Node.TARGETBLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.TEMP_PROP",com.google.javascript.rhino.Node.TEMP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.USES_PROP",com.google.javascript.rhino.Node.USES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.VARS_PROP",com.google.javascript.rhino.Node.VARS_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.REGEXP_PROP",com.google.javascript.rhino.Node.REGEXP_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.LASTUSE_PROP",com.google.javascript.rhino.Node.LASTUSE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.NAME_PROP",com.google.javascript.rhino.Node.NAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.LEFT",com.google.javascript.rhino.Node.LEFT);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.ATTRIBUTE_FLAG",com.google.javascript.rhino.Node.ATTRIBUTE_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.FINALLY_PROP",com.google.javascript.rhino.Node.FINALLY_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.NON_SPECIALCALL",com.google.javascript.rhino.Node.NON_SPECIALCALL);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.CASEARRAY_PROP",com.google.javascript.rhino.Node.CASEARRAY_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.DESCENDANTS_FLAG",com.google.javascript.rhino.Node.DESCENDANTS_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.CATCH_SCOPE_PROP",com.google.javascript.rhino.Node.CATCH_SCOPE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP",com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.CASES_PROP",com.google.javascript.rhino.Node.CASES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.VARIABLE_PROP",com.google.javascript.rhino.Node.VARIABLE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.SKIP_INDEXES_PROP",com.google.javascript.rhino.Node.SKIP_INDEXES_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.RIGHT",com.google.javascript.rhino.Node.RIGHT);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.SPECIALCALL_EVAL",com.google.javascript.rhino.Node.SPECIALCALL_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.DEBUGSOURCE_PROP",com.google.javascript.rhino.Node.DEBUGSOURCE_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.BREAK_PROP",com.google.javascript.rhino.Node.BREAK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                                    if (com.google.javascript.rhino.Node.this.last!=null) {
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    }
                                    if (com.google.javascript.rhino.Node.this.parent!=null) {
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    }
                                    if (com.google.javascript.rhino.Node.this.next!=null) {
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    }
                                    if (com.google.javascript.rhino.Node.this.first!=null) {
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                    }
                                    fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectOutput(runtimeAngelicValue);
                                    fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectionEnds();
                                }
                                if (runtimeAngelicValue)
                                    value = java.lang.String.valueOf(x.intValue);

                            }
                            break;
                    }
                    sb.append(value);
                    sb.append(']');
                }
            }
            if (printType) {
                if (jsType != null) {
                    java.lang.String jsTypeString = jsType.toString();
                    if (jsTypeString != null) {
                        sb.append(" : ");
                        sb.append(jsTypeString);
                    }
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        if (com.google.javascript.rhino.Token.printTrees) {
            for (int i = 0; i != level; ++i) {
                sb.append("    ");
            }
            sb.append(n.toString());
            sb.append('\n');
            for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
                com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
            }
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        public boolean hasNext() {
            return current != null;
        }

        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                public boolean hasNext() {
                    return cur != null;
                }

                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    @java.lang.SuppressWarnings("unchecked")
    private static java.lang.Class getNodeClass(com.google.javascript.rhino.Node n) {
        java.lang.Class c = n.getClass();
        if ((c == com.google.javascript.rhino.FunctionNode.class) || (c == com.google.javascript.rhino.ScriptOrFnNode.class)) {
            return com.google.javascript.rhino.Node.class;
        }
        return c;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public static java.lang.String tokenToName(int token) {
        switch (token) {
            case com.google.javascript.rhino.Token.ERROR :
                return "error";
            case com.google.javascript.rhino.Token.EOF :
                return "eof";
            case com.google.javascript.rhino.Token.EOL :
                return "eol";
            case com.google.javascript.rhino.Token.ENTERWITH :
                return "enterwith";
            case com.google.javascript.rhino.Token.LEAVEWITH :
                return "leavewith";
            case com.google.javascript.rhino.Token.RETURN :
                return "return";
            case com.google.javascript.rhino.Token.GOTO :
                return "goto";
            case com.google.javascript.rhino.Token.IFEQ :
                return "ifeq";
            case com.google.javascript.rhino.Token.IFNE :
                return "ifne";
            case com.google.javascript.rhino.Token.SETNAME :
                return "setname";
            case com.google.javascript.rhino.Token.BITOR :
                return "bitor";
            case com.google.javascript.rhino.Token.BITXOR :
                return "bitxor";
            case com.google.javascript.rhino.Token.BITAND :
                return "bitand";
            case com.google.javascript.rhino.Token.EQ :
                return "eq";
            case com.google.javascript.rhino.Token.NE :
                return "ne";
            case com.google.javascript.rhino.Token.LT :
                return "lt";
            case com.google.javascript.rhino.Token.LE :
                return "le";
            case com.google.javascript.rhino.Token.GT :
                return "gt";
            case com.google.javascript.rhino.Token.GE :
                return "ge";
            case com.google.javascript.rhino.Token.LSH :
                return "lsh";
            case com.google.javascript.rhino.Token.RSH :
                return "rsh";
            case com.google.javascript.rhino.Token.URSH :
                return "ursh";
            case com.google.javascript.rhino.Token.ADD :
                return "add";
            case com.google.javascript.rhino.Token.SUB :
                return "sub";
            case com.google.javascript.rhino.Token.MUL :
                return "mul";
            case com.google.javascript.rhino.Token.DIV :
                return "div";
            case com.google.javascript.rhino.Token.MOD :
                return "mod";
            case com.google.javascript.rhino.Token.BITNOT :
                return "bitnot";
            case com.google.javascript.rhino.Token.NEG :
                return "neg";
            case com.google.javascript.rhino.Token.NEW :
                return "new";
            case com.google.javascript.rhino.Token.DELPROP :
                return "delprop";
            case com.google.javascript.rhino.Token.TYPEOF :
                return "typeof";
            case com.google.javascript.rhino.Token.GETPROP :
                return "getprop";
            case com.google.javascript.rhino.Token.SETPROP :
                return "setprop";
            case com.google.javascript.rhino.Token.GETELEM :
                return "getelem";
            case com.google.javascript.rhino.Token.SETELEM :
                return "setelem";
            case com.google.javascript.rhino.Token.CALL :
                return "call";
            case com.google.javascript.rhino.Token.NAME :
                return "name";
            case com.google.javascript.rhino.Token.NUMBER :
                return "number";
            case com.google.javascript.rhino.Token.STRING :
                return "string";
            case com.google.javascript.rhino.Token.NULL :
                return "null";
            case com.google.javascript.rhino.Token.THIS :
                return "this";
            case com.google.javascript.rhino.Token.FALSE :
                return "false";
            case com.google.javascript.rhino.Token.TRUE :
                return "true";
            case com.google.javascript.rhino.Token.SHEQ :
                return "sheq";
            case com.google.javascript.rhino.Token.SHNE :
                return "shne";
            case com.google.javascript.rhino.Token.REGEXP :
                return "regexp";
            case com.google.javascript.rhino.Token.POS :
                return "pos";
            case com.google.javascript.rhino.Token.BINDNAME :
                return "bindname";
            case com.google.javascript.rhino.Token.THROW :
                return "throw";
            case com.google.javascript.rhino.Token.IN :
                return "in";
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return "instanceof";
            case com.google.javascript.rhino.Token.GETVAR :
                return "getvar";
            case com.google.javascript.rhino.Token.SETVAR :
                return "setvar";
            case com.google.javascript.rhino.Token.TRY :
                return "try";
            case com.google.javascript.rhino.Token.TYPEOFNAME :
                return "typeofname";
            case com.google.javascript.rhino.Token.THISFN :
                return "thisfn";
            case com.google.javascript.rhino.Token.SEMI :
                return "semi";
            case com.google.javascript.rhino.Token.LB :
                return "lb";
            case com.google.javascript.rhino.Token.RB :
                return "rb";
            case com.google.javascript.rhino.Token.LC :
                return "lc";
            case com.google.javascript.rhino.Token.RC :
                return "rc";
            case com.google.javascript.rhino.Token.LP :
                return "lp";
            case com.google.javascript.rhino.Token.RP :
                return "rp";
            case com.google.javascript.rhino.Token.COMMA :
                return "comma";
            case com.google.javascript.rhino.Token.ASSIGN :
                return "assign";
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return "assign_bitor";
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return "assign_bitxor";
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return "assign_bitand";
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return "assign_lsh";
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return "assign_rsh";
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return "assign_ursh";
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return "assign_add";
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return "assign_sub";
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return "assign_mul";
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return "assign_div";
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return "assign_mod";
            case com.google.javascript.rhino.Token.HOOK :
                return "hook";
            case com.google.javascript.rhino.Token.COLON :
                return "colon";
            case com.google.javascript.rhino.Token.OR :
                return "or";
            case com.google.javascript.rhino.Token.AND :
                return "and";
            case com.google.javascript.rhino.Token.INC :
                return "inc";
            case com.google.javascript.rhino.Token.DEC :
                return "dec";
            case com.google.javascript.rhino.Token.DOT :
                return "dot";
            case com.google.javascript.rhino.Token.FUNCTION :
                return "function";
            case com.google.javascript.rhino.Token.EXPORT :
                return "export";
            case com.google.javascript.rhino.Token.IMPORT :
                return "import";
            case com.google.javascript.rhino.Token.IF :
                return "if";
            case com.google.javascript.rhino.Token.ELSE :
                return "else";
            case com.google.javascript.rhino.Token.SWITCH :
                return "switch";
            case com.google.javascript.rhino.Token.CASE :
                return "case";
            case com.google.javascript.rhino.Token.DEFAULT :
                return "default";
            case com.google.javascript.rhino.Token.WHILE :
                return "while";
            case com.google.javascript.rhino.Token.DO :
                return "do";
            case com.google.javascript.rhino.Token.FOR :
                return "for";
            case com.google.javascript.rhino.Token.BREAK :
                return "break";
            case com.google.javascript.rhino.Token.CONTINUE :
                return "continue";
            case com.google.javascript.rhino.Token.VAR :
                return "var";
            case com.google.javascript.rhino.Token.WITH :
                return "with";
            case com.google.javascript.rhino.Token.CATCH :
                return "catch";
            case com.google.javascript.rhino.Token.FINALLY :
                return "finally";
            case com.google.javascript.rhino.Token.RESERVED :
                return "reserved";
            case com.google.javascript.rhino.Token.NOT :
                return "not";
            case com.google.javascript.rhino.Token.VOID :
                return "void";
            case com.google.javascript.rhino.Token.BLOCK :
                return "block";
            case com.google.javascript.rhino.Token.ARRAYLIT :
                return "arraylit";
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return "objectlit";
            case com.google.javascript.rhino.Token.LABEL :
                return "label";
            case com.google.javascript.rhino.Token.TARGET :
                return "target";
            case com.google.javascript.rhino.Token.LOOP :
                return "loop";
            case com.google.javascript.rhino.Token.EXPR_VOID :
                return "expr_void";
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                return "expr_result";
            case com.google.javascript.rhino.Token.JSR :
                return "jsr";
            case com.google.javascript.rhino.Token.SCRIPT :
                return "script";
            case com.google.javascript.rhino.Token.EMPTY :
                return "empty";
            case com.google.javascript.rhino.Token.GET_REF :
                return "get_ref";
            case com.google.javascript.rhino.Token.REF_SPECIAL :
                return "ref_special";
        }
        return ("<unknown=" + token) + ">";
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (com.google.javascript.rhino.Node.getNodeClass(this) != com.google.javascript.rhino.Node.getNodeClass(node))) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if (type == com.google.javascript.rhino.Token.ARRAYLIT) {
            try {
                int[] indices1 = ((int[]) (getProp(com.google.javascript.rhino.Node.SKIP_INDEXES_PROP)));
                int[] indices2 = ((int[]) (node.getProp(com.google.javascript.rhino.Node.SKIP_INDEXES_PROP)));
                if (indices1 == null) {
                    if (indices2 != null) {
                        return false;
                    }
                } else if (indices2 == null) {
                    return false;
                } else if (indices1.length != indices2.length) {
                    return false;
                } else {
                    for (int i = 0; i < indices1.length; i++) {
                        if (indices1[i] != indices2[i]) {
                            return false;
                        }
                    }
                }
            } catch (java.lang.Exception e) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.STRING) {
            int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            if (quoted1 != quoted2) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean hasSideEffects() {
        switch (type) {
            case com.google.javascript.rhino.Token.EXPR_VOID :
            case com.google.javascript.rhino.Token.COMMA :
                if (last != null) {
                    return last.hasSideEffects();
                } else {
                    return true;
                }
            case com.google.javascript.rhino.Token.HOOK :
                if (((first == null) || (first.next == null)) || (first.next.next == null)) {
                    com.google.javascript.rhino.Kit.codeBug();
                }
                return first.next.hasSideEffects() && first.next.next.hasSideEffects();
            case com.google.javascript.rhino.Token.ERROR :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ENTERWITH :
            case com.google.javascript.rhino.Token.LEAVEWITH :
            case com.google.javascript.rhino.Token.RETURN :
            case com.google.javascript.rhino.Token.GOTO :
            case com.google.javascript.rhino.Token.IFEQ :
            case com.google.javascript.rhino.Token.IFNE :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.SETNAME :
            case com.google.javascript.rhino.Token.SETPROP :
            case com.google.javascript.rhino.Token.SETELEM :
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.THROW :
            case com.google.javascript.rhino.Token.RETHROW :
            case com.google.javascript.rhino.Token.SETVAR :
            case com.google.javascript.rhino.Token.CATCH_SCOPE :
            case com.google.javascript.rhino.Token.RETURN_RESULT :
            case com.google.javascript.rhino.Token.SET_REF :
            case com.google.javascript.rhino.Token.DEL_REF :
            case com.google.javascript.rhino.Token.REF_CALL :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SEMI :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.EXPORT :
            case com.google.javascript.rhino.Token.IMPORT :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.ELSE :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.CONST :
            case com.google.javascript.rhino.Token.WITH :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.FINALLY :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.TARGET :
            case com.google.javascript.rhino.Token.LOOP :
            case com.google.javascript.rhino.Token.JSR :
            case com.google.javascript.rhino.Token.SETPROP_OP :
            case com.google.javascript.rhino.Token.SETELEM_OP :
            case com.google.javascript.rhino.Token.LOCAL_BLOCK :
            case com.google.javascript.rhino.Token.SET_REF_OP :
                return true;
            default :
                return false;
        }
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        com.google.javascript.rhino.Kit.codeBug();
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }
}
[83998] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659900138931
GPR[SSUN]-1659900138931
2433571
GPR[ESUN]-1659900139164
GPR[SSUN]-1659900139164
-652849916
GPR[SPVATF]-1659900139364
GPR[EPVATF]-1659900139856
GPR[SPS]-1659900139856
[85409] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:307.
GPR[EPS]-1659900140342
GPR[ESUN]-1659900140342
GPR[SSUN]-1659900140342
-652849916
GPR[SPVATF]-1659900140543
GPR[EPVATF]-1659900141028
GPR[SPS]-1659900141028
[86558] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:294.
GPR[EPS]-1659900141492
GPR[ESUN]-1659900141492
GPR[SSUN]-1659900141492
-652849916
GPR[ESUN]-1659900141688
GPR[SSUN]-1659900141688
80988634
GPR[ESUN]-1659900141843
GPR[SSUN]-1659900141843
-652849916
GPR[SPVATF]-1659900142039
GPR[EPVATF]-1659900142513
GPR[SPS]-1659900142513
[88056] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:375.
GPR[EPS]-1659900142989
GPR[ESUN]-1659900142989
GPR[SSUN]-1659900142989
-652849916
GPR[SPVATF]-1659900143191
GPR[EPVATF]-1659900143634
GPR[SPS]-1659900143634
[89166] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:374.
GPR[EPS]-1659900144099
GPR[SPVATF]-1659900144100
GPR[EPVATF]-1659900144538
GPR[SPS]-1659900144538
[90060] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:374.
GPR[EPS]-1659900144993
GPR[ESUN]-1659900144993
GPR[SSUN]-1659900144993
-652849916
GPR[ESUN]-1659900145193
GPR[SSUN]-1659900145193
-652849916
GPR[SPVATF]-1659900145393
GPR[EPVATF]-1659900145879
GPR[SPS]-1659900145879
[91416] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:372.
GPR[EPS]-1659900146349
GPR[SPVATF]-1659900146350
GPR[EPVATF]-1659900146795
GPR[SPS]-1659900146795
[92314] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:372.
GPR[EPS]-1659900147247
GPR[ESUN]-1659900147247
GPR[SSUN]-1659900147247
-652849916
GPR[SPVATF]-1659900147448
GPR[EPVATF]-1659900147942
GPR[SPS]-1659900147942
[94126] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:292.
GPR[EPS]-1659900149059
GPR[ESUN]-1659900149059
GPR[SSUN]-1659900149059
-1966087783
GPR[ESUN]-1659900149238
GPR[SSUN]-1659900149238
-1966087783
GPR[SPVATF]-1659900149406
GPR[EPVATF]-1659900149432
[94499] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900149432
GPR[SSUN]-1659900149432
-652849916
GPR[ESUN]-1659900149630
GPR[SSUN]-1659900149630
-652849916
GPR[SPVATF]-1659900149836
GPR[EPVATF]-1659900150566
GPR[SPS]-1659900150566
[96107] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:370.
GPR[EPS]-1659900151040
GPR[ESUN]-1659900151040
GPR[SSUN]-1659900151040
-652849916
GPR[SPVATF]-1659900151235
GPR[EPVATF]-1659900151682
GPR[SPS]-1659900151682
[97209] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:144.
GPR[EPS]-1659900152142
GPR[ESUN]-1659900152142
GPR[SSUN]-1659900152142
-652849916
GPR[SPVATF]-1659900152344
GPR[EPVATF]-1659900152779
GPR[SPS]-1659900152779
[98327] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:143.
GPR[EPS]-1659900153260
GPR[SPVATF]-1659900153261
GPR[EPVATF]-1659900153703
GPR[SPS]-1659900153703
[99237] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:143.
GPR[EPS]-1659900154170
GPR[ESUN]-1659900154170
GPR[SSUN]-1659900154170
80988634
GPR[ESUN]-1659900154329
GPR[SSUN]-1659900154330
-652849916
GPR[SPVATF]-1659900154524
GPR[EPVATF]-1659900155012
GPR[SPS]-1659900155012
[100548] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:218.
GPR[EPS]-1659900155481
GPR[SPVATF]-1659900155481
GPR[EPVATF]-1659900155977
GPR[SPS]-1659900155978
[101530] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:218.
GPR[EPS]-1659900156464
GPR[ESUN]-1659900156464
GPR[SSUN]-1659900156464
-652849916
GPR[ESUN]-1659900156661
GPR[SSUN]-1659900156661
-652849916
GPR[SPVATF]-1659900156855
GPR[EPVATF]-1659900157313
GPR[SPS]-1659900157313
[456134] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659900511067
GPR[SSUN]-1659900511067
80988634
GPR[ESUN]-1659900511396
GPR[SSUN]-1659900511396
-1966087783
GPR[SPVATF]-1659900511573
GPR[EPVATF]-1659900511591
[456658] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900511591
GPR[SSUN]-1659900511591
-1966087783
GPR[SPVATF]-1659900511764
GPR[EPVATF]-1659900511781
[456848] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900511781
GPR[SSUN]-1659900511781
-652849916
GPR[SPVATF]-1659900511976
GPR[EPVATF]-1659900512615
GPR[SPS]-1659900512615
[458202] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:214.
GPR[EPS]-1659900513135
GPR[SPVATF]-1659900513136
GPR[EPVATF]-1659900513642
GPR[SPS]-1659900513642
[459167] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:214.
GPR[EPS]-1659900514101
GPR[ESUN]-1659900514101
GPR[SSUN]-1659900514101
2433571
GPR[SPVATF]-1659900514338
GPR[EPVATF]-1659900514826
GPR[SPS]-1659900514826
[460414] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1071.
GPR[EPS]-1659900515347
GPR[ESUN]-1659900515347
GPR[SSUN]-1659900515347
2433571
GPR[SPVATF]-1659900515560
GPR[EPVATF]-1659900516071
GPR[SPS]-1659900516071
[461732] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1064.
GPR[EPS]-1659900516665
GPR[ESUN]-1659900516665
GPR[SSUN]-1659900516665
80988634
GPR[ESUN]-1659900516827
GPR[SSUN]-1659900516827
-652849916
GPR[SPVATF]-1659900517024
GPR[EPVATF]-1659900517513
GPR[SPS]-1659900517513
[463040] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:204.
GPR[EPS]-1659900517973
GPR[SPVATF]-1659900517973
GPR[EPVATF]-1659900518493
GPR[SPS]-1659900518493
[464023] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:204.
GPR[EPS]-1659900518956
GPR[ESUN]-1659900518956
GPR[SSUN]-1659900518956
-652849916
GPR[SPVATF]-1659900519153
GPR[EPVATF]-1659900519648
GPR[SPS]-1659900519648
[465174] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:197.
GPR[EPS]-1659900520107
GPR[SPVATF]-1659900520107
GPR[EPVATF]-1659900520597
GPR[SPS]-1659900520597
[466159] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:197.
GPR[EPS]-1659900521092
GPR[ESUN]-1659900521092
GPR[SSUN]-1659900521092
-652849916
GPR[ESUN]-1659900521292
GPR[SSUN]-1659900521292
80988634
GPR[ESUN]-1659900521450
GPR[SSUN]-1659900521450
-1659631726
GPR[ESUN]-1659900521615
GPR[SSUN]-1659900521615
130004992
GPR[ESUN]-1659900521778
GPR[SSUN]-1659900521778
130004992
GPR[SPVATF]-1659900521938
GPR[EPVATF]-1659900521960
[467027] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900521960
GPR[SSUN]-1659900521960
130004992
GPR[ESUN]-1659900522118
GPR[SSUN]-1659900522118
-652849916
GPR[SPVATF]-1659900522311
GPR[EPVATF]-1659900522802
GPR[SPS]-1659900522802
[468326] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:184.
GPR[EPS]-1659900523259
GPR[ESUN]-1659900523259
GPR[SSUN]-1659900523259
-652849916
GPR[SPVATF]-1659900523492
GPR[EPVATF]-1659900523993
GPR[SPS]-1659900523993
[469521] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:183.
GPR[EPS]-1659900524454
GPR[ESUN]-1659900524454
GPR[SSUN]-1659900524454
-652849916
GPR[SPVATF]-1659900524651
GPR[EPVATF]-1659900525148
GPR[SPS]-1659900525148
[470674] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DeadAssignmentsElimination:271.
GPR[EPS]-1659900525607
GPR[ESUN]-1659900525607
GPR[SSUN]-1659900525607
-652849916
GPR[ESUN]-1659900525804
GPR[SSUN]-1659900525804
-652849916
GPR[SPVATF]-1659900526025
GPR[EPVATF]-1659900526527
GPR[SPS]-1659900526527
[684442] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.OutOfMemoryError: GC overhead limit exceeded
GPR[ESUN]-1659900747505
GPR[SSUN]-1659900747505
\n\nNode: host-56\n
\n\nDate: Sun 07 Aug 2022 12:32:55 PM PDT\n
End running Nopol Closure/76 results at /experiment_home///results/Nopol/Closure/76/seed_263/
Removing checked out dir script/workingdir/Nopol/Closure_76
GPR[SSLE]-1659900776334
GPR[ESLE]-1659900836340
