Sleep 1m start
GPR[SSLI]-1659813789639
GPR[ESLI]-1659813849642
Running Nopol Closure 2b with approach: smt
Timezone: America/Los_Angeles
Seed 260
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/2/seed_260/
The file script/workingdir/Nopol/Closure_2 does not exist!
script/workingdir/Nopol/Closure_2
script/workingdir/Nopol/Closure_2
classpath:  script/workingdir/Nopol/Closure_2/build/classes:script/workingdir/Nopol/Closure_2/lib/args4j.jar:script/workingdir/Nopol/Closure_2/lib/guava.jar:script/workingdir/Nopol/Closure_2/lib/json.jar:script/workingdir/Nopol/Closure_2/lib/jsr305.jar:script/workingdir/Nopol/Closure_2/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_2/build/lib/rhino.jar:script/workingdir/Nopol/Closure_2/lib/ant.jar:script/workingdir/Nopol/Closure_2/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_2/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_2/lib/jarjar.jar:script/workingdir/Nopol/Closure_2/lib/junit.jar:script/workingdir/Nopol/Closure_2/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659813872583
GPR[ESLB]-1659813932588
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_2//build/classes:script/workingdir/Nopol/Closure_2//build/test:script/workingdir/Nopol/Closure_2/build/classes:script/workingdir/Nopol/Closure_2/lib/args4j.jar:script/workingdir/Nopol/Closure_2/lib/guava.jar:script/workingdir/Nopol/Closure_2/lib/json.jar:script/workingdir/Nopol/Closure_2/lib/jsr305.jar:script/workingdir/Nopol/Closure_2/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_2/build/lib/rhino.jar:script/workingdir/Nopol/Closure_2/lib/ant.jar:script/workingdir/Nopol/Closure_2/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_2/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_2/lib/jarjar.jar:script/workingdir/Nopol/Closure_2/lib/junit.jar:script/workingdir/Nopol/Closure_2/build/test
Node: host-49
Date init: Sat 06 Aug 2022 12:25:32 PM PDT
OAR_JOB_ID: 3720517
[1] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_2/src]
[1] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_2/build/classes/, file:script/workingdir/Nopol/Closure_2/build/test/, file:script/workingdir/Nopol/Closure_2/build/classes/, file:script/workingdir/Nopol/Closure_2/lib/args4j.jar, file:script/workingdir/Nopol/Closure_2/lib/guava.jar, file:script/workingdir/Nopol/Closure_2/lib/json.jar, file:script/workingdir/Nopol/Closure_2/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_2/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_2/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_2/lib/ant.jar, file:script/workingdir/Nopol/Closure_2/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_2/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_2/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_2/lib/junit.jar, file:script/workingdir/Nopol/Closure_2/build/test/]
[1] INFO NoPol - Statement type: PRE_THEN_COND
[1] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[3] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_2/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/2/seed_260/, json=true}
[4] INFO NoPol - Available processors (cores): 36
[7] INFO NoPol - Free memory: 1 GB
[7] INFO NoPol - Maximum memory: 7 GB
[7] INFO NoPol - Total memory available to JVM: 1 GB
[9] INFO NoPol - Java version: 1.8.0_45
[9] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[9] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659813938322
GPR[ESUP]-1659813938322
GPR[SFL]-1659813938322
GPR[EFL]-1659813980631
GPR[SFP]-1659813980631
GPR[SSUN]-1659813982585
-283827935
GPR[SPVATF]-1659813983307
GPR[EPVATF]-1659813983363
[49815] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659813983363
GPR[SSUN]-1659813983363
-283827935
GPR[ESUN]-1659813989563
GPR[SSUN]-1659813989563
-283827935
GPR[ESUN]-1659813989772
GPR[SSUN]-1659813989772
-283827935
GPR[ESUN]-1659813989967
GPR[SSUN]-1659813989967
-283827935
GPR[SPVATF]-1659813990165
GPR[EPVATF]-1659813990188
[56640] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659813990188
GPR[SSUN]-1659813990188
-283827935
GPR[ESUN]-1659813990382
GPR[SSUN]-1659813990382
-283827935
GPR[SPVATF]-1659813990580
GPR[EPVATF]-1659813990604
[57056] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659813990604
GPR[SSUN]-1659813990604
-283827935
GPR[SPVATF]-1659813990803
GPR[EPVATF]-1659813990826
[57278] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659813990826
GPR[SSUN]-1659813990826
-283827935
GPR[SPVATF]-1659813991237
GPR[EPVATF]-1659813991261
[57713] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659813991261
GPR[SSUN]-1659813991261
-283827935
GPR[SPVATF]-1659813991782
GPR[EPVATF]-1659813991811
[58263] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659813991811
GPR[SSUN]-1659813991811
-283827935
GPR[SPVATF]-1659813992300
GPR[EPVATF]-1659813992321
[58773] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659813992322
GPR[SSUN]-1659813992322
-283827935
GPR[ESUN]-1659813992507
GPR[SSUN]-1659813992507
-283827935
GPR[ESUN]-1659813992693
GPR[SSUN]-1659813992693
-1966087783
GPR[ESUN]-1659813992890
GPR[SSUN]-1659813992890
-1966087783
GPR[SPVATF]-1659813993093
GPR[EPVATF]-1659813993170
[59623] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659813993171
GPR[SSUN]-1659813993171
-1659631726
GPR[ESUN]-1659813993470
GPR[SSUN]-1659813993470
130004992
GPR[ESUN]-1659813993655
GPR[SSUN]-1659813993655
130004992
GPR[SPVATF]-1659813993837
GPR[EPVATF]-1659813993911
[60363] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659813993911
GPR[SSUN]-1659813993911
130004992
GPR[ESUN]-1659813994097
GPR[SSUN]-1659813994097
-1966087783
GPR[SPVATF]-1659813994293
GPR[EPVATF]-1659813994359
[60812] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659813994360
GPR[SSUN]-1659813994360
-1966087783
GPR[SPVATF]-1659813994562
GPR[EPVATF]-1659813994632
[61084] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659813994632
GPR[SSUN]-1659813994632
890942016
GPR[ESUN]-1659813994844
GPR[SSUN]-1659813994844
890942016
GPR[SPVATF]-1659813995049
GPR[EPVATF]-1659813995117
[61570] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659813995118
GPR[SSUN]-1659813995118
890942016
GPR[SPVATF]-1659813995323
GPR[EPVATF]-1659813995389
[61842] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659813995390
GPR[EPVATF]-1659813995457
[61910] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659813995458
GPR[SSUN]-1659813995458
890942016
GPR[ESUN]-1659813995677
GPR[SSUN]-1659813995677
890942016
GPR[ESUN]-1659813995882
GPR[SSUN]-1659813995882
-1966087783
GPR[ESUN]-1659813996091
GPR[SSUN]-1659813996091
-1966087783
GPR[SPVATF]-1659813996306
GPR[EPVATF]-1659813996376
[62828] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659813996376
GPR[EPVATF]-1659813996448
[62900] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659813996448
GPR[SSUN]-1659813996448
-1966087783
GPR[ESUN]-1659813996685
GPR[SSUN]-1659813996685
-1966087783
GPR[SPVATF]-1659813996919
GPR[EPVATF]-1659813996987
[63439] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659813996987
GPR[EPVATF]-1659813997061
[63513] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659813997061
GPR[SSUN]-1659813997061
-1966087783
GPR[ESUN]-1659813997275
GPR[SSUN]-1659813997275
-1966087783
GPR[ESUN]-1659813997478
GPR[SSUN]-1659813997478
-1966087783
GPR[ESUN]-1659813997697
GPR[SSUN]-1659813997697
1613130706
GPR[ESUN]-1659813997933
GPR[SSUN]-1659813997933
1613130706
GPR[ESUN]-1659813998166
GPR[SSUN]-1659813998166
1613130706
GPR[SPVATF]-1659813998394
GPR[EPVATF]-1659813998634
[65086] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659813998634
GPR[SSUN]-1659813998634
-1234646214
GPR[SPVATF]-1659813998873
GPR[EPVATF]-1659814000459
GPR[SPS]-1659814000459
[69316] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.ObjectType:576.
GPR[EPS]-1659814002864
GPR[ESUN]-1659814002864
GPR[SSUN]-1659814002864
-1234646214
GPR[SPVATF]-1659814003100
GPR[EPVATF]-1659814004632
GPR[SPS]-1659814004632
[71711] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.ObjectType:575.
GPR[EPS]-1659814005260
GPR[ESUN]-1659814005260
GPR[SSUN]-1659814005260
234947553
GPR[ESUN]-1659814005471
GPR[SSUN]-1659814005471
234947553
GPR[SPVATF]-1659814005682
GPR[EPVATF]-1659814005756
[72208] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814005756
GPR[EPVATF]-1659814005820
[72272] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814005820
GPR[SSUN]-1659814005820
234947553
GPR[ESUN]-1659814006025
GPR[SSUN]-1659814006025
234947553
GPR[SPVATF]-1659814006229
GPR[EPVATF]-1659814006291
[72743] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814006292
GPR[EPVATF]-1659814006355
[72807] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814006355
GPR[SSUN]-1659814006355
234947553
GPR[SPVATF]-1659814006560
GPR[EPVATF]-1659814006621
[73073] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814006621
GPR[SSUN]-1659814006621
234947553
GPR[ESUN]-1659814008148
GPR[SSUN]-1659814008148
234947553
GPR[ESUN]-1659814008352
GPR[SSUN]-1659814008352
234947553
GPR[SPVATF]-1659814008554
GPR[EPVATF]-1659814008617
[75069] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814008617
GPR[SSUN]-1659814008618
234947553
GPR[SPVATF]-1659814008821
GPR[EPVATF]-1659814008884
[75336] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814008884
GPR[SSUN]-1659814008884
234947553
GPR[SPVATF]-1659814009084
GPR[EPVATF]-1659814009149
[75602] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814009150
GPR[SSUN]-1659814009150
234947553
GPR[ESUN]-1659814009347
GPR[SSUN]-1659814009347
234947553
GPR[ESUN]-1659814009552
GPR[SSUN]-1659814009552
234947553
GPR[SPVATF]-1659814009756
GPR[EPVATF]-1659814009820
[76272] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814009820
GPR[SSUN]-1659814009820
234947553
GPR[SPVATF]-1659814010021
GPR[EPVATF]-1659814010085
[76537] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814010085
GPR[SSUN]-1659814010085
234947553
GPR[ESUN]-1659814010298
GPR[SSUN]-1659814010298
234947553
GPR[SPVATF]-1659814010530
GPR[EPVATF]-1659814010591
[77043] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814010591
GPR[SSUN]-1659814010591
234947553
GPR[SPVATF]-1659814010795
GPR[EPVATF]-1659814010858
[77311] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814010859
GPR[SSUN]-1659814010859
234947553
GPR[ESUN]-1659814011058
GPR[SSUN]-1659814011058
890942016
GPR[SPVATF]-1659814011266
GPR[EPVATF]-1659814011335
[77787] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814011336
GPR[EPVATF]-1659814011403
[77855] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814011403
GPR[SSUN]-1659814011403
890942016
GPR[SPVATF]-1659814011609
GPR[EPVATF]-1659814011678
[78130] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814011678
GPR[SSUN]-1659814011678
890942016
GPR[ESUN]-1659814011885
GPR[SSUN]-1659814011885
890942016
GPR[SPVATF]-1659814012094
GPR[EPVATF]-1659814012167
[78619] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814012167
GPR[SSUN]-1659814012167
890942016
GPR[SPVATF]-1659814012562
GPR[EPVATF]-1659814012672
[79124] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814012672
GPR[EPVATF]-1659814012787
[79239] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814012787
GPR[SSUN]-1659814012787
890942016
GPR[SPVATF]-1659814013220
GPR[EPVATF]-1659814013327
[79780] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814013328
GPR[SSUN]-1659814013328
890942016
GPR[SPVATF]-1659814013541
GPR[EPVATF]-1659814013608
[80060] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814013608
GPR[EPVATF]-1659814013674
[80127] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814013675
GPR[SSUN]-1659814013675
890942016
GPR[ESUN]-1659814013885
GPR[SSUN]-1659814013885
890942016
GPR[SPVATF]-1659814014091
GPR[EPVATF]-1659814014159
[80611] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814014159
GPR[SSUN]-1659814014159
890942016
GPR[SPVATF]-1659814014368
GPR[EPVATF]-1659814014436
[80888] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814014436
GPR[SSUN]-1659814014436
890942016
GPR[SPVATF]-1659814014644
GPR[EPVATF]-1659814014709
[81161] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814014709
GPR[SSUN]-1659814014709
890942016
GPR[ESUN]-1659814014915
GPR[SSUN]-1659814014915
1613130706
GPR[SPVATF]-1659814015148
GPR[EPVATF]-1659814015394
[81846] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814015394
GPR[EPVATF]-1659814015635
[82087] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814015635
GPR[SSUN]-1659814015635
1613130706
GPR[SPVATF]-1659814016039
GPR[EPVATF]-1659814016306
[82758] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814016306
GPR[EPVATF]-1659814016577
[83029] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814016577
GPR[SSUN]-1659814016577
1613130706
GPR[SPVATF]-1659814016804
GPR[EPVATF]-1659814017043
[83496] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814017044
GPR[SSUN]-1659814017044
1613130706
GPR[SPVATF]-1659814017278
GPR[EPVATF]-1659814018128
[84580] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814018128
GPR[EPVATF]-1659814018374
[84828] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814018376
GPR[SSUN]-1659814018376
1613130706
GPR[SPVATF]-1659814018621
GPR[EPVATF]-1659814018868
[85320] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814018868
GPR[EPVATF]-1659814019122
[85574] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814019122
GPR[SSUN]-1659814019122
1613130706
GPR[ESUN]-1659814019362
GPR[SSUN]-1659814019362
1613130706
GPR[ESUN]-1659814019600
GPR[SSUN]-1659814019600
1613130706
GPR[ESUN]-1659814019827
GPR[SSUN]-1659814019827
1613130706
GPR[ESUN]-1659814020056
GPR[SSUN]-1659814020056
1613130706
GPR[SPVATF]-1659814020286
GPR[EPVATF]-1659814020539
[86991] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814020540
GPR[EPVATF]-1659814020790
[87242] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814020790
GPR[SSUN]-1659814020791
-1966087783
GPR[ESUN]-1659814021003
GPR[SSUN]-1659814021003
-1966087783
GPR[SPVATF]-1659814021282
GPR[EPVATF]-1659814021353
[87805] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814021354
GPR[EPVATF]-1659814021436
[87888] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814021436
GPR[SSUN]-1659814021436
-1966087783
GPR[SPVATF]-1659814021854
GPR[EPVATF]-1659814021957
[88409] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814021957
GPR[SSUN]-1659814021957
1613130706
GPR[SPVATF]-1659814022454
GPR[EPVATF]-1659814022972
[89424] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814022972
GPR[SSUN]-1659814022973
1613130706
GPR[ESUN]-1659814023277
GPR[SSUN]-1659814023277
1613130706
GPR[SPVATF]-1659814023499
GPR[EPVATF]-1659814023742
[90194] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814023742
GPR[EPVATF]-1659814023987
[90439] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814023988
GPR[SSUN]-1659814023988
1613130706
GPR[ESUN]-1659814024216
GPR[SSUN]-1659814024216
1613130706
GPR[SPVATF]-1659814024444
GPR[EPVATF]-1659814024688
[91140] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814024688
GPR[EPVATF]-1659814024929
[91381] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814024929
GPR[SSUN]-1659814024929
-1966087783
GPR[SPVATF]-1659814025137
GPR[EPVATF]-1659814025210
[91662] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814025210
GPR[EPVATF]-1659814025282
[91734] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814025282
GPR[SSUN]-1659814025282
-1966087783
GPR[SPVATF]-1659814025487
GPR[EPVATF]-1659814025559
[92011] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814025560
GPR[EPVATF]-1659814025632
[92084] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814025632
GPR[SSUN]-1659814025632
-1966087783
GPR[SPVATF]-1659814025849
GPR[EPVATF]-1659814025915
[92367] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814025915
GPR[EPVATF]-1659814025987
[92439] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814025987
GPR[SSUN]-1659814025987
-1966087783
GPR[ESUN]-1659814026198
GPR[SSUN]-1659814026198
-1966087783
GPR[ESUN]-1659814026400
GPR[SSUN]-1659814026400
-1966087783
GPR[SPVATF]-1659814026702
GPR[EPVATF]-1659814026805
[93258] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814026806
GPR[EPVATF]-1659814026914
[93366] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814026914
GPR[SSUN]-1659814026914
-1966087783
GPR[SPVATF]-1659814027258
GPR[EPVATF]-1659814027363
[93816] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814027364
GPR[EPVATF]-1659814027471
[93924] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814027472
GPR[SSUN]-1659814027472
-1966087783
GPR[ESUN]-1659814027693
GPR[SSUN]-1659814027693
-1966087783
GPR[SPVATF]-1659814027897
GPR[EPVATF]-1659814027968
[94421] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814027969
GPR[SSUN]-1659814027969
-1966087783
GPR[SPVATF]-1659814028186
GPR[EPVATF]-1659814028258
[94710] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814028258
GPR[SSUN]-1659814028258
-1966087783
GPR[ESUN]-1659814028469
GPR[SSUN]-1659814028469
-1966087783
GPR[SPVATF]-1659814028681
GPR[EPVATF]-1659814028751
[95203] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814028751
GPR[SSUN]-1659814028751
-1966087783
GPR[ESUN]-1659814028963
GPR[SSUN]-1659814028963
-1966087783
GPR[ESUN]-1659814029170
GPR[SSUN]-1659814029170
-1966087783
GPR[SPVATF]-1659814029372
GPR[EPVATF]-1659814029443
[95895] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814029443
GPR[SSUN]-1659814029443
-1966087783
GPR[SPVATF]-1659814029643
GPR[EPVATF]-1659814029716
[96168] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814029716
GPR[SSUN]-1659814029716
-1797850673
GPR[SPVATF]-1659814029998
GPR[EPVATF]-1659814031553
GPR[SPS]-1659814031553
GPR[EPS]-1659814034636
GPR[SPVATR]-1659814034636
[101088] INFO TestPatch - Applying patch: com.google.javascript.jscomp.TypeCheck:1664: PRECONDITION (com.google.javascript.jscomp.TypeCheck.this.typedCount) != (com.google.javascript.jscomp.TypeCheck.this.unknownCount)
[101501] INFO TestPatch - Running test suite to check the patch "(com.google.javascript.jscomp.TypeCheck.this.typedCount) != (com.google.javascript.jscomp.TypeCheck.this.unknownCount)" is working
GPR[EPVATR]-1659814036261
[102713] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659814036261
[102776] INFO NoPol - --- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -1663,4 +1663,6 @@
           currentProperties.clear();
-          checkInterfaceConflictProperties(t, n, functionPrivateName,
-              properties, currentProperties, interfaceType);
+          if ((com.google.javascript.jscomp.TypeCheck.this.typedCount) != (com.google.javascript.jscomp.TypeCheck.this.unknownCount)) {
+            checkInterfaceConflictProperties(t, n, functionPrivateName,
+            properties, currentProperties, interfaceType);
+          }
           properties.putAll(currentProperties);

Saving patch at /experiment_home///results/Nopol/Closure/2/seed_260/patch_98002_1ts_1659814036324.diff
GPR[ESUN]-1659814036325
GPR[SSUN]-1659814036325
-1797850673
GPR[SPVATF]-1659814036616
GPR[EPVATF]-1659814038142
GPR[SPS]-1659814038142
[105330] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1663.
GPR[EPS]-1659814038878
GPR[ESUN]-1659814038878
GPR[SSUN]-1659814038879
-1797850673
GPR[SPVATF]-1659814039172
GPR[EPVATF]-1659814040728
GPR[SPS]-1659814040728
GPR[EPS]-1659814042470
GPR[SPVATR]-1659814042470
[108922] INFO TestPatch - Applying patch: com.google.javascript.jscomp.TypeCheck:1662: PRECONDITION 1 < functionPrivateName.length()
[109870] INFO TestPatch - Running test suite to check the patch "1 < functionPrivateName.length()" is working
GPR[EPVATR]-1659814044192
[110644] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659814044193
[110660] INFO NoPol - --- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -1661,7 +1661,9 @@
             = new HashMap<String, ObjectType>();
-        for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {
-          currentProperties.clear();
-          checkInterfaceConflictProperties(t, n, functionPrivateName,
-              properties, currentProperties, interfaceType);
-          properties.putAll(currentProperties);
+        if (1 < functionPrivateName.length()) {
+          for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {
+            currentProperties.clear();
+            checkInterfaceConflictProperties(t, n, functionPrivateName,
+            properties, currentProperties, interfaceType);
+            properties.putAll(currentProperties);
+          }
         }

Saving patch at /experiment_home///results/Nopol/Closure/2/seed_260/patch_105886_2ts_1659814044208.diff
GPR[ESUN]-1659814044209
GPR[SSUN]-1659814044209
-1797850673
GPR[ESUN]-1659814044526
GPR[SSUN]-1659814044526
-1797850673
GPR[ESUN]-1659814044802
GPR[SSUN]-1659814044802
-1797850673
GPR[SPVATF]-1659814045078
GPR[EPVATF]-1659814046607
GPR[SPS]-1659814046607
[113553] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TypeCheck implements com.google.javascript.jscomp.NodeTraversal.Callback , com.google.javascript.jscomp.CompilerPass {
    static final com.google.javascript.jscomp.DiagnosticType UNEXPECTED_TOKEN = com.google.javascript.jscomp.DiagnosticType.error("JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN", "Internal Error: Don't know how to handle {0}");

    static final com.google.javascript.jscomp.DiagnosticType BAD_DELETE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_DELETE_OPERAND", "delete operator needs a reference operand");

    protected static final java.lang.String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT = "overriding prototype with non-object";

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST", "condition always evaluates to {2}\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST_NO_RESULT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST_NO_RESULT", "condition always evaluates to the same value\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_ENUM_ELEMENT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INEXISTENT_ENUM_ELEMENT", "element {0} does not exist on this enum");

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_PROPERTY = com.google.javascript.jscomp.DiagnosticType.disabled("JSC_INEXISTENT_PROPERTY", "Property {0} never defined on {1}");

    protected static final com.google.javascript.jscomp.DiagnosticType NOT_A_CONSTRUCTOR = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_A_CONSTRUCTOR", "cannot instantiate non-constructor");

    static final com.google.javascript.jscomp.DiagnosticType BIT_OPERATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_TYPE_FOR_BIT_OPERATION", "operator {0} cannot be applied to {1}");

    static final com.google.javascript.jscomp.DiagnosticType NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_FUNCTION_TYPE", "{0} expressions are not callable");

    static final com.google.javascript.jscomp.DiagnosticType CONSTRUCTOR_NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONSTRUCTOR_NOT_CALLABLE", "Constructor {0} should be called with the \"new\" keyword");

    static final com.google.javascript.jscomp.DiagnosticType FUNCTION_MASKS_VARIABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_FUNCTION_MASKS_VARIABLE", "function {0} masks variable (IE bug)");

    static final com.google.javascript.jscomp.DiagnosticType MULTIPLE_VAR_DEF = com.google.javascript.jscomp.DiagnosticType.warning("JSC_MULTIPLE_VAR_DEF", "declaration of multiple variables with shared type information");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_DUP = com.google.javascript.jscomp.DiagnosticType.error("JSC_ENUM_DUP", "enum element {0} already defined");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_NOT_CONSTANT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ENUM_NOT_CONSTANT", "enum key {0} must be a syntactic constant");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INVALID_INTERFACE_MEMBER_DECLARATION", "interface members can only be empty property declarations," + " empty functions{0}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_FUNCTION_NOT_EMPTY", "interface member functions must have an empty body");

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_EXTENDED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_EXTENDED_TYPE", "{1} cannot extend this type; {0}s can only extend {0}s");

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_IMPLEMENTED_TYPE", "{0} cannot implement this type; " + "an interface can only extend, but not implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType BAD_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_IMPLEMENTS_NON_INTERFACE", "can only implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY", "property {0} already defined on superclass {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_INTERFACE_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_INTERFACE_PROPERTY", "property {0} already defined on interface {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", "mismatch of the {0} property type and the type " + (("of the property it overrides from superclass {1}\n" + "original: {2}\n") + "override: {3}"));

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_OVERRIDE", "property {0} not defined on any superclass of {1}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_METHOD_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_METHOD_OVERRIDE", "property {0} is already defined by the {1} extended interface");

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_EXPR_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_EXPR_TYPE", "could not determine the type of this expression");

    static final com.google.javascript.jscomp.DiagnosticType UNRESOLVED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNRESOLVED_TYPE", "could not resolve the name {0} to a type");

    static final com.google.javascript.jscomp.DiagnosticType WRONG_ARGUMENT_COUNT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_WRONG_ARGUMENT_COUNT", "Function {0}: called with {1} argument(s). " + "Function requires at least {2} argument(s){3}.");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_IMPLICIT_CAST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ILLEGAL_IMPLICIT_CAST", "Illegal annotation on {0}. @implicitCast may only be used in " + "externs.");

    static final com.google.javascript.jscomp.DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", "Interface {0} has a property {1} with incompatible types in " + "its super interfaces {2} and {3}");

    static final com.google.javascript.jscomp.DiagnosticType EXPECTED_THIS_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_EXPECTED_THIS_TYPE", "\"{0}\" must be called with a \"this\" type");

    static final com.google.javascript.jscomp.DiagnosticType IN_USED_WITH_STRUCT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_IN_USED_WITH_STRUCT", "Cannot use the IN operator with structs");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_PROPERTY_CREATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ILLEGAL_PROPERTY_CREATION", "Cannot add a property to a struct instance " + "after it is constructed.");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_OBJLIT_KEY = com.google.javascript.jscomp.DiagnosticType.warning("ILLEGAL_OBJLIT_KEY", "Illegal key, the object literal is a {0}");

    static final com.google.javascript.jscomp.DiagnosticGroup ALL_DIAGNOSTICS = new com.google.javascript.jscomp.DiagnosticGroup(com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF, com.google.javascript.jscomp.TypeCheck.ENUM_DUP, com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE, com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT, com.google.javascript.jscomp.TypeCheck.ILLEGAL_PROPERTY_CREATION, com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY, com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR, com.google.javascript.jscomp.TypedScopeCreator.UNKNOWN_LENDS, com.google.javascript.jscomp.TypedScopeCreator.LENDS_ON_NON_OBJECT, com.google.javascript.jscomp.TypedScopeCreator.CTOR_INITIALIZER, com.google.javascript.jscomp.TypedScopeCreator.IFACE_INITIALIZER, com.google.javascript.jscomp.FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.TypeValidator validator;

    private final com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private com.google.javascript.jscomp.Scope topScope;

    private com.google.javascript.jscomp.MemoizedScopeCreator scopeCreator;

    private final com.google.javascript.jscomp.CheckLevel reportMissingOverride;

    private final com.google.javascript.jscomp.CheckLevel reportUnknownTypes;

    private boolean reportMissingProperties = true;

    private com.google.javascript.jscomp.InferJSDocInfo inferJSDocInfo = null;

    private int typedCount = 0;

    private int nullCount = 0;

    private int unknownCount = 0;

    private boolean inExterns;

    private int noTypeCheckSection = 0;

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.Scope topScope, com.google.javascript.jscomp.MemoizedScopeCreator scopeCreator, com.google.javascript.jscomp.CheckLevel reportMissingOverride, com.google.javascript.jscomp.CheckLevel reportUnknownTypes) {
        this.compiler = compiler;
        this.validator = compiler.getTypeValidator();
        this.reverseInterpreter = reverseInterpreter;
        this.typeRegistry = typeRegistry;
        this.topScope = topScope;
        this.scopeCreator = scopeCreator;
        this.reportMissingOverride = reportMissingOverride;
        this.reportUnknownTypes = reportUnknownTypes;
        this.inferJSDocInfo = new com.google.javascript.jscomp.InferJSDocInfo(compiler);
    }

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.CheckLevel reportMissingOverride, com.google.javascript.jscomp.CheckLevel reportUnknownTypes) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, reportMissingOverride, reportUnknownTypes);
    }

    TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, com.google.javascript.jscomp.CheckLevel.WARNING, com.google.javascript.jscomp.CheckLevel.OFF);
    }

    com.google.javascript.jscomp.TypeCheck reportMissingProperties(boolean report) {
        reportMissingProperties = report;
        return this;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkNotNull(scopeCreator);
        com.google.common.base.Preconditions.checkNotNull(topScope);
        com.google.javascript.rhino.Node externsAndJs = jsRoot.getParent();
        com.google.common.base.Preconditions.checkState(externsAndJs != null);
        com.google.common.base.Preconditions.checkState((externsRoot == null) || externsAndJs.hasChild(externsRoot));
        if (externsRoot != null) {
            check(externsRoot, true);
        }
        check(jsRoot, false);
    }

    public com.google.javascript.jscomp.Scope processForTesting(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkState(scopeCreator == null);
        com.google.common.base.Preconditions.checkState(topScope == null);
        com.google.common.base.Preconditions.checkState(jsRoot.getParent() != null);
        com.google.javascript.rhino.Node externsAndJsRoot = jsRoot.getParent();
        scopeCreator = new com.google.javascript.jscomp.MemoizedScopeCreator(new com.google.javascript.jscomp.TypedScopeCreator(compiler));
        topScope = scopeCreator.createScope(externsAndJsRoot, null);
        com.google.javascript.jscomp.TypeInferencePass inference = new com.google.javascript.jscomp.TypeInferencePass(compiler, reverseInterpreter, topScope, scopeCreator);
        inference.process(externsRoot, jsRoot);
        process(externsRoot, jsRoot);
        return topScope;
    }

    public void check(com.google.javascript.rhino.Node node, boolean externs) {
        com.google.common.base.Preconditions.checkNotNull(node);
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, this, scopeCreator);
        inExterns = externs;
        t.traverseWithScope(node, topScope);
        if (externs) {
            inferJSDocInfo.process(node, null);
        } else {
            inferJSDocInfo.process(null, node);
        }
    }

    private void checkNoTypeCheckSection(com.google.javascript.rhino.Node n, boolean enterSection) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.ASSIGN :
                com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
                if ((info != null) && info.isNoTypeCheck()) {
                    if (enterSection) {
                        noTypeCheckSection++;
                    } else {
                        noTypeCheckSection--;
                    }
                }
                validator.setShouldReport(noTypeCheckSection == 0);
                break;
        }
    }

    private void report(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType diagnosticType, java.lang.String... arguments) {
        if (noTypeCheckSection == 0) {
            t.report(n, diagnosticType, arguments);
        }
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        checkNoTypeCheckSection(n, true);
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                final com.google.javascript.jscomp.Scope outerScope = t.getScope();
                final java.lang.String functionPrivateName = n.getFirstChild().getString();
                if ((((functionPrivateName != null) && (functionPrivateName.length() > 0)) && outerScope.isDeclared(functionPrivateName, false)) && (!(outerScope.getVar(functionPrivateName).getType() instanceof com.google.javascript.rhino.jstype.FunctionType))) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, functionPrivateName);
                }
                break;
        }
        return true;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.jstype.JSType childType;
        com.google.javascript.rhino.jstype.JSType leftType;
        com.google.javascript.rhino.jstype.JSType rightType;
        com.google.javascript.rhino.Node left;
        com.google.javascript.rhino.Node right;
        boolean typeable = true;
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CAST :
                com.google.javascript.rhino.Node expr = n.getFirstChild();
                ensureTyped(t, n, getJSType(expr));
                com.google.javascript.rhino.jstype.JSType castType = getJSType(n);
                com.google.javascript.rhino.jstype.JSType exprType = getJSType(expr);
                if (castType.isSubtype(exprType)) {
                    expr.setJSType(castType);
                }
                break;
            case com.google.javascript.rhino.Token.NAME :
                typeable = visitName(t, n, parent);
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.COMMA :
                ensureTyped(t, n, getJSType(n.getLastChild()));
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.THIS :
                ensureTyped(t, n, t.getScope().getTypeOfThis());
                break;
            case com.google.javascript.rhino.Token.NULL :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING_KEY :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE);
                break;
            case com.google.javascript.rhino.Token.REGEXP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                visitGetProp(t, n, parent);
                typeable = !(parent.isAssign() && (parent.getFirstChild() == n));
                break;
            case com.google.javascript.rhino.Token.GETELEM :
                visitGetElem(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.VAR :
                visitVar(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.NEW :
                visitNew(t, n);
                break;
            case com.google.javascript.rhino.Token.CALL :
                visitCall(t, n);
                typeable = !parent.isExprResult();
                break;
            case com.google.javascript.rhino.Token.RETURN :
                visitReturn(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
                left = n.getFirstChild();
                checkPropCreation(t, left);
                validator.expectNumber(t, left, getJSType(left), "increment/decrement");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.NOT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.VOID :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.BITNOT :
                childType = getJSType(n.getFirstChild());
                if (!childType.matchesInt32Context()) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), childType.toString());
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "sign operator");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                {
                    left = n.getFirstChild();
                    right = n.getLastChild();
                    if (left.isTypeOf()) {
                        if (right.isString()) {
                            checkTypeofString(t, right, right.getString());
                        }
                    } else if (right.isTypeOf() && left.isString()) {
                        checkTypeofString(t, left, left.getString());
                    }
                    leftType = getJSType(left);
                    rightType = getJSType(right);
                    com.google.javascript.rhino.jstype.JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.TernaryValue result = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                    if ((n.getType() == com.google.javascript.rhino.Token.EQ) || (n.getType() == com.google.javascript.rhino.Token.NE)) {
                        result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                        if (n.isNE()) {
                            result = result.not();
                        }
                    } else if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                        result = (n.getType() == com.google.javascript.rhino.Token.SHEQ) ? com.google.javascript.rhino.jstype.TernaryValue.FALSE : com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                    }
                    if (result != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                    }
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                    break;
                }
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                if (rightType.isNumber()) {
                    validator.expectNumber(t, n, leftType, "left side of numeric comparison");
                } else if (leftType.isNumber()) {
                    validator.expectNumber(t, n, rightType, "right side of numeric comparison");
                } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                } else {
                    java.lang.String message = "left side of comparison";
                    validator.expectString(t, n, leftType, message);
                    validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                    message = "right side of comparison";
                    validator.expectString(t, n, rightType, message);
                    validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.IN :
                left = n.getFirstChild();
                right = n.getLastChild();
                rightType = getJSType(right);
                validator.expectString(t, left, getJSType(left), "left side of 'in'");
                validator.expectObject(t, n, rightType, "'in' requires an object");
                if (rightType.isStruct()) {
                    report(t, right, com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT);
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                left = n.getFirstChild();
                right = n.getLastChild();
                rightType = getJSType(right).restrictByNotNullOrUndefined();
                validator.expectAnyObject(t, left, getJSType(left), "deterministic instanceof yields false");
                validator.expectActualObject(t, right, rightType, "instanceof requires an object");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.ASSIGN :
                visitAssign(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                checkPropCreation(t, n.getFirstChild());
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.MUL :
                visitBinaryOperator(n.getType(), t, n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.jstype.JSType switchType = getJSType(parent.getFirstChild());
                com.google.javascript.rhino.jstype.JSType caseType = getJSType(n.getFirstChild());
                validator.expectSwitchMatchesCase(t, n, switchType, caseType);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.WITH :
                {
                    com.google.javascript.rhino.Node child = n.getFirstChild();
                    childType = getJSType(child);
                    validator.expectObject(t, child, childType, "with requires an object");
                    typeable = false;
                    break;
                }
            case com.google.javascript.rhino.Token.FUNCTION :
                visitFunction(t, n);
                break;
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.LABEL_NAME :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.DEBUGGER :
            case com.google.javascript.rhino.Token.THROW :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.FOR :
                if (com.google.javascript.jscomp.NodeUtil.isForIn(n)) {
                    com.google.javascript.rhino.Node obj = n.getChildAtIndex(1);
                    if (getJSType(obj).isStruct()) {
                        report(t, obj, com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT);
                    }
                }
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.OR :
                if (n.getJSType() != null) {
                    ensureTyped(t, n);
                } else if (n.isObjectLit() && (parent.getJSType() instanceof com.google.javascript.rhino.jstype.EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
                if (n.isObjectLit()) {
                    com.google.javascript.rhino.jstype.JSType typ = getJSType(n);
                    for (com.google.javascript.rhino.Node key : n.children()) {
                        visitObjLitKey(t, key, n, typ);
                    }
                }
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(n.getType()));
                ensureTyped(t, n);
                break;
        }
        typeable = typeable && (!inExterns);
        if (typeable) {
            doPercentTypedAccounting(t, n);
        }
        checkNoTypeCheckSection(n, false);
    }

    private void checkTypeofString(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String s) {
        if (!((((((s.equals("number") || s.equals("string")) || s.equals("boolean")) || s.equals("undefined")) || s.equals("function")) || s.equals("object")) || s.equals("unknown"))) {
            validator.expectValidTypeofName(t, n, s);
        }
    }

    private void doPercentTypedAccounting(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            nullCount++;
        } else if (type.isUnknownType()) {
            if (reportUnknownTypes.isOn()) {
                compiler.report(t.makeError(n, reportUnknownTypes, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE));
            }
            unknownCount++;
        } else {
            typedCount++;
        }
    }

    private void visitAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign) {
        com.google.javascript.rhino.JSDocInfo info = assign.getJSDocInfo();
        com.google.javascript.rhino.Node lvalue = assign.getFirstChild();
        com.google.javascript.rhino.Node rvalue = assign.getLastChild();
        if (lvalue.isGetProp()) {
            com.google.javascript.rhino.Node object = lvalue.getFirstChild();
            com.google.javascript.rhino.jstype.JSType objectJsType = getJSType(object);
            com.google.javascript.rhino.Node property = lvalue.getLastChild();
            java.lang.String pname = property.getString();
            if (object.isGetProp()) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object.getFirstChild());
                if (jsType.isInterface() && object.getLastChild().getString().equals("prototype")) {
                    visitInterfaceGetprop(t, assign, object, pname, lvalue, rvalue);
                }
            }
            checkEnumAlias(t, info, rvalue);
            checkPropCreation(t, lvalue);
            if (pname.equals("prototype")) {
                if ((objectJsType != null) && objectJsType.isFunctionType()) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = objectJsType.toMaybeFunctionType();
                    if (functionType.isConstructor()) {
                        com.google.javascript.rhino.jstype.JSType rvalueType = rvalue.getJSType();
                        validator.expectObject(t, rvalue, rvalueType, com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
                        if (functionType.makesStructs() && (!rvalueType.isStruct())) {
                            java.lang.String funName = functionType.getTypeOfThis().toString();
                            compiler.report(t.makeError(assign, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, "struct", funName));
                        }
                        return;
                    }
                }
            }
            com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objectJsType.restrictByNotNullOrUndefined());
            if (type != null) {
                if ((type.hasProperty(pname) && (!type.isPropertyTypeInferred(pname))) && (!propertyIsImplicitCast(type, pname))) {
                    com.google.javascript.rhino.jstype.JSType expectedType = type.getPropertyType(pname);
                    if (!expectedType.isUnknownType()) {
                        validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), expectedType, object, pname);
                        checkPropertyInheritanceOnGetpropAssign(t, assign, object, pname, info, expectedType);
                        return;
                    }
                }
            }
            checkPropertyInheritanceOnGetpropAssign(t, assign, object, pname, info, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
        }
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(lvalue);
        if (lvalue.isQualifiedName()) {
            com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(assign.getLastChild());
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(lvalue.getQualifiedName());
            if (var != null) {
                if (var.isTypeInferred()) {
                    return;
                }
                if (com.google.javascript.jscomp.NodeUtil.getRootOfQualifiedName(lvalue).isThis() && (t.getScope() != var.getScope())) {
                    return;
                }
                if (var.getType() != null) {
                    leftType = var.getType();
                }
            }
        }
        com.google.javascript.rhino.Node rightChild = assign.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(rightChild);
        if (validator.expectCanAssignTo(t, assign, rightType, leftType, "assignment")) {
            ensureTyped(t, assign, rightType);
        } else {
            ensureTyped(t, assign);
        }
    }

    private void checkPropCreation(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node lvalue) {
        if (lvalue.isGetProp()) {
            com.google.javascript.rhino.Node obj = lvalue.getFirstChild();
            com.google.javascript.rhino.Node prop = lvalue.getLastChild();
            com.google.javascript.rhino.jstype.JSType objType = getJSType(obj);
            java.lang.String pname = prop.getString();
            if (objType.isStruct() && (!objType.hasProperty(pname))) {
                if (!(obj.isThis() && getJSType(t.getScope().getRootNode()).isConstructor())) {
                    report(t, prop, com.google.javascript.jscomp.TypeCheck.ILLEGAL_PROPERTY_CREATION);
                }
            }
        }
    }

    private void checkPropertyInheritanceOnGetpropAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (object.isGetProp()) {
            com.google.javascript.rhino.Node object2 = object.getFirstChild();
            java.lang.String property2 = com.google.javascript.jscomp.NodeUtil.getStringValue(object.getLastChild());
            if ("prototype".equals(property2)) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object2);
                if (jsType.isFunctionType()) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
                    if (functionType.isConstructor() || functionType.isInterface()) {
                        checkDeclaredPropertyInheritance(t, assign, functionType, property, info, propertyType);
                    }
                }
            }
        }
    }

    private void visitObjLitKey(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node key, com.google.javascript.rhino.Node objlit, com.google.javascript.rhino.jstype.JSType litType) {
        if (objlit.isFromExterns()) {
            ensureTyped(t, key);
            return;
        }
        if (litType.isStruct() && key.isQuotedString()) {
            report(t, key, com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY, "struct");
        } else if (litType.isDict() && (!key.isQuotedString())) {
            report(t, key, com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY, "dict");
        }
        com.google.javascript.rhino.Node rvalue = key.getFirstChild();
        com.google.javascript.rhino.jstype.JSType rightType = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyTypeFromValueType(key, getJSType(rvalue));
        if (rightType == null) {
            rightType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        com.google.javascript.rhino.Node owner = objlit;
        com.google.javascript.rhino.jstype.JSType keyType = getJSType(key);
        com.google.javascript.rhino.jstype.JSType allowedValueType = keyType;
        if (allowedValueType.isEnumElementType()) {
            allowedValueType = allowedValueType.toMaybeEnumElementType().getPrimitiveType();
        }
        boolean valid = validator.expectCanAssignToPropertyOf(t, key, rightType, allowedValueType, owner, com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key));
        if (valid) {
            ensureTyped(t, key, rightType);
        } else {
            ensureTyped(t, key);
        }
        com.google.javascript.rhino.jstype.JSType objlitType = getJSType(objlit);
        com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objlitType.restrictByNotNullOrUndefined());
        if (type != null) {
            java.lang.String property = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key);
            if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!propertyIsImplicitCast(type, property))) {
                validator.expectCanAssignToPropertyOf(t, key, keyType, type.getPropertyType(property), owner, property);
            }
            return;
        }
    }

    private boolean propertyIsImplicitCast(com.google.javascript.rhino.jstype.ObjectType type, java.lang.String prop) {
        for (; type != null; type = type.getImplicitPrototype()) {
            com.google.javascript.rhino.JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);
            if ((docInfo != null) && docInfo.isImplicitCast()) {
                return true;
            }
        }
        return false;
    }

    private void checkDeclaredPropertyInheritance(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.FunctionType ctorType, java.lang.String propertyName, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (com.google.javascript.jscomp.TypeCheck.hasUnknownOrEmptySupertype(ctorType)) {
            return;
        }
        com.google.javascript.rhino.jstype.FunctionType superClass = ctorType.getSuperClassConstructor();
        boolean superClassHasProperty = (superClass != null) && superClass.getInstanceType().hasProperty(propertyName);
        boolean superClassHasDeclaredProperty = (superClass != null) && superClass.getInstanceType().isPropertyTypeDeclared(propertyName);
        boolean superInterfaceHasProperty = false;
        boolean superInterfaceHasDeclaredProperty = false;
        if (ctorType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                superInterfaceHasProperty = superInterfaceHasProperty || interfaceType.hasProperty(propertyName);
                superInterfaceHasDeclaredProperty = superInterfaceHasDeclaredProperty || interfaceType.isPropertyTypeDeclared(propertyName);
            }
        }
        boolean declaredOverride = (info != null) && info.isOverride();
        boolean foundInterfaceProperty = false;
        if (ctorType.isConstructor()) {
            for (com.google.javascript.rhino.jstype.JSType implementedInterface : ctorType.getAllImplementedInterfaces()) {
                if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {
                    continue;
                }
                com.google.javascript.rhino.jstype.FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();
                com.google.common.base.Preconditions.checkNotNull(interfaceType);
                boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);
                foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;
                if ((reportMissingOverride.isOn() && (!declaredOverride)) && interfaceHasProperty) {
                    compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));
                }
            }
        }
        if (((!declaredOverride) && (!superClassHasProperty)) && (!superInterfaceHasProperty)) {
            return;
        }
        com.google.javascript.rhino.jstype.ObjectType topInstanceType = (superClassHasDeclaredProperty) ? superClass.getTopMostDefiningType(propertyName) : null;
        boolean declaredLocally = ctorType.isConstructor() && (ctorType.getPrototype().hasOwnProperty(propertyName) || ctorType.getInstanceType().hasOwnProperty(propertyName));
        if (((reportMissingOverride.isOn() && (!declaredOverride)) && superClassHasDeclaredProperty) && declaredLocally) {
            compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));
        }
        if (superClassHasDeclaredProperty) {
            com.google.javascript.rhino.jstype.JSType superClassPropType = superClass.getInstanceType().getPropertyType(propertyName);
            if (!propertyType.isSubtype(superClassPropType)) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));
            }
        } else if (superInterfaceHasDeclaredProperty) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                if (interfaceType.hasProperty(propertyName)) {
                    com.google.javascript.rhino.jstype.JSType superPropertyType = interfaceType.getPropertyType(propertyName);
                    if (!propertyType.isSubtype(superPropertyType)) {
                        topInstanceType = interfaceType.getConstructor().getTopMostDefiningType(propertyName);
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superPropertyType.toString(), propertyType.toString()));
                    }
                }
            }
        } else if (((!foundInterfaceProperty) && (!superClassHasProperty)) && (!superInterfaceHasProperty)) {
            compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));
        }
    }

    private static boolean hasUnknownOrEmptySupertype(com.google.javascript.rhino.jstype.FunctionType ctor) {
        com.google.common.base.Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());
        com.google.common.base.Preconditions.checkArgument(!ctor.isUnknownType());
        while (true) {
            com.google.javascript.rhino.jstype.ObjectType maybeSuperInstanceType = ctor.getPrototype().getImplicitPrototype();
            if (maybeSuperInstanceType == null) {
                return false;
            }
            if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {
                return true;
            }
            ctor = maybeSuperInstanceType.getConstructor();
            if (ctor == null) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());
        } 
    }

    private void visitInterfaceGetprop(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.Node lvalue, com.google.javascript.rhino.Node rvalue) {
        com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(rvalue);
        java.lang.String abstractMethodName = compiler.getCodingConvention().getAbstractMethodName();
        if (!rvalueType.isFunctionType()) {
            java.lang.String abstractMethodMessage = (abstractMethodName != null) ? ", or " + abstractMethodName : "";
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, abstractMethodMessage));
        }
        if (assign.getLastChild().isFunction() && (!com.google.javascript.jscomp.NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))) {
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, abstractMethodName));
        }
    }

    boolean visitName(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        int parentNodeType = parent.getType();
        if ((((parentNodeType == com.google.javascript.rhino.Token.FUNCTION) || (parentNodeType == com.google.javascript.rhino.Token.CATCH)) || (parentNodeType == com.google.javascript.rhino.Token.PARAM_LIST)) || (parentNodeType == com.google.javascript.rhino.Token.VAR)) {
            return false;
        }
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            type = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(n.getString());
            if (var != null) {
                com.google.javascript.rhino.jstype.JSType varType = var.getType();
                if (varType != null) {
                    type = varType;
                }
            }
        }
        ensureTyped(t, n, type);
        return true;
    }

    private void visitGetProp(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.Node property = n.getLastChild();
        com.google.javascript.rhino.Node objNode = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(objNode);
        if (childType.isDict()) {
            report(t, property, com.google.javascript.jscomp.TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
        } else if (validator.expectNotNullOrUndefined(t, n, childType, "No properties on this expression", getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE))) {
            checkPropertyAccess(childType, property.getString(), t, n);
        }
        ensureTyped(t, n);
    }

    private void checkPropertyAccess(com.google.javascript.rhino.jstype.JSType childType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType propType = getJSType(n);
        if (propType.isEquivalentTo(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
            childType = childType.autobox();
            com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(childType);
            if (objectType != null) {
                if ((!objectType.hasProperty(propName)) || objectType.isEquivalentTo(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
                    if (objectType instanceof com.google.javascript.rhino.jstype.EnumType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, propName);
                    } else {
                        checkPropertyAccessHelper(objectType, propName, t, n);
                    }
                }
            } else {
                checkPropertyAccessHelper(childType, propName, t, n);
            }
        }
    }

    private void checkPropertyAccessHelper(com.google.javascript.rhino.jstype.JSType objectType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        if (((!objectType.isEmptyType()) && reportMissingProperties) && (!isPropertyTest(n))) {
            if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, propName, validator.getReadableJSTypeName(n.getFirstChild(), true));
            }
        }
    }

    private boolean isPropertyTest(com.google.javascript.rhino.Node getProp) {
        com.google.javascript.rhino.Node parent = getProp.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.CALL :
                return (parent.getFirstChild() != getProp) && compiler.getCodingConvention().isPropertyTestFunction(parent);
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
                return com.google.javascript.jscomp.NodeUtil.getConditionExpression(parent) == getProp;
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.TYPEOF :
                return true;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
                return parent.getFirstChild() == getProp;
            case com.google.javascript.rhino.Token.NOT :
                return parent.getParent().isOr() && (parent.getParent().getFirstChild() == parent);
        }
        return false;
    }

    private void visitGetElem(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        validator.expectIndexMatch(t, n, getJSType(n.getFirstChild()), getJSType(n.getLastChild()));
        ensureTyped(t, n);
    }

    private void visitVar(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo varInfo = (n.hasOneChild()) ? n.getJSDocInfo() : null;
        for (com.google.javascript.rhino.Node name : n.children()) {
            com.google.javascript.rhino.Node value = name.getFirstChild();
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(name.getString());
            if (value != null) {
                com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
                com.google.javascript.rhino.jstype.JSType nameType = var.getType();
                nameType = (nameType == null) ? getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE) : nameType;
                com.google.javascript.rhino.JSDocInfo info = name.getJSDocInfo();
                if (info == null) {
                    info = varInfo;
                }
                checkEnumAlias(t, info, value);
                if (var.isTypeInferred()) {
                    ensureTyped(t, name, valueType);
                } else {
                    validator.expectCanAssignTo(t, value, valueType, nameType, "initializing variable");
                }
            }
        }
    }

    private void visitNew(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node constructor = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
        if ((type.isConstructor() || type.isEmptyType()) || type.isUnknownType()) {
            com.google.javascript.rhino.jstype.FunctionType fnType = type.toMaybeFunctionType();
            if (fnType != null) {
                visitParameterList(t, n, fnType);
                ensureTyped(t, n, fnType.getInstanceType());
            } else {
                ensureTyped(t, n);
            }
        } else {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);
            ensureTyped(t, n);
        }
    }

    private void checkInterfaceConflictProperties(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String functionName, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties, com.google.javascript.rhino.jstype.ObjectType interfaceType) {
        com.google.javascript.rhino.jstype.ObjectType implicitProto = interfaceType.getImplicitPrototype();
        java.util.Set<java.lang.String> currentPropertyNames;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(5).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST",com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT",com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride",com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("implicitProto",implicitProto);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT",com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_DELETE",com.google.javascript.jscomp.TypeCheck.BAD_DELETE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.this.typeRegistry",com.google.javascript.jscomp.TypeCheck.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.this.typedCount",com.google.javascript.jscomp.TypeCheck.this.typedCount);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY",com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("currentProperties",currentProperties);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE",com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.this.nullCount",com.google.javascript.jscomp.TypeCheck.this.nullCount);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.this.inExterns",com.google.javascript.jscomp.TypeCheck.this.inExterns);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS",com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT",com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE",com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_PROPERTY_CREATION",com.google.javascript.jscomp.TypeCheck.ILLEGAL_PROPERTY_CREATION);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY",com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR",com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF",com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter",com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.BIT_OPERATION",com.google.javascript.jscomp.TypeCheck.BIT_OPERATION);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE",com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT",com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE",com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT",com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY",com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.this.compiler",com.google.javascript.jscomp.TypeCheck.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE",com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_DUP",com.google.javascript.jscomp.TypeCheck.ENUM_DUP);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.this.scopeCreator",com.google.javascript.jscomp.TypeCheck.this.scopeCreator);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("interfaceType",interfaceType);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION",com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.this.validator",com.google.javascript.jscomp.TypeCheck.this.validator);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection",com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties",com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo",com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.this.topScope",com.google.javascript.jscomp.TypeCheck.this.topScope);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("functionName",functionName);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN",com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes",com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("properties",properties);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("com.google.javascript.jscomp.TypeCheck.this.unknownCount",com.google.javascript.jscomp.TypeCheck.this.unknownCount);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectionEnds();
        }
        if (runtimeAngelicValue)
            currentPropertyNames = implicitProto.getOwnPropertyNames();

        for (java.lang.String name : currentPropertyNames) {
            com.google.javascript.rhino.jstype.ObjectType oType = properties.get(name);
            if (oType != null) {
                if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));
                }
            }
            currentProperties.put(name, interfaceType);
        }
        for (com.google.javascript.rhino.jstype.ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
            checkInterfaceConflictProperties(t, n, functionName, properties, currentProperties, iType);
        }
    }

    private void visitFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.FunctionType functionType = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(n.getJSType());
        java.lang.String functionPrivateName = n.getFirstChild().getString();
        if (functionType.isConstructor()) {
            com.google.javascript.rhino.jstype.FunctionType baseConstructor = functionType.getSuperClassConstructor();
            if (((baseConstructor != getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE)) && (baseConstructor != null)) && baseConstructor.isInterface()) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, "constructor", functionPrivateName));
            } else {
                if (baseConstructor != getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE)) {
                    com.google.javascript.rhino.jstype.ObjectType proto = functionType.getPrototype();
                    if (functionType.makesStructs() && (!proto.isStruct())) {
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, "struct", functionPrivateName));
                    } else if (functionType.makesDicts() && (!proto.isDict())) {
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, "dict", functionPrivateName));
                    }
                }
                for (com.google.javascript.rhino.jstype.JSType baseInterface : functionType.getImplementedInterfaces()) {
                    boolean badImplementedType = false;
                    com.google.javascript.rhino.jstype.ObjectType baseInterfaceObj = com.google.javascript.rhino.jstype.ObjectType.cast(baseInterface);
                    if (baseInterfaceObj != null) {
                        com.google.javascript.rhino.jstype.FunctionType interfaceConstructor = baseInterfaceObj.getConstructor();
                        if ((interfaceConstructor != null) && (!interfaceConstructor.isInterface())) {
                            badImplementedType = true;
                        }
                    } else {
                        badImplementedType = true;
                    }
                    if (badImplementedType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, functionPrivateName);
                    }
                }
                validator.expectAllInterfaceProperties(t, n, functionType);
            }
        } else if (functionType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType extInterface : functionType.getExtendedInterfaces()) {
                if ((extInterface.getConstructor() != null) && (!extInterface.getConstructor().isInterface())) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, "interface", functionPrivateName));
                }
            }
            if (functionType.getExtendedInterfacesCount() > 1) {
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                for (com.google.javascript.rhino.jstype.ObjectType interfaceType : functionType.getExtendedInterfaces()) {
                    currentProperties.clear();
                    checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);
                    properties.putAll(currentProperties);
                }
            }
        }
    }

    private void visitCall(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node child = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(child).restrictByNotNullOrUndefined();
        if (!childType.canBeCalled()) {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, childType.toString());
            ensureTyped(t, n);
            return;
        }
        if (childType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = childType.toMaybeFunctionType();
            boolean isExtern = false;
            com.google.javascript.rhino.JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
            if ((functionJSDocInfo != null) && (functionJSDocInfo.getAssociatedNode() != null)) {
                isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();
            }
            if ((functionType.isConstructor() && (!functionType.isNativeObjectType())) && ((functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType()) || (!isExtern))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, childType.toString());
            }
            if (((functionType.isOrdinaryFunction() && (!functionType.getTypeOfThis().isUnknownType())) && (!((functionType.getTypeOfThis().toObjectType() != null) && functionType.getTypeOfThis().toObjectType().isNativeObjectType()))) && (!(child.isGetElem() || child.isGetProp()))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, functionType.toString());
            }
            visitParameterList(t, n, functionType);
            ensureTyped(t, n, functionType.getReturnType());
        } else {
            ensureTyped(t, n);
        }
    }

    private void visitParameterList(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node call, com.google.javascript.rhino.jstype.FunctionType functionType) {
        java.util.Iterator<com.google.javascript.rhino.Node> arguments = call.children().iterator();
        arguments.next();
        java.util.Iterator<com.google.javascript.rhino.Node> parameters = functionType.getParameters().iterator();
        int ordinal = 0;
        com.google.javascript.rhino.Node parameter = null;
        com.google.javascript.rhino.Node argument = null;
        while (arguments.hasNext() && (parameters.hasNext() || ((parameter != null) && parameter.isVarArgs()))) {
            if (parameters.hasNext()) {
                parameter = parameters.next();
            }
            argument = arguments.next();
            ordinal++;
            validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);
        } 
        int numArgs = call.getChildCount() - 1;
        int minArgs = functionType.getMinArguments();
        int maxArgs = functionType.getMaxArguments();
        if ((minArgs > numArgs) || (maxArgs < numArgs)) {
            report(t, call, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), java.lang.String.valueOf(numArgs), java.lang.String.valueOf(minArgs), maxArgs != java.lang.Integer.MAX_VALUE ? (" and no more than " + maxArgs) + " argument(s)" : "");
        }
    }

    private void visitReturn(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType jsType = getJSType(t.getEnclosingFunction());
        if (jsType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
            com.google.javascript.rhino.jstype.JSType returnType = functionType.getReturnType();
            if (returnType == null) {
                returnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
            }
            com.google.javascript.rhino.Node valueNode = n.getFirstChild();
            com.google.javascript.rhino.jstype.JSType actualReturnType;
            if (valueNode == null) {
                actualReturnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                valueNode = n;
            } else {
                actualReturnType = getJSType(valueNode);
            }
            validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType, "inconsistent return type");
        }
    }

    private void visitBinaryOperator(int op, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(left);
        com.google.javascript.rhino.Node right = n.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(right);
        switch (op) {
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.URSH :
                if (!leftType.matchesInt32Context()) {
                    report(t, left, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), leftType.toString());
                }
                if (!rightType.matchesUint32Context()) {
                    report(t, right, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), rightType.toString());
                }
                break;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.SUB :
                validator.expectNumber(t, left, leftType, "left operand");
                validator.expectNumber(t, right, rightType, "right operand");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITOR :
                validator.expectBitwiseable(t, left, leftType, "bad left operand to bitwise operator");
                validator.expectBitwiseable(t, right, rightType, "bad right operand to bitwise operator");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ADD :
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(op));
        }
        ensureTyped(t, n);
    }

    private void checkEnumAlias(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.JSDocInfo declInfo, com.google.javascript.rhino.Node value) {
        if ((declInfo == null) || (!declInfo.hasEnumParameterType())) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
        if (!valueType.isEnumType()) {
            return;
        }
        com.google.javascript.rhino.jstype.EnumType valueEnumType = valueType.toMaybeEnumType();
        com.google.javascript.rhino.jstype.JSType valueEnumPrimitiveType = valueEnumType.getElementsType().getPrimitiveType();
        validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry), "incompatible enum element types");
    }

    private com.google.javascript.rhino.jstype.JSType getJSType(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType jsType = n.getJSType();
        if (jsType == null) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        } else {
            return jsType;
        }
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        ensureTyped(t, n, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSTypeNative type) {
        ensureTyped(t, n, getNativeType(type));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type) {
        com.google.common.base.Preconditions.checkState(((!n.isFunction()) || type.isFunctionType()) || type.isUnknownType());
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info != null) {
            if (info.hasType()) {
                com.google.javascript.rhino.jstype.JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);
                validator.expectCanCast(t, n, infoType, type);
                type = infoType;
            }
            if (info.isImplicitCast() && (!inExterns)) {
                java.lang.String propName = (n.isGetProp()) ? n.getLastChild().getString() : "(missing)";
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, propName));
            }
        }
        if (n.getJSType() == null) {
            n.setJSType(type);
        }
    }

    double getTypedPercent() {
        int total = (nullCount + unknownCount) + typedCount;
        return total == 0 ? 0.0 : (100.0 * typedCount) / total;
    }

    private com.google.javascript.rhino.jstype.JSType getNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return typeRegistry.getNativeType(typeId);
    }
}
[113556] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659814047104
GPR[SSUN]-1659814047104
-1797850673
GPR[ESUN]-1659814047404
GPR[SSUN]-1659814047404
-1966087783
GPR[SPVATF]-1659814047609
GPR[EPVATF]-1659814047676
[114129] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814047677
GPR[SSUN]-1659814047677
-1966087783
GPR[SPVATF]-1659814047909
GPR[EPVATF]-1659814047975
[114428] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814047976
GPR[SSUN]-1659814047976
-1966087783
GPR[SPVATF]-1659814048257
GPR[EPVATF]-1659814048333
[114785] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814048333
GPR[SSUN]-1659814048333
-1966087783
GPR[SPVATF]-1659814048755
GPR[EPVATF]-1659814048850
[115302] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814048850
GPR[SSUN]-1659814048850
-1966087783
GPR[SPVATF]-1659814049066
GPR[EPVATF]-1659814049130
[115582] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814049130
GPR[SSUN]-1659814049130
-1966087783
GPR[SPVATF]-1659814049338
GPR[EPVATF]-1659814049405
[115857] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814049405
GPR[SSUN]-1659814049405
-1966087783
GPR[SPVATF]-1659814049614
GPR[EPVATF]-1659814049683
[116135] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814049683
GPR[EPVATF]-1659814049749
[116201] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814049749
GPR[SSUN]-1659814049749
-1966087783
GPR[ESUN]-1659814049949
GPR[SSUN]-1659814049949
-132053243
GPR[SPVATF]-1659814050149
GPR[EPVATF]-1659814050218
[116670] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814050218
GPR[SSUN]-1659814050218
-132053243
GPR[SPVATF]-1659814050417
GPR[EPVATF]-1659814050483
[116935] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814050483
GPR[SSUN]-1659814050483
-132053243
GPR[SPVATF]-1659814050682
GPR[EPVATF]-1659814050749
[117202] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814050750
GPR[SSUN]-1659814050750
1455562524
GPR[ESUN]-1659814050965
GPR[SSUN]-1659814050965
-132053243
GPR[SPVATF]-1659814051169
GPR[EPVATF]-1659814051238
[117690] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814051238
GPR[EPVATF]-1659814051302
[117754] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814051302
GPR[SSUN]-1659814051302
-132053243
GPR[ESUN]-1659814051523
GPR[SSUN]-1659814051523
-132053243
GPR[ESUN]-1659814051729
GPR[SSUN]-1659814051729
-132053243
GPR[SPVATF]-1659814051932
GPR[EPVATF]-1659814051998
[118450] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814051998
GPR[EPVATF]-1659814052063
[118515] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814052064
GPR[SSUN]-1659814052064
-132053243
GPR[ESUN]-1659814052251
GPR[SSUN]-1659814052251
-132053243
GPR[ESUN]-1659814052455
GPR[SSUN]-1659814052455
-132053243
GPR[ESUN]-1659814052654
GPR[SSUN]-1659814052654
-132053243
GPR[SPVATF]-1659814052856
GPR[EPVATF]-1659814052921
[119373] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814052921
GPR[EPVATF]-1659814052985
[119437] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814052985
GPR[SSUN]-1659814052986
-132053243
GPR[SPVATF]-1659814053225
GPR[EPVATF]-1659814053291
[119743] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814053291
GPR[SSUN]-1659814053291
-132053243
GPR[SPVATF]-1659814053622
GPR[EPVATF]-1659814053719
[120171] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814053719
GPR[SSUN]-1659814053719
-132053243
GPR[SPVATF]-1659814054136
GPR[EPVATF]-1659814054230
[120682] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814054230
GPR[SSUN]-1659814054230
-132053243
GPR[SPVATF]-1659814054495
GPR[EPVATF]-1659814054560
[121012] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814054560
GPR[EPVATF]-1659814054629
[121081] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814054629
GPR[SSUN]-1659814054629
-1797850673
GPR[ESUN]-1659814055002
GPR[SSUN]-1659814055002
-1797850673
GPR[SPVATF]-1659814055348
GPR[EPVATF]-1659814056872
GPR[SPS]-1659814056872
[124116] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1647.
GPR[EPS]-1659814057664
GPR[SPVATF]-1659814057664
GPR[EPVATF]-1659814059264
GPR[SPS]-1659814059264
[126674] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1647.
GPR[EPS]-1659814060222
GPR[ESUN]-1659814060222
GPR[SSUN]-1659814060222
-1464408086
GPR[ESUN]-1659814060516
GPR[SSUN]-1659814060517
-1464408086
GPR[SPVATF]-1659814060797
GPR[EPVATF]-1659814062385
GPR[SPS]-1659814062385
GPR[EPS]-1659814071298
GPR[ESUN]-1659814071298
GPR[SSUN]-1659814071298
-1464408086
GPR[SPVATF]-1659814071591
GPR[EPVATF]-1659814073236
GPR[SPS]-1659814073236
GPR[EPS]-1659814089224
GPR[SPVATF]-1659814089224
GPR[EPVATF]-1659814090873
GPR[SPS]-1659814090873
GPR[EPS]-1659814111986
GPR[ESUN]-1659814111986
GPR[SSUN]-1659814111986
-1464408086
GPR[ESUN]-1659814112284
GPR[SSUN]-1659814112284
-1053444620
GPR[SPVATF]-1659814112508
GPR[EPVATF]-1659814115108
GPR[SPS]-1659814115108
[183438] ERROR ConstraintModelBuilder - Unable to compile the change: 
class NamedType extends com.google.javascript.rhino.jstype.ProxyObjectType {
    private static final long serialVersionUID = 1L;

    private final java.lang.String reference;

    private final java.lang.String sourceName;

    private final int lineno;

    private final int charno;

    private com.google.common.base.Predicate<com.google.javascript.rhino.jstype.JSType> validator;

    private java.util.List<com.google.javascript.rhino.jstype.NamedType.PropertyContinuation> propertyContinuations = null;

    NamedType(com.google.javascript.rhino.jstype.JSTypeRegistry registry, java.lang.String reference, java.lang.String sourceName, int lineno, int charno) {
        super(registry, registry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
        com.google.common.base.Preconditions.checkNotNull(reference);
        this.reference = reference;
        this.sourceName = sourceName;
        this.lineno = lineno;
        this.charno = charno;
    }

    @java.lang.Override
    boolean defineProperty(java.lang.String propertyName, com.google.javascript.rhino.jstype.JSType type, boolean inferred, com.google.javascript.rhino.Node propertyNode) {
        if (!isResolved()) {
            if (propertyContinuations == null) {
                propertyContinuations = com.google.common.collect.Lists.newArrayList();
            }
            propertyContinuations.add(new com.google.javascript.rhino.jstype.NamedType.PropertyContinuation(propertyName, type, inferred, propertyNode));
            return true;
        } else {
            return super.defineProperty(propertyName, type, inferred, propertyNode);
        }
    }

    private void finishPropertyContinuations() {
        com.google.javascript.rhino.jstype.ObjectType referencedObjType = getReferencedObjTypeInternal();
        if ((referencedObjType != null) && (!referencedObjType.isUnknownType())) {
            if (propertyContinuations != null) {
                for (com.google.javascript.rhino.jstype.NamedType.PropertyContinuation c : propertyContinuations) {
                    c.commit(this);
                }
            }
        }
        propertyContinuations = null;
    }

    public com.google.javascript.rhino.jstype.JSType getReferencedType() {
        return getReferencedTypeInternal();
    }

    @java.lang.Override
    public java.lang.String getReferenceName() {
        return reference;
    }

    @java.lang.Override
    java.lang.String toStringHelper(boolean forAnnotations) {
        return reference;
    }

    @java.lang.Override
    public boolean hasReferenceName() {
        return true;
    }

    @java.lang.Override
    boolean isNamedType() {
        return true;
    }

    @java.lang.Override
    public boolean isNominalType() {
        return true;
    }

    @java.lang.Override
    public int hashCode() {
        return reference.hashCode();
    }

    @java.lang.Override
    com.google.javascript.rhino.jstype.JSType resolveInternal(com.google.javascript.rhino.ErrorReporter t, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> enclosing) {
        boolean resolved = resolveViaRegistry(t, enclosing);
        if (detectInheritanceCycle()) {
            handleTypeCycle(t);
        }
        if (resolved) {
            super.resolveInternal(t, enclosing);
            finishPropertyContinuations();
            return registry.isLastGeneration() ? getReferencedType() : this;
        }
        resolveViaProperties(t, enclosing);
        if (detectInheritanceCycle()) {
            handleTypeCycle(t);
        }
        super.resolveInternal(t, enclosing);
        if (isResolved()) {
            finishPropertyContinuations();
        }
        return registry.isLastGeneration() ? getReferencedType() : this;
    }

    private boolean resolveViaRegistry(com.google.javascript.rhino.ErrorReporter t, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> enclosing) {
        com.google.javascript.rhino.jstype.JSType type = registry.getType(reference);
        if (type != null) {
            setReferencedAndResolvedType(type, t, enclosing);
            return true;
        }
        return false;
    }

    private void resolveViaProperties(com.google.javascript.rhino.ErrorReporter t, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> enclosing) {
        com.google.javascript.rhino.jstype.JSType value = lookupViaProperties(t, enclosing);
        if (((value != null) && value.isFunctionType()) && (value.isConstructor() || value.isInterface())) {
            com.google.javascript.rhino.jstype.FunctionType functionType = value.toMaybeFunctionType();
            setReferencedAndResolvedType(functionType.getInstanceType(), t, enclosing);
        } else if ((value != null) && value.isNoObjectType()) {
            setReferencedAndResolvedType(registry.getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing);
        } else if (value instanceof com.google.javascript.rhino.jstype.EnumType) {
            setReferencedAndResolvedType(((com.google.javascript.rhino.jstype.EnumType) (value)).getElementsType(), t, enclosing);
        } else {
            handleUnresolvedType(t, (value == null) || value.isUnknownType());
        }
    }

    private com.google.javascript.rhino.jstype.JSType lookupViaProperties(com.google.javascript.rhino.ErrorReporter t, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> enclosing) {
        java.lang.String[] componentNames = reference.split("\\.", -1);
        if (componentNames[0].length() == 0) {
            return null;
        }
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slot = enclosing.getSlot(componentNames[0]);
        if (slot == null) {
            return null;
        }
        com.google.javascript.rhino.jstype.JSType slotType = slot.getType();
        if (((slotType == null) || slotType.isAllType()) || slotType.isNoType()) {
            return null;
        }
        com.google.javascript.rhino.jstype.JSType value = getTypedefType(t, slot, componentNames[0]);
        if (value == null) {
            return null;
        }
        for (int i = 1; i < componentNames.length; i++) {
            com.google.javascript.rhino.jstype.ObjectType parentClass = com.google.javascript.rhino.jstype.ObjectType.cast(value);
            if (parentClass == null) {
                return null;
            }
            if (componentNames[i].length() == 0) {
                return null;
            }
            value = parentClass.getPropertyType(componentNames[i]);
        }
        return value;
    }

    private void setReferencedAndResolvedType(com.google.javascript.rhino.jstype.JSType type, com.google.javascript.rhino.ErrorReporter t, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> enclosing) {
        if (validator != null) {
            validator.apply(type);
        }
        setReferencedType(type);
        checkEnumElementCycle(t);
        checkProtoCycle(t);
        setResolvedTypeInternal(getReferencedType());
    }

    private void handleTypeCycle(com.google.javascript.rhino.ErrorReporter t) {
        setReferencedType(registry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
        t.warning("Cycle detected in inheritance chain of type " + reference, sourceName, lineno, charno);
        setResolvedTypeInternal(getReferencedType());
    }

    private void checkEnumElementCycle(com.google.javascript.rhino.ErrorReporter t) {
        com.google.javascript.rhino.jstype.JSType referencedType = getReferencedType();
        if ((referencedType instanceof com.google.javascript.rhino.jstype.EnumElementType) && (((com.google.javascript.rhino.jstype.EnumElementType) (referencedType)).getPrimitiveType() == this)) {
            handleTypeCycle(t);
        }
    }

    private void checkProtoCycle(com.google.javascript.rhino.ErrorReporter t) {
        com.google.javascript.rhino.jstype.JSType referencedType = getReferencedType();
        if (referencedType == this) {
            handleTypeCycle(t);
        }
    }

    private void handleUnresolvedType(com.google.javascript.rhino.ErrorReporter t, boolean ignoreForwardReferencedTypes) {
        if (registry.isLastGeneration()) {
            boolean isForwardDeclared = ignoreForwardReferencedTypes && registry.isForwardDeclaredType(reference);
            if ((!isForwardDeclared) && registry.isLastGeneration()) {
                t.warning("Bad type annotation. Unknown type " + reference, sourceName, lineno, charno);
            } else {
                setReferencedType(registry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.NO_RESOLVED_TYPE));
                if (registry.isLastGeneration() && (validator != null)) {
                    validator.apply(getReferencedType());
                }
            }
            setResolvedTypeInternal(getReferencedType());
        } else {
            setResolvedTypeInternal(this);
        }
    }

    com.google.javascript.rhino.jstype.JSType getTypedefType(com.google.javascript.rhino.ErrorReporter t, com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slot, java.lang.String name) {
        com.google.javascript.rhino.jstype.JSType type = slot.getType();
        if (type != null) {
            return type;
        }
        handleUnresolvedType(t, true);
        return null;
    }

    @java.lang.Override
    public boolean setValidator(com.google.common.base.Predicate<com.google.javascript.rhino.jstype.JSType> validator) {
        if (this.isResolved()) {
            return super.setValidator(validator);
        } else {
            this.validator = validator;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(11).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("com.google.javascript.rhino.jstype.NamedType.this.lineno",com.google.javascript.rhino.jstype.NamedType.this.lineno);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("com.google.javascript.rhino.jstype.NamedType.this.reference",com.google.javascript.rhino.jstype.NamedType.this.reference);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("com.google.javascript.rhino.jstype.NamedType.this.propertyContinuations",com.google.javascript.rhino.jstype.NamedType.this.propertyContinuations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("com.google.javascript.rhino.jstype.NamedType.this.charno",com.google.javascript.rhino.jstype.NamedType.this.charno);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("com.google.javascript.rhino.jstype.NamedType.this.sourceName",com.google.javascript.rhino.jstype.NamedType.this.sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("validator",validator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("com.google.javascript.rhino.jstype.NamedType.this.validator",com.google.javascript.rhino.jstype.NamedType.this.validator);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectionEnds();
            }
            if (runtimeAngelicValue)
                return true;

        }
    }

    private static final class PropertyContinuation {
        private final java.lang.String propertyName;

        private final com.google.javascript.rhino.jstype.JSType type;

        private final boolean inferred;

        private final com.google.javascript.rhino.Node propertyNode;

        private PropertyContinuation(java.lang.String propertyName, com.google.javascript.rhino.jstype.JSType type, boolean inferred, com.google.javascript.rhino.Node propertyNode) {
            this.propertyName = propertyName;
            this.type = type;
            this.inferred = inferred;
            this.propertyNode = propertyNode;
        }

        void commit(com.google.javascript.rhino.jstype.ObjectType target) {
            target.defineProperty(propertyName, type, inferred, propertyNode);
        }
    }
}
[183438] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659814116986
GPR[SSUN]-1659814116987
-1053444620
GPR[SPVATF]-1659814117266
GPR[EPVATF]-1659814118869
GPR[SPS]-1659814118869
[186002] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:380.
GPR[EPS]-1659814119550
GPR[ESUN]-1659814119550
GPR[SSUN]-1659814119550
-1053444620
GPR[SPVATF]-1659814119760
GPR[EPVATF]-1659814121406
GPR[SPS]-1659814121406
[188407] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:377.
GPR[EPS]-1659814121955
GPR[ESUN]-1659814121955
GPR[SSUN]-1659814121955
-1053444620
GPR[SPVATF]-1659814122167
GPR[EPVATF]-1659814123882
GPR[SPS]-1659814123882
[191171] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:345.
GPR[EPS]-1659814124719
GPR[ESUN]-1659814124719
GPR[SSUN]-1659814124719
-132053243
GPR[ESUN]-1659814125152
GPR[SSUN]-1659814125152
-132053243
GPR[SPVATF]-1659814125473
GPR[EPVATF]-1659814125541
[191994] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814125542
GPR[EPVATF]-1659814125608
[192060] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814125608
GPR[SSUN]-1659814125608
-132053243
GPR[ESUN]-1659814125806
GPR[SSUN]-1659814125806
-46850221
GPR[ESUN]-1659814126058
GPR[SSUN]-1659814126058
-46850221
GPR[SPVATF]-1659814126297
GPR[EPVATF]-1659814127988
GPR[SPS]-1659814127988
[195108] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:463.
GPR[EPS]-1659814128656
GPR[SPVATF]-1659814128656
GPR[EPVATF]-1659814130458
GPR[SPS]-1659814130458
[197694] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:463.
GPR[EPS]-1659814131242
GPR[ESUN]-1659814131243
GPR[SSUN]-1659814131243
-1251822497
GPR[SPVATF]-1659814131457
GPR[EPVATF]-1659814133371
GPR[SPS]-1659814133371
[200124] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class JSDocInfoBuilder {
    private com.google.javascript.rhino.JSDocInfo currentInfo;

    private boolean populated = false;

    private boolean parseDocumentation = false;

    private com.google.javascript.rhino.JSDocInfo.Marker currentMarker = null;

    public JSDocInfoBuilder(boolean parseDocumentation) {
        this.currentInfo = new com.google.javascript.rhino.JSDocInfo(parseDocumentation);
        this.parseDocumentation = parseDocumentation;
    }

    public void recordOriginalCommentString(java.lang.String sourceComment) {
        if (parseDocumentation) {
            currentInfo.setOriginalCommentString(sourceComment);
        }
    }

    public boolean shouldParseDocumentation() {
        return parseDocumentation;
    }

    public boolean isPopulated() {
        return populated;
    }

    public boolean isPopulatedWithFileOverview() {
        return isPopulated() && ((currentInfo.hasFileOverview() || currentInfo.isExterns()) || currentInfo.isNoCompile());
    }

    public boolean isDescriptionRecorded() {
        return currentInfo.getDescription() != null;
    }

    public com.google.javascript.rhino.JSDocInfo build(com.google.javascript.rhino.Node associatedNode) {
        if (populated) {
            com.google.javascript.rhino.JSDocInfo built = currentInfo;
            built.setAssociatedNode(associatedNode);
            com.google.javascript.rhino.JSDocInfoBuilder.populateDefaults(built);
            populated = false;
            currentInfo = new com.google.javascript.rhino.JSDocInfo(this.parseDocumentation);
            return built;
        } else {
            return null;
        }
    }

    private static void populateDefaults(com.google.javascript.rhino.JSDocInfo info) {
        if (info.getVisibility() == null) {
            info.setVisibility(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED);
        }
    }

    public void markAnnotation(java.lang.String annotation, int lineno, int charno) {
        com.google.javascript.rhino.JSDocInfo.Marker marker = currentInfo.addMarker();
        if (marker != null) {
            com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition position = new com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition();
            position.setItem(annotation);
            position.setPositionInformation(lineno, charno, lineno, charno + annotation.length());
            marker.setAnnotation(position);
            populated = true;
        }
        currentMarker = marker;
    }

    public void markText(java.lang.String text, int startLineno, int startCharno, int endLineno, int endCharno) {
        if (currentMarker != null) {
            com.google.javascript.rhino.JSDocInfo.StringPosition position = new com.google.javascript.rhino.JSDocInfo.StringPosition();
            position.setItem(text);
            position.setPositionInformation(startLineno, startCharno, endLineno, endCharno);
            currentMarker.setDescription(position);
        }
    }

    public void markTypeNode(com.google.javascript.rhino.Node typeNode, int lineno, int startCharno, int endLineno, int endCharno, boolean hasLC) {
        if (currentMarker != null) {
            com.google.javascript.rhino.JSDocInfo.TypePosition position = new com.google.javascript.rhino.JSDocInfo.TypePosition();
            position.setItem(typeNode);
            position.setHasBrackets(hasLC);
            position.setPositionInformation(lineno, startCharno, endLineno, endCharno);
            currentMarker.setType(position);
        }
    }

    @java.lang.Deprecated
    public void markName(java.lang.String name, int lineno, int charno) {
        markName(name, null, lineno, charno);
    }

    public void markName(java.lang.String name, com.google.javascript.rhino.jstype.StaticSourceFile file, int lineno, int charno) {
        if (currentMarker != null) {
            com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition position = new com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition();
            position.setItem(name);
            position.setPositionInformation(lineno, charno, lineno, charno + name.length());
            currentMarker.setName(position);
            com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodePos = new com.google.javascript.rhino.JSDocInfo.NamePosition();
            com.google.javascript.rhino.Node node = com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, name, lineno, charno);
            node.setLength(name.length());
            node.setStaticSourceFile(file);
            nodePos.setItem(node);
            nodePos.setPositionInformation(lineno, charno, lineno, charno + name.length());
            currentMarker.setNameNode(nodePos);
        }
    }

    public boolean recordBlockDescription(java.lang.String description) {
        populated = true;
        return currentInfo.documentBlock(description);
    }

    public boolean recordVisibility(com.google.javascript.rhino.JSDocInfo.Visibility visibility) {
        if (currentInfo.getVisibility() == null) {
            populated = true;
            currentInfo.setVisibility(visibility);
            return true;
        } else {
            return false;
        }
    }

    public boolean recordParameter(java.lang.String parameterName, com.google.javascript.rhino.JSTypeExpression type) {
        if ((!hasAnySingletonTypeTags()) && currentInfo.declareParam(type, parameterName)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordParameterDescription(java.lang.String parameterName, java.lang.String description) {
        if (currentInfo.documentParam(parameterName, description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordTemplateTypeNames(java.util.List<java.lang.String> names) {
        if (currentInfo.declareTemplateTypeNames(names)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordThrowType(com.google.javascript.rhino.JSTypeExpression type) {
        if (!hasAnySingletonTypeTags()) {
            currentInfo.declareThrows(type);
            populated = true;
            return true;
        }
        return false;
    }

    public boolean recordThrowDescription(com.google.javascript.rhino.JSTypeExpression type, java.lang.String description) {
        if (currentInfo.documentThrows(type, description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean addAuthor(java.lang.String author) {
        if (currentInfo.documentAuthor(author)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean addReference(java.lang.String reference) {
        if (currentInfo.documentReference(reference)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConsistentIdGenerator() {
        if (!currentInfo.isConsistentIdGenerator()) {
            currentInfo.setConsistentIdGenerator(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordStableIdGenerator() {
        if (!currentInfo.isStableIdGenerator()) {
            currentInfo.setStableIdGenerator(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordVersion(java.lang.String version) {
        if (currentInfo.documentVersion(version)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDeprecationReason(java.lang.String reason) {
        if (currentInfo.setDeprecationReason(reason)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordSuppressions(java.util.Set<java.lang.String> suppressions) {
        if (currentInfo.setSuppressions(suppressions)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordModifies(java.util.Set<java.lang.String> modifies) {
        if ((!hasAnySingletonSideEffectTags()) && currentInfo.setModifies(modifies)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordTypedef(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setTypedefType(type);
            populated = true;
            return true;
        }
        return false;
    }

    public boolean recordIdGenerator() {
        if (!currentInfo.isIdGenerator()) {
            currentInfo.setIdGenerator(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordReturnType(com.google.javascript.rhino.JSTypeExpression jsType) {
        if (((jsType != null) && (currentInfo.getReturnType() == null)) && (!hasAnySingletonTypeTags())) {
            currentInfo.setReturnType(jsType);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordReturnDescription(java.lang.String description) {
        if (currentInfo.documentReturn(description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDefineType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((((type != null) && (!currentInfo.isConstant())) && (!currentInfo.isDefine())) && recordType(type)) {
            currentInfo.setDefine(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordEnumParameterType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setEnumParameterType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordThisType(com.google.javascript.rhino.JSTypeExpression type) {
        if (((type != null) && (!hasAnySingletonTypeTags())) && (!currentInfo.hasThisType())) {
            currentInfo.setThisType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordBaseType(com.google.javascript.rhino.JSTypeExpression jsType) {
        if (((jsType != null) && (!hasAnySingletonTypeTags())) && (!currentInfo.hasBaseType())) {
            currentInfo.setBaseType(jsType);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConstancy() {
        if (!currentInfo.isConstant()) {
            currentInfo.setConstant(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDescription(java.lang.String description) {
        if ((description != null) && (currentInfo.getDescription() == null)) {
            currentInfo.setDescription(description);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordMeaning(java.lang.String meaning) {
        if ((meaning != null) && (currentInfo.getMeaning() == null)) {
            currentInfo.setMeaning(meaning);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordFileOverview(java.lang.String description) {
        if (currentInfo.documentFileOverview(description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordHiddenness() {
        if (!currentInfo.isHidden()) {
            currentInfo.setHidden(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoCompile() {
        if (!currentInfo.isNoCompile()) {
            currentInfo.setNoCompile(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoTypeCheck() {
        if (!currentInfo.isNoTypeCheck()) {
            currentInfo.setNoCheck(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConstructor() {
        if (((!hasAnySingletonTypeTags()) && (!currentInfo.isConstructor())) && (!currentInfo.isInterface())) {
            currentInfo.setConstructor(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isConstructorRecorded() {
        return currentInfo.isConstructor();
    }

    public boolean recordStruct() {
        if (((hasAnySingletonTypeTags() || currentInfo.isInterface()) || currentInfo.makesDicts()) || currentInfo.makesStructs()) {
            return false;
        }
        currentInfo.setStruct();
        populated = true;
        return true;
    }

    public boolean recordDict() {
        if (((hasAnySingletonTypeTags() || currentInfo.isInterface()) || currentInfo.makesDicts()) || currentInfo.makesStructs()) {
            return false;
        }
        currentInfo.setDict();
        populated = true;
        return true;
    }

    public boolean recordJavaDispatch() {
        if (!currentInfo.isJavaDispatch()) {
            currentInfo.setJavaDispatch(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isJavaDispatch() {
        return currentInfo.isJavaDispatch();
    }

    public boolean recordPreserveTry() {
        if (!currentInfo.shouldPreserveTry()) {
            currentInfo.setShouldPreserveTry(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordOverride() {
        if (!currentInfo.isOverride()) {
            currentInfo.setOverride(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoAlias() {
        if (!currentInfo.isNoAlias()) {
            currentInfo.setNoAlias(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDeprecated() {
        if (!currentInfo.isDeprecated()) {
            currentInfo.setDeprecated(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordInterface() {
        if ((((hasAnySingletonTypeTags() || currentInfo.makesStructs()) || currentInfo.makesDicts()) || currentInfo.isConstructor()) || currentInfo.isInterface()) {
            return false;
        }
        currentInfo.setInterface(true);
        populated = true;
        return true;
    }

    public boolean recordExport() {
        if (!currentInfo.isExport()) {
            currentInfo.setExport(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExpose() {
        if (!currentInfo.isExpose()) {
            currentInfo.setExpose(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoShadow() {
        if (!currentInfo.isNoShadow()) {
            currentInfo.setNoShadow(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordImplicitCast() {
        if (!currentInfo.isImplicitCast()) {
            currentInfo.setImplicitCast(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoSideEffects() {
        if ((!hasAnySingletonSideEffectTags()) && (!currentInfo.isNoSideEffects())) {
            currentInfo.setNoSideEffects(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExterns() {
        if (!currentInfo.isExterns()) {
            currentInfo.setExterns(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isInterfaceRecorded() {
        return currentInfo.isInterface();
    }

    public boolean hasParameter(java.lang.String name) {
        return currentInfo.hasParameter(name);
    }

    public boolean recordImplementedInterface(com.google.javascript.rhino.JSTypeExpression interfaceName) {
        if (currentInfo.addImplementedInterface(interfaceName)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExtendedInterface(com.google.javascript.rhino.JSTypeExpression interfaceType) {
        if (currentInfo.addExtendedInterface(interfaceType)) {
            populated = true;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(17).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.populated",com.google.javascript.rhino.JSDocInfoBuilder.this.populated);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("interfaceType",interfaceType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.parseDocumentation",com.google.javascript.rhino.JSDocInfoBuilder.this.parseDocumentation);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.currentMarker",com.google.javascript.rhino.JSDocInfoBuilder.this.currentMarker);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.currentInfo",com.google.javascript.rhino.JSDocInfoBuilder.this.currentInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectionEnds();
            }
            if (runtimeAngelicValue)
                return true;

        } else {
            return false;
        }
    }

    public boolean recordLends(java.lang.String name) {
        if (!hasAnyTypeRelatedTags()) {
            currentInfo.setLendsName(name);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    private boolean hasAnyTypeRelatedTags() {
        return (((((((currentInfo.isConstructor() || currentInfo.isInterface()) || (currentInfo.getParameterCount() > 0)) || currentInfo.hasReturnType()) || currentInfo.hasBaseType()) || (currentInfo.getExtendedInterfacesCount() > 0)) || (currentInfo.getLendsName() != null)) || currentInfo.hasThisType()) || hasAnySingletonTypeTags();
    }

    private boolean hasAnySingletonTypeTags() {
        return (currentInfo.hasType() || currentInfo.hasTypedefType()) || currentInfo.hasEnumParameterType();
    }

    private boolean hasAnySingletonSideEffectTags() {
        return currentInfo.isNoSideEffects() || currentInfo.hasModifies();
    }
}
[200125] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659814133673
GPR[SSUN]-1659814133673
-1251822497
GPR[SPVATF]-1659814133896
GPR[EPVATF]-1659814135868
GPR[SPS]-1659814135868
[203182] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:988.
GPR[EPS]-1659814136730
GPR[ESUN]-1659814136730
GPR[SSUN]-1659814136730
-1251822497
GPR[SPVATF]-1659814136935
GPR[EPVATF]-1659814139097
GPR[SPS]-1659814139097
[206083] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:987.
GPR[EPS]-1659814139631
GPR[ESUN]-1659814139631
GPR[SSUN]-1659814139631
-179796259
GPR[SPVATF]-1659814139899
GPR[EPVATF]-1659814142205
GPR[SPS]-1659814142205
[209456] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:997.
GPR[EPS]-1659814143004
GPR[SPVATF]-1659814143004
GPR[EPVATF]-1659814145456
GPR[SPS]-1659814145456
[213237] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:997.
GPR[EPS]-1659814146785
GPR[ESUN]-1659814146785
GPR[SSUN]-1659814146785
1508981886
GPR[ESUN]-1659814147133
GPR[SSUN]-1659814147133
1508981886
GPR[ESUN]-1659814147356
GPR[SSUN]-1659814147356
1508981886
GPR[SPVATF]-1659814147587
GPR[EPVATF]-1659814150054
GPR[SPS]-1659814150054
[217086] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1313.
GPR[EPS]-1659814150634
GPR[ESUN]-1659814150634
GPR[SSUN]-1659814150634
1508981886
GPR[SPVATF]-1659814150859
GPR[EPVATF]-1659814153388
GPR[SPS]-1659814153388
[220481] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1310.
GPR[EPS]-1659814154029
GPR[SPVATF]-1659814154029
GPR[EPVATF]-1659814156590
GPR[SPS]-1659814156590
[224336] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1310.
GPR[EPS]-1659814157884
GPR[ESUN]-1659814157884
GPR[SSUN]-1659814157884
1508981886
GPR[SPVATF]-1659814158095
GPR[EPVATF]-1659814160596
GPR[SPS]-1659814160596
[227610] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1308.
GPR[EPS]-1659814161158
GPR[ESUN]-1659814161158
GPR[SSUN]-1659814161158
1508981886
GPR[SPVATF]-1659814161456
GPR[EPVATF]-1659814164289
GPR[SPS]-1659814164289
[231311] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1307.
GPR[EPS]-1659814164859
GPR[SPVATF]-1659814164859
GPR[EPVATF]-1659814167359
GPR[SPS]-1659814167359
[234799] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1307.
GPR[EPS]-1659814168347
GPR[ESUN]-1659814168347
GPR[SSUN]-1659814168347
1508981886
GPR[SPVATF]-1659814168576
GPR[EPVATF]-1659814171072
GPR[SPS]-1659814171072
[238097] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1306.
GPR[EPS]-1659814171645
GPR[ESUN]-1659814171645
GPR[SSUN]-1659814171645
-1234646214
GPR[SPVATF]-1659814171877
GPR[EPVATF]-1659814174541
GPR[SPS]-1659814174541
[242445] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.ObjectType:574.
GPR[EPS]-1659814175993
GPR[SPVATF]-1659814175993
GPR[EPVATF]-1659814178506
GPR[SPS]-1659814178506
[246188] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.ObjectType:574.
GPR[EPS]-1659814179736
GPR[ESUN]-1659814179736
GPR[SSUN]-1659814179736
-132053243
GPR[SPVATF]-1659814179942
GPR[EPVATF]-1659814180013
[246466] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814180014
GPR[SSUN]-1659814180014
-132053243
GPR[SPVATF]-1659814180221
GPR[EPVATF]-1659814180295
[246747] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814180295
GPR[SSUN]-1659814180295
-132053243
GPR[SPVATF]-1659814180498
GPR[EPVATF]-1659814180568
[247020] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814180568
GPR[SSUN]-1659814180568
-132053243
GPR[SPVATF]-1659814180772
GPR[EPVATF]-1659814180841
[247293] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814180841
GPR[SSUN]-1659814180841
-132053243
GPR[SPVATF]-1659814181036
GPR[EPVATF]-1659814181103
[247555] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814181103
GPR[SSUN]-1659814181103
-132053243
GPR[ESUN]-1659814181312
GPR[SSUN]-1659814181312
-1966087783
GPR[ESUN]-1659814181519
GPR[SSUN]-1659814181519
-1966087783
GPR[SPVATF]-1659814181739
GPR[EPVATF]-1659814181813
[248265] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814181814
GPR[EPVATF]-1659814181885
[248337] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814181885
GPR[SSUN]-1659814181885
-1392609898
GPR[ESUN]-1659814182094
GPR[SSUN]-1659814182094
-1392609898
GPR[SPVATF]-1659814182299
GPR[EPVATF]-1659814184038
GPR[SPS]-1659814184038
[251398] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RhinoErrorReporter$OldRhinoErrorReporter:156.
GPR[EPS]-1659814184946
GPR[ESUN]-1659814184946
GPR[SSUN]-1659814184946
-1392609898
GPR[SPVATF]-1659814185154
GPR[EPVATF]-1659814186911
GPR[SPS]-1659814186911
[253957] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RhinoErrorReporter:131.
GPR[EPS]-1659814187505
GPR[ESUN]-1659814187505
GPR[SSUN]-1659814187505
79711797
GPR[ESUN]-1659814187758
GPR[SSUN]-1659814187758
-1392609898
GPR[ESUN]-1659814187972
GPR[SSUN]-1659814187972
-1392609898
GPR[SPVATF]-1659814188176
GPR[EPVATF]-1659814189991
GPR[SPS]-1659814189991
[257022] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RhinoErrorReporter:114.
GPR[EPS]-1659814190570
GPR[ESUN]-1659814190570
GPR[SSUN]-1659814190570
-1966087783
GPR[SPVATF]-1659814190775
GPR[EPVATF]-1659814190844
[257297] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659814190845
GPR[EPVATF]-1659814190938
[257390] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814190938
GPR[SSUN]-1659814190938
-1966087783
GPR[ESUN]-1659814191143
GPR[SSUN]-1659814191143
-1392609898
GPR[ESUN]-1659814191348
GPR[SSUN]-1659814191348
-1392609898
GPR[SPVATF]-1659814191578
GPR[EPVATF]-1659814193451
GPR[SPS]-1659814193451
[260700] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RhinoErrorReporter:130.
GPR[EPS]-1659814194248
GPR[SPVATF]-1659814194248
GPR[EPVATF]-1659814196677
GPR[SPS]-1659814196678
[263675] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RhinoErrorReporter:130.
GPR[EPS]-1659814197223
GPR[ESUN]-1659814197223
GPR[SSUN]-1659814197223
-1392609898
GPR[SPVATF]-1659814197420
GPR[EPVATF]-1659814199529
GPR[SPS]-1659814199529
[266626] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RhinoErrorReporter:129.
GPR[EPS]-1659814200174
GPR[ESUN]-1659814200174
GPR[SSUN]-1659814200174
-1053444620
GPR[ESUN]-1659814200377
GPR[SSUN]-1659814200377
-46850221
GPR[ESUN]-1659814200601
GPR[SSUN]-1659814200601
-1797850673
GPR[SPVATF]-1659814200859
GPR[EPVATF]-1659814203084
GPR[SPS]-1659814203084
GPR[EPS]-1659814208861
GPR[SPVATR]-1659814208861
[275313] INFO TestPatch - Applying patch: com.google.javascript.jscomp.TypeCheck:1656: PRECONDITION 1 < functionPrivateName.length()
[275707] INFO TestPatch - Running test suite to check the patch "1 < functionPrivateName.length()" is working
GPR[EPVATR]-1659814212107
[278559] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659814212107
[278568] INFO NoPol - --- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -1655,13 +1655,15 @@
       // Check whether the extended interfaces have any conflicts
-      if (functionType.getExtendedInterfacesCount() > 1) {
-        // Only check when extending more than one interfaces
-        HashMap<String, ObjectType> properties
-            = new HashMap<String, ObjectType>();
-        HashMap<String, ObjectType> currentProperties
-            = new HashMap<String, ObjectType>();
-        for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {
-          currentProperties.clear();
-          checkInterfaceConflictProperties(t, n, functionPrivateName,
-              properties, currentProperties, interfaceType);
-          properties.putAll(currentProperties);
+      if (1 < functionPrivateName.length()) {
+        if (functionType.getExtendedInterfacesCount() > 1) {
+          // Only check when extending more than one interfaces
+          HashMap<String, ObjectType> properties
+          = new HashMap<String, ObjectType>();
+          HashMap<String, ObjectType> currentProperties
+          = new HashMap<String, ObjectType>();
+          for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {
+            currentProperties.clear();
+            checkInterfaceConflictProperties(t, n, functionPrivateName,
+            properties, currentProperties, interfaceType);
+            properties.putAll(currentProperties);
+          }
         }

Saving patch at /experiment_home///results/Nopol/Closure/2/seed_260/patch_273794_3ts_1659814212116.diff
GPR[SPVATF]-1659814212118
GPR[EPVATF]-1659814214578
GPR[SPS]-1659814214578
GPR[EPS]-1659814244466
GPR[ESUN]-1659814244466
GPR[SSUN]-1659814244466
-1797850673
GPR[SPVATF]-1659814244911
GPR[EPVATF]-1659814247450
GPR[SPS]-1659814247450
[314941] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1646.
GPR[EPS]-1659814248489
GPR[ESUN]-1659814248489
GPR[SSUN]-1659814248489
-1464408086
GPR[SPVATF]-1659814248769
GPR[EPVATF]-1659814251328
GPR[SPS]-1659814251328
[318498] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionTypeBuilder:618.
GPR[EPS]-1659814252046
GPR[ESUN]-1659814252046
GPR[SSUN]-1659814252046
-1464408086
GPR[SPVATF]-1659814252410
GPR[EPVATF]-1659814255381
GPR[SPS]-1659814255381
GPR[EPS]-1659814261798
GPR[SPVATR]-1659814261798
[328250] INFO TestPatch - Applying patch: com.google.javascript.jscomp.FunctionTypeBuilder:638: PRECONDITION com.google.javascript.jscomp.FunctionTypeBuilder.this.extendedInterfaces.size() <= com.google.javascript.jscomp.FunctionTypeBuilder.this.fnName.length()
[328682] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.FunctionTypeBuilder.this.extendedInterfaces.size() <= com.google.javascript.jscomp.FunctionTypeBuilder.this.fnName.length()" is working
GPR[EPVATR]-1659814265200
[331652] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659814265200
[331658] INFO NoPol - --- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java
+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java
@@ -637,3 +637,5 @@
     if (extendedInterfaces != null) {
-      fnType.setExtendedInterfaces(extendedInterfaces);
+      if (com.google.javascript.jscomp.FunctionTypeBuilder.this.extendedInterfaces.size() <= com.google.javascript.jscomp.FunctionTypeBuilder.this.fnName.length()) {
+        fnType.setExtendedInterfaces(extendedInterfaces);
+      }
     }

Saving patch at /experiment_home///results/Nopol/Closure/2/seed_260/patch_326884_4ts_1659814265206.diff
GPR[ESUN]-1659814265206
GPR[SSUN]-1659814265206
-1464408086
GPR[SPVATF]-1659814265501
GPR[EPVATF]-1659814268073
GPR[SPS]-1659814268074
[335623] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionTypeBuilder:620.
GPR[EPS]-1659814269172
GPR[ESUN]-1659814269172
GPR[SSUN]-1659814269172
-1464408086
GPR[SPVATF]-1659814269769
GPR[EPVATF]-1659814272348
GPR[SPS]-1659814272348
[339532] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionTypeBuilder:617.
GPR[EPS]-1659814273080
GPR[SPVATF]-1659814273080
GPR[EPVATF]-1659814275709
GPR[SPS]-1659814275709
[342878] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionTypeBuilder:617.
GPR[EPS]-1659814276426
GPR[ESUN]-1659814276426
GPR[SSUN]-1659814276426
-1464408086
GPR[SPVATF]-1659814276687
GPR[EPVATF]-1659814279222
GPR[SPS]-1659814279222
[346391] ERROR ConstraintModelBuilder - Unable to compile the change: 
final class FunctionTypeBuilder {
    private final java.lang.String fnName;

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.CodingConvention codingConvention;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private final com.google.javascript.rhino.Node errorRoot;

    private final java.lang.String sourceName;

    private final com.google.javascript.jscomp.Scope scope;

    private com.google.javascript.jscomp.FunctionTypeBuilder.FunctionContents contents = com.google.javascript.jscomp.FunctionTypeBuilder.UnknownFunctionContents.get();

    private com.google.javascript.rhino.jstype.JSType returnType = null;

    private boolean returnTypeInferred = false;

    private java.util.List<com.google.javascript.rhino.jstype.ObjectType> implementedInterfaces = null;

    private java.util.List<com.google.javascript.rhino.jstype.ObjectType> extendedInterfaces = null;

    private com.google.javascript.rhino.jstype.ObjectType baseType = null;

    private com.google.javascript.rhino.jstype.JSType thisType = null;

    private boolean isConstructor = false;

    private boolean makesStructs = false;

    private boolean makesDicts = false;

    private boolean isInterface = false;

    private com.google.javascript.rhino.Node parametersNode = null;

    private com.google.common.collect.ImmutableList<java.lang.String> templateTypeNames = com.google.common.collect.ImmutableList.of();

    static final com.google.javascript.jscomp.DiagnosticType EXTENDS_WITHOUT_TYPEDEF = com.google.javascript.jscomp.DiagnosticType.warning("JSC_EXTENDS_WITHOUT_TYPEDEF", "@extends used without @constructor or @interface for {0}");

    static final com.google.javascript.jscomp.DiagnosticType EXTENDS_NON_OBJECT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_EXTENDS_NON_OBJECT", "{0} @extends non-object type {1}");

    static final com.google.javascript.jscomp.DiagnosticType RESOLVED_TAG_EMPTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_RESOLVED_TAG_EMPTY", "Could not resolve type in {0} tag of {1}");

    static final com.google.javascript.jscomp.DiagnosticType IMPLEMENTS_WITHOUT_CONSTRUCTOR = com.google.javascript.jscomp.DiagnosticType.warning("JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", "@implements used without @constructor or @interface for {0}");

    static final com.google.javascript.jscomp.DiagnosticType CONSTRUCTOR_REQUIRED = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONSTRUCTOR_REQUIRED", "{0} used without @constructor for {1}");

    static final com.google.javascript.jscomp.DiagnosticType VAR_ARGS_MUST_BE_LAST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_VAR_ARGS_MUST_BE_LAST", "variable length argument must be last");

    static final com.google.javascript.jscomp.DiagnosticType OPTIONAL_ARG_AT_END = com.google.javascript.jscomp.DiagnosticType.warning("JSC_OPTIONAL_ARG_AT_END", "optional arguments must be at the end");

    static final com.google.javascript.jscomp.DiagnosticType INEXISTANT_PARAM = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INEXISTANT_PARAM", "parameter {0} does not appear in {1}''s parameter list");

    static final com.google.javascript.jscomp.DiagnosticType TYPE_REDEFINITION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_TYPE_REDEFINITION", "attempted re-definition of type {0}\n" + ("found   : {1}\n" + "expected: {2}"));

    static final com.google.javascript.jscomp.DiagnosticType TEMPLATE_TYPE_DUPLICATED = com.google.javascript.jscomp.DiagnosticType.warning("JSC_TEMPLATE_TYPE_DUPLICATED", "Only one parameter type must be the template type");

    static final com.google.javascript.jscomp.DiagnosticType TEMPLATE_TYPE_EXPECTED = com.google.javascript.jscomp.DiagnosticType.warning("JSC_TEMPLATE_TYPE_EXPECTED", "The template type must be a parameter type");

    static final com.google.javascript.jscomp.DiagnosticType THIS_TYPE_NON_OBJECT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_THIS_TYPE_NON_OBJECT", "@this type of a function must be an object\n" + "Actual type: {0}");

    private class ExtendedTypeValidator implements com.google.common.base.Predicate<com.google.javascript.rhino.jstype.JSType> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.jstype.JSType type) {
            com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(type);
            if (objectType == null) {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_NON_OBJECT, fnName, type.toString());
                return false;
            } else if (objectType.isEmptyType()) {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.RESOLVED_TAG_EMPTY, "@extends", fnName);
                return false;
            } else if (objectType.isUnknownType()) {
                if (com.google.javascript.jscomp.FunctionTypeBuilder.hasMoreTagsToResolve(objectType)) {
                    return true;
                } else {
                    reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.RESOLVED_TAG_EMPTY, "@extends", fnName);
                    return false;
                }
            } else {
                return true;
            }
        }
    }

    private class ImplementedTypeValidator implements com.google.common.base.Predicate<com.google.javascript.rhino.jstype.JSType> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.jstype.JSType type) {
            com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(type);
            if (objectType == null) {
                reportError(com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, fnName);
                return false;
            } else if (objectType.isEmptyType()) {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.RESOLVED_TAG_EMPTY, "@implements", fnName);
                return false;
            } else if (objectType.isUnknownType()) {
                if (com.google.javascript.jscomp.FunctionTypeBuilder.hasMoreTagsToResolve(objectType)) {
                    return true;
                } else {
                    reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.RESOLVED_TAG_EMPTY, "@implements", fnName);
                    return false;
                }
            } else {
                return true;
            }
        }
    }

    FunctionTypeBuilder(java.lang.String fnName, com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.rhino.Node errorRoot, java.lang.String sourceName, com.google.javascript.jscomp.Scope scope) {
        com.google.common.base.Preconditions.checkNotNull(errorRoot);
        this.fnName = (fnName == null) ? "" : fnName;
        this.codingConvention = compiler.getCodingConvention();
        this.typeRegistry = compiler.getTypeRegistry();
        this.errorRoot = errorRoot;
        this.sourceName = sourceName;
        this.compiler = compiler;
        this.scope = scope;
    }

    com.google.javascript.jscomp.FunctionTypeBuilder setContents(@javax.annotation.Nullable
    com.google.javascript.jscomp.FunctionTypeBuilder.FunctionContents contents) {
        if (contents != null) {
            this.contents = contents;
        }
        return this;
    }

    com.google.javascript.jscomp.FunctionTypeBuilder inferFromOverriddenFunction(@javax.annotation.Nullable
    com.google.javascript.rhino.jstype.FunctionType oldType, @javax.annotation.Nullable
    com.google.javascript.rhino.Node paramsParent) {
        if (oldType == null) {
            return this;
        }
        returnType = oldType.getReturnType();
        returnTypeInferred = oldType.isReturnTypeInferred();
        if (paramsParent == null) {
            parametersNode = oldType.getParametersNode();
            if (parametersNode == null) {
                parametersNode = new com.google.javascript.rhino.jstype.FunctionParamBuilder(typeRegistry).build();
            }
        } else {
            com.google.javascript.rhino.jstype.FunctionParamBuilder paramBuilder = new com.google.javascript.rhino.jstype.FunctionParamBuilder(typeRegistry);
            java.util.Iterator<com.google.javascript.rhino.Node> oldParams = oldType.getParameters().iterator();
            boolean warnedAboutArgList = false;
            boolean oldParamsListHitOptArgs = false;
            for (com.google.javascript.rhino.Node currentParam = paramsParent.getFirstChild(); currentParam != null; currentParam = currentParam.getNext()) {
                if (oldParams.hasNext()) {
                    com.google.javascript.rhino.Node oldParam = oldParams.next();
                    com.google.javascript.rhino.Node newParam = paramBuilder.newParameterFromNode(oldParam);
                    oldParamsListHitOptArgs = (oldParamsListHitOptArgs || oldParam.isVarArgs()) || oldParam.isOptionalArg();
                    if ((currentParam.getNext() != null) && newParam.isVarArgs()) {
                        newParam.setVarArgs(false);
                        newParam.setOptionalArg(true);
                    }
                } else {
                    warnedAboutArgList |= addParameter(paramBuilder, typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam) || oldParamsListHitOptArgs, codingConvention.isVarArgsParameter(currentParam));
                }
            }
            while (oldParams.hasNext()) {
                paramBuilder.newOptionalParameterFromNode(oldParams.next());
            } 
            parametersNode = paramBuilder.build();
        }
        return this;
    }

    com.google.javascript.jscomp.FunctionTypeBuilder inferReturnType(@javax.annotation.Nullable
    com.google.javascript.rhino.JSDocInfo info) {
        if ((info != null) && info.hasReturnType()) {
            returnType = info.getReturnType().evaluate(scope, typeRegistry);
            returnTypeInferred = false;
        }
        return this;
    }

    com.google.javascript.jscomp.FunctionTypeBuilder inferInheritance(@javax.annotation.Nullable
    com.google.javascript.rhino.JSDocInfo info) {
        if (info != null) {
            isConstructor = info.isConstructor();
            makesStructs = info.makesStructs();
            makesDicts = info.makesDicts();
            isInterface = info.isInterface();
            if (makesStructs && (!isConstructor)) {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.CONSTRUCTOR_REQUIRED, "@struct", fnName);
            } else if (makesDicts && (!isConstructor)) {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.CONSTRUCTOR_REQUIRED, "@dict", fnName);
            }
            if (info.hasBaseType()) {
                if (isConstructor) {
                    com.google.javascript.rhino.jstype.JSType maybeBaseType = info.getBaseType().evaluate(scope, typeRegistry);
                    if ((maybeBaseType != null) && maybeBaseType.setValidator(new com.google.javascript.jscomp.FunctionTypeBuilder.ExtendedTypeValidator())) {
                        baseType = ((com.google.javascript.rhino.jstype.ObjectType) (maybeBaseType));
                    }
                } else {
                    reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_WITHOUT_TYPEDEF, fnName);
                }
            }
            if (info.getImplementedInterfaceCount() > 0) {
                if (isConstructor) {
                    implementedInterfaces = com.google.common.collect.Lists.newArrayList();
                    for (com.google.javascript.rhino.JSTypeExpression t : info.getImplementedInterfaces()) {
                        com.google.javascript.rhino.jstype.JSType maybeInterType = t.evaluate(scope, typeRegistry);
                        if ((maybeInterType != null) && maybeInterType.setValidator(new com.google.javascript.jscomp.FunctionTypeBuilder.ImplementedTypeValidator())) {
                            implementedInterfaces.add(((com.google.javascript.rhino.jstype.ObjectType) (maybeInterType)));
                        }
                    }
                } else if (isInterface) {
                    reportWarning(com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, fnName);
                } else {
                    reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.CONSTRUCTOR_REQUIRED, "@implements", fnName);
                }
            }
            if (isInterface) {
                extendedInterfaces = com.google.common.collect.Lists.newArrayList();
                for (com.google.javascript.rhino.JSTypeExpression t : info.getExtendedInterfaces()) {
                    com.google.javascript.rhino.jstype.JSType maybeInterfaceType = t.evaluate(scope, typeRegistry);
                    if ((maybeInterfaceType != null) && maybeInterfaceType.setValidator(new com.google.javascript.jscomp.FunctionTypeBuilder.ExtendedTypeValidator())) {
                        extendedInterfaces.add(((com.google.javascript.rhino.jstype.ObjectType) (maybeInterfaceType)));
                    }
                }
            }
        }
        return this;
    }

    com.google.javascript.jscomp.FunctionTypeBuilder inferThisType(com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType type) {
        inferThisType(info);
        if (thisType == null) {
            com.google.javascript.rhino.jstype.ObjectType objType = com.google.javascript.rhino.jstype.ObjectType.cast(type);
            if ((objType != null) && ((info == null) || (!info.hasType()))) {
                thisType = objType;
            }
        }
        return this;
    }

    com.google.javascript.jscomp.FunctionTypeBuilder inferThisType(com.google.javascript.rhino.JSDocInfo info) {
        com.google.javascript.rhino.jstype.JSType maybeThisType = null;
        if ((info != null) && info.hasThisType()) {
            maybeThisType = info.getThisType().evaluate(scope, typeRegistry).restrictByNotNullOrUndefined();
        }
        if (maybeThisType != null) {
            thisType = maybeThisType;
        }
        return this;
    }

    com.google.javascript.jscomp.FunctionTypeBuilder inferParameterTypes(com.google.javascript.rhino.JSDocInfo info) {
        com.google.javascript.rhino.Node lp = com.google.javascript.rhino.IR.paramList();
        for (java.lang.String name : info.getParameterNames()) {
            lp.addChildToBack(com.google.javascript.rhino.IR.name(name));
        }
        return inferParameterTypes(lp, info);
    }

    com.google.javascript.jscomp.FunctionTypeBuilder inferParameterTypes(@javax.annotation.Nullable
    com.google.javascript.rhino.Node argsParent, @javax.annotation.Nullable
    com.google.javascript.rhino.JSDocInfo info) {
        if (argsParent == null) {
            if (info == null) {
                return this;
            } else {
                return inferParameterTypes(info);
            }
        }
        com.google.javascript.rhino.Node oldParameterType = null;
        if (parametersNode != null) {
            oldParameterType = parametersNode.getFirstChild();
        }
        com.google.javascript.rhino.jstype.FunctionParamBuilder builder = new com.google.javascript.rhino.jstype.FunctionParamBuilder(typeRegistry);
        boolean warnedAboutArgList = false;
        java.util.Set<java.lang.String> allJsDocParams = (info == null) ? com.google.common.collect.Sets.<java.lang.String>newHashSet() : com.google.common.collect.Sets.newHashSet(info.getParameterNames());
        boolean foundTemplateType = false;
        boolean isVarArgs = false;
        for (com.google.javascript.rhino.Node arg : argsParent.children()) {
            java.lang.String argumentName = arg.getString();
            allJsDocParams.remove(argumentName);
            com.google.javascript.rhino.jstype.JSType parameterType = null;
            boolean isOptionalParam = isOptionalParameter(arg, info);
            isVarArgs = isVarArgsParameter(arg, info);
            if ((info != null) && info.hasParameterType(argumentName)) {
                parameterType = info.getParameterType(argumentName).evaluate(scope, typeRegistry);
            } else if ((oldParameterType != null) && (oldParameterType.getJSType() != null)) {
                parameterType = oldParameterType.getJSType();
                isOptionalParam = oldParameterType.isOptionalArg();
                isVarArgs = oldParameterType.isVarArgs();
            } else {
                parameterType = typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            }
            warnedAboutArgList |= addParameter(builder, parameterType, warnedAboutArgList, isOptionalParam, isVarArgs);
            if (oldParameterType != null) {
                oldParameterType = oldParameterType.getNext();
            }
        }
        if (!isVarArgs) {
            while ((oldParameterType != null) && (!isVarArgs)) {
                builder.newParameterFromNode(oldParameterType);
                oldParameterType = oldParameterType.getNext();
            } 
        }
        for (java.lang.String inexistentName : allJsDocParams) {
            reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.INEXISTANT_PARAM, inexistentName, fnName);
        }
        parametersNode = builder.build();
        return this;
    }

    private boolean isOptionalParameter(com.google.javascript.rhino.Node param, @javax.annotation.Nullable
    com.google.javascript.rhino.JSDocInfo info) {
        if (codingConvention.isOptionalParameter(param)) {
            return true;
        }
        java.lang.String paramName = param.getString();
        return ((info != null) && info.hasParameterType(paramName)) && info.getParameterType(paramName).isOptionalArg();
    }

    private boolean isVarArgsParameter(com.google.javascript.rhino.Node param, @javax.annotation.Nullable
    com.google.javascript.rhino.JSDocInfo info) {
        if (codingConvention.isVarArgsParameter(param)) {
            return true;
        }
        java.lang.String paramName = param.getString();
        return ((info != null) && info.hasParameterType(paramName)) && info.getParameterType(paramName).isVarArgs();
    }

    com.google.javascript.jscomp.FunctionTypeBuilder inferTemplateTypeName(@javax.annotation.Nullable
    com.google.javascript.rhino.JSDocInfo info) {
        if (info != null) {
            templateTypeNames = info.getTemplateTypeNames();
            typeRegistry.setTemplateTypeNames(templateTypeNames);
        }
        return this;
    }

    private boolean addParameter(com.google.javascript.rhino.jstype.FunctionParamBuilder builder, com.google.javascript.rhino.jstype.JSType paramType, boolean warnedAboutArgList, boolean isOptional, boolean isVarArgs) {
        boolean emittedWarning = false;
        if (isOptional) {
            if ((!builder.addOptionalParams(paramType)) && (!warnedAboutArgList)) {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.VAR_ARGS_MUST_BE_LAST);
                emittedWarning = true;
            }
        } else if (isVarArgs) {
            if ((!builder.addVarArgs(paramType)) && (!warnedAboutArgList)) {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.VAR_ARGS_MUST_BE_LAST);
                emittedWarning = true;
            }
        } else if ((!builder.addRequiredParams(paramType)) && (!warnedAboutArgList)) {
            if (builder.hasVarArgs()) {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.VAR_ARGS_MUST_BE_LAST);
            } else {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.OPTIONAL_ARG_AT_END);
            }
            emittedWarning = true;
        }
        return emittedWarning;
    }

    com.google.javascript.rhino.jstype.FunctionType buildAndRegister() {
        if (returnType == null) {
            if (((!contents.mayHaveNonEmptyReturns()) && (!contents.mayHaveSingleThrow())) && (!contents.mayBeFromExterns())) {
                returnType = typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                returnTypeInferred = true;
            }
        }
        if (returnType == null) {
            returnType = typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        if (parametersNode == null) {
            throw new java.lang.IllegalStateException("All Function types must have params and a return type");
        }
        com.google.javascript.rhino.jstype.FunctionType fnType;
        if (isConstructor) {
            fnType = getOrCreateConstructor();
        } else if (isInterface) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(45).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.baseType",com.google.javascript.jscomp.FunctionTypeBuilder.this.baseType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.parametersNode",com.google.javascript.jscomp.FunctionTypeBuilder.this.parametersNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_NON_OBJECT",com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_NON_OBJECT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.TYPE_REDEFINITION",com.google.javascript.jscomp.FunctionTypeBuilder.TYPE_REDEFINITION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.THIS_TYPE_NON_OBJECT",com.google.javascript.jscomp.FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.errorRoot",com.google.javascript.jscomp.FunctionTypeBuilder.this.errorRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.returnType",com.google.javascript.jscomp.FunctionTypeBuilder.this.returnType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.thisType",com.google.javascript.jscomp.FunctionTypeBuilder.this.thisType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.returnTypeInferred",com.google.javascript.jscomp.FunctionTypeBuilder.this.returnTypeInferred);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.templateTypeNames",com.google.javascript.jscomp.FunctionTypeBuilder.this.templateTypeNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.sourceName",com.google.javascript.jscomp.FunctionTypeBuilder.this.sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.IMPLEMENTS_WITHOUT_CONSTRUCTOR",com.google.javascript.jscomp.FunctionTypeBuilder.IMPLEMENTS_WITHOUT_CONSTRUCTOR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.fnName",com.google.javascript.jscomp.FunctionTypeBuilder.this.fnName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED",com.google.javascript.jscomp.FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.VAR_ARGS_MUST_BE_LAST",com.google.javascript.jscomp.FunctionTypeBuilder.VAR_ARGS_MUST_BE_LAST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.extendedInterfaces",com.google.javascript.jscomp.FunctionTypeBuilder.this.extendedInterfaces);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.OPTIONAL_ARG_AT_END",com.google.javascript.jscomp.FunctionTypeBuilder.OPTIONAL_ARG_AT_END);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.TEMPLATE_TYPE_DUPLICATED",com.google.javascript.jscomp.FunctionTypeBuilder.TEMPLATE_TYPE_DUPLICATED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.scope",com.google.javascript.jscomp.FunctionTypeBuilder.this.scope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.RESOLVED_TAG_EMPTY",com.google.javascript.jscomp.FunctionTypeBuilder.RESOLVED_TAG_EMPTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.makesStructs",com.google.javascript.jscomp.FunctionTypeBuilder.this.makesStructs);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.INEXISTANT_PARAM",com.google.javascript.jscomp.FunctionTypeBuilder.INEXISTANT_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.codingConvention",com.google.javascript.jscomp.FunctionTypeBuilder.this.codingConvention);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.makesDicts",com.google.javascript.jscomp.FunctionTypeBuilder.this.makesDicts);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_WITHOUT_TYPEDEF",com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_WITHOUT_TYPEDEF);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.contents",com.google.javascript.jscomp.FunctionTypeBuilder.this.contents);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.isConstructor",com.google.javascript.jscomp.FunctionTypeBuilder.this.isConstructor);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.compiler",com.google.javascript.jscomp.FunctionTypeBuilder.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.implementedInterfaces",com.google.javascript.jscomp.FunctionTypeBuilder.this.implementedInterfaces);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.isInterface",com.google.javascript.jscomp.FunctionTypeBuilder.this.isInterface);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.CONSTRUCTOR_REQUIRED",com.google.javascript.jscomp.FunctionTypeBuilder.CONSTRUCTOR_REQUIRED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.typeRegistry",com.google.javascript.jscomp.FunctionTypeBuilder.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectionEnds();
            }
            if (runtimeAngelicValue)
                fnType = typeRegistry.createInterfaceType(fnName, contents.getSourceNode());

            if (getScopeDeclaredIn().isGlobal() && (!fnName.isEmpty())) {
                typeRegistry.declareType(fnName, fnType.getInstanceType());
            }
            maybeSetBaseType(fnType);
        } else {
            fnType = new com.google.javascript.rhino.jstype.FunctionBuilder(typeRegistry).withName(fnName).withSourceNode(contents.getSourceNode()).withParamsNode(parametersNode).withReturnType(returnType, returnTypeInferred).withTypeOfThis(thisType).withTemplateKeys(templateTypeNames).build();
            maybeSetBaseType(fnType);
        }
        if (implementedInterfaces != null) {
            fnType.setImplementedInterfaces(implementedInterfaces);
        }
        if (extendedInterfaces != null) {
            fnType.setExtendedInterfaces(extendedInterfaces);
        }
        typeRegistry.clearTemplateTypeNames();
        return fnType;
    }

    private void maybeSetBaseType(com.google.javascript.rhino.jstype.FunctionType fnType) {
        if ((!fnType.isInterface()) && (baseType != null)) {
            fnType.setPrototypeBasedOn(baseType);
        }
    }

    private com.google.javascript.rhino.jstype.FunctionType getOrCreateConstructor() {
        com.google.javascript.rhino.jstype.FunctionType fnType = typeRegistry.createConstructorType(fnName, contents.getSourceNode(), parametersNode, returnType, null);
        com.google.javascript.rhino.jstype.JSType existingType = typeRegistry.getType(fnName);
        if (makesStructs) {
            fnType.setStruct();
        } else if (makesDicts) {
            fnType.setDict();
        }
        if (existingType != null) {
            boolean isInstanceObject = existingType.isInstanceType();
            if (isInstanceObject || fnName.equals("Function")) {
                com.google.javascript.rhino.jstype.FunctionType existingFn = (isInstanceObject) ? existingType.toObjectType().getConstructor() : typeRegistry.getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_FUNCTION_TYPE);
                if (existingFn.getSource() == null) {
                    existingFn.setSource(contents.getSourceNode());
                }
                if (!existingFn.hasEqualCallType(fnType)) {
                    reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.TYPE_REDEFINITION, fnName, fnType.toString(), existingFn.toString());
                }
                return existingFn;
            } else {
            }
        }
        maybeSetBaseType(fnType);
        if (getScopeDeclaredIn().isGlobal() && (!fnName.isEmpty())) {
            typeRegistry.declareType(fnName, fnType.getInstanceType());
        }
        return fnType;
    }

    private void reportWarning(com.google.javascript.jscomp.DiagnosticType warning, java.lang.String... args) {
        compiler.report(com.google.javascript.jscomp.JSError.make(sourceName, errorRoot, warning, args));
    }

    private void reportError(com.google.javascript.jscomp.DiagnosticType error, java.lang.String... args) {
        compiler.report(com.google.javascript.jscomp.JSError.make(sourceName, errorRoot, error, args));
    }

    static boolean isFunctionTypeDeclaration(com.google.javascript.rhino.JSDocInfo info) {
        return ((((info.getParameterCount() > 0) || info.hasReturnType()) || info.hasThisType()) || info.isConstructor()) || info.isInterface();
    }

    private com.google.javascript.jscomp.Scope getScopeDeclaredIn() {
        int dotIndex = fnName.indexOf(".");
        if (dotIndex != (-1)) {
            java.lang.String rootVarName = fnName.substring(0, dotIndex);
            com.google.javascript.jscomp.Scope.Var rootVar = scope.getVar(rootVarName);
            if (rootVar != null) {
                return rootVar.getScope();
            }
        }
        return scope;
    }

    private static boolean hasMoreTagsToResolve(com.google.javascript.rhino.jstype.ObjectType objectType) {
        com.google.common.base.Preconditions.checkArgument(objectType.isUnknownType());
        if (objectType.getImplicitPrototype() != null) {
            if (objectType.getImplicitPrototype().isResolved()) {
                return false;
            } else {
                return true;
            }
        } else {
            com.google.javascript.rhino.jstype.FunctionType ctor = objectType.getConstructor();
            if (ctor != null) {
                for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctor.getExtendedInterfaces()) {
                    if (!interfaceType.isResolved()) {
                        return true;
                    }
                }
            }
            return false;
        }
    }

    static interface FunctionContents {
        public abstract com.google.javascript.rhino.Node getSourceNode();

        public abstract boolean mayBeFromExterns();

        public abstract boolean mayHaveNonEmptyReturns();

        public abstract boolean mayHaveSingleThrow();

        public abstract java.lang.Iterable<java.lang.String> getEscapedVarNames();

        public abstract java.util.Set<java.lang.String> getEscapedQualifiedNames();

        public abstract com.google.common.collect.Multiset<java.lang.String> getAssignedNameCounts();
    }

    static class UnknownFunctionContents implements com.google.javascript.jscomp.FunctionTypeBuilder.FunctionContents {
        private static com.google.javascript.jscomp.FunctionTypeBuilder.UnknownFunctionContents singleton = new com.google.javascript.jscomp.FunctionTypeBuilder.UnknownFunctionContents();

        static com.google.javascript.jscomp.FunctionTypeBuilder.FunctionContents get() {
            return com.google.javascript.jscomp.FunctionTypeBuilder.UnknownFunctionContents.singleton;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getSourceNode() {
            return null;
        }

        @java.lang.Override
        public boolean mayBeFromExterns() {
            return true;
        }

        @java.lang.Override
        public boolean mayHaveNonEmptyReturns() {
            return true;
        }

        @java.lang.Override
        public boolean mayHaveSingleThrow() {
            return true;
        }

        @java.lang.Override
        public java.lang.Iterable<java.lang.String> getEscapedVarNames() {
            return com.google.common.collect.ImmutableList.of();
        }

        @java.lang.Override
        public java.util.Set<java.lang.String> getEscapedQualifiedNames() {
            return com.google.common.collect.ImmutableSet.of();
        }

        @java.lang.Override
        public com.google.common.collect.Multiset<java.lang.String> getAssignedNameCounts() {
            return com.google.common.collect.ImmutableMultiset.of();
        }
    }

    static class AstFunctionContents implements com.google.javascript.jscomp.FunctionTypeBuilder.FunctionContents {
        private final com.google.javascript.rhino.Node n;

        private boolean hasNonEmptyReturns = false;

        private java.util.Set<java.lang.String> escapedVarNames;

        private java.util.Set<java.lang.String> escapedQualifiedNames;

        private final com.google.common.collect.Multiset<java.lang.String> assignedVarNames = com.google.common.collect.HashMultiset.create();

        AstFunctionContents(com.google.javascript.rhino.Node n) {
            this.n = n;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getSourceNode() {
            return n;
        }

        @java.lang.Override
        public boolean mayBeFromExterns() {
            return n.isFromExterns();
        }

        @java.lang.Override
        public boolean mayHaveNonEmptyReturns() {
            return hasNonEmptyReturns;
        }

        void recordNonEmptyReturn() {
            hasNonEmptyReturns = true;
        }

        @java.lang.Override
        public boolean mayHaveSingleThrow() {
            com.google.javascript.rhino.Node block = n.getLastChild();
            return block.hasOneChild() && block.getFirstChild().isThrow();
        }

        @java.lang.Override
        public java.lang.Iterable<java.lang.String> getEscapedVarNames() {
            return escapedVarNames == null ? com.google.common.collect.ImmutableList.<java.lang.String>of() : escapedVarNames;
        }

        void recordEscapedVarName(java.lang.String name) {
            if (escapedVarNames == null) {
                escapedVarNames = com.google.common.collect.Sets.newHashSet();
            }
            escapedVarNames.add(name);
        }

        @java.lang.Override
        public java.util.Set<java.lang.String> getEscapedQualifiedNames() {
            return escapedQualifiedNames == null ? com.google.common.collect.ImmutableSet.<java.lang.String>of() : escapedQualifiedNames;
        }

        void recordEscapedQualifiedName(java.lang.String name) {
            if (escapedQualifiedNames == null) {
                escapedQualifiedNames = com.google.common.collect.Sets.newHashSet();
            }
            escapedQualifiedNames.add(name);
        }

        @java.lang.Override
        public com.google.common.collect.Multiset<java.lang.String> getAssignedNameCounts() {
            return assignedVarNames;
        }

        void recordAssignedName(java.lang.String name) {
            assignedVarNames.add(name);
        }
    }
}
[346392] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659814279940
GPR[SSUN]-1659814279940
-1464408086
GPR[SPVATF]-1659814280710
CodeCache: size=245760Kb used=243574Kb max_used=243604Kb free=2185Kb
 bounds [0x00007f471d000000, 0x00007f472c000000, 0x00007f472c000000]
 total_blobs=56656 nmethods=56153 adapters=404
 compilation: disabled (not enough contiguous free space left)
GPR[EPVATF]-1659814284139
GPR[SPS]-1659814284139
[351998] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionTypeBuilder:359.
GPR[EPS]-1659814285546
GPR[ESUN]-1659814285546
GPR[SSUN]-1659814285547
-1464408086
GPR[SPVATF]-1659814285892
GPR[EPVATF]-1659814287466
GPR[SPS]-1659814287466
[354799] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionTypeBuilder:358.
GPR[EPS]-1659814288347
GPR[ESUN]-1659814288347
GPR[SSUN]-1659814288347
1508981886
GPR[SPVATF]-1659814288614
GPR[EPVATF]-1659814290248
GPR[SPS]-1659814290248
[357701] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1324.
GPR[EPS]-1659814291249
GPR[SPVATF]-1659814291249
GPR[EPVATF]-1659814292856
GPR[SPS]-1659814292856
[360052] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1324.
GPR[EPS]-1659814293600
GPR[ESUN]-1659814293600
GPR[SSUN]-1659814293600
-1093533311
GPR[ESUN]-1659814293927
GPR[SSUN]-1659814293928
-132053243
GPR[ESUN]-1659814294159
GPR[SSUN]-1659814294160
-132053243
GPR[SPVATF]-1659814294383
GPR[EPVATF]-1659814294455
[360907] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659814294455
GPR[SSUN]-1659814294456
711965926
GPR[ESUN]-1659814294657
GPR[SSUN]-1659814294657
711965926
GPR[SPVATF]-1659814294865
GPR[EPVATF]-1659814297482
GPR[SPS]-1659814297482
[364526] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractMessageFormatter:37.
GPR[EPS]-1659814298074
GPR[ESUN]-1659814298074
GPR[SSUN]-1659814298074
-1053444620
GPR[SPVATF]-1659814298300
GPR[EPVATF]-1659814299864
GPR[SPS]-1659814299864
[366972] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:274.
GPR[EPS]-1659814300520
GPR[ESUN]-1659814300520
GPR[SSUN]-1659814300520
-1093533311
GPR[ESUN]-1659814300963
GPR[SSUN]-1659814300963
-1093533311
GPR[SPVATF]-1659814301496
GPR[EPVATF]-1659814303380
GPR[SPS]-1659814303380
[370555] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSTypeRegistry:943.
GPR[EPS]-1659814304103
GPR[ESUN]-1659814304103
GPR[SSUN]-1659814304103
-1093533311
GPR[ESUN]-1659814304380
GPR[SSUN]-1659814304380
-974414840
GPR[ESUN]-1659814304894
GPR[SSUN]-1659814304894
-1093533311
GPR[SPVATF]-1659814305180
GPR[EPVATF]-1659814306769
GPR[SPS]-1659814306769
[374108] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSTypeRegistry:923.
GPR[EPS]-1659814307656
GPR[ESUN]-1659814307656
GPR[SSUN]-1659814307656
-1093533311
GPR[SPVATF]-1659814307930
GPR[EPVATF]-1659814309500
GPR[SPS]-1659814309500
[376861] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSTypeRegistry:922.
GPR[EPS]-1659814310409
GPR[ESUN]-1659814310409
GPR[SSUN]-1659814310409
-1093533311
GPR[ESUN]-1659814310930
GPR[SSUN]-1659814310930
-1053444620
GPR[ESUN]-1659814311146
GPR[SSUN]-1659814311146
-1053444620
GPR[SPVATF]-1659814311364
GPR[EPVATF]-1659814312957
GPR[SPS]-1659814312957
[379929] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:357.
GPR[EPS]-1659814313477
GPR[ESUN]-1659814313477
GPR[SSUN]-1659814313477
-1053444620
GPR[SPVATF]-1659814313688
GPR[EPVATF]-1659814315284
GPR[SPS]-1659814315285
[382481] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:344.
GPR[EPS]-1659814316029
GPR[SPVATF]-1659814316029
GPR[EPVATF]-1659814317690
GPR[SPS]-1659814317690
[384700] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:344.
GPR[EPS]-1659814318248
GPR[ESUN]-1659814318248
GPR[SSUN]-1659814318248
-1053444620
GPR[ESUN]-1659814318475
GPR[SSUN]-1659814318475
-1251822497
GPR[ESUN]-1659814318682
GPR[SSUN]-1659814318682
-1251822497
GPR[SPVATF]-1659814318892
GPR[EPVATF]-1659814320535
GPR[SPS]-1659814320535
[387857] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:867.
GPR[EPS]-1659814321405
GPR[ESUN]-1659814321405
GPR[SSUN]-1659814321405
-1251822497
GPR[SPVATF]-1659814321609
GPR[EPVATF]-1659814323306
GPR[SPS]-1659814323306
[390363] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:866.
GPR[EPS]-1659814323911
GPR[ESUN]-1659814323911
GPR[SSUN]-1659814323911
1508981886
GPR[ESUN]-1659814324149
GPR[SSUN]-1659814324149
1508981886
GPR[SPVATF]-1659814324381
GPR[EPVATF]-1659814326097
GPR[SPS]-1659814326097
[393633] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:395.
GPR[EPS]-1659814327181
GPR[ESUN]-1659814327181
GPR[SSUN]-1659814327181
-1053444620
GPR[ESUN]-1659814327398
GPR[SSUN]-1659814327399
-1053444620
GPR[SPVATF]-1659814327634
GPR[EPVATF]-1659814329408
GPR[SPS]-1659814329408
[397757] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:340.
GPR[EPS]-1659814331305
GPR[SPVATF]-1659814331306
GPR[EPVATF]-1659814333484
GPR[SPS]-1659814333484
[400485] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:340.
GPR[EPS]-1659814334033
GPR[ESUN]-1659814334033
GPR[SSUN]-1659814334033
-1053444620
GPR[SPVATF]-1659814334257
GPR[EPVATF]-1659814336192
GPR[SPS]-1659814336192
[404619] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:256.
GPR[EPS]-1659814338167
GPR[ESUN]-1659814338167
GPR[SSUN]-1659814338167
-1053444620
GPR[SPVATF]-1659814338456
GPR[EPVATF]-1659814340453
GPR[SPS]-1659814340453
[407443] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:246.
GPR[EPS]-1659814340991
GPR[SPVATF]-1659814340991
GPR[EPVATF]-1659814343251
GPR[SPS]-1659814343251
[410255] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:246.
GPR[EPS]-1659814343803
GPR[ESUN]-1659814343803
GPR[SSUN]-1659814343803
-1251822497
GPR[SPVATF]-1659814344018
GPR[EPVATF]-1659814346369
GPR[SPS]-1659814346369
[413385] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:861.
GPR[EPS]-1659814346933
GPR[SPVATF]-1659814346933
GPR[EPVATF]-1659814349423
GPR[SPS]-1659814349423
[416383] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:861.
GPR[EPS]-1659814349931
GPR[ESUN]-1659814349931
GPR[SSUN]-1659814349931
-179796259
GPR[SPVATF]-1659814350202
GPR[EPVATF]-1659814352760
GPR[SPS]-1659814352760
[420478] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:317.
GPR[EPS]-1659814354027
GPR[ESUN]-1659814354027
GPR[SSUN]-1659814354027
-179796259
GPR[SPVATF]-1659814354312
GPR[EPVATF]-1659814356916
GPR[SPS]-1659814356917
[424347] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:316.
GPR[EPS]-1659814357895
GPR[ESUN]-1659814357895
GPR[SSUN]-1659814357895
-179796259
GPR[SPVATF]-1659814358212
GPR[EPVATF]-1659814360834
GPR[SPS]-1659814360834
[428150] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:307.
GPR[EPS]-1659814361698
GPR[SPVATF]-1659814361698
GPR[EPVATF]-1659814364236
GPR[SPS]-1659814364236
[431734] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:307.
GPR[EPS]-1659814365282
GPR[ESUN]-1659814365282
GPR[SSUN]-1659814365282
-1053444620
GPR[SPVATF]-1659814365531
GPR[EPVATF]-1659814368104
GPR[SPS]-1659814368104
[435441] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:273.
GPR[EPS]-1659814368989
GPR[SPVATF]-1659814368989
GPR[EPVATF]-1659814371615
GPR[SPS]-1659814371615
[438632] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:273.
GPR[EPS]-1659814372180
GPR[ESUN]-1659814372180
GPR[SSUN]-1659814372180
-1053444620
GPR[ESUN]-1659814372396
GPR[SSUN]-1659814372396
-1053444620
GPR[SPVATF]-1659814372611
GPR[EPVATF]-1659814375182
GPR[SPS]-1659814375182
[442179] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:269.
GPR[EPS]-1659814375727
GPR[SPVATF]-1659814375727
GPR[EPVATF]-1659814378293
GPR[SPS]-1659814378293
[445438] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:269.
GPR[EPS]-1659814378986
GPR[ESUN]-1659814378986
GPR[SSUN]-1659814378986
-1053444620
GPR[ESUN]-1659814379425
GPR[SSUN]-1659814379425
-1053444620
GPR[ESUN]-1659814379859
GPR[SSUN]-1659814379859
-1053444620
GPR[SPVATF]-1659814380183
GPR[EPVATF]-1659814382843
GPR[SPS]-1659814382843
[449857] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:237.
GPR[EPS]-1659814383405
GPR[SPVATF]-1659814383405
GPR[EPVATF]-1659814386061
GPR[SPS]-1659814386061
[454682] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:237.
GPR[EPS]-1659814388230
GPR[ESUN]-1659814388230
GPR[SSUN]-1659814388230
-1053444620
GPR[ESUN]-1659814388729
GPR[SSUN]-1659814388729
-1053444620
GPR[ESUN]-1659814389202
GPR[SSUN]-1659814389202
-1053444620
GPR[ESUN]-1659814389768
GPR[SSUN]-1659814389768
-1053444620
GPR[SPVATF]-1659814390476
GPR[EPVATF]-1659814399995
GPR[SPS]-1659814399995
[467986] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:208.
GPR[EPS]-1659814401534
GPR[ESUN]-1659814401534
GPR[SSUN]-1659814401534
-1053444620
GPR[SPVATF]-1659814401841
GPR[EPVATF]-1659814403453
GPR[SPS]-1659814403453
[470594] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:207.
GPR[EPS]-1659814404142
GPR[SPVATF]-1659814404142
GPR[EPVATF]-1659814405727
GPR[SPS]-1659814405727
[473304] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:207.
GPR[EPS]-1659814406852
GPR[ESUN]-1659814406852
GPR[SSUN]-1659814406852
-1053444620
GPR[SPVATF]-1659814407100
GPR[EPVATF]-1659814408686
GPR[SPS]-1659814408686
[475803] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:206.
GPR[EPS]-1659814409351
GPR[ESUN]-1659814409351
GPR[SSUN]-1659814409351
-1053444620
GPR[SPVATF]-1659814409587
GPR[EPVATF]-1659814411213
GPR[SPS]-1659814411213
[478631] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:202.
GPR[EPS]-1659814412179
GPR[SPVATF]-1659814412179
GPR[EPVATF]-1659814413740
GPR[SPS]-1659814413740
[481481] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:202.
GPR[EPS]-1659814415029
GPR[ESUN]-1659814415029
GPR[SSUN]-1659814415029
-1053444620
GPR[SPVATF]-1659814415607
GPR[EPVATF]-1659814417405
GPR[SPS]-1659814417405
[484479] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:201.
GPR[EPS]-1659814418028
GPR[ESUN]-1659814418028
GPR[SSUN]-1659814418028
2069352659
GPR[SPVATF]-1659814418261
GPR[EPVATF]-1659814419916
GPR[SPS]-1659814419916
[486965] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionTypeBuilder:178.
GPR[EPS]-1659814420513
GPR[SPVATF]-1659814420514
GPR[EPVATF]-1659814422139
GPR[SPS]-1659814422139
[489651] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionTypeBuilder:178.
GPR[EPS]-1659814423199
GPR[ESUN]-1659814423199
GPR[SSUN]-1659814423199
-2097135580
GPR[ESUN]-1659814423449
GPR[SSUN]-1659814423449
-2097135580
GPR[SPVATF]-1659814423698
GPR[EPVATF]-1659814425386
GPR[SPS]-1659814425387
[493737] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:732.
GPR[EPS]-1659814427285
GPR[ESUN]-1659814427285
GPR[SSUN]-1659814427285
-974414840
GPR[ESUN]-1659814427736
GPR[SSUN]-1659814427736
-179796259
GPR[ESUN]-1659814428137
GPR[SSUN]-1659814428137
-179796259
GPR[SPVATF]-1659814428441
GPR[EPVATF]-1659814430117
GPR[SPS]-1659814430117
[497437] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:996.
GPR[EPS]-1659814430985
GPR[SPVATF]-1659814430986
GPR[EPVATF]-1659814432593
GPR[SPS]-1659814432593
[500767] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:996.
GPR[EPS]-1659814434315
GPR[ESUN]-1659814434315
GPR[SSUN]-1659814434315
-179796259
GPR[SPVATF]-1659814434595
GPR[EPVATF]-1659814436272
GPR[SPS]-1659814436274
[503638] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:451.
GPR[EPS]-1659814437186
GPR[ESUN]-1659814437186
GPR[SSUN]-1659814437186
-1251822497
GPR[ESUN]-1659814437396
GPR[SSUN]-1659814437396
-46850221
GPR[ESUN]-1659814437715
GPR[SSUN]-1659814437715
-46850221
GPR[SPVATF]-1659814438080
GPR[EPVATF]-1659814439901
GPR[SPS]-1659814439901
GPR[EPS]-1659814457081
GPR[ESUN]-1659814457081
GPR[SSUN]-1659814457081
-46850221
GPR[SPVATF]-1659814457328
GPR[EPVATF]-1659814459140
GPR[SPS]-1659814459140
GPR[EPS]-1659814477056
GPR[SPVATF]-1659814477057
GPR[EPVATF]-1659814479042
GPR[SPS]-1659814479042
[546198] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:577.
GPR[EPS]-1659814479746
GPR[ESUN]-1659814479746
GPR[SSUN]-1659814479746
-46850221
GPR[SPVATF]-1659814480006
GPR[EPVATF]-1659814482161
GPR[SPS]-1659814482161
[549258] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:462.
GPR[EPS]-1659814482806
GPR[ESUN]-1659814482806
GPR[SSUN]-1659814482806
-46850221
GPR[ESUN]-1659814483069
GPR[SSUN]-1659814483069
-974414840
GPR[ESUN]-1659814483307
GPR[SSUN]-1659814483307
-1234646214
GPR[ESUN]-1659814483555
GPR[SSUN]-1659814483555
-1234646214
GPR[ESUN]-1659814483795
GPR[SSUN]-1659814483795
-1234646214
GPR[SPVATF]-1659814484024
GPR[EPVATF]-1659814486336
GPR[SPS]-1659814486336
[2363383] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[ESUN]-1659816296933
GPR[SSUN]-1659816296933
-1234646214
GPR[SPVATF]-1659819429285
[5698714] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659819632262
GPR[SSUN]-1659819632262
-1234646214
GPR[SPVATF]-1659822215414
[8486796] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659822420344
GPR[SSUN]-1659822420344
-1093533311
GPR[ESUN]-1659822977369
GPR[SSUN]-1659822977369
-1053444620
GPR[SPVATF]-1659822977640
GPR[EPVATF]-1659822979547
GPR[SPS]-1659822979547
[9046560] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:221.
GPR[EPS]-1659822980108
GPR[SPVATF]-1659822980108
GPR[EPVATF]-1659822981805
GPR[SPS]-1659822981805
[9048787] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:221.
GPR[EPS]-1659822982335
GPR[ESUN]-1659822982335
GPR[SSUN]-1659822982335
-1053444620
GPR[ESUN]-1659822982812
GPR[SSUN]-1659822982812
-1053444620
GPR[SPVATF]-1659822983028
GPR[EPVATF]-1659822984749
GPR[SPS]-1659822984749
[9051761] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:194.
GPR[EPS]-1659822985309
GPR[SPVATF]-1659822985309
GPR[EPVATF]-1659822987102
GPR[SPS]-1659822987102
[9054121] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:194.
GPR[EPS]-1659822987669
GPR[ESUN]-1659822987669
GPR[SSUN]-1659822987669
-1053444620
GPR[SPVATF]-1659822987887
GPR[EPVATF]-1659822989554
GPR[SPS]-1659822989555
[9056572] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:190.
GPR[EPS]-1659822990120
GPR[SPVATF]-1659822990120
GPR[EPVATF]-1659822991768
GPR[SPS]-1659822991768
[9058771] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:190.
GPR[EPS]-1659822992319
GPR[ESUN]-1659822992319
GPR[SSUN]-1659822992319
-1053444620
GPR[ESUN]-1659822992543
GPR[SSUN]-1659822992543
-1053444620
GPR[ESUN]-1659822992767
GPR[SSUN]-1659822992767
-1053444620
GPR[ESUN]-1659822992982
GPR[SSUN]-1659822992982
-1053444620
GPR[SPVATF]-1659822993206
GPR[EPVATF]-1659822994894
GPR[SPS]-1659822994894
[9061891] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:142.
GPR[EPS]-1659822995439
GPR[ESUN]-1659822995439
GPR[SSUN]-1659822995439
-1053444620
GPR[SPVATF]-1659822995665
GPR[EPVATF]-1659822997368
GPR[SPS]-1659822997368
[9064371] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:135.
GPR[EPS]-1659822997919
GPR[SPVATF]-1659822997919
GPR[EPVATF]-1659822999623
GPR[SPS]-1659822999623
[9066650] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:135.
GPR[EPS]-1659823000198
GPR[ESUN]-1659823000198
GPR[SSUN]-1659823000198
-1053444620
GPR[ESUN]-1659823000431
GPR[SSUN]-1659823000431
-974414840
GPR[ESUN]-1659823000675
GPR[SSUN]-1659823000675
-974414840
GPR[ESUN]-1659823000904
GPR[SSUN]-1659823000904
-1234646214
GPR[ESUN]-1659823001134
GPR[SSUN]-1659823001134
-1234646214
GPR[SPVATF]-1659823001376
GPR[EPVATF]-1659823003115
GPR[SPS]-1659823003115
[9070132] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.ObjectType:180.
GPR[EPS]-1659823003680
GPR[ESUN]-1659823003680
GPR[SSUN]-1659823003680
-1234646214
GPR[ESUN]-1659823003918
GPR[SSUN]-1659823003918
-1234646214
GPR[SPVATF]-1659823004151
GPR[EPVATF]-1659823005947
GPR[SPS]-1659823005947
[9072958] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.ObjectType:178.
GPR[EPS]-1659823006506
GPR[ESUN]-1659823006506
GPR[SSUN]-1659823006506
-974414840
GPR[ESUN]-1659823006738
GPR[SSUN]-1659823006738
-974414840
GPR[ESUN]-1659823006969
GPR[SSUN]-1659823006969
-179796259
GPR[SPVATF]-1659823007236
GPR[EPVATF]-1659823009006
GPR[SPS]-1659823009006
[9076462] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:463.
GPR[EPS]-1659823010010
GPR[SPVATF]-1659823010010
GPR[EPVATF]-1659823011802
GPR[SPS]-1659823011802
[9079328] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:463.
GPR[EPS]-1659823012876
GPR[ESUN]-1659823012876
GPR[SSUN]-1659823012876
-1234646214
GPR[ESUN]-1659823013106
GPR[SSUN]-1659823013106
-179796259
GPR[SPVATF]-1659823013365
GPR[EPVATF]-1659823015289
GPR[SPS]-1659823015289
[9082727] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:436.
GPR[EPS]-1659823016275
GPR[ESUN]-1659823016275
GPR[SSUN]-1659823016275
-179796259
GPR[SPVATF]-1659823016537
GPR[EPVATF]-1659823018451
GPR[SPS]-1659823018451
[9085862] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:435.
GPR[EPS]-1659823019410
GPR[ESUN]-1659823019410
GPR[SSUN]-1659823019410
-974414840
GPR[ESUN]-1659823019627
GPR[SSUN]-1659823019627
-179796259
GPR[SPVATF]-1659823019884
GPR[EPVATF]-1659823021894
GPR[SPS]-1659823021894
[9089461] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class JsDocInfoParser {
    private final com.google.javascript.jscomp.parsing.JsDocTokenStream stream;

    private final com.google.javascript.rhino.JSDocInfoBuilder jsdocBuilder;

    private final com.google.javascript.rhino.jstype.StaticSourceFile sourceFile;

    private final com.google.javascript.rhino.Node associatedNode;

    private final com.google.javascript.rhino.head.ErrorReporter errorReporter;

    private final com.google.javascript.jscomp.parsing.JsDocInfoParser.ErrorReporterParser parser = new com.google.javascript.jscomp.parsing.JsDocInfoParser.ErrorReporterParser();

    private final com.google.javascript.rhino.Node templateNode;

    private class ErrorReporterParser {
        void addParserWarning(java.lang.String messageId, java.lang.String messageArg, int lineno, int charno) {
            errorReporter.warning(com.google.javascript.rhino.ScriptRuntime.getMessage1(messageId, messageArg), getSourceName(), lineno, null, charno);
        }

        void addParserWarning(java.lang.String messageId, int lineno, int charno) {
            errorReporter.warning(com.google.javascript.rhino.ScriptRuntime.getMessage0(messageId), getSourceName(), lineno, null, charno);
        }

        void addTypeWarning(java.lang.String messageId, java.lang.String messageArg, int lineno, int charno) {
            errorReporter.warning("Bad type annotation. " + com.google.javascript.rhino.ScriptRuntime.getMessage1(messageId, messageArg), getSourceName(), lineno, null, charno);
        }

        void addTypeWarning(java.lang.String messageId, int lineno, int charno) {
            errorReporter.warning("Bad type annotation. " + com.google.javascript.rhino.ScriptRuntime.getMessage0(messageId), getSourceName(), lineno, null, charno);
        }
    }

    private com.google.javascript.rhino.JSDocInfo fileOverviewJSDocInfo = null;

    private com.google.javascript.jscomp.parsing.JsDocInfoParser.State state;

    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.parsing.Annotation> annotationNames;

    private final java.util.Set<java.lang.String> suppressionNames;

    private static final java.util.Set<java.lang.String> modifiesAnnotationKeywords = com.google.common.collect.ImmutableSet.<java.lang.String>of("this", "arguments");

    private com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder;

    void setFileLevelJsDocBuilder(com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder) {
        this.fileLevelJsDocBuilder = fileLevelJsDocBuilder;
    }

    void setFileOverviewJSDocInfo(com.google.javascript.rhino.JSDocInfo fileOverviewJSDocInfo) {
        this.fileOverviewJSDocInfo = fileOverviewJSDocInfo;
    }

    private enum State {

        SEARCHING_ANNOTATION,
        SEARCHING_NEWLINE,
        NEXT_IS_ANNOTATION;}

    JsDocInfoParser(com.google.javascript.jscomp.parsing.JsDocTokenStream stream, com.google.javascript.rhino.head.ast.Comment commentNode, com.google.javascript.rhino.Node associatedNode, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        this.stream = stream;
        this.associatedNode = associatedNode;
        this.sourceFile = (associatedNode == null) ? null : associatedNode.getStaticSourceFile();
        this.jsdocBuilder = new com.google.javascript.rhino.JSDocInfoBuilder(config.parseJsDocDocumentation);
        if (commentNode != null) {
            this.jsdocBuilder.recordOriginalCommentString(commentNode.getValue());
        }
        this.annotationNames = config.annotationNames;
        this.suppressionNames = config.suppressionNames;
        this.errorReporter = errorReporter;
        this.templateNode = this.createTemplateNode();
    }

    private java.lang.String getSourceName() {
        return sourceFile == null ? null : sourceFile.getName();
    }

    public static com.google.javascript.rhino.Node parseTypeString(java.lang.String typeString) {
        com.google.javascript.jscomp.parsing.Config config = new com.google.javascript.jscomp.parsing.Config(com.google.common.collect.Sets.<java.lang.String>newHashSet(), com.google.common.collect.Sets.<java.lang.String>newHashSet(), false, com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT3, false);
        com.google.javascript.jscomp.parsing.JsDocInfoParser parser = new com.google.javascript.jscomp.parsing.JsDocInfoParser(new com.google.javascript.jscomp.parsing.JsDocTokenStream(typeString), null, null, config, com.google.javascript.jscomp.parsing.NullErrorReporter.forNewRhino());
        return parser.parseTopLevelTypeExpression(parser.next());
    }

    boolean parse() {
        int lineno;
        int charno;
        com.google.javascript.rhino.JSTypeExpression type;
        state = com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_ANNOTATION;
        skipEOLs();
        com.google.javascript.jscomp.parsing.JsDocToken token = next();
        java.util.List<com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtendedTypeInfo> extendedTypes = com.google.common.collect.Lists.newArrayList();
        if (jsdocBuilder.shouldParseDocumentation()) {
            com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo blockInfo = extractBlockComment(token);
            token = blockInfo.token;
            if (!blockInfo.string.isEmpty()) {
                jsdocBuilder.recordBlockDescription(blockInfo.string);
            }
        } else if ((token != com.google.javascript.jscomp.parsing.JsDocToken.ANNOTATION) && (token != com.google.javascript.jscomp.parsing.JsDocToken.EOC)) {
            jsdocBuilder.recordBlockDescription("");
        }
        retry : for (; ;) {
            switch (token) {
                case ANNOTATION :
                    if (state == com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_ANNOTATION) {
                        state = com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_NEWLINE;
                        lineno = stream.getLineno();
                        charno = stream.getCharno();
                        java.lang.String annotationName = stream.getString();
                        com.google.javascript.jscomp.parsing.Annotation annotation = annotationNames.get(annotationName);
                        if (annotation == null) {
                            parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, stream.getLineno(), stream.getCharno());
                        } else {
                            jsdocBuilder.markAnnotation(annotationName, lineno, charno);
                            switch (annotation) {
                                case AUTHOR :
                                    if (jsdocBuilder.shouldParseDocumentation()) {
                                        com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo authorInfo = extractSingleLineBlock();
                                        java.lang.String author = authorInfo.string;
                                        if (author.length() == 0) {
                                            parser.addParserWarning("msg.jsdoc.authormissing", stream.getLineno(), stream.getCharno());
                                        } else {
                                            jsdocBuilder.addAuthor(author);
                                        }
                                        token = authorInfo.token;
                                    } else {
                                        token = eatTokensUntilEOL(token);
                                    }
                                    continue retry;
                                case CONSISTENTIDGENERATOR :
                                    if (!jsdocBuilder.recordConsistentIdGenerator()) {
                                        parser.addParserWarning("msg.jsdoc.consistidgen", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case STRUCT :
                                    if (!jsdocBuilder.recordStruct()) {
                                        parser.addTypeWarning("msg.jsdoc.incompat.type", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case DICT :
                                    if (!jsdocBuilder.recordDict()) {
                                        parser.addTypeWarning("msg.jsdoc.incompat.type", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case CONSTRUCTOR :
                                    if (!jsdocBuilder.recordConstructor()) {
                                        if (jsdocBuilder.isInterfaceRecorded()) {
                                            parser.addTypeWarning("msg.jsdoc.interface.constructor", stream.getLineno(), stream.getCharno());
                                        } else {
                                            parser.addTypeWarning("msg.jsdoc.incompat.type", stream.getLineno(), stream.getCharno());
                                        }
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case DEPRECATED :
                                    if (!jsdocBuilder.recordDeprecated()) {
                                        parser.addParserWarning("msg.jsdoc.deprecated", stream.getLineno(), stream.getCharno());
                                    }
                                    com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo reasonInfo = extractMultilineTextualBlock(token);
                                    java.lang.String reason = reasonInfo.string;
                                    if (reason.length() > 0) {
                                        jsdocBuilder.recordDeprecationReason(reason);
                                    }
                                    token = reasonInfo.token;
                                    continue retry;
                                case INTERFACE :
                                    if (!jsdocBuilder.recordInterface()) {
                                        if (jsdocBuilder.isConstructorRecorded()) {
                                            parser.addTypeWarning("msg.jsdoc.interface.constructor", stream.getLineno(), stream.getCharno());
                                        } else {
                                            parser.addTypeWarning("msg.jsdoc.incompat.type", stream.getLineno(), stream.getCharno());
                                        }
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case DESC :
                                    if (jsdocBuilder.isDescriptionRecorded()) {
                                        parser.addParserWarning("msg.jsdoc.desc.extra", stream.getLineno(), stream.getCharno());
                                        token = eatTokensUntilEOL();
                                        continue retry;
                                    } else {
                                        com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo descriptionInfo = extractMultilineTextualBlock(token);
                                        java.lang.String description = descriptionInfo.string;
                                        jsdocBuilder.recordDescription(description);
                                        token = descriptionInfo.token;
                                        continue retry;
                                    }
                                case FILE_OVERVIEW :
                                    java.lang.String fileOverview = "";
                                    if (jsdocBuilder.shouldParseDocumentation()) {
                                        com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo fileOverviewInfo = extractMultilineTextualBlock(token, com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.TRIM);
                                        fileOverview = fileOverviewInfo.string;
                                        token = fileOverviewInfo.token;
                                    } else {
                                        token = eatTokensUntilEOL(token);
                                    }
                                    if (!jsdocBuilder.recordFileOverview(fileOverview)) {
                                        parser.addParserWarning("msg.jsdoc.fileoverview.extra", stream.getLineno(), stream.getCharno());
                                    }
                                    continue retry;
                                case LICENSE :
                                case PRESERVE :
                                    com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo preserveInfo = extractMultilineTextualBlock(token, com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE);
                                    java.lang.String preserve = preserveInfo.string;
                                    if (preserve.length() > 0) {
                                        if (fileLevelJsDocBuilder != null) {
                                            fileLevelJsDocBuilder.append(preserve);
                                        }
                                    }
                                    token = preserveInfo.token;
                                    continue retry;
                                case ENUM :
                                    token = next();
                                    lineno = stream.getLineno();
                                    charno = stream.getCharno();
                                    type = null;
                                    if ((token != com.google.javascript.jscomp.parsing.JsDocToken.EOL) && (token != com.google.javascript.jscomp.parsing.JsDocToken.EOC)) {
                                        type = createJSTypeExpression(parseAndRecordTypeNode(token));
                                    }
                                    if (type == null) {
                                        type = createJSTypeExpression(newStringNode("number"));
                                    }
                                    if (!jsdocBuilder.recordEnumParameterType(type)) {
                                        parser.addTypeWarning("msg.jsdoc.incompat.type", lineno, charno);
                                    }
                                    token = eatTokensUntilEOL(token);
                                    continue retry;
                                case EXPORT :
                                    if (!jsdocBuilder.recordExport()) {
                                        parser.addParserWarning("msg.jsdoc.export", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case EXPOSE :
                                    if (!jsdocBuilder.recordExpose()) {
                                        parser.addParserWarning("msg.jsdoc.expose", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case EXTERNS :
                                    if (!jsdocBuilder.recordExterns()) {
                                        parser.addParserWarning("msg.jsdoc.externs", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case JAVA_DISPATCH :
                                    if (!jsdocBuilder.recordJavaDispatch()) {
                                        parser.addParserWarning("msg.jsdoc.javadispatch", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case EXTENDS :
                                case IMPLEMENTS :
                                    skipEOLs();
                                    token = next();
                                    lineno = stream.getLineno();
                                    charno = stream.getCharno();
                                    boolean matchingRc = false;
                                    if (token == com.google.javascript.jscomp.parsing.JsDocToken.LC) {
                                        token = next();
                                        matchingRc = true;
                                    }
                                    if (token == com.google.javascript.jscomp.parsing.JsDocToken.STRING) {
                                        com.google.javascript.rhino.Node typeNode = parseAndRecordTypeNameNode(token, lineno, charno, matchingRc);
                                        lineno = stream.getLineno();
                                        charno = stream.getCharno();
                                        typeNode = wrapNode(com.google.javascript.rhino.Token.BANG, typeNode);
                                        type = createJSTypeExpression(typeNode);
                                        if (annotation == com.google.javascript.jscomp.parsing.Annotation.EXTENDS) {
                                            extendedTypes.add(new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtendedTypeInfo(type, stream.getLineno(), stream.getCharno()));
                                        } else {
                                            com.google.common.base.Preconditions.checkState(annotation == com.google.javascript.jscomp.parsing.Annotation.IMPLEMENTS);
                                            if (!jsdocBuilder.recordImplementedInterface(type)) {
                                                parser.addTypeWarning("msg.jsdoc.implements.duplicate", lineno, charno);
                                            }
                                        }
                                        token = next();
                                        if (matchingRc) {
                                            if (token != com.google.javascript.jscomp.parsing.JsDocToken.RC) {
                                                parser.addTypeWarning("msg.jsdoc.missing.rc", stream.getLineno(), stream.getCharno());
                                            }
                                        } else if (((token != com.google.javascript.jscomp.parsing.JsDocToken.EOL) && (token != com.google.javascript.jscomp.parsing.JsDocToken.EOF)) && (token != com.google.javascript.jscomp.parsing.JsDocToken.EOC)) {
                                            parser.addTypeWarning("msg.end.annotation.expected", stream.getLineno(), stream.getCharno());
                                        }
                                    } else {
                                        parser.addTypeWarning("msg.no.type.name", lineno, charno);
                                    }
                                    token = eatTokensUntilEOL(token);
                                    continue retry;
                                case HIDDEN :
                                    if (!jsdocBuilder.recordHiddenness()) {
                                        parser.addParserWarning("msg.jsdoc.hidden", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case LENDS :
                                    skipEOLs();
                                    matchingRc = false;
                                    if (match(com.google.javascript.jscomp.parsing.JsDocToken.LC)) {
                                        token = next();
                                        matchingRc = true;
                                    }
                                    if (match(com.google.javascript.jscomp.parsing.JsDocToken.STRING)) {
                                        token = next();
                                        if (!jsdocBuilder.recordLends(stream.getString())) {
                                            parser.addTypeWarning("msg.jsdoc.lends.incompatible", stream.getLineno(), stream.getCharno());
                                        }
                                    } else {
                                        parser.addTypeWarning("msg.jsdoc.lends.missing", stream.getLineno(), stream.getCharno());
                                    }
                                    if (matchingRc && (!match(com.google.javascript.jscomp.parsing.JsDocToken.RC))) {
                                        parser.addTypeWarning("msg.jsdoc.missing.rc", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case MEANING :
                                    com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo meaningInfo = extractMultilineTextualBlock(token);
                                    java.lang.String meaning = meaningInfo.string;
                                    token = meaningInfo.token;
                                    if (!jsdocBuilder.recordMeaning(meaning)) {
                                        parser.addParserWarning("msg.jsdoc.meaning.extra", stream.getLineno(), stream.getCharno());
                                    }
                                    continue retry;
                                case NO_ALIAS :
                                    if (!jsdocBuilder.recordNoAlias()) {
                                        parser.addParserWarning("msg.jsdoc.noalias", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case NO_COMPILE :
                                    if (!jsdocBuilder.recordNoCompile()) {
                                        parser.addParserWarning("msg.jsdoc.nocompile", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case NO_TYPE_CHECK :
                                    if (!jsdocBuilder.recordNoTypeCheck()) {
                                        parser.addParserWarning("msg.jsdoc.nocheck", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case NOT_IMPLEMENTED :
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case INHERIT_DOC :
                                case OVERRIDE :
                                    if (!jsdocBuilder.recordOverride()) {
                                        parser.addTypeWarning("msg.jsdoc.override", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case THROWS :
                                    skipEOLs();
                                    token = next();
                                    lineno = stream.getLineno();
                                    charno = stream.getCharno();
                                    type = null;
                                    if (token == com.google.javascript.jscomp.parsing.JsDocToken.LC) {
                                        type = createJSTypeExpression(parseAndRecordTypeNode(token));
                                        if (type == null) {
                                            token = eatTokensUntilEOL();
                                            continue retry;
                                        }
                                    }
                                    token = current();
                                    jsdocBuilder.recordThrowType(type);
                                    if (jsdocBuilder.shouldParseDocumentation()) {
                                        com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo descriptionInfo = extractMultilineTextualBlock(token);
                                        java.lang.String description = descriptionInfo.string;
                                        if (description.length() > 0) {
                                            jsdocBuilder.recordThrowDescription(type, description);
                                        }
                                        token = descriptionInfo.token;
                                    } else {
                                        token = eatTokensUntilEOL(token);
                                    }
                                    continue retry;
                                case PARAM :
                                    skipEOLs();
                                    token = next();
                                    lineno = stream.getLineno();
                                    charno = stream.getCharno();
                                    type = null;
                                    if (token == com.google.javascript.jscomp.parsing.JsDocToken.LC) {
                                        type = createJSTypeExpression(parseAndRecordParamTypeNode(token));
                                        if (type == null) {
                                            token = eatTokensUntilEOL();
                                            continue retry;
                                        }
                                        skipEOLs();
                                        token = next();
                                        lineno = stream.getLineno();
                                        charno = stream.getCharno();
                                    }
                                    java.lang.String name = null;
                                    boolean isBracketedParam = com.google.javascript.jscomp.parsing.JsDocToken.LB == token;
                                    if (isBracketedParam) {
                                        token = next();
                                    }
                                    if (com.google.javascript.jscomp.parsing.JsDocToken.STRING != token) {
                                        parser.addTypeWarning("msg.missing.variable.name", lineno, charno);
                                    } else {
                                        name = stream.getString();
                                        if (isBracketedParam) {
                                            token = next();
                                            if (com.google.javascript.jscomp.parsing.JsDocToken.EQUALS == token) {
                                                token = next();
                                                if (com.google.javascript.jscomp.parsing.JsDocToken.STRING == token) {
                                                    token = next();
                                                }
                                            }
                                            if (com.google.javascript.jscomp.parsing.JsDocToken.RB != token) {
                                                reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
                                            } else if (type != null) {
                                                type = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(type);
                                            }
                                        }
                                        if (name.indexOf('.') > (-1)) {
                                            name = null;
                                        } else if (!jsdocBuilder.recordParameter(name, type)) {
                                            if (jsdocBuilder.hasParameter(name)) {
                                                parser.addTypeWarning("msg.dup.variable.name", name, lineno, charno);
                                            } else {
                                                parser.addTypeWarning("msg.jsdoc.incompat.type", name, lineno, charno);
                                            }
                                        }
                                    }
                                    if (name == null) {
                                        token = eatTokensUntilEOL(token);
                                        continue retry;
                                    }
                                    jsdocBuilder.markName(name, sourceFile, lineno, charno);
                                    if (jsdocBuilder.shouldParseDocumentation()) {
                                        com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo paramDescriptionInfo = extractMultilineTextualBlock(token);
                                        java.lang.String paramDescription = paramDescriptionInfo.string;
                                        if (paramDescription.length() > 0) {
                                            jsdocBuilder.recordParameterDescription(name, paramDescription);
                                        }
                                        token = paramDescriptionInfo.token;
                                    } else {
                                        token = eatTokensUntilEOL(token);
                                    }
                                    continue retry;
                                case PRESERVE_TRY :
                                    if (!jsdocBuilder.recordPreserveTry()) {
                                        parser.addParserWarning("msg.jsdoc.preservertry", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case NO_SHADOW :
                                    if (!jsdocBuilder.recordNoShadow()) {
                                        parser.addParserWarning("msg.jsdoc.noshadow", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case NO_SIDE_EFFECTS :
                                    if (!jsdocBuilder.recordNoSideEffects()) {
                                        parser.addParserWarning("msg.jsdoc.nosideeffects", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case MODIFIES :
                                    token = parseModifiesTag(next());
                                    continue retry;
                                case IMPLICIT_CAST :
                                    if (!jsdocBuilder.recordImplicitCast()) {
                                        parser.addTypeWarning("msg.jsdoc.implicitcast", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case SEE :
                                    if (jsdocBuilder.shouldParseDocumentation()) {
                                        com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo referenceInfo = extractSingleLineBlock();
                                        java.lang.String reference = referenceInfo.string;
                                        if (reference.length() == 0) {
                                            parser.addParserWarning("msg.jsdoc.seemissing", stream.getLineno(), stream.getCharno());
                                        } else {
                                            jsdocBuilder.addReference(reference);
                                        }
                                        token = referenceInfo.token;
                                    } else {
                                        token = eatTokensUntilEOL(token);
                                    }
                                    continue retry;
                                case STABLEIDGENERATOR :
                                    if (!jsdocBuilder.recordStableIdGenerator()) {
                                        parser.addParserWarning("msg.jsdoc.stableidgen", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case SUPPRESS :
                                    token = parseSuppressTag(next());
                                    continue retry;
                                case TEMPLATE :
                                    com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo templateInfo = extractSingleLineBlock();
                                    java.util.List<java.lang.String> names = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(',').trimResults().split(templateInfo.string));
                                    if ((names.size() == 0) || (names.get(0).length() == 0)) {
                                        parser.addTypeWarning("msg.jsdoc.templatemissing", stream.getLineno(), stream.getCharno());
                                    } else if (!jsdocBuilder.recordTemplateTypeNames(names)) {
                                        parser.addTypeWarning("msg.jsdoc.template.at.most.once", stream.getLineno(), stream.getCharno());
                                    }
                                    token = templateInfo.token;
                                    continue retry;
                                case IDGENERATOR :
                                    if (!jsdocBuilder.recordIdGenerator()) {
                                        parser.addParserWarning("msg.jsdoc.idgen", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case VERSION :
                                    com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo versionInfo = extractSingleLineBlock();
                                    java.lang.String version = versionInfo.string;
                                    if (version.length() == 0) {
                                        parser.addParserWarning("msg.jsdoc.versionmissing", stream.getLineno(), stream.getCharno());
                                    } else if (!jsdocBuilder.recordVersion(version)) {
                                        parser.addParserWarning("msg.jsdoc.extraversion", stream.getLineno(), stream.getCharno());
                                    }
                                    token = versionInfo.token;
                                    continue retry;
                                case CONSTANT :
                                case DEFINE :
                                case RETURN :
                                case PRIVATE :
                                case PROTECTED :
                                case PUBLIC :
                                case THIS :
                                case TYPE :
                                case TYPEDEF :
                                    lineno = stream.getLineno();
                                    charno = stream.getCharno();
                                    com.google.javascript.rhino.Node typeNode = null;
                                    boolean hasType = lookAheadForTypeAnnotation();
                                    boolean isAlternateTypeAnnotation = (((annotation == com.google.javascript.jscomp.parsing.Annotation.PRIVATE) || (annotation == com.google.javascript.jscomp.parsing.Annotation.PROTECTED)) || (annotation == com.google.javascript.jscomp.parsing.Annotation.PUBLIC)) || (annotation == com.google.javascript.jscomp.parsing.Annotation.CONSTANT);
                                    boolean canSkipTypeAnnotation = isAlternateTypeAnnotation || (annotation == com.google.javascript.jscomp.parsing.Annotation.RETURN);
                                    type = null;
                                    if (hasType || (!canSkipTypeAnnotation)) {
                                        skipEOLs();
                                        token = next();
                                        typeNode = parseAndRecordTypeNode(token);
                                        if (annotation == com.google.javascript.jscomp.parsing.Annotation.THIS) {
                                            typeNode = wrapNode(com.google.javascript.rhino.Token.BANG, typeNode);
                                        }
                                        type = createJSTypeExpression(typeNode);
                                    }
                                    boolean hasError = (type == null) && (!canSkipTypeAnnotation);
                                    if (!hasError) {
                                        if (((type != null) && isAlternateTypeAnnotation) || (annotation == com.google.javascript.jscomp.parsing.Annotation.TYPE)) {
                                            if (!jsdocBuilder.recordType(type)) {
                                                parser.addTypeWarning("msg.jsdoc.incompat.type", lineno, charno);
                                            }
                                        }
                                        switch (annotation) {
                                            case CONSTANT :
                                                if (!jsdocBuilder.recordConstancy()) {
                                                    parser.addParserWarning("msg.jsdoc.const", stream.getLineno(), stream.getCharno());
                                                }
                                                break;
                                            case DEFINE :
                                                if (!jsdocBuilder.recordDefineType(type)) {
                                                    parser.addParserWarning("msg.jsdoc.define", lineno, charno);
                                                }
                                                break;
                                            case PRIVATE :
                                                if (!jsdocBuilder.recordVisibility(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE)) {
                                                    parser.addParserWarning("msg.jsdoc.visibility.private", lineno, charno);
                                                }
                                                break;
                                            case PROTECTED :
                                                if (!jsdocBuilder.recordVisibility(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED)) {
                                                    parser.addParserWarning("msg.jsdoc.visibility.protected", lineno, charno);
                                                }
                                                break;
                                            case PUBLIC :
                                                if (!jsdocBuilder.recordVisibility(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC)) {
                                                    parser.addParserWarning("msg.jsdoc.visibility.public", lineno, charno);
                                                }
                                                break;
                                            case RETURN :
                                                if (type == null) {
                                                    type = createJSTypeExpression(newNode(com.google.javascript.rhino.Token.QMARK));
                                                }
                                                if (!jsdocBuilder.recordReturnType(type)) {
                                                    parser.addTypeWarning("msg.jsdoc.incompat.type", lineno, charno);
                                                    break;
                                                }
                                                if (jsdocBuilder.shouldParseDocumentation()) {
                                                    com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo returnDescriptionInfo = extractMultilineTextualBlock(token);
                                                    java.lang.String returnDescription = returnDescriptionInfo.string;
                                                    if (returnDescription.length() > 0) {
                                                        jsdocBuilder.recordReturnDescription(returnDescription);
                                                    }
                                                    token = returnDescriptionInfo.token;
                                                } else {
                                                    token = eatTokensUntilEOL(token);
                                                }
                                                continue retry;
                                            case THIS :
                                                if (!jsdocBuilder.recordThisType(type)) {
                                                    parser.addTypeWarning("msg.jsdoc.incompat.type", lineno, charno);
                                                }
                                                break;
                                            case TYPEDEF :
                                                if (!jsdocBuilder.recordTypedef(type)) {
                                                    parser.addTypeWarning("msg.jsdoc.incompat.type", lineno, charno);
                                                }
                                                break;
                                        }
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                            }
                        }
                    }
                    break;
                case EOC :
                    if (hasParsedFileOverviewDocInfo()) {
                        fileOverviewJSDocInfo = retrieveAndResetParsedJSDocInfo();
                    }
                    checkExtendedTypes(extendedTypes);
                    return true;
                case EOF :
                    jsdocBuilder.build(null);
                    parser.addParserWarning("msg.unexpected.eof", stream.getLineno(), stream.getCharno());
                    checkExtendedTypes(extendedTypes);
                    return false;
                case EOL :
                    if (state == com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_NEWLINE) {
                        state = com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_ANNOTATION;
                    }
                    token = next();
                    continue retry;
                default :
                    if ((token == com.google.javascript.jscomp.parsing.JsDocToken.STAR) && (state == com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_ANNOTATION)) {
                        token = next();
                        continue retry;
                    } else {
                        state = com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_NEWLINE;
                        token = eatTokensUntilEOL();
                        continue retry;
                    }
            }
            token = next();
        }
    }

    private void checkExtendedTypes(java.util.List<com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtendedTypeInfo> extendedTypes) {
        for (com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtendedTypeInfo typeInfo : extendedTypes) {
            if (jsdocBuilder.isInterfaceRecorded()) {
                if (!jsdocBuilder.recordExtendedInterface(typeInfo.type)) {
                    parser.addParserWarning("msg.jsdoc.extends.duplicate", typeInfo.lineno, typeInfo.charno);
                }
            } else if (!jsdocBuilder.recordBaseType(typeInfo.type)) {
                parser.addTypeWarning("msg.jsdoc.incompat.type", typeInfo.lineno, typeInfo.charno);
            }
        }
    }

    private com.google.javascript.jscomp.parsing.JsDocToken parseSuppressTag(com.google.javascript.jscomp.parsing.JsDocToken token) {
        if (token == com.google.javascript.jscomp.parsing.JsDocToken.LC) {
            java.util.Set<java.lang.String> suppressions = new java.util.HashSet<java.lang.String>();
            while (true) {
                if (match(com.google.javascript.jscomp.parsing.JsDocToken.STRING)) {
                    java.lang.String name = stream.getString();
                    if (!suppressionNames.contains(name)) {
                        parser.addParserWarning("msg.jsdoc.suppress.unknown", name, stream.getLineno(), stream.getCharno());
                    }
                    suppressions.add(stream.getString());
                    token = next();
                } else {
                    parser.addParserWarning("msg.jsdoc.suppress", stream.getLineno(), stream.getCharno());
                    return token;
                }
                if (match(com.google.javascript.jscomp.parsing.JsDocToken.PIPE)) {
                    token = next();
                } else {
                    break;
                }
            } 
            if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RC)) {
                parser.addParserWarning("msg.jsdoc.suppress", stream.getLineno(), stream.getCharno());
            } else {
                token = next();
                if (!jsdocBuilder.recordSuppressions(suppressions)) {
                    parser.addParserWarning("msg.jsdoc.suppress.duplicate", stream.getLineno(), stream.getCharno());
                }
            }
        }
        return token;
    }

    private com.google.javascript.jscomp.parsing.JsDocToken parseModifiesTag(com.google.javascript.jscomp.parsing.JsDocToken token) {
        if (token == com.google.javascript.jscomp.parsing.JsDocToken.LC) {
            java.util.Set<java.lang.String> modifies = new java.util.HashSet<java.lang.String>();
            while (true) {
                if (match(com.google.javascript.jscomp.parsing.JsDocToken.STRING)) {
                    java.lang.String name = stream.getString();
                    if ((!com.google.javascript.jscomp.parsing.JsDocInfoParser.modifiesAnnotationKeywords.contains(name)) && (!jsdocBuilder.hasParameter(name))) {
                        parser.addParserWarning("msg.jsdoc.modifies.unknown", name, stream.getLineno(), stream.getCharno());
                    }
                    modifies.add(stream.getString());
                    token = next();
                } else {
                    parser.addParserWarning("msg.jsdoc.modifies", stream.getLineno(), stream.getCharno());
                    return token;
                }
                if (match(com.google.javascript.jscomp.parsing.JsDocToken.PIPE)) {
                    token = next();
                } else {
                    break;
                }
            } 
            if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RC)) {
                parser.addParserWarning("msg.jsdoc.modifies", stream.getLineno(), stream.getCharno());
            } else {
                token = next();
                if (!jsdocBuilder.recordModifies(modifies)) {
                    parser.addParserWarning("msg.jsdoc.modifies.duplicate", stream.getLineno(), stream.getCharno());
                }
            }
        }
        return token;
    }

    private com.google.javascript.rhino.Node parseAndRecordTypeNode(com.google.javascript.jscomp.parsing.JsDocToken token) {
        return parseAndRecordTypeNode(token, token == com.google.javascript.jscomp.parsing.JsDocToken.LC);
    }

    private com.google.javascript.rhino.Node parseAndRecordTypeNode(com.google.javascript.jscomp.parsing.JsDocToken token, boolean matchingLC) {
        return parseAndRecordTypeNode(token, stream.getLineno(), stream.getCharno(), matchingLC, false);
    }

    private com.google.javascript.rhino.Node parseAndRecordTypeNameNode(com.google.javascript.jscomp.parsing.JsDocToken token, int lineno, int startCharno, boolean matchingLC) {
        return parseAndRecordTypeNode(token, lineno, startCharno, matchingLC, true);
    }

    private com.google.javascript.rhino.Node parseAndRecordParamTypeNode(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.common.base.Preconditions.checkArgument(token == com.google.javascript.jscomp.parsing.JsDocToken.LC);
        int lineno = stream.getLineno();
        int startCharno = stream.getCharno();
        com.google.javascript.rhino.Node typeNode = parseParamTypeExpressionAnnotation(token);
        if (typeNode != null) {
            int endLineno = stream.getLineno();
            int endCharno = stream.getCharno();
            jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endLineno, endCharno, true);
        }
        return typeNode;
    }

    private com.google.javascript.rhino.Node parseAndRecordTypeNode(com.google.javascript.jscomp.parsing.JsDocToken token, int lineno, int startCharno, boolean matchingLC, boolean onlyParseSimpleNames) {
        com.google.javascript.rhino.Node typeNode = null;
        if (onlyParseSimpleNames) {
            typeNode = parseTypeNameAnnotation(token);
        } else {
            typeNode = parseTypeExpressionAnnotation(token);
        }
        if (typeNode != null) {
            int endLineno = stream.getLineno();
            int endCharno = stream.getCharno();
            jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endLineno, endCharno, matchingLC);
        }
        return typeNode;
    }

    private java.lang.String toString(com.google.javascript.jscomp.parsing.JsDocToken token) {
        switch (token) {
            case ANNOTATION :
                return "@" + stream.getString();
            case BANG :
                return "!";
            case COMMA :
                return ",";
            case COLON :
                return ":";
            case GT :
                return ">";
            case LB :
                return "[";
            case LC :
                return "{";
            case LP :
                return "(";
            case LT :
                return ".<";
            case QMARK :
                return "?";
            case PIPE :
                return "|";
            case RB :
                return "]";
            case RC :
                return "}";
            case RP :
                return ")";
            case STAR :
                return "*";
            case ELLIPSIS :
                return "...";
            case EQUALS :
                return "=";
            case STRING :
                return stream.getString();
            default :
                throw new java.lang.IllegalStateException(token.toString());
        }
    }

    private com.google.javascript.rhino.JSTypeExpression createJSTypeExpression(com.google.javascript.rhino.Node n) {
        return n == null ? null : new com.google.javascript.rhino.JSTypeExpression(n, getSourceName());
    }

    private static class ExtractionInfo {
        private final java.lang.String string;

        private final com.google.javascript.jscomp.parsing.JsDocToken token;

        public ExtractionInfo(java.lang.String string, com.google.javascript.jscomp.parsing.JsDocToken token) {
            this.string = string;
            this.token = token;
        }
    }

    private static class ExtendedTypeInfo {
        final com.google.javascript.rhino.JSTypeExpression type;

        final int lineno;

        final int charno;

        public ExtendedTypeInfo(com.google.javascript.rhino.JSTypeExpression type, int lineno, int charno) {
            this.type = type;
            this.lineno = lineno;
            this.charno = charno;
        }
    }

    private com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo extractSingleLineBlock() {
        stream.update();
        int lineno = stream.getLineno();
        int charno = stream.getCharno() + 1;
        java.lang.String line = stream.getRemainingJSDocLine().trim();
        if (line.length() > 0) {
            jsdocBuilder.markText(line, lineno, charno, lineno, charno + line.length());
        }
        return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(line, next());
    }

    private com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo extractMultilineTextualBlock(com.google.javascript.jscomp.parsing.JsDocToken token) {
        return extractMultilineTextualBlock(token, com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.SINGLE_LINE);
    }

    private enum WhitespaceOption {

        PRESERVE,
        TRIM,
        SINGLE_LINE;}

    @java.lang.SuppressWarnings("fallthrough")
    private com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo extractMultilineTextualBlock(com.google.javascript.jscomp.parsing.JsDocToken token, com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption option) {
        if (((token == com.google.javascript.jscomp.parsing.JsDocToken.EOC) || (token == com.google.javascript.jscomp.parsing.JsDocToken.EOL)) || (token == com.google.javascript.jscomp.parsing.JsDocToken.EOF)) {
            return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo("", token);
        }
        stream.update();
        int startLineno = stream.getLineno();
        int startCharno = stream.getCharno() + 1;
        java.lang.String line = stream.getRemainingJSDocLine();
        if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) {
            line = line.trim();
        }
        java.lang.StringBuilder builder = new java.lang.StringBuilder();
        builder.append(line);
        state = com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_ANNOTATION;
        token = next();
        boolean ignoreStar = false;
        int lineStartChar = -1;
        do {
            switch (token) {
                case STAR :
                    if (ignoreStar) {
                        lineStartChar = stream.getCharno() + 1;
                    } else {
                        if (builder.length() > 0) {
                            builder.append(' ');
                        }
                        builder.append('*');
                    }
                    token = next();
                    continue;
                case EOL :
                    if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.SINGLE_LINE) {
                        builder.append("\n");
                    }
                    ignoreStar = true;
                    lineStartChar = 0;
                    token = next();
                    continue;
                default :
                    ignoreStar = false;
                    state = com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_ANNOTATION;
                    boolean isEOC = token == com.google.javascript.jscomp.parsing.JsDocToken.EOC;
                    if (!isEOC) {
                        if ((lineStartChar != (-1)) && (option == com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE)) {
                            int numSpaces = stream.getCharno() - lineStartChar;
                            for (int i = 0; i < numSpaces; i++) {
                                builder.append(' ');
                            }
                            lineStartChar = -1;
                        } else if (builder.length() > 0) {
                            builder.append(' ');
                        }
                    }
                    if (((token == com.google.javascript.jscomp.parsing.JsDocToken.EOC) || (token == com.google.javascript.jscomp.parsing.JsDocToken.EOF)) || ((token == com.google.javascript.jscomp.parsing.JsDocToken.ANNOTATION) && (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE))) {
                        java.lang.String multilineText = builder.toString();
                        if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) {
                            multilineText = multilineText.trim();
                        }
                        int endLineno = stream.getLineno();
                        int endCharno = stream.getCharno();
                        if (multilineText.length() > 0) {
                            jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);
                        }
                        return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(multilineText, token);
                    }
                    builder.append(toString(token));
                    line = stream.getRemainingJSDocLine();
                    if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) {
                        line = com.google.javascript.jscomp.parsing.JsDocInfoParser.trimEnd(line);
                    }
                    builder.append(line);
                    token = next();
            }
        } while (true );
    }

    private com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo extractBlockComment(com.google.javascript.jscomp.parsing.JsDocToken token) {
        java.lang.StringBuilder builder = new java.lang.StringBuilder();
        boolean ignoreStar = true;
        do {
            switch (token) {
                case ANNOTATION :
                case EOC :
                case EOF :
                    return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(builder.toString().trim(), token);
                case STAR :
                    if (!ignoreStar) {
                        if (builder.length() > 0) {
                            builder.append(' ');
                        }
                        builder.append('*');
                    }
                    token = next();
                    continue;
                case EOL :
                    ignoreStar = true;
                    builder.append('\n');
                    token = next();
                    continue;
                default :
                    if ((!ignoreStar) && (builder.length() > 0)) {
                        builder.append(' ');
                    }
                    ignoreStar = false;
                    builder.append(toString(token));
                    java.lang.String line = stream.getRemainingJSDocLine();
                    line = com.google.javascript.jscomp.parsing.JsDocInfoParser.trimEnd(line);
                    builder.append(line);
                    token = next();
            }
        } while (true );
    }

    private static java.lang.String trimEnd(java.lang.String s) {
        int trimCount = 0;
        while (trimCount < s.length()) {
            char ch = s.charAt((s.length() - trimCount) - 1);
            if (java.lang.Character.isWhitespace(ch)) {
                trimCount++;
            } else {
                break;
            }
        } 
        if (trimCount == 0) {
            return s;
        }
        return s.substring(0, s.length() - trimCount);
    }

    private com.google.javascript.rhino.Node parseTypeExpressionAnnotation(com.google.javascript.jscomp.parsing.JsDocToken token) {
        if (token == com.google.javascript.jscomp.parsing.JsDocToken.LC) {
            skipEOLs();
            com.google.javascript.rhino.Node typeNode = parseTopLevelTypeExpression(next());
            if (typeNode != null) {
                skipEOLs();
                if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RC)) {
                    reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
                } else {
                    next();
                }
            }
            return typeNode;
        } else {
            return parseTypeExpression(token);
        }
    }

    private com.google.javascript.rhino.Node parseParamTypeExpressionAnnotation(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.common.base.Preconditions.checkArgument(token == com.google.javascript.jscomp.parsing.JsDocToken.LC);
        skipEOLs();
        boolean restArg = false;
        token = next();
        if (token == com.google.javascript.jscomp.parsing.JsDocToken.ELLIPSIS) {
            token = next();
            if (token == com.google.javascript.jscomp.parsing.JsDocToken.RC) {
                return wrapNode(com.google.javascript.rhino.Token.ELLIPSIS, com.google.javascript.rhino.IR.empty());
            }
            restArg = true;
        }
        com.google.javascript.rhino.Node typeNode = parseTopLevelTypeExpression(token);
        if (typeNode != null) {
            skipEOLs();
            if (restArg) {
                typeNode = wrapNode(com.google.javascript.rhino.Token.ELLIPSIS, typeNode);
            } else if (match(com.google.javascript.jscomp.parsing.JsDocToken.EQUALS)) {
                next();
                skipEOLs();
                typeNode = wrapNode(com.google.javascript.rhino.Token.EQUALS, typeNode);
            }
            if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RC)) {
                reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
            } else {
                next();
            }
        }
        return typeNode;
    }

    private com.google.javascript.rhino.Node parseTypeNameAnnotation(com.google.javascript.jscomp.parsing.JsDocToken token) {
        if (token == com.google.javascript.jscomp.parsing.JsDocToken.LC) {
            skipEOLs();
            com.google.javascript.rhino.Node typeNode = parseTypeName(next());
            if (typeNode != null) {
                skipEOLs();
                if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RC)) {
                    reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
                } else {
                    next();
                }
            }
            return typeNode;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(111).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.fileLevelJsDocBuilder",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.fileLevelJsDocBuilder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.fileOverviewJSDocInfo",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.fileOverviewJSDocInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.parser",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.parser);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.associatedNode",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.associatedNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.suppressionNames",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.suppressionNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.templateNode",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.templateNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.sourceFile",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.sourceFile);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.jsdocBuilder",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.jsdocBuilder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.stream",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.stream);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.NO_UNREAD_TOKEN",com.google.javascript.jscomp.parsing.JsDocInfoParser.NO_UNREAD_TOKEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("token",token);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.modifiesAnnotationKeywords",com.google.javascript.jscomp.parsing.JsDocInfoParser.modifiesAnnotationKeywords);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.annotationNames",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.annotationNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.unreadToken",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.unreadToken);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.errorReporter",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.errorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.state",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.state);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectionEnds();
            }
            if (runtimeAngelicValue)
                return parseTypeName(token);

        }
    }

    private com.google.javascript.rhino.Node parseTopLevelTypeExpression(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.javascript.rhino.Node typeExpr = parseTypeExpression(token);
        if (typeExpr != null) {
            if (match(com.google.javascript.jscomp.parsing.JsDocToken.PIPE)) {
                next();
                if (match(com.google.javascript.jscomp.parsing.JsDocToken.PIPE)) {
                    next();
                }
                skipEOLs();
                token = next();
                return parseUnionTypeWithAlternate(token, typeExpr);
            }
        }
        return typeExpr;
    }

    private com.google.javascript.rhino.Node parseTypeExpressionList(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.javascript.rhino.Node typeExpr = parseTopLevelTypeExpression(token);
        if (typeExpr == null) {
            return null;
        }
        com.google.javascript.rhino.Node typeList = com.google.javascript.rhino.IR.block();
        typeList.addChildToBack(typeExpr);
        while (match(com.google.javascript.jscomp.parsing.JsDocToken.COMMA)) {
            next();
            skipEOLs();
            typeExpr = parseTopLevelTypeExpression(next());
            if (typeExpr == null) {
                return null;
            }
            typeList.addChildToBack(typeExpr);
        } 
        return typeList;
    }

    private com.google.javascript.rhino.Node parseTypeExpression(com.google.javascript.jscomp.parsing.JsDocToken token) {
        if (token == com.google.javascript.jscomp.parsing.JsDocToken.QMARK) {
            token = next();
            if (((((((token == com.google.javascript.jscomp.parsing.JsDocToken.COMMA) || (token == com.google.javascript.jscomp.parsing.JsDocToken.EQUALS)) || (token == com.google.javascript.jscomp.parsing.JsDocToken.RB)) || (token == com.google.javascript.jscomp.parsing.JsDocToken.RC)) || (token == com.google.javascript.jscomp.parsing.JsDocToken.RP)) || (token == com.google.javascript.jscomp.parsing.JsDocToken.PIPE)) || (token == com.google.javascript.jscomp.parsing.JsDocToken.GT)) {
                restoreLookAhead(token);
                return newNode(com.google.javascript.rhino.Token.QMARK);
            }
            return wrapNode(com.google.javascript.rhino.Token.QMARK, parseBasicTypeExpression(token));
        } else if (token == com.google.javascript.jscomp.parsing.JsDocToken.BANG) {
            return wrapNode(com.google.javascript.rhino.Token.BANG, parseBasicTypeExpression(next()));
        } else {
            com.google.javascript.rhino.Node basicTypeExpr = parseBasicTypeExpression(token);
            if (basicTypeExpr != null) {
                if (match(com.google.javascript.jscomp.parsing.JsDocToken.QMARK)) {
                    next();
                    return wrapNode(com.google.javascript.rhino.Token.QMARK, basicTypeExpr);
                } else if (match(com.google.javascript.jscomp.parsing.JsDocToken.BANG)) {
                    next();
                    return wrapNode(com.google.javascript.rhino.Token.BANG, basicTypeExpr);
                }
            }
            return basicTypeExpr;
        }
    }

    private com.google.javascript.rhino.Node parseBasicTypeExpression(com.google.javascript.jscomp.parsing.JsDocToken token) {
        if (token == com.google.javascript.jscomp.parsing.JsDocToken.STAR) {
            return newNode(com.google.javascript.rhino.Token.STAR);
        } else if (token == com.google.javascript.jscomp.parsing.JsDocToken.LB) {
            skipEOLs();
            return parseArrayType(next());
        } else if (token == com.google.javascript.jscomp.parsing.JsDocToken.LC) {
            skipEOLs();
            return parseRecordType(next());
        } else if (token == com.google.javascript.jscomp.parsing.JsDocToken.LP) {
            skipEOLs();
            return parseUnionType(next());
        } else if (token == com.google.javascript.jscomp.parsing.JsDocToken.STRING) {
            java.lang.String string = stream.getString();
            if ("function".equals(string)) {
                skipEOLs();
                return parseFunctionType(next());
            } else if ("null".equals(string) || "undefined".equals(string)) {
                return newStringNode(string);
            } else {
                return parseTypeName(token);
            }
        }
        restoreLookAhead(token);
        return reportGenericTypeSyntaxWarning();
    }

    private com.google.javascript.rhino.Node parseTypeName(com.google.javascript.jscomp.parsing.JsDocToken token) {
        if (token != com.google.javascript.jscomp.parsing.JsDocToken.STRING) {
            return reportGenericTypeSyntaxWarning();
        }
        java.lang.String typeName = stream.getString();
        int lineno = stream.getLineno();
        int charno = stream.getCharno();
        while (match(com.google.javascript.jscomp.parsing.JsDocToken.EOL) && (typeName.charAt(typeName.length() - 1) == '.')) {
            skipEOLs();
            if (match(com.google.javascript.jscomp.parsing.JsDocToken.STRING)) {
                next();
                typeName += stream.getString();
            }
        } 
        com.google.javascript.rhino.Node typeNameNode = newStringNode(typeName, lineno, charno);
        if (match(com.google.javascript.jscomp.parsing.JsDocToken.LT)) {
            next();
            skipEOLs();
            com.google.javascript.rhino.Node memberType = parseTypeExpressionList(next());
            if (memberType != null) {
                typeNameNode.addChildToFront(memberType);
                skipEOLs();
                if (!match(com.google.javascript.jscomp.parsing.JsDocToken.GT)) {
                    return reportTypeSyntaxWarning("msg.jsdoc.missing.gt");
                }
                next();
            }
        }
        return typeNameNode;
    }

    private com.google.javascript.rhino.Node parseFunctionType(com.google.javascript.jscomp.parsing.JsDocToken token) {
        if (token != com.google.javascript.jscomp.parsing.JsDocToken.LP) {
            restoreLookAhead(token);
            return reportTypeSyntaxWarning("msg.jsdoc.missing.lp");
        }
        com.google.javascript.rhino.Node functionType = newNode(com.google.javascript.rhino.Token.FUNCTION);
        com.google.javascript.rhino.Node parameters = null;
        skipEOLs();
        if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RP)) {
            token = next();
            boolean hasParams = true;
            if (token == com.google.javascript.jscomp.parsing.JsDocToken.STRING) {
                java.lang.String tokenStr = stream.getString();
                boolean isThis = "this".equals(tokenStr);
                boolean isNew = "new".equals(tokenStr);
                if (isThis || isNew) {
                    if (match(com.google.javascript.jscomp.parsing.JsDocToken.COLON)) {
                        next();
                        skipEOLs();
                        com.google.javascript.rhino.Node contextType = wrapNode(isThis ? com.google.javascript.rhino.Token.THIS : com.google.javascript.rhino.Token.NEW, parseTypeName(next()));
                        if (contextType == null) {
                            return null;
                        }
                        functionType.addChildToFront(contextType);
                    } else {
                        return reportTypeSyntaxWarning("msg.jsdoc.missing.colon");
                    }
                    if (match(com.google.javascript.jscomp.parsing.JsDocToken.COMMA)) {
                        next();
                        skipEOLs();
                        token = next();
                    } else {
                        hasParams = false;
                    }
                }
            }
            if (hasParams) {
                parameters = parseParametersType(token);
                if (parameters == null) {
                    return null;
                }
            }
        }
        if (parameters != null) {
            functionType.addChildToBack(parameters);
        }
        skipEOLs();
        if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RP)) {
            return reportTypeSyntaxWarning("msg.jsdoc.missing.rp");
        }
        skipEOLs();
        com.google.javascript.rhino.Node resultType = parseResultType(next());
        if (resultType == null) {
            return null;
        } else {
            functionType.addChildToBack(resultType);
        }
        return functionType;
    }

    private com.google.javascript.rhino.Node parseParametersType(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.javascript.rhino.Node paramsType = newNode(com.google.javascript.rhino.Token.PARAM_LIST);
        boolean isVarArgs = false;
        com.google.javascript.rhino.Node paramType = null;
        if (token != com.google.javascript.jscomp.parsing.JsDocToken.RP) {
            do {
                if (paramType != null) {
                    next();
                    skipEOLs();
                    token = next();
                }
                if (token == com.google.javascript.jscomp.parsing.JsDocToken.ELLIPSIS) {
                    skipEOLs();
                    if (match(com.google.javascript.jscomp.parsing.JsDocToken.RP)) {
                        paramType = newNode(com.google.javascript.rhino.Token.ELLIPSIS);
                    } else {
                        skipEOLs();
                        if (!match(com.google.javascript.jscomp.parsing.JsDocToken.LB)) {
                            return reportTypeSyntaxWarning("msg.jsdoc.missing.lb");
                        }
                        next();
                        skipEOLs();
                        paramType = wrapNode(com.google.javascript.rhino.Token.ELLIPSIS, parseTypeExpression(next()));
                        skipEOLs();
                        if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RB)) {
                            return reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
                        }
                        skipEOLs();
                        next();
                    }
                    isVarArgs = true;
                } else {
                    paramType = parseTypeExpression(token);
                    if (match(com.google.javascript.jscomp.parsing.JsDocToken.EQUALS)) {
                        skipEOLs();
                        next();
                        paramType = wrapNode(com.google.javascript.rhino.Token.EQUALS, paramType);
                    }
                }
                if (paramType == null) {
                    return null;
                }
                paramsType.addChildToBack(paramType);
                if (isVarArgs) {
                    break;
                }
            } while (match(com.google.javascript.jscomp.parsing.JsDocToken.COMMA) );
        }
        if (isVarArgs && match(com.google.javascript.jscomp.parsing.JsDocToken.COMMA)) {
            return reportTypeSyntaxWarning("msg.jsdoc.function.varargs");
        }
        return paramsType;
    }

    private com.google.javascript.rhino.Node parseResultType(com.google.javascript.jscomp.parsing.JsDocToken token) {
        skipEOLs();
        if (!match(com.google.javascript.jscomp.parsing.JsDocToken.COLON)) {
            return newNode(com.google.javascript.rhino.Token.EMPTY);
        }
        token = next();
        skipEOLs();
        if (match(com.google.javascript.jscomp.parsing.JsDocToken.STRING) && "void".equals(stream.getString())) {
            next();
            return newNode(com.google.javascript.rhino.Token.VOID);
        } else {
            return parseTypeExpression(next());
        }
    }

    private com.google.javascript.rhino.Node parseUnionType(com.google.javascript.jscomp.parsing.JsDocToken token) {
        return parseUnionTypeWithAlternate(token, null);
    }

    private com.google.javascript.rhino.Node parseUnionTypeWithAlternate(com.google.javascript.jscomp.parsing.JsDocToken token, com.google.javascript.rhino.Node alternate) {
        com.google.javascript.rhino.Node union = newNode(com.google.javascript.rhino.Token.PIPE);
        if (alternate != null) {
            union.addChildToBack(alternate);
        }
        com.google.javascript.rhino.Node expr = null;
        do {
            if (expr != null) {
                skipEOLs();
                token = next();
                com.google.common.base.Preconditions.checkState((token == com.google.javascript.jscomp.parsing.JsDocToken.PIPE) || (token == com.google.javascript.jscomp.parsing.JsDocToken.COMMA));
                boolean isPipe = token == com.google.javascript.jscomp.parsing.JsDocToken.PIPE;
                if (isPipe && match(com.google.javascript.jscomp.parsing.JsDocToken.PIPE)) {
                    next();
                }
                skipEOLs();
                token = next();
            }
            expr = parseTypeExpression(token);
            if (expr == null) {
                return null;
            }
            union.addChildToBack(expr);
        } while (match(com.google.javascript.jscomp.parsing.JsDocToken.PIPE, com.google.javascript.jscomp.parsing.JsDocToken.COMMA) );
        if (alternate == null) {
            skipEOLs();
            if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RP)) {
                return reportTypeSyntaxWarning("msg.jsdoc.missing.rp");
            }
            next();
        }
        return union;
    }

    private com.google.javascript.rhino.Node parseArrayType(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.javascript.rhino.Node array = newNode(com.google.javascript.rhino.Token.LB);
        com.google.javascript.rhino.Node arg = null;
        boolean hasVarArgs = false;
        do {
            if (arg != null) {
                next();
                skipEOLs();
                token = next();
            }
            if (token == com.google.javascript.jscomp.parsing.JsDocToken.ELLIPSIS) {
                arg = wrapNode(com.google.javascript.rhino.Token.ELLIPSIS, parseTypeExpression(next()));
                hasVarArgs = true;
            } else {
                arg = parseTypeExpression(token);
            }
            if (arg == null) {
                return null;
            }
            array.addChildToBack(arg);
            if (hasVarArgs) {
                break;
            }
            skipEOLs();
        } while (match(com.google.javascript.jscomp.parsing.JsDocToken.COMMA) );
        if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RB)) {
            return reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
        }
        next();
        return array;
    }

    private com.google.javascript.rhino.Node parseRecordType(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.javascript.rhino.Node recordType = newNode(com.google.javascript.rhino.Token.LC);
        com.google.javascript.rhino.Node fieldTypeList = parseFieldTypeList(token);
        if (fieldTypeList == null) {
            return reportGenericTypeSyntaxWarning();
        }
        skipEOLs();
        if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RC)) {
            return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
        }
        next();
        recordType.addChildToBack(fieldTypeList);
        return recordType;
    }

    private com.google.javascript.rhino.Node parseFieldTypeList(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.javascript.rhino.Node fieldTypeList = newNode(com.google.javascript.rhino.Token.LB);
        do {
            com.google.javascript.rhino.Node fieldType = parseFieldType(token);
            if (fieldType == null) {
                return null;
            }
            fieldTypeList.addChildToBack(fieldType);
            skipEOLs();
            if (!match(com.google.javascript.jscomp.parsing.JsDocToken.COMMA)) {
                break;
            }
            next();
            skipEOLs();
            token = next();
        } while (true );
        return fieldTypeList;
    }

    private com.google.javascript.rhino.Node parseFieldType(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.javascript.rhino.Node fieldName = parseFieldName(token);
        if (fieldName == null) {
            return null;
        }
        skipEOLs();
        if (!match(com.google.javascript.jscomp.parsing.JsDocToken.COLON)) {
            return fieldName;
        }
        next();
        skipEOLs();
        com.google.javascript.rhino.Node typeExpression = parseTypeExpression(next());
        if (typeExpression == null) {
            return null;
        }
        com.google.javascript.rhino.Node fieldType = newNode(com.google.javascript.rhino.Token.COLON);
        fieldType.addChildToBack(fieldName);
        fieldType.addChildToBack(typeExpression);
        return fieldType;
    }

    private com.google.javascript.rhino.Node parseFieldName(com.google.javascript.jscomp.parsing.JsDocToken token) {
        switch (token) {
            case STRING :
                java.lang.String string = stream.getString();
                return newStringNode(string);
            default :
                return null;
        }
    }

    private com.google.javascript.rhino.Node wrapNode(int type, com.google.javascript.rhino.Node n) {
        return n == null ? null : new com.google.javascript.rhino.Node(type, n, stream.getLineno(), stream.getCharno()).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type) {
        return new com.google.javascript.rhino.Node(type, stream.getLineno(), stream.getCharno()).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(java.lang.String s) {
        return newStringNode(s, stream.getLineno(), stream.getCharno());
    }

    private com.google.javascript.rhino.Node newStringNode(java.lang.String s, int lineno, int charno) {
        com.google.javascript.rhino.Node n = com.google.javascript.rhino.Node.newString(s, lineno, charno).clonePropsFrom(templateNode);
        n.setLength(s.length());
        return n;
    }

    private com.google.javascript.rhino.Node createTemplateNode() {
        com.google.javascript.rhino.Node templateNode = com.google.javascript.rhino.IR.script();
        templateNode.setStaticSourceFile(this.associatedNode != null ? this.associatedNode.getStaticSourceFile() : null);
        return templateNode;
    }

    private com.google.javascript.rhino.Node reportTypeSyntaxWarning(java.lang.String warning) {
        parser.addTypeWarning(warning, stream.getLineno(), stream.getCharno());
        return null;
    }

    private com.google.javascript.rhino.Node reportGenericTypeSyntaxWarning() {
        return reportTypeSyntaxWarning("msg.jsdoc.type.syntax");
    }

    private com.google.javascript.jscomp.parsing.JsDocToken eatTokensUntilEOL() {
        return eatTokensUntilEOL(next());
    }

    private com.google.javascript.jscomp.parsing.JsDocToken eatTokensUntilEOL(com.google.javascript.jscomp.parsing.JsDocToken token) {
        do {
            if (((token == com.google.javascript.jscomp.parsing.JsDocToken.EOL) || (token == com.google.javascript.jscomp.parsing.JsDocToken.EOC)) || (token == com.google.javascript.jscomp.parsing.JsDocToken.EOF)) {
                state = com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_ANNOTATION;
                return token;
            }
            token = next();
        } while (true );
    }

    private static final com.google.javascript.jscomp.parsing.JsDocToken NO_UNREAD_TOKEN = null;

    private com.google.javascript.jscomp.parsing.JsDocToken unreadToken = com.google.javascript.jscomp.parsing.JsDocInfoParser.NO_UNREAD_TOKEN;

    private void restoreLookAhead(com.google.javascript.jscomp.parsing.JsDocToken token) {
        unreadToken = token;
    }

    private boolean match(com.google.javascript.jscomp.parsing.JsDocToken token) {
        unreadToken = next();
        return unreadToken == token;
    }

    private boolean match(com.google.javascript.jscomp.parsing.JsDocToken token1, com.google.javascript.jscomp.parsing.JsDocToken token2) {
        unreadToken = next();
        return (unreadToken == token1) || (unreadToken == token2);
    }

    private com.google.javascript.jscomp.parsing.JsDocToken next() {
        if (unreadToken == com.google.javascript.jscomp.parsing.JsDocInfoParser.NO_UNREAD_TOKEN) {
            return stream.getJsDocToken();
        } else {
            return current();
        }
    }

    private com.google.javascript.jscomp.parsing.JsDocToken current() {
        com.google.javascript.jscomp.parsing.JsDocToken t = unreadToken;
        unreadToken = com.google.javascript.jscomp.parsing.JsDocInfoParser.NO_UNREAD_TOKEN;
        return t;
    }

    private void skipEOLs() {
        while (match(com.google.javascript.jscomp.parsing.JsDocToken.EOL)) {
            next();
            if (match(com.google.javascript.jscomp.parsing.JsDocToken.STAR)) {
                next();
            }
        } 
    }

    private boolean hasParsedFileOverviewDocInfo() {
        return jsdocBuilder.isPopulatedWithFileOverview();
    }

    boolean hasParsedJSDocInfo() {
        return jsdocBuilder.isPopulated();
    }

    com.google.javascript.rhino.JSDocInfo retrieveAndResetParsedJSDocInfo() {
        return jsdocBuilder.build(associatedNode);
    }

    com.google.javascript.rhino.JSDocInfo getFileOverviewJSDocInfo() {
        return fileOverviewJSDocInfo;
    }

    private boolean lookAheadForTypeAnnotation() {
        boolean matchedLc = false;
        int c;
        while (true) {
            c = stream.getChar();
            if (c == ' ') {
                continue;
            } else if (c == '{') {
                matchedLc = true;
                break;
            } else {
                break;
            }
        } 
        stream.ungetChar(c);
        return matchedLc;
    }
}
[9089462] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659823023010
GPR[SSUN]-1659823023010
-179796259
GPR[SPVATF]-1659823023338
GPR[EPVATF]-1659823025461
GPR[SPS]-1659823025461
[9092889] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1649.
GPR[EPS]-1659823026437
GPR[ESUN]-1659823026437
GPR[SSUN]-1659823026437
-179796259
GPR[SPVATF]-1659823026702
GPR[EPVATF]-1659823028963
GPR[SPS]-1659823028963
[9096388] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1191.
GPR[EPS]-1659823029936
GPR[ESUN]-1659823029936
GPR[SSUN]-1659823029936
-179796259
GPR[ESUN]-1659823030201
GPR[SSUN]-1659823030201
-179796259
GPR[ESUN]-1659823030465
GPR[SSUN]-1659823030465
-179796259
GPR[SPVATF]-1659823030723
GPR[EPVATF]-1659823033234
GPR[SPS]-1659823033234
[9100659] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:462.
GPR[EPS]-1659823034207
GPR[SPVATF]-1659823034207
GPR[EPVATF]-1659823036700
GPR[SPS]-1659823036700
[9104375] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:462.
GPR[EPS]-1659823037923
GPR[ESUN]-1659823037923
GPR[SSUN]-1659823037923
-179796259
GPR[SPVATF]-1659823038225
GPR[EPVATF]-1659823040755
GPR[SPS]-1659823040755
[9108181] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:461.
GPR[EPS]-1659823041729
GPR[ESUN]-1659823041729
GPR[SSUN]-1659823041729
-179796259
GPR[SPVATF]-1659823042004
GPR[EPVATF]-1659823044657
GPR[SPS]-1659823044657
[9112490] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:449.
GPR[EPS]-1659823046038
GPR[SPVATF]-1659823046038
GPR[EPVATF]-1659823048567
GPR[SPS]-1659823048567
[9116008] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:449.
GPR[EPS]-1659823049556
GPR[ESUN]-1659823049556
GPR[SSUN]-1659823049556
-179796259
GPR[SPVATF]-1659823049816
GPR[EPVATF]-1659823052355
GPR[SPS]-1659823052355
[9119852] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class JsDocInfoParser {
    private final com.google.javascript.jscomp.parsing.JsDocTokenStream stream;

    private final com.google.javascript.rhino.JSDocInfoBuilder jsdocBuilder;

    private final com.google.javascript.rhino.jstype.StaticSourceFile sourceFile;

    private final com.google.javascript.rhino.Node associatedNode;

    private final com.google.javascript.rhino.head.ErrorReporter errorReporter;

    private final com.google.javascript.jscomp.parsing.JsDocInfoParser.ErrorReporterParser parser = new com.google.javascript.jscomp.parsing.JsDocInfoParser.ErrorReporterParser();

    private final com.google.javascript.rhino.Node templateNode;

    private class ErrorReporterParser {
        void addParserWarning(java.lang.String messageId, java.lang.String messageArg, int lineno, int charno) {
            errorReporter.warning(com.google.javascript.rhino.ScriptRuntime.getMessage1(messageId, messageArg), getSourceName(), lineno, null, charno);
        }

        void addParserWarning(java.lang.String messageId, int lineno, int charno) {
            errorReporter.warning(com.google.javascript.rhino.ScriptRuntime.getMessage0(messageId), getSourceName(), lineno, null, charno);
        }

        void addTypeWarning(java.lang.String messageId, java.lang.String messageArg, int lineno, int charno) {
            errorReporter.warning("Bad type annotation. " + com.google.javascript.rhino.ScriptRuntime.getMessage1(messageId, messageArg), getSourceName(), lineno, null, charno);
        }

        void addTypeWarning(java.lang.String messageId, int lineno, int charno) {
            errorReporter.warning("Bad type annotation. " + com.google.javascript.rhino.ScriptRuntime.getMessage0(messageId), getSourceName(), lineno, null, charno);
        }
    }

    private com.google.javascript.rhino.JSDocInfo fileOverviewJSDocInfo = null;

    private com.google.javascript.jscomp.parsing.JsDocInfoParser.State state;

    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.parsing.Annotation> annotationNames;

    private final java.util.Set<java.lang.String> suppressionNames;

    private static final java.util.Set<java.lang.String> modifiesAnnotationKeywords = com.google.common.collect.ImmutableSet.<java.lang.String>of("this", "arguments");

    private com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder;

    void setFileLevelJsDocBuilder(com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder) {
        this.fileLevelJsDocBuilder = fileLevelJsDocBuilder;
    }

    void setFileOverviewJSDocInfo(com.google.javascript.rhino.JSDocInfo fileOverviewJSDocInfo) {
        this.fileOverviewJSDocInfo = fileOverviewJSDocInfo;
    }

    private enum State {

        SEARCHING_ANNOTATION,
        SEARCHING_NEWLINE,
        NEXT_IS_ANNOTATION;}

    JsDocInfoParser(com.google.javascript.jscomp.parsing.JsDocTokenStream stream, com.google.javascript.rhino.head.ast.Comment commentNode, com.google.javascript.rhino.Node associatedNode, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        this.stream = stream;
        this.associatedNode = associatedNode;
        this.sourceFile = (associatedNode == null) ? null : associatedNode.getStaticSourceFile();
        this.jsdocBuilder = new com.google.javascript.rhino.JSDocInfoBuilder(config.parseJsDocDocumentation);
        if (commentNode != null) {
            this.jsdocBuilder.recordOriginalCommentString(commentNode.getValue());
        }
        this.annotationNames = config.annotationNames;
        this.suppressionNames = config.suppressionNames;
        this.errorReporter = errorReporter;
        this.templateNode = this.createTemplateNode();
    }

    private java.lang.String getSourceName() {
        return sourceFile == null ? null : sourceFile.getName();
    }

    public static com.google.javascript.rhino.Node parseTypeString(java.lang.String typeString) {
        com.google.javascript.jscomp.parsing.Config config = new com.google.javascript.jscomp.parsing.Config(com.google.common.collect.Sets.<java.lang.String>newHashSet(), com.google.common.collect.Sets.<java.lang.String>newHashSet(), false, com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT3, false);
        com.google.javascript.jscomp.parsing.JsDocInfoParser parser = new com.google.javascript.jscomp.parsing.JsDocInfoParser(new com.google.javascript.jscomp.parsing.JsDocTokenStream(typeString), null, null, config, com.google.javascript.jscomp.parsing.NullErrorReporter.forNewRhino());
        return parser.parseTopLevelTypeExpression(parser.next());
    }

    boolean parse() {
        int lineno;
        int charno;
        com.google.javascript.rhino.JSTypeExpression type;
        state = com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_ANNOTATION;
        skipEOLs();
        com.google.javascript.jscomp.parsing.JsDocToken token = next();
        java.util.List<com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtendedTypeInfo> extendedTypes = com.google.common.collect.Lists.newArrayList();
        if (jsdocBuilder.shouldParseDocumentation()) {
            com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo blockInfo = extractBlockComment(token);
            token = blockInfo.token;
            if (!blockInfo.string.isEmpty()) {
                jsdocBuilder.recordBlockDescription(blockInfo.string);
            }
        } else if ((token != com.google.javascript.jscomp.parsing.JsDocToken.ANNOTATION) && (token != com.google.javascript.jscomp.parsing.JsDocToken.EOC)) {
            jsdocBuilder.recordBlockDescription("");
        }
        retry : for (; ;) {
            switch (token) {
                case ANNOTATION :
                    if (state == com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_ANNOTATION) {
                        state = com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_NEWLINE;
                        lineno = stream.getLineno();
                        charno = stream.getCharno();
                        java.lang.String annotationName = stream.getString();
                        com.google.javascript.jscomp.parsing.Annotation annotation = annotationNames.get(annotationName);
                        if (annotation == null) {
                            parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, stream.getLineno(), stream.getCharno());
                        } else {
                            jsdocBuilder.markAnnotation(annotationName, lineno, charno);
                            switch (annotation) {
                                case AUTHOR :
                                    if (jsdocBuilder.shouldParseDocumentation()) {
                                        com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo authorInfo = extractSingleLineBlock();
                                        java.lang.String author = authorInfo.string;
                                        if (author.length() == 0) {
                                            parser.addParserWarning("msg.jsdoc.authormissing", stream.getLineno(), stream.getCharno());
                                        } else {
                                            jsdocBuilder.addAuthor(author);
                                        }
                                        token = authorInfo.token;
                                    } else {
                                        token = eatTokensUntilEOL(token);
                                    }
                                    continue retry;
                                case CONSISTENTIDGENERATOR :
                                    if (!jsdocBuilder.recordConsistentIdGenerator()) {
                                        parser.addParserWarning("msg.jsdoc.consistidgen", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case STRUCT :
                                    if (!jsdocBuilder.recordStruct()) {
                                        parser.addTypeWarning("msg.jsdoc.incompat.type", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case DICT :
                                    if (!jsdocBuilder.recordDict()) {
                                        parser.addTypeWarning("msg.jsdoc.incompat.type", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case CONSTRUCTOR :
                                    if (!jsdocBuilder.recordConstructor()) {
                                        if (jsdocBuilder.isInterfaceRecorded()) {
                                            parser.addTypeWarning("msg.jsdoc.interface.constructor", stream.getLineno(), stream.getCharno());
                                        } else {
                                            parser.addTypeWarning("msg.jsdoc.incompat.type", stream.getLineno(), stream.getCharno());
                                        }
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case DEPRECATED :
                                    if (!jsdocBuilder.recordDeprecated()) {
                                        parser.addParserWarning("msg.jsdoc.deprecated", stream.getLineno(), stream.getCharno());
                                    }
                                    com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo reasonInfo = extractMultilineTextualBlock(token);
                                    java.lang.String reason = reasonInfo.string;
                                    if (reason.length() > 0) {
                                        jsdocBuilder.recordDeprecationReason(reason);
                                    }
                                    token = reasonInfo.token;
                                    continue retry;
                                case INTERFACE :
                                    if (!jsdocBuilder.recordInterface()) {
                                        if (jsdocBuilder.isConstructorRecorded()) {
                                            parser.addTypeWarning("msg.jsdoc.interface.constructor", stream.getLineno(), stream.getCharno());
                                        } else {
                                            parser.addTypeWarning("msg.jsdoc.incompat.type", stream.getLineno(), stream.getCharno());
                                        }
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case DESC :
                                    if (jsdocBuilder.isDescriptionRecorded()) {
                                        parser.addParserWarning("msg.jsdoc.desc.extra", stream.getLineno(), stream.getCharno());
                                        token = eatTokensUntilEOL();
                                        continue retry;
                                    } else {
                                        com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo descriptionInfo = extractMultilineTextualBlock(token);
                                        java.lang.String description = descriptionInfo.string;
                                        jsdocBuilder.recordDescription(description);
                                        token = descriptionInfo.token;
                                        continue retry;
                                    }
                                case FILE_OVERVIEW :
                                    java.lang.String fileOverview = "";
                                    if (jsdocBuilder.shouldParseDocumentation()) {
                                        com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo fileOverviewInfo = extractMultilineTextualBlock(token, com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.TRIM);
                                        fileOverview = fileOverviewInfo.string;
                                        token = fileOverviewInfo.token;
                                    } else {
                                        token = eatTokensUntilEOL(token);
                                    }
                                    if (!jsdocBuilder.recordFileOverview(fileOverview)) {
                                        parser.addParserWarning("msg.jsdoc.fileoverview.extra", stream.getLineno(), stream.getCharno());
                                    }
                                    continue retry;
                                case LICENSE :
                                case PRESERVE :
                                    com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo preserveInfo = extractMultilineTextualBlock(token, com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE);
                                    java.lang.String preserve = preserveInfo.string;
                                    if (preserve.length() > 0) {
                                        if (fileLevelJsDocBuilder != null) {
                                            fileLevelJsDocBuilder.append(preserve);
                                        }
                                    }
                                    token = preserveInfo.token;
                                    continue retry;
                                case ENUM :
                                    token = next();
                                    lineno = stream.getLineno();
                                    charno = stream.getCharno();
                                    type = null;
                                    if ((token != com.google.javascript.jscomp.parsing.JsDocToken.EOL) && (token != com.google.javascript.jscomp.parsing.JsDocToken.EOC)) {
                                        type = createJSTypeExpression(parseAndRecordTypeNode(token));
                                    }
                                    if (type == null) {
                                        type = createJSTypeExpression(newStringNode("number"));
                                    }
                                    if (!jsdocBuilder.recordEnumParameterType(type)) {
                                        parser.addTypeWarning("msg.jsdoc.incompat.type", lineno, charno);
                                    }
                                    token = eatTokensUntilEOL(token);
                                    continue retry;
                                case EXPORT :
                                    if (!jsdocBuilder.recordExport()) {
                                        parser.addParserWarning("msg.jsdoc.export", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case EXPOSE :
                                    if (!jsdocBuilder.recordExpose()) {
                                        parser.addParserWarning("msg.jsdoc.expose", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case EXTERNS :
                                    if (!jsdocBuilder.recordExterns()) {
                                        parser.addParserWarning("msg.jsdoc.externs", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case JAVA_DISPATCH :
                                    if (!jsdocBuilder.recordJavaDispatch()) {
                                        parser.addParserWarning("msg.jsdoc.javadispatch", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case EXTENDS :
                                case IMPLEMENTS :
                                    skipEOLs();
                                    token = next();
                                    lineno = stream.getLineno();
                                    charno = stream.getCharno();
                                    boolean matchingRc = false;
                                    if (token == com.google.javascript.jscomp.parsing.JsDocToken.LC) {
                                        token = next();
                                        matchingRc = true;
                                    }
                                    if (token == com.google.javascript.jscomp.parsing.JsDocToken.STRING) {
                                        com.google.javascript.rhino.Node typeNode = parseAndRecordTypeNameNode(token, lineno, charno, matchingRc);
                                        lineno = stream.getLineno();
                                        charno = stream.getCharno();
                                        typeNode = wrapNode(com.google.javascript.rhino.Token.BANG, typeNode);
                                        boolean spoonDefaultValue = false;
                                        try {
                                            spoonDefaultValue = true;
                                        } catch (java.lang.Exception __NopolProcessorException) {
                                        }
                                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(119).isEnabled()) {
                                            fr.inria.lille.commons.trace.RuntimeValues.instance(119).collectionStarts();
                                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(119).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.fileLevelJsDocBuilder",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.fileLevelJsDocBuilder);} catch (Exception ex1) {ex1.printStackTrace();};
                                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(119).collectInput("annotation",annotation);} catch (Exception ex1) {ex1.printStackTrace();};
                                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(119).collectInput("extendedTypes",extendedTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(119).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.fileOverviewJSDocInfo",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.fileOverviewJSDocInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(119).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.parser",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.parser);} catch (Exception ex1) {ex1.printStackTrace();};
                                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(119).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.associatedNode",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.associatedNode);} catch (Exception ex1) {ex1.printStackTrace();};
                                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(119).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.suppressionNames",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.suppressionNames);} catch (Exception ex1) {ex1.printStackTrace();};
                                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(119).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.templateNode",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.templateNode);} catch (Exception ex1) {ex1.printStackTrace();};
                                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(119).collectInput("annotationName",annotationName);} catch (Exception ex1) {ex1.printStackTrace();};
                                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(119).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.sourceFile",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.sourceFile);} catch (Exception ex1) {ex1.printStackTrace();};
                                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(119).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.jsdocBuilder",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.jsdocBuilder);} catch (Exception ex1) {ex1.printStackTrace();};
                                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(119).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.stream",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.stream);} catch (Exception ex1) {ex1.printStackTrace();};
                                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(119).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.NO_UNREAD_TOKEN",com.google.javascript.jscomp.parsing.JsDocInfoParser.NO_UNREAD_TOKEN);} catch (Exception ex1) {ex1.printStackTrace();};
                                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(119).collectInput("token",token);} catch (Exception ex1) {ex1.printStackTrace();};
                                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(119).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.modifiesAnnotationKeywords",com.google.javascript.jscomp.parsing.JsDocInfoParser.modifiesAnnotationKeywords);} catch (Exception ex1) {ex1.printStackTrace();};
                                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(119).collectInput("typeNode",typeNode);} catch (Exception ex1) {ex1.printStackTrace();};
                                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(119).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.annotationNames",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.annotationNames);} catch (Exception ex1) {ex1.printStackTrace();};
                                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(119).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.unreadToken",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.unreadToken);} catch (Exception ex1) {ex1.printStackTrace();};
                                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(119).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.errorReporter",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.errorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(119).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.state",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.state);} catch (Exception ex1) {ex1.printStackTrace();};
                                            fr.inria.lille.commons.trace.RuntimeValues.instance(119).collectOutput(runtimeAngelicValue);
                                            fr.inria.lille.commons.trace.RuntimeValues.instance(119).collectionEnds();
                                        }
                                        if (runtimeAngelicValue)
                                            type = createJSTypeExpression(typeNode);

                                        if (annotation == com.google.javascript.jscomp.parsing.Annotation.EXTENDS) {
                                            extendedTypes.add(new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtendedTypeInfo(type, stream.getLineno(), stream.getCharno()));
                                        } else {
                                            com.google.common.base.Preconditions.checkState(annotation == com.google.javascript.jscomp.parsing.Annotation.IMPLEMENTS);
                                            if (!jsdocBuilder.recordImplementedInterface(type)) {
                                                parser.addTypeWarning("msg.jsdoc.implements.duplicate", lineno, charno);
                                            }
                                        }
                                        token = next();
                                        if (matchingRc) {
                                            if (token != com.google.javascript.jscomp.parsing.JsDocToken.RC) {
                                                parser.addTypeWarning("msg.jsdoc.missing.rc", stream.getLineno(), stream.getCharno());
                                            }
                                        } else if (((token != com.google.javascript.jscomp.parsing.JsDocToken.EOL) && (token != com.google.javascript.jscomp.parsing.JsDocToken.EOF)) && (token != com.google.javascript.jscomp.parsing.JsDocToken.EOC)) {
                                            parser.addTypeWarning("msg.end.annotation.expected", stream.getLineno(), stream.getCharno());
                                        }
                                    } else {
                                        parser.addTypeWarning("msg.no.type.name", lineno, charno);
                                    }
                                    token = eatTokensUntilEOL(token);
                                    continue retry;
                                case HIDDEN :
                                    if (!jsdocBuilder.recordHiddenness()) {
                                        parser.addParserWarning("msg.jsdoc.hidden", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case LENDS :
                                    skipEOLs();
                                    matchingRc = false;
                                    if (match(com.google.javascript.jscomp.parsing.JsDocToken.LC)) {
                                        token = next();
                                        matchingRc = true;
                                    }
                                    if (match(com.google.javascript.jscomp.parsing.JsDocToken.STRING)) {
                                        token = next();
                                        if (!jsdocBuilder.recordLends(stream.getString())) {
                                            parser.addTypeWarning("msg.jsdoc.lends.incompatible", stream.getLineno(), stream.getCharno());
                                        }
                                    } else {
                                        parser.addTypeWarning("msg.jsdoc.lends.missing", stream.getLineno(), stream.getCharno());
                                    }
                                    if (matchingRc && (!match(com.google.javascript.jscomp.parsing.JsDocToken.RC))) {
                                        parser.addTypeWarning("msg.jsdoc.missing.rc", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case MEANING :
                                    com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo meaningInfo = extractMultilineTextualBlock(token);
                                    java.lang.String meaning = meaningInfo.string;
                                    token = meaningInfo.token;
                                    if (!jsdocBuilder.recordMeaning(meaning)) {
                                        parser.addParserWarning("msg.jsdoc.meaning.extra", stream.getLineno(), stream.getCharno());
                                    }
                                    continue retry;
                                case NO_ALIAS :
                                    if (!jsdocBuilder.recordNoAlias()) {
                                        parser.addParserWarning("msg.jsdoc.noalias", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case NO_COMPILE :
                                    if (!jsdocBuilder.recordNoCompile()) {
                                        parser.addParserWarning("msg.jsdoc.nocompile", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case NO_TYPE_CHECK :
                                    if (!jsdocBuilder.recordNoTypeCheck()) {
                                        parser.addParserWarning("msg.jsdoc.nocheck", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case NOT_IMPLEMENTED :
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case INHERIT_DOC :
                                case OVERRIDE :
                                    if (!jsdocBuilder.recordOverride()) {
                                        parser.addTypeWarning("msg.jsdoc.override", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case THROWS :
                                    skipEOLs();
                                    token = next();
                                    lineno = stream.getLineno();
                                    charno = stream.getCharno();
                                    type = null;
                                    if (token == com.google.javascript.jscomp.parsing.JsDocToken.LC) {
                                        type = createJSTypeExpression(parseAndRecordTypeNode(token));
                                        if (type == null) {
                                            token = eatTokensUntilEOL();
                                            continue retry;
                                        }
                                    }
                                    token = current();
                                    jsdocBuilder.recordThrowType(type);
                                    if (jsdocBuilder.shouldParseDocumentation()) {
                                        com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo descriptionInfo = extractMultilineTextualBlock(token);
                                        java.lang.String description = descriptionInfo.string;
                                        if (description.length() > 0) {
                                            jsdocBuilder.recordThrowDescription(type, description);
                                        }
                                        token = descriptionInfo.token;
                                    } else {
                                        token = eatTokensUntilEOL(token);
                                    }
                                    continue retry;
                                case PARAM :
                                    skipEOLs();
                                    token = next();
                                    lineno = stream.getLineno();
                                    charno = stream.getCharno();
                                    type = null;
                                    if (token == com.google.javascript.jscomp.parsing.JsDocToken.LC) {
                                        type = createJSTypeExpression(parseAndRecordParamTypeNode(token));
                                        if (type == null) {
                                            token = eatTokensUntilEOL();
                                            continue retry;
                                        }
                                        skipEOLs();
                                        token = next();
                                        lineno = stream.getLineno();
                                        charno = stream.getCharno();
                                    }
                                    java.lang.String name = null;
                                    boolean isBracketedParam = com.google.javascript.jscomp.parsing.JsDocToken.LB == token;
                                    if (isBracketedParam) {
                                        token = next();
                                    }
                                    if (com.google.javascript.jscomp.parsing.JsDocToken.STRING != token) {
                                        parser.addTypeWarning("msg.missing.variable.name", lineno, charno);
                                    } else {
                                        name = stream.getString();
                                        if (isBracketedParam) {
                                            token = next();
                                            if (com.google.javascript.jscomp.parsing.JsDocToken.EQUALS == token) {
                                                token = next();
                                                if (com.google.javascript.jscomp.parsing.JsDocToken.STRING == token) {
                                                    token = next();
                                                }
                                            }
                                            if (com.google.javascript.jscomp.parsing.JsDocToken.RB != token) {
                                                reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
                                            } else if (type != null) {
                                                type = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(type);
                                            }
                                        }
                                        if (name.indexOf('.') > (-1)) {
                                            name = null;
                                        } else if (!jsdocBuilder.recordParameter(name, type)) {
                                            if (jsdocBuilder.hasParameter(name)) {
                                                parser.addTypeWarning("msg.dup.variable.name", name, lineno, charno);
                                            } else {
                                                parser.addTypeWarning("msg.jsdoc.incompat.type", name, lineno, charno);
                                            }
                                        }
                                    }
                                    if (name == null) {
                                        token = eatTokensUntilEOL(token);
                                        continue retry;
                                    }
                                    jsdocBuilder.markName(name, sourceFile, lineno, charno);
                                    if (jsdocBuilder.shouldParseDocumentation()) {
                                        com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo paramDescriptionInfo = extractMultilineTextualBlock(token);
                                        java.lang.String paramDescription = paramDescriptionInfo.string;
                                        if (paramDescription.length() > 0) {
                                            jsdocBuilder.recordParameterDescription(name, paramDescription);
                                        }
                                        token = paramDescriptionInfo.token;
                                    } else {
                                        token = eatTokensUntilEOL(token);
                                    }
                                    continue retry;
                                case PRESERVE_TRY :
                                    if (!jsdocBuilder.recordPreserveTry()) {
                                        parser.addParserWarning("msg.jsdoc.preservertry", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case NO_SHADOW :
                                    if (!jsdocBuilder.recordNoShadow()) {
                                        parser.addParserWarning("msg.jsdoc.noshadow", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case NO_SIDE_EFFECTS :
                                    if (!jsdocBuilder.recordNoSideEffects()) {
                                        parser.addParserWarning("msg.jsdoc.nosideeffects", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case MODIFIES :
                                    token = parseModifiesTag(next());
                                    continue retry;
                                case IMPLICIT_CAST :
                                    if (!jsdocBuilder.recordImplicitCast()) {
                                        parser.addTypeWarning("msg.jsdoc.implicitcast", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case SEE :
                                    if (jsdocBuilder.shouldParseDocumentation()) {
                                        com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo referenceInfo = extractSingleLineBlock();
                                        java.lang.String reference = referenceInfo.string;
                                        if (reference.length() == 0) {
                                            parser.addParserWarning("msg.jsdoc.seemissing", stream.getLineno(), stream.getCharno());
                                        } else {
                                            jsdocBuilder.addReference(reference);
                                        }
                                        token = referenceInfo.token;
                                    } else {
                                        token = eatTokensUntilEOL(token);
                                    }
                                    continue retry;
                                case STABLEIDGENERATOR :
                                    if (!jsdocBuilder.recordStableIdGenerator()) {
                                        parser.addParserWarning("msg.jsdoc.stableidgen", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case SUPPRESS :
                                    token = parseSuppressTag(next());
                                    continue retry;
                                case TEMPLATE :
                                    com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo templateInfo = extractSingleLineBlock();
                                    java.util.List<java.lang.String> names = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(',').trimResults().split(templateInfo.string));
                                    if ((names.size() == 0) || (names.get(0).length() == 0)) {
                                        parser.addTypeWarning("msg.jsdoc.templatemissing", stream.getLineno(), stream.getCharno());
                                    } else if (!jsdocBuilder.recordTemplateTypeNames(names)) {
                                        parser.addTypeWarning("msg.jsdoc.template.at.most.once", stream.getLineno(), stream.getCharno());
                                    }
                                    token = templateInfo.token;
                                    continue retry;
                                case IDGENERATOR :
                                    if (!jsdocBuilder.recordIdGenerator()) {
                                        parser.addParserWarning("msg.jsdoc.idgen", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case VERSION :
                                    com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo versionInfo = extractSingleLineBlock();
                                    java.lang.String version = versionInfo.string;
                                    if (version.length() == 0) {
                                        parser.addParserWarning("msg.jsdoc.versionmissing", stream.getLineno(), stream.getCharno());
                                    } else if (!jsdocBuilder.recordVersion(version)) {
                                        parser.addParserWarning("msg.jsdoc.extraversion", stream.getLineno(), stream.getCharno());
                                    }
                                    token = versionInfo.token;
                                    continue retry;
                                case CONSTANT :
                                case DEFINE :
                                case RETURN :
                                case PRIVATE :
                                case PROTECTED :
                                case PUBLIC :
                                case THIS :
                                case TYPE :
                                case TYPEDEF :
                                    lineno = stream.getLineno();
                                    charno = stream.getCharno();
                                    com.google.javascript.rhino.Node typeNode = null;
                                    boolean hasType = lookAheadForTypeAnnotation();
                                    boolean isAlternateTypeAnnotation = (((annotation == com.google.javascript.jscomp.parsing.Annotation.PRIVATE) || (annotation == com.google.javascript.jscomp.parsing.Annotation.PROTECTED)) || (annotation == com.google.javascript.jscomp.parsing.Annotation.PUBLIC)) || (annotation == com.google.javascript.jscomp.parsing.Annotation.CONSTANT);
                                    boolean canSkipTypeAnnotation = isAlternateTypeAnnotation || (annotation == com.google.javascript.jscomp.parsing.Annotation.RETURN);
                                    type = null;
                                    if (hasType || (!canSkipTypeAnnotation)) {
                                        skipEOLs();
                                        token = next();
                                        typeNode = parseAndRecordTypeNode(token);
                                        if (annotation == com.google.javascript.jscomp.parsing.Annotation.THIS) {
                                            typeNode = wrapNode(com.google.javascript.rhino.Token.BANG, typeNode);
                                        }
                                        type = createJSTypeExpression(typeNode);
                                    }
                                    boolean hasError = (type == null) && (!canSkipTypeAnnotation);
                                    if (!hasError) {
                                        if (((type != null) && isAlternateTypeAnnotation) || (annotation == com.google.javascript.jscomp.parsing.Annotation.TYPE)) {
                                            if (!jsdocBuilder.recordType(type)) {
                                                parser.addTypeWarning("msg.jsdoc.incompat.type", lineno, charno);
                                            }
                                        }
                                        switch (annotation) {
                                            case CONSTANT :
                                                if (!jsdocBuilder.recordConstancy()) {
                                                    parser.addParserWarning("msg.jsdoc.const", stream.getLineno(), stream.getCharno());
                                                }
                                                break;
                                            case DEFINE :
                                                if (!jsdocBuilder.recordDefineType(type)) {
                                                    parser.addParserWarning("msg.jsdoc.define", lineno, charno);
                                                }
                                                break;
                                            case PRIVATE :
                                                if (!jsdocBuilder.recordVisibility(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE)) {
                                                    parser.addParserWarning("msg.jsdoc.visibility.private", lineno, charno);
                                                }
                                                break;
                                            case PROTECTED :
                                                if (!jsdocBuilder.recordVisibility(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED)) {
                                                    parser.addParserWarning("msg.jsdoc.visibility.protected", lineno, charno);
                                                }
                                                break;
                                            case PUBLIC :
                                                if (!jsdocBuilder.recordVisibility(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC)) {
                                                    parser.addParserWarning("msg.jsdoc.visibility.public", lineno, charno);
                                                }
                                                break;
                                            case RETURN :
                                                if (type == null) {
                                                    type = createJSTypeExpression(newNode(com.google.javascript.rhino.Token.QMARK));
                                                }
                                                if (!jsdocBuilder.recordReturnType(type)) {
                                                    parser.addTypeWarning("msg.jsdoc.incompat.type", lineno, charno);
                                                    break;
                                                }
                                                if (jsdocBuilder.shouldParseDocumentation()) {
                                                    com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo returnDescriptionInfo = extractMultilineTextualBlock(token);
                                                    java.lang.String returnDescription = returnDescriptionInfo.string;
                                                    if (returnDescription.length() > 0) {
                                                        jsdocBuilder.recordReturnDescription(returnDescription);
                                                    }
                                                    token = returnDescriptionInfo.token;
                                                } else {
                                                    token = eatTokensUntilEOL(token);
                                                }
                                                continue retry;
                                            case THIS :
                                                if (!jsdocBuilder.recordThisType(type)) {
                                                    parser.addTypeWarning("msg.jsdoc.incompat.type", lineno, charno);
                                                }
                                                break;
                                            case TYPEDEF :
                                                if (!jsdocBuilder.recordTypedef(type)) {
                                                    parser.addTypeWarning("msg.jsdoc.incompat.type", lineno, charno);
                                                }
                                                break;
                                        }
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                            }
                        }
                    }
                    break;
                case EOC :
                    if (hasParsedFileOverviewDocInfo()) {
                        fileOverviewJSDocInfo = retrieveAndResetParsedJSDocInfo();
                    }
                    checkExtendedTypes(extendedTypes);
                    return true;
                case EOF :
                    jsdocBuilder.build(null);
                    parser.addParserWarning("msg.unexpected.eof", stream.getLineno(), stream.getCharno());
                    checkExtendedTypes(extendedTypes);
                    return false;
                case EOL :
                    if (state == com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_NEWLINE) {
                        state = com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_ANNOTATION;
                    }
                    token = next();
                    continue retry;
                default :
                    if ((token == com.google.javascript.jscomp.parsing.JsDocToken.STAR) && (state == com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_ANNOTATION)) {
                        token = next();
                        continue retry;
                    } else {
                        state = com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_NEWLINE;
                        token = eatTokensUntilEOL();
                        continue retry;
                    }
            }
            token = next();
        }
    }

    private void checkExtendedTypes(java.util.List<com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtendedTypeInfo> extendedTypes) {
        for (com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtendedTypeInfo typeInfo : extendedTypes) {
            if (jsdocBuilder.isInterfaceRecorded()) {
                if (!jsdocBuilder.recordExtendedInterface(typeInfo.type)) {
                    parser.addParserWarning("msg.jsdoc.extends.duplicate", typeInfo.lineno, typeInfo.charno);
                }
            } else if (!jsdocBuilder.recordBaseType(typeInfo.type)) {
                parser.addTypeWarning("msg.jsdoc.incompat.type", typeInfo.lineno, typeInfo.charno);
            }
        }
    }

    private com.google.javascript.jscomp.parsing.JsDocToken parseSuppressTag(com.google.javascript.jscomp.parsing.JsDocToken token) {
        if (token == com.google.javascript.jscomp.parsing.JsDocToken.LC) {
            java.util.Set<java.lang.String> suppressions = new java.util.HashSet<java.lang.String>();
            while (true) {
                if (match(com.google.javascript.jscomp.parsing.JsDocToken.STRING)) {
                    java.lang.String name = stream.getString();
                    if (!suppressionNames.contains(name)) {
                        parser.addParserWarning("msg.jsdoc.suppress.unknown", name, stream.getLineno(), stream.getCharno());
                    }
                    suppressions.add(stream.getString());
                    token = next();
                } else {
                    parser.addParserWarning("msg.jsdoc.suppress", stream.getLineno(), stream.getCharno());
                    return token;
                }
                if (match(com.google.javascript.jscomp.parsing.JsDocToken.PIPE)) {
                    token = next();
                } else {
                    break;
                }
            } 
            if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RC)) {
                parser.addParserWarning("msg.jsdoc.suppress", stream.getLineno(), stream.getCharno());
            } else {
                token = next();
                if (!jsdocBuilder.recordSuppressions(suppressions)) {
                    parser.addParserWarning("msg.jsdoc.suppress.duplicate", stream.getLineno(), stream.getCharno());
                }
            }
        }
        return token;
    }

    private com.google.javascript.jscomp.parsing.JsDocToken parseModifiesTag(com.google.javascript.jscomp.parsing.JsDocToken token) {
        if (token == com.google.javascript.jscomp.parsing.JsDocToken.LC) {
            java.util.Set<java.lang.String> modifies = new java.util.HashSet<java.lang.String>();
            while (true) {
                if (match(com.google.javascript.jscomp.parsing.JsDocToken.STRING)) {
                    java.lang.String name = stream.getString();
                    if ((!com.google.javascript.jscomp.parsing.JsDocInfoParser.modifiesAnnotationKeywords.contains(name)) && (!jsdocBuilder.hasParameter(name))) {
                        parser.addParserWarning("msg.jsdoc.modifies.unknown", name, stream.getLineno(), stream.getCharno());
                    }
                    modifies.add(stream.getString());
                    token = next();
                } else {
                    parser.addParserWarning("msg.jsdoc.modifies", stream.getLineno(), stream.getCharno());
                    return token;
                }
                if (match(com.google.javascript.jscomp.parsing.JsDocToken.PIPE)) {
                    token = next();
                } else {
                    break;
                }
            } 
            if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RC)) {
                parser.addParserWarning("msg.jsdoc.modifies", stream.getLineno(), stream.getCharno());
            } else {
                token = next();
                if (!jsdocBuilder.recordModifies(modifies)) {
                    parser.addParserWarning("msg.jsdoc.modifies.duplicate", stream.getLineno(), stream.getCharno());
                }
            }
        }
        return token;
    }

    private com.google.javascript.rhino.Node parseAndRecordTypeNode(com.google.javascript.jscomp.parsing.JsDocToken token) {
        return parseAndRecordTypeNode(token, token == com.google.javascript.jscomp.parsing.JsDocToken.LC);
    }

    private com.google.javascript.rhino.Node parseAndRecordTypeNode(com.google.javascript.jscomp.parsing.JsDocToken token, boolean matchingLC) {
        return parseAndRecordTypeNode(token, stream.getLineno(), stream.getCharno(), matchingLC, false);
    }

    private com.google.javascript.rhino.Node parseAndRecordTypeNameNode(com.google.javascript.jscomp.parsing.JsDocToken token, int lineno, int startCharno, boolean matchingLC) {
        return parseAndRecordTypeNode(token, lineno, startCharno, matchingLC, true);
    }

    private com.google.javascript.rhino.Node parseAndRecordParamTypeNode(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.common.base.Preconditions.checkArgument(token == com.google.javascript.jscomp.parsing.JsDocToken.LC);
        int lineno = stream.getLineno();
        int startCharno = stream.getCharno();
        com.google.javascript.rhino.Node typeNode = parseParamTypeExpressionAnnotation(token);
        if (typeNode != null) {
            int endLineno = stream.getLineno();
            int endCharno = stream.getCharno();
            jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endLineno, endCharno, true);
        }
        return typeNode;
    }

    private com.google.javascript.rhino.Node parseAndRecordTypeNode(com.google.javascript.jscomp.parsing.JsDocToken token, int lineno, int startCharno, boolean matchingLC, boolean onlyParseSimpleNames) {
        com.google.javascript.rhino.Node typeNode = null;
        if (onlyParseSimpleNames) {
            typeNode = parseTypeNameAnnotation(token);
        } else {
            typeNode = parseTypeExpressionAnnotation(token);
        }
        if (typeNode != null) {
            int endLineno = stream.getLineno();
            int endCharno = stream.getCharno();
            jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endLineno, endCharno, matchingLC);
        }
        return typeNode;
    }

    private java.lang.String toString(com.google.javascript.jscomp.parsing.JsDocToken token) {
        switch (token) {
            case ANNOTATION :
                return "@" + stream.getString();
            case BANG :
                return "!";
            case COMMA :
                return ",";
            case COLON :
                return ":";
            case GT :
                return ">";
            case LB :
                return "[";
            case LC :
                return "{";
            case LP :
                return "(";
            case LT :
                return ".<";
            case QMARK :
                return "?";
            case PIPE :
                return "|";
            case RB :
                return "]";
            case RC :
                return "}";
            case RP :
                return ")";
            case STAR :
                return "*";
            case ELLIPSIS :
                return "...";
            case EQUALS :
                return "=";
            case STRING :
                return stream.getString();
            default :
                throw new java.lang.IllegalStateException(token.toString());
        }
    }

    private com.google.javascript.rhino.JSTypeExpression createJSTypeExpression(com.google.javascript.rhino.Node n) {
        return n == null ? null : new com.google.javascript.rhino.JSTypeExpression(n, getSourceName());
    }

    private static class ExtractionInfo {
        private final java.lang.String string;

        private final com.google.javascript.jscomp.parsing.JsDocToken token;

        public ExtractionInfo(java.lang.String string, com.google.javascript.jscomp.parsing.JsDocToken token) {
            this.string = string;
            this.token = token;
        }
    }

    private static class ExtendedTypeInfo {
        final com.google.javascript.rhino.JSTypeExpression type;

        final int lineno;

        final int charno;

        public ExtendedTypeInfo(com.google.javascript.rhino.JSTypeExpression type, int lineno, int charno) {
            this.type = type;
            this.lineno = lineno;
            this.charno = charno;
        }
    }

    private com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo extractSingleLineBlock() {
        stream.update();
        int lineno = stream.getLineno();
        int charno = stream.getCharno() + 1;
        java.lang.String line = stream.getRemainingJSDocLine().trim();
        if (line.length() > 0) {
            jsdocBuilder.markText(line, lineno, charno, lineno, charno + line.length());
        }
        return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(line, next());
    }

    private com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo extractMultilineTextualBlock(com.google.javascript.jscomp.parsing.JsDocToken token) {
        return extractMultilineTextualBlock(token, com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.SINGLE_LINE);
    }

    private enum WhitespaceOption {

        PRESERVE,
        TRIM,
        SINGLE_LINE;}

    @java.lang.SuppressWarnings("fallthrough")
    private com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo extractMultilineTextualBlock(com.google.javascript.jscomp.parsing.JsDocToken token, com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption option) {
        if (((token == com.google.javascript.jscomp.parsing.JsDocToken.EOC) || (token == com.google.javascript.jscomp.parsing.JsDocToken.EOL)) || (token == com.google.javascript.jscomp.parsing.JsDocToken.EOF)) {
            return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo("", token);
        }
        stream.update();
        int startLineno = stream.getLineno();
        int startCharno = stream.getCharno() + 1;
        java.lang.String line = stream.getRemainingJSDocLine();
        if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) {
            line = line.trim();
        }
        java.lang.StringBuilder builder = new java.lang.StringBuilder();
        builder.append(line);
        state = com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_ANNOTATION;
        token = next();
        boolean ignoreStar = false;
        int lineStartChar = -1;
        do {
            switch (token) {
                case STAR :
                    if (ignoreStar) {
                        lineStartChar = stream.getCharno() + 1;
                    } else {
                        if (builder.length() > 0) {
                            builder.append(' ');
                        }
                        builder.append('*');
                    }
                    token = next();
                    continue;
                case EOL :
                    if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.SINGLE_LINE) {
                        builder.append("\n");
                    }
                    ignoreStar = true;
                    lineStartChar = 0;
                    token = next();
                    continue;
                default :
                    ignoreStar = false;
                    state = com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_ANNOTATION;
                    boolean isEOC = token == com.google.javascript.jscomp.parsing.JsDocToken.EOC;
                    if (!isEOC) {
                        if ((lineStartChar != (-1)) && (option == com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE)) {
                            int numSpaces = stream.getCharno() - lineStartChar;
                            for (int i = 0; i < numSpaces; i++) {
                                builder.append(' ');
                            }
                            lineStartChar = -1;
                        } else if (builder.length() > 0) {
                            builder.append(' ');
                        }
                    }
                    if (((token == com.google.javascript.jscomp.parsing.JsDocToken.EOC) || (token == com.google.javascript.jscomp.parsing.JsDocToken.EOF)) || ((token == com.google.javascript.jscomp.parsing.JsDocToken.ANNOTATION) && (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE))) {
                        java.lang.String multilineText = builder.toString();
                        if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) {
                            multilineText = multilineText.trim();
                        }
                        int endLineno = stream.getLineno();
                        int endCharno = stream.getCharno();
                        if (multilineText.length() > 0) {
                            jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);
                        }
                        return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(multilineText, token);
                    }
                    builder.append(toString(token));
                    line = stream.getRemainingJSDocLine();
                    if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) {
                        line = com.google.javascript.jscomp.parsing.JsDocInfoParser.trimEnd(line);
                    }
                    builder.append(line);
                    token = next();
            }
        } while (true );
    }

    private com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo extractBlockComment(com.google.javascript.jscomp.parsing.JsDocToken token) {
        java.lang.StringBuilder builder = new java.lang.StringBuilder();
        boolean ignoreStar = true;
        do {
            switch (token) {
                case ANNOTATION :
                case EOC :
                case EOF :
                    return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(builder.toString().trim(), token);
                case STAR :
                    if (!ignoreStar) {
                        if (builder.length() > 0) {
                            builder.append(' ');
                        }
                        builder.append('*');
                    }
                    token = next();
                    continue;
                case EOL :
                    ignoreStar = true;
                    builder.append('\n');
                    token = next();
                    continue;
                default :
                    if ((!ignoreStar) && (builder.length() > 0)) {
                        builder.append(' ');
                    }
                    ignoreStar = false;
                    builder.append(toString(token));
                    java.lang.String line = stream.getRemainingJSDocLine();
                    line = com.google.javascript.jscomp.parsing.JsDocInfoParser.trimEnd(line);
                    builder.append(line);
                    token = next();
            }
        } while (true );
    }

    private static java.lang.String trimEnd(java.lang.String s) {
        int trimCount = 0;
        while (trimCount < s.length()) {
            char ch = s.charAt((s.length() - trimCount) - 1);
            if (java.lang.Character.isWhitespace(ch)) {
                trimCount++;
            } else {
                break;
            }
        } 
        if (trimCount == 0) {
            return s;
        }
        return s.substring(0, s.length() - trimCount);
    }

    private com.google.javascript.rhino.Node parseTypeExpressionAnnotation(com.google.javascript.jscomp.parsing.JsDocToken token) {
        if (token == com.google.javascript.jscomp.parsing.JsDocToken.LC) {
            skipEOLs();
            com.google.javascript.rhino.Node typeNode = parseTopLevelTypeExpression(next());
            if (typeNode != null) {
                skipEOLs();
                if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RC)) {
                    reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
                } else {
                    next();
                }
            }
            return typeNode;
        } else {
            return parseTypeExpression(token);
        }
    }

    private com.google.javascript.rhino.Node parseParamTypeExpressionAnnotation(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.common.base.Preconditions.checkArgument(token == com.google.javascript.jscomp.parsing.JsDocToken.LC);
        skipEOLs();
        boolean restArg = false;
        token = next();
        if (token == com.google.javascript.jscomp.parsing.JsDocToken.ELLIPSIS) {
            token = next();
            if (token == com.google.javascript.jscomp.parsing.JsDocToken.RC) {
                return wrapNode(com.google.javascript.rhino.Token.ELLIPSIS, com.google.javascript.rhino.IR.empty());
            }
            restArg = true;
        }
        com.google.javascript.rhino.Node typeNode = parseTopLevelTypeExpression(token);
        if (typeNode != null) {
            skipEOLs();
            if (restArg) {
                typeNode = wrapNode(com.google.javascript.rhino.Token.ELLIPSIS, typeNode);
            } else if (match(com.google.javascript.jscomp.parsing.JsDocToken.EQUALS)) {
                next();
                skipEOLs();
                typeNode = wrapNode(com.google.javascript.rhino.Token.EQUALS, typeNode);
            }
            if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RC)) {
                reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
            } else {
                next();
            }
        }
        return typeNode;
    }

    private com.google.javascript.rhino.Node parseTypeNameAnnotation(com.google.javascript.jscomp.parsing.JsDocToken token) {
        if (token == com.google.javascript.jscomp.parsing.JsDocToken.LC) {
            skipEOLs();
            com.google.javascript.rhino.Node typeNode = parseTypeName(next());
            if (typeNode != null) {
                skipEOLs();
                if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RC)) {
                    reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
                } else {
                    next();
                }
            }
            return typeNode;
        } else {
            return parseTypeName(token);
        }
    }

    private com.google.javascript.rhino.Node parseTopLevelTypeExpression(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.javascript.rhino.Node typeExpr = parseTypeExpression(token);
        if (typeExpr != null) {
            if (match(com.google.javascript.jscomp.parsing.JsDocToken.PIPE)) {
                next();
                if (match(com.google.javascript.jscomp.parsing.JsDocToken.PIPE)) {
                    next();
                }
                skipEOLs();
                token = next();
                return parseUnionTypeWithAlternate(token, typeExpr);
            }
        }
        return typeExpr;
    }

    private com.google.javascript.rhino.Node parseTypeExpressionList(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.javascript.rhino.Node typeExpr = parseTopLevelTypeExpression(token);
        if (typeExpr == null) {
            return null;
        }
        com.google.javascript.rhino.Node typeList = com.google.javascript.rhino.IR.block();
        typeList.addChildToBack(typeExpr);
        while (match(com.google.javascript.jscomp.parsing.JsDocToken.COMMA)) {
            next();
            skipEOLs();
            typeExpr = parseTopLevelTypeExpression(next());
            if (typeExpr == null) {
                return null;
            }
            typeList.addChildToBack(typeExpr);
        } 
        return typeList;
    }

    private com.google.javascript.rhino.Node parseTypeExpression(com.google.javascript.jscomp.parsing.JsDocToken token) {
        if (token == com.google.javascript.jscomp.parsing.JsDocToken.QMARK) {
            token = next();
            if (((((((token == com.google.javascript.jscomp.parsing.JsDocToken.COMMA) || (token == com.google.javascript.jscomp.parsing.JsDocToken.EQUALS)) || (token == com.google.javascript.jscomp.parsing.JsDocToken.RB)) || (token == com.google.javascript.jscomp.parsing.JsDocToken.RC)) || (token == com.google.javascript.jscomp.parsing.JsDocToken.RP)) || (token == com.google.javascript.jscomp.parsing.JsDocToken.PIPE)) || (token == com.google.javascript.jscomp.parsing.JsDocToken.GT)) {
                restoreLookAhead(token);
                return newNode(com.google.javascript.rhino.Token.QMARK);
            }
            return wrapNode(com.google.javascript.rhino.Token.QMARK, parseBasicTypeExpression(token));
        } else if (token == com.google.javascript.jscomp.parsing.JsDocToken.BANG) {
            return wrapNode(com.google.javascript.rhino.Token.BANG, parseBasicTypeExpression(next()));
        } else {
            com.google.javascript.rhino.Node basicTypeExpr = parseBasicTypeExpression(token);
            if (basicTypeExpr != null) {
                if (match(com.google.javascript.jscomp.parsing.JsDocToken.QMARK)) {
                    next();
                    return wrapNode(com.google.javascript.rhino.Token.QMARK, basicTypeExpr);
                } else if (match(com.google.javascript.jscomp.parsing.JsDocToken.BANG)) {
                    next();
                    return wrapNode(com.google.javascript.rhino.Token.BANG, basicTypeExpr);
                }
            }
            return basicTypeExpr;
        }
    }

    private com.google.javascript.rhino.Node parseBasicTypeExpression(com.google.javascript.jscomp.parsing.JsDocToken token) {
        if (token == com.google.javascript.jscomp.parsing.JsDocToken.STAR) {
            return newNode(com.google.javascript.rhino.Token.STAR);
        } else if (token == com.google.javascript.jscomp.parsing.JsDocToken.LB) {
            skipEOLs();
            return parseArrayType(next());
        } else if (token == com.google.javascript.jscomp.parsing.JsDocToken.LC) {
            skipEOLs();
            return parseRecordType(next());
        } else if (token == com.google.javascript.jscomp.parsing.JsDocToken.LP) {
            skipEOLs();
            return parseUnionType(next());
        } else if (token == com.google.javascript.jscomp.parsing.JsDocToken.STRING) {
            java.lang.String string = stream.getString();
            if ("function".equals(string)) {
                skipEOLs();
                return parseFunctionType(next());
            } else if ("null".equals(string) || "undefined".equals(string)) {
                return newStringNode(string);
            } else {
                return parseTypeName(token);
            }
        }
        restoreLookAhead(token);
        return reportGenericTypeSyntaxWarning();
    }

    private com.google.javascript.rhino.Node parseTypeName(com.google.javascript.jscomp.parsing.JsDocToken token) {
        if (token != com.google.javascript.jscomp.parsing.JsDocToken.STRING) {
            return reportGenericTypeSyntaxWarning();
        }
        java.lang.String typeName = stream.getString();
        int lineno = stream.getLineno();
        int charno = stream.getCharno();
        while (match(com.google.javascript.jscomp.parsing.JsDocToken.EOL) && (typeName.charAt(typeName.length() - 1) == '.')) {
            skipEOLs();
            if (match(com.google.javascript.jscomp.parsing.JsDocToken.STRING)) {
                next();
                typeName += stream.getString();
            }
        } 
        com.google.javascript.rhino.Node typeNameNode = newStringNode(typeName, lineno, charno);
        if (match(com.google.javascript.jscomp.parsing.JsDocToken.LT)) {
            next();
            skipEOLs();
            com.google.javascript.rhino.Node memberType = parseTypeExpressionList(next());
            if (memberType != null) {
                typeNameNode.addChildToFront(memberType);
                skipEOLs();
                if (!match(com.google.javascript.jscomp.parsing.JsDocToken.GT)) {
                    return reportTypeSyntaxWarning("msg.jsdoc.missing.gt");
                }
                next();
            }
        }
        return typeNameNode;
    }

    private com.google.javascript.rhino.Node parseFunctionType(com.google.javascript.jscomp.parsing.JsDocToken token) {
        if (token != com.google.javascript.jscomp.parsing.JsDocToken.LP) {
            restoreLookAhead(token);
            return reportTypeSyntaxWarning("msg.jsdoc.missing.lp");
        }
        com.google.javascript.rhino.Node functionType = newNode(com.google.javascript.rhino.Token.FUNCTION);
        com.google.javascript.rhino.Node parameters = null;
        skipEOLs();
        if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RP)) {
            token = next();
            boolean hasParams = true;
            if (token == com.google.javascript.jscomp.parsing.JsDocToken.STRING) {
                java.lang.String tokenStr = stream.getString();
                boolean isThis = "this".equals(tokenStr);
                boolean isNew = "new".equals(tokenStr);
                if (isThis || isNew) {
                    if (match(com.google.javascript.jscomp.parsing.JsDocToken.COLON)) {
                        next();
                        skipEOLs();
                        com.google.javascript.rhino.Node contextType = wrapNode(isThis ? com.google.javascript.rhino.Token.THIS : com.google.javascript.rhino.Token.NEW, parseTypeName(next()));
                        if (contextType == null) {
                            return null;
                        }
                        functionType.addChildToFront(contextType);
                    } else {
                        return reportTypeSyntaxWarning("msg.jsdoc.missing.colon");
                    }
                    if (match(com.google.javascript.jscomp.parsing.JsDocToken.COMMA)) {
                        next();
                        skipEOLs();
                        token = next();
                    } else {
                        hasParams = false;
                    }
                }
            }
            if (hasParams) {
                parameters = parseParametersType(token);
                if (parameters == null) {
                    return null;
                }
            }
        }
        if (parameters != null) {
            functionType.addChildToBack(parameters);
        }
        skipEOLs();
        if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RP)) {
            return reportTypeSyntaxWarning("msg.jsdoc.missing.rp");
        }
        skipEOLs();
        com.google.javascript.rhino.Node resultType = parseResultType(next());
        if (resultType == null) {
            return null;
        } else {
            functionType.addChildToBack(resultType);
        }
        return functionType;
    }

    private com.google.javascript.rhino.Node parseParametersType(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.javascript.rhino.Node paramsType = newNode(com.google.javascript.rhino.Token.PARAM_LIST);
        boolean isVarArgs = false;
        com.google.javascript.rhino.Node paramType = null;
        if (token != com.google.javascript.jscomp.parsing.JsDocToken.RP) {
            do {
                if (paramType != null) {
                    next();
                    skipEOLs();
                    token = next();
                }
                if (token == com.google.javascript.jscomp.parsing.JsDocToken.ELLIPSIS) {
                    skipEOLs();
                    if (match(com.google.javascript.jscomp.parsing.JsDocToken.RP)) {
                        paramType = newNode(com.google.javascript.rhino.Token.ELLIPSIS);
                    } else {
                        skipEOLs();
                        if (!match(com.google.javascript.jscomp.parsing.JsDocToken.LB)) {
                            return reportTypeSyntaxWarning("msg.jsdoc.missing.lb");
                        }
                        next();
                        skipEOLs();
                        paramType = wrapNode(com.google.javascript.rhino.Token.ELLIPSIS, parseTypeExpression(next()));
                        skipEOLs();
                        if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RB)) {
                            return reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
                        }
                        skipEOLs();
                        next();
                    }
                    isVarArgs = true;
                } else {
                    paramType = parseTypeExpression(token);
                    if (match(com.google.javascript.jscomp.parsing.JsDocToken.EQUALS)) {
                        skipEOLs();
                        next();
                        paramType = wrapNode(com.google.javascript.rhino.Token.EQUALS, paramType);
                    }
                }
                if (paramType == null) {
                    return null;
                }
                paramsType.addChildToBack(paramType);
                if (isVarArgs) {
                    break;
                }
            } while (match(com.google.javascript.jscomp.parsing.JsDocToken.COMMA) );
        }
        if (isVarArgs && match(com.google.javascript.jscomp.parsing.JsDocToken.COMMA)) {
            return reportTypeSyntaxWarning("msg.jsdoc.function.varargs");
        }
        return paramsType;
    }

    private com.google.javascript.rhino.Node parseResultType(com.google.javascript.jscomp.parsing.JsDocToken token) {
        skipEOLs();
        if (!match(com.google.javascript.jscomp.parsing.JsDocToken.COLON)) {
            return newNode(com.google.javascript.rhino.Token.EMPTY);
        }
        token = next();
        skipEOLs();
        if (match(com.google.javascript.jscomp.parsing.JsDocToken.STRING) && "void".equals(stream.getString())) {
            next();
            return newNode(com.google.javascript.rhino.Token.VOID);
        } else {
            return parseTypeExpression(next());
        }
    }

    private com.google.javascript.rhino.Node parseUnionType(com.google.javascript.jscomp.parsing.JsDocToken token) {
        return parseUnionTypeWithAlternate(token, null);
    }

    private com.google.javascript.rhino.Node parseUnionTypeWithAlternate(com.google.javascript.jscomp.parsing.JsDocToken token, com.google.javascript.rhino.Node alternate) {
        com.google.javascript.rhino.Node union = newNode(com.google.javascript.rhino.Token.PIPE);
        if (alternate != null) {
            union.addChildToBack(alternate);
        }
        com.google.javascript.rhino.Node expr = null;
        do {
            if (expr != null) {
                skipEOLs();
                token = next();
                com.google.common.base.Preconditions.checkState((token == com.google.javascript.jscomp.parsing.JsDocToken.PIPE) || (token == com.google.javascript.jscomp.parsing.JsDocToken.COMMA));
                boolean isPipe = token == com.google.javascript.jscomp.parsing.JsDocToken.PIPE;
                if (isPipe && match(com.google.javascript.jscomp.parsing.JsDocToken.PIPE)) {
                    next();
                }
                skipEOLs();
                token = next();
            }
            expr = parseTypeExpression(token);
            if (expr == null) {
                return null;
            }
            union.addChildToBack(expr);
        } while (match(com.google.javascript.jscomp.parsing.JsDocToken.PIPE, com.google.javascript.jscomp.parsing.JsDocToken.COMMA) );
        if (alternate == null) {
            skipEOLs();
            if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RP)) {
                return reportTypeSyntaxWarning("msg.jsdoc.missing.rp");
            }
            next();
        }
        return union;
    }

    private com.google.javascript.rhino.Node parseArrayType(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.javascript.rhino.Node array = newNode(com.google.javascript.rhino.Token.LB);
        com.google.javascript.rhino.Node arg = null;
        boolean hasVarArgs = false;
        do {
            if (arg != null) {
                next();
                skipEOLs();
                token = next();
            }
            if (token == com.google.javascript.jscomp.parsing.JsDocToken.ELLIPSIS) {
                arg = wrapNode(com.google.javascript.rhino.Token.ELLIPSIS, parseTypeExpression(next()));
                hasVarArgs = true;
            } else {
                arg = parseTypeExpression(token);
            }
            if (arg == null) {
                return null;
            }
            array.addChildToBack(arg);
            if (hasVarArgs) {
                break;
            }
            skipEOLs();
        } while (match(com.google.javascript.jscomp.parsing.JsDocToken.COMMA) );
        if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RB)) {
            return reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
        }
        next();
        return array;
    }

    private com.google.javascript.rhino.Node parseRecordType(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.javascript.rhino.Node recordType = newNode(com.google.javascript.rhino.Token.LC);
        com.google.javascript.rhino.Node fieldTypeList = parseFieldTypeList(token);
        if (fieldTypeList == null) {
            return reportGenericTypeSyntaxWarning();
        }
        skipEOLs();
        if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RC)) {
            return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
        }
        next();
        recordType.addChildToBack(fieldTypeList);
        return recordType;
    }

    private com.google.javascript.rhino.Node parseFieldTypeList(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.javascript.rhino.Node fieldTypeList = newNode(com.google.javascript.rhino.Token.LB);
        do {
            com.google.javascript.rhino.Node fieldType = parseFieldType(token);
            if (fieldType == null) {
                return null;
            }
            fieldTypeList.addChildToBack(fieldType);
            skipEOLs();
            if (!match(com.google.javascript.jscomp.parsing.JsDocToken.COMMA)) {
                break;
            }
            next();
            skipEOLs();
            token = next();
        } while (true );
        return fieldTypeList;
    }

    private com.google.javascript.rhino.Node parseFieldType(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.javascript.rhino.Node fieldName = parseFieldName(token);
        if (fieldName == null) {
            return null;
        }
        skipEOLs();
        if (!match(com.google.javascript.jscomp.parsing.JsDocToken.COLON)) {
            return fieldName;
        }
        next();
        skipEOLs();
        com.google.javascript.rhino.Node typeExpression = parseTypeExpression(next());
        if (typeExpression == null) {
            return null;
        }
        com.google.javascript.rhino.Node fieldType = newNode(com.google.javascript.rhino.Token.COLON);
        fieldType.addChildToBack(fieldName);
        fieldType.addChildToBack(typeExpression);
        return fieldType;
    }

    private com.google.javascript.rhino.Node parseFieldName(com.google.javascript.jscomp.parsing.JsDocToken token) {
        switch (token) {
            case STRING :
                java.lang.String string = stream.getString();
                return newStringNode(string);
            default :
                return null;
        }
    }

    private com.google.javascript.rhino.Node wrapNode(int type, com.google.javascript.rhino.Node n) {
        return n == null ? null : new com.google.javascript.rhino.Node(type, n, stream.getLineno(), stream.getCharno()).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type) {
        return new com.google.javascript.rhino.Node(type, stream.getLineno(), stream.getCharno()).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(java.lang.String s) {
        return newStringNode(s, stream.getLineno(), stream.getCharno());
    }

    private com.google.javascript.rhino.Node newStringNode(java.lang.String s, int lineno, int charno) {
        com.google.javascript.rhino.Node n = com.google.javascript.rhino.Node.newString(s, lineno, charno).clonePropsFrom(templateNode);
        n.setLength(s.length());
        return n;
    }

    private com.google.javascript.rhino.Node createTemplateNode() {
        com.google.javascript.rhino.Node templateNode = com.google.javascript.rhino.IR.script();
        templateNode.setStaticSourceFile(this.associatedNode != null ? this.associatedNode.getStaticSourceFile() : null);
        return templateNode;
    }

    private com.google.javascript.rhino.Node reportTypeSyntaxWarning(java.lang.String warning) {
        parser.addTypeWarning(warning, stream.getLineno(), stream.getCharno());
        return null;
    }

    private com.google.javascript.rhino.Node reportGenericTypeSyntaxWarning() {
        return reportTypeSyntaxWarning("msg.jsdoc.type.syntax");
    }

    private com.google.javascript.jscomp.parsing.JsDocToken eatTokensUntilEOL() {
        return eatTokensUntilEOL(next());
    }

    private com.google.javascript.jscomp.parsing.JsDocToken eatTokensUntilEOL(com.google.javascript.jscomp.parsing.JsDocToken token) {
        do {
            if (((token == com.google.javascript.jscomp.parsing.JsDocToken.EOL) || (token == com.google.javascript.jscomp.parsing.JsDocToken.EOC)) || (token == com.google.javascript.jscomp.parsing.JsDocToken.EOF)) {
                state = com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_ANNOTATION;
                return token;
            }
            token = next();
        } while (true );
    }

    private static final com.google.javascript.jscomp.parsing.JsDocToken NO_UNREAD_TOKEN = null;

    private com.google.javascript.jscomp.parsing.JsDocToken unreadToken = com.google.javascript.jscomp.parsing.JsDocInfoParser.NO_UNREAD_TOKEN;

    private void restoreLookAhead(com.google.javascript.jscomp.parsing.JsDocToken token) {
        unreadToken = token;
    }

    private boolean match(com.google.javascript.jscomp.parsing.JsDocToken token) {
        unreadToken = next();
        return unreadToken == token;
    }

    private boolean match(com.google.javascript.jscomp.parsing.JsDocToken token1, com.google.javascript.jscomp.parsing.JsDocToken token2) {
        unreadToken = next();
        return (unreadToken == token1) || (unreadToken == token2);
    }

    private com.google.javascript.jscomp.parsing.JsDocToken next() {
        if (unreadToken == com.google.javascript.jscomp.parsing.JsDocInfoParser.NO_UNREAD_TOKEN) {
            return stream.getJsDocToken();
        } else {
            return current();
        }
    }

    private com.google.javascript.jscomp.parsing.JsDocToken current() {
        com.google.javascript.jscomp.parsing.JsDocToken t = unreadToken;
        unreadToken = com.google.javascript.jscomp.parsing.JsDocInfoParser.NO_UNREAD_TOKEN;
        return t;
    }

    private void skipEOLs() {
        while (match(com.google.javascript.jscomp.parsing.JsDocToken.EOL)) {
            next();
            if (match(com.google.javascript.jscomp.parsing.JsDocToken.STAR)) {
                next();
            }
        } 
    }

    private boolean hasParsedFileOverviewDocInfo() {
        return jsdocBuilder.isPopulatedWithFileOverview();
    }

    boolean hasParsedJSDocInfo() {
        return jsdocBuilder.isPopulated();
    }

    com.google.javascript.rhino.JSDocInfo retrieveAndResetParsedJSDocInfo() {
        return jsdocBuilder.build(associatedNode);
    }

    com.google.javascript.rhino.JSDocInfo getFileOverviewJSDocInfo() {
        return fileOverviewJSDocInfo;
    }

    private boolean lookAheadForTypeAnnotation() {
        boolean matchedLc = false;
        int c;
        while (true) {
            c = stream.getChar();
            if (c == ' ') {
                continue;
            } else if (c == '{') {
                matchedLc = true;
                break;
            } else {
                break;
            }
        } 
        stream.ungetChar(c);
        return matchedLc;
    }
}
[9119852] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659823053400
GPR[SSUN]-1659823053400
-179796259
GPR[SPVATF]-1659823053781
GPR[EPVATF]-1659823056537
GPR[SPS]-1659823056537
[9123965] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:446.
GPR[EPS]-1659823057514
GPR[ESUN]-1659823057514
GPR[SSUN]-1659823057514
-179796259
GPR[SPVATF]-1659823057777
GPR[EPVATF]-1659823060360
GPR[SPS]-1659823060360
[9127774] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:444.
GPR[EPS]-1659823061322
GPR[ESUN]-1659823061322
GPR[SSUN]-1659823061322
-179796259
GPR[SPVATF]-1659823061586
GPR[EPVATF]-1659823064154
GPR[SPS]-1659823064154
[9131670] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:443.
GPR[EPS]-1659823065218
GPR[ESUN]-1659823065218
GPR[SSUN]-1659823065218
-179796259
GPR[ESUN]-1659823065476
GPR[SSUN]-1659823065476
-179796259
GPR[SPVATF]-1659823065741
GPR[EPVATF]-1659823068280
GPR[SPS]-1659823068280
[9135688] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:476.
GPR[EPS]-1659823069236
GPR[ESUN]-1659823069236
GPR[SSUN]-1659823069236
-179796259
GPR[SPVATF]-1659823069498
GPR[EPVATF]-1659823072057
GPR[SPS]-1659823072057
[9139492] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:475.
GPR[EPS]-1659823073040
GPR[ESUN]-1659823073040
GPR[SSUN]-1659823073040
-179796259
GPR[SPVATF]-1659823073317
GPR[EPVATF]-1659823076020
GPR[SPS]-1659823076020
[9147690] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:439.
GPR[EPS]-1659823081238
GPR[SPVATF]-1659823081239
GPR[EPVATF]-1659823084933
GPR[SPS]-1659823084933
[9152699] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:439.
GPR[EPS]-1659823086247
GPR[ESUN]-1659823086247
GPR[SSUN]-1659823086247
-179796259
GPR[SPVATF]-1659823086587
GPR[EPVATF]-1659823088350
GPR[SPS]-1659823088350
[9155943] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:434.
GPR[EPS]-1659823089491
GPR[SPVATF]-1659823089492
GPR[EPVATF]-1659823091172
GPR[SPS]-1659823091172
[9158685] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:434.
GPR[EPS]-1659823092233
GPR[ESUN]-1659823092234
GPR[SSUN]-1659823092234
-179796259
GPR[ESUN]-1659823092532
GPR[SSUN]-1659823092532
-179796259
GPR[SPVATF]-1659823092835
GPR[EPVATF]-1659823094560
GPR[SPS]-1659823094561
[9162050] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:431.
GPR[EPS]-1659823095598
GPR[ESUN]-1659823095598
GPR[SSUN]-1659823095598
-179796259
GPR[SPVATF]-1659823095875
GPR[EPVATF]-1659823097629
GPR[SPS]-1659823097629
[9165291] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:430.
GPR[EPS]-1659823098839
GPR[ESUN]-1659823098839
GPR[SSUN]-1659823098839
-179796259
GPR[SPVATF]-1659823099127
GPR[EPVATF]-1659823100857
GPR[SPS]-1659823100857
[9168257] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:429.
GPR[EPS]-1659823101805
GPR[ESUN]-1659823101806
GPR[SSUN]-1659823101806
-179796259
GPR[SPVATF]-1659823102099
GPR[EPVATF]-1659823103814
GPR[SPS]-1659823103814
[9171231] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:428.
GPR[EPS]-1659823104779
GPR[ESUN]-1659823104779
GPR[SSUN]-1659823104779
-1234646214
GPR[ESUN]-1659823105016
GPR[SSUN]-1659823105016
-974414840
GPR[ESUN]-1659823105313
GPR[SSUN]-1659823105313
-974414840
GPR[ESUN]-1659823105544
GPR[SSUN]-1659823105544
-974414840
GPR[ESUN]-1659823105788
GPR[SSUN]-1659823105788
-974414840
GPR[SPVATF]-1659823106017
GPR[EPVATF]-1659823107725
GPR[SPS]-1659823107725
[9174747] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.ProxyObjectType:327.
GPR[EPS]-1659823108295
GPR[ESUN]-1659823108295
GPR[SSUN]-1659823108295
-974414840
GPR[ESUN]-1659823108531
GPR[SSUN]-1659823108531
-1117079791
GPR[ESUN]-1659823108762
GPR[SSUN]-1659823108762
-1117079791
GPR[SPVATF]-1659823108981
GPR[EPVATF]-1659823109217
[9175669] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823109217
GPR[SSUN]-1659823109217
-1117079791
GPR[SPVATF]-1659823109434
GPR[EPVATF]-1659823109680
[9176132] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823109680
GPR[SSUN]-1659823109680
-1117079791
GPR[SPVATF]-1659823109900
GPR[EPVATF]-1659823110141
[9176593] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823110141
GPR[SSUN]-1659823110141
-1117079791
GPR[SPVATF]-1659823110362
GPR[EPVATF]-1659823110610
[9177062] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823110610
GPR[SSUN]-1659823110610
-1117079791
GPR[ESUN]-1659823110834
GPR[SSUN]-1659823110834
-1117079791
GPR[SPVATF]-1659823111051
GPR[EPVATF]-1659823111304
[9177756] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823111304
GPR[SSUN]-1659823111304
-600752576
GPR[ESUN]-1659823111515
GPR[SSUN]-1659823111515
-1117079791
GPR[SPVATF]-1659823111736
GPR[EPVATF]-1659823111988
[9178441] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823111989
GPR[SSUN]-1659823111989
-974414840
GPR[ESUN]-1659823112221
GPR[SSUN]-1659823112221
-1117079791
GPR[ESUN]-1659823112443
GPR[SSUN]-1659823112443
-1117079791
GPR[SPVATF]-1659823112664
GPR[EPVATF]-1659823112917
[9179369] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659823112917
GPR[EPVATF]-1659823113167
[9179620] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823113168
GPR[SSUN]-1659823113168
-1117079791
GPR[SPVATF]-1659823113392
GPR[EPVATF]-1659823113642
[9180094] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823113642
GPR[SSUN]-1659823113642
-1117079791
GPR[SPVATF]-1659823113921
GPR[EPVATF]-1659823114175
[9180627] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823114175
GPR[SSUN]-1659823114175
-974414840
GPR[ESUN]-1659823114404
GPR[SSUN]-1659823114404
-974414840
GPR[SPVATF]-1659823114640
GPR[EPVATF]-1659823116407
GPR[SPS]-1659823116407
[9183465] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.ProxyObjectType:83.
GPR[EPS]-1659823117013
GPR[ESUN]-1659823117013
GPR[SSUN]-1659823117013
-974414840
GPR[SPVATF]-1659823117254
GPR[EPVATF]-1659823119160
GPR[SPS]-1659823119160
[9186548] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.ProxyObjectType:82.
GPR[EPS]-1659823120096
GPR[SPVATF]-1659823120097
GPR[EPVATF]-1659823121931
GPR[SPS]-1659823121931
[9188955] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.ProxyObjectType:82.
GPR[EPS]-1659823122503
GPR[ESUN]-1659823122503
GPR[SSUN]-1659823122503
-974414840
GPR[SPVATF]-1659823122729
GPR[EPVATF]-1659823124642
GPR[SPS]-1659823124642
[9191666] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.ProxyObjectType:81.
GPR[EPS]-1659823125214
GPR[ESUN]-1659823125214
GPR[SSUN]-1659823125214
-1007410555
GPR[ESUN]-1659823125423
GPR[SSUN]-1659823125423
2433571
GPR[ESUN]-1659823125694
GPR[SSUN]-1659823125694
GPR[ESUN]-1659823125694
GPR[SSUN]-1659823125694
GPR[ESUN]-1659823125694
GPR[SSUN]-1659823125694
GPR[ESUN]-1659823125694
GPR[SSUN]-1659823125694
GPR[ESUN]-1659823125694
GPR[SSUN]-1659823125694
-1117079791
GPR[SPVATF]-1659823125916
GPR[EPVATF]-1659823126174
[9192626] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823126174
GPR[SSUN]-1659823126174
GPR[ESUN]-1659823126174
GPR[SSUN]-1659823126174
GPR[ESUN]-1659823126174
GPR[SSUN]-1659823126174
GPR[ESUN]-1659823126174
GPR[SSUN]-1659823126174
GPR[ESUN]-1659823126174
GPR[SSUN]-1659823126174
GPR[ESUN]-1659823126174
GPR[SSUN]-1659823126174
GPR[ESUN]-1659823126174
GPR[SSUN]-1659823126174
GPR[ESUN]-1659823126174
GPR[SSUN]-1659823126174
GPR[ESUN]-1659823126174
GPR[SSUN]-1659823126174
GPR[ESUN]-1659823126174
GPR[SSUN]-1659823126174
GPR[ESUN]-1659823126174
GPR[SSUN]-1659823126174
GPR[ESUN]-1659823126174
GPR[SSUN]-1659823126174
GPR[ESUN]-1659823126174
GPR[SSUN]-1659823126174
GPR[ESUN]-1659823126174
GPR[SSUN]-1659823126174
GPR[ESUN]-1659823126174
GPR[SSUN]-1659823126174
-1117079791
GPR[ESUN]-1659823126394
GPR[SSUN]-1659823126394
-1117079791
GPR[SPVATF]-1659823126612
GPR[EPVATF]-1659823126859
[9193311] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659823126860
GPR[EPVATF]-1659823127119
[9193571] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823127119
GPR[SSUN]-1659823127119
-1117079791
GPR[SPVATF]-1659823127338
GPR[EPVATF]-1659823127593
[9194045] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823127594
GPR[SSUN]-1659823127594
-1117079791
GPR[SPVATF]-1659823127819
GPR[EPVATF]-1659823128064
[9194516] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823128064
GPR[SSUN]-1659823128064
-1117079791
GPR[ESUN]-1659823128276
GPR[SSUN]-1659823128276
-1117079791
GPR[SPVATF]-1659823128493
GPR[EPVATF]-1659823128753
[9195205] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823128753
GPR[SSUN]-1659823128753
-1345859678
GPR[SPVATF]-1659823129037
GPR[EPVATF]-1659823129297
[9195749] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659823129297
GPR[EPVATF]-1659823129555
[9196007] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823129555
GPR[SSUN]-1659823129555
GPR[ESUN]-1659823129555
GPR[SSUN]-1659823129555
704176156
GPR[ESUN]-1659823129774
GPR[SSUN]-1659823129774
704176156
GPR[SPVATF]-1659823129994
GPR[EPVATF]-1659823130257
[9196709] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659823130258
GPR[EPVATF]-1659823130516
[9196968] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823130516
GPR[SSUN]-1659823130516
704176156
GPR[SPVATF]-1659823130735
GPR[EPVATF]-1659823130992
[9197444] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823130993
GPR[SSUN]-1659823130993
704176156
GPR[SPVATF]-1659823131210
GPR[EPVATF]-1659823131453
[9197905] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823131453
GPR[SSUN]-1659823131453
704176156
GPR[ESUN]-1659823131655
GPR[SSUN]-1659823131655
-534884160
GPR[SPVATF]-1659823132106
GPR[EPVATF]-1659823134024
GPR[SPS]-1659823134024
[9201566] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1593.
GPR[EPS]-1659823135114
GPR[ESUN]-1659823135114
GPR[SSUN]-1659823135114
2433571
GPR[SPVATF]-1659823135430
GPR[EPVATF]-1659823137630
GPR[SPS]-1659823137630
[9204999] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int INFERRED_FUNCTION = 55;

    public static final int LAST_PROP = 55;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            case com.google.javascript.rhino.Node.INFERRED_FUNCTION :
                return "inferred";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private static abstract class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        value = x.toString();
                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(139).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.INFERRED_FUNCTION",com.google.javascript.rhino.Node.INFERRED_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                if (com.google.javascript.rhino.Node.this.last!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.rhino.Node.this.parent!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.rhino.Node.this.next!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.rhino.Node.this.first!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(139).collectionEnds();
            }
            if (runtimeAngelicValue)
                return java.util.Collections.emptySet();

        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            java.lang.String name = getString();
            return name.isEmpty() ? null : name;
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public com.google.javascript.rhino.Node setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
        return this;
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCast() {
        return this.getType() == com.google.javascript.rhino.Token.CAST;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[9205000] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659823138548
GPR[SSUN]-1659823138548
-534884160
GPR[ESUN]-1659823138922
GPR[SSUN]-1659823138922
-534884160
GPR[SPVATF]-1659823139359
GPR[EPVATF]-1659823141624
GPR[SPS]-1659823141624
[9209136] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1595.
GPR[EPS]-1659823142685
GPR[ESUN]-1659823142685
GPR[SSUN]-1659823142685
-534884160
GPR[SPVATF]-1659823143068
GPR[EPVATF]-1659823145621
GPR[SPS]-1659823145621
[9213127] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1592.
GPR[EPS]-1659823146675
GPR[SPVATF]-1659823146675
GPR[EPVATF]-1659823149288
GPR[SPS]-1659823149288
[9216773] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1592.
GPR[EPS]-1659823150321
GPR[ESUN]-1659823150321
GPR[SSUN]-1659823150321
-534884160
GPR[ESUN]-1659823150699
GPR[SSUN]-1659823150699
-534884160
GPR[SPVATF]-1659823151066
GPR[EPVATF]-1659823153587
GPR[SPS]-1659823153587
[9221065] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1589.
GPR[EPS]-1659823154613
GPR[ESUN]-1659823154613
GPR[SSUN]-1659823154613
-1345859678
GPR[ESUN]-1659823154886
GPR[SSUN]-1659823154886
-1345859678
GPR[SPVATF]-1659823155238
GPR[EPVATF]-1659823155524
[9221976] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823155524
GPR[SSUN]-1659823155524
-1345859678
GPR[SPVATF]-1659823155802
GPR[EPVATF]-1659823156078
[9222530] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823156078
GPR[SSUN]-1659823156078
-1345859678
GPR[SPVATF]-1659823156346
GPR[EPVATF]-1659823156633
[9223085] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659823156633
GPR[EPVATF]-1659823156904
[9223356] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823156904
GPR[SSUN]-1659823156904
-1345859678
GPR[ESUN]-1659823157172
GPR[SSUN]-1659823157172
-1345859678
GPR[SPVATF]-1659823157437
GPR[EPVATF]-1659823157720
[9224172] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823157720
GPR[SSUN]-1659823157720
-1345859678
GPR[ESUN]-1659823158260
GPR[SSUN]-1659823158260
GPR[ESUN]-1659823158260
GPR[SSUN]-1659823158260
GPR[ESUN]-1659823158260
GPR[SSUN]-1659823158260
GPR[ESUN]-1659823158260
GPR[SSUN]-1659823158260
GPR[ESUN]-1659823158260
GPR[SSUN]-1659823158260
GPR[ESUN]-1659823158260
GPR[SSUN]-1659823158260
GPR[ESUN]-1659823158260
GPR[SSUN]-1659823158260
GPR[ESUN]-1659823158260
GPR[SSUN]-1659823158260
GPR[ESUN]-1659823158260
GPR[SSUN]-1659823158260
GPR[ESUN]-1659823158260
GPR[SSUN]-1659823158260
GPR[ESUN]-1659823158260
GPR[SSUN]-1659823158260
GPR[ESUN]-1659823158260
GPR[SSUN]-1659823158260
-1345859678
GPR[SPVATF]-1659823158531
GPR[EPVATF]-1659823158809
[9225261] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659823158809
GPR[EPVATF]-1659823159081
[9225533] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823159081
GPR[SSUN]-1659823159081
GPR[ESUN]-1659823159081
GPR[SSUN]-1659823159081
2433571
GPR[SPVATF]-1659823159349
GPR[EPVATF]-1659823161911
GPR[SPS]-1659823161911
[9229204] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1223.
GPR[EPS]-1659823162752
GPR[ESUN]-1659823162752
GPR[SSUN]-1659823162752
2433571
GPR[ESUN]-1659823163018
GPR[SSUN]-1659823163018
2433571
GPR[SPVATF]-1659823163274
GPR[EPVATF]-1659823163556
[9230008] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823163556
GPR[SSUN]-1659823163556
79711797
GPR[SPVATF]-1659823163821
GPR[EPVATF]-1659823171419
GPR[SPS]-1659823171419
[9238301] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Scope implements com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> , com.google.javascript.rhino.jstype.StaticSymbolTable<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.Scope.Var> {
    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.Scope.Var> vars = new java.util.LinkedHashMap<java.lang.String, com.google.javascript.jscomp.Scope.Var>();

    private final com.google.javascript.jscomp.Scope parent;

    private final int depth;

    private final com.google.javascript.rhino.Node rootNode;

    private final boolean isBottom;

    private com.google.javascript.jscomp.Scope.Var arguments;

    private static final com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES = new com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var>() {
        @java.lang.Override
        public boolean apply(com.google.javascript.jscomp.Scope.Var var) {
            return (((var.getParentNode() != null) && (var.getType() == null)) && var.getParentNode().isVar()) && (!var.isExtern());
        }
    };

    public static class Var implements com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> , com.google.javascript.rhino.jstype.StaticReference<com.google.javascript.rhino.jstype.JSType> {
        final java.lang.String name;

        final com.google.javascript.rhino.Node nameNode;

        private com.google.javascript.rhino.jstype.JSType type;

        private final boolean typeInferred;

        final com.google.javascript.jscomp.CompilerInput input;

        final int index;

        final com.google.javascript.jscomp.Scope scope;

        private boolean markedEscaped = false;

        private boolean markedAssignedExactlyOnce = false;

        private Var(boolean inferred, java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.Scope scope, int index, com.google.javascript.jscomp.CompilerInput input) {
            this.name = name;
            this.nameNode = nameNode;
            this.type = type;
            this.scope = scope;
            this.index = index;
            this.input = input;
            this.typeInferred = inferred;
        }

        @java.lang.Override
        public java.lang.String getName() {
            return name;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getNode() {
            return nameNode;
        }

        com.google.javascript.jscomp.CompilerInput getInput() {
            return input;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile() {
            return nameNode.getStaticSourceFile();
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getSymbol() {
            return this;
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getDeclaration() {
            return nameNode == null ? null : this;
        }

        public com.google.javascript.rhino.Node getParentNode() {
            return nameNode == null ? null : nameNode.getParent();
        }

        public boolean isBleedingFunction() {
            return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(getParentNode());
        }

        com.google.javascript.jscomp.Scope getScope() {
            return scope;
        }

        public boolean isGlobal() {
            return scope.isGlobal();
        }

        public boolean isLocal() {
            return scope.isLocal();
        }

        boolean isExtern() {
            return (input == null) || input.isExtern();
        }

        public boolean isConst() {
            return (nameNode != null) && com.google.javascript.jscomp.NodeUtil.isConstantName(nameNode);
        }

        public boolean isDefine() {
            com.google.javascript.rhino.JSDocInfo info = getJSDocInfo();
            return (info != null) && info.isDefine();
        }

        public com.google.javascript.rhino.Node getInitialValue() {
            return com.google.javascript.jscomp.NodeUtil.getRValueOfLValue(nameNode);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType getType() {
            return type;
        }

        public com.google.javascript.rhino.Node getNameNode() {
            return nameNode;
        }

        @java.lang.Override
        public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
            return nameNode == null ? null : com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(nameNode);
        }

        void setType(com.google.javascript.rhino.jstype.JSType type) {
            com.google.common.base.Preconditions.checkState(isTypeInferred());
            this.type = type;
        }

        void resolveType(com.google.javascript.rhino.ErrorReporter errorReporter) {
            if (type != null) {
                type = type.resolve(errorReporter, scope);
            }
        }

        @java.lang.Override
        public boolean isTypeInferred() {
            return typeInferred;
        }

        public java.lang.String getInputName() {
            if (input == null) {
                return "<non-file>";
            } else {
                return input.getName();
            }
        }

        public boolean isNoShadow() {
            com.google.javascript.rhino.JSDocInfo info = getJSDocInfo();
            return (info != null) && info.isNoShadow();
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Var)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Var otherVar = ((com.google.javascript.jscomp.Scope.Var) (other));
            return otherVar.nameNode == nameNode;
        }

        @java.lang.Override
        public int hashCode() {
            return nameNode.hashCode();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return ((("Scope.Var " + name) + "{") + type) + "}";
        }

        void markEscaped() {
            markedEscaped = true;
        }

        boolean isMarkedEscaped() {
            return markedEscaped;
        }

        void markAssignedExactlyOnce() {
            markedAssignedExactlyOnce = true;
        }

        boolean isMarkedAssignedExactlyOnce() {
            return markedAssignedExactlyOnce;
        }
    }

    public static class Arguments extends com.google.javascript.jscomp.Scope.Var {
        Arguments(com.google.javascript.jscomp.Scope scope) {
            super(false, "arguments", null, null, scope, -1, null);
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Arguments)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Arguments otherVar = ((com.google.javascript.jscomp.Scope.Arguments) (other));
            return otherVar.scope.getRootNode() == scope.getRootNode();
        }

        @java.lang.Override
        public int hashCode() {
            return java.lang.System.identityHashCode(this);
        }
    }

    Scope(com.google.javascript.jscomp.Scope parent, com.google.javascript.rhino.Node rootNode) {
        com.google.common.base.Preconditions.checkNotNull(parent);
        com.google.common.base.Preconditions.checkArgument(rootNode != parent.rootNode);
        this.parent = parent;
        this.rootNode = rootNode;
        this.isBottom = false;
        this.depth = parent.depth + 1;
    }

    private Scope(com.google.javascript.rhino.Node rootNode, boolean isBottom) {
        this.parent = null;
        this.rootNode = rootNode;
        this.isBottom = isBottom;
        this.depth = 0;
    }

    static com.google.javascript.jscomp.Scope createGlobalScope(com.google.javascript.rhino.Node rootNode) {
        return new com.google.javascript.jscomp.Scope(rootNode, false);
    }

    static com.google.javascript.jscomp.Scope createLatticeBottom(com.google.javascript.rhino.Node rootNode) {
        return new com.google.javascript.jscomp.Scope(rootNode, true);
    }

    int getDepth() {
        return depth;
    }

    boolean isBottom() {
        return isBottom;
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getRootNode() {
        return rootNode;
    }

    public com.google.javascript.jscomp.Scope getParent() {
        return parent;
    }

    com.google.javascript.jscomp.Scope getGlobalScope() {
        com.google.javascript.jscomp.Scope result = this;
        while (result.getParent() != null) {
            result = result.getParent();
        } 
        return result;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getParentScope() {
        return parent;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType getTypeOfThis() {
        if (isGlobal()) {
            return com.google.javascript.rhino.jstype.ObjectType.cast(rootNode.getJSType());
        }
        com.google.common.base.Preconditions.checkState(rootNode.isFunction());
        com.google.javascript.rhino.jstype.JSType nodeType = rootNode.getJSType();
        if ((nodeType != null) && nodeType.isFunctionType()) {
            return nodeType.toMaybeFunctionType().getTypeOfThis();
        } else {
            return parent.getTypeOfThis();
        }
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input) {
        return declare(name, nameNode, type, input, true);
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input, boolean inferred) {
        com.google.common.base.Preconditions.checkState((name != null) && (name.length() > 0));
        com.google.common.base.Preconditions.checkState(vars.get(name) == null);
        com.google.javascript.jscomp.Scope.Var var = new com.google.javascript.jscomp.Scope.Var(inferred, name, nameNode, type, this, vars.size(), input);
        vars.put(name, var);
        return var;
    }

    void undeclare(com.google.javascript.jscomp.Scope.Var var) {
        com.google.common.base.Preconditions.checkState(var.scope == this);
        com.google.common.base.Preconditions.checkState(vars.get(var.name) == var);
        vars.remove(var.name);
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Scope.Var getSlot(java.lang.String name) {
        return getVar(name);
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Scope.Var getOwnSlot(java.lang.String name) {
        return vars.get(name);
    }

    public com.google.javascript.jscomp.Scope.Var getVar(java.lang.String name) {
        com.google.javascript.jscomp.Scope.Var var = vars.get(name);
        if (var != null) {
            return var;
        } else if (parent != null) {
            return parent.getVar(name);
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(145).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("com.google.javascript.jscomp.Scope.this.parent",com.google.javascript.jscomp.Scope.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES",com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("var",var);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("com.google.javascript.jscomp.Scope.this.isBottom",com.google.javascript.jscomp.Scope.this.isBottom);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("com.google.javascript.jscomp.Scope.this.rootNode",com.google.javascript.jscomp.Scope.this.rootNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("name",name);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("com.google.javascript.jscomp.Scope.this.depth",com.google.javascript.jscomp.Scope.this.depth);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("com.google.javascript.jscomp.Scope.this.vars",com.google.javascript.jscomp.Scope.this.vars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("com.google.javascript.jscomp.Scope.this.arguments",com.google.javascript.jscomp.Scope.this.arguments);} catch (Exception ex1) {ex1.printStackTrace();};
                if (com.google.javascript.jscomp.Scope.this.parent!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("com.google.javascript.jscomp.Scope.this.parent.getParent()",com.google.javascript.jscomp.Scope.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("com.google.javascript.jscomp.Scope.this.parent.getDepth()",com.google.javascript.jscomp.Scope.this.parent.getDepth());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("com.google.javascript.jscomp.Scope.this.parent.getParentScope()",com.google.javascript.jscomp.Scope.this.parent.getParentScope());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("com.google.javascript.jscomp.Scope.this.parent.isBottom()",com.google.javascript.jscomp.Scope.this.parent.isBottom());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("com.google.javascript.jscomp.Scope.this.parent.getRootNode()",com.google.javascript.jscomp.Scope.this.parent.getRootNode());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.jscomp.Scope.this.arguments!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getName()",com.google.javascript.jscomp.Scope.this.arguments.getName());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getType()",com.google.javascript.jscomp.Scope.this.arguments.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isTypeInferred()",com.google.javascript.jscomp.Scope.this.arguments.isTypeInferred());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isMarkedEscaped()",com.google.javascript.jscomp.Scope.this.arguments.isMarkedEscaped());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isMarkedAssignedExactlyOnce()",com.google.javascript.jscomp.Scope.this.arguments.isMarkedAssignedExactlyOnce());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getNode()",com.google.javascript.jscomp.Scope.this.arguments.getNode());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getInput()",com.google.javascript.jscomp.Scope.this.arguments.getInput());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getScope()",com.google.javascript.jscomp.Scope.this.arguments.getScope());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getNameNode()",com.google.javascript.jscomp.Scope.this.arguments.getNameNode());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectionEnds();
            }
            if (runtimeAngelicValue)
                return null;

        }
    }

    public com.google.javascript.jscomp.Scope.Var getArgumentsVar() {
        if (arguments == null) {
            arguments = new com.google.javascript.jscomp.Scope.Arguments(this);
        }
        return arguments;
    }

    public boolean isDeclared(java.lang.String name, boolean recurse) {
        com.google.javascript.jscomp.Scope scope = this;
        if (scope.vars.containsKey(name)) {
            return true;
        }
        if ((scope.parent != null) && recurse) {
            return scope.parent.isDeclared(name, recurse);
        }
        return false;
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getVars() {
        return vars.values().iterator();
    }

    java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getVarIterable() {
        return vars.values();
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getReferences(com.google.javascript.jscomp.Scope.Var var) {
        return com.google.common.collect.ImmutableList.of(var);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getScope(com.google.javascript.jscomp.Scope.Var var) {
        return var.scope;
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getAllSymbols() {
        return java.util.Collections.unmodifiableCollection(vars.values());
    }

    public int getVarCount() {
        return vars.size();
    }

    public boolean isGlobal() {
        return parent == null;
    }

    public boolean isLocal() {
        return !isGlobal();
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getDeclarativelyUnboundVarsWithoutTypes() {
        return com.google.common.collect.Iterators.filter(getVars(), com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);
    }
}
[9238301] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659823171849
GPR[SSUN]-1659823171849
79711797
GPR[SPVATF]-1659823172110
GPR[EPVATF]-1659823174680
GPR[SPS]-1659823174680
[9241546] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Scope implements com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> , com.google.javascript.rhino.jstype.StaticSymbolTable<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.Scope.Var> {
    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.Scope.Var> vars = new java.util.LinkedHashMap<java.lang.String, com.google.javascript.jscomp.Scope.Var>();

    private final com.google.javascript.jscomp.Scope parent;

    private final int depth;

    private final com.google.javascript.rhino.Node rootNode;

    private final boolean isBottom;

    private com.google.javascript.jscomp.Scope.Var arguments;

    private static final com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES = new com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var>() {
        @java.lang.Override
        public boolean apply(com.google.javascript.jscomp.Scope.Var var) {
            return (((var.getParentNode() != null) && (var.getType() == null)) && var.getParentNode().isVar()) && (!var.isExtern());
        }
    };

    public static class Var implements com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> , com.google.javascript.rhino.jstype.StaticReference<com.google.javascript.rhino.jstype.JSType> {
        final java.lang.String name;

        final com.google.javascript.rhino.Node nameNode;

        private com.google.javascript.rhino.jstype.JSType type;

        private final boolean typeInferred;

        final com.google.javascript.jscomp.CompilerInput input;

        final int index;

        final com.google.javascript.jscomp.Scope scope;

        private boolean markedEscaped = false;

        private boolean markedAssignedExactlyOnce = false;

        private Var(boolean inferred, java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.Scope scope, int index, com.google.javascript.jscomp.CompilerInput input) {
            this.name = name;
            this.nameNode = nameNode;
            this.type = type;
            this.scope = scope;
            this.index = index;
            this.input = input;
            this.typeInferred = inferred;
        }

        @java.lang.Override
        public java.lang.String getName() {
            return name;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getNode() {
            return nameNode;
        }

        com.google.javascript.jscomp.CompilerInput getInput() {
            return input;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile() {
            return nameNode.getStaticSourceFile();
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getSymbol() {
            return this;
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getDeclaration() {
            return nameNode == null ? null : this;
        }

        public com.google.javascript.rhino.Node getParentNode() {
            return nameNode == null ? null : nameNode.getParent();
        }

        public boolean isBleedingFunction() {
            return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(getParentNode());
        }

        com.google.javascript.jscomp.Scope getScope() {
            return scope;
        }

        public boolean isGlobal() {
            return scope.isGlobal();
        }

        public boolean isLocal() {
            return scope.isLocal();
        }

        boolean isExtern() {
            return (input == null) || input.isExtern();
        }

        public boolean isConst() {
            return (nameNode != null) && com.google.javascript.jscomp.NodeUtil.isConstantName(nameNode);
        }

        public boolean isDefine() {
            com.google.javascript.rhino.JSDocInfo info = getJSDocInfo();
            return (info != null) && info.isDefine();
        }

        public com.google.javascript.rhino.Node getInitialValue() {
            return com.google.javascript.jscomp.NodeUtil.getRValueOfLValue(nameNode);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType getType() {
            return type;
        }

        public com.google.javascript.rhino.Node getNameNode() {
            return nameNode;
        }

        @java.lang.Override
        public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
            return nameNode == null ? null : com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(nameNode);
        }

        void setType(com.google.javascript.rhino.jstype.JSType type) {
            com.google.common.base.Preconditions.checkState(isTypeInferred());
            this.type = type;
        }

        void resolveType(com.google.javascript.rhino.ErrorReporter errorReporter) {
            if (type != null) {
                type = type.resolve(errorReporter, scope);
            }
        }

        @java.lang.Override
        public boolean isTypeInferred() {
            return typeInferred;
        }

        public java.lang.String getInputName() {
            if (input == null) {
                return "<non-file>";
            } else {
                return input.getName();
            }
        }

        public boolean isNoShadow() {
            com.google.javascript.rhino.JSDocInfo info = getJSDocInfo();
            return (info != null) && info.isNoShadow();
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Var)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Var otherVar = ((com.google.javascript.jscomp.Scope.Var) (other));
            return otherVar.nameNode == nameNode;
        }

        @java.lang.Override
        public int hashCode() {
            return nameNode.hashCode();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return ((("Scope.Var " + name) + "{") + type) + "}";
        }

        void markEscaped() {
            markedEscaped = true;
        }

        boolean isMarkedEscaped() {
            return markedEscaped;
        }

        void markAssignedExactlyOnce() {
            markedAssignedExactlyOnce = true;
        }

        boolean isMarkedAssignedExactlyOnce() {
            return markedAssignedExactlyOnce;
        }
    }

    public static class Arguments extends com.google.javascript.jscomp.Scope.Var {
        Arguments(com.google.javascript.jscomp.Scope scope) {
            super(false, "arguments", null, null, scope, -1, null);
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Arguments)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Arguments otherVar = ((com.google.javascript.jscomp.Scope.Arguments) (other));
            return otherVar.scope.getRootNode() == scope.getRootNode();
        }

        @java.lang.Override
        public int hashCode() {
            return java.lang.System.identityHashCode(this);
        }
    }

    Scope(com.google.javascript.jscomp.Scope parent, com.google.javascript.rhino.Node rootNode) {
        com.google.common.base.Preconditions.checkNotNull(parent);
        com.google.common.base.Preconditions.checkArgument(rootNode != parent.rootNode);
        this.parent = parent;
        this.rootNode = rootNode;
        this.isBottom = false;
        this.depth = parent.depth + 1;
    }

    private Scope(com.google.javascript.rhino.Node rootNode, boolean isBottom) {
        this.parent = null;
        this.rootNode = rootNode;
        this.isBottom = isBottom;
        this.depth = 0;
    }

    static com.google.javascript.jscomp.Scope createGlobalScope(com.google.javascript.rhino.Node rootNode) {
        return new com.google.javascript.jscomp.Scope(rootNode, false);
    }

    static com.google.javascript.jscomp.Scope createLatticeBottom(com.google.javascript.rhino.Node rootNode) {
        return new com.google.javascript.jscomp.Scope(rootNode, true);
    }

    int getDepth() {
        return depth;
    }

    boolean isBottom() {
        return isBottom;
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getRootNode() {
        return rootNode;
    }

    public com.google.javascript.jscomp.Scope getParent() {
        return parent;
    }

    com.google.javascript.jscomp.Scope getGlobalScope() {
        com.google.javascript.jscomp.Scope result = this;
        while (result.getParent() != null) {
            result = result.getParent();
        } 
        return result;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getParentScope() {
        return parent;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType getTypeOfThis() {
        if (isGlobal()) {
            return com.google.javascript.rhino.jstype.ObjectType.cast(rootNode.getJSType());
        }
        com.google.common.base.Preconditions.checkState(rootNode.isFunction());
        com.google.javascript.rhino.jstype.JSType nodeType = rootNode.getJSType();
        if ((nodeType != null) && nodeType.isFunctionType()) {
            return nodeType.toMaybeFunctionType().getTypeOfThis();
        } else {
            return parent.getTypeOfThis();
        }
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input) {
        return declare(name, nameNode, type, input, true);
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input, boolean inferred) {
        com.google.common.base.Preconditions.checkState((name != null) && (name.length() > 0));
        com.google.common.base.Preconditions.checkState(vars.get(name) == null);
        com.google.javascript.jscomp.Scope.Var var = new com.google.javascript.jscomp.Scope.Var(inferred, name, nameNode, type, this, vars.size(), input);
        vars.put(name, var);
        return var;
    }

    void undeclare(com.google.javascript.jscomp.Scope.Var var) {
        com.google.common.base.Preconditions.checkState(var.scope == this);
        com.google.common.base.Preconditions.checkState(vars.get(var.name) == var);
        vars.remove(var.name);
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Scope.Var getSlot(java.lang.String name) {
        return getVar(name);
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Scope.Var getOwnSlot(java.lang.String name) {
        return vars.get(name);
    }

    public com.google.javascript.jscomp.Scope.Var getVar(java.lang.String name) {
        com.google.javascript.jscomp.Scope.Var var = vars.get(name);
        if (var != null) {
            return var;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(146).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectInput("parent != null",parent != null);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectInput("com.google.javascript.jscomp.Scope.this.parent",com.google.javascript.jscomp.Scope.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectInput("com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES",com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectInput("var",var);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectInput("com.google.javascript.jscomp.Scope.this.isBottom",com.google.javascript.jscomp.Scope.this.isBottom);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectInput("com.google.javascript.jscomp.Scope.this.rootNode",com.google.javascript.jscomp.Scope.this.rootNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectInput("name",name);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectInput("com.google.javascript.jscomp.Scope.this.depth",com.google.javascript.jscomp.Scope.this.depth);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectInput("com.google.javascript.jscomp.Scope.this.vars",com.google.javascript.jscomp.Scope.this.vars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectInput("com.google.javascript.jscomp.Scope.this.arguments",com.google.javascript.jscomp.Scope.this.arguments);} catch (Exception ex1) {ex1.printStackTrace();};
                if (com.google.javascript.jscomp.Scope.this.parent!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectInput("com.google.javascript.jscomp.Scope.this.parent.getParent()",com.google.javascript.jscomp.Scope.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectInput("com.google.javascript.jscomp.Scope.this.parent.getDepth()",com.google.javascript.jscomp.Scope.this.parent.getDepth());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectInput("com.google.javascript.jscomp.Scope.this.parent.getParentScope()",com.google.javascript.jscomp.Scope.this.parent.getParentScope());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectInput("com.google.javascript.jscomp.Scope.this.parent.isBottom()",com.google.javascript.jscomp.Scope.this.parent.isBottom());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectInput("com.google.javascript.jscomp.Scope.this.parent.getRootNode()",com.google.javascript.jscomp.Scope.this.parent.getRootNode());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.jscomp.Scope.this.arguments!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getName()",com.google.javascript.jscomp.Scope.this.arguments.getName());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getType()",com.google.javascript.jscomp.Scope.this.arguments.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isTypeInferred()",com.google.javascript.jscomp.Scope.this.arguments.isTypeInferred());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isMarkedEscaped()",com.google.javascript.jscomp.Scope.this.arguments.isMarkedEscaped());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isMarkedAssignedExactlyOnce()",com.google.javascript.jscomp.Scope.this.arguments.isMarkedAssignedExactlyOnce());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getNode()",com.google.javascript.jscomp.Scope.this.arguments.getNode());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getInput()",com.google.javascript.jscomp.Scope.this.arguments.getInput());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getScope()",com.google.javascript.jscomp.Scope.this.arguments.getScope());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getNameNode()",com.google.javascript.jscomp.Scope.this.arguments.getNameNode());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(146).collectionEnds();
            }
            if (runtimeAngelicValue) if (parent != null) {
                return parent.getVar(name);
            } else {
                return null;
            }
        }
    }

    public com.google.javascript.jscomp.Scope.Var getArgumentsVar() {
        if (arguments == null) {
            arguments = new com.google.javascript.jscomp.Scope.Arguments(this);
        }
        return arguments;
    }

    public boolean isDeclared(java.lang.String name, boolean recurse) {
        com.google.javascript.jscomp.Scope scope = this;
        if (scope.vars.containsKey(name)) {
            return true;
        }
        if ((scope.parent != null) && recurse) {
            return scope.parent.isDeclared(name, recurse);
        }
        return false;
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getVars() {
        return vars.values().iterator();
    }

    java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getVarIterable() {
        return vars.values();
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getReferences(com.google.javascript.jscomp.Scope.Var var) {
        return com.google.common.collect.ImmutableList.of(var);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getScope(com.google.javascript.jscomp.Scope.Var var) {
        return var.scope;
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getAllSymbols() {
        return java.util.Collections.unmodifiableCollection(vars.values());
    }

    public int getVarCount() {
        return vars.size();
    }

    public boolean isGlobal() {
        return parent == null;
    }

    public boolean isLocal() {
        return !isGlobal();
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getDeclarativelyUnboundVarsWithoutTypes() {
        return com.google.common.collect.Iterators.filter(getVars(), com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);
    }
}
[9241546] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659823175095
GPR[EPVATF]-1659823177688
GPR[SPS]-1659823177688
[9244801] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Scope:532.
GPR[EPS]-1659823178349
GPR[ESUN]-1659823178349
GPR[SSUN]-1659823178349
1187751237
GPR[ESUN]-1659823178682
GPR[SSUN]-1659823178682
GPR[ESUN]-1659823178682
GPR[SSUN]-1659823178682
GPR[ESUN]-1659823178682
GPR[SSUN]-1659823178682
2433571
GPR[ESUN]-1659823178981
GPR[SSUN]-1659823178981
-1117079791
GPR[ESUN]-1659823179200
GPR[SSUN]-1659823179200
-1117079791
GPR[SPVATF]-1659823179420
GPR[EPVATF]-1659823179704
[9246156] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823179704
GPR[SSUN]-1659823179704
-1117079791
GPR[SPVATF]-1659823179923
GPR[EPVATF]-1659823180205
[9246657] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823180205
GPR[SSUN]-1659823180205
-1117079791
GPR[ESUN]-1659823180419
GPR[SSUN]-1659823180419
-1117079791
GPR[SPVATF]-1659823180634
GPR[EPVATF]-1659823180917
[9247370] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659823180918
GPR[SSUN]-1659823180918
GPR[ESUN]-1659823180918
GPR[SSUN]-1659823180918
GPR[ESUN]-1659823180918
GPR[SSUN]-1659823180918
GPR[ESUN]-1659823180918
GPR[SSUN]-1659823180918
GPR[ESUN]-1659823180918
GPR[SSUN]-1659823180918
79711797
GPR[SPVATF]-1659823181179
GPR[EPVATF]-1659823183779
GPR[SPS]-1659823183779
[9250910] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Scope:530.
GPR[EPS]-1659823184458
GPR[ESUN]-1659823184458
GPR[SSUN]-1659823184458
79711797
GPR[ESUN]-1659823184717
GPR[SSUN]-1659823184717
1331276989
GPR[ESUN]-1659823184952
GPR[SSUN]-1659823184952
1331276989
GPR[SPVATF]-1659823185179
GPR[EPVATF]-1659823187742
GPR[SPS]-1659823187742
[9254843] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:607.
GPR[EPS]-1659823188391
GPR[ESUN]-1659823188391
GPR[SSUN]-1659823188391
1331276989
GPR[SPVATF]-1659823188620
GPR[EPVATF]-1659823191210
GPR[SPS]-1659823191210
[9258508] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:605.
GPR[EPS]-1659823192056
GPR[ESUN]-1659823192057
GPR[SSUN]-1659823192057
1331276989
GPR[SPVATF]-1659823192287
GPR[EPVATF]-1659823194862
GPR[SPS]-1659823194862
[9494484] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: Java heap space
GPR[ESUN]-1659823428032
GPR[SSUN]-1659823428032
1331276989
GPR[SPVATF]-1659823460484
[9737209] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659823670757
GPR[SSUN]-1659823670757
\n\nNode: host-49\n
\n\nDate: Sat 06 Aug 2022 03:25:50 PM PDT\n
End running Nopol Closure/2 results at /experiment_home///results/Nopol/Closure/2/seed_260/
Removing checked out dir script/workingdir/Nopol/Closure_2
GPR[SSLE]-1659824752010
GPR[ESLE]-1659824812015
