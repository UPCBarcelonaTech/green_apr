Sleep 1m start
GPR[SSLI]-1659881105806
GPR[ESLI]-1659881165809
Running SimFix Closure 79b
Timezone: America/Los_Angeles
Seed 263
Java 8: /experiment_home/jdk1.8.0_45/bin 
DEFECTS4J_HOME: /experiment_home/defects4j/
Creating out dir /experiment_home///results/SimFix/Closure/79/seed_263/
Project lc: closure
New out script/workingdir/SimFix/closure/closure_79_buggy
The file script/workingdir/SimFix/closure/closure_79_buggy does not exist!
script/workingdir/SimFix/closure/closure_79_buggy
Current directory: script/workingdir/SimFix/closure/closure_79_buggy
classpath:  script/workingdir/SimFix/closure/closure_79_buggy/build/classes:script/workingdir/SimFix/closure/closure_79_buggy/lib/args4j.jar:script/workingdir/SimFix/closure/closure_79_buggy/lib/guava.jar:script/workingdir/SimFix/closure/closure_79_buggy/lib/jsr305.jar:script/workingdir/SimFix/closure/closure_79_buggy/lib/libtrunk_rhino_parser_jarjared.jar:script/workingdir/SimFix/closure/closure_79_buggy/lib/protobuf-java.jar:script/workingdir/SimFix/closure/closure_79_buggy/lib/ant.jar:script/workingdir/SimFix/closure/closure_79_buggy/lib/ant-launcher.jar:script/workingdir/SimFix/closure/closure_79_buggy/lib/caja-r4314.jar:script/workingdir/SimFix/closure/closure_79_buggy/lib/json.jar:script/workingdir/SimFix/closure/closure_79_buggy/lib/junit.jar:script/workingdir/SimFix/closure/closure_79_buggy/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659881182115
GPR[ESLB]-1659881242120
Calling SimFix: at script/workingdir/SimFix/closure/closure_79_buggy
build
build.xml
closure-compiler.pom
contrib
CONTRIBUTORS
COPYING
d4j-info
defects4j.build.properties
externs
gen
javadoc
lib
README
src
test
tools
content current dir: build build.xml closure-compiler.pom contrib CONTRIBUTORS COPYING d4j-info defects4j.build.properties externs gen javadoc lib README src test tools
Node: host-56
Date init: Sun 07 Aug 2022 07:07:24 AM PDT
OAR_JOB_ID: 3720517
script/workingdir/SimFix/
GPR[SSUP]-1659881244311
=================================================
Project : closure_79	start : 22/08/07 07:07

Field type inconsistancy 'errors' with types : JSError[] and List<JSError>
Field type inconsistancy 'type' with types : JSType and Type
Variable type inconsistancy of 'name' in method 'visit,NodeTraversal,Node,Node' with types : String and Name
Field type inconsistancy 'THIS' with types : Token and int
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns1
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : com.google.javascript.jscomp.NormalizeTest::testIssue
MM:   - com.google.javascript.jscomp.NormalizeTest::testIssue
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : com.google.javascript.jscomp.VarCheckTest::testCallInExterns
MM:   - com.google.javascript.jscomp.VarCheckTest::testCallInExterns
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : com.google.javascript.jscomp.VarCheckTest::testVarReferenceInExterns
MM:   - com.google.javascript.jscomp.VarCheckTest::testVarReferenceInExterns
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[ESUP]-1659881262329
MM Purify? true
GPR[SFL]-1659881262933
GPR[EFL]-1659881262936
GPR[SFP]-1659881262936
TIMEOUT : 3600000
GPR[SSUN]-1659881262952
com.google.javascript.rhino.Node,2043
GPR[ESUN]-1659881264579
GPR[SSUN]-1659881264579
com.google.javascript.rhino.Node,2044
GPR[ESUN]-1659881264754
GPR[SSUN]-1659881264755
com.google.javascript.rhino.Node,2046
========
getJSDocInfo().addSuppression(warning);
if(getJSDocInfo()==null){
setJSDocInfo(new JSDocInfo(false));
}
getJSDocInfo().addSuppression(warning);

========
MM Copying to MM
GPR[SPVS]-1659881266290
GPR[SPVAP]-1659881266290
GPR[EPVAP]-1659881273347
GPR[SPVATF]-1659881273347
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881275714
GPR[EPVS]-1659881275714
========
if(getJSDocInfo()==null){
setJSDocInfo(new JSDocInfo(false));
}
if(nodeB.getJSDocInfo()==null||next.getType()!=Token.GETPROP||member.getFirstChild().getType()!=Token.THIS){
return ;
}
getJSDocInfo().addSuppression(warning);

========
MM Copying to MM
GPR[SPVS]-1659881275720
GPR[SPVAP]-1659881275720
GPR[EPVAP]-1659881276975
GPR[EPVS]-1659881276975
GPR[ESUN]-1659881276978
GPR[SSUN]-1659881276978
com.google.javascript.rhino.Node,2047
Find no block!
GPR[SSUN]-1659881277456
com.google.javascript.rhino.JSDocInfo,545
UNKNOWN ASTNode type : catch (Exception e) {
  Result r=new Result(true);
  r.exceptions.add(e);
  return r;
}

UNKNOWN ASTNode type : catch (Exception e) {
  Result r=new Result(true);
  r.exceptions.add(e);
  return r;
}

UNKNOWN ASTNode type : catch (Exception e) {
  Result r=new Result(true);
  r.exceptions.add(e);
  return r;
}

UNKNOWN ASTNode type : catch (Exception e) {
  Result r=new Result(true);
  r.exceptions.add(e);
  return r;
}

========
lazyInitInfo();
if(info.modifies==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881279408
GPR[SPVAP]-1659881279408
GPR[EPVAP]-1659881286436
GPR[SPVATF]-1659881286436
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881288793
GPR[EPVS]-1659881288793
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(modifies);

========
MM Copying to MM
GPR[SPVS]-1659881288795
GPR[SPVAP]-1659881288795
GPR[EPVAP]-1659881290021
GPR[EPVS]-1659881290021
========
lazyInitInfo();
if(options.syntheticBlockStartMarker==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881290025
GPR[SPVAP]-1659881290025
GPR[EPVAP]-1659881291257
GPR[EPVS]-1659881291257
========
lazyInitInfo();
if(info.suppressions!=null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881291259
GPR[SPVAP]-1659881291259
GPR[EPVAP]-1659881294161
GPR[SPVATF]-1659881294161
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881296726
GPR[EPVS]-1659881296726
========
lazyInitInfo();
if(options.syntheticBlockStartMarker!=null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881296727
GPR[SPVAP]-1659881296727
GPR[EPVAP]-1659881297982
GPR[EPVS]-1659881297982
========
lazyInitInfo();
if(options.instrumentationTemplate==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881297984
GPR[SPVAP]-1659881297984
GPR[EPVAP]-1659881299213
GPR[EPVS]-1659881299213
========
lazyInitInfo();
if(options.instrumentationTemplate!=null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881299215
GPR[SPVAP]-1659881299215
GPR[EPVAP]-1659881300440
GPR[EPVS]-1659881300440
========
lazyInitInfo();
if(suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881300442
GPR[SPVAP]-1659881300442
GPR[EPVAP]-1659881301679
GPR[EPVS]-1659881301679
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
resultSet.names.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881301681
GPR[SPVAP]-1659881301681
GPR[EPVAP]-1659881302926
GPR[EPVS]-1659881302926
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(sourceName);

========
MM Copying to MM
GPR[SPVS]-1659881302928
GPR[SPVAP]-1659881302928
GPR[EPVAP]-1659881305544
GPR[SPVATF]-1659881305544
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881307886
GPR[EPVS]-1659881307886
========
if(includeDocumentation){
add(")");
}
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881307888
GPR[SPVAP]-1659881307888
GPR[EPVAP]-1659881309139
GPR[EPVS]-1659881309139
========
add("if(");
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881309142
GPR[SPVAP]-1659881309142
GPR[EPVAP]-1659881310388
GPR[EPVS]-1659881310388
========
add(")");
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881310390
GPR[SPVAP]-1659881310390
GPR[EPVAP]-1659881311621
GPR[EPVS]-1659881311621
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(p.oldName);

========
MM Copying to MM
GPR[SPVS]-1659881311623
GPR[SPVAP]-1659881311623
GPR[EPVAP]-1659881312856
GPR[EPVS]-1659881312856
========
lazyInitInfo();
if(options.customPasses==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881312859
GPR[SPVAP]-1659881312859
GPR[EPVAP]-1659881314084
GPR[EPVS]-1659881314084
========
lazyInitInfo();
if(options.customPasses!=null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881314087
GPR[SPVAP]-1659881314087
GPR[EPVAP]-1659881315340
GPR[EPVS]-1659881315340
========
lazyInitInfo();
if(info.thrownTypes==null){
info.suppressions=Sets.newHashSet();
}
info.thrownTypes.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881315342
GPR[SPVAP]-1659881315342
GPR[EPVAP]-1659881316588
GPR[EPVS]-1659881316588
========
lazyInitInfo();
if(info.thrownTypes==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881316590
GPR[SPVAP]-1659881316590
GPR[EPVAP]-1659881319163
GPR[SPVATF]-1659881319163
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881321552
GPR[EPVS]-1659881321552
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.thrownTypes.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881321554
GPR[SPVAP]-1659881321554
GPR[EPVAP]-1659881322784
GPR[EPVS]-1659881322784
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(thisType);

========
MM Copying to MM
GPR[SPVS]-1659881322786
GPR[SPVAP]-1659881322786
GPR[EPVAP]-1659881324038
GPR[EPVS]-1659881324038
========
add(parameters);
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881324040
GPR[SPVAP]-1659881324040
GPR[EPVAP]-1659881325273
GPR[EPVS]-1659881325273
========
Lists.newArrayList().add(new KeywordAliasSpecification(ALIAS_NULL,Token.NULL));
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881325275
GPR[SPVAP]-1659881325275
GPR[EPVAP]-1659881326516
GPR[EPVS]-1659881326516
========
Lists.newArrayList().add(new KeywordAliasSpecification(ALIAS_TRUE,Token.TRUE));
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881326518
GPR[SPVAP]-1659881326518
GPR[EPVAP]-1659881327751
GPR[EPVS]-1659881327751
========
Lists.newArrayList().add(new VoidKeywordAliasSpecification(ALIAS_VOID,Token.VOID));
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881327753
GPR[SPVAP]-1659881327753
GPR[EPVAP]-1659881329038
GPR[EPVS]-1659881329038
========
Lists.newArrayList().add(new ThrowAliasSpecification(ALIAS_THROW));
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881329039
GPR[SPVAP]-1659881329039
GPR[EPVAP]-1659881330272
GPR[EPVS]-1659881330272
========
lazyInitInfo();
if((type=suppressions.getInstanceFromPrototype(type))!=null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881330275
GPR[SPVAP]-1659881330275
GPR[EPVAP]-1659881331535
GPR[EPVS]-1659881331536
========
lazyInitInfo();
if((type=suppressions.getInstanceFromPrototype(type))==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881331537
GPR[SPVAP]-1659881331537
GPR[EPVAP]-1659881332768
GPR[EPVS]-1659881332768
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(type);

========
MM Copying to MM
GPR[SPVS]-1659881332770
GPR[SPVAP]-1659881332770
GPR[EPVAP]-1659881334009
GPR[EPVS]-1659881334009
========
lazyInitInfo();
if(info.implementedInterfaces==null){
info.suppressions=Sets.newHashSet();
}
info.implementedInterfaces.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881334014
GPR[SPVAP]-1659881334014
GPR[EPVAP]-1659881335259
GPR[EPVS]-1659881335259
========
lazyInitInfo();
if(info.implementedInterfaces==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881335260
GPR[SPVAP]-1659881335260
GPR[EPVAP]-1659881337912
GPR[SPVATF]-1659881337912
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881340222
GPR[EPVS]-1659881340222
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.implementedInterfaces.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881340223
GPR[SPVAP]-1659881340223
GPR[EPVAP]-1659881341454
GPR[EPVS]-1659881341454
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
if(info.implementedInterfaces.contains(thisType)){
return false;
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881341456
GPR[SPVAP]-1659881341456
GPR[EPVAP]-1659881342688
GPR[EPVS]-1659881342688
========
lazyInitInfo();
if(info.implementedInterfaces==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(thisType);

========
MM Copying to MM
GPR[SPVS]-1659881342690
GPR[SPVAP]-1659881342690
GPR[EPVAP]-1659881343923
GPR[EPVS]-1659881343923
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.implementedInterfaces.add(thisType);

========
MM Copying to MM
GPR[SPVS]-1659881343924
GPR[SPVAP]-1659881343924
GPR[EPVAP]-1659881346504
GPR[SPVATF]-1659881346504
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881348831
GPR[EPVS]-1659881348831
========
lazyInitInfo();
if(info.implementedInterfaces==null){
info.suppressions=Sets.newHashSet();
}
info.implementedInterfaces.add(thisType);

========
MM Copying to MM
GPR[SPVS]-1659881348833
GPR[SPVAP]-1659881348833
GPR[EPVAP]-1659881351428
GPR[SPVATF]-1659881351428
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881353758
GPR[EPVS]-1659881353758
========
suppressions.add(suppression);
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881353760
GPR[SPVAP]-1659881353760
GPR[EPVAP]-1659881354998
GPR[EPVS]-1659881354998
========
lazyInitInfo();
if(options.anonymousFunctionNaming==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881355002
GPR[SPVAP]-1659881355002
GPR[EPVAP]-1659881356226
GPR[EPVS]-1659881356226
========
lazyInitInfo();
if(options.anonymousFunctionNaming==AnonymousFunctionNamingPolicy.MAPPED){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881356228
GPR[SPVAP]-1659881356228
GPR[EPVAP]-1659881357463
GPR[EPVS]-1659881357463
========
lazyInitInfo();
if(info.suppressions==AnonymousFunctionNamingPolicy.MAPPED){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881357464
GPR[SPVAP]-1659881357464
GPR[EPVAP]-1659881358704
GPR[EPVS]-1659881358704
========
lazyInitInfo();
if(options.propertyRenaming==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881358706
GPR[SPVAP]-1659881358706
GPR[EPVAP]-1659881359953
GPR[EPVS]-1659881359953
========
lazyInitInfo();
if(options.propertyRenaming!=PropertyRenamingPolicy.OFF){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881359955
GPR[SPVAP]-1659881359955
GPR[EPVAP]-1659881361185
GPR[EPVS]-1659881361185
========
lazyInitInfo();
if(info.suppressions==PropertyRenamingPolicy.OFF){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881361186
GPR[SPVAP]-1659881361186
GPR[EPVAP]-1659881362426
GPR[EPVS]-1659881362426
========
lazyInitInfo();
if(options.propertyRenaming!=null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881362427
GPR[SPVAP]-1659881362427
GPR[EPVAP]-1659881363660
GPR[EPVS]-1659881363660
========
lazyInitInfo();
if(options.variableRenaming==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881363662
GPR[SPVAP]-1659881363662
GPR[EPVAP]-1659881364928
GPR[EPVS]-1659881364928
========
lazyInitInfo();
if(options.variableRenaming!=VariableRenamingPolicy.ALL){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881364930
GPR[SPVAP]-1659881364930
GPR[EPVAP]-1659881366164
GPR[EPVS]-1659881366164
========
lazyInitInfo();
if(info.suppressions==VariableRenamingPolicy.ALL){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881366166
GPR[SPVAP]-1659881366166
GPR[EPVAP]-1659881367394
GPR[EPVS]-1659881367394
========
lazyInitInfo();
if(options.variableRenaming!=null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881367395
GPR[SPVAP]-1659881367395
GPR[EPVAP]-1659881368630
GPR[EPVS]-1659881368630
========
lazyInitInfo();
if(options.variableRenaming!=VariableRenamingPolicy.OFF){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881368632
GPR[SPVAP]-1659881368632
GPR[EPVAP]-1659881369876
GPR[EPVS]-1659881369876
========
lazyInitInfo();
if(info.suppressions==VariableRenamingPolicy.OFF){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881369877
GPR[SPVAP]-1659881369877
GPR[EPVAP]-1659881371111
GPR[EPVS]-1659881371111
========
lazyInitInfo();
if(options.anonymousFunctionNaming==AnonymousFunctionNamingPolicy.UNMAPPED){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881371113
GPR[SPVAP]-1659881371113
GPR[EPVAP]-1659881372357
GPR[EPVS]-1659881372357
========
lazyInitInfo();
if(info.suppressions==AnonymousFunctionNamingPolicy.UNMAPPED){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881372359
GPR[SPVAP]-1659881372359
GPR[EPVAP]-1659881373602
GPR[EPVS]-1659881373602
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(p.error);

========
MM Copying to MM
GPR[SPVS]-1659881373604
GPR[SPVAP]-1659881373604
GPR[EPVAP]-1659881374851
GPR[EPVS]-1659881374851
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(a.oldName);

========
MM Copying to MM
GPR[SPVS]-1659881374855
GPR[SPVAP]-1659881374855
GPR[EPVAP]-1659881376108
GPR[EPVS]-1659881376108
========
if(MASK_NOCOMPILE!=-1){
return false;
}
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881376110
GPR[SPVAP]-1659881376110
GPR[EPVAP]-1659881377353
GPR[EPVS]-1659881377353
========
lazyInitInfo();
if(options.checkCaja==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881377355
GPR[SPVAP]-1659881377355
GPR[EPVAP]-1659881378603
GPR[EPVS]-1659881378603
========
lazyInitInfo();
if(options.closurePass==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881378605
GPR[SPVAP]-1659881378605
GPR[EPVAP]-1659881379857
GPR[EPVS]-1659881379857
========
for(List<String> sees : this.Sets.newHashSet()){
orders.add(seq.subList(0,Integer.MAX_VALUE));
}
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881379859
GPR[SPVAP]-1659881379859
GPR[EPVAP]-1659881381091
GPR[EPVS]-1659881381091
========
lazyInitInfo();
if(a.newName==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881381093
GPR[SPVAP]-1659881381093
GPR[EPVAP]-1659881382328
GPR[EPVS]-1659881382328
========
lazyInitInfo();
if(info.suppressions==null){
modifies.add(a.newName);
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881382329
GPR[SPVAP]-1659881382329
GPR[EPVAP]-1659881383558
GPR[EPVS]-1659881383558
========
lazyInitInfo();
if(info.baseType==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881383561
GPR[SPVAP]-1659881383561
GPR[EPVAP]-1659881386187
GPR[SPVATF]-1659881386188
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881388513
GPR[EPVS]-1659881388513
========
lazyInitInfo();
if(info.baseType!=null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881388514
GPR[SPVAP]-1659881388514
GPR[EPVAP]-1659881391101
GPR[SPVATF]-1659881391101
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881393426
GPR[EPVS]-1659881393426
========
type=type.restrictByNotNullOrUndefined();
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881393428
GPR[SPVAP]-1659881393428
GPR[EPVAP]-1659881394652
GPR[EPVS]-1659881394652
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(ns.name);

========
MM Copying to MM
GPR[SPVS]-1659881394654
GPR[SPVAP]-1659881394654
GPR[EPVAP]-1659881395913
GPR[EPVS]-1659881395913
========
lazyInitInfo();
if(options.nameReferenceGraphPath==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881395916
GPR[SPVAP]-1659881395916
GPR[EPVAP]-1659881397148
GPR[EPVS]-1659881397148
========
lazyInitInfo();
if(options.nameReferenceReportPath==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881397150
GPR[SPVAP]-1659881397150
GPR[EPVAP]-1659881398387
GPR[EPVS]-1659881398388
========
lazyInitInfo();
if(options.checkSuspiciousCode==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881398389
GPR[SPVAP]-1659881398389
GPR[EPVAP]-1659881399636
GPR[EPVS]-1659881399636
========
lazyInitInfo();
if(options.checkUndefinedProperties==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881399638
GPR[SPVAP]-1659881399638
GPR[EPVAP]-1659881400887
GPR[EPVS]-1659881400887
========
lazyInitInfo();
if(info.deprecated==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881400889
GPR[SPVAP]-1659881400889
GPR[EPVAP]-1659881403464
GPR[SPVATF]-1659881403464
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881405800
GPR[EPVS]-1659881405800
========
lazyInitInfo();
if(info.deprecated!=null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881405802
GPR[SPVAP]-1659881405802
GPR[EPVAP]-1659881408412
GPR[SPVATF]-1659881408412
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881410722
GPR[EPVS]-1659881410722
========
info.deprecated=fileOverview;
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881410724
GPR[SPVAP]-1659881410724
GPR[EPVAP]-1659881411964
GPR[EPVS]-1659881411964
========
info.suppressions=suppressions;
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881411966
GPR[SPVAP]-1659881411966
GPR[EPVAP]-1659881413188
GPR[EPVS]-1659881413188
========
if(info.modifies!=null){
return false;
}
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881413190
GPR[SPVAP]-1659881413190
GPR[EPVAP]-1659881414432
GPR[EPVS]-1659881414432
========
info.modifies=modifies;
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881414433
GPR[SPVAP]-1659881414433
GPR[EPVAP]-1659881415676
GPR[EPVS]-1659881415676
========
if(info.templateTypeName!=null){
return false;
}
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881415677
GPR[SPVAP]-1659881415677
GPR[EPVAP]-1659881416933
GPR[EPVS]-1659881416933
========
info.templateTypeName=templateTypeName;
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881416937
GPR[SPVAP]-1659881416937
GPR[EPVAP]-1659881418169
GPR[EPVS]-1659881418169
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
state.cssNames==null?null:info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881418170
GPR[SPVAP]-1659881418170
GPR[EPVAP]-1659881419259
GPR[EPVS]-1659881419259
========
this.suppressions=state.exportedNames==null?null:Sets.newHashSet(state.exportedNames);
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881419261
GPR[SPVAP]-1659881419261
GPR[EPVAP]-1659881420506
GPR[EPVS]-1659881420506
========
lazyInitInfo();
if(options.aliasableStrings==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881420507
GPR[SPVAP]-1659881420507
GPR[EPVAP]-1659881421741
GPR[EPVS]-1659881421741
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(new LoopInternal());

========
MM Copying to MM
GPR[SPVS]-1659881421743
GPR[SPVAP]-1659881421743
GPR[EPVAP]-1659881422982
GPR[EPVS]-1659881422982
========
lazyInitInfo();
if(type==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881422984
GPR[SPVAP]-1659881422984
GPR[EPVAP]-1659881425580
GPR[SPVATF]-1659881425581
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881427890
GPR[EPVS]-1659881427890
========
lazyInitInfo();
if(type!=null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881427892
GPR[SPVAP]-1659881427892
GPR[EPVAP]-1659881430481
GPR[SPVATF]-1659881430481
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881432801
GPR[EPVS]-1659881432801
========
lazyInitInfo();
if(thisType==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881432803
GPR[SPVAP]-1659881432803
GPR[EPVAP]-1659881435431
GPR[SPVATF]-1659881435431
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881437721
GPR[EPVS]-1659881437721
========
lazyInitInfo();
if(thisType!=null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881437723
GPR[SPVAP]-1659881437723
GPR[EPVAP]-1659881440333
GPR[SPVATF]-1659881440333
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881442660
GPR[EPVS]-1659881442660
========
add(".");
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881442664
GPR[SPVAP]-1659881442664
GPR[EPVAP]-1659881443898
GPR[EPVS]-1659881443898
========
lazyInitInfo();
if(info==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881443900
GPR[SPVAP]-1659881443900
GPR[EPVAP]-1659881446545
GPR[SPVATF]-1659881446545
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881448850
GPR[EPVS]-1659881448850
========
lazyInitInfo();
if(sees==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881448852
GPR[SPVAP]-1659881448852
GPR[EPVAP]-1659881450116
GPR[EPVS]-1659881450116
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(new Name(suppression,this,includeDocumentation));

========
MM Copying to MM
GPR[SPVS]-1659881450117
GPR[SPVAP]-1659881450118
GPR[EPVAP]-1659881451377
GPR[EPVS]-1659881451377
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.checkState(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881451379
GPR[SPVAP]-1659881451379
GPR[EPVAP]-1659881452617
GPR[EPVS]-1659881452617
========
lazyInitInfo();
if(info.suppressions==null){
if(info!=null&&info.isConstructor()){
sees.add(suppression);
}
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881452619
GPR[SPVAP]-1659881452619
GPR[EPVAP]-1659881453858
GPR[EPVS]-1659881453858
========
lazyInitInfo();
if(options.smartNameRemoval==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881453860
GPR[SPVAP]-1659881453860
GPR[EPVAP]-1659881455094
GPR[EPVS]-1659881455094
========
lazyInitInfo();
if(p.newName==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881455097
GPR[SPVAP]-1659881455097
GPR[EPVAP]-1659881456339
GPR[EPVS]-1659881456339
========
case Token.FUNCTION :

lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881456341
GPR[SPVAP]-1659881456341
GPR[EPVAP]-1659881457420
GPR[EPVS]-1659881457420
========
suppressions=Sets.newHashSet();
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881457423
GPR[SPVAP]-1659881457423
GPR[EPVAP]-1659881459092
GPR[EPVS]-1659881459092
========
lazyInitInfo();
if(options.checkUnreachableCode==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881459097
GPR[SPVAP]-1659881459097
GPR[EPVAP]-1659881460400
GPR[EPVS]-1659881460400
========
lazyInitInfo();
if(documentation.sees==null){
info.suppressions=Sets.newHashSet();
}
documentation.sees.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881460403
GPR[SPVAP]-1659881460403
GPR[EPVAP]-1659881463060
GPR[SPVATF]-1659881463060
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881465441
GPR[EPVS]-1659881465441
========
lazyInitInfo();
if(documentation.sees==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881465442
GPR[SPVAP]-1659881465442
GPR[EPVAP]-1659881468064
GPR[SPVATF]-1659881468064
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881470388
GPR[EPVS]-1659881470388
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
documentation.sees.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881470390
GPR[SPVAP]-1659881470390
GPR[EPVAP]-1659881472987
GPR[SPVATF]-1659881472988
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881475365
GPR[EPVS]-1659881475365
========
lazyInitInfo();
if(!lazyInitDocumentation()){
return true;
}
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881475366
GPR[SPVAP]-1659881475366
GPR[EPVAP]-1659881476602
GPR[EPVS]-1659881476602
========
lazyInitInfo();
if(documentation.authors==null){
info.suppressions=Sets.newHashSet();
}
documentation.authors.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881476607
GPR[SPVAP]-1659881476607
GPR[EPVAP]-1659881479191
GPR[SPVATF]-1659881479191
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881481512
GPR[EPVS]-1659881481512
========
lazyInitInfo();
if(documentation.authors==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881481514
GPR[SPVAP]-1659881481514
GPR[EPVAP]-1659881484132
GPR[SPVATF]-1659881484132
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881486447
GPR[EPVS]-1659881486447
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
documentation.authors.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881486448
GPR[SPVAP]-1659881486448
GPR[EPVAP]-1659881489081
GPR[SPVATF]-1659881489081
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881491405
GPR[EPVS]-1659881491405
========
lazyInitInfo();
if(!lazyInitDocumentation()){
return true;
}
if(documentation.authors==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881491407
GPR[SPVAP]-1659881491407
GPR[EPVAP]-1659881492641
GPR[EPVS]-1659881492641
========
lazyInitInfo();
if(!lazyInitDocumentation()){
return true;
}
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
documentation.authors.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881492643
GPR[SPVAP]-1659881492643
GPR[EPVAP]-1659881493876
GPR[EPVS]-1659881493876
========
lazyInitInfo();
if(!lazyInitDocumentation()){
return true;
}
if(documentation.authors==null){
info.suppressions=Sets.newHashSet();
}
documentation.authors.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881493878
GPR[SPVAP]-1659881493878
GPR[EPVAP]-1659881495128
GPR[EPVS]-1659881495128
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
implementedInterfaces.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881495132
GPR[SPVAP]-1659881495132
GPR[EPVAP]-1659881496373
GPR[EPVS]-1659881496373
========
lazyInitInfo();
if(documentation.markers==null){
info.suppressions=Sets.newHashSet();
}
documentation.markers.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881496375
GPR[SPVAP]-1659881496375
GPR[EPVAP]-1659881497623
GPR[EPVS]-1659881497623
========
lazyInitInfo();
if(documentation.markers==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881497624
GPR[SPVAP]-1659881497624
GPR[EPVAP]-1659881500226
GPR[SPVATF]-1659881500226
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881502560
GPR[EPVS]-1659881502560
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
documentation.markers.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881502561
GPR[SPVAP]-1659881502561
GPR[EPVAP]-1659881503804
GPR[EPVS]-1659881503804
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(new Marker());

========
MM Copying to MM
GPR[SPVS]-1659881503806
GPR[SPVAP]-1659881503806
GPR[EPVAP]-1659881505039
GPR[EPVS]-1659881505039
========
lazyInitInfo();
if(!lazyInitDocumentation()){
return null;
}
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881505041
GPR[SPVAP]-1659881505041
GPR[EPVAP]-1659881506273
GPR[EPVS]-1659881506273
========
lazyInitInfo();
if(info.parameters==null){
info.suppressions=Sets.newHashSet();
}
info.parameters.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881506275
GPR[SPVAP]-1659881506275
GPR[EPVAP]-1659881507511
GPR[EPVS]-1659881507511
========
lazyInitInfo();
if(info.parameters==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881507513
GPR[SPVAP]-1659881507513
GPR[EPVAP]-1659881510112
GPR[SPVATF]-1659881510113
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881512449
GPR[EPVS]-1659881512449
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.parameters.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881512450
GPR[SPVAP]-1659881512450
GPR[EPVAP]-1659881513676
GPR[EPVS]-1659881513676
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(name);

========
MM Copying to MM
GPR[SPVS]-1659881513678
GPR[SPVAP]-1659881513679
GPR[EPVAP]-1659881514921
GPR[EPVS]-1659881514921
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
sideEffectInfo.knownLocals.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881514923
GPR[SPVAP]-1659881514923
GPR[EPVAP]-1659881516158
GPR[EPVS]-1659881516158
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.occurrences.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881516160
GPR[SPVAP]-1659881516160
GPR[EPVAP]-1659881517408
GPR[EPVS]-1659881517408
========
info.numOccurrences++;
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881517409
GPR[SPVAP]-1659881517409
GPR[EPVAP]-1659881518682
GPR[EPVS]-1659881518682
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(PrototypeMemberDeclaration.extractDeclaration(head.node.getNext()));

========
MM Copying to MM
GPR[SPVS]-1659881518684
GPR[SPVAP]-1659881518684
GPR[EPVAP]-1659881519930
GPR[EPVS]-1659881519930
========
Lists.newArrayList().add(symbols.get(0));
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881519932
GPR[SPVAP]-1659881519932
GPR[EPVAP]-1659881521171
GPR[EPVS]-1659881521171
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
if(!includeDocumentation){
throw new FlagUsageException("Can\'t specify stdin.");
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881521173
GPR[SPVAP]-1659881521173
GPR[EPVAP]-1659881522411
GPR[EPVS]-1659881522411
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
if(includeDocumentation){
throw new FlagUsageException("Can\'t specify stdin twice.");
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881522412
GPR[SPVAP]-1659881522412
GPR[EPVAP]-1659881523642
GPR[EPVS]-1659881523642
========
includeDocumentation=true;
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881523643
GPR[SPVAP]-1659881523643
GPR[EPVAP]-1659881526235
GPR[SPVATF]-1659881526235
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881528560
GPR[EPVS]-1659881528560
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
global.uses.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881528562
GPR[SPVAP]-1659881528562
GPR[EPVAP]-1659881529799
GPR[EPVS]-1659881529799
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(ConcreteType.ALL);

========
MM Copying to MM
GPR[SPVS]-1659881529801
GPR[SPVAP]-1659881529801
GPR[EPVAP]-1659881531038
GPR[EPVS]-1659881531039
========
lazyInitInfo();
if(options.checkSymbols==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881531041
GPR[SPVAP]-1659881531041
GPR[EPVAP]-1659881532298
GPR[EPVS]-1659881532298
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(iVar.name);

========
MM Copying to MM
GPR[SPVS]-1659881532301
GPR[SPVAP]-1659881532301
GPR[EPVAP]-1659881533540
GPR[EPVS]-1659881533540
========
trimCanidatesUsingOnCost();
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881533542
GPR[SPVAP]-1659881533542
GPR[EPVAP]-1659881534792
GPR[EPVS]-1659881534792
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
parameters.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881534794
GPR[SPVAP]-1659881534794
GPR[EPVAP]-1659881536084
GPR[EPVS]-1659881536084
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(createConcreteInstance((ObjectType)getTypeRegistry().getNativeType(JSTypeNative.ARRAY_TYPE)));

========
MM Copying to MM
GPR[SPVS]-1659881536087
GPR[SPVAP]-1659881536087
GPR[EPVAP]-1659881537322
GPR[EPVS]-1659881537322
========
case Token.OBJECTLIT :

lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881537324
GPR[SPVAP]-1659881537324
GPR[EPVAP]-1659881538421
GPR[EPVS]-1659881538421
========
case Token.FALSE :

lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881538423
GPR[SPVAP]-1659881538423
GPR[EPVAP]-1659881539506
GPR[EPVS]-1659881539506
========
case Token.CONTINUE :

lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881539507
GPR[SPVAP]-1659881539507
GPR[EPVAP]-1659881540588
GPR[EPVS]-1659881540588
========
lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
case Token.SET :

info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881540590
GPR[SPVAP]-1659881540590
GPR[EPVAP]-1659881541671
GPR[EPVS]-1659881541671
========
case Token.NUMBER :

lazyInitInfo();
if(info.suppressions==null){
info.suppressions=Sets.newHashSet();
}
info.suppressions.add(suppression);

========
MM Copying to MM
GPR[SPVS]-1659881541673
GPR[SPVAP]-1659881541673
GPR[EPVAP]-1659881542752
GPR[EPVS]-1659881542752
GPR[ESUN]-1659881542753
GPR[SSUN]-1659881542753
com.google.javascript.rhino.JSDocInfo,547
========
if(info.modifies==null){
info.suppressions=Sets.newHashSet();
}

========
MM Copying to MM
GPR[SPVS]-1659881544510
GPR[SPVAP]-1659881544510
GPR[EPVAP]-1659881551528
GPR[SPVATF]-1659881551528
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881553941
GPR[EPVS]-1659881553941
========
if(suppressions==null){
info.suppressions=Sets.newHashSet();
}

========
MM Copying to MM
GPR[SPVS]-1659881553943
GPR[SPVAP]-1659881553943
GPR[EPVAP]-1659881555191
GPR[EPVS]-1659881555191
GPR[ESUN]-1659881555191
GPR[SSUN]-1659881555191
com.google.javascript.rhino.JSDocInfo,548
GPR[ESUN]-1659881555682
GPR[SSUN]-1659881555682
com.google.javascript.rhino.JSDocInfo,550
GPR[ESUN]-1659881555871
GPR[SSUN]-1659881555871
com.google.javascript.rhino.JSDocInfo,551
Find no block!
GPR[SSUN]-1659881556038
com.google.javascript.jscomp.VarCheck,137
UNKNOWN ASTNode type : catch (UnsupportedOperationException ex) {
  error(NEGATING_A_NON_NUMBER_ERROR,left);
  return n;
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException ex) {
  error(NEGATING_A_NON_NUMBER_ERROR,left);
  return n;
}

UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  compiler.report(t.makeError(n,INVALID_STYLE_ERROR,styleStr));
  return;
}

========
if(parent.getType()==Token.VAR||parent.getType()==Token.EXPR_RESULT||parent.getType()==Token.RETURN&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881559467
GPR[SPVAP]-1659881559467
GPR[EPVAP]-1659881566504
GPR[SPVATF]-1659881566504
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881568901
GPR[EPVS]-1659881568901
========
if(parent.getType()==Token.ASSIGN&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881568903
GPR[SPVAP]-1659881568903
GPR[EPVAP]-1659881571504
GPR[SPVATF]-1659881571504
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881573829
GPR[EPVS]-1659881573829
========
if(parent.getFirstChild().getType()==Token.NAME&&n.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881573831
GPR[SPVAP]-1659881573831
GPR[EPVAP]-1659881576509
GPR[SPVATF]-1659881576509
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881578815
GPR[EPVS]-1659881578815
========
if(parent.getType()==Token.SCRIPT&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881578816
GPR[SPVAP]-1659881578816
GPR[EPVAP]-1659881581421
GPR[SPVATF]-1659881581421
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881583747
GPR[EPVS]-1659881583747
========
Preconditions.checkState(n.hasOneChild());
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881583749
GPR[SPVAP]-1659881583749
GPR[EPVAP]-1659881586342
GPR[SPVATF]-1659881586342
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881588659
GPR[EPVS]-1659881588659
========
Preconditions.checkState(n.hasOneChild());
if(parent.getType()==Token.SCRIPT&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881588660
GPR[SPVAP]-1659881588660
GPR[EPVAP]-1659881591313
GPR[SPVATF]-1659881591313
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881593638
GPR[EPVS]-1659881593638
========
if(parent.getType()==Token.FUNCTION||parent.getType()==Token.VAR&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881593639
GPR[SPVAP]-1659881593639
GPR[EPVAP]-1659881596230
GPR[SPVATF]-1659881596230
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881598630
GPR[EPVS]-1659881598630
========
if(varName.isEmpty()){
Preconditions.checkState(NodeUtil.isFunction(parent));
if(!NodeUtil.isFunctionExpression(parent)){
t.report(parent,INVALID_FUNCTION_DECL);
}
return ;
}
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881598632
GPR[SPVAP]-1659881598632
GPR[EPVAP]-1659881601235
GPR[SPVATF]-1659881601235
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881603556
GPR[EPVS]-1659881603556
========
if(n.getType()==Token.DO&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881603557
GPR[SPVAP]-1659881603557
GPR[EPVAP]-1659881606180
GPR[SPVATF]-1659881606180
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881608511
GPR[EPVS]-1659881608511
========
if(n.getType()==Token.GETPROP&&n==parent.getFirstChild()&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881608512
GPR[SPVAP]-1659881608512
GPR[EPVAP]-1659881611088
GPR[SPVATF]-1659881611088
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881613433
GPR[EPVS]-1659881613433
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
expr.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881613435
GPR[SPVAP]-1659881613435
GPR[EPVAP]-1659881614677
GPR[EPVS]-1659881614677
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
if((synthesizedExternsRoot.getType()==Token.STRING||synthesizedExternsRoot.getType()==Token.NUMBER)&&!synthesizedExternsRoot.isEquivalentTo(parent)){
return false;
}
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881614678
GPR[SPVAP]-1659881614678
GPR[EPVAP]-1659881615904
GPR[EPVS]-1659881615904
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
n.replaceChild(synthesizedExternsRoot,synthesizedExternsRoot);
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881615905
GPR[SPVAP]-1659881615905
GPR[EPVAP]-1659881618497
GPR[SPVATF]-1659881618497
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881620826
GPR[EPVS]-1659881620826
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
if((synthesizedExternsRoot.getType()==Token.STRING||synthesizedExternsRoot.getType()==Token.NUMBER)&&!synthesizedExternsRoot.isEquivalentTo(parent)){
return false;
}
n.replaceChild(synthesizedExternsRoot,synthesizedExternsRoot);

createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881620827
GPR[SPVAP]-1659881620827
GPR[EPVAP]-1659881622064
GPR[EPVS]-1659881622064
========
if(n.getType()==Token.LP&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881622066
GPR[SPVAP]-1659881622066
GPR[EPVAP]-1659881624651
GPR[SPVATF]-1659881624651
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881627930
GPR[EPVS]-1659881627930
========
if(!n.getBooleanProp(Node.IS_CONSTANT_NAME)&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881627932
GPR[SPVAP]-1659881627932
GPR[EPVAP]-1659881630559
GPR[SPVATF]-1659881630559
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881632905
GPR[EPVS]-1659881632905
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
if(strictExternCheck){
String n.getString()=n.getString();
throw new IllegalStateException("Unexpected const change.\n"+"  name: "+n.getString());
}
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881632906
GPR[SPVAP]-1659881632906
GPR[EPVAP]-1659881634011
GPR[EPVS]-1659881634011
========
if((parent.getType()==Token.NEW||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881634013
GPR[SPVAP]-1659881634013
GPR[EPVAP]-1659881636620
GPR[SPVATF]-1659881636620
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881638948
GPR[EPVS]-1659881638948
========
if((parent.getType()==Token.VAR&&NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881638949
GPR[SPVAP]-1659881638949
GPR[EPVAP]-1659881641555
GPR[SPVATF]-1659881641555
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881643873
GPR[EPVS]-1659881643873
========
if((NodeUtil.isAssignmentOp(parent)&&parent.getFirstChild()==n)||(parent.getType()==Token.NEW&&isFirst)&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881643875
GPR[SPVAP]-1659881643875
GPR[EPVAP]-1659881645135
GPR[EPVS]-1659881645135
========
if((parent.getType()==Token.NEW&&NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881645136
GPR[SPVAP]-1659881645136
GPR[EPVAP]-1659881647724
GPR[SPVATF]-1659881647724
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881650042
GPR[EPVS]-1659881650042
========
if(parent.getType()==Token.GETPROP&&isQnameRootedInGlobalScope(parent)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881650044
GPR[SPVAP]-1659881650044
GPR[EPVAP]-1659881651290
GPR[EPVS]-1659881651290
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&isQnameRootedInGlobalScope(parent)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881651291
GPR[SPVAP]-1659881651291
GPR[EPVAP]-1659881652513
GPR[EPVS]-1659881652513
========
Preconditions.checkArgument(!varName.isEmpty());
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881652514
GPR[SPVAP]-1659881652514
GPR[EPVAP]-1659881655096
GPR[SPVATF]-1659881655097
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881657429
GPR[EPVS]-1659881657429
========
if(parent.getType()==Token.EXPR_RESULT&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881657431
GPR[SPVAP]-1659881657431
GPR[EPVAP]-1659881660052
GPR[SPVATF]-1659881660052
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881662379
GPR[EPVS]-1659881662379
========
if(n.getType()==Token.CATCH&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881662380
GPR[SPVAP]-1659881662380
GPR[EPVAP]-1659881665044
GPR[SPVATF]-1659881665044
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881667408
GPR[EPVS]-1659881667408
========
if(!NodeUtil.isLiteralValue(parent,false)&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881667409
GPR[SPVAP]-1659881667409
GPR[EPVAP]-1659881670017
GPR[SPVATF]-1659881670017
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881672315
GPR[EPVS]-1659881672315
========
if(parent!=null&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881672317
GPR[SPVAP]-1659881672317
GPR[EPVAP]-1659881674966
GPR[SPVATF]-1659881674966
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881677320
GPR[EPVS]-1659881677320
========
if(n.getType()==Token.ASSIGN&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881677322
GPR[SPVAP]-1659881677322
GPR[EPVAP]-1659881680018
GPR[SPVATF]-1659881680018
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881682354
GPR[EPVS]-1659881682354
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
n.getLastChild().detachFromParent();
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881682355
GPR[SPVAP]-1659881682355
GPR[EPVAP]-1659881684956
GPR[SPVATF]-1659881684956
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881687311
GPR[EPVS]-1659881687311
========
if(n.getType()==Token.ASSIGN&&varsToDeclareInExterns.contains(varName)){
n.getLastChild().detachFromParent();
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881687313
GPR[SPVAP]-1659881687313
GPR[EPVAP]-1659881689956
GPR[SPVATF]-1659881689956
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881692261
GPR[EPVS]-1659881692261
========
if(parent.getJSDocInfo()==null&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881692262
GPR[SPVAP]-1659881692262
GPR[EPVAP]-1659881694875
GPR[SPVATF]-1659881694875
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881697172
GPR[EPVS]-1659881697172
========
Preconditions.checkState(parent.getType()==Token.FUNCTION);
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881697173
GPR[SPVAP]-1659881697173
GPR[EPVAP]-1659881699769
GPR[SPVATF]-1659881699769
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881702132
GPR[EPVS]-1659881702132
========
Preconditions.checkState(parent.getType()==Token.FUNCTION);
if(parent.getJSDocInfo()==null&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881702133
GPR[SPVAP]-1659881702133
GPR[EPVAP]-1659881704716
GPR[SPVATF]-1659881704716
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881707085
GPR[EPVS]-1659881707085
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
Preconditions.checkState(parent.getType()==Token.FUNCTION);
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881707087
GPR[SPVAP]-1659881707087
GPR[EPVAP]-1659881709689
GPR[SPVATF]-1659881709689
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881712017
GPR[EPVS]-1659881712017
========
if(n.getJSType()==null&&parent.getType()==Token.FUNCTION){
varType=parent.getJSType();
}
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881712019
GPR[SPVAP]-1659881712019
GPR[EPVAP]-1659881713265
GPR[EPVS]-1659881713265
========
if((parent.getType()==Token.NAME||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881713266
GPR[SPVAP]-1659881713266
GPR[EPVAP]-1659881715877
GPR[SPVATF]-1659881715877
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881718198
GPR[EPVS]-1659881718198
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&scopes.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881718199
GPR[SPVAP]-1659881718199
GPR[EPVAP]-1659881719443
GPR[EPVS]-1659881719443
========
if(n.getType()==Token.THIS&&shouldReportThis(n,parent)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881719445
GPR[SPVAP]-1659881719445
GPR[EPVAP]-1659881720687
GPR[EPVS]-1659881720687
========
if(n.getType()==Token.THIS&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881720688
GPR[SPVAP]-1659881720688
GPR[EPVAP]-1659881723312
GPR[SPVATF]-1659881723313
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881725633
GPR[EPVS]-1659881725633
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&shouldReportThis(n,parent)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881725634
GPR[SPVAP]-1659881725634
GPR[EPVAP]-1659881726889
GPR[EPVS]-1659881726889
========
if((parent.getType()==Token.OBJECTLIT)&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881726891
GPR[SPVAP]-1659881726891
GPR[EPVAP]-1659881729494
GPR[SPVATF]-1659881729494
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881731806
GPR[EPVS]-1659881731806
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
parent.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881731807
GPR[SPVAP]-1659881731807
GPR[EPVAP]-1659881734424
GPR[SPVATF]-1659881734424
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881736799
GPR[EPVS]-1659881736799
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
Preconditions.checkState(parent.getType()==Token.NAME);
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881736800
GPR[SPVAP]-1659881736800
GPR[EPVAP]-1659881739440
GPR[SPVATF]-1659881739440
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881741736
GPR[EPVS]-1659881741736
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
Preconditions.checkState(parent.getType()==Token.NAME);
createSynthesizedExternVar(varName);
parent.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881741737
GPR[SPVAP]-1659881741737
GPR[EPVAP]-1659881744371
GPR[SPVATF]-1659881744371
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881746736
GPR[EPVS]-1659881746736
========
if(parent.getType()==Token.FUNCTION&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881746737
GPR[SPVAP]-1659881746737
GPR[EPVAP]-1659881749347
GPR[SPVATF]-1659881749347
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881751645
GPR[EPVS]-1659881751645
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
Preconditions.checkState(parent.getType()==Token.VAR);
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881751647
GPR[SPVAP]-1659881751647
GPR[EPVAP]-1659881754256
GPR[SPVATF]-1659881754256
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881756588
GPR[EPVS]-1659881756588
========
if(parent.getType()==Token.FUNCTION&&varsToDeclareInExterns.contains(varName)){
Preconditions.checkState(parent.getType()==Token.VAR);
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881756590
GPR[SPVAP]-1659881756590
GPR[EPVAP]-1659881759201
GPR[SPVATF]-1659881759201
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881761525
GPR[EPVS]-1659881761525
========
if(parent.getJSDocInfo()!=null&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881761527
GPR[SPVAP]-1659881761527
GPR[EPVAP]-1659881764140
GPR[SPVATF]-1659881764140
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881766474
GPR[EPVS]-1659881766474
========
if(parent.getType()==Token.ASSIGN&&parent.getFirstChild()==n&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881766475
GPR[SPVAP]-1659881766475
GPR[EPVAP]-1659881769076
GPR[SPVATF]-1659881769077
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881771385
GPR[EPVS]-1659881771385
========
if(parent.getParent().getType()==Token.CALL&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881771387
GPR[SPVAP]-1659881771387
GPR[EPVAP]-1659881773972
GPR[SPVATF]-1659881773972
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881776277
GPR[EPVS]-1659881776277
========
if(n.getType()==Token.NAME&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881776278
GPR[SPVAP]-1659881776278
GPR[EPVAP]-1659881778888
GPR[SPVATF]-1659881778888
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881781230
GPR[EPVS]-1659881781230
========
if(n.getType()==Token.BLOCK&&parent!=null&&parent.getType()==Token.TRY&&NodeUtil.getCatchBlock(parent)==node&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881781231
GPR[SPVAP]-1659881781231
GPR[EPVAP]-1659881782479
GPR[EPVS]-1659881782479
========
if(n.getJSDocInfo()==null&&parent.getType()==Token.VAR&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881782480
GPR[SPVAP]-1659881782480
GPR[EPVAP]-1659881785123
GPR[SPVATF]-1659881785123
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881787453
GPR[EPVS]-1659881787453
========
if(parent.getNext()!=null&&sibling.getType()==Token.STRING&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881787455
GPR[SPVAP]-1659881787455
GPR[EPVAP]-1659881788708
GPR[EPVS]-1659881788708
========
if(strictExternCheck&&n.getType()==Token.CALL&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881788709
GPR[SPVAP]-1659881788709
GPR[EPVAP]-1659881791582
GPR[SPVATF]-1659881791582
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881794109
GPR[EPVS]-1659881794109
========
if(parent.getType()!=Token.NOT&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881794111
GPR[SPVAP]-1659881794111
GPR[EPVAP]-1659881796729
GPR[SPVATF]-1659881796729
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881799041
GPR[EPVS]-1659881799041
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
parent.copyInformationFrom(n);
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881799043
GPR[SPVAP]-1659881799043
GPR[EPVAP]-1659881801664
GPR[SPVATF]-1659881801664
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881804029
GPR[EPVS]-1659881804029
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
parent.getParent().addChildAfter(parent,parent);
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881804030
GPR[SPVAP]-1659881804030
GPR[EPVAP]-1659881806616
GPR[SPVATF]-1659881806616
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881808952
GPR[EPVS]-1659881808952
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
reportCodeChange();
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881808953
GPR[SPVAP]-1659881808953
GPR[EPVAP]-1659881810190
GPR[EPVS]-1659881810190
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
parent.copyInformationFrom(n);
parent.getParent().addChildAfter(parent,parent);
reportCodeChange();

createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881810194
GPR[SPVAP]-1659881810194
GPR[EPVAP]-1659881811412
GPR[EPVS]-1659881811412
========
if(parent.getType()==Token.EXPR_RESULT&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
parent.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881811414
GPR[SPVAP]-1659881811414
GPR[EPVAP]-1659881814008
GPR[SPVATF]-1659881814008
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881816325
GPR[EPVS]-1659881816325
========
if(parent.getType()==Token.EXPR_RESULT&&varsToDeclareInExterns.contains(varName)){
parent.copyInformationFrom(n);
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881816326
GPR[SPVAP]-1659881816326
GPR[EPVAP]-1659881818911
GPR[SPVATF]-1659881818911
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881821245
GPR[EPVS]-1659881821245
========
if(parent.getType()==Token.EXPR_RESULT&&varsToDeclareInExterns.contains(varName)){
parent.getParent().addChildAfter(parent,parent);
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881821246
GPR[SPVAP]-1659881821246
GPR[EPVAP]-1659881823873
GPR[SPVATF]-1659881823873
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881826204
GPR[EPVS]-1659881826204
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
parent.copyInformationFrom(n);
createSynthesizedExternVar(varName);
parent.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881826206
GPR[SPVAP]-1659881826206
GPR[EPVAP]-1659881828804
GPR[SPVATF]-1659881828804
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881831142
GPR[EPVS]-1659881831142
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
parent.getParent().addChildAfter(parent,parent);
createSynthesizedExternVar(varName);
parent.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881831143
GPR[SPVAP]-1659881831143
GPR[EPVAP]-1659881833732
GPR[SPVATF]-1659881833733
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881836053
GPR[EPVS]-1659881836053
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
parent.copyInformationFrom(n);
parent.getParent().addChildAfter(parent,parent);
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881836054
GPR[SPVAP]-1659881836054
GPR[EPVAP]-1659881838655
GPR[SPVATF]-1659881838655
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881840981
GPR[EPVS]-1659881840981
========
if(parent.getType()==Token.EXPR_RESULT&&varsToDeclareInExterns.contains(varName)){
parent.copyInformationFrom(n);
createSynthesizedExternVar(varName);
parent.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881840983
GPR[SPVAP]-1659881840983
GPR[EPVAP]-1659881843571
GPR[SPVATF]-1659881843571
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881845882
GPR[EPVS]-1659881845882
========
if(parent.getType()==Token.EXPR_RESULT&&varsToDeclareInExterns.contains(varName)){
parent.getParent().addChildAfter(parent,parent);
createSynthesizedExternVar(varName);
parent.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881845883
GPR[SPVAP]-1659881845883
GPR[EPVAP]-1659881848481
GPR[SPVATF]-1659881848481
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881850809
GPR[EPVS]-1659881850809
========
if(parent.getType()==Token.EXPR_RESULT&&varsToDeclareInExterns.contains(varName)){
parent.copyInformationFrom(n);
parent.getParent().addChildAfter(parent,parent);
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881850811
GPR[SPVAP]-1659881850811
GPR[EPVAP]-1659881853409
GPR[SPVATF]-1659881853409
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881855719
GPR[EPVS]-1659881855719
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
parent.copyInformationFrom(n);
parent.getParent().addChildAfter(parent,parent);
createSynthesizedExternVar(varName);
parent.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881855720
GPR[SPVAP]-1659881855720
GPR[EPVAP]-1659881858325
GPR[SPVATF]-1659881858325
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881860597
GPR[EPVS]-1659881860597
========
if(parent.getType()==Token.EXPR_RESULT&&varsToDeclareInExterns.contains(varName)){
parent.copyInformationFrom(n);
parent.getParent().addChildAfter(parent,parent);
createSynthesizedExternVar(varName);
parent.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881860598
GPR[SPVAP]-1659881860599
GPR[EPVAP]-1659881863197
GPR[SPVATF]-1659881863197
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881865487
GPR[EPVS]-1659881865487
========
if(n!=null&&parent.getType()==Token.VAR&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881865488
GPR[SPVAP]-1659881865488
GPR[EPVAP]-1659881868085
GPR[SPVATF]-1659881868085
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881870403
GPR[EPVS]-1659881870403
========
if((parent.getType()==Token.NAME)&&isDeclaration(parent)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881870405
GPR[SPVAP]-1659881870405
GPR[EPVAP]-1659881871654
GPR[EPVS]-1659881871654
========
if((parent.getType()==Token.NAME)&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881871655
GPR[SPVAP]-1659881871655
GPR[EPVAP]-1659881874281
GPR[SPVATF]-1659881874281
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881876583
GPR[EPVS]-1659881876583
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&isDeclaration(parent)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881876584
GPR[SPVAP]-1659881876584
GPR[EPVAP]-1659881877812
GPR[EPVS]-1659881877812
========
if(n.getType()==Token.STRING&&parent.getType()!=Token.GETPROP&&parent.getType()!=Token.REGEXP&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881877814
GPR[SPVAP]-1659881877814
GPR[EPVAP]-1659881880413
GPR[SPVATF]-1659881880413
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881882732
GPR[EPVS]-1659881882732
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&stripNamePrefixes.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881882734
GPR[SPVAP]-1659881882734
GPR[EPVAP]-1659881883968
GPR[EPVS]-1659881883968
========
if(n.getType()==Token.COMMA&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881883969
GPR[SPVAP]-1659881883969
GPR[EPVAP]-1659881886574
GPR[SPVATF]-1659881886574
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881888885
GPR[EPVS]-1659881888885
========
if(parent.getFirstChild().getString()!=null&&!name.isEmpty()&&parent!=null&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881888886
GPR[SPVAP]-1659881888886
GPR[EPVAP]-1659881890118
GPR[EPVS]-1659881890118
========
if(parent.getType()==Token.AND&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881890119
GPR[SPVAP]-1659881890119
GPR[EPVAP]-1659881892713
GPR[SPVATF]-1659881892713
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881895009
GPR[EPVS]-1659881895009
========
if(parent.getType()==Token.INSTANCEOF&&parent.getLastChild()==n&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881895011
GPR[SPVAP]-1659881895011
GPR[EPVAP]-1659881897615
GPR[SPVATF]-1659881897615
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881899919
GPR[EPVS]-1659881899919
========
if(NodeUtil.isGet(parent)&&n==parent.getFirstChild()&&n.getNext().getType()==Token.STRING&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881899920
GPR[SPVAP]-1659881899920
GPR[EPVAP]-1659881902520
GPR[SPVATF]-1659881902520
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881904842
GPR[EPVS]-1659881904842
========
if(parent.getType()==Token.FOR&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881904844
GPR[SPVAP]-1659881904844
GPR[EPVAP]-1659881907435
GPR[SPVATF]-1659881907435
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881909741
GPR[EPVS]-1659881909741
========
if(parent.getType()==Token.NAME&&RENAME_PROPERTY_FUNCTION_NAME.equals(parent.getString())){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881909742
GPR[SPVAP]-1659881909742
GPR[EPVAP]-1659881910976
GPR[EPVS]-1659881910976
========
if(parent.getType()==Token.NAME&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881910977
GPR[SPVAP]-1659881910977
GPR[EPVAP]-1659881913571
GPR[SPVATF]-1659881913571
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881915929
GPR[EPVS]-1659881915929
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&RENAME_PROPERTY_FUNCTION_NAME.equals(parent.getString())){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881915931
GPR[SPVAP]-1659881915931
GPR[EPVAP]-1659881917160
GPR[EPVS]-1659881917160
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&RENAME_PROPERTY_FUNCTION_NAME.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881917161
GPR[SPVAP]-1659881917161
GPR[EPVAP]-1659881918383
GPR[EPVS]-1659881918384
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&nonMethodProperties.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881918385
GPR[SPVAP]-1659881918385
GPR[EPVAP]-1659881919608
GPR[EPVS]-1659881919608
========
if(!strictExternCheck&&parent.getType()==Token.GETPROP&&n.getType()==Token.ASSIGN&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881919609
GPR[SPVAP]-1659881919609
GPR[EPVAP]-1659881922212
GPR[SPVATF]-1659881922212
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881924562
GPR[EPVS]-1659881924562
========
if(n.getType()==Token.STRING&&NodeUtil.isExprAssign(synthesizedExternsRoot)&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881924564
GPR[SPVAP]-1659881924564
GPR[EPVAP]-1659881927189
GPR[SPVATF]-1659881927189
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881929494
GPR[EPVS]-1659881929494
========
if(parent.getFirstChild()==n&&isReferenceToRemovedVar(t,n)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881929495
GPR[SPVAP]-1659881929495
GPR[EPVAP]-1659881930752
GPR[EPVS]-1659881930752
========
if(parent.getFirstChild()==n&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881930753
GPR[SPVAP]-1659881930753
GPR[EPVAP]-1659881933325
GPR[SPVATF]-1659881933325
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881935627
GPR[EPVS]-1659881935627
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&isReferenceToRemovedVar(t,n)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881935628
GPR[SPVAP]-1659881935628
GPR[EPVAP]-1659881936858
GPR[EPVS]-1659881936858
========
Preconditions.checkState(n.getType()==Token.NAME);
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881936860
GPR[SPVAP]-1659881936860
GPR[EPVAP]-1659881939458
GPR[SPVATF]-1659881939458
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881941774
GPR[EPVS]-1659881941774
========
if((parent.getType()!=Token.ARRAYLIT)&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881941775
GPR[SPVAP]-1659881941775
GPR[EPVAP]-1659881944363
GPR[SPVATF]-1659881944363
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881946689
GPR[EPVS]-1659881946689
========
if(n!=null&&NodeUtil.isLhs(n,parent)&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881946691
GPR[SPVAP]-1659881946691
GPR[EPVAP]-1659881949277
GPR[SPVATF]-1659881949277
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881951591
GPR[EPVS]-1659881951591
========
if(parent.getType()==Token.LABEL&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881951593
GPR[SPVAP]-1659881951593
GPR[EPVAP]-1659881954200
GPR[SPVATF]-1659881954200
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881957118
GPR[EPVS]-1659881957118
========
if(t.getScope().getVar(n.getString())!=null&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881957120
GPR[SPVAP]-1659881957120
GPR[EPVAP]-1659881959791
GPR[SPVATF]-1659881959791
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881962120
GPR[EPVS]-1659881962120
========
if(parent.getLineno()!=-1&&n.getType()!=Token.EMPTY&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881962122
GPR[SPVAP]-1659881962122
GPR[EPVAP]-1659881964724
GPR[SPVATF]-1659881964724
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881967030
GPR[EPVS]-1659881967030
========
if(parent==null||parent.getType()!=Token.FUNCTION&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881967031
GPR[SPVAP]-1659881967031
GPR[EPVAP]-1659881969627
GPR[SPVATF]-1659881969627
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881971919
GPR[EPVS]-1659881971919
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
add(")");
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881971921
GPR[SPVAP]-1659881971921
GPR[EPVAP]-1659881973188
GPR[EPVS]-1659881973188
========
if(parent.getType()!=Token.EMPTY&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881973190
GPR[SPVAP]-1659881973190
GPR[EPVAP]-1659881975771
GPR[SPVATF]-1659881975771
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881978123
GPR[EPVS]-1659881978123
========
if(!(NodeUtil.isAssignmentOp(parent)&&parent.getFirstChild()==n)&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881978124
GPR[SPVAP]-1659881978124
GPR[EPVAP]-1659881980718
GPR[SPVATF]-1659881980718
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881983032
GPR[EPVS]-1659881983032
========
if(parent==null&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881983033
GPR[SPVAP]-1659881983033
GPR[EPVAP]-1659881985638
GPR[SPVATF]-1659881985638
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881987919
GPR[EPVS]-1659881987919
========
if(!NodeUtil.isExpressionNode(n)&&!NodeUtil.isVar(n)){
return ;
}
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881987921
GPR[SPVAP]-1659881987921
GPR[EPVAP]-1659881990521
GPR[SPVATF]-1659881990521
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881992835
GPR[EPVS]-1659881992835
========
if(!NodeUtil.isExpressionNode(n)&&!NodeUtil.isVar(n)){
return ;
}
if(parent==null&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881992837
GPR[SPVAP]-1659881992837
GPR[EPVAP]-1659881995435
GPR[SPVATF]-1659881995435
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881997749
GPR[EPVS]-1659881997749
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
if(isLowerPrecedenceInExpression(parent,OR_PRECEDENCE)&&isLowerPrecedenceInExpression(synthesizedExternsRoot.getFirstChild(),OR_PRECEDENCE)){
return n;
}
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881997750
GPR[SPVAP]-1659881997750
GPR[EPVAP]-1659881999023
GPR[EPVS]-1659881999023
========
if(!strictExternCheck){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659881999026
GPR[SPVAP]-1659881999026
GPR[EPVAP]-1659882001599
GPR[SPVATF]-1659882001599
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882003914
GPR[EPVS]-1659882003914
========
if(!strictExternCheck&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882003915
GPR[SPVAP]-1659882003915
GPR[EPVAP]-1659882006533
GPR[SPVATF]-1659882006533
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882008881
GPR[EPVS]-1659882008881
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&blacklisted.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882008882
GPR[SPVAP]-1659882008882
GPR[EPVAP]-1659882010122
GPR[EPVS]-1659882010122
========
n.addChildToBack(synthesizedExternsRoot);
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882010124
GPR[SPVAP]-1659882010124
GPR[EPVAP]-1659882012759
GPR[SPVATF]-1659882012759
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882015095
GPR[EPVS]-1659882015095
========
if(parent.getType()==Token.STRING&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882015096
GPR[SPVAP]-1659882015096
GPR[EPVAP]-1659882017689
GPR[SPVATF]-1659882017689
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882020004
GPR[EPVS]-1659882020004
========
if(!NodeUtil.isFunctionExpression(parent)&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882020005
GPR[SPVAP]-1659882020005
GPR[EPVAP]-1659882022593
GPR[SPVATF]-1659882022593
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882024898
GPR[EPVS]-1659882024898
========
Preconditions.checkState(parent.getType()==Token.FUNCTION);
if(!NodeUtil.isFunctionExpression(parent)&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882024899
GPR[SPVAP]-1659882024899
GPR[EPVAP]-1659882027508
GPR[SPVATF]-1659882027508
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882029818
GPR[EPVS]-1659882029818
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&hasNoSideEffectsAnnotation(n)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882029819
GPR[SPVAP]-1659882029819
GPR[EPVAP]-1659882031059
GPR[EPVS]-1659882031059
========
if(parent.getType()==Token.GETPROP&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882031061
GPR[SPVAP]-1659882031061
GPR[EPVAP]-1659882033660
GPR[SPVATF]-1659882033660
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882035981
GPR[EPVS]-1659882035981
========
if(!varName.isEmpty()&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882035982
GPR[SPVAP]-1659882035982
GPR[EPVAP]-1659882038557
GPR[SPVATF]-1659882038557
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882040879
GPR[EPVS]-1659882040879
========
Preconditions.checkState(n.getType()==Token.LP);
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882040880
GPR[SPVAP]-1659882040880
GPR[EPVAP]-1659882043481
GPR[SPVATF]-1659882043481
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882045797
GPR[EPVS]-1659882045797
========
Preconditions.checkState(n.getType()==Token.LP);
if(!varName.isEmpty()&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882045798
GPR[SPVAP]-1659882045798
GPR[EPVAP]-1659882048399
GPR[SPVATF]-1659882048399
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882050687
GPR[EPVS]-1659882050687
========
if(createNameInformation(t,n,parent)==null){
return ;
}
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882050689
GPR[SPVAP]-1659882050689
GPR[EPVAP]-1659882051932
GPR[EPVS]-1659882051932
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
subtree=new Node(Token.BLOCK).copyInformationFrom(n);
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882051933
GPR[SPVAP]-1659882051933
GPR[EPVAP]-1659882053150
GPR[EPVS]-1659882053150
========
if(parent.getType()==Token.TRY&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882053152
GPR[SPVAP]-1659882053152
GPR[EPVAP]-1659882055708
GPR[SPVATF]-1659882055708
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882058029
GPR[EPVS]-1659882058029
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
lastJump=parent;
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882058030
GPR[SPVAP]-1659882058030
GPR[EPVAP]-1659882059302
GPR[EPVS]-1659882059302
========
Preconditions.checkState(parent!=null,"Cannot find continue target.");
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882059303
GPR[SPVAP]-1659882059303
GPR[EPVAP]-1659882061911
GPR[SPVATF]-1659882061911
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882064249
GPR[EPVS]-1659882064249
========
Preconditions.checkState(parent!=null,"Cannot find continue target.");
if(parent.getType()==Token.TRY&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882064250
GPR[SPVAP]-1659882064250
GPR[EPVAP]-1659882066848
GPR[SPVATF]-1659882066848
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882069149
GPR[EPVS]-1659882069149
========
Preconditions.checkState(isName(n));
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882069151
GPR[SPVAP]-1659882069151
GPR[EPVAP]-1659882070371
GPR[EPVS]-1659882070371
========
Preconditions.checkState(parent!=null,"Cannot find break target.");
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882070372
GPR[SPVAP]-1659882070372
GPR[EPVAP]-1659882072972
GPR[SPVATF]-1659882072972
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882075277
GPR[EPVS]-1659882075277
========
if(parent.getType()==Token.TRY&&varsToDeclareInExterns.contains(varName)){
lastJump=parent;
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882075279
GPR[SPVAP]-1659882075279
GPR[EPVAP]-1659882076503
GPR[EPVS]-1659882076503
========
Preconditions.checkState(parent!=null,"Cannot find break target.");
if(parent.getType()==Token.TRY&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882076504
GPR[SPVAP]-1659882076504
GPR[EPVAP]-1659882079108
GPR[SPVATF]-1659882079108
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882081426
GPR[EPVS]-1659882081426
========
Preconditions.checkState(parent!=null,"Cannot find break target.");
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
lastJump=parent;
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882081427
GPR[SPVAP]-1659882081427
GPR[EPVAP]-1659882082707
GPR[EPVS]-1659882082707
========
Preconditions.checkState(parent!=null,"Cannot find break target.");
if(parent.getType()==Token.TRY&&varsToDeclareInExterns.contains(varName)){
lastJump=parent;
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882082708
GPR[SPVAP]-1659882082708
GPR[EPVAP]-1659882083928
GPR[EPVS]-1659882083928
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
Preconditions.checkState(NodeUtil.isGet(parent));
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882083930
GPR[SPVAP]-1659882083930
GPR[EPVAP]-1659882086520
GPR[SPVATF]-1659882086520
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882088830
GPR[EPVS]-1659882088830
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
changed=true;
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882088831
GPR[SPVAP]-1659882088832
GPR[EPVAP]-1659882090078
GPR[EPVS]-1659882090078
========
Preconditions.checkArgument(n.getType()==Token.CALL||callSite.getType()==Token.NEW);
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882090079
GPR[SPVAP]-1659882090079
GPR[EPVAP]-1659882091289
GPR[EPVS]-1659882091289
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
if(parent.isQualifiedName()&&parent.getJSDocInfo()!=null){
return ;
}else if(NodeUtil.isExpressionNode(parent)){
return ;
}
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882091290
GPR[SPVAP]-1659882091290
GPR[EPVAP]-1659882093903
GPR[SPVATF]-1659882093903
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882096229
GPR[EPVS]-1659882096229
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
if(parent.getType()==Token.STRING){
msg="Is there a missing \'+\' on the previous line?";
}
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882096231
GPR[SPVAP]-1659882096231
GPR[EPVAP]-1659882097472
GPR[EPVS]-1659882097472
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
if(parent.isQualifiedName()&&parent.getJSDocInfo()!=null){
return ;
}else if(NodeUtil.isExpressionNode(parent)){
return ;
}
if(parent.getType()==Token.STRING){
msg="Is there a missing \'+\' on the previous line?";
}

createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882097473
GPR[SPVAP]-1659882097473
GPR[EPVAP]-1659882098700
GPR[EPVS]-1659882098700
========
if(!t.inGlobalScope()&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882098702
GPR[SPVAP]-1659882098702
GPR[EPVAP]-1659882101304
GPR[SPVATF]-1659882101304
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882103616
GPR[EPVS]-1659882103616
========
if(strictExternCheck&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882103618
GPR[SPVAP]-1659882103618
GPR[EPVAP]-1659882106272
GPR[SPVATF]-1659882106272
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882108586
GPR[EPVS]-1659882108586
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
varsToDeclareInExterns.add(parent);
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882108587
GPR[SPVAP]-1659882108587
GPR[EPVAP]-1659882109820
GPR[EPVS]-1659882109820
========
if(n.getType()!=Token.NAME){
return ;
}
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882109822
GPR[SPVAP]-1659882109822
GPR[EPVAP]-1659882112417
GPR[SPVATF]-1659882112417
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882114720
GPR[EPVS]-1659882114720
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&areNodesEqualForInlining(parent,n.getLastChild())){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882114721
GPR[SPVAP]-1659882114721
GPR[EPVAP]-1659882115940
GPR[EPVS]-1659882115940
========
if(n.getType()==Token.STRING&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882115941
GPR[SPVAP]-1659882115941
GPR[EPVAP]-1659882118552
GPR[SPVATF]-1659882118552
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882121925
GPR[EPVS]-1659882121925
========
if(parent.getParent()!=null&&grandparent.getType()==Token.SCRIPT&&parent.getType()==Token.EXPR_RESULT&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882121927
GPR[SPVAP]-1659882121927
GPR[EPVAP]-1659882123166
GPR[EPVS]-1659882123166
========
Preconditions.checkNotNull(parent);
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882123168
GPR[SPVAP]-1659882123168
GPR[EPVAP]-1659882125832
GPR[SPVATF]-1659882125832
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882128154
GPR[EPVS]-1659882128154
========
Preconditions.checkArgument(parent.getType()==Token.BLOCK);
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882128156
GPR[SPVAP]-1659882128156
GPR[EPVAP]-1659882130748
GPR[SPVATF]-1659882130748
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882133111
GPR[EPVS]-1659882133111
========
NodeTraversal.traverse(compiler,parent,new CreateScope(this,false));
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882133112
GPR[SPVAP]-1659882133112
GPR[EPVAP]-1659882134332
GPR[EPVS]-1659882134333
========
Preconditions.checkNotNull(parent);
Preconditions.checkArgument(parent.getType()==Token.BLOCK);
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882134333
GPR[SPVAP]-1659882134333
GPR[EPVAP]-1659882136940
GPR[SPVATF]-1659882136940
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882139318
GPR[EPVS]-1659882139318
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
setType(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882139319
GPR[SPVAP]-1659882139319
GPR[EPVAP]-1659882140554
GPR[EPVS]-1659882140554
========
if(parent.getType()==Token.ARRAYLIT&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882140555
GPR[SPVAP]-1659882140555
GPR[EPVAP]-1659882143161
GPR[SPVATF]-1659882143161
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882145458
GPR[EPVS]-1659882145458
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
if(NodeUtil.isImmutableValue(synthesizedExternsRoot)){
replacementNode=new Node(Token.FALSE);
}else if(n.getType()==Token.NAME&&"Object".equals(n.getString())){
replacementNode=new Node(Token.TRUE);
}
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882145460
GPR[SPVAP]-1659882145460
GPR[EPVAP]-1659882146698
GPR[EPVS]-1659882146698
========
updateAssignAllowedStack(parent,false);
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882146700
GPR[SPVAP]-1659882146700
GPR[EPVAP]-1659882147950
GPR[EPVS]-1659882147950
========
if(varName!=null&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882147951
GPR[SPVAP]-1659882147951
GPR[EPVAP]-1659882150547
GPR[SPVATF]-1659882150547
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882152885
GPR[EPVS]-1659882152885
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&qualifiedNameBeginsWithStripType(parent.getFirstChild())){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882152887
GPR[SPVAP]-1659882152887
GPR[EPVAP]-1659882154139
GPR[EPVS]-1659882154139
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
varsToDeclareInExterns.reportCodeChange();
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882154140
GPR[SPVAP]-1659882154140
GPR[EPVAP]-1659882155345
GPR[EPVS]-1659882155345
========
if(parent.getType()!=Token.STRING&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882155346
GPR[SPVAP]-1659882155346
GPR[EPVAP]-1659882157905
GPR[SPVATF]-1659882157905
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882160250
GPR[EPVS]-1659882160250
========
Preconditions.checkArgument(parent.getType()==Token.CALL,"Expected: CALL, Got: "+Token.name(node.getType()));
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882160252
GPR[SPVAP]-1659882160252
GPR[EPVAP]-1659882161499
GPR[EPVS]-1659882161500
========
if(shouldEmitDeprecationWarning(t,n,parent)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882161501
GPR[SPVAP]-1659882161501
GPR[EPVAP]-1659882162724
GPR[EPVS]-1659882162724
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&shouldEmitDeprecationWarning(t,n,parent)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882162726
GPR[SPVAP]-1659882162726
GPR[EPVAP]-1659882163956
GPR[EPVS]-1659882163956
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
parent.copyInformationFromForTree(synthesizedExternsRoot);
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882163957
GPR[SPVAP]-1659882163957
GPR[EPVAP]-1659882166560
GPR[SPVATF]-1659882166560
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882168873
GPR[EPVS]-1659882168873
========
if(parent.getType()==Token.NOT&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882168874
GPR[SPVAP]-1659882168874
GPR[EPVAP]-1659882171476
GPR[SPVATF]-1659882171476
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882173862
GPR[EPVS]-1659882173862
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
n.addChildToBack(synthesizedExternsRoot);
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882173863
GPR[SPVAP]-1659882173863
GPR[EPVAP]-1659882176463
GPR[SPVATF]-1659882176463
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882178814
GPR[EPVS]-1659882178814
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
n.addChildToBack(synthesizedExternsRoot);
reportCodeChange();

createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882178815
GPR[SPVAP]-1659882178815
GPR[EPVAP]-1659882180067
GPR[EPVS]-1659882180067
========
if(parent.getType()==Token.NOT&&varsToDeclareInExterns.contains(varName)){
n.addChildToBack(synthesizedExternsRoot);
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882180069
GPR[SPVAP]-1659882180069
GPR[EPVAP]-1659882182680
GPR[SPVATF]-1659882182680
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882185002
GPR[EPVS]-1659882185002
========
if(parent.getType()==Token.NOT&&varsToDeclareInExterns.contains(varName)){
reportCodeChange();
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882185003
GPR[SPVAP]-1659882185003
GPR[EPVAP]-1659882186232
GPR[EPVS]-1659882186232
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
n.addChildToBack(synthesizedExternsRoot);
reportCodeChange();
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882186233
GPR[SPVAP]-1659882186233
GPR[EPVAP]-1659882187480
GPR[EPVS]-1659882187480
========
if(parent.getType()==Token.NOT&&varsToDeclareInExterns.contains(varName)){
n.addChildToBack(synthesizedExternsRoot);
reportCodeChange();
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882187481
GPR[SPVAP]-1659882187481
GPR[EPVAP]-1659882188732
GPR[EPVS]-1659882188732
========
if(parent.getType()==Token.GETPROP&&!t.inGlobalScope()&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882188733
GPR[SPVAP]-1659882188733
GPR[EPVAP]-1659882191381
GPR[SPVATF]-1659882191381
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882193727
GPR[EPVS]-1659882193727
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
unstubParent.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882193729
GPR[SPVAP]-1659882193729
GPR[EPVAP]-1659882194969
GPR[EPVS]-1659882194969
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
if(synthesizedExternsRoot.getParent().getType()==Token.GET||synthesizedExternsRoot.getParent().getType()==Token.SET){
continue;
}
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882194970
GPR[SPVAP]-1659882194970
GPR[EPVAP]-1659882196203
GPR[EPVS]-1659882196203
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
compiler.reportCodeChange();
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882196204
GPR[SPVAP]-1659882196204
GPR[EPVAP]-1659882198776
GPR[SPVATF]-1659882198776
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 0
GPR[EPVATF]-1659882201084
GPR[SPVATR]-1659882201085
TESTING : closure_79
MM messageFailing tests: 0
GPR[EPVATR]-1659882243591
GPR[EPVS]-1659882243591
GPR[PF]-1659882243591
sourceFile  script/workingdir/SimFix/closure/closure_79_buggy/src/com/google/javascript/jscomp/VarCheck.java
location   script/workingdir/SimFix/closure/closure_79_buggy
MM Out patch at /experiment_home///results/SimFix/Closure/79/seed_263/patch/closure/79/0/patch_980658_1_ts_1659882243591.diff
MM Command diff diff -w -b  --label=/src/com/google/javascript/jscomp/VarCheck.java --label=/src/com/google/javascript/jscomp/VarCheck.java /tmp/tmpDirMM4166281046211439822/VarCheck.java  /experiment_home///results/SimFix/Closure/79/seed_263/patch/closure/79/0/1_VarCheck.java  --unified=3  > /experiment_home///results/SimFix/Closure/79/seed_263/patch/closure/79/0/patch_980658_1_ts_1659882243591.diff
MMOut command diff: []
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
if(synthesizedExternsRoot.getParent().getType()==Token.GET||synthesizedExternsRoot.getParent().getType()==Token.SET){
continue;
}
compiler.reportCodeChange();

createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882243602
GPR[SPVAP]-1659882243602
GPR[EPVAP]-1659882244863
GPR[EPVS]-1659882244863
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&referencedNames.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882244866
GPR[SPVAP]-1659882244866
GPR[EPVAP]-1659882246096
GPR[EPVS]-1659882246096
========
normalizeBlocks(parent);
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882246098
GPR[SPVAP]-1659882246098
GPR[EPVAP]-1659882247353
GPR[EPVS]-1659882247353
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&reservedNames.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882247355
GPR[SPVAP]-1659882247355
GPR[EPVAP]-1659882248635
GPR[EPVS]-1659882248635
========
if(parent.getType()!=Token.NUMBER&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882248637
GPR[SPVAP]-1659882248637
GPR[EPVAP]-1659882251236
GPR[SPVATF]-1659882251237
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882253643
GPR[EPVS]-1659882253643
========
if(parent.getType()==Token.BLOCK&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882253645
GPR[SPVAP]-1659882253645
GPR[EPVAP]-1659882256270
GPR[SPVATF]-1659882256270
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882258589
GPR[EPVS]-1659882258589
========
if(getTypeDeprecationInfo(n.getJSType())!=null&&shouldEmitDeprecationWarning(t,n,parent)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882258590
GPR[SPVAP]-1659882258590
GPR[EPVAP]-1659882259851
GPR[EPVS]-1659882259851
========
if(getTypeDeprecationInfo(n.getJSType())!=null&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882259852
GPR[SPVAP]-1659882259852
GPR[EPVAP]-1659882261095
GPR[EPVS]-1659882261095
========
if(n.getType()==Token.NAME&&isNameAssignedTo(n.getString(),parent)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882261097
GPR[SPVAP]-1659882261097
GPR[EPVAP]-1659882262310
GPR[EPVS]-1659882262310
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&isNameAssignedTo(n.getString(),parent)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882262311
GPR[SPVAP]-1659882262311
GPR[EPVAP]-1659882263550
GPR[EPVS]-1659882263550
========
if(parent==null||areMatchingExits(n,parent)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882263553
GPR[SPVAP]-1659882263553
GPR[EPVAP]-1659882264785
GPR[EPVS]-1659882264785
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&areMatchingExits(n,parent)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882264786
GPR[SPVAP]-1659882264786
GPR[EPVAP]-1659882266006
GPR[EPVS]-1659882266006
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
n.detachFromParent();
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882266007
GPR[SPVAP]-1659882266007
GPR[EPVAP]-1659882268618
GPR[SPVATF]-1659882268618
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882270929
GPR[EPVS]-1659882270929
========
if(parent==null&&varsToDeclareInExterns.contains(varName)){
n.detachFromParent();
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882270931
GPR[SPVAP]-1659882270931
GPR[EPVAP]-1659882273571
GPR[SPVATF]-1659882273571
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882275904
GPR[EPVS]-1659882275904
========
if(!sanityCheck&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882275906
GPR[SPVAP]-1659882275906
GPR[EPVAP]-1659882278544
GPR[SPVATF]-1659882278545
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882280826
GPR[EPVS]-1659882280826
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&isGlobalFunctionDeclaration(t,n)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882280828
GPR[SPVAP]-1659882280828
GPR[EPVAP]-1659882282064
GPR[EPVS]-1659882282064
========
if(!NodeUtil.mayHaveSideEffects(parent,compiler)&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882282065
GPR[SPVAP]-1659882282065
GPR[EPVAP]-1659882284657
GPR[SPVATF]-1659882284657
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882287725
GPR[EPVS]-1659882287725
========
if(!NodeUtil.mayHaveSideEffects(parent,compiler)&&varsToDeclareInExterns.contains(varName)){
compiler.reportCodeChange();
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882287726
GPR[SPVAP]-1659882287726
GPR[EPVAP]-1659882290469
GPR[SPVATF]-1659882290469
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882292795
GPR[EPVS]-1659882292795
========
tryRemoveUnconditionalBranching(n);
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882292796
GPR[SPVAP]-1659882292796
GPR[EPVAP]-1659882294032
GPR[EPVS]-1659882294032
========
if(!t.inGlobalScope()&&parent.getJSDocInfo()!=null&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882294040
GPR[SPVAP]-1659882294040
GPR[EPVAP]-1659882296636
GPR[SPVATF]-1659882296636
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882298970
GPR[EPVS]-1659882298970
========
if(!varsToDeclareInExterns.contains(varName)&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882298971
GPR[SPVAP]-1659882298971
GPR[EPVAP]-1659882301585
GPR[SPVATF]-1659882301585
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882303908
GPR[EPVS]-1659882303908
========
if(n!=null&&n.getType()==Token.FUNCTION){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882303909
GPR[SPVAP]-1659882303909
GPR[EPVAP]-1659882306509
GPR[SPVATF]-1659882306509
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882308831
GPR[EPVS]-1659882308831
========
if(n!=null&&rValue.getType()==Token.FUNCTION&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882308832
GPR[SPVAP]-1659882308832
GPR[EPVAP]-1659882310070
GPR[EPVS]-1659882310070
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
getNameInfoForName(parent.getString(),VAR).getDeclarations().add(new GlobalFunction(parent,parent,n,t.getModule()));
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882310072
GPR[SPVAP]-1659882310072
GPR[EPVAP]-1659882311332
GPR[EPVS]-1659882311332
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&mayHaveSideEffects(parent)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882311333
GPR[SPVAP]-1659882311333
GPR[EPVAP]-1659882312551
GPR[EPVS]-1659882312551
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&isInThrowExpression(parent)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882312552
GPR[SPVAP]-1659882312552
GPR[EPVAP]-1659882313796
GPR[EPVS]-1659882313796
========
if(parent.getFirstChild().getType()==Token.THIS&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882313798
GPR[SPVAP]-1659882313798
GPR[EPVAP]-1659882316393
GPR[SPVATF]-1659882316393
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882318751
GPR[EPVS]-1659882318751
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(parent.getLastChild().getString())){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882318752
GPR[SPVAP]-1659882318752
GPR[EPVAP]-1659882319992
GPR[EPVS]-1659882319992
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882319993
GPR[SPVAP]-1659882319993
GPR[EPVAP]-1659882321206
GPR[EPVS]-1659882321206
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(a.oldName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882321208
GPR[SPVAP]-1659882321208
GPR[EPVAP]-1659882322449
GPR[EPVS]-1659882322449
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&checkForStateChangeHelper(n.getLastChild(),strictExternCheck,compiler)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882322450
GPR[SPVAP]-1659882322450
GPR[EPVAP]-1659882323659
GPR[EPVS]-1659882323659
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.isExported(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882323660
GPR[SPVAP]-1659882323660
GPR[EPVAP]-1659882324888
GPR[EPVS]-1659882324888
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&externNames.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882324889
GPR[SPVAP]-1659882324889
GPR[EPVAP]-1659882326122
GPR[EPVS]-1659882326122
========
NodeUtil.redeclareVarsInsideBranch(n);
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882326124
GPR[SPVAP]-1659882326124
GPR[EPVAP]-1659882328714
GPR[SPVATF]-1659882328714
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882331060
GPR[EPVS]-1659882331060
========
NodeUtil.removeChild(n.getParent(),n);
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882331061
GPR[SPVAP]-1659882331061
GPR[EPVAP]-1659882333683
GPR[SPVATF]-1659882333683
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882336004
GPR[EPVS]-1659882336004
========
reportCodeChange();
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882336005
GPR[SPVAP]-1659882336005
GPR[EPVAP]-1659882337259
GPR[EPVS]-1659882337259
========
NodeUtil.redeclareVarsInsideBranch(n);
NodeUtil.removeChild(n.getParent(),n);
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882337260
GPR[SPVAP]-1659882337260
GPR[EPVAP]-1659882339866
GPR[SPVATF]-1659882339866
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882342185
GPR[EPVS]-1659882342185
========
if(!NodeUtil.isFunction(parent.getParent())&&canFuseIntoOneStatement(parent)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882342186
GPR[SPVAP]-1659882342186
GPR[EPVAP]-1659882343445
GPR[EPVS]-1659882343445
========
if(!NodeUtil.isFunction(parent.getParent())&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882343446
GPR[SPVAP]-1659882343446
GPR[EPVAP]-1659882346034
GPR[SPVATF]-1659882346034
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882348341
GPR[EPVS]-1659882348341
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&canFuseIntoOneStatement(parent)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882348342
GPR[SPVAP]-1659882348342
GPR[EPVAP]-1659882349587
GPR[EPVS]-1659882349587
========
if(varName==null||!"goog.now".equals(googNowQName)&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882349589
GPR[SPVAP]-1659882349589
GPR[EPVAP]-1659882350835
GPR[EPVS]-1659882350835
========
n.removeChild(parent);
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882350836
GPR[SPVAP]-1659882350836
GPR[EPVAP]-1659882353424
GPR[SPVATF]-1659882353424
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882355733
GPR[EPVS]-1659882355733
========
compiler.reportCodeChange();
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882355735
GPR[SPVAP]-1659882355735
GPR[EPVAP]-1659882358372
GPR[SPVATF]-1659882358372
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 0
GPR[EPVATF]-1659882360687
GPR[SPVATR]-1659882360688
TESTING : closure_79
MM message  - com.google.javascript.jscomp.VarCheckTest::testViolatedModuleDependencySkipNonStrict
MM message  - com.google.javascript.jscomp.VarCheckTest::testLegalVarReferenceBetweenModules
MM message  - com.google.javascript.jscomp.VarCheckTest::testReferencedVarsExternallyDefined
MM message  - com.google.javascript.jscomp.VarCheckTest::testReferencedVarDefined2
MM message  - com.google.javascript.jscomp.VarCheckTest::testReferencedVarDefined1
MM message  - com.google.javascript.jscomp.VarCheckTest::testContinue
MM message  - com.google.javascript.jscomp.VarCheckTest::testMissingModuleDependencySkipNonStrict
MM message  - com.google.javascript.jscomp.VarCheckTest::testMissingModuleDependencyDefault
MM message  - com.google.javascript.jscomp.VarCheckTest::testStarStrictModuleDependencyCheck
MM message  - com.google.javascript.jscomp.VarCheckTest::testValidFunctionExpr
MM message  - com.google.javascript.jscomp.VarCheckTest::testBreak
MM message  - com.google.javascript.jscomp.VarCheckTest::testForwardVarReferenceInLocalScope2
MM message  - com.google.javascript.jscomp.VarCheckTest::testForwardVarReferenceInLocalScope1
MM message  - com.google.javascript.jscomp.VarCheckTest::testRecursiveFunction2
MM message  - com.google.javascript.jscomp.VarCheckTest::testMultiplyDeclaredVars2
MM message  - com.google.javascript.jscomp.VarCheckTest::testRecursiveFunction
MM message  - com.google.javascript.jscomp.SpecializeModuleTest::testDontSpecializeLocalNonAnonymousFunctions
MM message  - com.google.javascript.jscomp.SpecializeModuleTest::testDontSpecializeAliasedFunctions_inline
MM message  - com.google.javascript.jscomp.SideEffectsAnalysisTest::testMovedSideEffectsMustHaveSameControlFlow
MM message  - com.google.javascript.jscomp.SideEffectsAnalysisTest::testVisibilityMoveCalls
MM message  - com.google.javascript.jscomp.SideEffectsAnalysisTest::testVisibilityMergesParametersWithHeap
MM message  - com.google.javascript.jscomp.SideEffectsAnalysisTest::testVisibilitySafeMoves
MM message  - com.google.javascript.jscomp.SideEffectsAnalysisTest::testVisibilityUnsafeMoves
MM messageFailing tests: 23
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1659882402382
GPR[EPVS]-1659882402382
========
n.removeChild(parent);
compiler.reportCodeChange();
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882402383
GPR[SPVAP]-1659882402383
GPR[EPVAP]-1659882405007
GPR[SPVATF]-1659882405007
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882407326
GPR[EPVS]-1659882407326
========
if(n==null||areMatchingExits(parent,n)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882407327
GPR[SPVAP]-1659882407327
GPR[EPVAP]-1659882408567
GPR[EPVS]-1659882408567
========
if(n==null&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882408568
GPR[SPVAP]-1659882408568
GPR[EPVAP]-1659882411197
GPR[SPVATF]-1659882411197
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882413546
GPR[EPVS]-1659882413546
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&areMatchingExits(parent,n)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882413547
GPR[SPVAP]-1659882413547
GPR[EPVAP]-1659882414781
GPR[EPVS]-1659882414781
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&isVariableStillLiveWithinExpression(n,parent,var.name)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882414782
GPR[SPVAP]-1659882414782
GPR[EPVAP]-1659882415992
GPR[EPVS]-1659882415992
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
irNode.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882415993
GPR[SPVAP]-1659882415993
GPR[EPVAP]-1659882417209
GPR[EPVS]-1659882417209
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
newBlock.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882417210
GPR[SPVAP]-1659882417210
GPR[EPVAP]-1659882418448
GPR[EPVS]-1659882418448
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
irNode=newNode(Token.BLOCK,parent);
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882418450
GPR[SPVAP]-1659882418450
GPR[EPVAP]-1659882419687
GPR[EPVS]-1659882419687
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
if(NodeUtil.hasFinally(parent)){
Node parent.getLastChild()=parent.getLastChild();
}
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882419689
GPR[SPVAP]-1659882419689
GPR[EPVAP]-1659882420774
GPR[EPVS]-1659882420774
========
if("undefined".equals(varName)){
return ;
}
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882420775
GPR[SPVAP]-1659882420775
GPR[EPVAP]-1659882423370
GPR[SPVATF]-1659882423370
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882425678
GPR[EPVS]-1659882425678
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
parent.copyInformationFromForTree(n.getLastChild());
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882425679
GPR[SPVAP]-1659882425679
GPR[EPVAP]-1659882428262
GPR[SPVATF]-1659882428262
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882430574
GPR[EPVS]-1659882430574
========
Preconditions.checkArgument(n.getLastChild().getType()==Token.RETURN);
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882430575
GPR[SPVAP]-1659882430575
GPR[EPVAP]-1659882433182
GPR[SPVATF]-1659882433182
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882435512
GPR[EPVS]-1659882435512
========
Preconditions.checkArgument(n.getLastChild().getType()==Token.RETURN);
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
parent.copyInformationFromForTree(n.getLastChild());
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882435513
GPR[SPVAP]-1659882435513
GPR[EPVAP]-1659882438111
GPR[SPVATF]-1659882438111
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882440417
GPR[EPVS]-1659882440417
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&typesToSkip.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882440419
GPR[SPVAP]-1659882440419
GPR[EPVAP]-1659882441673
GPR[EPVS]-1659882441673
========
if(!ControlFlowGraph.isEnteringNewCfgNode(parent)&&mayThrowException(parent)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882441675
GPR[SPVAP]-1659882441675
GPR[EPVAP]-1659882442903
GPR[EPVS]-1659882442903
========
if(!ControlFlowGraph.isEnteringNewCfgNode(parent)&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882442904
GPR[SPVAP]-1659882442904
GPR[EPVAP]-1659882445527
GPR[SPVATF]-1659882445527
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882447854
GPR[EPVS]-1659882447854
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&mayThrowException(parent)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882447855
GPR[SPVAP]-1659882447855
GPR[EPVAP]-1659882449164
GPR[EPVS]-1659882449164
========
addExpr(parent,1);
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882449169
GPR[SPVAP]-1659882449169
GPR[EPVAP]-1659882450592
GPR[EPVS]-1659882450592
========
if((parent.getType()==Token.CALL||parentType==Token.NEW)&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882450593
GPR[SPVAP]-1659882450593
GPR[EPVAP]-1659882451854
GPR[EPVS]-1659882451855
========
n.replaceChild(synthesizedExternsRoot,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.call",parent.getQualifiedName()),callee,"goog.base"));
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882451857
GPR[SPVAP]-1659882451857
GPR[EPVAP]-1659882453131
GPR[EPVS]-1659882453131
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&isLowerPrecedenceInExpression(n.getFirstChild(),AND_PRECEDENCE)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882453132
GPR[SPVAP]-1659882453132
GPR[EPVAP]-1659882454381
GPR[EPVS]-1659882454381
========
parent.removeChild(synthesizedExternsRoot);
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882454382
GPR[SPVAP]-1659882454382
GPR[EPVAP]-1659882457006
GPR[SPVATF]-1659882457006
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882459314
GPR[EPVS]-1659882459314
========
if(synthesizedExternsRoot==null&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882459315
GPR[SPVAP]-1659882459315
GPR[EPVAP]-1659882461921
GPR[SPVATF]-1659882461921
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882464273
GPR[EPVS]-1659882464273
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
n.addChildrenToBack(n.detachFromParent());
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882464274
GPR[SPVAP]-1659882464274
GPR[EPVAP]-1659882466861
GPR[SPVATF]-1659882466861
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882469164
GPR[EPVS]-1659882469164
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
n.addChildrenToBack(n.detachFromParent());
reportCodeChange();

createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882469165
GPR[SPVAP]-1659882469165
GPR[EPVAP]-1659882470419
GPR[EPVS]-1659882470419
========
if(synthesizedExternsRoot==null&&varsToDeclareInExterns.contains(varName)){
n.addChildrenToBack(n.detachFromParent());
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882470420
GPR[SPVAP]-1659882470420
GPR[EPVAP]-1659882473011
GPR[SPVATF]-1659882473011
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882475337
GPR[EPVS]-1659882475337
========
if(synthesizedExternsRoot==null&&varsToDeclareInExterns.contains(varName)){
reportCodeChange();
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882475338
GPR[SPVAP]-1659882475338
GPR[EPVAP]-1659882476590
GPR[EPVS]-1659882476590
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
n.addChildrenToBack(n.detachFromParent());
reportCodeChange();
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882476591
GPR[SPVAP]-1659882476591
GPR[EPVAP]-1659882477825
GPR[EPVS]-1659882477825
========
if(synthesizedExternsRoot==null&&varsToDeclareInExterns.contains(varName)){
n.addChildrenToBack(n.detachFromParent());
reportCodeChange();
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882477826
GPR[SPVAP]-1659882477826
GPR[EPVAP]-1659882479052
GPR[EPVS]-1659882479052
========
case Token.ASSIGN :
{
Node parent=n.getFirstChild();
Node parent.getNext()=lhs.getNext();
return Lists.newArrayList(lhs,rhs);
}

if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882479054
GPR[SPVAP]-1659882479054
GPR[EPVAP]-1659882480147
GPR[EPVS]-1659882480147
========
if(!mayHaveSideEffects(parent.getFirstChild())&&isUselessCase(parent,n)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882480149
GPR[SPVAP]-1659882480149
GPR[EPVAP]-1659882481362
GPR[EPVS]-1659882481362
========
if(!mayHaveSideEffects(parent.getFirstChild())&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882481363
GPR[SPVAP]-1659882481363
GPR[EPVAP]-1659882482580
GPR[EPVS]-1659882482580
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&isUselessCase(parent,n)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882482581
GPR[SPVAP]-1659882482581
GPR[EPVAP]-1659882483813
GPR[EPVS]-1659882483813
========
Preconditions.checkArgument(NodeUtil.isName(n)||NodeUtil.isGetProp(n));
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882483814
GPR[SPVAP]-1659882483814
GPR[EPVAP]-1659882486416
GPR[SPVATF]-1659882486416
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882488740
GPR[EPVS]-1659882488740
========
if(NodeUtil.isName(n)){
return true;
}
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882488741
GPR[SPVAP]-1659882488741
GPR[EPVAP]-1659882489977
GPR[EPVS]-1659882489977
========
if(n!=null&&NodeUtil.isName(rhs)&&rhs.getString().equals(var.name)&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882489978
GPR[SPVAP]-1659882489978
GPR[EPVAP]-1659882491190
GPR[EPVS]-1659882491191
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
parent.getParent().addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882491191
GPR[SPVAP]-1659882491191
GPR[EPVAP]-1659882493788
GPR[SPVATF]-1659882493788
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882496114
GPR[EPVS]-1659882496114
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
compiler.reportCodeChange();
createSynthesizedExternVar(varName);
parent.getParent().addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882496115
GPR[SPVAP]-1659882496115
GPR[EPVAP]-1659882498741
GPR[SPVATF]-1659882498741
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882501047
GPR[EPVS]-1659882501047
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
compiler.reportCodeChange();
createSynthesizedExternVar(varName);
parent.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882501048
GPR[SPVAP]-1659882501048
GPR[EPVAP]-1659882503681
GPR[SPVATF]-1659882503681
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 0
GPR[EPVATF]-1659882506086
GPR[SPVATR]-1659882506087
TESTING : closure_79
MM message  - com.google.javascript.jscomp.CommandLineRunnerTest::testSyntheticExterns
MM messageFailing tests: 1
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1659882547504
GPR[EPVS]-1659882547504
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
replacement=new Node(Token.OR,synthesizedExternsRoot,synthesizedExternsRoot);
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882547507
GPR[SPVAP]-1659882547507
GPR[EPVAP]-1659882548759
GPR[EPVS]-1659882548759
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
Preconditions.checkState(n.hasChildren(),"AST should be normalized");
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882548760
GPR[SPVAP]-1659882548760
GPR[EPVAP]-1659882551386
GPR[SPVATF]-1659882551386
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882553718
GPR[EPVS]-1659882553718
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&isConditionalStatement(n)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882553720
GPR[SPVAP]-1659882553720
GPR[EPVAP]-1659882554966
GPR[EPVS]-1659882554966
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
n.removeChildAfter(parent);
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882554968
GPR[SPVAP]-1659882554968
GPR[EPVAP]-1659882557560
GPR[SPVATF]-1659882557560
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882559882
GPR[EPVS]-1659882559882
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&isCallWhoseReturnValueShouldBeStripped(parent.getFirstChild())){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882559884
GPR[SPVAP]-1659882559884
GPR[EPVAP]-1659882561130
GPR[EPVS]-1659882561130
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
varsToDeclareInExterns.add(t.getScope().getVar(varName));
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882561131
GPR[SPVAP]-1659882561131
GPR[EPVAP]-1659882562349
GPR[EPVS]-1659882562349
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
varsToDeclareInExterns.add(t.getScope().getVar(varName));
compiler.reportCodeChange();

createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882562351
GPR[SPVAP]-1659882562351
GPR[EPVAP]-1659882563577
GPR[EPVS]-1659882563577
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
setString(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882563579
GPR[SPVAP]-1659882563579
GPR[EPVAP]-1659882564805
GPR[EPVS]-1659882564805
========
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
Preconditions.checkState(varName.equals(p.oldName));
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882564806
GPR[SPVAP]-1659882564806
GPR[EPVAP]-1659882566044
GPR[EPVS]-1659882566044
========
Preconditions.checkState(!NodeUtil.isObjectLitKey(n,n.getParent()));
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882566046
GPR[SPVAP]-1659882566046
GPR[EPVAP]-1659882568648
GPR[SPVATF]-1659882568648
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882571013
GPR[EPVS]-1659882571013
========
if(isExpressionTreeUnsafe(n,state.sideEffects)){
state.sideEffects=true;
state.extractBeforeStatement=extractExpression(n,state.extractBeforeStatement);
}
if((parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent))&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882571015
GPR[SPVAP]-1659882571015
GPR[EPVAP]-1659882572257
GPR[EPVS]-1659882572257
========
Preconditions.checkState(!NodeUtil.isObjectLitKey(n,n.getParent()));
if(n==null&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882572258
GPR[SPVAP]-1659882572258
GPR[EPVAP]-1659882574868
GPR[SPVATF]-1659882574868
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882577195
GPR[EPVS]-1659882577195
========
if(parent!=null&&NodeUtil.isAssign(n)&&varsToDeclareInExterns.contains(varName)){
createSynthesizedExternVar(varName);
n.addSuppression("duplicate");
}

========
MM Copying to MM
GPR[SPVS]-1659882577198
GPR[SPVAP]-1659882577198
GPR[EPVAP]-1659882579784
GPR[SPVATF]-1659882579784
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882582156
GPR[EPVS]-1659882582156
GPR[ESUN]-1659882582156
GPR[SSUN]-1659882582156
com.google.javascript.jscomp.VarCheck,139
GPR[ESUN]-1659882582643
GPR[SSUN]-1659882582643
com.google.javascript.jscomp.VarCheck,34
Find no block!
GPR[SSUN]-1659882582804
com.google.javascript.jscomp.VarCheck,247
UNKNOWN ASTNode type : catch (UnsupportedOperationException ex) {
  error(NEGATING_A_NON_NUMBER_ERROR,left);
  return n;
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException ex) {
  error(NEGATING_A_NON_NUMBER_ERROR,left);
  return n;
}

UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  compiler.report(t.makeError(n,INVALID_STYLE_ERROR,styleStr));
  return;
}

UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  compiler.report(t.makeError(n,INVALID_STYLE_ERROR,styleStr));
  return;
}

========
default :
typeable=!NodeUtil.isExpressionNode(parent);
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();



========
MM Copying to MM
GPR[SPVS]-1659882585147
GPR[SPVAP]-1659882585147
GPR[EPVAP]-1659882588151
GPR[EPVS]-1659882588151
========
case Token.TRUE :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882588152
GPR[SPVAP]-1659882588152
GPR[EPVAP]-1659882593879
GPR[SPVATF]-1659882593879
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882596274
GPR[EPVS]-1659882596274
========
case Token.REF_SPECIAL :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882596275
GPR[SPVAP]-1659882596275
GPR[EPVAP]-1659882598884
GPR[SPVATF]-1659882598885
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882601247
GPR[EPVS]-1659882601247
========
case Token.NULL :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882601248
GPR[SPVAP]-1659882601248
GPR[EPVAP]-1659882605269
GPR[SPVATF]-1659882605269
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882607641
GPR[EPVS]-1659882607641
========
default :
ensureTyped(t,n);
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();



========
MM Copying to MM
GPR[SPVS]-1659882607642
GPR[SPVAP]-1659882607642
GPR[EPVAP]-1659882608924
GPR[EPVS]-1659882608924
========
default :
t.report(t,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882608925
GPR[SPVAP]-1659882608925
GPR[EPVAP]-1659882610165
GPR[EPVS]-1659882610165
========
default :
t.report(n,n,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882610166
GPR[SPVAP]-1659882610166
GPR[EPVAP]-1659882611417
GPR[EPVS]-1659882611417
========
default :
t.report(t,n,BAD_DELETE);
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882611418
GPR[SPVAP]-1659882611418
GPR[EPVAP]-1659882612638
GPR[EPVS]-1659882612638
========
default :
ensureTyped(t,n,BOOLEAN_TYPE);
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();



========
MM Copying to MM
GPR[SPVS]-1659882612639
GPR[SPVAP]-1659882612639
GPR[EPVAP]-1659882613901
GPR[EPVS]-1659882613901
========
case Token.LP :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882613903
GPR[SPVAP]-1659882613903
GPR[EPVAP]-1659882615624
GPR[EPVS]-1659882615624
========
default :
checkNameVisibility(t,n,parent);
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();



========
MM Copying to MM
GPR[SPVS]-1659882615625
GPR[SPVAP]-1659882615625
GPR[EPVAP]-1659882616853
GPR[EPVS]-1659882616853
========
if(parent.getFirstChild().getNext().getType()!=Token.STRING){
return ;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882616880
GPR[SPVAP]-1659882616880
GPR[EPVAP]-1659882618125
GPR[EPVS]-1659882618125
========
default :
checkPropertyVisibility(t,n,parent);
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();



========
MM Copying to MM
GPR[SPVS]-1659882618126
GPR[SPVAP]-1659882618126
GPR[EPVAP]-1659882619377
GPR[EPVS]-1659882619377
========
default :
checkConstantProperty(t,n);
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();



========
MM Copying to MM
GPR[SPVS]-1659882619378
GPR[SPVAP]-1659882619378
GPR[EPVAP]-1659882620620
GPR[EPVS]-1659882620620
========
default :
checkPropertyVisibility(t,n,parent);
checkConstantProperty(t,n);

t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();



========
MM Copying to MM
GPR[SPVS]-1659882620621
GPR[SPVAP]-1659882620621
GPR[EPVAP]-1659882621838
GPR[EPVS]-1659882621838
========
if(t.inGlobalScope()){
return ;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882621840
GPR[SPVAP]-1659882621840
GPR[EPVAP]-1659882623064
GPR[EPVS]-1659882623064
========
default :
typeable=!(n.getType()==Token.ASSIGN&&n.getFirstChild()==n);
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();



========
MM Copying to MM
GPR[SPVS]-1659882623065
GPR[SPVAP]-1659882623065
GPR[EPVAP]-1659882624297
GPR[EPVS]-1659882624297
========
if(scope.isGlobal()){
return ;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882624298
GPR[SPVAP]-1659882624298
GPR[EPVAP]-1659882625513
GPR[EPVS]-1659882625513
========
parent.replaceChild(n,parent);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882625514
GPR[SPVAP]-1659882625514
GPR[EPVAP]-1659882626783
GPR[EPVS]-1659882626783
========
if(!t.inGlobalScope()&&NodeUtil.isHoistedFunctionDeclaration(parent)){
parent.addChildToFront(value.detachFromParent());
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882626784
GPR[SPVAP]-1659882626784
GPR[EPVAP]-1659882628044
GPR[EPVS]-1659882628044
========
if(parent==null){
reportBadBaseClassUse(t,n,"Could not find goog.inherits for base class");
return ;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882628046
GPR[SPVAP]-1659882628046
GPR[EPVAP]-1659882629263
GPR[EPVS]-1659882629263
========
compiler.reportCodeChange();
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882629264
GPR[SPVAP]-1659882629264
GPR[EPVAP]-1659882630484
GPR[EPVS]-1659882630484
========
default :
typeable=false;
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();



========
MM Copying to MM
GPR[SPVS]-1659882630485
GPR[SPVAP]-1659882630485
GPR[EPVAP]-1659882631732
GPR[EPVS]-1659882631732
========
case OVERRIDE_DEFAULT_VALUE :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882631734
GPR[SPVAP]-1659882631734
GPR[EPVAP]-1659882632969
GPR[EPVS]-1659882632969
========
if(scope.isGlobal()){
inferTypes(t,n,scope);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882632970
GPR[SPVAP]-1659882632970
GPR[EPVAP]-1659882634241
GPR[EPVS]-1659882634241
========
if(scope.isLocal()){
inferTypes(t,n,scope);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882634242
GPR[SPVAP]-1659882634242
GPR[EPVAP]-1659882635473
GPR[EPVS]-1659882635473
========
NodeUtil.redeclareVarsInsideBranch(n);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882635474
GPR[SPVAP]-1659882635474
GPR[EPVAP]-1659882636708
GPR[EPVS]-1659882636708
========
NodeUtil.removeChild(n,n);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882636709
GPR[SPVAP]-1659882636709
GPR[EPVAP]-1659882637992
GPR[EPVS]-1659882637992
========
if(parent.hasOneChild()){
NodeUtil.redeclareVarsInsideBranch(catchBlock);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882637994
GPR[SPVAP]-1659882637994
GPR[EPVAP]-1659882639237
GPR[EPVS]-1659882639237
========
ensureTyped(t,n,BOOLEAN_TYPE);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882639238
GPR[SPVAP]-1659882639238
GPR[EPVAP]-1659882640454
GPR[EPVS]-1659882640454
========
ensureTyped(t,n);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882640455
GPR[SPVAP]-1659882640455
GPR[EPVAP]-1659882641664
GPR[EPVS]-1659882641664
========
case Token.CALL :
Node n.getFirstChild()=n.getFirstChild();
String n.getFirstChild().getQualifiedName()=calledFn.getQualifiedName();
if(name!=null){
Config findMatching(n.getFirstChild().getQualifiedName())=findMatching(name);
if(config!=null){
doSubstitutions(t,config,n);
return ;
}
}

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882641666
GPR[SPVAP]-1659882641666
GPR[EPVAP]-1659882642744
GPR[EPVS]-1659882642744
========
if(parent.getType()!=Token.GETPROP){
Node parent;
if(constructor.getLineno()<0||constructor.getCharno()<0){
line=n;
}else {
line=constructor;
}
report(t,line,NOT_A_CONSTRUCTOR);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882642745
GPR[SPVAP]-1659882642745
GPR[EPVAP]-1659882643968
GPR[EPVS]-1659882643968
========
default :
scope=traverseChildren(n,scope);
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();



========
MM Copying to MM
GPR[SPVS]-1659882643970
GPR[SPVAP]-1659882643970
GPR[EPVAP]-1659882645209
GPR[EPVS]-1659882645209
========
default :
annotateDispatchers(n,parent);
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();



========
MM Copying to MM
GPR[SPVS]-1659882645210
GPR[SPVAP]-1659882645210
GPR[EPVAP]-1659882646430
GPR[EPVS]-1659882646430
========
case Token.NEW :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882646432
GPR[SPVAP]-1659882646432
GPR[EPVAP]-1659882649119
GPR[SPVATF]-1659882649119
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882651429
GPR[EPVS]-1659882651430
========
if(!NodeUtil.isExprAssign(n)){
return ;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882651431
GPR[SPVAP]-1659882651431
GPR[EPVAP]-1659882652655
GPR[EPVS]-1659882652655
========
scanVars(parent.getNext(),n);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882652657
GPR[SPVAP]-1659882652657
GPR[EPVAP]-1659882653868
GPR[EPVS]-1659882653868
========
case Token.SCRIPT :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882653869
GPR[SPVAP]-1659882653869
GPR[EPVAP]-1659882656451
GPR[SPVATF]-1659882656451
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882658769
GPR[EPVS]-1659882658769
========
scope=null;
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882658771
GPR[SPVAP]-1659882658771
GPR[EPVAP]-1659882660016
GPR[EPVS]-1659882660016
========
case Token.BITNOT :
scope=traverseChildren(n,scope);
n.setJSType(getNativeType(NUMBER_TYPE));
break;

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882660017
GPR[SPVAP]-1659882660017
GPR[EPVAP]-1659882661276
GPR[EPVS]-1659882661276
========
case Token.IN :
scope=traverseChildren(n,scope);
n.setJSType(getNativeType(BOOLEAN_TYPE));
break;

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882661277
GPR[SPVAP]-1659882661277
GPR[EPVAP]-1659882662505
GPR[EPVS]-1659882662505
========
case Token.NEG :
scope=traverse(n.getFirstChild(),scope);
n.setJSType(getNativeType(NUMBER_TYPE));
break;

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882662506
GPR[SPVAP]-1659882662506
GPR[EPVAP]-1659882663729
GPR[EPVS]-1659882663729
========
if(parent==null){
return ;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882663730
GPR[SPVAP]-1659882663730
GPR[EPVAP]-1659882664946
GPR[EPVS]-1659882664946
========
default :
reportCodeChange();
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();



========
MM Copying to MM
GPR[SPVS]-1659882664947
GPR[SPVAP]-1659882664947
GPR[EPVAP]-1659882666165
GPR[EPVS]-1659882666165
========
reportCodeChange();
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882666167
GPR[SPVAP]-1659882666167
GPR[EPVAP]-1659882667377
GPR[EPVS]-1659882667377
========
scope=n;
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882667378
GPR[SPVAP]-1659882667378
GPR[EPVAP]-1659882668608
GPR[EPVS]-1659882668608
========
if(strictExternCheck){
traverseBranch(n,n);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882668609
GPR[SPVAP]-1659882668609
GPR[EPVAP]-1659882669826
GPR[EPVS]-1659882669826
========
n.replaceChild(n,parent);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882669827
GPR[SPVAP]-1659882669827
GPR[EPVAP]-1659882671060
GPR[EPVS]-1659882671060
========
n.removeChild(parent);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882671061
GPR[SPVAP]-1659882671061
GPR[EPVAP]-1659882672292
GPR[EPVS]-1659882672292
========
case Token.QMARK :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882672293
GPR[SPVAP]-1659882672293
GPR[EPVAP]-1659882674890
GPR[SPVATF]-1659882674890
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882677237
GPR[EPVS]-1659882677237
========
case Token.SET :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882677238
GPR[SPVAP]-1659882677238
GPR[EPVAP]-1659882679839
GPR[SPVATF]-1659882679839
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882682162
GPR[EPVS]-1659882682162
========
if(!scope.isLocal()){
return ;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882682163
GPR[SPVAP]-1659882682163
GPR[EPVAP]-1659882683416
GPR[EPVS]-1659882683416
========
if(scope.getParent().isGlobal()){
return ;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882683417
GPR[SPVAP]-1659882683417
GPR[EPVAP]-1659882684640
GPR[EPVS]-1659882684640
========
case Token.VAR :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882684641
GPR[SPVAP]-1659882684641
GPR[EPVAP]-1659882685868
GPR[EPVS]-1659882685868
========
case Token.WHILE :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882685869
GPR[SPVAP]-1659882685869
GPR[EPVAP]-1659882688477
GPR[SPVATF]-1659882688477
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882690803
GPR[EPVS]-1659882690803
========
parent.detachFromParent();
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882690805
GPR[SPVAP]-1659882690805
GPR[EPVAP]-1659882692031
GPR[EPVS]-1659882692031
========
parent.replaceChild(n,parent);
reportCodeChange();
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882692032
GPR[SPVAP]-1659882692032
GPR[EPVAP]-1659882693262
GPR[EPVS]-1659882693262
========
parent.detachFromParent();
parent.replaceChild(n,parent);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882693263
GPR[SPVAP]-1659882693263
GPR[EPVAP]-1659882694503
GPR[EPVS]-1659882694503
========
parent.detachFromParent();
reportCodeChange();
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882694504
GPR[SPVAP]-1659882694504
GPR[EPVAP]-1659882695731
GPR[EPVS]-1659882695731
========
parent.detachFromParent();
parent.replaceChild(n,parent);
reportCodeChange();
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882695732
GPR[SPVAP]-1659882695732
GPR[EPVAP]-1659882696976
GPR[EPVS]-1659882696976
========
if(!areSafeFlagsToFold(parent.getString())){
return n;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882696978
GPR[SPVAP]-1659882696978
GPR[EPVAP]-1659882698190
GPR[EPVS]-1659882698190
========
scope=new Node(Token.REGEXP,n,parent);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882698191
GPR[SPVAP]-1659882698191
GPR[EPVAP]-1659882699412
GPR[EPVS]-1659882699412
========
case Token.OR :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882699413
GPR[SPVAP]-1659882699413
GPR[EPVAP]-1659882701996
GPR[SPVATF]-1659882701996
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882704329
GPR[EPVS]-1659882704329
========
case Token.GET_REF :
scope=traverse(n.getFirstChild(),scope);
n.setJSType(getJSType(n.getFirstChild()));
break;

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882704330
GPR[SPVAP]-1659882704330
GPR[EPVAP]-1659882705576
GPR[EPVS]-1659882705576
========
n.replaceChild(n,NodeUtil.newExpr(parent));
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882705577
GPR[SPVAP]-1659882705577
GPR[EPVAP]-1659882706814
GPR[EPVS]-1659882706814
========
n.replaceChild(n,n.removeFirstChild());
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882706815
GPR[SPVAP]-1659882706815
GPR[EPVAP]-1659882708072
GPR[EPVS]-1659882708072
========
newParameter(n.getJSType()).setOptionalArg(n.isOptionalArg());
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882708074
GPR[SPVAP]-1659882708074
GPR[EPVAP]-1659882709303
GPR[EPVS]-1659882709303
========
n.replaceChild(n,n.getFirstChild().getNext());
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882709304
GPR[SPVAP]-1659882709304
GPR[EPVAP]-1659882710561
GPR[EPVS]-1659882710561
========
default :
new Node(Token.BLOCK).copyInformationFrom(parent);
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();



========
MM Copying to MM
GPR[SPVS]-1659882710563
GPR[SPVAP]-1659882710563
GPR[EPVAP]-1659882713197
GPR[SPVATF]-1659882713197
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882715521
GPR[EPVS]-1659882715521
========
default :
new Node(Token.BLOCK).addChildToFront(parent);
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();



========
MM Copying to MM
GPR[SPVS]-1659882715522
GPR[SPVAP]-1659882715522
GPR[EPVAP]-1659882718116
GPR[SPVATF]-1659882718116
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882720456
GPR[EPVS]-1659882720456
========
default :
reportCodeChange("LABEL normalization");
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();



========
MM Copying to MM
GPR[SPVS]-1659882720457
GPR[SPVAP]-1659882720457
GPR[EPVAP]-1659882721683
GPR[EPVS]-1659882721683
========
default :
new Node(Token.BLOCK).copyInformationFrom(parent);
new Node(Token.BLOCK).addChildToFront(parent);
reportCodeChange("LABEL normalization");

t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();



========
MM Copying to MM
GPR[SPVS]-1659882721684
GPR[SPVAP]-1659882721684
GPR[EPVAP]-1659882722904
GPR[EPVS]-1659882722905
========
case Token.FOR :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882722906
GPR[SPVAP]-1659882722906
GPR[EPVAP]-1659882725512
GPR[SPVATF]-1659882725512
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882727821
GPR[EPVS]-1659882727821
========
if(parent==null){
error(INDEX_OUT_OF_BOUNDS_ERROR,parent);
return n;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882727824
GPR[SPVAP]-1659882727824
GPR[EPVAP]-1659882729068
GPR[EPVS]-1659882729068
========
n.getParent().replaceChild(n,parent);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882729069
GPR[SPVAP]-1659882729069
GPR[EPVAP]-1659882730297
GPR[EPVS]-1659882730297
========
parent.copyInformationFrom(n);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882730298
GPR[SPVAP]-1659882730298
GPR[EPVAP]-1659882731536
GPR[EPVS]-1659882731536
========
if(parent.getType()!=Token.EMPTY){
parent.addChildrenToFront(c);
}else {
newBlock.setWasEmptyNode(true);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882731537
GPR[SPVAP]-1659882731537
GPR[EPVAP]-1659882732771
GPR[EPVS]-1659882732771
========
NodeUtil.redeclareVarsInsideBranch(strictExternCheck?parent:parent);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882732772
GPR[SPVAP]-1659882732772
GPR[EPVAP]-1659882733995
GPR[EPVS]-1659882733995
========
n.replaceChild(n,parent);
reportCodeChange();
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882733996
GPR[SPVAP]-1659882733996
GPR[EPVAP]-1659882735212
GPR[EPVS]-1659882735212
========
case Token.GETELEM :
Node n.getFirstChild().getNext()=n.getFirstChild().getNext();
if(dest.getType()==Token.STRING){
markPrototypePropertyCandidate(dest,synthesizedExternsInput);
}

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882735213
GPR[SPVAP]-1659882735213
GPR[EPVAP]-1659882736308
GPR[EPVS]-1659882736308
========
default :
t.tryMinimizeExits(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882736310
GPR[SPVAP]-1659882736310
GPR[EPVAP]-1659882737537
GPR[EPVS]-1659882737537
========
default :
if(NodeUtil.getBooleanValue(NodeUtil.getConditionExpression(n))==TernaryValue.FALSE){
tryMinimizeExits(n.getFirstChild(),Token.BREAK,null);
}
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();



========
MM Copying to MM
GPR[SPVS]-1659882737538
GPR[SPVAP]-1659882737538
GPR[EPVAP]-1659882738771
GPR[EPVS]-1659882738771
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882738772
GPR[SPVAP]-1659882738772
GPR[EPVAP]-1659882739989
GPR[EPVS]-1659882739989
========
scope=new ControlFlowAnalysis(compiler,false,true).getCfg();
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882739990
GPR[SPVAP]-1659882739990
GPR[EPVAP]-1659882741214
GPR[EPVS]-1659882741214
========
if(parent.getType()!=Token.STRING){
Node new Node(Token.ADD,Node.newString("").copyInformationFrom(n),parent)=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882741216
GPR[SPVAP]-1659882741216
GPR[EPVAP]-1659882742303
GPR[EPVS]-1659882742303
========
default :
Preconditions.checkState(n.hasChildren(),"AST should be normalized");
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();



========
MM Copying to MM
GPR[SPVS]-1659882742305
GPR[SPVAP]-1659882742305
GPR[EPVAP]-1659882744919
GPR[SPVATF]-1659882744919
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882747259
GPR[EPVS]-1659882747259
========
scope=strictExternCheck;
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882747260
GPR[SPVAP]-1659882747260
GPR[EPVAP]-1659882748506
GPR[EPVS]-1659882748506
========
new Node(Token.NOT,Node.newNumber(n.getType()==Token.TRUE?0:1)).copyInformationFromForTree(n);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882748507
GPR[SPVAP]-1659882748507
GPR[EPVAP]-1659882749727
GPR[EPVS]-1659882749727
========
if(options.sourceMapOutputPath!=null||options.nameReferenceReportPath!=null){
SourceInformationAnnotator new SourceInformationAnnotator(synthesizedExternsInput.getName(),options.devMode!=DevMode.OFF)=new SourceInformationAnnotator(synthesizedExternsInput.getName(),options.devMode!=DevMode.OFF);
NodeTraversal.traverse(this,n,sia);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882749729
GPR[SPVAP]-1659882749729
GPR[EPVAP]-1659882750827
GPR[EPVS]-1659882750827
========
if(mayHaveSideEffects(parent)){
parent=new Node(Token.COMMA).copyInformationFrom(n);
replacement.addChildToFront(cond);
replacement.addChildToBack(parent);
}else {
replacement=branchToKeep;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882750829
GPR[SPVAP]-1659882750829
GPR[EPVAP]-1659882752048
GPR[EPVS]-1659882752048
========
t.connect(getNamedContainingFunction(),new Reference(n,parent),t.defineNameIfNotExists(n.getQualifiedName(),strictExternCheck));
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882752051
GPR[SPVAP]-1659882752051
GPR[EPVAP]-1659882753291
GPR[EPVS]-1659882753291
========
if(isLowerPrecedenceInExpression(parent,AND_PRECEDENCE)&&isLowerPrecedenceInExpression(parent.getFirstChild(),AND_PRECEDENCE)){
return n;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882753293
GPR[SPVAP]-1659882753293
GPR[EPVAP]-1659882754509
GPR[EPVS]-1659882754509
========
n.replaceChild(n,NodeUtil.newExpr(new Node(Token.AND,parent,parent.removeFirstChild()).copyInformationFrom(n)));
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882754510
GPR[SPVAP]-1659882754510
GPR[EPVAP]-1659882755741
GPR[EPVS]-1659882755741
========
if(n==null||n==parent){
return ;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882755742
GPR[SPVAP]-1659882755742
GPR[EPVAP]-1659882756962
GPR[EPVS]-1659882756962
========
Preconditions.checkState(!NodeUtil.isObjectLitKey(n,n.getParent()));
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882756963
GPR[SPVAP]-1659882756963
GPR[EPVAP]-1659882758209
GPR[EPVS]-1659882758209
========
if(isExpressionTreeUnsafe(n,state.sideEffects)){
state.sideEffects=true;
state.extractBeforeStatement=extractExpression(n,state.extractBeforeStatement);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882758210
GPR[SPVAP]-1659882758210
GPR[EPVAP]-1659882759425
GPR[EPVS]-1659882759425
========
NodeUtil.copyNameAnnotations(n.getLastChild(),parent);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882759426
GPR[SPVAP]-1659882759426
GPR[EPVAP]-1659882760655
GPR[EPVS]-1659882760655
========
if(n.getJSType()!=null){
parent.setJSType(type);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882760656
GPR[SPVAP]-1659882760656
GPR[EPVAP]-1659882761877
GPR[EPVS]-1659882761877
========
if(n.getType()==Token.FUNCTION){
Preconditions.checkState(n.getProp(Node.FUNCTION_PROP)==null);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882761878
GPR[SPVAP]-1659882761878
GPR[EPVAP]-1659882763113
GPR[EPVS]-1659882763113
========
if(isUselessCase(parent,(parent==n.getFirstChild())?null:lastNonRemovable)){
removeCase(n,c);
return null;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882763116
GPR[SPVAP]-1659882763116
GPR[EPVAP]-1659882764350
GPR[EPVS]-1659882764350
========
if(!strictExternCheck&&parent==null){
elseBody=new Node(Token.BLOCK).copyInformationFrom(n);
n.addChildToBack(elseBody);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882764352
GPR[SPVAP]-1659882764352
GPR[EPVAP]-1659882765631
GPR[EPVS]-1659882765631
========
strictExternCheck?parent:parent.addChildToFront(new Node(Token.EXPR_RESULT,parent).copyInformationFrom(cond));
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882765632
GPR[SPVAP]-1659882765632
GPR[EPVAP]-1659882766710
GPR[EPVS]-1659882766710
========
traverseNode(n,null,scope);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882766712
GPR[SPVAP]-1659882766712
GPR[EPVAP]-1659882767955
GPR[EPVS]-1659882767955
========
if(strictExternCheck){
collectMaybeUnreferencedVars(scope);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882767956
GPR[SPVAP]-1659882767956
GPR[EPVAP]-1659882769171
GPR[EPVS]-1659882769171
========
if(n.getType()==Token.NAME){
Preconditions.checkArgument(parent.getType()==Token.FUNCTION||parent.getType()==Token.VAR||parent.getType()==Token.LP||parent.getType()==Token.CATCH);
}else {
Preconditions.checkArgument(n.getType()==Token.GETPROP&&(parent.getType()==Token.ASSIGN||parent.getType()==Token.EXPR_RESULT));
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();


========
MM Copying to MM
GPR[SPVS]-1659882769175
GPR[SPVAP]-1659882769175
GPR[EPVAP]-1659882770389
GPR[EPVS]-1659882770389
========
default :
ensureTyped(t,n,BOOLEAN_TYPE);
t.report(t,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();



========
MM Copying to MM
GPR[SPVS]-1659882770390
GPR[SPVAP]-1659882770390
GPR[EPVAP]-1659882771617
GPR[EPVS]-1659882771617
========
default :
ensureTyped(t,n,BOOLEAN_TYPE);
t.report(n,n,n.getString());
Scope scope=t.getScope();



========
MM Copying to MM
GPR[SPVS]-1659882771619
GPR[SPVAP]-1659882771619
GPR[EPVAP]-1659882772894
GPR[EPVS]-1659882772894
========
default :
ensureTyped(t,n,BOOLEAN_TYPE);
t.report(t,n,BAD_DELETE);
Scope scope=t.getScope();



========
MM Copying to MM
GPR[SPVS]-1659882772895
GPR[SPVAP]-1659882772895
GPR[EPVAP]-1659882774128
GPR[EPVS]-1659882774128
GPR[ESUN]-1659882774128
GPR[SSUN]-1659882774128
com.google.javascript.jscomp.VarCheck,249
========
default :
if(var==null){
varsToDeclareInExterns.add(n.getString());
}
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());



========
MM Copying to MM
GPR[SPVS]-1659882776922
GPR[SPVAP]-1659882776922
GPR[EPVAP]-1659882780782
GPR[EPVS]-1659882780782
========
default :
ensureTyped(t,n);
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());



========
MM Copying to MM
GPR[SPVS]-1659882780784
GPR[SPVAP]-1659882780784
GPR[EPVAP]-1659882782392
GPR[EPVS]-1659882782392
========
case Token.TRUE :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882782394
GPR[SPVAP]-1659882782394
GPR[EPVAP]-1659882788178
GPR[SPVATF]-1659882788178
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882790538
GPR[EPVS]-1659882790538
========
case Token.REF_SPECIAL :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882790539
GPR[SPVAP]-1659882790539
GPR[EPVAP]-1659882793177
GPR[SPVATF]-1659882793177
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882795471
GPR[EPVS]-1659882795471
========
case Token.NULL :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882795472
GPR[SPVAP]-1659882795472
GPR[EPVAP]-1659882798060
GPR[SPVATF]-1659882798060
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882800381
GPR[EPVS]-1659882800381
========
default :
typeable=!NodeUtil.isExpressionNode(parent);
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());



========
MM Copying to MM
GPR[SPVS]-1659882800382
GPR[SPVAP]-1659882800382
GPR[EPVAP]-1659882801647
GPR[EPVS]-1659882801647
========
case Token.RETURN :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882801649
GPR[SPVAP]-1659882801649
GPR[EPVAP]-1659882804248
GPR[SPVATF]-1659882804248
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882806612
GPR[EPVS]-1659882806612
========
if(t.inGlobalScope()){
return ;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882806613
GPR[SPVAP]-1659882806614
GPR[EPVAP]-1659882807848
GPR[EPVS]-1659882807848
========
if(var==null){
return ;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882807849
GPR[SPVAP]-1659882807849
GPR[EPVAP]-1659882809077
GPR[EPVS]-1659882809077
========
if(t.getScope().getVar(n.getString())!=null&&var.isLocal()){
return ;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882809078
GPR[SPVAP]-1659882809078
GPR[EPVAP]-1659882810308
GPR[EPVS]-1659882810308
========
if(var==null||var.isLocal()||var.isExtern()){
return ;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882810309
GPR[SPVAP]-1659882810309
GPR[EPVAP]-1659882811533
GPR[EPVS]-1659882811533
========
case Token.LP :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882811534
GPR[SPVAP]-1659882811534
GPR[EPVAP]-1659882812784
GPR[EPVS]-1659882812784
========
case Token.OBJECTLIT :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882812786
GPR[SPVAP]-1659882812786
GPR[EPVAP]-1659882815409
GPR[SPVATF]-1659882815409
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882817733
GPR[EPVS]-1659882817733
========
default :
checkPropertyVisibility(t,n,parent);
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());



========
MM Copying to MM
GPR[SPVS]-1659882817735
GPR[SPVAP]-1659882817735
GPR[EPVAP]-1659882819001
GPR[EPVS]-1659882819001
========
default :
checkConstantProperty(t,n);
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());



========
MM Copying to MM
GPR[SPVS]-1659882819002
GPR[SPVAP]-1659882819002
GPR[EPVAP]-1659882820227
GPR[EPVS]-1659882820227
========
default :
checkPropertyVisibility(t,n,parent);
checkConstantProperty(t,n);

t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());



========
MM Copying to MM
GPR[SPVS]-1659882820229
GPR[SPVAP]-1659882820229
GPR[EPVAP]-1659882821448
GPR[EPVS]-1659882821448
========
default :
childType=getJSType(n.getFirstChild());
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());



========
MM Copying to MM
GPR[SPVS]-1659882821449
GPR[SPVAP]-1659882821450
GPR[EPVAP]-1659882822676
GPR[EPVS]-1659882822676
========
default :
ensureTyped(t,n,NUMBER_TYPE);
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());



========
MM Copying to MM
GPR[SPVS]-1659882822677
GPR[SPVAP]-1659882822678
GPR[EPVAP]-1659882823902
GPR[EPVS]-1659882823902
========
default :
childType=getJSType(n.getFirstChild());
ensureTyped(t,n,NUMBER_TYPE);

t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());



========
MM Copying to MM
GPR[SPVS]-1659882823903
GPR[SPVAP]-1659882823903
GPR[EPVAP]-1659882825127
GPR[EPVS]-1659882825127
========
if(n.getType()!=Token.GETPROP){
return ;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882825129
GPR[SPVAP]-1659882825129
GPR[EPVAP]-1659882826352
GPR[EPVS]-1659882826352
========
if(n.getFirstChild().getNext().getType()!=Token.STRING){
return ;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882826353
GPR[SPVAP]-1659882826353
GPR[EPVAP]-1659882827606
GPR[EPVS]-1659882827606
========
if(parent==null){
reportBadBaseClassUse(t,n,"Could not find goog.inherits for base class");
return ;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882827608
GPR[SPVAP]-1659882827608
GPR[EPVAP]-1659882828863
GPR[EPVS]-1659882828863
========
compiler.reportCodeChange();
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882828864
GPR[SPVAP]-1659882828864
GPR[EPVAP]-1659882830103
GPR[EPVS]-1659882830103
========
default :
typeable=!(n.getType()==Token.ASSIGN&&n.getFirstChild()==n);
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());



========
MM Copying to MM
GPR[SPVS]-1659882830104
GPR[SPVAP]-1659882830104
GPR[EPVAP]-1659882831368
GPR[EPVS]-1659882831369
========
case Token.GETELEM :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882831369
GPR[SPVAP]-1659882831369
GPR[EPVAP]-1659882834043
GPR[SPVATF]-1659882834043
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882836365
GPR[EPVS]-1659882836365
========
default :
typeable=false;
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());



========
MM Copying to MM
GPR[SPVS]-1659882836366
GPR[SPVAP]-1659882836366
GPR[EPVAP]-1659882837611
GPR[EPVS]-1659882837611
========
var=null;
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882837612
GPR[SPVAP]-1659882837612
GPR[EPVAP]-1659882838844
GPR[EPVS]-1659882838844
========
scope=null;
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882838845
GPR[SPVAP]-1659882838845
GPR[EPVAP]-1659882840082
GPR[EPVS]-1659882840082
========
if(scope.isGlobal()){
inferTypes(t,t.getCurrentNode(),scope);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882840084
GPR[SPVAP]-1659882840084
GPR[EPVAP]-1659882841300
GPR[EPVS]-1659882841300
========
if(scope.isLocal()){
inferTypes(t,t.getCurrentNode(),scope);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882841301
GPR[SPVAP]-1659882841301
GPR[EPVAP]-1659882842532
GPR[EPVS]-1659882842532
========
NodeUtil.copyNameAnnotations(parent,parent);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882842534
GPR[SPVAP]-1659882842534
GPR[EPVAP]-1659882843773
GPR[EPVS]-1659882843773
========
n.replaceChild(n,parent);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882843774
GPR[SPVAP]-1659882843774
GPR[EPVAP]-1659882845004
GPR[EPVS]-1659882845004
========
if(!t.inGlobalScope()&&NodeUtil.isHoistedFunctionDeclaration(parent)){
n.addChildToFront(value.detachFromParent());
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882845005
GPR[SPVAP]-1659882845005
GPR[EPVAP]-1659882846283
GPR[EPVS]-1659882846283
========
case OVERRIDE_DEFAULT_VALUE :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882846284
GPR[SPVAP]-1659882846284
GPR[EPVAP]-1659882847511
GPR[EPVS]-1659882847511
========
ensureTyped(t,n,BOOLEAN_TYPE);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882847513
GPR[SPVAP]-1659882847513
GPR[EPVAP]-1659882848734
GPR[EPVS]-1659882848734
========
ensureTyped(t,n);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882848736
GPR[SPVAP]-1659882848736
GPR[EPVAP]-1659882849965
GPR[EPVS]-1659882849965
========
if(n.getType()!=Token.GETPROP){
Node parent;
if(constructor.getLineno()<0||constructor.getCharno()<0){
line=n;
}else {
line=constructor;
}
report(t,line,NOT_A_CONSTRUCTOR);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882849967
GPR[SPVAP]-1659882849967
GPR[EPVAP]-1659882851190
GPR[EPVS]-1659882851190
========
nameObj.type=type;
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882851191
GPR[SPVAP]-1659882851191
GPR[EPVAP]-1659882852417
GPR[EPVS]-1659882852417
========
scope=traverseChildren(n,scope);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882852418
GPR[SPVAP]-1659882852418
GPR[EPVAP]-1659882853634
GPR[EPVS]-1659882853634
========
scanVars(parent.getNext(),n);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882853636
GPR[SPVAP]-1659882853636
GPR[EPVAP]-1659882854855
GPR[EPVS]-1659882854855
========
case Token.SCRIPT :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882854856
GPR[SPVAP]-1659882854856
GPR[EPVAP]-1659882857473
GPR[SPVATF]-1659882857473
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882859797
GPR[EPVS]-1659882859797
========
case Token.CALL :
Node n.getFirstChild()=n.getFirstChild();
String n.getFirstChild().getQualifiedName()=calledFn.getQualifiedName();
if(name!=null){
Config findMatching(n.getFirstChild().getQualifiedName())=findMatching(name);
if(config!=null){
doSubstitutions(t,config,n);
return ;
}
}

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882859798
GPR[SPVAP]-1659882859798
GPR[EPVAP]-1659882860878
GPR[EPVS]-1659882860878
========
if(n.getString().isEmpty()){
return ;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882860879
GPR[SPVAP]-1659882860879
GPR[EPVAP]-1659882862126
GPR[EPVS]-1659882862126
========
case Token.NEW :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882862128
GPR[SPVAP]-1659882862128
GPR[EPVAP]-1659882864738
GPR[SPVATF]-1659882864738
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882867077
GPR[EPVS]-1659882867077
========
if(NodeUtil.getBooleanValue(parent)!=TernaryValue.FALSE){
return n;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882867078
GPR[SPVAP]-1659882867078
GPR[EPVAP]-1659882868315
GPR[EPVS]-1659882868315
========
NodeUtil.redeclareVarsInsideBranch(n);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882868316
GPR[SPVAP]-1659882868316
GPR[EPVAP]-1659882869536
GPR[EPVS]-1659882869536
========
NodeUtil.removeChild(n.getParent(),n);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882869537
GPR[SPVAP]-1659882869537
GPR[EPVAP]-1659882870790
GPR[EPVS]-1659882870790
========
default :
reportCodeChange();
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());



========
MM Copying to MM
GPR[SPVS]-1659882870791
GPR[SPVAP]-1659882870791
GPR[EPVAP]-1659882872056
GPR[EPVS]-1659882872056
========
for(Node parent : n.getAncestors()){
if(NodeUtil.isControlStructure(ancestor)){
n.report(t.makeError(n,CONDITIONAL_ID_GENERATOR_CALL));
return ;
}
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882872058
GPR[SPVAP]-1659882872058
GPR[EPVAP]-1659882873297
GPR[EPVS]-1659882873297
========
n.reportCodeChange();
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882873298
GPR[SPVAP]-1659882873298
GPR[EPVAP]-1659882874554
GPR[EPVS]-1659882874554
========
if(t.getScope().getVar(n.getString())==null){
if(!sanityCheck){
t.report(n,UNKNOWN_VARIABLE,n.getString());
}
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882874555
GPR[SPVAP]-1659882874555
GPR[EPVAP]-1659882875784
GPR[EPVS]-1659882875784
========
if(!strictExternCheck){
if("eval".equals(n.getString())){
t.report(n,EVAL_USE);
}else if(n.getString().endsWith("__")){
t.report(n,ILLEGAL_NAME);
}
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882875785
GPR[SPVAP]-1659882875785
GPR[EPVAP]-1659882877028
GPR[EPVS]-1659882877028
========
maybeRecordExport(n);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882877030
GPR[SPVAP]-1659882877030
GPR[EPVAP]-1659882878264
GPR[EPVS]-1659882878264
========
if(NodeUtil.isVar(parent)){
removeVarDeclaration(n);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882878266
GPR[SPVAP]-1659882878266
GPR[EPVAP]-1659882879488
GPR[EPVS]-1659882879488
========
NodeUtil.redeclareVarsInsideBranch(parent);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882879489
GPR[SPVAP]-1659882879489
GPR[EPVAP]-1659882880738
GPR[EPVS]-1659882880738
========
parent.replaceChild(n,parent);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882880739
GPR[SPVAP]-1659882880739
GPR[EPVAP]-1659882881976
GPR[EPVS]-1659882881976
========
reportCodeChange();
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882881977
GPR[SPVAP]-1659882881977
GPR[EPVAP]-1659882883209
GPR[EPVS]-1659882883209
========
parent.detachFromParent();
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882883210
GPR[SPVAP]-1659882883210
GPR[EPVAP]-1659882884425
GPR[EPVS]-1659882884425
========
parent.replaceChild(n,parent);
reportCodeChange();
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882884426
GPR[SPVAP]-1659882884426
GPR[EPVAP]-1659882885649
GPR[EPVS]-1659882885649
========
parent.detachFromParent();
parent.replaceChild(n,parent);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882885650
GPR[SPVAP]-1659882885650
GPR[EPVAP]-1659882886862
GPR[EPVS]-1659882886862
========
parent.detachFromParent();
reportCodeChange();
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882886863
GPR[SPVAP]-1659882886863
GPR[EPVAP]-1659882888081
GPR[EPVS]-1659882888081
========
parent.detachFromParent();
parent.replaceChild(n,parent);
reportCodeChange();
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882888082
GPR[SPVAP]-1659882888082
GPR[EPVAP]-1659882889324
GPR[EPVS]-1659882889324
========
n.removeChild(parent);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882889326
GPR[SPVAP]-1659882889326
GPR[EPVAP]-1659882890539
GPR[EPVS]-1659882890539
========
case Token.VAR :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882890540
GPR[SPVAP]-1659882890540
GPR[EPVAP]-1659882891771
GPR[EPVS]-1659882891771
========
newParameter(n.getJSType()).setOptionalArg(n.isOptionalArg());
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882891772
GPR[SPVAP]-1659882891772
GPR[EPVAP]-1659882893048
GPR[EPVS]-1659882893048
========
if(parent.hasOneChild()){
NodeUtil.redeclareVarsInsideBranch(catchBlock);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882893049
GPR[SPVAP]-1659882893049
GPR[EPVAP]-1659882894329
GPR[EPVS]-1659882894329
========
default :
scope=traverseChildren(n,scope);
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());



========
MM Copying to MM
GPR[SPVS]-1659882894330
GPR[SPVAP]-1659882894330
GPR[EPVAP]-1659882895551
GPR[EPVS]-1659882895551
========
case Token.TYPEOF :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882895552
GPR[SPVAP]-1659882895552
GPR[EPVAP]-1659882898251
GPR[SPVATF]-1659882898251
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882900563
GPR[EPVS]-1659882900563
========
case Token.OR :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882900565
GPR[SPVAP]-1659882900565
GPR[EPVAP]-1659882903160
GPR[SPVATF]-1659882903160
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882905496
GPR[EPVS]-1659882905496
========
parent.replaceChild(n,n.getFirstChild().getNext());
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882905497
GPR[SPVAP]-1659882905497
GPR[EPVAP]-1659882906738
GPR[EPVS]-1659882906738
========
parent.replaceChild(n,n.removeFirstChild());
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882906739
GPR[SPVAP]-1659882906739
GPR[EPVAP]-1659882907972
GPR[EPVS]-1659882907972
========
case Token.AND :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882907973
GPR[SPVAP]-1659882907973
GPR[EPVAP]-1659882910580
GPR[SPVATF]-1659882910580
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882912914
GPR[EPVS]-1659882912914
========
parent.replaceChild(n,NodeUtil.newExpr(parent));
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882912915
GPR[SPVAP]-1659882912915
GPR[EPVAP]-1659882914168
GPR[EPVS]-1659882914168
========
if(n.getFirstChild().getType()!=Token.EMPTY){
return n;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882914169
GPR[SPVAP]-1659882914169
GPR[EPVAP]-1659882915396
GPR[EPVS]-1659882915396
========
if(NodeUtil.getBooleanValue(parent)!=TernaryValue.FALSE){
return n;
}
NodeUtil.redeclareVarsInsideBranch(n);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882915397
GPR[SPVAP]-1659882915397
GPR[EPVAP]-1659882916646
GPR[EPVS]-1659882916646
========
if(NodeUtil.getBooleanValue(parent)!=TernaryValue.FALSE){
return n;
}
NodeUtil.removeChild(n.getParent(),n);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882916647
GPR[SPVAP]-1659882916647
GPR[EPVAP]-1659882917870
GPR[EPVS]-1659882917870
========
NodeUtil.redeclareVarsInsideBranch(n);
NodeUtil.removeChild(n.getParent(),n);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882917870
GPR[SPVAP]-1659882917870
GPR[EPVAP]-1659882919107
GPR[EPVS]-1659882919107
========
if(NodeUtil.getBooleanValue(parent)!=TernaryValue.FALSE){
return n;
}
NodeUtil.redeclareVarsInsideBranch(n);
NodeUtil.removeChild(n.getParent(),n);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882919108
GPR[SPVAP]-1659882919108
GPR[EPVAP]-1659882920358
GPR[EPVS]-1659882920359
========
default :
new Node(Token.BLOCK).copyInformationFrom(parent);
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());



========
MM Copying to MM
GPR[SPVS]-1659882920360
GPR[SPVAP]-1659882920360
GPR[EPVAP]-1659882923039
GPR[SPVATF]-1659882923039
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882925382
GPR[EPVS]-1659882925382
========
default :
new Node(Token.BLOCK).addChildToFront(parent);
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());



========
MM Copying to MM
GPR[SPVS]-1659882925383
GPR[SPVAP]-1659882925383
GPR[EPVAP]-1659882927973
GPR[SPVATF]-1659882927973
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882930288
GPR[EPVS]-1659882930288
========
default :
reportCodeChange("LABEL normalization");
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());



========
MM Copying to MM
GPR[SPVS]-1659882930289
GPR[SPVAP]-1659882930289
GPR[EPVAP]-1659882931512
GPR[EPVS]-1659882931512
========
default :
new Node(Token.BLOCK).copyInformationFrom(parent);
new Node(Token.BLOCK).addChildToFront(parent);
reportCodeChange("LABEL normalization");

t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());



========
MM Copying to MM
GPR[SPVS]-1659882931513
GPR[SPVAP]-1659882931513
GPR[EPVAP]-1659882932743
GPR[EPVS]-1659882932743
========
case Token.WHILE :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882932744
GPR[SPVAP]-1659882932744
GPR[EPVAP]-1659882935344
GPR[SPVATF]-1659882935344
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882937677
GPR[EPVS]-1659882937677
========
if(NodeUtil.isVar(n.getFirstChild())){
lhs=lhs.getLastChild();
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882937678
GPR[SPVAP]-1659882937678
GPR[EPVAP]-1659882938934
GPR[EPVS]-1659882938934
========
if(NodeUtil.containsType(n,Token.IN)){
return ;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882938935
GPR[SPVAP]-1659882938935
GPR[EPVAP]-1659882940156
GPR[EPVS]-1659882940156
========
default :
annotateDispatchers(n,parent);
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());



========
MM Copying to MM
GPR[SPVS]-1659882940157
GPR[SPVAP]-1659882940157
GPR[EPVAP]-1659882941370
GPR[EPVS]-1659882941370
========
if(hasBreakOrContinue(n)){
return n;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882941371
GPR[SPVAP]-1659882941371
GPR[EPVAP]-1659882942594
GPR[EPVS]-1659882942594
========
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882942595
GPR[SPVAP]-1659882942595
GPR[EPVAP]-1659882943821
GPR[EPVS]-1659882943821
========
case Token.NEG :
scope=traverse(n.getFirstChild(),scope);
n.setJSType(getNativeType(NUMBER_TYPE));
break;

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882943824
GPR[SPVAP]-1659882943824
GPR[EPVAP]-1659882945429
GPR[EPVS]-1659882945429
========
case Token.ARRAYLIT :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882945430
GPR[SPVAP]-1659882945430
GPR[EPVAP]-1659882948098
GPR[SPVATF]-1659882948098
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882950420
GPR[EPVS]-1659882950420
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882950421
GPR[SPVAP]-1659882950421
GPR[EPVAP]-1659882951664
GPR[EPVS]-1659882951664
========
if(NodeUtil.getBooleanValue(NodeUtil.getConditionExpression(n))!=TernaryValue.FALSE){
return n;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882951665
GPR[SPVAP]-1659882951665
GPR[EPVAP]-1659882952896
GPR[EPVS]-1659882952896
========
redeclare(scope,n.getString(),getNativeType(JSTypeNative.UNKNOWN_TYPE));
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882952898
GPR[SPVAP]-1659882952898
GPR[EPVAP]-1659882954121
GPR[EPVS]-1659882954121
========
parent.copyInformationFrom(n);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882954122
GPR[SPVAP]-1659882954122
GPR[EPVAP]-1659882955337
GPR[EPVS]-1659882955337
========
if(parent.getType()!=Token.EMPTY){
parent.addChildrenToFront(c);
}else {
newBlock.setWasEmptyNode(true);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882955338
GPR[SPVAP]-1659882955338
GPR[EPVAP]-1659882956574
GPR[EPVS]-1659882956574
========
if(parent==null){
error(INDEX_OUT_OF_BOUNDS_ERROR,parent);
return n;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882956575
GPR[SPVAP]-1659882956575
GPR[EPVAP]-1659882957791
GPR[EPVS]-1659882957791
========
n.getParent().replaceChild(n,parent);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882957792
GPR[SPVAP]-1659882957792
GPR[EPVAP]-1659882959035
GPR[EPVS]-1659882959035
========
case Token.IN :
scope=traverseChildren(n,scope);
n.setJSType(getNativeType(BOOLEAN_TYPE));
break;

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882959036
GPR[SPVAP]-1659882959036
GPR[EPVAP]-1659882960271
GPR[EPVS]-1659882960271
========
if(parent.getType()!=Token.STRING){
Node new Node(Token.ADD,Node.newString("").copyInformationFrom(parent),parent)=new Node(Token.ADD,Node.newString("").copyInformationFrom(parent),foldedStringNode);
foldedStringNode=replacement;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882960273
GPR[SPVAP]-1659882960273
GPR[EPVAP]-1659882961357
GPR[EPVS]-1659882961357
========
case Token.FOR :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882961359
GPR[SPVAP]-1659882961359
GPR[EPVAP]-1659882963948
GPR[SPVATF]-1659882963948
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882966261
GPR[EPVS]-1659882966261
========
default :
t.tryMinimizeExits(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882966263
GPR[SPVAP]-1659882966263
GPR[EPVAP]-1659882967494
GPR[EPVS]-1659882967494
========
default :
if(NodeUtil.getBooleanValue(NodeUtil.getConditionExpression(n))==TernaryValue.FALSE){
tryMinimizeExits(n.getFirstChild(),Token.BREAK,null);
}
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());



========
MM Copying to MM
GPR[SPVS]-1659882967495
GPR[SPVAP]-1659882967495
GPR[EPVAP]-1659882968732
GPR[EPVS]-1659882968732
========
case Token.GETELEM :
Node n.getFirstChild().getNext()=n.getFirstChild().getNext();
if(dest.getType()==Token.STRING){
markPrototypePropertyCandidate(dest,synthesizedExternsInput);
}
break;

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882968733
GPR[SPVAP]-1659882968733
GPR[EPVAP]-1659882969807
GPR[EPVS]-1659882969807
========
if(!areValidRegexpFlags(n.getString())){
error(INVALID_REGULAR_EXPRESSION_FLAGS,flags);
return n;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882969808
GPR[SPVAP]-1659882969808
GPR[EPVAP]-1659882971032
GPR[EPVS]-1659882971032
========
if(!areSafeFlagsToFold(n.getString())){
return n;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882971033
GPR[SPVAP]-1659882971033
GPR[EPVAP]-1659882972262
GPR[EPVS]-1659882972262
========
var=new Node(Token.REGEXP,parent,n);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882972263
GPR[SPVAP]-1659882972263
GPR[EPVAP]-1659882973498
GPR[EPVS]-1659882973498
========
new Node(Token.NOT,Node.newNumber(n.getType()==Token.TRUE?0:1)).copyInformationFromForTree(n);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882973500
GPR[SPVAP]-1659882973500
GPR[EPVAP]-1659882974732
GPR[EPVS]-1659882974732
========
if(n.getType()!=Token.RETURN){
return ;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882974733
GPR[SPVAP]-1659882974733
GPR[EPVAP]-1659882975971
GPR[EPVS]-1659882975971
========
if(n.removeFirstChild()!=null){
newReportFunctionExitNode().addChildToBack(returnRhs);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882975972
GPR[SPVAP]-1659882975972
GPR[EPVAP]-1659882977196
GPR[EPVS]-1659882977196
========
default :
Preconditions.checkState(n.hasChildren(),"AST should be normalized");
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());



========
MM Copying to MM
GPR[SPVS]-1659882977198
GPR[SPVAP]-1659882977198
GPR[EPVAP]-1659882979796
GPR[SPVATF]-1659882979796
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882982119
GPR[EPVS]-1659882982119
========
if(parent.getType()==Token.NOT&&!consumesDanglingElse(parent)){
n.replaceChild(cond,cond.removeFirstChild());
n.removeChild(parent);
n.addChildToBack(thenBranch);
reportCodeChange();
return n;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882982120
GPR[SPVAP]-1659882982120
GPR[EPVAP]-1659882983365
GPR[EPVS]-1659882983365
========
if(!strictExternCheck){
traverseBranch(n,n);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882983367
GPR[SPVAP]-1659882983367
GPR[EPVAP]-1659882984608
GPR[EPVS]-1659882984608
========
parent=n;
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882984609
GPR[SPVAP]-1659882984609
GPR[EPVAP]-1659882985830
GPR[EPVS]-1659882985830
========
if(strictExternCheck){
traverseBranch(n,n);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882985831
GPR[SPVAP]-1659882985831
GPR[EPVAP]-1659882987042
GPR[EPVS]-1659882987042
========
if(parent==null||n==null||!areNodesEqualForInlining(lastTrue,lastFalse)){
break;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882987043
GPR[SPVAP]-1659882987043
GPR[EPVAP]-1659882988276
GPR[EPVS]-1659882988276
========
n.detachFromParent();
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882988277
GPR[SPVAP]-1659882988277
GPR[EPVAP]-1659882989514
GPR[EPVS]-1659882989514
========
if(mayHaveSideEffects(parent)){
parent=new Node(Token.COMMA).copyInformationFrom(n);
replacement.addChildToFront(cond);
replacement.addChildToBack(parent);
}else {
replacement=branchToKeep;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882989516
GPR[SPVAP]-1659882989516
GPR[EPVAP]-1659882990744
GPR[EPVS]-1659882990744
========
if(!NodeUtil.isExprAssign(n)){
return ;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882990745
GPR[SPVAP]-1659882990745
GPR[EPVAP]-1659882991957
GPR[EPVS]-1659882991957
========
if(n.getQualifiedName()==null||!"goog.now".equals(googNowQName)||n.getNext()!=null){
return ;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882991959
GPR[SPVAP]-1659882991959
GPR[EPVAP]-1659882993174
GPR[EPVS]-1659882993174
========
if(NodeUtil.getExpressionBooleanValue(parent)==TernaryValue.UNKNOWN){
return n;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882993176
GPR[SPVAP]-1659882993176
GPR[EPVAP]-1659882994413
GPR[EPVS]-1659882994413
========
case Token.GETPROP :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882994414
GPR[SPVAP]-1659882994414
GPR[EPVAP]-1659882995645
GPR[EPVS]-1659882995645
========
if(strictExternCheck){
runSanityCheck();
if(hasErrors()){
return null;
}
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882995647
GPR[SPVAP]-1659882995647
GPR[EPVAP]-1659882996887
GPR[EPVS]-1659882996887
========
if(options.sourceMapOutputPath!=null||options.nameReferenceReportPath!=null){
SourceInformationAnnotator new SourceInformationAnnotator(synthesizedExternsInput.getName(),options.devMode!=DevMode.OFF)=new SourceInformationAnnotator(synthesizedExternsInput.getName(),options.devMode!=DevMode.OFF);
NodeTraversal.traverse(this,n,sia);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882996888
GPR[SPVAP]-1659882996888
GPR[EPVAP]-1659882997987
GPR[EPVS]-1659882997987
========
if(isLowerPrecedenceInExpression(parent,AND_PRECEDENCE)&&isLowerPrecedenceInExpression(n.getFirstChild(),AND_PRECEDENCE)){
return n;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882997989
GPR[SPVAP]-1659882997989
GPR[EPVAP]-1659882999242
GPR[EPVS]-1659882999242
========
parent.replaceChild(n,NodeUtil.newExpr(new Node(Token.AND,parent,n.removeFirstChild()).copyInformationFrom(n)));
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659882999243
GPR[SPVAP]-1659882999244
GPR[EPVAP]-1659883000467
GPR[EPVS]-1659883000467
========
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=s.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883000468
GPR[SPVAP]-1659883000468
GPR[EPVAP]-1659883001709
GPR[EPVS]-1659883001709
========
Preconditions.checkState(n.getType()==Token.NAME);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883001710
GPR[SPVAP]-1659883001710
GPR[EPVAP]-1659883002944
GPR[EPVS]-1659883002944
========
if(n.getType()==Token.FUNCTION){
Preconditions.checkState(n.getProp(Node.FUNCTION_PROP)==null);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883002947
GPR[SPVAP]-1659883002947
GPR[EPVAP]-1659883004177
GPR[EPVS]-1659883004177
========
NodeUtil.copyNameAnnotations(n.getLastChild(),parent);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883004179
GPR[SPVAP]-1659883004179
GPR[EPVAP]-1659883005412
GPR[EPVS]-1659883005412
========
if(n.getJSType()!=null){
parent.setJSType(type);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883005413
GPR[SPVAP]-1659883005413
GPR[EPVAP]-1659883006659
GPR[EPVS]-1659883006659
========
if(n==null||n==parent){
return ;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883006660
GPR[SPVAP]-1659883006660
GPR[EPVAP]-1659883007872
GPR[EPVS]-1659883007872
========
Preconditions.checkState(!NodeUtil.isObjectLitKey(n,n.getParent()));
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883007874
GPR[SPVAP]-1659883007874
GPR[EPVAP]-1659883009095
GPR[EPVS]-1659883009095
========
if(isExpressionTreeUnsafe(n,state.sideEffects)){
state.sideEffects=true;
state.extractBeforeStatement=extractExpression(n,state.extractBeforeStatement);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883009096
GPR[SPVAP]-1659883009096
GPR[EPVAP]-1659883010320
GPR[EPVS]-1659883010320
========
if(n==null){
reportError("msg.undef.label");
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883010322
GPR[SPVAP]-1659883010322
GPR[EPVAP]-1659883011549
GPR[EPVS]-1659883011549
========
updateScopeForTypeChange(scope,n.getFirstChild(),n.getFirstChild().getJSType(),getJSType(n.getLastChild()));
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883011551
GPR[SPVAP]-1659883011551
GPR[EPVAP]-1659883012794
GPR[EPVS]-1659883012794
========
if(!scope.isLocal()){
return ;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883012795
GPR[SPVAP]-1659883012795
GPR[EPVAP]-1659883014014
GPR[EPVS]-1659883014014
========
if(scope.getParent().isGlobal()){
return ;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883014015
GPR[SPVAP]-1659883014015
GPR[EPVAP]-1659883015234
GPR[EPVS]-1659883015234
========
default :
if(t.getScope().getVar(parent.getString())!=null&&t.getScope().getVar(parent.getString()).isConst()){
Node n=t.getScope().getVar(parent.getString()).getInitialValue();
if(n!=null&&n.getType()==Token.STRING){
key=n.getString();
break;
}
}
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());



========
MM Copying to MM
GPR[SPVS]-1659883015236
GPR[SPVAP]-1659883015236
GPR[EPVAP]-1659883016474
GPR[EPVS]-1659883016474
========
traverseNode(parent,null,scope);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883016476
GPR[SPVAP]-1659883016476
GPR[EPVAP]-1659883017718
GPR[EPVS]-1659883017718
========
if(strictExternCheck){
collectMaybeUnreferencedVars(scope);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883017719
GPR[SPVAP]-1659883017719
GPR[EPVAP]-1659883018940
GPR[EPVS]-1659883018940
========
interpretAssigns();
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883018941
GPR[SPVAP]-1659883018941
GPR[EPVAP]-1659883020173
GPR[EPVS]-1659883020173
========
removeUnreferencedVars();
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883020174
GPR[SPVAP]-1659883020174
GPR[EPVAP]-1659883021398
GPR[EPVS]-1659883021398
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883021400
GPR[SPVAP]-1659883021400
GPR[EPVAP]-1659883022679
GPR[EPVS]-1659883022679
========
var=new ControlFlowAnalysis(compiler,false,true).getCfg();
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883022680
GPR[SPVAP]-1659883022680
GPR[EPVAP]-1659883023897
GPR[EPVS]-1659883023897
========
if(null==parent||"".equals(flags.getString())){
parent=new Node(Token.REGEXP,parent);
}else {
if(!areValidRegexpFlags(flags.getString())){
error(INVALID_REGULAR_EXPRESSION_FLAGS,flags);
return n;
}
if(!areSafeFlagsToFold(flags.getString())){
return n;
}
n.removeChild(flags);
regexLiteral=new Node(Token.REGEXP,pattern,flags);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883023898
GPR[SPVAP]-1659883023898
GPR[EPVAP]-1659883025129
GPR[EPVS]-1659883025129
========
if(isUselessCase(parent,(parent==n.getFirstChild())?null:lastNonRemovable)){
removeCase(n,c);
return null;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883025131
GPR[SPVAP]-1659883025131
GPR[EPVAP]-1659883026350
GPR[EPVS]-1659883026350
========
var=n;
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883026351
GPR[SPVAP]-1659883026351
GPR[EPVAP]-1659883027572
GPR[EPVS]-1659883027572
========
if(!strictExternCheck&&parent==null){
elseBody=new Node(Token.BLOCK).copyInformationFrom(n);
n.addChildToBack(elseBody);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883027573
GPR[SPVAP]-1659883027573
GPR[EPVAP]-1659883028803
GPR[EPVS]-1659883028803
========
strictExternCheck?parent:parent.addChildToFront(new Node(Token.EXPR_RESULT,parent).copyInformationFrom(cond));
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883028804
GPR[SPVAP]-1659883028804
GPR[EPVAP]-1659883029888
GPR[EPVS]-1659883029888
========
var=true;
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883029891
GPR[SPVAP]-1659883029891
GPR[EPVAP]-1659883031112
GPR[EPVS]-1659883031112
========
Preconditions.checkNotNull(parent);
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883031114
GPR[SPVAP]-1659883031114
GPR[EPVAP]-1659883032392
GPR[EPVS]-1659883032392
========
var=strictExternCheck;
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883032393
GPR[SPVAP]-1659883032393
GPR[EPVAP]-1659883033617
GPR[EPVS]-1659883033617
========
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scopeToDeclareIn.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883033619
GPR[SPVAP]-1659883033619
GPR[EPVAP]-1659883034836
GPR[EPVS]-1659883034836
========
if(t.getScope().getVar(n.getString())!=null){
JSDocInfo t.getScope().getVar(n.getString()).getJSDocInfo()=var.getJSDocInfo();
if(docInfo!=null){
Visibility t.getScope().getVar(n.getString()).getJSDocInfo().getVisibility()=docInfo.getVisibility();
if(visibility==Visibility.PRIVATE&&!t.getInput().getName().equals(docInfo.getSourceName())){
if(docInfo.isConstructor()&&isValidPrivateConstructorAccess(parent)){
return ;
}
compiler.report(t.makeError(n,BAD_PRIVATE_GLOBAL_ACCESS,name.getString(),docInfo.getSourceName()));
}
}
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883034838
GPR[SPVAP]-1659883034838
GPR[EPVAP]-1659883035922
GPR[EPVS]-1659883035922
========
if(!(scope.getVar(n.getString())!=null&&v.isGlobal())||(scope.getVar(n.getString())==null&&varsToDeclareInExterns.contains(n.getString()))){
return null;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883035923
GPR[SPVAP]-1659883035923
GPR[EPVAP]-1659883037153
GPR[EPVS]-1659883037153
========
if(n.getType()==Token.NAME){
Preconditions.checkArgument(parent.getType()==Token.FUNCTION||parent.getType()==Token.VAR||parent.getType()==Token.LP||parent.getType()==Token.CATCH);
}else {
Preconditions.checkArgument(n.getType()==Token.GETPROP&&(parent.getType()==Token.ASSIGN||parent.getType()==Token.EXPR_RESULT));
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883037154
GPR[SPVAP]-1659883037154
GPR[EPVAP]-1659883038374
GPR[EPVS]-1659883038374
========
if(parent.getType()==Token.VAR){
parent=new Node(Token.BLOCK,key,new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,key.getFirstChild().cloneNode(),n.cloneTree())),parent);
}else {
ifBody=new Node(Token.BLOCK,new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,key,tmp.cloneTree())),body);
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883038376
GPR[SPVAP]-1659883038376
GPR[EPVAP]-1659883039645
GPR[EPVS]-1659883039645
========
if(parent.getJSDocInfo()==null||parent.getType()!=Token.GETPROP||member.getFirstChild().getType()!=Token.THIS){
return ;
}
default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883039646
GPR[SPVAP]-1659883039646
GPR[EPVAP]-1659883040861
GPR[EPVS]-1659883040861
========
case Token.ASSIGN_BITAND :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883040862
GPR[SPVAP]-1659883040862
GPR[EPVAP]-1659883043559
GPR[SPVATF]-1659883043559
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883045906
GPR[EPVS]-1659883045906
========
case Token.ASSIGN_ADD :

default :
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());


========
MM Copying to MM
GPR[SPVS]-1659883045907
GPR[SPVAP]-1659883045907
GPR[EPVAP]-1659883048513
GPR[SPVATF]-1659883048513
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883050845
GPR[EPVS]-1659883050845
GPR[ESUN]-1659883050846
GPR[SSUN]-1659883050846
com.google.javascript.jscomp.VarCheck,250
UNKNOWN ASTNode type : catch (Exception e) {
  Result r=new Result(true);
  r.exceptions.add(e);
  return r;
}

UNKNOWN ASTNode type : catch (Exception e) {
  Result r=new Result(true);
  r.exceptions.add(e);
  return r;
}

UNKNOWN ASTNode type : catch (Exception e) {
  Result r=new Result(true);
  r.exceptions.add(e);
  return r;
}

UNKNOWN ASTNode type : catch (Exception e) {
  Result r=new Result(true);
  r.exceptions.add(e);
  return r;
}

========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883054512
GPR[SPVAP]-1659883054512
GPR[EPVAP]-1659883061670
GPR[SPVATF]-1659883061670
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883064038
GPR[EPVS]-1659883064038
========
if(!strictExternCheck){
if("eval".equals(n.getString())){
t.report(n,EVAL_USE);
}else if(n.getString().endsWith("__")){
t.report(n,ILLEGAL_NAME);
}
}
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883064039
GPR[SPVAP]-1659883064039
GPR[EPVAP]-1659883065272
GPR[EPVS]-1659883065272
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null||var.isLocal()||var.isExtern()){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883065274
GPR[SPVAP]-1659883065274
GPR[EPVAP]-1659883067921
GPR[SPVATF]-1659883067921
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883070233
GPR[EPVS]-1659883070233
========
Scope scope=t.getScope();
if(n.getString().length()==0){
return ;
}
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883070235
GPR[SPVAP]-1659883070235
GPR[EPVAP]-1659883072842
GPR[SPVATF]-1659883072842
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883075162
GPR[EPVS]-1659883075162
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(NAME==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883075164
GPR[SPVAP]-1659883075164
GPR[EPVAP]-1659883076400
GPR[EPVS]-1659883076400
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
aliases.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883076401
GPR[SPVAP]-1659883076401
GPR[EPVAP]-1659883077635
GPR[EPVS]-1659883077635
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
aliasDefinitions.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883077636
GPR[SPVAP]-1659883077636
GPR[EPVAP]-1659883078852
GPR[EPVS]-1659883078852
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var!=null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883078854
GPR[SPVAP]-1659883078854
GPR[EPVAP]-1659883081529
GPR[SPVATF]-1659883081529
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883083886
GPR[EPVS]-1659883083886
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
var.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883083887
GPR[SPVAP]-1659883083887
GPR[EPVAP]-1659883085120
GPR[EPVS]-1659883085120
========
Scope scope=t.getScope();
if(n.getString().isEmpty()){
return ;
}
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883085121
GPR[SPVAP]-1659883085121
GPR[EPVAP]-1659883087710
GPR[SPVATF]-1659883087710
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883090029
GPR[EPVS]-1659883090029
========
Scope scope=t.getScope();
if(n.getString().isEmpty()){
return ;
}
Scope.Var var=scope.getVar(n.getString());
if(var!=null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883090030
GPR[SPVAP]-1659883090030
GPR[EPVAP]-1659883092673
GPR[SPVATF]-1659883092673
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883094974
GPR[EPVS]-1659883094974
========
Scope scope=traversal.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883094976
GPR[SPVAP]-1659883094976
GPR[EPVAP]-1659883096214
GPR[EPVS]-1659883096214
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
scopeUpRefMap.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883096216
GPR[SPVAP]-1659883096216
GPR[EPVAP]-1659883097438
GPR[EPVS]-1659883097438
========
if(var.getScope()==t.getScope()){
n.put(t.getScopeRoot(),var.name);
}
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883097439
GPR[SPVAP]-1659883097439
GPR[EPVAP]-1659883098664
GPR[EPVS]-1659883098664
========
varsToDeclareInExterns.put(var,n);
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883098666
GPR[SPVAP]-1659883098666
GPR[EPVAP]-1659883099906
GPR[EPVS]-1659883099906
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(NEW==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883099908
GPR[SPVAP]-1659883099908
GPR[EPVAP]-1659883101120
GPR[EPVS]-1659883101120
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
assignsByVar.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883101121
GPR[SPVAP]-1659883101121
GPR[EPVAP]-1659883102369
GPR[EPVS]-1659883102369
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
if(isRemovableVar(var)&&!maybeAssign.mayHaveSecondarySideEffects){
return ;
}
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883102370
GPR[SPVAP]-1659883102370
GPR[EPVAP]-1659883103587
GPR[EPVS]-1659883103587
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
globalNameNodes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883103589
GPR[SPVAP]-1659883103589
GPR[EPVAP]-1659883104844
GPR[EPVS]-1659883104844
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(PRIVATE==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883104846
GPR[SPVAP]-1659883104846
GPR[EPVAP]-1659883106085
GPR[EPVS]-1659883106085
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
compiler.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883106086
GPR[SPVAP]-1659883106086
GPR[EPVAP]-1659883107318
GPR[EPVS]-1659883107318
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
if(var.getJSDocInfo().isConstructor()&&isValidPrivateConstructorAccess(parent)){
return ;
}
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883107319
GPR[SPVAP]-1659883107319
GPR[EPVAP]-1659883109102
GPR[EPVS]-1659883109102
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var!=null){
compiler.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883109110
GPR[SPVAP]-1659883109110
GPR[EPVAP]-1659883110401
GPR[EPVS]-1659883110401
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==-1){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883110402
GPR[SPVAP]-1659883110402
GPR[EPVAP]-1659883111666
GPR[EPVS]-1659883111666
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
name.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883111667
GPR[SPVAP]-1659883111667
GPR[EPVAP]-1659883112923
GPR[EPVS]-1659883112923
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
provides.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883112925
GPR[SPVAP]-1659883112925
GPR[EPVAP]-1659883114163
GPR[EPVS]-1659883114163
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null||var.scope!=scope){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883114164
GPR[SPVAP]-1659883114164
GPR[EPVAP]-1659883116893
GPR[SPVATF]-1659883116893
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883119218
GPR[EPVS]-1659883119218
========
declareArguments(n);
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883119219
GPR[SPVAP]-1659883119219
GPR[EPVAP]-1659883120480
GPR[EPVS]-1659883120480
========
if(scope.isGlobal()){
inferTypes(t,t.getCurrentNode(),scope);
}
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883120481
GPR[SPVAP]-1659883120481
GPR[EPVAP]-1659883121731
GPR[EPVS]-1659883121731
========
if(scope.isLocal()){
inferTypes(t,t.getCurrentNode(),scope);
}
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883121732
GPR[SPVAP]-1659883121732
GPR[EPVAP]-1659883123001
GPR[EPVS]-1659883123001
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==getJSType(n).restrictByNotNullOrUndefined()){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883123002
GPR[SPVAP]-1659883123002
GPR[EPVAP]-1659883124226
GPR[EPVS]-1659883124226
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
scope.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883124227
GPR[SPVAP]-1659883124227
GPR[EPVAP]-1659883125463
GPR[EPVS]-1659883125463
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
redeclare(scope,n.getString(),getJSType(n).restrictByNotNullOrUndefined());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883125464
GPR[SPVAP]-1659883125464
GPR[EPVAP]-1659883126686
GPR[EPVS]-1659883126686
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
vars.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883126687
GPR[SPVAP]-1659883126687
GPR[EPVAP]-1659883127909
GPR[EPVS]-1659883127909
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
requires.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883127912
GPR[SPVAP]-1659883127912
GPR[EPVAP]-1659883129139
GPR[EPVS]-1659883129139
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(preserveFunctionExpressionNames==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883129141
GPR[SPVAP]-1659883129141
GPR[EPVAP]-1659883130379
GPR[EPVS]-1659883130379
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
reservedNames.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883130381
GPR[SPVAP]-1659883130381
GPR[EPVAP]-1659883131608
GPR[EPVS]-1659883131608
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
return ;
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883131609
GPR[SPVAP]-1659883131609
GPR[EPVAP]-1659883132849
GPR[EPVS]-1659883132849
========
Scope scope=t.getScope();
Scope.Var var=s.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883132850
GPR[SPVAP]-1659883132850
GPR[EPVAP]-1659883134083
GPR[EPVS]-1659883134083
========
Scope scope=t.getScope();
Preconditions.checkState(n.getType()==Token.NAME);
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883134084
GPR[SPVAP]-1659883134084
GPR[EPVAP]-1659883136725
GPR[SPVATF]-1659883136725
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883139045
GPR[EPVS]-1659883139045
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
continuations.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883139046
GPR[SPVAP]-1659883139046
GPR[EPVAP]-1659883140296
GPR[EPVS]-1659883140296
========
Scope scope=t.getScope();
Scope.Var var=fnScope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883140297
GPR[SPVAP]-1659883140297
GPR[EPVAP]-1659883141523
GPR[EPVS]-1659883141523
========
Scope scope=t.getScope();
Scope.Var var=jsScope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883141525
GPR[SPVAP]-1659883141525
GPR[EPVAP]-1659883142753
GPR[EPVS]-1659883142753
========
Scope scope=t.getScope();
Preconditions.checkState(NodeUtil.isName(parent));
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883142754
GPR[SPVAP]-1659883142754
GPR[EPVAP]-1659883145366
GPR[SPVATF]-1659883145366
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883147693
GPR[EPVS]-1659883147693
========
Scope scope=t.getScope();
if(!scope.isDeclared(parent.getString(),false)){
return ;
}
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883147694
GPR[SPVAP]-1659883147694
GPR[EPVAP]-1659883150319
GPR[SPVATF]-1659883150319
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883152641
GPR[EPVS]-1659883152641
========
Scope scope=t.getScope();
Preconditions.checkState(NodeUtil.isName(parent));
if(!scope.isDeclared(parent.getString(),false)){
return ;
}
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883152642
GPR[SPVAP]-1659883152642
GPR[EPVAP]-1659883155237
GPR[SPVATF]-1659883155237
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883157542
GPR[EPVS]-1659883157542
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.checkState(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883157544
GPR[SPVAP]-1659883157544
GPR[EPVAP]-1659883158776
GPR[EPVS]-1659883158776
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
n.setString(p.newName);
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883158777
GPR[SPVAP]-1659883158777
GPR[EPVAP]-1659883159988
GPR[EPVS]-1659883159988
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
changed=strictExternCheck||!p.newName.equals(n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883159989
GPR[SPVAP]-1659883159989
GPR[EPVAP]-1659883161233
GPR[EPVS]-1659883161233
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
n.setString(p.newName);
changed=strictExternCheck||!p.newName.equals(n.getString());

varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883161234
GPR[SPVAP]-1659883161234
GPR[EPVAP]-1659883162459
GPR[EPVS]-1659883162459
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
if(!p.newName.equals(n.getString())){
n.setString(p.newName);
compiler.reportCodeChange();
}
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883162460
GPR[SPVAP]-1659883162460
GPR[EPVAP]-1659883163688
GPR[EPVS]-1659883163688
========
Scope scope=t.getScope();
Scope.Var var=s.getVar(n.getString());
if(var!=null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883163690
GPR[SPVAP]-1659883163690
GPR[EPVAP]-1659883164909
GPR[EPVS]-1659883164909
========
Scope scope=t.getScope();
Scope.Var var=s.getVar(n.getString());
if(var==null){
scopeUpRefMap.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883164910
GPR[SPVAP]-1659883164910
GPR[EPVAP]-1659883166124
GPR[EPVS]-1659883166124
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var!=null){
scopeUpRefMap.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883166125
GPR[SPVAP]-1659883166125
GPR[EPVAP]-1659883167342
GPR[EPVS]-1659883167343
========
Scope scope=t.getScope();
Scope.Var var=s.getVar(n.getString());
if(var!=null){
scopeUpRefMap.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883167343
GPR[SPVAP]-1659883167343
GPR[EPVAP]-1659883168580
GPR[EPVS]-1659883168580
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
Preconditions.checkArgument(NodeUtil.isName(n)||NodeUtil.isGetProp(n));
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883168582
GPR[SPVAP]-1659883168582
GPR[EPVAP]-1659883171164
GPR[SPVATF]-1659883171164
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883173469
GPR[EPVS]-1659883173469
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(NodeUtil.isName(n)){
return true;
}
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883173471
GPR[SPVAP]-1659883173471
GPR[EPVAP]-1659883174690
GPR[EPVS]-1659883174690
========
if(scope.getRootNode().getFirstChild().getNext().getChildCount()==2){
new LiveVariablesAnalysis(t.getControlFlowGraph(),scope,compiler).markAllParametersEscaped();
}
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883174691
GPR[SPVAP]-1659883174691
GPR[EPVAP]-1659883175935
GPR[EPVS]-1659883175935
========
new LiveVariablesAnalysis(t.getControlFlowGraph(),scope,compiler).analyze();
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883175936
GPR[SPVAP]-1659883175936
GPR[EPVAP]-1659883177181
GPR[EPVS]-1659883177181
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==Token.ASSIGN){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883177183
GPR[SPVAP]-1659883177183
GPR[EPVAP]-1659883178419
GPR[EPVS]-1659883178419
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
assigns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883178421
GPR[SPVAP]-1659883178421
GPR[EPVAP]-1659883179630
GPR[EPVS]-1659883179630
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
worklist.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883179632
GPR[SPVAP]-1659883179632
GPR[EPVAP]-1659883180857
GPR[EPVS]-1659883180857
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
return ;
continuations.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883180859
GPR[SPVAP]-1659883180859
GPR[EPVAP]-1659883182097
GPR[EPVS]-1659883182097
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
replacement=p.newName;
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883182101
GPR[SPVAP]-1659883182101
GPR[EPVAP]-1659883183336
GPR[EPVS]-1659883183336
========
strictExternCheck=true;
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883183337
GPR[SPVAP]-1659883183337
GPR[EPVAP]-1659883185929
GPR[SPVATF]-1659883185929
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883188239
GPR[EPVS]-1659883188239
========
strictExternCheck=true;
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.checkState(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883188240
GPR[SPVAP]-1659883188240
GPR[EPVAP]-1659883189454
GPR[EPVS]-1659883189454
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var!=-1){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883189456
GPR[SPVAP]-1659883189456
GPR[EPVAP]-1659883190673
GPR[EPVS]-1659883190673
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
guards.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883190675
GPR[SPVAP]-1659883190675
GPR[EPVAP]-1659883191903
GPR[EPVS]-1659883191903
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
Lists.newArrayList().add(new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883191904
GPR[SPVAP]-1659883191904
GPR[EPVAP]-1659883193116
GPR[EPVS]-1659883193116
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(!(NodeUtil.isName(n)||NodeUtil.isGet(n)&&!NodeUtil.isGetProp(parent))){
return ;
}
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883193119
GPR[SPVAP]-1659883193119
GPR[EPVAP]-1659883195704
GPR[SPVATF]-1659883195704
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883198012
GPR[EPVS]-1659883198012
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(n.getType()==Token.GETPROP){
ConcreteType inferConcreteType(getTopScope(),n)=inferConcreteType(getTopScope(),lhs.getFirstChild());
scope=(ConcreteScope)type.getScope();
}else {
scope=getTopScope();
}
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883198016
GPR[SPVAP]-1659883198016
GPR[EPVAP]-1659883199107
GPR[EPVS]-1659883199107
========
if(inferConcreteType(getTopScope(),n).isNone()||type.isAll()){
break;
}
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883199108
GPR[SPVAP]-1659883199108
GPR[EPVAP]-1659883200333
GPR[EPVS]-1659883200333
========
Scope scope=t.getScope();
Scope.Var var=syntacticScope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883200334
GPR[SPVAP]-1659883200334
GPR[EPVAP]-1659883201556
GPR[EPVS]-1659883201556
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
li.referenced=true;
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883201557
GPR[SPVAP]-1659883201557
GPR[EPVAP]-1659883202791
GPR[EPVS]-1659883202791
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
Preconditions.checkState(n.getString().length()!=0);
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883202792
GPR[SPVAP]-1659883202792
GPR[EPVAP]-1659883205380
GPR[SPVATF]-1659883205381
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883207693
GPR[EPVS]-1659883207693
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
Preconditions.checkState(n.getString().length()!=0);
if(var!=null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883207695
GPR[SPVAP]-1659883207695
GPR[EPVAP]-1659883210293
GPR[SPVATF]-1659883210293
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883212627
GPR[EPVS]-1659883212627
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
Preconditions.checkState(n.getString().length()!=0);
if(var==null){
compiler.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883212628
GPR[SPVAP]-1659883212628
GPR[EPVAP]-1659883213864
GPR[EPVS]-1659883213864
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
Preconditions.checkState(n.getString().length()!=0);
if(var!=null){
compiler.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883213865
GPR[SPVAP]-1659883213865
GPR[EPVAP]-1659883215091
GPR[EPVS]-1659883215091
========
Scope scope=t.getScope();
Scope.Var var=parentScope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883215093
GPR[SPVAP]-1659883215093
GPR[EPVAP]-1659883216316
GPR[EPVS]-1659883216316
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(parent.getJSDocInfo()==null||parent.getType()!=Token.GETPROP||member.getFirstChild().getType()!=Token.THIS){
return ;
}
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883216319
GPR[SPVAP]-1659883216319
GPR[EPVAP]-1659883217554
GPR[EPVS]-1659883217554
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==Token.NAME){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883217555
GPR[SPVAP]-1659883217555
GPR[EPVAP]-1659883218784
GPR[EPVS]-1659883218784
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
Preconditions.checkState(n.hasOneChild());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883218785
GPR[SPVAP]-1659883218785
GPR[EPVAP]-1659883221368
GPR[SPVATF]-1659883221368
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883223727
GPR[EPVS]-1659883223727
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
parent.replaceChild(n,parent.cloneTree());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883223729
GPR[SPVAP]-1659883223729
GPR[EPVAP]-1659883226341
GPR[SPVATF]-1659883226341
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883228634
GPR[EPVS]-1659883228634
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
return parent.cloneTree();
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883228635
GPR[SPVAP]-1659883228635
GPR[EPVAP]-1659883229876
GPR[EPVS]-1659883229876
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
parent.replaceChild(n,parent.cloneTree());
return parent.cloneTree();

varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883229877
GPR[SPVAP]-1659883229877
GPR[EPVAP]-1659883231112
GPR[EPVS]-1659883231112
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var!=null){
parent.replaceChild(n,parent.cloneTree());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883231113
GPR[SPVAP]-1659883231113
GPR[EPVAP]-1659883233730
GPR[SPVATF]-1659883233730
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883236062
GPR[EPVS]-1659883236062
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.report(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883236063
GPR[SPVAP]-1659883236063
GPR[EPVAP]-1659883237330
GPR[EPVS]-1659883237330
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
builder.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883237332
GPR[SPVAP]-1659883237332
GPR[EPVAP]-1659883238562
GPR[EPVS]-1659883238562
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
Preconditions.checkState(parent.getType()==Token.OBJECTLIT);
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883238563
GPR[SPVAP]-1659883238563
GPR[EPVAP]-1659883241167
GPR[SPVATF]-1659883241167
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883243489
GPR[EPVS]-1659883243489
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==VariableLiveness.READ){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883243491
GPR[SPVAP]-1659883243491
GPR[EPVAP]-1659883244713
GPR[EPVS]-1659883244713
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
Preconditions.checkState(n.getParent().getType()==Token.ASSIGN);
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883244714
GPR[SPVAP]-1659883244714
GPR[EPVAP]-1659883247321
GPR[SPVATF]-1659883247321
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883249616
GPR[EPVS]-1659883249616
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(n.getType()!=Token.CALL){
return ;
}
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883249618
GPR[SPVAP]-1659883249618
GPR[EPVAP]-1659883252196
GPR[SPVATF]-1659883252196
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883254505
GPR[EPVS]-1659883254505
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var!=null){
provides.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883254507
GPR[SPVAP]-1659883254507
GPR[EPVAP]-1659883255748
GPR[EPVS]-1659883255748
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==Name.Type.OTHER){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883255751
GPR[SPVAP]-1659883255751
GPR[EPVAP]-1659883256968
GPR[EPVS]-1659883256968
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
b.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883256970
GPR[SPVAP]-1659883256970
GPR[EPVAP]-1659883258192
GPR[EPVS]-1659883258192
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==n.getDouble()){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883258193
GPR[SPVAP]-1659883258193
GPR[EPVAP]-1659883259437
GPR[EPVS]-1659883259437
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(n.getType()!=Token.RETURN){
return ;
}
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883259439
GPR[SPVAP]-1659883259439
GPR[EPVAP]-1659883262031
GPR[SPVATF]-1659883262031
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883264394
GPR[EPVS]-1659883264394
========
n.addChildToFront(newReportFunctionExitNode());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883264395
GPR[SPVAP]-1659883264395
GPR[EPVAP]-1659883265656
GPR[EPVS]-1659883265656
========
varsToDeclareInExterns.reportCodeChange();
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883265657
GPR[SPVAP]-1659883265657
GPR[EPVAP]-1659883266882
GPR[EPVS]-1659883266882
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(n.getType()!=Token.RETURN){
return ;
}
if(var!=null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883266883
GPR[SPVAP]-1659883266883
GPR[EPVAP]-1659883269492
GPR[SPVATF]-1659883269492
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883271830
GPR[EPVS]-1659883271830
========
traverseNode(parent,null,scope);
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883271832
GPR[SPVAP]-1659883271832
GPR[EPVAP]-1659883273069
GPR[EPVS]-1659883273069
========
if(strictExternCheck){
collectMaybeUnreferencedVars(scope);
}
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883273070
GPR[SPVAP]-1659883273070
GPR[EPVAP]-1659883274736
GPR[EPVS]-1659883274736
========
interpretAssigns();
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883274740
GPR[SPVAP]-1659883274740
GPR[EPVAP]-1659883276073
GPR[EPVS]-1659883276073
========
removeUnreferencedVars();
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883276075
GPR[SPVAP]-1659883276075
GPR[EPVAP]-1659883277336
GPR[EPVS]-1659883277336
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(n.getType()!=Token.FUNCTION){
return ;
}
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883277338
GPR[SPVAP]-1659883277338
GPR[EPVAP]-1659883280018
GPR[SPVATF]-1659883280018
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883282352
GPR[EPVS]-1659883282352
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(CATCH==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883282354
GPR[SPVAP]-1659883282354
GPR[EPVAP]-1659883283622
GPR[EPVS]-1659883283622
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
escaped.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883283623
GPR[SPVAP]-1659883283623
GPR[EPVAP]-1659883284850
GPR[EPVS]-1659883284850
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
objSkipType.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883284852
GPR[SPVAP]-1659883284852
GPR[EPVAP]-1659883286080
GPR[EPVS]-1659883286080
========
n.removeChild(parent);
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883286081
GPR[SPVAP]-1659883286081
GPR[EPVAP]-1659883288658
GPR[SPVATF]-1659883288658
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883290997
GPR[EPVS]-1659883290997
========
compiler.reportCodeChange();
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883290998
GPR[SPVAP]-1659883290998
GPR[EPVAP]-1659883293599
GPR[SPVATF]-1659883293599
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883295932
GPR[EPVS]-1659883295932
========
n.removeChild(parent);
compiler.reportCodeChange();
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883295933
GPR[SPVAP]-1659883295933
GPR[EPVAP]-1659883298549
GPR[SPVATF]-1659883298549
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883300884
GPR[EPVS]-1659883300884
========
Scope scope=t.getScope();
Scope.Var var=jsScope.getVar(n.getString());
if(var==null||var.scope!=scope){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883300886
GPR[SPVAP]-1659883300886
GPR[EPVAP]-1659883302120
GPR[EPVS]-1659883302120
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var!=null){
builder.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883302122
GPR[SPVAP]-1659883302122
GPR[EPVAP]-1659883303339
GPR[EPVS]-1659883303339
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
scope=traverseChildren(n,scope);
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883303341
GPR[SPVAP]-1659883303341
GPR[EPVAP]-1659883304584
GPR[EPVS]-1659883304584
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==TernaryValue.UNKNOWN){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883304586
GPR[SPVAP]-1659883304586
GPR[EPVAP]-1659883305797
GPR[EPVS]-1659883305797
========
n.detachChildren();
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883305797
GPR[SPVAP]-1659883305797
GPR[EPVAP]-1659883308401
GPR[SPVATF]-1659883308401
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883310710
GPR[EPVS]-1659883310710
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==VariableLiveness.MAYBE_LIVE){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883310712
GPR[SPVAP]-1659883310712
GPR[EPVAP]-1659883311976
GPR[EPVS]-1659883311976
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==Token.FUNCTION){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883311978
GPR[SPVAP]-1659883311978
GPR[EPVAP]-1659883313236
GPR[EPVS]-1659883313236
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(SCRIPT==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883313237
GPR[SPVAP]-1659883313237
GPR[EPVAP]-1659883314456
GPR[EPVS]-1659883314456
========
Preconditions.checkState(n.hasOneChild());
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883314457
GPR[SPVAP]-1659883314457
GPR[EPVAP]-1659883317069
GPR[SPVATF]-1659883317069
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883319381
GPR[EPVS]-1659883319381
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==Token.SCRIPT){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883319383
GPR[SPVAP]-1659883319383
GPR[EPVAP]-1659883320636
GPR[EPVS]-1659883320636
========
parent=n;
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883320637
GPR[SPVAP]-1659883320637
GPR[EPVAP]-1659883323254
GPR[SPVATF]-1659883323254
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883325561
GPR[EPVS]-1659883325561
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var!=TernaryValue.UNKNOWN){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883325562
GPR[SPVAP]-1659883325562
GPR[EPVAP]-1659883326796
GPR[EPVS]-1659883326796
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(n.getFirstChild()==null||!NodeUtil.isGetProp(callTarget)){
return n;
}
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883326798
GPR[SPVAP]-1659883326798
GPR[EPVAP]-1659883328029
GPR[EPVS]-1659883328029
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
Preconditions.checkState(n.getType()==Token.TRY);
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883328030
GPR[SPVAP]-1659883328030
GPR[EPVAP]-1659883330632
GPR[SPVATF]-1659883330632
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883332988
GPR[EPVS]-1659883332988
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==ControlFlowAnalysis.computeFollowNode(n)){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883332989
GPR[SPVAP]-1659883332989
GPR[EPVAP]-1659883334250
GPR[EPVS]-1659883334250
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
parent=skipFinallyNodes(follow);
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883334251
GPR[SPVAP]-1659883334251
GPR[EPVAP]-1659883335482
GPR[EPVS]-1659883335482
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
NodeUtil.copyNameAnnotations(n.getLastChild(),parent);
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883335484
GPR[SPVAP]-1659883335484
GPR[EPVAP]-1659883338120
GPR[SPVATF]-1659883338120
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883340457
GPR[EPVS]-1659883340457
========
parent.replaceChild(n,parent);
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883340458
GPR[SPVAP]-1659883340458
GPR[EPVAP]-1659883343067
GPR[SPVATF]-1659883343067
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883345369
GPR[EPVS]-1659883345369
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
NodeUtil.copyNameAnnotations(n.getLastChild(),parent);
if(var!=null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883345370
GPR[SPVAP]-1659883345370
GPR[EPVAP]-1659883347970
GPR[SPVATF]-1659883347970
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883350327
GPR[EPVS]-1659883350327
========
parent.replaceChild(n,parent);
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var!=null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883350328
GPR[SPVAP]-1659883350328
GPR[EPVAP]-1659883352945
GPR[SPVATF]-1659883352945
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883355262
GPR[EPVS]-1659883355262
========
compiler.reportCodeChange();
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var!=null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883355263
GPR[SPVAP]-1659883355263
GPR[EPVAP]-1659883357902
GPR[SPVATF]-1659883357902
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883360249
GPR[EPVS]-1659883360249
========
parent.replaceChild(n,parent);
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
NodeUtil.copyNameAnnotations(n.getLastChild(),parent);
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883360250
GPR[SPVAP]-1659883360250
GPR[EPVAP]-1659883362878
GPR[SPVATF]-1659883362878
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883365209
GPR[EPVS]-1659883365209
========
compiler.reportCodeChange();
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
NodeUtil.copyNameAnnotations(n.getLastChild(),parent);
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883365210
GPR[SPVAP]-1659883365210
GPR[EPVAP]-1659883367897
GPR[SPVATF]-1659883367897
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883370249
GPR[EPVS]-1659883370249
========
parent.replaceChild(n,parent);
compiler.reportCodeChange();
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883370250
GPR[SPVAP]-1659883370251
GPR[EPVAP]-1659883372846
GPR[SPVATF]-1659883372847
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883375154
GPR[EPVS]-1659883375154
========
parent.replaceChild(n,parent);
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
NodeUtil.copyNameAnnotations(n.getLastChild(),parent);
if(var!=null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883375155
GPR[SPVAP]-1659883375155
GPR[EPVAP]-1659883377766
GPR[SPVATF]-1659883377766
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883380089
GPR[EPVS]-1659883380089
========
compiler.reportCodeChange();
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
NodeUtil.copyNameAnnotations(n.getLastChild(),parent);
if(var!=null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883380090
GPR[SPVAP]-1659883380090
GPR[EPVAP]-1659883382675
GPR[SPVATF]-1659883382675
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883385009
GPR[EPVS]-1659883385009
========
parent.replaceChild(n,parent);
compiler.reportCodeChange();
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var!=null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883385010
GPR[SPVAP]-1659883385010
GPR[EPVAP]-1659883387608
GPR[SPVATF]-1659883387608
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883389928
GPR[EPVS]-1659883389928
========
parent.replaceChild(n,parent);
compiler.reportCodeChange();
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
NodeUtil.copyNameAnnotations(n.getLastChild(),parent);
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883389929
GPR[SPVAP]-1659883389929
GPR[EPVAP]-1659883392581
GPR[SPVATF]-1659883392581
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883394958
GPR[EPVS]-1659883394958
========
parent.replaceChild(n,parent);
compiler.reportCodeChange();
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
NodeUtil.copyNameAnnotations(n.getLastChild(),parent);
if(var!=null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883394959
GPR[SPVAP]-1659883394959
GPR[EPVAP]-1659883397578
GPR[SPVATF]-1659883397578
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883399908
GPR[EPVS]-1659883399908
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(BLOCK==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883399910
GPR[SPVAP]-1659883399910
GPR[EPVAP]-1659883401140
GPR[EPVS]-1659883401140
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==computeFollowing(n)){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883401142
GPR[SPVAP]-1659883401142
GPR[EPVAP]-1659883402387
GPR[EPVS]-1659883402387
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
Preconditions.checkArgument(getCfg().hasNode(parent));
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883402389
GPR[SPVAP]-1659883402389
GPR[EPVAP]-1659883403625
GPR[EPVS]-1659883403625
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
codingConvention.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883403627
GPR[SPVAP]-1659883403627
GPR[EPVAP]-1659883404851
GPR[EPVS]-1659883404851
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
assignableDefines.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883404853
GPR[SPVAP]-1659883404854
GPR[EPVAP]-1659883406113
GPR[EPVS]-1659883406113
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
reporter.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883406114
GPR[SPVAP]-1659883406114
GPR[EPVAP]-1659883407347
GPR[EPVS]-1659883407347
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(FUNCTION==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883407348
GPR[SPVAP]-1659883407348
GPR[EPVAP]-1659883408590
GPR[EPVS]-1659883408590
========
Scope scope=t.getScope();
Scope.Var var=scopeToDeclareIn.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883408592
GPR[SPVAP]-1659883408592
GPR[EPVAP]-1659883409831
GPR[EPVS]-1659883409831
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==null){
varsToDeclareInExterns.pushContainingFunction(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883409833
GPR[SPVAP]-1659883409833
GPR[EPVAP]-1659883411056
GPR[EPVS]-1659883411056
========
Scope scope=t.getScope();
Scope.Var var=scope.getVar(n.getString());
if(var==CanInlineResult.NO){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883411058
GPR[SPVAP]-1659883411058
GPR[EPVAP]-1659883412287
GPR[EPVS]-1659883412287
GPR[ESUN]-1659883412288
GPR[SSUN]-1659883412288
com.google.javascript.jscomp.VarCheck,251
UNKNOWN ASTNode type : catch (DataFlowAnalysis.MaxIterationsExceededException e) {
  compiler.report(t.makeError(n,DATAFLOW_ERROR));
}

UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  compiler.report(t.makeError(n,INVALID_STYLE_ERROR,styleStr));
  return;
}

========
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883415190
GPR[SPVAP]-1659883415190
GPR[EPVAP]-1659883422200
GPR[SPVATF]-1659883422200
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883424569
GPR[EPVS]-1659883424569
========
if(var!=null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883424571
GPR[SPVAP]-1659883424571
GPR[EPVAP]-1659883427160
GPR[SPVATF]-1659883427160
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883429533
GPR[EPVS]-1659883429533
========
if(var==null){
globalNameNodes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883429534
GPR[SPVAP]-1659883429534
GPR[EPVAP]-1659883430808
GPR[EPVS]-1659883430808
========
if(options.customPasses!=null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883430810
GPR[SPVAP]-1659883430810
GPR[EPVAP]-1659883432042
GPR[EPVS]-1659883432042
========
if(options.customPasses==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883432043
GPR[SPVAP]-1659883432043
GPR[EPVAP]-1659883433261
GPR[EPVS]-1659883433261
========
if(customPasses==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883433262
GPR[SPVAP]-1659883433262
GPR[EPVAP]-1659883434472
GPR[EPVS]-1659883434472
========
if(var==null){
passes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883434473
GPR[SPVAP]-1659883434473
GPR[EPVAP]-1659883435702
GPR[EPVS]-1659883435702
========
if(var==null||var.isLocal()||var.isExtern()){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883435703
GPR[SPVAP]-1659883435703
GPR[EPVAP]-1659883438468
GPR[SPVATF]-1659883438468
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883440791
GPR[EPVS]-1659883440791
========
if(var==null){
workSet.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883440792
GPR[SPVAP]-1659883440793
GPR[EPVAP]-1659883442038
GPR[EPVS]-1659883442038
========
if(var==Token.GET){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883442039
GPR[SPVAP]-1659883442039
GPR[EPVAP]-1659883443301
GPR[EPVS]-1659883443301
========
if(var==null){
add("get ");
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883443302
GPR[SPVAP]-1659883443302
GPR[EPVAP]-1659883444524
GPR[EPVS]-1659883444524
========
if(var==null){
add("set ");
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883444525
GPR[SPVAP]-1659883444525
GPR[EPVAP]-1659883445735
GPR[EPVS]-1659883445735
========
if(options.syntheticBlockStartMarker!=null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883445736
GPR[SPVAP]-1659883445736
GPR[EPVAP]-1659883446975
GPR[EPVS]-1659883446975
========
if(options.syntheticBlockStartMarker==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883446976
GPR[SPVAP]-1659883446976
GPR[EPVAP]-1659883448209
GPR[EPVS]-1659883448209
========
if(syntheticBlockStartMarker==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883448210
GPR[SPVAP]-1659883448210
GPR[EPVAP]-1659883449447
GPR[EPVS]-1659883449447
========
if(var==null){
checks.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883449449
GPR[SPVAP]-1659883449449
GPR[EPVAP]-1659883450688
GPR[EPVS]-1659883450688
========
if(options.anonymousFunctionNaming==AnonymousFunctionNamingPolicy.MAPPED){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883450690
GPR[SPVAP]-1659883450690
GPR[EPVAP]-1659883451908
GPR[EPVS]-1659883451908
========
if(options.anonymousFunctionNaming==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883451909
GPR[SPVAP]-1659883451909
GPR[EPVAP]-1659883453140
GPR[EPVS]-1659883453140
========
if(var==AnonymousFunctionNamingPolicy.MAPPED){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883453141
GPR[SPVAP]-1659883453141
GPR[EPVAP]-1659883454411
GPR[EPVS]-1659883454411
========
if(anonymousFunctionNaming==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883454412
GPR[SPVAP]-1659883454412
GPR[EPVAP]-1659883455640
GPR[EPVS]-1659883455640
========
if(options.propertyRenaming!=PropertyRenamingPolicy.OFF){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883455642
GPR[SPVAP]-1659883455642
GPR[EPVAP]-1659883456879
GPR[EPVS]-1659883456879
========
if(options.propertyRenaming==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883456880
GPR[SPVAP]-1659883456880
GPR[EPVAP]-1659883458108
GPR[EPVS]-1659883458108
========
if(var==PropertyRenamingPolicy.OFF){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883458110
GPR[SPVAP]-1659883458110
GPR[EPVAP]-1659883459337
GPR[EPVS]-1659883459337
========
if(propertyRenaming==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883459338
GPR[SPVAP]-1659883459338
GPR[EPVAP]-1659883460568
GPR[EPVS]-1659883460568
========
if(var!=null){
passes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883460569
GPR[SPVAP]-1659883460569
GPR[EPVAP]-1659883461796
GPR[EPVS]-1659883461796
========
if(options.instrumentationTemplate!=null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883461797
GPR[SPVAP]-1659883461797
GPR[EPVAP]-1659883463202
GPR[EPVS]-1659883463202
========
if(options.instrumentationTemplate==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883463206
GPR[SPVAP]-1659883463206
GPR[EPVAP]-1659883464607
GPR[EPVS]-1659883464607
========
if(instrumentationTemplate==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883464608
GPR[SPVAP]-1659883464608
GPR[EPVAP]-1659883465871
GPR[EPVS]-1659883465871
========
if(options.variableRenaming!=VariableRenamingPolicy.ALL){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883465873
GPR[SPVAP]-1659883465873
GPR[EPVAP]-1659883467117
GPR[EPVS]-1659883467117
========
if(options.variableRenaming==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883467118
GPR[SPVAP]-1659883467118
GPR[EPVAP]-1659883468371
GPR[EPVS]-1659883468371
========
if(var==VariableRenamingPolicy.ALL){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883468372
GPR[SPVAP]-1659883468372
GPR[EPVAP]-1659883469591
GPR[EPVS]-1659883469591
========
if(variableRenaming==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883469592
GPR[SPVAP]-1659883469592
GPR[EPVAP]-1659883470816
GPR[EPVS]-1659883470816
========
if(options.variableRenaming!=VariableRenamingPolicy.OFF){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883470817
GPR[SPVAP]-1659883470817
GPR[EPVAP]-1659883472045
GPR[EPVS]-1659883472045
========
if(var==VariableRenamingPolicy.OFF){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883472047
GPR[SPVAP]-1659883472047
GPR[EPVAP]-1659883473264
GPR[EPVS]-1659883473264
========
if(options.variableRenaming!=null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883473266
GPR[SPVAP]-1659883473266
GPR[EPVAP]-1659883474492
GPR[EPVS]-1659883474492
========
if(variableRenaming!=null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883474493
GPR[SPVAP]-1659883474493
GPR[EPVAP]-1659883475726
GPR[EPVS]-1659883475726
========
if(options.variableRenaming==null){
passes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883475727
GPR[SPVAP]-1659883475727
GPR[EPVAP]-1659883476949
GPR[EPVS]-1659883476949
========
if(variableRenaming==null){
passes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883476950
GPR[SPVAP]-1659883476950
GPR[EPVAP]-1659883478181
GPR[EPVS]-1659883478181
========
if(options.variableRenaming!=null){
passes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883478182
GPR[SPVAP]-1659883478182
GPR[EPVAP]-1659883479433
GPR[EPVS]-1659883479433
========
if(variableRenaming!=null){
passes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883479434
GPR[SPVAP]-1659883479434
GPR[EPVAP]-1659883480673
GPR[EPVS]-1659883480673
========
if(options.anonymousFunctionNaming==AnonymousFunctionNamingPolicy.UNMAPPED){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883480674
GPR[SPVAP]-1659883480674
GPR[EPVAP]-1659883481896
GPR[EPVS]-1659883481896
========
if(var==AnonymousFunctionNamingPolicy.UNMAPPED){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883481897
GPR[SPVAP]-1659883481897
GPR[EPVAP]-1659883483140
GPR[EPVS]-1659883483140
========
if(options.anonymousFunctionNaming==null){
passes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883483141
GPR[SPVAP]-1659883483141
GPR[EPVAP]-1659883484372
GPR[EPVS]-1659883484372
========
if(anonymousFunctionNaming==null){
passes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883484373
GPR[SPVAP]-1659883484373
GPR[EPVAP]-1659883485590
GPR[EPVS]-1659883485590
========
if(preserveFunctionExpressionNames==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883485591
GPR[SPVAP]-1659883485591
GPR[EPVAP]-1659883486811
GPR[EPVS]-1659883486811
========
if(var==null){
reservedNames.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883486812
GPR[SPVAP]-1659883486812
GPR[EPVAP]-1659883488036
GPR[EPVS]-1659883488036
========
if(var==null){
return ;
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883488037
GPR[SPVAP]-1659883488037
GPR[EPVAP]-1659883489292
GPR[EPVS]-1659883489292
========
if(t.inGlobalScope()){
return ;
}
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883489294
GPR[SPVAP]-1659883489294
GPR[EPVAP]-1659883491952
GPR[SPVATF]-1659883491952
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883494292
GPR[EPVS]-1659883494292
========
if(var==null){
var.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883494294
GPR[SPVAP]-1659883494294
GPR[EPVAP]-1659883495520
GPR[EPVS]-1659883495520
========
if(var==null){
guards.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883495521
GPR[SPVAP]-1659883495521
GPR[EPVAP]-1659883496742
GPR[EPVS]-1659883496742
========
if(NAME==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883496743
GPR[SPVAP]-1659883496743
GPR[EPVAP]-1659883497961
GPR[EPVS]-1659883497961
========
if(customPasses!=null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883497962
GPR[SPVAP]-1659883497962
GPR[EPVAP]-1659883499189
GPR[EPVS]-1659883499189
========
if(options.customPasses!=null){
passes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883499190
GPR[SPVAP]-1659883499190
GPR[EPVAP]-1659883500419
GPR[EPVS]-1659883500419
========
if(options.customPasses==null){
passes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883500420
GPR[SPVAP]-1659883500420
GPR[EPVAP]-1659883501656
GPR[EPVS]-1659883501656
========
if(customPasses==null){
passes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883501657
GPR[SPVAP]-1659883501657
GPR[EPVAP]-1659883502887
GPR[EPVS]-1659883502887
========
if(customPasses!=null){
passes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883502889
GPR[SPVAP]-1659883502889
GPR[EPVAP]-1659883504109
GPR[EPVS]-1659883504109
========
if(var==JsDocToken.STRING){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883504110
GPR[SPVAP]-1659883504110
GPR[EPVAP]-1659883505342
GPR[EPVS]-1659883505342
========
if(var==null){
edgeList.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883505343
GPR[SPVAP]-1659883505343
GPR[EPVAP]-1659883506581
GPR[EPVS]-1659883506581
========
if(var==null){
result.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883506582
GPR[SPVAP]-1659883506582
GPR[EPVAP]-1659883507821
GPR[EPVS]-1659883507821
========
if(var==null){
edges.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883507822
GPR[SPVAP]-1659883507822
GPR[EPVAP]-1659883509052
GPR[EPVS]-1659883509052
========
if(var==parent){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883509053
GPR[SPVAP]-1659883509053
GPR[EPVAP]-1659883510278
GPR[EPVS]-1659883510278
========
if(var==null){
externalNames.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883510280
GPR[SPVAP]-1659883510280
GPR[EPVAP]-1659883511519
GPR[EPVS]-1659883511519
========
if(var==null){
jsName.externallyDefined=true;
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883511520
GPR[SPVAP]-1659883511520
GPR[EPVAP]-1659883512749
GPR[EPVS]-1659883512749
========
if(var==null){
allInstantiatedTypes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883512750
GPR[SPVAP]-1659883512750
GPR[EPVAP]-1659883513966
GPR[EPVS]-1659883513966
========
if(pseudoNameMap==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883513968
GPR[SPVAP]-1659883513968
GPR[EPVAP]-1659883515196
GPR[EPVS]-1659883515196
========
if(var==null){
names.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883515197
GPR[SPVAP]-1659883515197
GPR[EPVAP]-1659883516450
GPR[EPVS]-1659883516450
========
if(smartNameRemoval==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883516451
GPR[SPVAP]-1659883516451
GPR[EPVAP]-1659883517672
GPR[EPVS]-1659883517673
========
if(var==null){
modulesByDepth.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883517674
GPR[SPVAP]-1659883517674
GPR[EPVAP]-1659883518893
GPR[EPVS]-1659883518893
========
if(var==null){
renamer.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883518895
GPR[SPVAP]-1659883518895
GPR[EPVAP]-1659883520120
GPR[EPVS]-1659883520120
========
if(var!=parent){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883520122
GPR[SPVAP]-1659883520122
GPR[EPVAP]-1659883521380
GPR[EPVS]-1659883521380
========
if(var!=null){
result.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883521381
GPR[SPVAP]-1659883521381
GPR[EPVAP]-1659883522627
GPR[EPVS]-1659883522627
========
if(var==parent){
result.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883522628
GPR[SPVAP]-1659883522628
GPR[EPVAP]-1659883523869
GPR[EPVS]-1659883523869
========
if(var!=parent){
result.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883523870
GPR[SPVAP]-1659883523870
GPR[EPVAP]-1659883525162
GPR[EPVS]-1659883525162
========
if(var==null){
externPropertyNames.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883525164
GPR[SPVAP]-1659883525164
GPR[EPVAP]-1659883526383
GPR[EPVS]-1659883526383
========
if(var==null){
varsToDeclareInExterns.checkState(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883526385
GPR[SPVAP]-1659883526385
GPR[EPVAP]-1659883527603
GPR[EPVS]-1659883527603
========
if(CALL==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883527604
GPR[SPVAP]-1659883527604
GPR[EPVAP]-1659883528840
GPR[EPVS]-1659883528840
========
if(compiler==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883528842
GPR[SPVAP]-1659883528842
GPR[EPVAP]-1659883531507
GPR[SPVATF]-1659883531507
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883533848
GPR[EPVS]-1659883533848
========
if(var==null){
assignsByVar.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883533849
GPR[SPVAP]-1659883533849
GPR[EPVAP]-1659883535096
GPR[EPVS]-1659883535096
========
if(var==null){
if(isRemovableVar(var)&&!maybeAssign.mayHaveSecondarySideEffects){
return ;
}
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883535097
GPR[SPVAP]-1659883535097
GPR[EPVAP]-1659883536322
GPR[EPVS]-1659883536322
========
var=scope.getVar(maybeAssign.nameNode.getString());
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883536323
GPR[SPVAP]-1659883536323
GPR[EPVAP]-1659883537536
GPR[EPVS]-1659883537536
========
if(var==null){
compiler.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883537537
GPR[SPVAP]-1659883537537
GPR[EPVAP]-1659883538749
GPR[EPVS]-1659883538749
========
if(var==null){
varsToDeclareInExterns.report(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883538750
GPR[SPVAP]-1659883538750
GPR[EPVAP]-1659883539976
GPR[EPVS]-1659883539976
========
if(ASSIGN==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883539978
GPR[SPVAP]-1659883539978
GPR[EPVAP]-1659883541215
GPR[EPVS]-1659883541215
========
if(var==null){
exceptionHandler.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883541217
GPR[SPVAP]-1659883541217
GPR[EPVAP]-1659883542443
GPR[EPVS]-1659883542443
========
if(var==null){
return true;
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883542443
GPR[SPVAP]-1659883542443
GPR[EPVAP]-1659883543683
GPR[EPVS]-1659883543683
========
if(var==null){
globals.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883543684
GPR[SPVAP]-1659883543684
GPR[EPVAP]-1659883544908
GPR[EPVS]-1659883544908
========
addExpr(n,1);
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883544909
GPR[SPVAP]-1659883544909
GPR[EPVAP]-1659883546136
GPR[EPVS]-1659883546136
========
if(var!=null){
compiler.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883546138
GPR[SPVAP]-1659883546138
GPR[EPVAP]-1659883547364
GPR[EPVS]-1659883547364
========
if(inferConcreteType(getTopScope(),n).isNone()||type.isAll()){
break;
}
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883547366
GPR[SPVAP]-1659883547366
GPR[EPVAP]-1659883548578
GPR[EPVS]-1659883548578
========
if(CATCH==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883548579
GPR[SPVAP]-1659883548579
GPR[EPVAP]-1659883549813
GPR[EPVS]-1659883549813
========
if(var==null){
escaped.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883549814
GPR[SPVAP]-1659883549814
GPR[EPVAP]-1659883551030
GPR[EPVS]-1659883551030
========
if(REACHABLE==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883551031
GPR[SPVAP]-1659883551031
GPR[EPVAP]-1659883552266
GPR[EPVS]-1659883552266
========
tryRemoveUnconditionalBranching(n);
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883552268
GPR[SPVAP]-1659883552268
GPR[EPVAP]-1659883553485
GPR[EPVS]-1659883553485
========
if(var==Token.FUNCTION){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883553487
GPR[SPVAP]-1659883553487
GPR[EPVAP]-1659883554730
GPR[EPVS]-1659883554730
========
if(var==null){
return ;
compiler.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883554732
GPR[SPVAP]-1659883554732
GPR[EPVAP]-1659883555969
GPR[EPVS]-1659883555969
========
if(var==null){
continuations.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883555971
GPR[SPVAP]-1659883555971
GPR[EPVAP]-1659883557185
GPR[EPVS]-1659883557185
========
if(var==ResolveMode.LAZY_EXPRESSIONS){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883557186
GPR[SPVAP]-1659883557186
GPR[EPVAP]-1659883558402
GPR[EPVS]-1659883558402
========
if(FOR==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883558403
GPR[SPVAP]-1659883558403
GPR[EPVAP]-1659883559614
GPR[EPVS]-1659883559615
========
if(var==null||var.scope!=scope){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883559616
GPR[SPVAP]-1659883559616
GPR[EPVAP]-1659883562197
GPR[SPVATF]-1659883562197
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883564525
GPR[EPVS]-1659883564525
========
if(var==null){
scopeUpRefMap.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883564527
GPR[SPVAP]-1659883564527
GPR[EPVAP]-1659883565767
GPR[EPVS]-1659883565767
========
varsToDeclareInExterns.put(var,n);
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883565768
GPR[SPVAP]-1659883565768
GPR[EPVAP]-1659883566976
GPR[EPVS]-1659883566976
========
if(var==null){
builder.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883566978
GPR[SPVAP]-1659883566978
GPR[EPVAP]-1659883568237
GPR[EPVS]-1659883568237
========
if(var==null){
varsToDeclareInExterns.append(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883568238
GPR[SPVAP]-1659883568238
GPR[EPVAP]-1659883569459
GPR[EPVS]-1659883569459
========
if(sourceMapOutputPath==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883569461
GPR[SPVAP]-1659883569461
GPR[EPVAP]-1659883570674
GPR[EPVS]-1659883570674
========
n.addChildToBack(n);
if(var==null){
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883570675
GPR[SPVAP]-1659883570675
GPR[EPVAP]-1659883573267
GPR[SPVATF]-1659883573267
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883575572
GPR[EPVS]-1659883575572
========
if(var==null){
iArgumentType=getJSType(parent).restrictByNotNullOrUndefined();
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883575574
GPR[SPVAP]-1659883575574
GPR[EPVAP]-1659883576845
GPR[EPVS]-1659883576845
========
if(var==null){
compiler.report(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883576846
GPR[SPVAP]-1659883576846
GPR[EPVAP]-1659883578077
GPR[EPVS]-1659883578077
========
if(var==null){
return ;
continuations.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883578079
GPR[SPVAP]-1659883578079
GPR[EPVAP]-1659883579294
GPR[EPVS]-1659883579294
========
if(var!=null){
var.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883579297
GPR[SPVAP]-1659883579297
GPR[EPVAP]-1659883580542
GPR[EPVS]-1659883580542
GPR[ESUN]-1659883580542
GPR[SSUN]-1659883580542
com.google.javascript.jscomp.VarCheck,252
GPR[ESUN]-1659883581027
GPR[SSUN]-1659883581027
com.google.javascript.jscomp.VarCheck,241
UNKNOWN ASTNode type : catch (MalformedException e) {
  compiler.report(JSError.make(message.getSourceName(),e.getNode(),MESSAGE_TREE_MALFORMED,e.getMessage()));
  newValue=msgNode;
}

UNKNOWN ASTNode type : catch (MalformedException e) {
  compiler.report(JSError.make(message.getSourceName(),e.getNode(),MESSAGE_TREE_MALFORMED,e.getMessage()));
  newValue=msgNode;
}

UNKNOWN ASTNode type : catch (ParseException e) {
  errorManager.report(e.isFatal() ? CheckLevel.ERROR : CheckLevel.WARNING,JSError.make(filePath,lineNum,0,e.isFatal() ? PARSE_ERROR : PARSE_WARNING,e.getMessage(),line));
  parseSucceeded=parseSucceeded && !e.isFatal();
}

UNKNOWN ASTNode type : catch (ParseException e) {
  errorManager.report(e.isFatal() ? CheckLevel.ERROR : CheckLevel.WARNING,JSError.make(filePath,lineNum,0,e.isFatal() ? PARSE_ERROR : PARSE_WARNING,e.getMessage(),line));
  parseSucceeded=parseSucceeded && !e.isFatal();
}

UNKNOWN ASTNode type : catch (IOException e) {
  errorManager.report(CheckLevel.ERROR,JSError.make(filePath,0,0,PARSE_ERROR,"Error reading file: " + filePath));
  parseSucceeded=false;
}

UNKNOWN ASTNode type : catch (IOException e) {
  errorManager.report(CheckLevel.ERROR,JSError.make(filePath,0,0,PARSE_ERROR,"Error reading file: " + filePath));
  parseSucceeded=false;
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException ex) {
  error(NEGATING_A_NON_NUMBER_ERROR,left);
  return n;
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException ex) {
  error(NEGATING_A_NON_NUMBER_ERROR,left);
  return n;
}

UNKNOWN ASTNode type : catch (Exception e) {
  Result r=new Result(true);
  r.exceptions.add(e);
  return r;
}

UNKNOWN ASTNode type : catch (Exception e) {
  Result r=new Result(true);
  r.exceptions.add(e);
  return r;
}

UNKNOWN ASTNode type : catch (Exception e) {
  Result r=new Result(true);
  r.exceptions.add(e);
  return r;
}

UNKNOWN ASTNode type : catch (Exception e) {
  Result r=new Result(true);
  r.exceptions.add(e);
  return r;
}

UNKNOWN ASTNode type : catch (JSModuleGraph.ModuleDependenceException e) {
  report(JSError.make(MODULE_DEPENDENCY_ERROR,e.getModule().getName(),e.getDependentModule().getName()));
  return;
}

UNKNOWN ASTNode type : catch (CircularDependencyException e) {
  report(JSError.make(JSModule.CIRCULAR_DEPENDENCY_ERROR,e.getMessage()));
  return null;
}

UNKNOWN ASTNode type : catch (MissingProvideException e) {
  report(JSError.make(MISSING_ENTRY_ERROR,e.getMessage()));
  return null;
}

UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  compiler.report(t.makeError(n,INVALID_STYLE_ERROR,styleStr));
  return;
}

UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  compiler.report(t.makeError(n,INVALID_STYLE_ERROR,styleStr));
  return;
}

UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  compiler.report(t.makeError(n,INVALID_STYLE_ERROR,styleStr));
  return;
}

UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  compiler.report(t.makeError(n,INVALID_STYLE_ERROR,styleStr));
  return;
}

UNKNOWN ASTNode type : catch (MalformedException ex) {
  compiler.report(traversal.makeError(ex.getNode(),MESSAGE_TREE_MALFORMED,ex.getMessage()));
  return;
}

UNKNOWN ASTNode type : catch (MalformedException ex) {
  compiler.report(traversal.makeError(ex.getNode(),MESSAGE_TREE_MALFORMED,ex.getMessage()));
  return;
}

========
if(NAME==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883583942
GPR[SPVAP]-1659883583942
GPR[EPVAP]-1659883586955
GPR[EPVS]-1659883586955
========
if(var!=null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883586957
GPR[SPVAP]-1659883586957
GPR[EPVAP]-1659883592813
GPR[SPVATF]-1659883592813
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883595146
GPR[EPVS]-1659883595146
========
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
globalNameNodes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883595147
GPR[SPVAP]-1659883595147
GPR[EPVAP]-1659883596408
GPR[EPVS]-1659883596408
========
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
var.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883596409
GPR[SPVAP]-1659883596409
GPR[EPVAP]-1659883597639
GPR[EPVS]-1659883597639
========
if(var==null){
t.report(n,NAME_REFERENCE_IN_EXTERNS_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883597640
GPR[SPVAP]-1659883597640
GPR[EPVAP]-1659883600294
GPR[SPVATF]-1659883600294
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883602627
GPR[EPVS]-1659883602627
========
if(var==null){
add(")");
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883602628
GPR[SPVAP]-1659883602628
GPR[EPVAP]-1659883603872
GPR[EPVS]-1659883603872
========
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
compiler.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883603874
GPR[SPVAP]-1659883603874
GPR[EPVAP]-1659883605089
GPR[EPVS]-1659883605089
========
if(options.syntheticBlockStartMarker!=null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883605092
GPR[SPVAP]-1659883605092
GPR[EPVAP]-1659883606314
GPR[EPVS]-1659883606314
========
if(options.syntheticBlockStartMarker==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883606316
GPR[SPVAP]-1659883606316
GPR[EPVAP]-1659883607555
GPR[EPVS]-1659883607555
========
if(syntheticBlockStartMarker==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883607556
GPR[SPVAP]-1659883607556
GPR[EPVAP]-1659883608815
GPR[EPVS]-1659883608815
========
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
checks.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883608816
GPR[SPVAP]-1659883608816
GPR[EPVAP]-1659883610071
GPR[EPVS]-1659883610071
========
if(options.instrumentationTemplate!=null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883610072
GPR[SPVAP]-1659883610072
GPR[EPVAP]-1659883611296
GPR[EPVS]-1659883611296
========
if(options.instrumentationTemplate==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883611298
GPR[SPVAP]-1659883611298
GPR[EPVAP]-1659883612520
GPR[EPVS]-1659883612520
========
if(instrumentationTemplate==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883612521
GPR[SPVAP]-1659883612521
GPR[EPVAP]-1659883613740
GPR[EPVS]-1659883613740
========
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
passes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883613741
GPR[SPVAP]-1659883613741
GPR[EPVAP]-1659883614990
GPR[EPVS]-1659883614990
========
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
allInstantiatedTypes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883614993
GPR[SPVAP]-1659883614993
GPR[EPVAP]-1659883616216
GPR[EPVS]-1659883616216
========
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
renamer.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883616217
GPR[SPVAP]-1659883616217
GPR[EPVAP]-1659883617447
GPR[EPVS]-1659883617447
========
if(var==null){
t.report(n,UNDEFINED_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883617449
GPR[SPVAP]-1659883617449
GPR[EPVAP]-1659883620126
GPR[SPVATF]-1659883620126
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883622445
GPR[EPVS]-1659883622445
========
if(options.customPasses!=null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883622446
GPR[SPVAP]-1659883622446
GPR[EPVAP]-1659883623745
GPR[EPVS]-1659883623745
========
if(options.customPasses==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883623746
GPR[SPVAP]-1659883623746
GPR[EPVAP]-1659883624967
GPR[EPVS]-1659883624967
========
if(customPasses==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883624968
GPR[SPVAP]-1659883624968
GPR[EPVAP]-1659883626195
GPR[EPVS]-1659883626195
========
if(var!=null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
passes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883626197
GPR[SPVAP]-1659883626197
GPR[EPVAP]-1659883627426
GPR[EPVS]-1659883627426
========
if(customPasses!=null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883627428
GPR[SPVAP]-1659883627428
GPR[EPVAP]-1659883628644
GPR[EPVS]-1659883628644
========
if(options.customPasses!=null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
passes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883628645
GPR[SPVAP]-1659883628645
GPR[EPVAP]-1659883629856
GPR[EPVS]-1659883629856
========
if(options.customPasses==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
passes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883629857
GPR[SPVAP]-1659883629857
GPR[EPVAP]-1659883631081
GPR[EPVS]-1659883631081
========
if(customPasses==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
passes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883631082
GPR[SPVAP]-1659883631082
GPR[EPVAP]-1659883632316
GPR[EPVS]-1659883632316
========
if(customPasses!=null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
passes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883632317
GPR[SPVAP]-1659883632317
GPR[EPVAP]-1659883633571
GPR[EPVS]-1659883633571
========
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
globals.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883633573
GPR[SPVAP]-1659883633573
GPR[EPVAP]-1659883634796
GPR[EPVS]-1659883634796
========
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
assignsByVar.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883634797
GPR[SPVAP]-1659883634797
GPR[EPVAP]-1659883636070
GPR[EPVS]-1659883636070
========
if(var==null){
if(isRemovableVar(var)&&!maybeAssign.mayHaveSecondarySideEffects){
return ;
}
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883636071
GPR[SPVAP]-1659883636071
GPR[EPVAP]-1659883637299
GPR[EPVS]-1659883637299
========
var=scope.getVar(maybeAssign.nameNode.getString());
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883637300
GPR[SPVAP]-1659883637300
GPR[EPVAP]-1659883638518
GPR[EPVS]-1659883638518
========
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
externPropertyNames.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883638520
GPR[SPVAP]-1659883638520
GPR[EPVAP]-1659883639727
GPR[EPVS]-1659883639727
========
if(var!=null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
compiler.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883639729
GPR[SPVAP]-1659883639729
GPR[EPVAP]-1659883640957
GPR[EPVS]-1659883640957
========
if(var==null){
result=trySimpilifyUnusedResult(n.getFirstChild());
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883640958
GPR[SPVAP]-1659883640958
GPR[EPVAP]-1659883642181
GPR[EPVS]-1659883642181
========
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.checkState(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883642183
GPR[SPVAP]-1659883642183
GPR[EPVAP]-1659883643410
GPR[EPVS]-1659883643410
========
if(ASSIGN==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883643411
GPR[SPVAP]-1659883643411
GPR[EPVAP]-1659883644656
GPR[EPVS]-1659883644656
========
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
workSet.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883644658
GPR[SPVAP]-1659883644658
GPR[EPVAP]-1659883645891
GPR[EPVS]-1659883645891
========
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.report(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883645892
GPR[SPVAP]-1659883645892
GPR[EPVAP]-1659883647112
GPR[EPVS]-1659883647112
========
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
iArgumentType=getJSType(parent).restrictByNotNullOrUndefined();
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883647113
GPR[SPVAP]-1659883647113
GPR[EPVAP]-1659883648369
GPR[EPVS]-1659883648369
========
if(var==parent){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883648371
GPR[SPVAP]-1659883648371
GPR[EPVAP]-1659883649586
GPR[EPVS]-1659883649586
========
addExpr(n,1);
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883649587
GPR[SPVAP]-1659883649587
GPR[EPVAP]-1659883650808
GPR[EPVS]-1659883650808
========
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
exceptionHandler.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883650810
GPR[SPVAP]-1659883650810
GPR[EPVAP]-1659883652044
GPR[EPVS]-1659883652044
========
if(REACHABLE==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883652046
GPR[SPVAP]-1659883652046
GPR[EPVAP]-1659883653273
GPR[EPVS]-1659883653273
========
tryRemoveUnconditionalBranching(n);
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883653274
GPR[SPVAP]-1659883653274
GPR[EPVAP]-1659883654524
GPR[EPVS]-1659883654524
========
if(var==-1){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883654526
GPR[SPVAP]-1659883654526
GPR[EPVAP]-1659883655792
GPR[EPVS]-1659883655792
========
if(compiler==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883655793
GPR[SPVAP]-1659883655793
GPR[EPVAP]-1659883659162
GPR[SPVATF]-1659883659162
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883661537
GPR[EPVS]-1659883661537
========
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
compiler.report(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883661539
GPR[SPVAP]-1659883661539
GPR[EPVAP]-1659883662773
GPR[EPVS]-1659883662773
========
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
continuations.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883662776
GPR[SPVAP]-1659883662776
GPR[EPVAP]-1659883664000
GPR[EPVS]-1659883664000
========
if(preserveFunctionExpressionNames==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883664002
GPR[SPVAP]-1659883664002
GPR[EPVAP]-1659883665229
GPR[EPVS]-1659883665229
========
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
reservedNames.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883665230
GPR[SPVAP]-1659883665230
GPR[EPVAP]-1659883666438
GPR[EPVS]-1659883666438
========
if(var==ResolveMode.LAZY_EXPRESSIONS){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883666439
GPR[SPVAP]-1659883666439
GPR[EPVAP]-1659883667668
GPR[EPVS]-1659883667668
========
if(var==Token.FUNCTION){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883667670
GPR[SPVAP]-1659883667670
GPR[EPVAP]-1659883668910
GPR[EPVS]-1659883668910
========
if(var==null){
try{
n=function(strictExternCheck?FunctionNode.FUNCTION_EXPRESSION:FunctionNode.FUNCTION_STATEMENT);
}catch (ParserException e) {
  break;
}

t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883668911
GPR[SPVAP]-1659883668911
GPR[EPVAP]-1659883670157
GPR[EPVS]-1659883670157
========
if(sourceMapOutputPath==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883670159
GPR[SPVAP]-1659883670159
GPR[EPVAP]-1659883671408
GPR[EPVS]-1659883671408
========
synthesizedExternsRoot.addChildToBack(n);
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883671409
GPR[SPVAP]-1659883671409
GPR[EPVAP]-1659883674051
GPR[SPVATF]-1659883674051
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM:   - com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883676366
GPR[EPVS]-1659883676366
========
if(options.anonymousFunctionNaming==AnonymousFunctionNamingPolicy.MAPPED){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883676368
GPR[SPVAP]-1659883676368
GPR[EPVAP]-1659883677606
GPR[EPVS]-1659883677606
========
if(options.anonymousFunctionNaming==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883677607
GPR[SPVAP]-1659883677607
GPR[EPVAP]-1659883678860
GPR[EPVS]-1659883678860
========
if(var==AnonymousFunctionNamingPolicy.MAPPED){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883678862
GPR[SPVAP]-1659883678862
GPR[EPVAP]-1659883680089
GPR[EPVS]-1659883680089
========
if(anonymousFunctionNaming==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883680089
GPR[SPVAP]-1659883680089
GPR[EPVAP]-1659883681316
GPR[EPVS]-1659883681316
========
if(options.propertyRenaming!=PropertyRenamingPolicy.OFF){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883681317
GPR[SPVAP]-1659883681317
GPR[EPVAP]-1659883682583
GPR[EPVS]-1659883682583
========
if(options.propertyRenaming==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883682584
GPR[SPVAP]-1659883682584
GPR[EPVAP]-1659883683812
GPR[EPVS]-1659883683812
========
if(var==PropertyRenamingPolicy.OFF){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883683813
GPR[SPVAP]-1659883683813
GPR[EPVAP]-1659883685041
GPR[EPVS]-1659883685041
========
if(propertyRenaming==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883685042
GPR[SPVAP]-1659883685042
GPR[EPVAP]-1659883686280
GPR[EPVS]-1659883686280
========
if(options.variableRenaming!=VariableRenamingPolicy.ALL){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883686281
GPR[SPVAP]-1659883686281
GPR[EPVAP]-1659883687510
GPR[EPVS]-1659883687510
========
if(options.variableRenaming==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883687511
GPR[SPVAP]-1659883687511
GPR[EPVAP]-1659883688745
GPR[EPVS]-1659883688745
========
if(var==VariableRenamingPolicy.ALL){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883688746
GPR[SPVAP]-1659883688746
GPR[EPVAP]-1659883689992
GPR[EPVS]-1659883689992
========
if(variableRenaming==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883689993
GPR[SPVAP]-1659883689993
GPR[EPVAP]-1659883691227
GPR[EPVS]-1659883691227
========
if(options.variableRenaming!=VariableRenamingPolicy.OFF){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883691228
GPR[SPVAP]-1659883691228
GPR[EPVAP]-1659883692463
GPR[EPVS]-1659883692463
========
if(var==VariableRenamingPolicy.OFF){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883692465
GPR[SPVAP]-1659883692465
GPR[EPVAP]-1659883693701
GPR[EPVS]-1659883693701
========
if(options.variableRenaming!=null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883693702
GPR[SPVAP]-1659883693702
GPR[EPVAP]-1659883694932
GPR[EPVS]-1659883694932
========
if(variableRenaming!=null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883694933
GPR[SPVAP]-1659883694933
GPR[EPVAP]-1659883696177
GPR[EPVS]-1659883696177
========
if(options.variableRenaming==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
passes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883696178
GPR[SPVAP]-1659883696178
GPR[EPVAP]-1659883697418
GPR[EPVS]-1659883697418
========
if(variableRenaming==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
passes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883697419
GPR[SPVAP]-1659883697419
GPR[EPVAP]-1659883698665
GPR[EPVS]-1659883698665
========
if(options.variableRenaming!=null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
passes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883698665
GPR[SPVAP]-1659883698665
GPR[EPVAP]-1659883699892
GPR[EPVS]-1659883699892
========
if(variableRenaming!=null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
passes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883699893
GPR[SPVAP]-1659883699893
GPR[EPVAP]-1659883701135
GPR[EPVS]-1659883701135
========
if(options.anonymousFunctionNaming==AnonymousFunctionNamingPolicy.UNMAPPED){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883701137
GPR[SPVAP]-1659883701137
GPR[EPVAP]-1659883702418
GPR[EPVS]-1659883702418
========
if(var==AnonymousFunctionNamingPolicy.UNMAPPED){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883702419
GPR[SPVAP]-1659883702419
GPR[EPVAP]-1659883703644
GPR[EPVS]-1659883703644
========
if(options.anonymousFunctionNaming==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
passes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883703646
GPR[SPVAP]-1659883703646
GPR[EPVAP]-1659883704862
GPR[EPVS]-1659883704862
========
if(anonymousFunctionNaming==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
passes.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883704863
GPR[SPVAP]-1659883704863
GPR[EPVAP]-1659883706097
GPR[EPVS]-1659883706097
========
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
builder.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883706099
GPR[SPVAP]-1659883706099
GPR[EPVAP]-1659883707328
GPR[EPVS]-1659883707328
========
if(var==null){
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.append(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883707329
GPR[SPVAP]-1659883707329
GPR[EPVAP]-1659883708558
GPR[EPVS]-1659883708558
========
if(var==null){
reportCodeChange();
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883708559
GPR[SPVAP]-1659883708559
GPR[EPVAP]-1659883709786
GPR[EPVS]-1659883709786
========
if(var==null){
n.addChildToBack(new Node(Token.AND,parent,n.detachFromParent()).copyInformationFrom(cond));
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883709788
GPR[SPVAP]-1659883709788
GPR[EPVAP]-1659883711017
GPR[EPVS]-1659883711017
========
if(var==null){
n.addChildrenToBack(parent.detachFromParent());
t.report(n,UNDEFINED_EXTERN_VAR_ERROR,n.getString());
varsToDeclareInExterns.add(n.getString());
}

========
MM Copying to MM
GPR[SPVS]-1659883711018
GPR[SPVAP]-1659883711018
GPR[EPVAP]-1659883713700
GPR[SPVATF]-1659883713700
TESTING : com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
MM: Running ant (run.dev.tests)................................................ 
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659899244241
GPR[EPVS]-1659899244241
Timeout!
End running Closure/79 results at /experiment_home///results/SimFix/Closure/79/seed_263/
\n\nNode: host-56\n
\n\nDate: Sun 07 Aug 2022 12:07:24 PM PDT\n
Removing checked out dir script/workingdir/SimFix/closure/closure_79_buggy
GPR[SSLE]-1659899244308
GPR[ESLE]-1659899304313
